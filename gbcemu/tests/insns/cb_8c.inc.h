    TEST(gbcemu, opcode_cb_8c) {
        GBCEmu gbc{};
        uint8_t cartridge[0x8000];
        cartridge[0x149] = 0x02; // 8kb external RAM
        gbc.loadCartridge(new FlashGamePak(cartridge));
        // CB 8C 0000
        gbc.setState(0xe6fb, 0xf682, 0xcb00, 0x64cd, 0x914e, 0x7a1, 0x1, 0x0);
        gbc.writeMem(0xe6fb, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xcb, gbc.a());
        EXPECT(0x64, gbc.b());
        EXPECT(0xcd, gbc.c());
        EXPECT(0x91, gbc.d());
        EXPECT(0x4e, gbc.e());
        EXPECT(0x5, gbc.h());
        EXPECT(0xa1, gbc.l());
        EXPECT(0xf682, gbc.sp());
        EXPECT(0xe6fd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe6fb));
        EXPECT(0x8c, gbc.readMem(0xe6fc));
        // CB 8C 0001
        gbc.setState(0xc71c, 0xf3d0, 0xdab0, 0xf113, 0x27a2, 0x9ad, 0x0, 0x0);
        gbc.writeMem(0xc71c, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xda, gbc.a());
        EXPECT(0xf1, gbc.b());
        EXPECT(0x13, gbc.c());
        EXPECT(0x27, gbc.d());
        EXPECT(0xa2, gbc.e());
        EXPECT(0x9, gbc.h());
        EXPECT(0xad, gbc.l());
        EXPECT(0xf3d0, gbc.sp());
        EXPECT(0xc71e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc71c));
        EXPECT(0x8c, gbc.readMem(0xc71d));
        // CB 8C 0002
        gbc.setState(0x80c, 0x341f, 0xf0e0, 0xa55a, 0x5503, 0x2e7c, 0x0, 0x0);
        gbc.writeMem(0x80c, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xf0, gbc.a());
        EXPECT(0xa5, gbc.b());
        EXPECT(0x5a, gbc.c());
        EXPECT(0x55, gbc.d());
        EXPECT(0x3, gbc.e());
        EXPECT(0x2c, gbc.h());
        EXPECT(0x7c, gbc.l());
        EXPECT(0x341f, gbc.sp());
        EXPECT(0x80e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 0003
        gbc.setState(0x1df6, 0x8509, 0x2c0, 0x5551, 0xe8f6, 0xe242, 0x0, 0x0);
        gbc.writeMem(0x1df6, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x2, gbc.a());
        EXPECT(0x55, gbc.b());
        EXPECT(0x51, gbc.c());
        EXPECT(0xe8, gbc.d());
        EXPECT(0xf6, gbc.e());
        EXPECT(0xe0, gbc.h());
        EXPECT(0x42, gbc.l());
        EXPECT(0x8509, gbc.sp());
        EXPECT(0x1df8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 0004
        gbc.setState(0x9ed0, 0xc82d, 0x7390, 0x51ca, 0x32ce, 0xd5a4, 0x0, 0x0);
        gbc.writeMem(0x9ed0, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x73, gbc.a());
        EXPECT(0x51, gbc.b());
        EXPECT(0xca, gbc.c());
        EXPECT(0x32, gbc.d());
        EXPECT(0xce, gbc.e());
        EXPECT(0xd5, gbc.h());
        EXPECT(0xa4, gbc.l());
        EXPECT(0xc82d, gbc.sp());
        EXPECT(0x9ed2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9ed0));
        EXPECT(0x8c, gbc.readMem(0x9ed1));
        // CB 8C 0005
        gbc.setState(0x2038, 0x1b7b, 0x250, 0x5090, 0xe125, 0x7ee9, 0x1, 0x0);
        gbc.writeMem(0x2038, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x2, gbc.a());
        EXPECT(0x50, gbc.b());
        EXPECT(0x90, gbc.c());
        EXPECT(0xe1, gbc.d());
        EXPECT(0x25, gbc.e());
        EXPECT(0x7c, gbc.h());
        EXPECT(0xe9, gbc.l());
        EXPECT(0x1b7b, gbc.sp());
        EXPECT(0x203a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 0006
        gbc.setState(0xaf9b, 0x45dd, 0x23f0, 0xad52, 0xde0f, 0x840c, 0x0, 0x0);
        gbc.writeMem(0xaf9b, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x23, gbc.a());
        EXPECT(0xad, gbc.b());
        EXPECT(0x52, gbc.c());
        EXPECT(0xde, gbc.d());
        EXPECT(0xf, gbc.e());
        EXPECT(0x84, gbc.h());
        EXPECT(0xc, gbc.l());
        EXPECT(0x45dd, gbc.sp());
        EXPECT(0xaf9d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaf9b));
        EXPECT(0x8c, gbc.readMem(0xaf9c));
        // CB 8C 0007
        gbc.setState(0x14a9, 0x5c71, 0x18c0, 0x5b84, 0x9583, 0x913f, 0x0, 0x1);
        gbc.writeMem(0x14a9, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x18, gbc.a());
        EXPECT(0x5b, gbc.b());
        EXPECT(0x84, gbc.c());
        EXPECT(0x95, gbc.d());
        EXPECT(0x83, gbc.e());
        EXPECT(0x91, gbc.h());
        EXPECT(0x3f, gbc.l());
        EXPECT(0x5c71, gbc.sp());
        EXPECT(0x14ab, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 0008
        gbc.setState(0x1de1, 0x3f40, 0x5c20, 0x659e, 0x468c, 0x77c8, 0x0, 0x1);
        gbc.writeMem(0x1de1, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x5c, gbc.a());
        EXPECT(0x65, gbc.b());
        EXPECT(0x9e, gbc.c());
        EXPECT(0x46, gbc.d());
        EXPECT(0x8c, gbc.e());
        EXPECT(0x75, gbc.h());
        EXPECT(0xc8, gbc.l());
        EXPECT(0x3f40, gbc.sp());
        EXPECT(0x1de3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 0009
        gbc.setState(0x87ea, 0xd445, 0x51a0, 0x14a5, 0x90b1, 0x5db, 0x1, 0x0);
        gbc.writeMem(0x87ea, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x51, gbc.a());
        EXPECT(0x14, gbc.b());
        EXPECT(0xa5, gbc.c());
        EXPECT(0x90, gbc.d());
        EXPECT(0xb1, gbc.e());
        EXPECT(0x5, gbc.h());
        EXPECT(0xdb, gbc.l());
        EXPECT(0xd445, gbc.sp());
        EXPECT(0x87ec, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x87ea));
        EXPECT(0x8c, gbc.readMem(0x87eb));
        // CB 8C 000B
        gbc.setState(0x5aa7, 0xe2b3, 0xd210, 0x7df6, 0x2970, 0x14c6, 0x0, 0x1);
        gbc.writeMem(0x5aa7, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xd2, gbc.a());
        EXPECT(0x7d, gbc.b());
        EXPECT(0xf6, gbc.c());
        EXPECT(0x29, gbc.d());
        EXPECT(0x70, gbc.e());
        EXPECT(0x14, gbc.h());
        EXPECT(0xc6, gbc.l());
        EXPECT(0xe2b3, gbc.sp());
        EXPECT(0x5aa9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 000C
        gbc.setState(0xbd86, 0xbf2a, 0xd510, 0x9ea3, 0x450b, 0xc2fc, 0x1, 0x1);
        gbc.writeMem(0xbd86, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xd5, gbc.a());
        EXPECT(0x9e, gbc.b());
        EXPECT(0xa3, gbc.c());
        EXPECT(0x45, gbc.d());
        EXPECT(0xb, gbc.e());
        EXPECT(0xc0, gbc.h());
        EXPECT(0xfc, gbc.l());
        EXPECT(0xbf2a, gbc.sp());
        EXPECT(0xbd88, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbd86));
        EXPECT(0x8c, gbc.readMem(0xbd87));
        // CB 8C 000D
        gbc.setState(0x4f33, 0xc65d, 0x2850, 0x17c0, 0x6868, 0x71a4, 0x0, 0x1);
        gbc.writeMem(0x4f33, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x28, gbc.a());
        EXPECT(0x17, gbc.b());
        EXPECT(0xc0, gbc.c());
        EXPECT(0x68, gbc.d());
        EXPECT(0x68, gbc.e());
        EXPECT(0x71, gbc.h());
        EXPECT(0xa4, gbc.l());
        EXPECT(0xc65d, gbc.sp());
        EXPECT(0x4f35, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 000E
        gbc.setState(0x6817, 0xda33, 0x79d0, 0x6751, 0x61ad, 0x9099, 0x1, 0x0);
        gbc.writeMem(0x6817, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x79, gbc.a());
        EXPECT(0x67, gbc.b());
        EXPECT(0x51, gbc.c());
        EXPECT(0x61, gbc.d());
        EXPECT(0xad, gbc.e());
        EXPECT(0x90, gbc.h());
        EXPECT(0x99, gbc.l());
        EXPECT(0xda33, gbc.sp());
        EXPECT(0x6819, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 000F
        gbc.setState(0xd328, 0xfd77, 0x8f50, 0xe061, 0xfb26, 0x9c4f, 0x0, 0x0);
        gbc.writeMem(0xd328, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x8f, gbc.a());
        EXPECT(0xe0, gbc.b());
        EXPECT(0x61, gbc.c());
        EXPECT(0xfb, gbc.d());
        EXPECT(0x26, gbc.e());
        EXPECT(0x9c, gbc.h());
        EXPECT(0x4f, gbc.l());
        EXPECT(0xfd77, gbc.sp());
        EXPECT(0xd32a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd328));
        EXPECT(0x8c, gbc.readMem(0xd329));
        // CB 8C 0010
        gbc.setState(0xc331, 0x68bf, 0x67e0, 0x9d36, 0xc773, 0xa26, 0x0, 0x0);
        gbc.writeMem(0xc331, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x67, gbc.a());
        EXPECT(0x9d, gbc.b());
        EXPECT(0x36, gbc.c());
        EXPECT(0xc7, gbc.d());
        EXPECT(0x73, gbc.e());
        EXPECT(0x8, gbc.h());
        EXPECT(0x26, gbc.l());
        EXPECT(0x68bf, gbc.sp());
        EXPECT(0xc333, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc331));
        EXPECT(0x8c, gbc.readMem(0xc332));
        // CB 8C 0011
        gbc.setState(0x26cd, 0x46bb, 0x2200, 0x9798, 0xad10, 0x1d38, 0x1, 0x0);
        gbc.writeMem(0x26cd, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x22, gbc.a());
        EXPECT(0x97, gbc.b());
        EXPECT(0x98, gbc.c());
        EXPECT(0xad, gbc.d());
        EXPECT(0x10, gbc.e());
        EXPECT(0x1d, gbc.h());
        EXPECT(0x38, gbc.l());
        EXPECT(0x46bb, gbc.sp());
        EXPECT(0x26cf, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 0012
        gbc.setState(0x9bd, 0x831e, 0xe480, 0xd65e, 0xafad, 0xa086, 0x1, 0x1);
        gbc.writeMem(0x9bd, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xe4, gbc.a());
        EXPECT(0xd6, gbc.b());
        EXPECT(0x5e, gbc.c());
        EXPECT(0xaf, gbc.d());
        EXPECT(0xad, gbc.e());
        EXPECT(0xa0, gbc.h());
        EXPECT(0x86, gbc.l());
        EXPECT(0x831e, gbc.sp());
        EXPECT(0x9bf, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 0013
        gbc.setState(0x2e15, 0xcbb4, 0xcd0, 0x6a5a, 0xb878, 0xb360, 0x1, 0x1);
        gbc.writeMem(0x2e15, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xc, gbc.a());
        EXPECT(0x6a, gbc.b());
        EXPECT(0x5a, gbc.c());
        EXPECT(0xb8, gbc.d());
        EXPECT(0x78, gbc.e());
        EXPECT(0xb1, gbc.h());
        EXPECT(0x60, gbc.l());
        EXPECT(0xcbb4, gbc.sp());
        EXPECT(0x2e17, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 0014
        gbc.setState(0x5913, 0x1f58, 0x2480, 0x5a14, 0xc4ae, 0xd7eb, 0x0, 0x1);
        gbc.writeMem(0x5913, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x24, gbc.a());
        EXPECT(0x5a, gbc.b());
        EXPECT(0x14, gbc.c());
        EXPECT(0xc4, gbc.d());
        EXPECT(0xae, gbc.e());
        EXPECT(0xd5, gbc.h());
        EXPECT(0xeb, gbc.l());
        EXPECT(0x1f58, gbc.sp());
        EXPECT(0x5915, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 0015
        gbc.setState(0x3609, 0x9175, 0xe2c0, 0x7a97, 0x1682, 0xc9c3, 0x0, 0x1);
        gbc.writeMem(0x3609, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xe2, gbc.a());
        EXPECT(0x7a, gbc.b());
        EXPECT(0x97, gbc.c());
        EXPECT(0x16, gbc.d());
        EXPECT(0x82, gbc.e());
        EXPECT(0xc9, gbc.h());
        EXPECT(0xc3, gbc.l());
        EXPECT(0x9175, gbc.sp());
        EXPECT(0x360b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 0016
        gbc.setState(0x8bd1, 0x1b69, 0x5ca0, 0xe500, 0xa9eb, 0xe1c9, 0x0, 0x1);
        gbc.writeMem(0x8bd1, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x5c, gbc.a());
        EXPECT(0xe5, gbc.b());
        EXPECT(0x0, gbc.c());
        EXPECT(0xa9, gbc.d());
        EXPECT(0xeb, gbc.e());
        EXPECT(0xe1, gbc.h());
        EXPECT(0xc9, gbc.l());
        EXPECT(0x1b69, gbc.sp());
        EXPECT(0x8bd3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8bd1));
        EXPECT(0x8c, gbc.readMem(0x8bd2));
        // CB 8C 0018
        gbc.setState(0x530b, 0xa398, 0x9ea0, 0xc974, 0x1bfc, 0x438a, 0x0, 0x1);
        gbc.writeMem(0x530b, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x9e, gbc.a());
        EXPECT(0xc9, gbc.b());
        EXPECT(0x74, gbc.c());
        EXPECT(0x1b, gbc.d());
        EXPECT(0xfc, gbc.e());
        EXPECT(0x41, gbc.h());
        EXPECT(0x8a, gbc.l());
        EXPECT(0xa398, gbc.sp());
        EXPECT(0x530d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 0019
        gbc.setState(0x4b1a, 0x9ef9, 0x36e0, 0x2468, 0xf585, 0x704e, 0x0, 0x1);
        gbc.writeMem(0x4b1a, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x36, gbc.a());
        EXPECT(0x24, gbc.b());
        EXPECT(0x68, gbc.c());
        EXPECT(0xf5, gbc.d());
        EXPECT(0x85, gbc.e());
        EXPECT(0x70, gbc.h());
        EXPECT(0x4e, gbc.l());
        EXPECT(0x9ef9, gbc.sp());
        EXPECT(0x4b1c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 001A
        gbc.setState(0x3d60, 0xeb0, 0x6ef0, 0xc815, 0xec5c, 0xf0e1, 0x1, 0x1);
        gbc.writeMem(0x3d60, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x6e, gbc.a());
        EXPECT(0xc8, gbc.b());
        EXPECT(0x15, gbc.c());
        EXPECT(0xec, gbc.d());
        EXPECT(0x5c, gbc.e());
        EXPECT(0xf0, gbc.h());
        EXPECT(0xe1, gbc.l());
        EXPECT(0xeb0, gbc.sp());
        EXPECT(0x3d62, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 001B
        gbc.setState(0x6078, 0x1e45, 0xdc90, 0xa97e, 0x7066, 0x80a0, 0x1, 0x0);
        gbc.writeMem(0x6078, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xdc, gbc.a());
        EXPECT(0xa9, gbc.b());
        EXPECT(0x7e, gbc.c());
        EXPECT(0x70, gbc.d());
        EXPECT(0x66, gbc.e());
        EXPECT(0x80, gbc.h());
        EXPECT(0xa0, gbc.l());
        EXPECT(0x1e45, gbc.sp());
        EXPECT(0x607a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 001C
        gbc.setState(0x2f45, 0x4506, 0xa900, 0x4561, 0x3b95, 0xa2fa, 0x1, 0x1);
        gbc.writeMem(0x2f45, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xa9, gbc.a());
        EXPECT(0x45, gbc.b());
        EXPECT(0x61, gbc.c());
        EXPECT(0x3b, gbc.d());
        EXPECT(0x95, gbc.e());
        EXPECT(0xa0, gbc.h());
        EXPECT(0xfa, gbc.l());
        EXPECT(0x4506, gbc.sp());
        EXPECT(0x2f47, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 001D
        gbc.setState(0xd455, 0xec20, 0x2200, 0xe026, 0x2f80, 0xb62e, 0x0, 0x1);
        gbc.writeMem(0xd455, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x22, gbc.a());
        EXPECT(0xe0, gbc.b());
        EXPECT(0x26, gbc.c());
        EXPECT(0x2f, gbc.d());
        EXPECT(0x80, gbc.e());
        EXPECT(0xb4, gbc.h());
        EXPECT(0x2e, gbc.l());
        EXPECT(0xec20, gbc.sp());
        EXPECT(0xd457, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd455));
        EXPECT(0x8c, gbc.readMem(0xd456));
        // CB 8C 001E
        gbc.setState(0xe194, 0x670a, 0xc410, 0xfa52, 0x257e, 0x42f5, 0x1, 0x1);
        gbc.writeMem(0xe194, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xc4, gbc.a());
        EXPECT(0xfa, gbc.b());
        EXPECT(0x52, gbc.c());
        EXPECT(0x25, gbc.d());
        EXPECT(0x7e, gbc.e());
        EXPECT(0x40, gbc.h());
        EXPECT(0xf5, gbc.l());
        EXPECT(0x670a, gbc.sp());
        EXPECT(0xe196, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe194));
        EXPECT(0x8c, gbc.readMem(0xe195));
        // CB 8C 001F
        gbc.setState(0xbd78, 0x46ea, 0xbff0, 0xbb73, 0x7bb1, 0x2785, 0x0, 0x1);
        gbc.writeMem(0xbd78, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xbf, gbc.a());
        EXPECT(0xbb, gbc.b());
        EXPECT(0x73, gbc.c());
        EXPECT(0x7b, gbc.d());
        EXPECT(0xb1, gbc.e());
        EXPECT(0x25, gbc.h());
        EXPECT(0x85, gbc.l());
        EXPECT(0x46ea, gbc.sp());
        EXPECT(0xbd7a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbd78));
        EXPECT(0x8c, gbc.readMem(0xbd79));
        // CB 8C 0020
        gbc.setState(0x75b3, 0x1e9a, 0x570, 0xa6bb, 0xd781, 0x1bda, 0x0, 0x1);
        gbc.writeMem(0x75b3, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x5, gbc.a());
        EXPECT(0xa6, gbc.b());
        EXPECT(0xbb, gbc.c());
        EXPECT(0xd7, gbc.d());
        EXPECT(0x81, gbc.e());
        EXPECT(0x19, gbc.h());
        EXPECT(0xda, gbc.l());
        EXPECT(0x1e9a, gbc.sp());
        EXPECT(0x75b5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 0021
        gbc.setState(0x56e9, 0xf80, 0xd100, 0xee1, 0x9329, 0xb302, 0x1, 0x1);
        gbc.writeMem(0x56e9, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xd1, gbc.a());
        EXPECT(0xe, gbc.b());
        EXPECT(0xe1, gbc.c());
        EXPECT(0x93, gbc.d());
        EXPECT(0x29, gbc.e());
        EXPECT(0xb1, gbc.h());
        EXPECT(0x2, gbc.l());
        EXPECT(0xf80, gbc.sp());
        EXPECT(0x56eb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 0022
        gbc.setState(0x42b5, 0x8f8e, 0xd160, 0x44c9, 0x7bb6, 0x307, 0x0, 0x1);
        gbc.writeMem(0x42b5, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xd1, gbc.a());
        EXPECT(0x44, gbc.b());
        EXPECT(0xc9, gbc.c());
        EXPECT(0x7b, gbc.d());
        EXPECT(0xb6, gbc.e());
        EXPECT(0x1, gbc.h());
        EXPECT(0x7, gbc.l());
        EXPECT(0x8f8e, gbc.sp());
        EXPECT(0x42b7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 0024
        gbc.setState(0x649, 0x6456, 0xd760, 0x210f, 0xae76, 0xf5a9, 0x0, 0x1);
        gbc.writeMem(0x649, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xd7, gbc.a());
        EXPECT(0x21, gbc.b());
        EXPECT(0xf, gbc.c());
        EXPECT(0xae, gbc.d());
        EXPECT(0x76, gbc.e());
        EXPECT(0xf5, gbc.h());
        EXPECT(0xa9, gbc.l());
        EXPECT(0x6456, gbc.sp());
        EXPECT(0x64b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 0025
        gbc.setState(0x7d43, 0x7de5, 0xef20, 0x755a, 0xc84a, 0x4b1b, 0x0, 0x1);
        gbc.writeMem(0x7d43, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xef, gbc.a());
        EXPECT(0x75, gbc.b());
        EXPECT(0x5a, gbc.c());
        EXPECT(0xc8, gbc.d());
        EXPECT(0x4a, gbc.e());
        EXPECT(0x49, gbc.h());
        EXPECT(0x1b, gbc.l());
        EXPECT(0x7de5, gbc.sp());
        EXPECT(0x7d45, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 0026
        gbc.setState(0x2a43, 0x6ff4, 0xdcb0, 0x4fca, 0x97a, 0x2b05, 0x0, 0x1);
        gbc.writeMem(0x2a43, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xdc, gbc.a());
        EXPECT(0x4f, gbc.b());
        EXPECT(0xca, gbc.c());
        EXPECT(0x9, gbc.d());
        EXPECT(0x7a, gbc.e());
        EXPECT(0x29, gbc.h());
        EXPECT(0x5, gbc.l());
        EXPECT(0x6ff4, gbc.sp());
        EXPECT(0x2a45, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 0027
        gbc.setState(0xcf1b, 0xf4e9, 0xd7c0, 0x8b9c, 0x4bc2, 0x3e5d, 0x0, 0x0);
        gbc.writeMem(0xcf1b, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xd7, gbc.a());
        EXPECT(0x8b, gbc.b());
        EXPECT(0x9c, gbc.c());
        EXPECT(0x4b, gbc.d());
        EXPECT(0xc2, gbc.e());
        EXPECT(0x3c, gbc.h());
        EXPECT(0x5d, gbc.l());
        EXPECT(0xf4e9, gbc.sp());
        EXPECT(0xcf1d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcf1b));
        EXPECT(0x8c, gbc.readMem(0xcf1c));
        // CB 8C 0028
        gbc.setState(0xd9ed, 0x315, 0x78c0, 0x1634, 0xd2f8, 0x511a, 0x1, 0x1);
        gbc.writeMem(0xd9ed, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x78, gbc.a());
        EXPECT(0x16, gbc.b());
        EXPECT(0x34, gbc.c());
        EXPECT(0xd2, gbc.d());
        EXPECT(0xf8, gbc.e());
        EXPECT(0x51, gbc.h());
        EXPECT(0x1a, gbc.l());
        EXPECT(0x315, gbc.sp());
        EXPECT(0xd9ef, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd9ed));
        EXPECT(0x8c, gbc.readMem(0xd9ee));
        // CB 8C 0029
        gbc.setState(0xbea5, 0x5063, 0xe7e0, 0x626b, 0xc3bb, 0xaec5, 0x0, 0x1);
        gbc.writeMem(0xbea5, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xe7, gbc.a());
        EXPECT(0x62, gbc.b());
        EXPECT(0x6b, gbc.c());
        EXPECT(0xc3, gbc.d());
        EXPECT(0xbb, gbc.e());
        EXPECT(0xac, gbc.h());
        EXPECT(0xc5, gbc.l());
        EXPECT(0x5063, gbc.sp());
        EXPECT(0xbea7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbea5));
        EXPECT(0x8c, gbc.readMem(0xbea6));
        // CB 8C 002A
        gbc.setState(0x8910, 0x960a, 0x2ea0, 0xf6b7, 0xf4df, 0xfad4, 0x1, 0x0);
        gbc.writeMem(0x8910, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x2e, gbc.a());
        EXPECT(0xf6, gbc.b());
        EXPECT(0xb7, gbc.c());
        EXPECT(0xf4, gbc.d());
        EXPECT(0xdf, gbc.e());
        EXPECT(0xf8, gbc.h());
        EXPECT(0xd4, gbc.l());
        EXPECT(0x960a, gbc.sp());
        EXPECT(0x8912, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8910));
        EXPECT(0x8c, gbc.readMem(0x8911));
        // CB 8C 002B
        gbc.setState(0xb0c1, 0x9944, 0x8bd0, 0x6e6d, 0x458c, 0x81df, 0x0, 0x0);
        gbc.writeMem(0xb0c1, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x8b, gbc.a());
        EXPECT(0x6e, gbc.b());
        EXPECT(0x6d, gbc.c());
        EXPECT(0x45, gbc.d());
        EXPECT(0x8c, gbc.e());
        EXPECT(0x81, gbc.h());
        EXPECT(0xdf, gbc.l());
        EXPECT(0x9944, gbc.sp());
        EXPECT(0xb0c3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb0c1));
        EXPECT(0x8c, gbc.readMem(0xb0c2));
        // CB 8C 002C
        gbc.setState(0x6f79, 0xc6c1, 0x4410, 0x5c7f, 0xba55, 0x8a10, 0x0, 0x1);
        gbc.writeMem(0x6f79, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x44, gbc.a());
        EXPECT(0x5c, gbc.b());
        EXPECT(0x7f, gbc.c());
        EXPECT(0xba, gbc.d());
        EXPECT(0x55, gbc.e());
        EXPECT(0x88, gbc.h());
        EXPECT(0x10, gbc.l());
        EXPECT(0xc6c1, gbc.sp());
        EXPECT(0x6f7b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 002D
        gbc.setState(0x3ae4, 0xd311, 0x54a0, 0x94a1, 0x51b8, 0xfd27, 0x0, 0x0);
        gbc.writeMem(0x3ae4, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x54, gbc.a());
        EXPECT(0x94, gbc.b());
        EXPECT(0xa1, gbc.c());
        EXPECT(0x51, gbc.d());
        EXPECT(0xb8, gbc.e());
        EXPECT(0xfd, gbc.h());
        EXPECT(0x27, gbc.l());
        EXPECT(0xd311, gbc.sp());
        EXPECT(0x3ae6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 002E
        gbc.setState(0x224f, 0x3817, 0x51a0, 0xcc3d, 0x4cb0, 0xc4e7, 0x0, 0x0);
        gbc.writeMem(0x224f, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x51, gbc.a());
        EXPECT(0xcc, gbc.b());
        EXPECT(0x3d, gbc.c());
        EXPECT(0x4c, gbc.d());
        EXPECT(0xb0, gbc.e());
        EXPECT(0xc4, gbc.h());
        EXPECT(0xe7, gbc.l());
        EXPECT(0x3817, gbc.sp());
        EXPECT(0x2251, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 002F
        gbc.setState(0x2d0f, 0x9614, 0xb00, 0xcd61, 0x7624, 0xb068, 0x0, 0x0);
        gbc.writeMem(0x2d0f, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xb, gbc.a());
        EXPECT(0xcd, gbc.b());
        EXPECT(0x61, gbc.c());
        EXPECT(0x76, gbc.d());
        EXPECT(0x24, gbc.e());
        EXPECT(0xb0, gbc.h());
        EXPECT(0x68, gbc.l());
        EXPECT(0x9614, gbc.sp());
        EXPECT(0x2d11, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 0030
        gbc.setState(0x6479, 0xfff, 0xf190, 0x5b1c, 0x3ba8, 0xfc4e, 0x0, 0x1);
        gbc.writeMem(0x6479, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xf1, gbc.a());
        EXPECT(0x5b, gbc.b());
        EXPECT(0x1c, gbc.c());
        EXPECT(0x3b, gbc.d());
        EXPECT(0xa8, gbc.e());
        EXPECT(0xfc, gbc.h());
        EXPECT(0x4e, gbc.l());
        EXPECT(0xfff, gbc.sp());
        EXPECT(0x647b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 0031
        gbc.setState(0xa797, 0x12a5, 0x4ce0, 0x7ab5, 0xe020, 0x994e, 0x0, 0x0);
        gbc.writeMem(0xa797, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x4c, gbc.a());
        EXPECT(0x7a, gbc.b());
        EXPECT(0xb5, gbc.c());
        EXPECT(0xe0, gbc.d());
        EXPECT(0x20, gbc.e());
        EXPECT(0x99, gbc.h());
        EXPECT(0x4e, gbc.l());
        EXPECT(0x12a5, gbc.sp());
        EXPECT(0xa799, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa797));
        EXPECT(0x8c, gbc.readMem(0xa798));
        // CB 8C 0032
        gbc.setState(0x835d, 0x86ea, 0x11f0, 0xf297, 0xa44a, 0xb3a4, 0x1, 0x1);
        gbc.writeMem(0x835d, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x11, gbc.a());
        EXPECT(0xf2, gbc.b());
        EXPECT(0x97, gbc.c());
        EXPECT(0xa4, gbc.d());
        EXPECT(0x4a, gbc.e());
        EXPECT(0xb1, gbc.h());
        EXPECT(0xa4, gbc.l());
        EXPECT(0x86ea, gbc.sp());
        EXPECT(0x835f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x835d));
        EXPECT(0x8c, gbc.readMem(0x835e));
        // CB 8C 0033
        gbc.setState(0xda72, 0x6f45, 0x6900, 0x5ca9, 0xde54, 0x152c, 0x1, 0x1);
        gbc.writeMem(0xda72, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x69, gbc.a());
        EXPECT(0x5c, gbc.b());
        EXPECT(0xa9, gbc.c());
        EXPECT(0xde, gbc.d());
        EXPECT(0x54, gbc.e());
        EXPECT(0x15, gbc.h());
        EXPECT(0x2c, gbc.l());
        EXPECT(0x6f45, gbc.sp());
        EXPECT(0xda74, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xda72));
        EXPECT(0x8c, gbc.readMem(0xda73));
        // CB 8C 0034
        gbc.setState(0x44ea, 0xa39e, 0x3830, 0x9cbc, 0xca77, 0xcbdb, 0x0, 0x0);
        gbc.writeMem(0x44ea, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x38, gbc.a());
        EXPECT(0x9c, gbc.b());
        EXPECT(0xbc, gbc.c());
        EXPECT(0xca, gbc.d());
        EXPECT(0x77, gbc.e());
        EXPECT(0xc9, gbc.h());
        EXPECT(0xdb, gbc.l());
        EXPECT(0xa39e, gbc.sp());
        EXPECT(0x44ec, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 0035
        gbc.setState(0x25e5, 0xf82a, 0xc2c0, 0x70b6, 0xd31b, 0x11d3, 0x1, 0x0);
        gbc.writeMem(0x25e5, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xc2, gbc.a());
        EXPECT(0x70, gbc.b());
        EXPECT(0xb6, gbc.c());
        EXPECT(0xd3, gbc.d());
        EXPECT(0x1b, gbc.e());
        EXPECT(0x11, gbc.h());
        EXPECT(0xd3, gbc.l());
        EXPECT(0xf82a, gbc.sp());
        EXPECT(0x25e7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 0036
        gbc.setState(0xce12, 0x4a40, 0x5dd0, 0xf634, 0xd1a3, 0xd320, 0x1, 0x0);
        gbc.writeMem(0xce12, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x5d, gbc.a());
        EXPECT(0xf6, gbc.b());
        EXPECT(0x34, gbc.c());
        EXPECT(0xd1, gbc.d());
        EXPECT(0xa3, gbc.e());
        EXPECT(0xd1, gbc.h());
        EXPECT(0x20, gbc.l());
        EXPECT(0x4a40, gbc.sp());
        EXPECT(0xce14, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xce12));
        EXPECT(0x8c, gbc.readMem(0xce13));
        // CB 8C 0037
        gbc.setState(0x8bee, 0x8b09, 0x7b0, 0xeff0, 0xdf2b, 0x2a2, 0x0, 0x0);
        gbc.writeMem(0x8bee, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x7, gbc.a());
        EXPECT(0xef, gbc.b());
        EXPECT(0xf0, gbc.c());
        EXPECT(0xdf, gbc.d());
        EXPECT(0x2b, gbc.e());
        EXPECT(0x0, gbc.h());
        EXPECT(0xa2, gbc.l());
        EXPECT(0x8b09, gbc.sp());
        EXPECT(0x8bf0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8bee));
        EXPECT(0x8c, gbc.readMem(0x8bef));
        // CB 8C 0038
        gbc.setState(0x7db0, 0xd563, 0xf320, 0xa015, 0xc64b, 0xf466, 0x1, 0x1);
        gbc.writeMem(0x7db0, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xf3, gbc.a());
        EXPECT(0xa0, gbc.b());
        EXPECT(0x15, gbc.c());
        EXPECT(0xc6, gbc.d());
        EXPECT(0x4b, gbc.e());
        EXPECT(0xf4, gbc.h());
        EXPECT(0x66, gbc.l());
        EXPECT(0xd563, gbc.sp());
        EXPECT(0x7db2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 0039
        gbc.setState(0x568c, 0x54c3, 0xb1e0, 0x1ccc, 0x9045, 0x6d4e, 0x1, 0x1);
        gbc.writeMem(0x568c, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xb1, gbc.a());
        EXPECT(0x1c, gbc.b());
        EXPECT(0xcc, gbc.c());
        EXPECT(0x90, gbc.d());
        EXPECT(0x45, gbc.e());
        EXPECT(0x6d, gbc.h());
        EXPECT(0x4e, gbc.l());
        EXPECT(0x54c3, gbc.sp());
        EXPECT(0x568e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 003A
        gbc.setState(0x45f7, 0x5d2b, 0x72c0, 0x75ea, 0x1023, 0x8487, 0x1, 0x0);
        gbc.writeMem(0x45f7, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x72, gbc.a());
        EXPECT(0x75, gbc.b());
        EXPECT(0xea, gbc.c());
        EXPECT(0x10, gbc.d());
        EXPECT(0x23, gbc.e());
        EXPECT(0x84, gbc.h());
        EXPECT(0x87, gbc.l());
        EXPECT(0x5d2b, gbc.sp());
        EXPECT(0x45f9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 003B
        gbc.setState(0x4d54, 0x3b7b, 0x4320, 0xb830, 0x9696, 0x5653, 0x0, 0x1);
        gbc.writeMem(0x4d54, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x43, gbc.a());
        EXPECT(0xb8, gbc.b());
        EXPECT(0x30, gbc.c());
        EXPECT(0x96, gbc.d());
        EXPECT(0x96, gbc.e());
        EXPECT(0x54, gbc.h());
        EXPECT(0x53, gbc.l());
        EXPECT(0x3b7b, gbc.sp());
        EXPECT(0x4d56, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 003C
        gbc.setState(0x726a, 0x3287, 0x5c20, 0x59a1, 0x5bbb, 0x25ef, 0x1, 0x1);
        gbc.writeMem(0x726a, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x5c, gbc.a());
        EXPECT(0x59, gbc.b());
        EXPECT(0xa1, gbc.c());
        EXPECT(0x5b, gbc.d());
        EXPECT(0xbb, gbc.e());
        EXPECT(0x25, gbc.h());
        EXPECT(0xef, gbc.l());
        EXPECT(0x3287, gbc.sp());
        EXPECT(0x726c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 003D
        gbc.setState(0x1a8c, 0xbc8b, 0xed00, 0x16ad, 0xad8, 0xb44c, 0x0, 0x0);
        gbc.writeMem(0x1a8c, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xed, gbc.a());
        EXPECT(0x16, gbc.b());
        EXPECT(0xad, gbc.c());
        EXPECT(0xa, gbc.d());
        EXPECT(0xd8, gbc.e());
        EXPECT(0xb4, gbc.h());
        EXPECT(0x4c, gbc.l());
        EXPECT(0xbc8b, gbc.sp());
        EXPECT(0x1a8e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 003E
        gbc.setState(0x7e27, 0x8e48, 0x6100, 0x42a4, 0x2d43, 0x7b39, 0x1, 0x0);
        gbc.writeMem(0x7e27, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x61, gbc.a());
        EXPECT(0x42, gbc.b());
        EXPECT(0xa4, gbc.c());
        EXPECT(0x2d, gbc.d());
        EXPECT(0x43, gbc.e());
        EXPECT(0x79, gbc.h());
        EXPECT(0x39, gbc.l());
        EXPECT(0x8e48, gbc.sp());
        EXPECT(0x7e29, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 003F
        gbc.setState(0x371d, 0xfa62, 0x1180, 0x2058, 0xd8ae, 0x1802, 0x1, 0x1);
        gbc.writeMem(0x371d, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x11, gbc.a());
        EXPECT(0x20, gbc.b());
        EXPECT(0x58, gbc.c());
        EXPECT(0xd8, gbc.d());
        EXPECT(0xae, gbc.e());
        EXPECT(0x18, gbc.h());
        EXPECT(0x2, gbc.l());
        EXPECT(0xfa62, gbc.sp());
        EXPECT(0x371f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 0040
        gbc.setState(0x2c9b, 0xcc25, 0x8c10, 0x727d, 0xc697, 0x4def, 0x0, 0x0);
        gbc.writeMem(0x2c9b, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x8c, gbc.a());
        EXPECT(0x72, gbc.b());
        EXPECT(0x7d, gbc.c());
        EXPECT(0xc6, gbc.d());
        EXPECT(0x97, gbc.e());
        EXPECT(0x4d, gbc.h());
        EXPECT(0xef, gbc.l());
        EXPECT(0xcc25, gbc.sp());
        EXPECT(0x2c9d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 0041
        gbc.setState(0xcc49, 0xd5a, 0x4740, 0x802f, 0x435e, 0xd48a, 0x1, 0x0);
        gbc.writeMem(0xcc49, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x47, gbc.a());
        EXPECT(0x80, gbc.b());
        EXPECT(0x2f, gbc.c());
        EXPECT(0x43, gbc.d());
        EXPECT(0x5e, gbc.e());
        EXPECT(0xd4, gbc.h());
        EXPECT(0x8a, gbc.l());
        EXPECT(0xd5a, gbc.sp());
        EXPECT(0xcc4b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcc49));
        EXPECT(0x8c, gbc.readMem(0xcc4a));
        // CB 8C 0042
        gbc.setState(0x1f74, 0x9245, 0x25f0, 0xe409, 0xd129, 0xc8e3, 0x0, 0x1);
        gbc.writeMem(0x1f74, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x25, gbc.a());
        EXPECT(0xe4, gbc.b());
        EXPECT(0x9, gbc.c());
        EXPECT(0xd1, gbc.d());
        EXPECT(0x29, gbc.e());
        EXPECT(0xc8, gbc.h());
        EXPECT(0xe3, gbc.l());
        EXPECT(0x9245, gbc.sp());
        EXPECT(0x1f76, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 0043
        gbc.setState(0xb4cf, 0x3d11, 0x4e80, 0x28ad, 0x89fc, 0xa39b, 0x0, 0x0);
        gbc.writeMem(0xb4cf, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x4e, gbc.a());
        EXPECT(0x28, gbc.b());
        EXPECT(0xad, gbc.c());
        EXPECT(0x89, gbc.d());
        EXPECT(0xfc, gbc.e());
        EXPECT(0xa1, gbc.h());
        EXPECT(0x9b, gbc.l());
        EXPECT(0x3d11, gbc.sp());
        EXPECT(0xb4d1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb4cf));
        EXPECT(0x8c, gbc.readMem(0xb4d0));
        // CB 8C 0044
        gbc.setState(0x1988, 0x8072, 0x6350, 0xd399, 0x3e44, 0xf452, 0x0, 0x0);
        gbc.writeMem(0x1988, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x63, gbc.a());
        EXPECT(0xd3, gbc.b());
        EXPECT(0x99, gbc.c());
        EXPECT(0x3e, gbc.d());
        EXPECT(0x44, gbc.e());
        EXPECT(0xf4, gbc.h());
        EXPECT(0x52, gbc.l());
        EXPECT(0x8072, gbc.sp());
        EXPECT(0x198a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 0045
        gbc.setState(0x2b4c, 0x1d5a, 0xf9d0, 0x71b7, 0xd2b0, 0x83ee, 0x0, 0x1);
        gbc.writeMem(0x2b4c, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xf9, gbc.a());
        EXPECT(0x71, gbc.b());
        EXPECT(0xb7, gbc.c());
        EXPECT(0xd2, gbc.d());
        EXPECT(0xb0, gbc.e());
        EXPECT(0x81, gbc.h());
        EXPECT(0xee, gbc.l());
        EXPECT(0x1d5a, gbc.sp());
        EXPECT(0x2b4e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 0046
        gbc.setState(0x539b, 0x382e, 0xa740, 0xba23, 0x56d, 0x8951, 0x0, 0x1);
        gbc.writeMem(0x539b, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xa7, gbc.a());
        EXPECT(0xba, gbc.b());
        EXPECT(0x23, gbc.c());
        EXPECT(0x5, gbc.d());
        EXPECT(0x6d, gbc.e());
        EXPECT(0x89, gbc.h());
        EXPECT(0x51, gbc.l());
        EXPECT(0x382e, gbc.sp());
        EXPECT(0x539d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 0047
        gbc.setState(0x38cf, 0xf61e, 0xf580, 0x894, 0x3ab3, 0x418, 0x0, 0x1);
        gbc.writeMem(0x38cf, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xf5, gbc.a());
        EXPECT(0x8, gbc.b());
        EXPECT(0x94, gbc.c());
        EXPECT(0x3a, gbc.d());
        EXPECT(0xb3, gbc.e());
        EXPECT(0x4, gbc.h());
        EXPECT(0x18, gbc.l());
        EXPECT(0xf61e, gbc.sp());
        EXPECT(0x38d1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 0048
        gbc.setState(0x71ac, 0x65a0, 0xf660, 0x1b73, 0xe410, 0xc4cd, 0x1, 0x1);
        gbc.writeMem(0x71ac, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xf6, gbc.a());
        EXPECT(0x1b, gbc.b());
        EXPECT(0x73, gbc.c());
        EXPECT(0xe4, gbc.d());
        EXPECT(0x10, gbc.e());
        EXPECT(0xc4, gbc.h());
        EXPECT(0xcd, gbc.l());
        EXPECT(0x65a0, gbc.sp());
        EXPECT(0x71ae, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 0049
        gbc.setState(0x9176, 0x867f, 0x8bf0, 0xf853, 0x723, 0xb6a0, 0x0, 0x0);
        gbc.writeMem(0x9176, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x8b, gbc.a());
        EXPECT(0xf8, gbc.b());
        EXPECT(0x53, gbc.c());
        EXPECT(0x7, gbc.d());
        EXPECT(0x23, gbc.e());
        EXPECT(0xb4, gbc.h());
        EXPECT(0xa0, gbc.l());
        EXPECT(0x867f, gbc.sp());
        EXPECT(0x9178, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9176));
        EXPECT(0x8c, gbc.readMem(0x9177));
        // CB 8C 004A
        gbc.setState(0xe847, 0xf23d, 0xb910, 0x985, 0x95e6, 0xbf08, 0x0, 0x0);
        gbc.writeMem(0xe847, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xb9, gbc.a());
        EXPECT(0x9, gbc.b());
        EXPECT(0x85, gbc.c());
        EXPECT(0x95, gbc.d());
        EXPECT(0xe6, gbc.e());
        EXPECT(0xbd, gbc.h());
        EXPECT(0x8, gbc.l());
        EXPECT(0xf23d, gbc.sp());
        EXPECT(0xe849, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe847));
        EXPECT(0x8c, gbc.readMem(0xe848));
        // CB 8C 004B
        gbc.setState(0x392d, 0x18da, 0xd750, 0xe2ff, 0x9696, 0xe434, 0x0, 0x0);
        gbc.writeMem(0x392d, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xd7, gbc.a());
        EXPECT(0xe2, gbc.b());
        EXPECT(0xff, gbc.c());
        EXPECT(0x96, gbc.d());
        EXPECT(0x96, gbc.e());
        EXPECT(0xe4, gbc.h());
        EXPECT(0x34, gbc.l());
        EXPECT(0x18da, gbc.sp());
        EXPECT(0x392f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 004D
        gbc.setState(0xc5f4, 0x547d, 0xa4f0, 0xb6d4, 0x7664, 0x56d, 0x0, 0x0);
        gbc.writeMem(0xc5f4, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xa4, gbc.a());
        EXPECT(0xb6, gbc.b());
        EXPECT(0xd4, gbc.c());
        EXPECT(0x76, gbc.d());
        EXPECT(0x64, gbc.e());
        EXPECT(0x5, gbc.h());
        EXPECT(0x6d, gbc.l());
        EXPECT(0x547d, gbc.sp());
        EXPECT(0xc5f6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc5f4));
        EXPECT(0x8c, gbc.readMem(0xc5f5));
        // CB 8C 004E
        gbc.setState(0x1e04, 0x1cc6, 0x90f0, 0xbe29, 0x8ae9, 0xcaff, 0x1, 0x0);
        gbc.writeMem(0x1e04, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x90, gbc.a());
        EXPECT(0xbe, gbc.b());
        EXPECT(0x29, gbc.c());
        EXPECT(0x8a, gbc.d());
        EXPECT(0xe9, gbc.e());
        EXPECT(0xc8, gbc.h());
        EXPECT(0xff, gbc.l());
        EXPECT(0x1cc6, gbc.sp());
        EXPECT(0x1e06, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 004F
        gbc.setState(0x7662, 0xab37, 0x7b80, 0x1d71, 0xe461, 0x5b31, 0x0, 0x0);
        gbc.writeMem(0x7662, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x7b, gbc.a());
        EXPECT(0x1d, gbc.b());
        EXPECT(0x71, gbc.c());
        EXPECT(0xe4, gbc.d());
        EXPECT(0x61, gbc.e());
        EXPECT(0x59, gbc.h());
        EXPECT(0x31, gbc.l());
        EXPECT(0xab37, gbc.sp());
        EXPECT(0x7664, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 0050
        gbc.setState(0x7025, 0xad4a, 0x8210, 0xbd62, 0x130d, 0xe312, 0x1, 0x1);
        gbc.writeMem(0x7025, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x82, gbc.a());
        EXPECT(0xbd, gbc.b());
        EXPECT(0x62, gbc.c());
        EXPECT(0x13, gbc.d());
        EXPECT(0xd, gbc.e());
        EXPECT(0xe1, gbc.h());
        EXPECT(0x12, gbc.l());
        EXPECT(0xad4a, gbc.sp());
        EXPECT(0x7027, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 0051
        gbc.setState(0x7dc8, 0xec80, 0x13e0, 0x1340, 0xb721, 0x4be5, 0x0, 0x0);
        gbc.writeMem(0x7dc8, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x13, gbc.a());
        EXPECT(0x13, gbc.b());
        EXPECT(0x40, gbc.c());
        EXPECT(0xb7, gbc.d());
        EXPECT(0x21, gbc.e());
        EXPECT(0x49, gbc.h());
        EXPECT(0xe5, gbc.l());
        EXPECT(0xec80, gbc.sp());
        EXPECT(0x7dca, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 0052
        gbc.setState(0xe12b, 0xbe33, 0x8f60, 0x6c8b, 0x18c0, 0x5372, 0x0, 0x0);
        gbc.writeMem(0xe12b, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x8f, gbc.a());
        EXPECT(0x6c, gbc.b());
        EXPECT(0x8b, gbc.c());
        EXPECT(0x18, gbc.d());
        EXPECT(0xc0, gbc.e());
        EXPECT(0x51, gbc.h());
        EXPECT(0x72, gbc.l());
        EXPECT(0xbe33, gbc.sp());
        EXPECT(0xe12d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe12b));
        EXPECT(0x8c, gbc.readMem(0xe12c));
        // CB 8C 0053
        gbc.setState(0x75d0, 0xb8c0, 0xa380, 0xc845, 0xd125, 0xc546, 0x0, 0x1);
        gbc.writeMem(0x75d0, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xa3, gbc.a());
        EXPECT(0xc8, gbc.b());
        EXPECT(0x45, gbc.c());
        EXPECT(0xd1, gbc.d());
        EXPECT(0x25, gbc.e());
        EXPECT(0xc5, gbc.h());
        EXPECT(0x46, gbc.l());
        EXPECT(0xb8c0, gbc.sp());
        EXPECT(0x75d2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 0054
        gbc.setState(0xb973, 0x6f71, 0xb6f0, 0xb036, 0xd4aa, 0x7e8a, 0x1, 0x1);
        gbc.writeMem(0xb973, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xb6, gbc.a());
        EXPECT(0xb0, gbc.b());
        EXPECT(0x36, gbc.c());
        EXPECT(0xd4, gbc.d());
        EXPECT(0xaa, gbc.e());
        EXPECT(0x7c, gbc.h());
        EXPECT(0x8a, gbc.l());
        EXPECT(0x6f71, gbc.sp());
        EXPECT(0xb975, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb973));
        EXPECT(0x8c, gbc.readMem(0xb974));
        // CB 8C 0055
        gbc.setState(0x9220, 0xdde8, 0x5cd0, 0x71c3, 0xc0ba, 0x7271, 0x0, 0x0);
        gbc.writeMem(0x9220, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x5c, gbc.a());
        EXPECT(0x71, gbc.b());
        EXPECT(0xc3, gbc.c());
        EXPECT(0xc0, gbc.d());
        EXPECT(0xba, gbc.e());
        EXPECT(0x70, gbc.h());
        EXPECT(0x71, gbc.l());
        EXPECT(0xdde8, gbc.sp());
        EXPECT(0x9222, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9220));
        EXPECT(0x8c, gbc.readMem(0x9221));
        // CB 8C 0056
        gbc.setState(0x179b, 0x87e7, 0x9350, 0x98e2, 0x1482, 0x9c7e, 0x1, 0x1);
        gbc.writeMem(0x179b, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x93, gbc.a());
        EXPECT(0x98, gbc.b());
        EXPECT(0xe2, gbc.c());
        EXPECT(0x14, gbc.d());
        EXPECT(0x82, gbc.e());
        EXPECT(0x9c, gbc.h());
        EXPECT(0x7e, gbc.l());
        EXPECT(0x87e7, gbc.sp());
        EXPECT(0x179d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 0057
        gbc.setState(0xc17b, 0x1c44, 0x6440, 0x3f0e, 0xd981, 0x72b1, 0x1, 0x0);
        gbc.writeMem(0xc17b, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x64, gbc.a());
        EXPECT(0x3f, gbc.b());
        EXPECT(0xe, gbc.c());
        EXPECT(0xd9, gbc.d());
        EXPECT(0x81, gbc.e());
        EXPECT(0x70, gbc.h());
        EXPECT(0xb1, gbc.l());
        EXPECT(0x1c44, gbc.sp());
        EXPECT(0xc17d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc17b));
        EXPECT(0x8c, gbc.readMem(0xc17c));
        // CB 8C 0058
        gbc.setState(0xba3b, 0xeed5, 0x3a90, 0xeaa4, 0x2037, 0xe98c, 0x1, 0x0);
        gbc.writeMem(0xba3b, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x3a, gbc.a());
        EXPECT(0xea, gbc.b());
        EXPECT(0xa4, gbc.c());
        EXPECT(0x20, gbc.d());
        EXPECT(0x37, gbc.e());
        EXPECT(0xe9, gbc.h());
        EXPECT(0x8c, gbc.l());
        EXPECT(0xeed5, gbc.sp());
        EXPECT(0xba3d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xba3b));
        EXPECT(0x8c, gbc.readMem(0xba3c));
        // CB 8C 0059
        gbc.setState(0x4985, 0x2e5b, 0x91f0, 0xed09, 0x780b, 0x7260, 0x0, 0x1);
        gbc.writeMem(0x4985, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x91, gbc.a());
        EXPECT(0xed, gbc.b());
        EXPECT(0x9, gbc.c());
        EXPECT(0x78, gbc.d());
        EXPECT(0xb, gbc.e());
        EXPECT(0x70, gbc.h());
        EXPECT(0x60, gbc.l());
        EXPECT(0x2e5b, gbc.sp());
        EXPECT(0x4987, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 005A
        gbc.setState(0x430d, 0x4c57, 0x4cc0, 0xfda7, 0x7461, 0x4365, 0x0, 0x0);
        gbc.writeMem(0x430d, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x4c, gbc.a());
        EXPECT(0xfd, gbc.b());
        EXPECT(0xa7, gbc.c());
        EXPECT(0x74, gbc.d());
        EXPECT(0x61, gbc.e());
        EXPECT(0x41, gbc.h());
        EXPECT(0x65, gbc.l());
        EXPECT(0x4c57, gbc.sp());
        EXPECT(0x430f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 005B
        gbc.setState(0xc847, 0x6348, 0x4250, 0xaaa6, 0x2bc0, 0xa973, 0x1, 0x0);
        gbc.writeMem(0xc847, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x42, gbc.a());
        EXPECT(0xaa, gbc.b());
        EXPECT(0xa6, gbc.c());
        EXPECT(0x2b, gbc.d());
        EXPECT(0xc0, gbc.e());
        EXPECT(0xa9, gbc.h());
        EXPECT(0x73, gbc.l());
        EXPECT(0x6348, gbc.sp());
        EXPECT(0xc849, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc847));
        EXPECT(0x8c, gbc.readMem(0xc848));
        // CB 8C 005C
        gbc.setState(0x1aa7, 0x950e, 0x3f50, 0xe346, 0x4efe, 0xfe33, 0x0, 0x0);
        gbc.writeMem(0x1aa7, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x3f, gbc.a());
        EXPECT(0xe3, gbc.b());
        EXPECT(0x46, gbc.c());
        EXPECT(0x4e, gbc.d());
        EXPECT(0xfe, gbc.e());
        EXPECT(0xfc, gbc.h());
        EXPECT(0x33, gbc.l());
        EXPECT(0x950e, gbc.sp());
        EXPECT(0x1aa9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 005D
        gbc.setState(0x4237, 0x30fe, 0x73e0, 0x4d0b, 0x2023, 0x652e, 0x0, 0x0);
        gbc.writeMem(0x4237, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x73, gbc.a());
        EXPECT(0x4d, gbc.b());
        EXPECT(0xb, gbc.c());
        EXPECT(0x20, gbc.d());
        EXPECT(0x23, gbc.e());
        EXPECT(0x65, gbc.h());
        EXPECT(0x2e, gbc.l());
        EXPECT(0x30fe, gbc.sp());
        EXPECT(0x4239, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 005E
        gbc.setState(0x58cf, 0xb9d0, 0xc860, 0x5da, 0x175b, 0x5aeb, 0x0, 0x0);
        gbc.writeMem(0x58cf, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xc8, gbc.a());
        EXPECT(0x5, gbc.b());
        EXPECT(0xda, gbc.c());
        EXPECT(0x17, gbc.d());
        EXPECT(0x5b, gbc.e());
        EXPECT(0x58, gbc.h());
        EXPECT(0xeb, gbc.l());
        EXPECT(0xb9d0, gbc.sp());
        EXPECT(0x58d1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 005F
        gbc.setState(0x1cd5, 0x4bc7, 0x3f50, 0x70d4, 0x4348, 0x31c3, 0x1, 0x1);
        gbc.writeMem(0x1cd5, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x3f, gbc.a());
        EXPECT(0x70, gbc.b());
        EXPECT(0xd4, gbc.c());
        EXPECT(0x43, gbc.d());
        EXPECT(0x48, gbc.e());
        EXPECT(0x31, gbc.h());
        EXPECT(0xc3, gbc.l());
        EXPECT(0x4bc7, gbc.sp());
        EXPECT(0x1cd7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 0060
        gbc.setState(0x7143, 0xd140, 0x6ef0, 0x901e, 0xf6a6, 0x4df8, 0x0, 0x1);
        gbc.writeMem(0x7143, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x6e, gbc.a());
        EXPECT(0x90, gbc.b());
        EXPECT(0x1e, gbc.c());
        EXPECT(0xf6, gbc.d());
        EXPECT(0xa6, gbc.e());
        EXPECT(0x4d, gbc.h());
        EXPECT(0xf8, gbc.l());
        EXPECT(0xd140, gbc.sp());
        EXPECT(0x7145, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 0061
        gbc.setState(0x569, 0x19bd, 0xb4d0, 0x889, 0x7529, 0x5127, 0x0, 0x0);
        gbc.writeMem(0x569, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xb4, gbc.a());
        EXPECT(0x8, gbc.b());
        EXPECT(0x89, gbc.c());
        EXPECT(0x75, gbc.d());
        EXPECT(0x29, gbc.e());
        EXPECT(0x51, gbc.h());
        EXPECT(0x27, gbc.l());
        EXPECT(0x19bd, gbc.sp());
        EXPECT(0x56b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 0062
        gbc.setState(0xc97, 0xbcb, 0x8490, 0x5814, 0x3f35, 0x2a3d, 0x0, 0x0);
        gbc.writeMem(0xc97, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x84, gbc.a());
        EXPECT(0x58, gbc.b());
        EXPECT(0x14, gbc.c());
        EXPECT(0x3f, gbc.d());
        EXPECT(0x35, gbc.e());
        EXPECT(0x28, gbc.h());
        EXPECT(0x3d, gbc.l());
        EXPECT(0xbcb, gbc.sp());
        EXPECT(0xc99, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 0064
        gbc.setState(0x2a67, 0xc6b9, 0xd270, 0xaccd, 0xf1b0, 0x4872, 0x1, 0x1);
        gbc.writeMem(0x2a67, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xd2, gbc.a());
        EXPECT(0xac, gbc.b());
        EXPECT(0xcd, gbc.c());
        EXPECT(0xf1, gbc.d());
        EXPECT(0xb0, gbc.e());
        EXPECT(0x48, gbc.h());
        EXPECT(0x72, gbc.l());
        EXPECT(0xc6b9, gbc.sp());
        EXPECT(0x2a69, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 0065
        gbc.setState(0x5b14, 0x6496, 0xffa0, 0xcfe1, 0x7dd5, 0x7693, 0x1, 0x0);
        gbc.writeMem(0x5b14, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xff, gbc.a());
        EXPECT(0xcf, gbc.b());
        EXPECT(0xe1, gbc.c());
        EXPECT(0x7d, gbc.d());
        EXPECT(0xd5, gbc.e());
        EXPECT(0x74, gbc.h());
        EXPECT(0x93, gbc.l());
        EXPECT(0x6496, gbc.sp());
        EXPECT(0x5b16, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 0066
        gbc.setState(0xa9da, 0x2268, 0x2ab0, 0x6d29, 0x4645, 0x9d0f, 0x0, 0x1);
        gbc.writeMem(0xa9da, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x2a, gbc.a());
        EXPECT(0x6d, gbc.b());
        EXPECT(0x29, gbc.c());
        EXPECT(0x46, gbc.d());
        EXPECT(0x45, gbc.e());
        EXPECT(0x9d, gbc.h());
        EXPECT(0xf, gbc.l());
        EXPECT(0x2268, gbc.sp());
        EXPECT(0xa9dc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa9da));
        EXPECT(0x8c, gbc.readMem(0xa9db));
        // CB 8C 0067
        gbc.setState(0x113f, 0x154a, 0xdc40, 0xda68, 0x8ce7, 0x4b67, 0x0, 0x0);
        gbc.writeMem(0x113f, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xdc, gbc.a());
        EXPECT(0xda, gbc.b());
        EXPECT(0x68, gbc.c());
        EXPECT(0x8c, gbc.d());
        EXPECT(0xe7, gbc.e());
        EXPECT(0x49, gbc.h());
        EXPECT(0x67, gbc.l());
        EXPECT(0x154a, gbc.sp());
        EXPECT(0x1141, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 0068
        gbc.setState(0x2eb9, 0x8e, 0x90e0, 0xf0b7, 0x662d, 0xd3ea, 0x0, 0x0);
        gbc.writeMem(0x2eb9, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x90, gbc.a());
        EXPECT(0xf0, gbc.b());
        EXPECT(0xb7, gbc.c());
        EXPECT(0x66, gbc.d());
        EXPECT(0x2d, gbc.e());
        EXPECT(0xd1, gbc.h());
        EXPECT(0xea, gbc.l());
        EXPECT(0x8e, gbc.sp());
        EXPECT(0x2ebb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 0069
        gbc.setState(0x4044, 0x22d5, 0x7320, 0x5659, 0x18bd, 0x21a8, 0x1, 0x0);
        gbc.writeMem(0x4044, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x73, gbc.a());
        EXPECT(0x56, gbc.b());
        EXPECT(0x59, gbc.c());
        EXPECT(0x18, gbc.d());
        EXPECT(0xbd, gbc.e());
        EXPECT(0x21, gbc.h());
        EXPECT(0xa8, gbc.l());
        EXPECT(0x22d5, gbc.sp());
        EXPECT(0x4046, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 006A
        gbc.setState(0x1b90, 0xa405, 0x8ed0, 0x6a3d, 0x9b66, 0xd700, 0x1, 0x1);
        gbc.writeMem(0x1b90, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x8e, gbc.a());
        EXPECT(0x6a, gbc.b());
        EXPECT(0x3d, gbc.c());
        EXPECT(0x9b, gbc.d());
        EXPECT(0x66, gbc.e());
        EXPECT(0xd5, gbc.h());
        EXPECT(0x0, gbc.l());
        EXPECT(0xa405, gbc.sp());
        EXPECT(0x1b92, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 006B
        gbc.setState(0x48ab, 0x7e59, 0xeb80, 0x9e46, 0xdcb8, 0x5243, 0x0, 0x1);
        gbc.writeMem(0x48ab, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xeb, gbc.a());
        EXPECT(0x9e, gbc.b());
        EXPECT(0x46, gbc.c());
        EXPECT(0xdc, gbc.d());
        EXPECT(0xb8, gbc.e());
        EXPECT(0x50, gbc.h());
        EXPECT(0x43, gbc.l());
        EXPECT(0x7e59, gbc.sp());
        EXPECT(0x48ad, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 006C
        gbc.setState(0x13bc, 0x8845, 0x44c0, 0xe279, 0xc11d, 0xbd6d, 0x0, 0x1);
        gbc.writeMem(0x13bc, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x44, gbc.a());
        EXPECT(0xe2, gbc.b());
        EXPECT(0x79, gbc.c());
        EXPECT(0xc1, gbc.d());
        EXPECT(0x1d, gbc.e());
        EXPECT(0xbd, gbc.h());
        EXPECT(0x6d, gbc.l());
        EXPECT(0x8845, gbc.sp());
        EXPECT(0x13be, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 006D
        gbc.setState(0x715d, 0x9910, 0x2900, 0x9878, 0xcbe3, 0xe712, 0x1, 0x0);
        gbc.writeMem(0x715d, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x29, gbc.a());
        EXPECT(0x98, gbc.b());
        EXPECT(0x78, gbc.c());
        EXPECT(0xcb, gbc.d());
        EXPECT(0xe3, gbc.e());
        EXPECT(0xe5, gbc.h());
        EXPECT(0x12, gbc.l());
        EXPECT(0x9910, gbc.sp());
        EXPECT(0x715f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 006E
        gbc.setState(0x77d4, 0x8158, 0xe8e0, 0xac9f, 0xd37f, 0x6f77, 0x1, 0x0);
        gbc.writeMem(0x77d4, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xe8, gbc.a());
        EXPECT(0xac, gbc.b());
        EXPECT(0x9f, gbc.c());
        EXPECT(0xd3, gbc.d());
        EXPECT(0x7f, gbc.e());
        EXPECT(0x6d, gbc.h());
        EXPECT(0x77, gbc.l());
        EXPECT(0x8158, gbc.sp());
        EXPECT(0x77d6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 006F
        gbc.setState(0x43b6, 0x984, 0x9540, 0xf404, 0x96eb, 0x8f2f, 0x1, 0x1);
        gbc.writeMem(0x43b6, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x95, gbc.a());
        EXPECT(0xf4, gbc.b());
        EXPECT(0x4, gbc.c());
        EXPECT(0x96, gbc.d());
        EXPECT(0xeb, gbc.e());
        EXPECT(0x8d, gbc.h());
        EXPECT(0x2f, gbc.l());
        EXPECT(0x984, gbc.sp());
        EXPECT(0x43b8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 0070
        gbc.setState(0x2dc6, 0x36b2, 0xc40, 0xbb47, 0x438e, 0xa131, 0x0, 0x1);
        gbc.writeMem(0x2dc6, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xc, gbc.a());
        EXPECT(0xbb, gbc.b());
        EXPECT(0x47, gbc.c());
        EXPECT(0x43, gbc.d());
        EXPECT(0x8e, gbc.e());
        EXPECT(0xa1, gbc.h());
        EXPECT(0x31, gbc.l());
        EXPECT(0x36b2, gbc.sp());
        EXPECT(0x2dc8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 0071
        gbc.setState(0x8e88, 0x55f4, 0x1f40, 0x1aa9, 0x92f4, 0xb2e1, 0x1, 0x0);
        gbc.writeMem(0x8e88, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x1f, gbc.a());
        EXPECT(0x1a, gbc.b());
        EXPECT(0xa9, gbc.c());
        EXPECT(0x92, gbc.d());
        EXPECT(0xf4, gbc.e());
        EXPECT(0xb0, gbc.h());
        EXPECT(0xe1, gbc.l());
        EXPECT(0x55f4, gbc.sp());
        EXPECT(0x8e8a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8e88));
        EXPECT(0x8c, gbc.readMem(0x8e89));
        // CB 8C 0072
        gbc.setState(0x84a7, 0xf27d, 0xd50, 0x35eb, 0x63b8, 0x6229, 0x1, 0x1);
        gbc.writeMem(0x84a7, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xd, gbc.a());
        EXPECT(0x35, gbc.b());
        EXPECT(0xeb, gbc.c());
        EXPECT(0x63, gbc.d());
        EXPECT(0xb8, gbc.e());
        EXPECT(0x60, gbc.h());
        EXPECT(0x29, gbc.l());
        EXPECT(0xf27d, gbc.sp());
        EXPECT(0x84a9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x84a7));
        EXPECT(0x8c, gbc.readMem(0x84a8));
        // CB 8C 0073
        gbc.setState(0xd5d9, 0x8641, 0x55f0, 0x9927, 0x91f8, 0x3d67, 0x1, 0x1);
        gbc.writeMem(0xd5d9, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x55, gbc.a());
        EXPECT(0x99, gbc.b());
        EXPECT(0x27, gbc.c());
        EXPECT(0x91, gbc.d());
        EXPECT(0xf8, gbc.e());
        EXPECT(0x3d, gbc.h());
        EXPECT(0x67, gbc.l());
        EXPECT(0x8641, gbc.sp());
        EXPECT(0xd5db, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd5d9));
        EXPECT(0x8c, gbc.readMem(0xd5da));
        // CB 8C 0074
        gbc.setState(0xcb3b, 0x2696, 0xf430, 0x8ae, 0xcacb, 0x2a5d, 0x0, 0x1);
        gbc.writeMem(0xcb3b, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xf4, gbc.a());
        EXPECT(0x8, gbc.b());
        EXPECT(0xae, gbc.c());
        EXPECT(0xca, gbc.d());
        EXPECT(0xcb, gbc.e());
        EXPECT(0x28, gbc.h());
        EXPECT(0x5d, gbc.l());
        EXPECT(0x2696, gbc.sp());
        EXPECT(0xcb3d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcb3b));
        EXPECT(0x8c, gbc.readMem(0xcb3c));
        // CB 8C 0075
        gbc.setState(0xa8d3, 0x43c9, 0xc60, 0x3a84, 0xc5a2, 0xcdcf, 0x1, 0x0);
        gbc.writeMem(0xa8d3, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xc, gbc.a());
        EXPECT(0x3a, gbc.b());
        EXPECT(0x84, gbc.c());
        EXPECT(0xc5, gbc.d());
        EXPECT(0xa2, gbc.e());
        EXPECT(0xcd, gbc.h());
        EXPECT(0xcf, gbc.l());
        EXPECT(0x43c9, gbc.sp());
        EXPECT(0xa8d5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa8d3));
        EXPECT(0x8c, gbc.readMem(0xa8d4));
        // CB 8C 0076
        gbc.setState(0x24dd, 0x3f72, 0x8fc0, 0x75a5, 0x74a2, 0xb183, 0x1, 0x0);
        gbc.writeMem(0x24dd, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x8f, gbc.a());
        EXPECT(0x75, gbc.b());
        EXPECT(0xa5, gbc.c());
        EXPECT(0x74, gbc.d());
        EXPECT(0xa2, gbc.e());
        EXPECT(0xb1, gbc.h());
        EXPECT(0x83, gbc.l());
        EXPECT(0x3f72, gbc.sp());
        EXPECT(0x24df, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 0077
        gbc.setState(0x6691, 0x29e2, 0x4580, 0xc144, 0xe8f9, 0x2220, 0x1, 0x0);
        gbc.writeMem(0x6691, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x45, gbc.a());
        EXPECT(0xc1, gbc.b());
        EXPECT(0x44, gbc.c());
        EXPECT(0xe8, gbc.d());
        EXPECT(0xf9, gbc.e());
        EXPECT(0x20, gbc.h());
        EXPECT(0x20, gbc.l());
        EXPECT(0x29e2, gbc.sp());
        EXPECT(0x6693, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 0078
        gbc.setState(0x1964, 0x92e6, 0x6980, 0x4a52, 0x100e, 0xa868, 0x1, 0x1);
        gbc.writeMem(0x1964, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x69, gbc.a());
        EXPECT(0x4a, gbc.b());
        EXPECT(0x52, gbc.c());
        EXPECT(0x10, gbc.d());
        EXPECT(0xe, gbc.e());
        EXPECT(0xa8, gbc.h());
        EXPECT(0x68, gbc.l());
        EXPECT(0x92e6, gbc.sp());
        EXPECT(0x1966, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 0079
        gbc.setState(0xe5f1, 0x3c9e, 0xf9f0, 0x1fd0, 0xd246, 0x2e13, 0x0, 0x0);
        gbc.writeMem(0xe5f1, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xf9, gbc.a());
        EXPECT(0x1f, gbc.b());
        EXPECT(0xd0, gbc.c());
        EXPECT(0xd2, gbc.d());
        EXPECT(0x46, gbc.e());
        EXPECT(0x2c, gbc.h());
        EXPECT(0x13, gbc.l());
        EXPECT(0x3c9e, gbc.sp());
        EXPECT(0xe5f3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe5f1));
        EXPECT(0x8c, gbc.readMem(0xe5f2));
        // CB 8C 007A
        gbc.setState(0xb6c8, 0x5f06, 0x3d90, 0x819, 0xab09, 0x8120, 0x0, 0x0);
        gbc.writeMem(0xb6c8, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x3d, gbc.a());
        EXPECT(0x8, gbc.b());
        EXPECT(0x19, gbc.c());
        EXPECT(0xab, gbc.d());
        EXPECT(0x9, gbc.e());
        EXPECT(0x81, gbc.h());
        EXPECT(0x20, gbc.l());
        EXPECT(0x5f06, gbc.sp());
        EXPECT(0xb6ca, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb6c8));
        EXPECT(0x8c, gbc.readMem(0xb6c9));
        // CB 8C 007B
        gbc.setState(0xe990, 0x605a, 0xe9a0, 0xc0d5, 0x3595, 0xe321, 0x1, 0x1);
        gbc.writeMem(0xe990, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xe9, gbc.a());
        EXPECT(0xc0, gbc.b());
        EXPECT(0xd5, gbc.c());
        EXPECT(0x35, gbc.d());
        EXPECT(0x95, gbc.e());
        EXPECT(0xe1, gbc.h());
        EXPECT(0x21, gbc.l());
        EXPECT(0x605a, gbc.sp());
        EXPECT(0xe992, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe990));
        EXPECT(0x8c, gbc.readMem(0xe991));
        // CB 8C 007C
        gbc.setState(0x12d6, 0xedbd, 0x97b0, 0x8fd9, 0xd434, 0x3085, 0x0, 0x0);
        gbc.writeMem(0x12d6, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x97, gbc.a());
        EXPECT(0x8f, gbc.b());
        EXPECT(0xd9, gbc.c());
        EXPECT(0xd4, gbc.d());
        EXPECT(0x34, gbc.e());
        EXPECT(0x30, gbc.h());
        EXPECT(0x85, gbc.l());
        EXPECT(0xedbd, gbc.sp());
        EXPECT(0x12d8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 007D
        gbc.setState(0xba60, 0xde5, 0x2550, 0x51a3, 0x64a, 0xbee2, 0x0, 0x1);
        gbc.writeMem(0xba60, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x25, gbc.a());
        EXPECT(0x51, gbc.b());
        EXPECT(0xa3, gbc.c());
        EXPECT(0x6, gbc.d());
        EXPECT(0x4a, gbc.e());
        EXPECT(0xbc, gbc.h());
        EXPECT(0xe2, gbc.l());
        EXPECT(0xde5, gbc.sp());
        EXPECT(0xba62, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xba60));
        EXPECT(0x8c, gbc.readMem(0xba61));
        // CB 8C 007E
        gbc.setState(0x3630, 0x4f6b, 0xa00, 0xa296, 0x2080, 0x3ff1, 0x0, 0x1);
        gbc.writeMem(0x3630, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xa, gbc.a());
        EXPECT(0xa2, gbc.b());
        EXPECT(0x96, gbc.c());
        EXPECT(0x20, gbc.d());
        EXPECT(0x80, gbc.e());
        EXPECT(0x3d, gbc.h());
        EXPECT(0xf1, gbc.l());
        EXPECT(0x4f6b, gbc.sp());
        EXPECT(0x3632, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 007F
        gbc.setState(0x1664, 0xc0d4, 0x90, 0x7d35, 0x5d14, 0xd1c2, 0x1, 0x1);
        gbc.writeMem(0x1664, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x7d, gbc.b());
        EXPECT(0x35, gbc.c());
        EXPECT(0x5d, gbc.d());
        EXPECT(0x14, gbc.e());
        EXPECT(0xd1, gbc.h());
        EXPECT(0xc2, gbc.l());
        EXPECT(0xc0d4, gbc.sp());
        EXPECT(0x1666, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 0080
        gbc.setState(0xefb, 0x67c2, 0x7e00, 0xf762, 0x60d7, 0x46e4, 0x0, 0x0);
        gbc.writeMem(0xefb, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x7e, gbc.a());
        EXPECT(0xf7, gbc.b());
        EXPECT(0x62, gbc.c());
        EXPECT(0x60, gbc.d());
        EXPECT(0xd7, gbc.e());
        EXPECT(0x44, gbc.h());
        EXPECT(0xe4, gbc.l());
        EXPECT(0x67c2, gbc.sp());
        EXPECT(0xefd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 0081
        gbc.setState(0x9c0a, 0x17d9, 0xdca0, 0xa16a, 0x7a50, 0x59c6, 0x0, 0x1);
        gbc.writeMem(0x9c0a, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xdc, gbc.a());
        EXPECT(0xa1, gbc.b());
        EXPECT(0x6a, gbc.c());
        EXPECT(0x7a, gbc.d());
        EXPECT(0x50, gbc.e());
        EXPECT(0x59, gbc.h());
        EXPECT(0xc6, gbc.l());
        EXPECT(0x17d9, gbc.sp());
        EXPECT(0x9c0c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9c0a));
        EXPECT(0x8c, gbc.readMem(0x9c0b));
        // CB 8C 0082
        gbc.setState(0xd1d1, 0x7e08, 0xb610, 0x6d54, 0xa499, 0xd83a, 0x0, 0x0);
        gbc.writeMem(0xd1d1, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xb6, gbc.a());
        EXPECT(0x6d, gbc.b());
        EXPECT(0x54, gbc.c());
        EXPECT(0xa4, gbc.d());
        EXPECT(0x99, gbc.e());
        EXPECT(0xd8, gbc.h());
        EXPECT(0x3a, gbc.l());
        EXPECT(0x7e08, gbc.sp());
        EXPECT(0xd1d3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd1d1));
        EXPECT(0x8c, gbc.readMem(0xd1d2));
        // CB 8C 0083
        gbc.setState(0x9588, 0xd740, 0x5790, 0xd8a5, 0x1f5a, 0xc1e8, 0x1, 0x0);
        gbc.writeMem(0x9588, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x57, gbc.a());
        EXPECT(0xd8, gbc.b());
        EXPECT(0xa5, gbc.c());
        EXPECT(0x1f, gbc.d());
        EXPECT(0x5a, gbc.e());
        EXPECT(0xc1, gbc.h());
        EXPECT(0xe8, gbc.l());
        EXPECT(0xd740, gbc.sp());
        EXPECT(0x958a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9588));
        EXPECT(0x8c, gbc.readMem(0x9589));
        // CB 8C 0084
        gbc.setState(0x2128, 0x3389, 0x4030, 0x334e, 0x5aa, 0xdd87, 0x0, 0x0);
        gbc.writeMem(0x2128, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x40, gbc.a());
        EXPECT(0x33, gbc.b());
        EXPECT(0x4e, gbc.c());
        EXPECT(0x5, gbc.d());
        EXPECT(0xaa, gbc.e());
        EXPECT(0xdd, gbc.h());
        EXPECT(0x87, gbc.l());
        EXPECT(0x3389, gbc.sp());
        EXPECT(0x212a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 0085
        gbc.setState(0xcd90, 0xd5aa, 0x5e60, 0x5546, 0x2eb3, 0x9df0, 0x0, 0x1);
        gbc.writeMem(0xcd90, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x5e, gbc.a());
        EXPECT(0x55, gbc.b());
        EXPECT(0x46, gbc.c());
        EXPECT(0x2e, gbc.d());
        EXPECT(0xb3, gbc.e());
        EXPECT(0x9d, gbc.h());
        EXPECT(0xf0, gbc.l());
        EXPECT(0xd5aa, gbc.sp());
        EXPECT(0xcd92, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcd90));
        EXPECT(0x8c, gbc.readMem(0xcd91));
        // CB 8C 0087
        gbc.setState(0x1a78, 0x7e65, 0xa080, 0x4575, 0x93e1, 0x24d9, 0x1, 0x0);
        gbc.writeMem(0x1a78, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xa0, gbc.a());
        EXPECT(0x45, gbc.b());
        EXPECT(0x75, gbc.c());
        EXPECT(0x93, gbc.d());
        EXPECT(0xe1, gbc.e());
        EXPECT(0x24, gbc.h());
        EXPECT(0xd9, gbc.l());
        EXPECT(0x7e65, gbc.sp());
        EXPECT(0x1a7a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 0088
        gbc.setState(0xdad7, 0x81e8, 0xe980, 0xf592, 0xd444, 0xf79c, 0x0, 0x0);
        gbc.writeMem(0xdad7, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xe9, gbc.a());
        EXPECT(0xf5, gbc.b());
        EXPECT(0x92, gbc.c());
        EXPECT(0xd4, gbc.d());
        EXPECT(0x44, gbc.e());
        EXPECT(0xf5, gbc.h());
        EXPECT(0x9c, gbc.l());
        EXPECT(0x81e8, gbc.sp());
        EXPECT(0xdad9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdad7));
        EXPECT(0x8c, gbc.readMem(0xdad8));
        // CB 8C 0089
        gbc.setState(0xa6a3, 0xe999, 0x50e0, 0x7a88, 0xf84b, 0x8444, 0x0, 0x1);
        gbc.writeMem(0xa6a3, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x50, gbc.a());
        EXPECT(0x7a, gbc.b());
        EXPECT(0x88, gbc.c());
        EXPECT(0xf8, gbc.d());
        EXPECT(0x4b, gbc.e());
        EXPECT(0x84, gbc.h());
        EXPECT(0x44, gbc.l());
        EXPECT(0xe999, gbc.sp());
        EXPECT(0xa6a5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa6a3));
        EXPECT(0x8c, gbc.readMem(0xa6a4));
        // CB 8C 008A
        gbc.setState(0x4916, 0xc350, 0x81a0, 0x2255, 0x9a89, 0x31d7, 0x0, 0x0);
        gbc.writeMem(0x4916, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x81, gbc.a());
        EXPECT(0x22, gbc.b());
        EXPECT(0x55, gbc.c());
        EXPECT(0x9a, gbc.d());
        EXPECT(0x89, gbc.e());
        EXPECT(0x31, gbc.h());
        EXPECT(0xd7, gbc.l());
        EXPECT(0xc350, gbc.sp());
        EXPECT(0x4918, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 008B
        gbc.setState(0x5d80, 0x1e16, 0xc130, 0xe65f, 0x2ade, 0x86ab, 0x1, 0x1);
        gbc.writeMem(0x5d80, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xc1, gbc.a());
        EXPECT(0xe6, gbc.b());
        EXPECT(0x5f, gbc.c());
        EXPECT(0x2a, gbc.d());
        EXPECT(0xde, gbc.e());
        EXPECT(0x84, gbc.h());
        EXPECT(0xab, gbc.l());
        EXPECT(0x1e16, gbc.sp());
        EXPECT(0x5d82, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 008C
        gbc.setState(0x82bb, 0x787f, 0x4140, 0xfaf0, 0x67fb, 0xb5fe, 0x0, 0x1);
        gbc.writeMem(0x82bb, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x41, gbc.a());
        EXPECT(0xfa, gbc.b());
        EXPECT(0xf0, gbc.c());
        EXPECT(0x67, gbc.d());
        EXPECT(0xfb, gbc.e());
        EXPECT(0xb5, gbc.h());
        EXPECT(0xfe, gbc.l());
        EXPECT(0x787f, gbc.sp());
        EXPECT(0x82bd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x82bb));
        EXPECT(0x8c, gbc.readMem(0x82bc));
        // CB 8C 008D
        gbc.setState(0xd899, 0x3848, 0xe580, 0xbbe7, 0x5262, 0x4649, 0x1, 0x1);
        gbc.writeMem(0xd899, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xe5, gbc.a());
        EXPECT(0xbb, gbc.b());
        EXPECT(0xe7, gbc.c());
        EXPECT(0x52, gbc.d());
        EXPECT(0x62, gbc.e());
        EXPECT(0x44, gbc.h());
        EXPECT(0x49, gbc.l());
        EXPECT(0x3848, gbc.sp());
        EXPECT(0xd89b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd899));
        EXPECT(0x8c, gbc.readMem(0xd89a));
        // CB 8C 008E
        gbc.setState(0x9736, 0x4fa7, 0x35f0, 0x864c, 0xdfa4, 0xfdd2, 0x1, 0x0);
        gbc.writeMem(0x9736, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x35, gbc.a());
        EXPECT(0x86, gbc.b());
        EXPECT(0x4c, gbc.c());
        EXPECT(0xdf, gbc.d());
        EXPECT(0xa4, gbc.e());
        EXPECT(0xfd, gbc.h());
        EXPECT(0xd2, gbc.l());
        EXPECT(0x4fa7, gbc.sp());
        EXPECT(0x9738, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9736));
        EXPECT(0x8c, gbc.readMem(0x9737));
        // CB 8C 008F
        gbc.setState(0x29f2, 0xc162, 0xe380, 0x4458, 0x1274, 0x4200, 0x1, 0x0);
        gbc.writeMem(0x29f2, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xe3, gbc.a());
        EXPECT(0x44, gbc.b());
        EXPECT(0x58, gbc.c());
        EXPECT(0x12, gbc.d());
        EXPECT(0x74, gbc.e());
        EXPECT(0x40, gbc.h());
        EXPECT(0x0, gbc.l());
        EXPECT(0xc162, gbc.sp());
        EXPECT(0x29f4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 0091
        gbc.setState(0xe69, 0x865, 0xfa0, 0x2213, 0xdc83, 0xe27c, 0x1, 0x0);
        gbc.writeMem(0xe69, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xf, gbc.a());
        EXPECT(0x22, gbc.b());
        EXPECT(0x13, gbc.c());
        EXPECT(0xdc, gbc.d());
        EXPECT(0x83, gbc.e());
        EXPECT(0xe0, gbc.h());
        EXPECT(0x7c, gbc.l());
        EXPECT(0x865, gbc.sp());
        EXPECT(0xe6b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 0092
        gbc.setState(0x97d7, 0xb3e7, 0x3080, 0xa1fb, 0xca00, 0x6aa6, 0x0, 0x0);
        gbc.writeMem(0x97d7, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x30, gbc.a());
        EXPECT(0xa1, gbc.b());
        EXPECT(0xfb, gbc.c());
        EXPECT(0xca, gbc.d());
        EXPECT(0x0, gbc.e());
        EXPECT(0x68, gbc.h());
        EXPECT(0xa6, gbc.l());
        EXPECT(0xb3e7, gbc.sp());
        EXPECT(0x97d9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x97d7));
        EXPECT(0x8c, gbc.readMem(0x97d8));
        // CB 8C 0093
        gbc.setState(0x5f30, 0xec6f, 0x92a0, 0xe7a0, 0xed10, 0x8a24, 0x1, 0x0);
        gbc.writeMem(0x5f30, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x92, gbc.a());
        EXPECT(0xe7, gbc.b());
        EXPECT(0xa0, gbc.c());
        EXPECT(0xed, gbc.d());
        EXPECT(0x10, gbc.e());
        EXPECT(0x88, gbc.h());
        EXPECT(0x24, gbc.l());
        EXPECT(0xec6f, gbc.sp());
        EXPECT(0x5f32, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 0094
        gbc.setState(0x530f, 0xf625, 0x5320, 0x70b4, 0x6c2d, 0x27cc, 0x1, 0x0);
        gbc.writeMem(0x530f, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x53, gbc.a());
        EXPECT(0x70, gbc.b());
        EXPECT(0xb4, gbc.c());
        EXPECT(0x6c, gbc.d());
        EXPECT(0x2d, gbc.e());
        EXPECT(0x25, gbc.h());
        EXPECT(0xcc, gbc.l());
        EXPECT(0xf625, gbc.sp());
        EXPECT(0x5311, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 0095
        gbc.setState(0xb5ef, 0x3d4b, 0x35a0, 0x82fa, 0x3054, 0x865d, 0x1, 0x0);
        gbc.writeMem(0xb5ef, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x35, gbc.a());
        EXPECT(0x82, gbc.b());
        EXPECT(0xfa, gbc.c());
        EXPECT(0x30, gbc.d());
        EXPECT(0x54, gbc.e());
        EXPECT(0x84, gbc.h());
        EXPECT(0x5d, gbc.l());
        EXPECT(0x3d4b, gbc.sp());
        EXPECT(0xb5f1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb5ef));
        EXPECT(0x8c, gbc.readMem(0xb5f0));
        // CB 8C 0096
        gbc.setState(0xbfb2, 0xe986, 0x8b90, 0xa0a4, 0xcc38, 0xeab9, 0x1, 0x0);
        gbc.writeMem(0xbfb2, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x8b, gbc.a());
        EXPECT(0xa0, gbc.b());
        EXPECT(0xa4, gbc.c());
        EXPECT(0xcc, gbc.d());
        EXPECT(0x38, gbc.e());
        EXPECT(0xe8, gbc.h());
        EXPECT(0xb9, gbc.l());
        EXPECT(0xe986, gbc.sp());
        EXPECT(0xbfb4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbfb2));
        EXPECT(0x8c, gbc.readMem(0xbfb3));
        // CB 8C 0097
        gbc.setState(0x78ce, 0x6845, 0xc160, 0x1ba8, 0xe518, 0x7d8c, 0x1, 0x1);
        gbc.writeMem(0x78ce, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xc1, gbc.a());
        EXPECT(0x1b, gbc.b());
        EXPECT(0xa8, gbc.c());
        EXPECT(0xe5, gbc.d());
        EXPECT(0x18, gbc.e());
        EXPECT(0x7d, gbc.h());
        EXPECT(0x8c, gbc.l());
        EXPECT(0x6845, gbc.sp());
        EXPECT(0x78d0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 0098
        gbc.setState(0x966e, 0x5499, 0xa10, 0x36fb, 0x7bcc, 0xceef, 0x1, 0x0);
        gbc.writeMem(0x966e, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xa, gbc.a());
        EXPECT(0x36, gbc.b());
        EXPECT(0xfb, gbc.c());
        EXPECT(0x7b, gbc.d());
        EXPECT(0xcc, gbc.e());
        EXPECT(0xcc, gbc.h());
        EXPECT(0xef, gbc.l());
        EXPECT(0x5499, gbc.sp());
        EXPECT(0x9670, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x966e));
        EXPECT(0x8c, gbc.readMem(0x966f));
        // CB 8C 0099
        gbc.setState(0x7706, 0x8a78, 0x1310, 0xe1e8, 0x5e34, 0x7582, 0x1, 0x1);
        gbc.writeMem(0x7706, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x13, gbc.a());
        EXPECT(0xe1, gbc.b());
        EXPECT(0xe8, gbc.c());
        EXPECT(0x5e, gbc.d());
        EXPECT(0x34, gbc.e());
        EXPECT(0x75, gbc.h());
        EXPECT(0x82, gbc.l());
        EXPECT(0x8a78, gbc.sp());
        EXPECT(0x7708, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 009A
        gbc.setState(0x1e3, 0x2b62, 0x82b0, 0x987f, 0x565f, 0x10eb, 0x0, 0x1);
        gbc.writeMem(0x1e3, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x82, gbc.a());
        EXPECT(0x98, gbc.b());
        EXPECT(0x7f, gbc.c());
        EXPECT(0x56, gbc.d());
        EXPECT(0x5f, gbc.e());
        EXPECT(0x10, gbc.h());
        EXPECT(0xeb, gbc.l());
        EXPECT(0x2b62, gbc.sp());
        EXPECT(0x1e5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 009B
        gbc.setState(0x6bcb, 0xb072, 0x580, 0xf6a3, 0x9c3c, 0x4bb1, 0x0, 0x1);
        gbc.writeMem(0x6bcb, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x5, gbc.a());
        EXPECT(0xf6, gbc.b());
        EXPECT(0xa3, gbc.c());
        EXPECT(0x9c, gbc.d());
        EXPECT(0x3c, gbc.e());
        EXPECT(0x49, gbc.h());
        EXPECT(0xb1, gbc.l());
        EXPECT(0xb072, gbc.sp());
        EXPECT(0x6bcd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 009C
        gbc.setState(0x5109, 0x7e0f, 0xdb00, 0x5be, 0xbf7c, 0x4517, 0x0, 0x1);
        gbc.writeMem(0x5109, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xdb, gbc.a());
        EXPECT(0x5, gbc.b());
        EXPECT(0xbe, gbc.c());
        EXPECT(0xbf, gbc.d());
        EXPECT(0x7c, gbc.e());
        EXPECT(0x45, gbc.h());
        EXPECT(0x17, gbc.l());
        EXPECT(0x7e0f, gbc.sp());
        EXPECT(0x510b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 009E
        gbc.setState(0xb1fd, 0x8530, 0x1c00, 0xcfdb, 0x5c04, 0x9f82, 0x1, 0x1);
        gbc.writeMem(0xb1fd, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x1c, gbc.a());
        EXPECT(0xcf, gbc.b());
        EXPECT(0xdb, gbc.c());
        EXPECT(0x5c, gbc.d());
        EXPECT(0x4, gbc.e());
        EXPECT(0x9d, gbc.h());
        EXPECT(0x82, gbc.l());
        EXPECT(0x8530, gbc.sp());
        EXPECT(0xb1ff, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb1fd));
        EXPECT(0x8c, gbc.readMem(0xb1fe));
        // CB 8C 009F
        gbc.setState(0xdd72, 0x7146, 0x4810, 0xeac9, 0x936d, 0xd2f7, 0x0, 0x0);
        gbc.writeMem(0xdd72, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x48, gbc.a());
        EXPECT(0xea, gbc.b());
        EXPECT(0xc9, gbc.c());
        EXPECT(0x93, gbc.d());
        EXPECT(0x6d, gbc.e());
        EXPECT(0xd0, gbc.h());
        EXPECT(0xf7, gbc.l());
        EXPECT(0x7146, gbc.sp());
        EXPECT(0xdd74, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdd72));
        EXPECT(0x8c, gbc.readMem(0xdd73));
        // CB 8C 00A0
        gbc.setState(0xe3bc, 0x695b, 0x43a0, 0xdaa8, 0x4e75, 0xcb2f, 0x0, 0x0);
        gbc.writeMem(0xe3bc, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x43, gbc.a());
        EXPECT(0xda, gbc.b());
        EXPECT(0xa8, gbc.c());
        EXPECT(0x4e, gbc.d());
        EXPECT(0x75, gbc.e());
        EXPECT(0xc9, gbc.h());
        EXPECT(0x2f, gbc.l());
        EXPECT(0x695b, gbc.sp());
        EXPECT(0xe3be, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe3bc));
        EXPECT(0x8c, gbc.readMem(0xe3bd));
        // CB 8C 00A1
        gbc.setState(0x8c2e, 0xe103, 0x8230, 0xdf03, 0x1486, 0xe438, 0x0, 0x0);
        gbc.writeMem(0x8c2e, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x82, gbc.a());
        EXPECT(0xdf, gbc.b());
        EXPECT(0x3, gbc.c());
        EXPECT(0x14, gbc.d());
        EXPECT(0x86, gbc.e());
        EXPECT(0xe4, gbc.h());
        EXPECT(0x38, gbc.l());
        EXPECT(0xe103, gbc.sp());
        EXPECT(0x8c30, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8c2e));
        EXPECT(0x8c, gbc.readMem(0x8c2f));
        // CB 8C 00A2
        gbc.setState(0xb9ee, 0x2ba4, 0xba10, 0x9aef, 0x6f1c, 0xacd0, 0x1, 0x0);
        gbc.writeMem(0xb9ee, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xba, gbc.a());
        EXPECT(0x9a, gbc.b());
        EXPECT(0xef, gbc.c());
        EXPECT(0x6f, gbc.d());
        EXPECT(0x1c, gbc.e());
        EXPECT(0xac, gbc.h());
        EXPECT(0xd0, gbc.l());
        EXPECT(0x2ba4, gbc.sp());
        EXPECT(0xb9f0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb9ee));
        EXPECT(0x8c, gbc.readMem(0xb9ef));
        // CB 8C 00A3
        gbc.setState(0xba06, 0x1b5a, 0x3840, 0x14e0, 0xe283, 0xe538, 0x1, 0x1);
        gbc.writeMem(0xba06, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x38, gbc.a());
        EXPECT(0x14, gbc.b());
        EXPECT(0xe0, gbc.c());
        EXPECT(0xe2, gbc.d());
        EXPECT(0x83, gbc.e());
        EXPECT(0xe5, gbc.h());
        EXPECT(0x38, gbc.l());
        EXPECT(0x1b5a, gbc.sp());
        EXPECT(0xba08, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xba06));
        EXPECT(0x8c, gbc.readMem(0xba07));
        // CB 8C 00A4
        gbc.setState(0xed5e, 0x7fc8, 0x43c0, 0xebf6, 0xca65, 0xa402, 0x0, 0x1);
        gbc.writeMem(0xed5e, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x43, gbc.a());
        EXPECT(0xeb, gbc.b());
        EXPECT(0xf6, gbc.c());
        EXPECT(0xca, gbc.d());
        EXPECT(0x65, gbc.e());
        EXPECT(0xa4, gbc.h());
        EXPECT(0x2, gbc.l());
        EXPECT(0x7fc8, gbc.sp());
        EXPECT(0xed60, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xed5e));
        EXPECT(0x8c, gbc.readMem(0xed5f));
        // CB 8C 00A5
        gbc.setState(0x9999, 0x67ee, 0x9a70, 0x62ef, 0x8dae, 0x4775, 0x1, 0x0);
        gbc.writeMem(0x9999, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x9a, gbc.a());
        EXPECT(0x62, gbc.b());
        EXPECT(0xef, gbc.c());
        EXPECT(0x8d, gbc.d());
        EXPECT(0xae, gbc.e());
        EXPECT(0x45, gbc.h());
        EXPECT(0x75, gbc.l());
        EXPECT(0x67ee, gbc.sp());
        EXPECT(0x999b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9999));
        EXPECT(0x8c, gbc.readMem(0x999a));
        // CB 8C 00A6
        gbc.setState(0x60b5, 0xd080, 0x50c0, 0x119c, 0xa490, 0x257c, 0x1, 0x0);
        gbc.writeMem(0x60b5, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x50, gbc.a());
        EXPECT(0x11, gbc.b());
        EXPECT(0x9c, gbc.c());
        EXPECT(0xa4, gbc.d());
        EXPECT(0x90, gbc.e());
        EXPECT(0x25, gbc.h());
        EXPECT(0x7c, gbc.l());
        EXPECT(0xd080, gbc.sp());
        EXPECT(0x60b7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 00A7
        gbc.setState(0xe36c, 0x5c3c, 0x97b0, 0x4a48, 0x56f7, 0xd64, 0x0, 0x0);
        gbc.writeMem(0xe36c, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x97, gbc.a());
        EXPECT(0x4a, gbc.b());
        EXPECT(0x48, gbc.c());
        EXPECT(0x56, gbc.d());
        EXPECT(0xf7, gbc.e());
        EXPECT(0xd, gbc.h());
        EXPECT(0x64, gbc.l());
        EXPECT(0x5c3c, gbc.sp());
        EXPECT(0xe36e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe36c));
        EXPECT(0x8c, gbc.readMem(0xe36d));
        // CB 8C 00A8
        gbc.setState(0x10f1, 0x9613, 0xf160, 0x218c, 0x5f06, 0x822a, 0x1, 0x1);
        gbc.writeMem(0x10f1, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xf1, gbc.a());
        EXPECT(0x21, gbc.b());
        EXPECT(0x8c, gbc.c());
        EXPECT(0x5f, gbc.d());
        EXPECT(0x6, gbc.e());
        EXPECT(0x80, gbc.h());
        EXPECT(0x2a, gbc.l());
        EXPECT(0x9613, gbc.sp());
        EXPECT(0x10f3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 00A9
        gbc.setState(0x938d, 0xfc56, 0x4610, 0x63ea, 0x1f5a, 0x2e7, 0x1, 0x1);
        gbc.writeMem(0x938d, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x46, gbc.a());
        EXPECT(0x63, gbc.b());
        EXPECT(0xea, gbc.c());
        EXPECT(0x1f, gbc.d());
        EXPECT(0x5a, gbc.e());
        EXPECT(0x0, gbc.h());
        EXPECT(0xe7, gbc.l());
        EXPECT(0xfc56, gbc.sp());
        EXPECT(0x938f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x938d));
        EXPECT(0x8c, gbc.readMem(0x938e));
        // CB 8C 00AA
        gbc.setState(0xd251, 0x1775, 0x1250, 0xb0fc, 0xdda7, 0xe83a, 0x1, 0x1);
        gbc.writeMem(0xd251, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x12, gbc.a());
        EXPECT(0xb0, gbc.b());
        EXPECT(0xfc, gbc.c());
        EXPECT(0xdd, gbc.d());
        EXPECT(0xa7, gbc.e());
        EXPECT(0xe8, gbc.h());
        EXPECT(0x3a, gbc.l());
        EXPECT(0x1775, gbc.sp());
        EXPECT(0xd253, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd251));
        EXPECT(0x8c, gbc.readMem(0xd252));
        // CB 8C 00AB
        gbc.setState(0x94e7, 0x17b3, 0xc460, 0x8c8b, 0x4f55, 0xe5ff, 0x1, 0x0);
        gbc.writeMem(0x94e7, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xc4, gbc.a());
        EXPECT(0x8c, gbc.b());
        EXPECT(0x8b, gbc.c());
        EXPECT(0x4f, gbc.d());
        EXPECT(0x55, gbc.e());
        EXPECT(0xe5, gbc.h());
        EXPECT(0xff, gbc.l());
        EXPECT(0x17b3, gbc.sp());
        EXPECT(0x94e9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x94e7));
        EXPECT(0x8c, gbc.readMem(0x94e8));
        // CB 8C 00AC
        gbc.setState(0xcdd1, 0xfad2, 0x99f0, 0x6dc4, 0xfbc4, 0x7be7, 0x0, 0x1);
        gbc.writeMem(0xcdd1, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x99, gbc.a());
        EXPECT(0x6d, gbc.b());
        EXPECT(0xc4, gbc.c());
        EXPECT(0xfb, gbc.d());
        EXPECT(0xc4, gbc.e());
        EXPECT(0x79, gbc.h());
        EXPECT(0xe7, gbc.l());
        EXPECT(0xfad2, gbc.sp());
        EXPECT(0xcdd3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcdd1));
        EXPECT(0x8c, gbc.readMem(0xcdd2));
        // CB 8C 00AD
        gbc.setState(0x92b0, 0xd033, 0x1bb0, 0xb51e, 0x36a4, 0x8101, 0x0, 0x1);
        gbc.writeMem(0x92b0, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x1b, gbc.a());
        EXPECT(0xb5, gbc.b());
        EXPECT(0x1e, gbc.c());
        EXPECT(0x36, gbc.d());
        EXPECT(0xa4, gbc.e());
        EXPECT(0x81, gbc.h());
        EXPECT(0x1, gbc.l());
        EXPECT(0xd033, gbc.sp());
        EXPECT(0x92b2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x92b0));
        EXPECT(0x8c, gbc.readMem(0x92b1));
        // CB 8C 00AE
        gbc.setState(0x50ed, 0x8f12, 0x4990, 0xadc0, 0x1099, 0xd6a9, 0x0, 0x0);
        gbc.writeMem(0x50ed, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x49, gbc.a());
        EXPECT(0xad, gbc.b());
        EXPECT(0xc0, gbc.c());
        EXPECT(0x10, gbc.d());
        EXPECT(0x99, gbc.e());
        EXPECT(0xd4, gbc.h());
        EXPECT(0xa9, gbc.l());
        EXPECT(0x8f12, gbc.sp());
        EXPECT(0x50ef, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 00AF
        gbc.setState(0x346d, 0x2512, 0x7440, 0x17ab, 0xe4b1, 0xf162, 0x1, 0x0);
        gbc.writeMem(0x346d, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x74, gbc.a());
        EXPECT(0x17, gbc.b());
        EXPECT(0xab, gbc.c());
        EXPECT(0xe4, gbc.d());
        EXPECT(0xb1, gbc.e());
        EXPECT(0xf1, gbc.h());
        EXPECT(0x62, gbc.l());
        EXPECT(0x2512, gbc.sp());
        EXPECT(0x346f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 00B1
        gbc.setState(0xcfad, 0x3d99, 0xf330, 0xcdd3, 0x43aa, 0x4df5, 0x1, 0x1);
        gbc.writeMem(0xcfad, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xf3, gbc.a());
        EXPECT(0xcd, gbc.b());
        EXPECT(0xd3, gbc.c());
        EXPECT(0x43, gbc.d());
        EXPECT(0xaa, gbc.e());
        EXPECT(0x4d, gbc.h());
        EXPECT(0xf5, gbc.l());
        EXPECT(0x3d99, gbc.sp());
        EXPECT(0xcfaf, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcfad));
        EXPECT(0x8c, gbc.readMem(0xcfae));
        // CB 8C 00B2
        gbc.setState(0xa1b9, 0xd111, 0x96e0, 0xf118, 0x269f, 0x68e7, 0x1, 0x1);
        gbc.writeMem(0xa1b9, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x96, gbc.a());
        EXPECT(0xf1, gbc.b());
        EXPECT(0x18, gbc.c());
        EXPECT(0x26, gbc.d());
        EXPECT(0x9f, gbc.e());
        EXPECT(0x68, gbc.h());
        EXPECT(0xe7, gbc.l());
        EXPECT(0xd111, gbc.sp());
        EXPECT(0xa1bb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa1b9));
        EXPECT(0x8c, gbc.readMem(0xa1ba));
        // CB 8C 00B3
        gbc.setState(0x23ab, 0xb3c5, 0x9500, 0x4eb6, 0x2b57, 0x82e1, 0x1, 0x0);
        gbc.writeMem(0x23ab, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x95, gbc.a());
        EXPECT(0x4e, gbc.b());
        EXPECT(0xb6, gbc.c());
        EXPECT(0x2b, gbc.d());
        EXPECT(0x57, gbc.e());
        EXPECT(0x80, gbc.h());
        EXPECT(0xe1, gbc.l());
        EXPECT(0xb3c5, gbc.sp());
        EXPECT(0x23ad, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 00B4
        gbc.setState(0xd6c6, 0x3578, 0xff40, 0xeb7a, 0x3b82, 0x6e23, 0x0, 0x0);
        gbc.writeMem(0xd6c6, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xff, gbc.a());
        EXPECT(0xeb, gbc.b());
        EXPECT(0x7a, gbc.c());
        EXPECT(0x3b, gbc.d());
        EXPECT(0x82, gbc.e());
        EXPECT(0x6c, gbc.h());
        EXPECT(0x23, gbc.l());
        EXPECT(0x3578, gbc.sp());
        EXPECT(0xd6c8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd6c6));
        EXPECT(0x8c, gbc.readMem(0xd6c7));
        // CB 8C 00B5
        gbc.setState(0x4e95, 0x3287, 0x8bc0, 0xd074, 0x179b, 0xbb7b, 0x1, 0x1);
        gbc.writeMem(0x4e95, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x8b, gbc.a());
        EXPECT(0xd0, gbc.b());
        EXPECT(0x74, gbc.c());
        EXPECT(0x17, gbc.d());
        EXPECT(0x9b, gbc.e());
        EXPECT(0xb9, gbc.h());
        EXPECT(0x7b, gbc.l());
        EXPECT(0x3287, gbc.sp());
        EXPECT(0x4e97, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 00B6
        gbc.setState(0x428f, 0x3a0c, 0xc500, 0x435e, 0x75cd, 0x3389, 0x0, 0x1);
        gbc.writeMem(0x428f, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xc5, gbc.a());
        EXPECT(0x43, gbc.b());
        EXPECT(0x5e, gbc.c());
        EXPECT(0x75, gbc.d());
        EXPECT(0xcd, gbc.e());
        EXPECT(0x31, gbc.h());
        EXPECT(0x89, gbc.l());
        EXPECT(0x3a0c, gbc.sp());
        EXPECT(0x4291, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 00B8
        gbc.setState(0xa6da, 0x4691, 0x3dc0, 0x2284, 0xae23, 0xb00e, 0x1, 0x1);
        gbc.writeMem(0xa6da, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x3d, gbc.a());
        EXPECT(0x22, gbc.b());
        EXPECT(0x84, gbc.c());
        EXPECT(0xae, gbc.d());
        EXPECT(0x23, gbc.e());
        EXPECT(0xb0, gbc.h());
        EXPECT(0xe, gbc.l());
        EXPECT(0x4691, gbc.sp());
        EXPECT(0xa6dc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa6da));
        EXPECT(0x8c, gbc.readMem(0xa6db));
        // CB 8C 00B9
        gbc.setState(0xb413, 0x37dc, 0xe810, 0x5c72, 0xd12c, 0x5abb, 0x0, 0x1);
        gbc.writeMem(0xb413, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xe8, gbc.a());
        EXPECT(0x5c, gbc.b());
        EXPECT(0x72, gbc.c());
        EXPECT(0xd1, gbc.d());
        EXPECT(0x2c, gbc.e());
        EXPECT(0x58, gbc.h());
        EXPECT(0xbb, gbc.l());
        EXPECT(0x37dc, gbc.sp());
        EXPECT(0xb415, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb413));
        EXPECT(0x8c, gbc.readMem(0xb414));
        // CB 8C 00BA
        gbc.setState(0x9801, 0xaf52, 0x9bf0, 0x3b17, 0x841e, 0x25bc, 0x1, 0x1);
        gbc.writeMem(0x9801, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x9b, gbc.a());
        EXPECT(0x3b, gbc.b());
        EXPECT(0x17, gbc.c());
        EXPECT(0x84, gbc.d());
        EXPECT(0x1e, gbc.e());
        EXPECT(0x25, gbc.h());
        EXPECT(0xbc, gbc.l());
        EXPECT(0xaf52, gbc.sp());
        EXPECT(0x9803, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9801));
        EXPECT(0x8c, gbc.readMem(0x9802));
        // CB 8C 00BB
        gbc.setState(0xe23e, 0x23f7, 0xc820, 0x5c9c, 0x968e, 0xae77, 0x0, 0x0);
        gbc.writeMem(0xe23e, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xc8, gbc.a());
        EXPECT(0x5c, gbc.b());
        EXPECT(0x9c, gbc.c());
        EXPECT(0x96, gbc.d());
        EXPECT(0x8e, gbc.e());
        EXPECT(0xac, gbc.h());
        EXPECT(0x77, gbc.l());
        EXPECT(0x23f7, gbc.sp());
        EXPECT(0xe240, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe23e));
        EXPECT(0x8c, gbc.readMem(0xe23f));
        // CB 8C 00BC
        gbc.setState(0x350, 0x9a71, 0x2d50, 0x9d22, 0x96f5, 0x2e47, 0x0, 0x0);
        gbc.writeMem(0x350, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x2d, gbc.a());
        EXPECT(0x9d, gbc.b());
        EXPECT(0x22, gbc.c());
        EXPECT(0x96, gbc.d());
        EXPECT(0xf5, gbc.e());
        EXPECT(0x2c, gbc.h());
        EXPECT(0x47, gbc.l());
        EXPECT(0x9a71, gbc.sp());
        EXPECT(0x352, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 00BD
        gbc.setState(0x3a88, 0xef77, 0xa2a0, 0x3771, 0x810, 0x5eb4, 0x0, 0x0);
        gbc.writeMem(0x3a88, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xa2, gbc.a());
        EXPECT(0x37, gbc.b());
        EXPECT(0x71, gbc.c());
        EXPECT(0x8, gbc.d());
        EXPECT(0x10, gbc.e());
        EXPECT(0x5c, gbc.h());
        EXPECT(0xb4, gbc.l());
        EXPECT(0xef77, gbc.sp());
        EXPECT(0x3a8a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 00BE
        gbc.setState(0xe912, 0x4bd4, 0xa50, 0x70eb, 0x246d, 0xa6ef, 0x0, 0x1);
        gbc.writeMem(0xe912, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xa, gbc.a());
        EXPECT(0x70, gbc.b());
        EXPECT(0xeb, gbc.c());
        EXPECT(0x24, gbc.d());
        EXPECT(0x6d, gbc.e());
        EXPECT(0xa4, gbc.h());
        EXPECT(0xef, gbc.l());
        EXPECT(0x4bd4, gbc.sp());
        EXPECT(0xe914, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe912));
        EXPECT(0x8c, gbc.readMem(0xe913));
        // CB 8C 00BF
        gbc.setState(0x3cbd, 0xca4e, 0xcfd0, 0xb451, 0x8bf3, 0xcfda, 0x1, 0x1);
        gbc.writeMem(0x3cbd, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xcf, gbc.a());
        EXPECT(0xb4, gbc.b());
        EXPECT(0x51, gbc.c());
        EXPECT(0x8b, gbc.d());
        EXPECT(0xf3, gbc.e());
        EXPECT(0xcd, gbc.h());
        EXPECT(0xda, gbc.l());
        EXPECT(0xca4e, gbc.sp());
        EXPECT(0x3cbf, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 00C0
        gbc.setState(0xb850, 0x78a7, 0x73a0, 0x45e, 0x84db, 0xd168, 0x1, 0x1);
        gbc.writeMem(0xb850, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x73, gbc.a());
        EXPECT(0x4, gbc.b());
        EXPECT(0x5e, gbc.c());
        EXPECT(0x84, gbc.d());
        EXPECT(0xdb, gbc.e());
        EXPECT(0xd1, gbc.h());
        EXPECT(0x68, gbc.l());
        EXPECT(0x78a7, gbc.sp());
        EXPECT(0xb852, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb850));
        EXPECT(0x8c, gbc.readMem(0xb851));
        // CB 8C 00C1
        gbc.setState(0xecaf, 0xb125, 0xdc70, 0x72ce, 0xf4, 0x79f4, 0x0, 0x1);
        gbc.writeMem(0xecaf, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xdc, gbc.a());
        EXPECT(0x72, gbc.b());
        EXPECT(0xce, gbc.c());
        EXPECT(0x0, gbc.d());
        EXPECT(0xf4, gbc.e());
        EXPECT(0x79, gbc.h());
        EXPECT(0xf4, gbc.l());
        EXPECT(0xb125, gbc.sp());
        EXPECT(0xecb1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xecaf));
        EXPECT(0x8c, gbc.readMem(0xecb0));
        // CB 8C 00C2
        gbc.setState(0xcf, 0xa1d1, 0xb510, 0x310d, 0x3b99, 0xff1, 0x1, 0x1);
        gbc.writeMem(0xcf, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xb5, gbc.a());
        EXPECT(0x31, gbc.b());
        EXPECT(0xd, gbc.c());
        EXPECT(0x3b, gbc.d());
        EXPECT(0x99, gbc.e());
        EXPECT(0xd, gbc.h());
        EXPECT(0xf1, gbc.l());
        EXPECT(0xa1d1, gbc.sp());
        EXPECT(0xd1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 00C3
        gbc.setState(0x5a14, 0x4b0f, 0x9770, 0x2c31, 0x6d7, 0xd702, 0x1, 0x1);
        gbc.writeMem(0x5a14, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x97, gbc.a());
        EXPECT(0x2c, gbc.b());
        EXPECT(0x31, gbc.c());
        EXPECT(0x6, gbc.d());
        EXPECT(0xd7, gbc.e());
        EXPECT(0xd5, gbc.h());
        EXPECT(0x2, gbc.l());
        EXPECT(0x4b0f, gbc.sp());
        EXPECT(0x5a16, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 00C4
        gbc.setState(0x77f6, 0x1f4c, 0x6ff0, 0xe454, 0x3146, 0x984c, 0x1, 0x0);
        gbc.writeMem(0x77f6, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x6f, gbc.a());
        EXPECT(0xe4, gbc.b());
        EXPECT(0x54, gbc.c());
        EXPECT(0x31, gbc.d());
        EXPECT(0x46, gbc.e());
        EXPECT(0x98, gbc.h());
        EXPECT(0x4c, gbc.l());
        EXPECT(0x1f4c, gbc.sp());
        EXPECT(0x77f8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 00C5
        gbc.setState(0xc672, 0x5837, 0x74c0, 0xede0, 0x1a08, 0xa705, 0x0, 0x0);
        gbc.writeMem(0xc672, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x74, gbc.a());
        EXPECT(0xed, gbc.b());
        EXPECT(0xe0, gbc.c());
        EXPECT(0x1a, gbc.d());
        EXPECT(0x8, gbc.e());
        EXPECT(0xa5, gbc.h());
        EXPECT(0x5, gbc.l());
        EXPECT(0x5837, gbc.sp());
        EXPECT(0xc674, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc672));
        EXPECT(0x8c, gbc.readMem(0xc673));
        // CB 8C 00C6
        gbc.setState(0x90af, 0x96a4, 0xe260, 0x371d, 0x35ef, 0x17cf, 0x0, 0x0);
        gbc.writeMem(0x90af, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xe2, gbc.a());
        EXPECT(0x37, gbc.b());
        EXPECT(0x1d, gbc.c());
        EXPECT(0x35, gbc.d());
        EXPECT(0xef, gbc.e());
        EXPECT(0x15, gbc.h());
        EXPECT(0xcf, gbc.l());
        EXPECT(0x96a4, gbc.sp());
        EXPECT(0x90b1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x90af));
        EXPECT(0x8c, gbc.readMem(0x90b0));
        // CB 8C 00C7
        gbc.setState(0x6303, 0x735a, 0x5130, 0x7462, 0xf8d4, 0x5859, 0x1, 0x1);
        gbc.writeMem(0x6303, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x51, gbc.a());
        EXPECT(0x74, gbc.b());
        EXPECT(0x62, gbc.c());
        EXPECT(0xf8, gbc.d());
        EXPECT(0xd4, gbc.e());
        EXPECT(0x58, gbc.h());
        EXPECT(0x59, gbc.l());
        EXPECT(0x735a, gbc.sp());
        EXPECT(0x6305, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 00C8
        gbc.setState(0xad89, 0x9e72, 0xba80, 0xbacf, 0xb0f8, 0xfe2c, 0x1, 0x0);
        gbc.writeMem(0xad89, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xba, gbc.a());
        EXPECT(0xba, gbc.b());
        EXPECT(0xcf, gbc.c());
        EXPECT(0xb0, gbc.d());
        EXPECT(0xf8, gbc.e());
        EXPECT(0xfc, gbc.h());
        EXPECT(0x2c, gbc.l());
        EXPECT(0x9e72, gbc.sp());
        EXPECT(0xad8b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xad89));
        EXPECT(0x8c, gbc.readMem(0xad8a));
        // CB 8C 00C9
        gbc.setState(0x8fe6, 0x1f26, 0x3b10, 0xa66e, 0x6fbd, 0x4f0d, 0x1, 0x0);
        gbc.writeMem(0x8fe6, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x3b, gbc.a());
        EXPECT(0xa6, gbc.b());
        EXPECT(0x6e, gbc.c());
        EXPECT(0x6f, gbc.d());
        EXPECT(0xbd, gbc.e());
        EXPECT(0x4d, gbc.h());
        EXPECT(0xd, gbc.l());
        EXPECT(0x1f26, gbc.sp());
        EXPECT(0x8fe8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8fe6));
        EXPECT(0x8c, gbc.readMem(0x8fe7));
        // CB 8C 00CA
        gbc.setState(0xb77, 0x857f, 0x80, 0x3eec, 0x2b75, 0xe7fd, 0x1, 0x1);
        gbc.writeMem(0xb77, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x3e, gbc.b());
        EXPECT(0xec, gbc.c());
        EXPECT(0x2b, gbc.d());
        EXPECT(0x75, gbc.e());
        EXPECT(0xe5, gbc.h());
        EXPECT(0xfd, gbc.l());
        EXPECT(0x857f, gbc.sp());
        EXPECT(0xb79, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 00CB
        gbc.setState(0x5f9c, 0x3344, 0xb390, 0xbf80, 0x43fa, 0x820e, 0x1, 0x1);
        gbc.writeMem(0x5f9c, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xb3, gbc.a());
        EXPECT(0xbf, gbc.b());
        EXPECT(0x80, gbc.c());
        EXPECT(0x43, gbc.d());
        EXPECT(0xfa, gbc.e());
        EXPECT(0x80, gbc.h());
        EXPECT(0xe, gbc.l());
        EXPECT(0x3344, gbc.sp());
        EXPECT(0x5f9e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 00CC
        gbc.setState(0x3a97, 0x9f52, 0x4a50, 0x53b4, 0xc0d9, 0xba95, 0x0, 0x0);
        gbc.writeMem(0x3a97, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x4a, gbc.a());
        EXPECT(0x53, gbc.b());
        EXPECT(0xb4, gbc.c());
        EXPECT(0xc0, gbc.d());
        EXPECT(0xd9, gbc.e());
        EXPECT(0xb8, gbc.h());
        EXPECT(0x95, gbc.l());
        EXPECT(0x9f52, gbc.sp());
        EXPECT(0x3a99, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 00CD
        gbc.setState(0x7830, 0x7c76, 0xba40, 0x7716, 0x2422, 0x4a60, 0x1, 0x0);
        gbc.writeMem(0x7830, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xba, gbc.a());
        EXPECT(0x77, gbc.b());
        EXPECT(0x16, gbc.c());
        EXPECT(0x24, gbc.d());
        EXPECT(0x22, gbc.e());
        EXPECT(0x48, gbc.h());
        EXPECT(0x60, gbc.l());
        EXPECT(0x7c76, gbc.sp());
        EXPECT(0x7832, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 00CE
        gbc.setState(0x7b91, 0x9d78, 0x9750, 0x256, 0x9132, 0x88c0, 0x1, 0x0);
        gbc.writeMem(0x7b91, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x97, gbc.a());
        EXPECT(0x2, gbc.b());
        EXPECT(0x56, gbc.c());
        EXPECT(0x91, gbc.d());
        EXPECT(0x32, gbc.e());
        EXPECT(0x88, gbc.h());
        EXPECT(0xc0, gbc.l());
        EXPECT(0x9d78, gbc.sp());
        EXPECT(0x7b93, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 00CF
        gbc.setState(0x1942, 0xc1d6, 0x5650, 0x2f50, 0x2722, 0x2b7, 0x1, 0x0);
        gbc.writeMem(0x1942, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x56, gbc.a());
        EXPECT(0x2f, gbc.b());
        EXPECT(0x50, gbc.c());
        EXPECT(0x27, gbc.d());
        EXPECT(0x22, gbc.e());
        EXPECT(0x0, gbc.h());
        EXPECT(0xb7, gbc.l());
        EXPECT(0xc1d6, gbc.sp());
        EXPECT(0x1944, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 00D0
        gbc.setState(0xec91, 0x1c24, 0x6210, 0x110, 0xf11b, 0x5f4a, 0x0, 0x0);
        gbc.writeMem(0xec91, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x62, gbc.a());
        EXPECT(0x1, gbc.b());
        EXPECT(0x10, gbc.c());
        EXPECT(0xf1, gbc.d());
        EXPECT(0x1b, gbc.e());
        EXPECT(0x5d, gbc.h());
        EXPECT(0x4a, gbc.l());
        EXPECT(0x1c24, gbc.sp());
        EXPECT(0xec93, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xec91));
        EXPECT(0x8c, gbc.readMem(0xec92));
        // CB 8C 00D1
        gbc.setState(0x38b1, 0x1484, 0xded0, 0x9ae8, 0x7987, 0x4f58, 0x0, 0x0);
        gbc.writeMem(0x38b1, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xde, gbc.a());
        EXPECT(0x9a, gbc.b());
        EXPECT(0xe8, gbc.c());
        EXPECT(0x79, gbc.d());
        EXPECT(0x87, gbc.e());
        EXPECT(0x4d, gbc.h());
        EXPECT(0x58, gbc.l());
        EXPECT(0x1484, gbc.sp());
        EXPECT(0x38b3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 00D2
        gbc.setState(0x4353, 0x1cbc, 0x9790, 0x4540, 0x318d, 0xd3ee, 0x1, 0x1);
        gbc.writeMem(0x4353, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x97, gbc.a());
        EXPECT(0x45, gbc.b());
        EXPECT(0x40, gbc.c());
        EXPECT(0x31, gbc.d());
        EXPECT(0x8d, gbc.e());
        EXPECT(0xd1, gbc.h());
        EXPECT(0xee, gbc.l());
        EXPECT(0x1cbc, gbc.sp());
        EXPECT(0x4355, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 00D3
        gbc.setState(0x3930, 0x5ebb, 0x7a10, 0x3aab, 0xdc48, 0xfbdc, 0x1, 0x0);
        gbc.writeMem(0x3930, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x7a, gbc.a());
        EXPECT(0x3a, gbc.b());
        EXPECT(0xab, gbc.c());
        EXPECT(0xdc, gbc.d());
        EXPECT(0x48, gbc.e());
        EXPECT(0xf9, gbc.h());
        EXPECT(0xdc, gbc.l());
        EXPECT(0x5ebb, gbc.sp());
        EXPECT(0x3932, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 00D4
        gbc.setState(0x7d36, 0xd7d7, 0xc3e0, 0x8ca4, 0xfa21, 0xbc2d, 0x0, 0x1);
        gbc.writeMem(0x7d36, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xc3, gbc.a());
        EXPECT(0x8c, gbc.b());
        EXPECT(0xa4, gbc.c());
        EXPECT(0xfa, gbc.d());
        EXPECT(0x21, gbc.e());
        EXPECT(0xbc, gbc.h());
        EXPECT(0x2d, gbc.l());
        EXPECT(0xd7d7, gbc.sp());
        EXPECT(0x7d38, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 00D5
        gbc.setState(0x2375, 0xe24a, 0xddc0, 0xe486, 0xaee8, 0xe226, 0x0, 0x0);
        gbc.writeMem(0x2375, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xdd, gbc.a());
        EXPECT(0xe4, gbc.b());
        EXPECT(0x86, gbc.c());
        EXPECT(0xae, gbc.d());
        EXPECT(0xe8, gbc.e());
        EXPECT(0xe0, gbc.h());
        EXPECT(0x26, gbc.l());
        EXPECT(0xe24a, gbc.sp());
        EXPECT(0x2377, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 00D6
        gbc.setState(0x89d4, 0x6bab, 0x9810, 0x35a1, 0xdcb6, 0x870c, 0x0, 0x0);
        gbc.writeMem(0x89d4, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x98, gbc.a());
        EXPECT(0x35, gbc.b());
        EXPECT(0xa1, gbc.c());
        EXPECT(0xdc, gbc.d());
        EXPECT(0xb6, gbc.e());
        EXPECT(0x85, gbc.h());
        EXPECT(0xc, gbc.l());
        EXPECT(0x6bab, gbc.sp());
        EXPECT(0x89d6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x89d4));
        EXPECT(0x8c, gbc.readMem(0x89d5));
        // CB 8C 00D7
        gbc.setState(0x14e4, 0x78c0, 0x9cf0, 0xea15, 0xd422, 0x2c3b, 0x0, 0x1);
        gbc.writeMem(0x14e4, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x9c, gbc.a());
        EXPECT(0xea, gbc.b());
        EXPECT(0x15, gbc.c());
        EXPECT(0xd4, gbc.d());
        EXPECT(0x22, gbc.e());
        EXPECT(0x2c, gbc.h());
        EXPECT(0x3b, gbc.l());
        EXPECT(0x78c0, gbc.sp());
        EXPECT(0x14e6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 00D8
        gbc.setState(0xd14f, 0xd234, 0x6280, 0x84ec, 0xa879, 0x55d6, 0x0, 0x0);
        gbc.writeMem(0xd14f, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x62, gbc.a());
        EXPECT(0x84, gbc.b());
        EXPECT(0xec, gbc.c());
        EXPECT(0xa8, gbc.d());
        EXPECT(0x79, gbc.e());
        EXPECT(0x55, gbc.h());
        EXPECT(0xd6, gbc.l());
        EXPECT(0xd234, gbc.sp());
        EXPECT(0xd151, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd14f));
        EXPECT(0x8c, gbc.readMem(0xd150));
        // CB 8C 00D9
        gbc.setState(0x2d66, 0xfb47, 0x3350, 0xe206, 0x4577, 0x64b6, 0x0, 0x1);
        gbc.writeMem(0x2d66, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x33, gbc.a());
        EXPECT(0xe2, gbc.b());
        EXPECT(0x6, gbc.c());
        EXPECT(0x45, gbc.d());
        EXPECT(0x77, gbc.e());
        EXPECT(0x64, gbc.h());
        EXPECT(0xb6, gbc.l());
        EXPECT(0xfb47, gbc.sp());
        EXPECT(0x2d68, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 00DA
        gbc.setState(0x32a8, 0xd4a0, 0xee80, 0x1e54, 0xed7e, 0xfa62, 0x1, 0x1);
        gbc.writeMem(0x32a8, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xee, gbc.a());
        EXPECT(0x1e, gbc.b());
        EXPECT(0x54, gbc.c());
        EXPECT(0xed, gbc.d());
        EXPECT(0x7e, gbc.e());
        EXPECT(0xf8, gbc.h());
        EXPECT(0x62, gbc.l());
        EXPECT(0xd4a0, gbc.sp());
        EXPECT(0x32aa, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 00DB
        gbc.setState(0xc408, 0x1b9e, 0xbf70, 0x8887, 0x109, 0xc1ae, 0x1, 0x0);
        gbc.writeMem(0xc408, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xbf, gbc.a());
        EXPECT(0x88, gbc.b());
        EXPECT(0x87, gbc.c());
        EXPECT(0x1, gbc.d());
        EXPECT(0x9, gbc.e());
        EXPECT(0xc1, gbc.h());
        EXPECT(0xae, gbc.l());
        EXPECT(0x1b9e, gbc.sp());
        EXPECT(0xc40a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc408));
        EXPECT(0x8c, gbc.readMem(0xc409));
        // CB 8C 00DC
        gbc.setState(0x3058, 0x4738, 0x36a0, 0x6d0c, 0xc1e5, 0x2ec0, 0x0, 0x1);
        gbc.writeMem(0x3058, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x36, gbc.a());
        EXPECT(0x6d, gbc.b());
        EXPECT(0xc, gbc.c());
        EXPECT(0xc1, gbc.d());
        EXPECT(0xe5, gbc.e());
        EXPECT(0x2c, gbc.h());
        EXPECT(0xc0, gbc.l());
        EXPECT(0x4738, gbc.sp());
        EXPECT(0x305a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 00DD
        gbc.setState(0x81ce, 0x6ee2, 0xfa90, 0x70f2, 0x6113, 0x51c2, 0x1, 0x0);
        gbc.writeMem(0x81ce, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xfa, gbc.a());
        EXPECT(0x70, gbc.b());
        EXPECT(0xf2, gbc.c());
        EXPECT(0x61, gbc.d());
        EXPECT(0x13, gbc.e());
        EXPECT(0x51, gbc.h());
        EXPECT(0xc2, gbc.l());
        EXPECT(0x6ee2, gbc.sp());
        EXPECT(0x81d0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x81ce));
        EXPECT(0x8c, gbc.readMem(0x81cf));
        // CB 8C 00DE
        gbc.setState(0xdc9, 0x3d07, 0xe0f0, 0x78b1, 0x72b9, 0xc3d8, 0x1, 0x1);
        gbc.writeMem(0xdc9, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xe0, gbc.a());
        EXPECT(0x78, gbc.b());
        EXPECT(0xb1, gbc.c());
        EXPECT(0x72, gbc.d());
        EXPECT(0xb9, gbc.e());
        EXPECT(0xc1, gbc.h());
        EXPECT(0xd8, gbc.l());
        EXPECT(0x3d07, gbc.sp());
        EXPECT(0xdcb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 00DF
        gbc.setState(0x5f9d, 0x618b, 0xaa50, 0x5ed9, 0xec50, 0xd4c4, 0x0, 0x1);
        gbc.writeMem(0x5f9d, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xaa, gbc.a());
        EXPECT(0x5e, gbc.b());
        EXPECT(0xd9, gbc.c());
        EXPECT(0xec, gbc.d());
        EXPECT(0x50, gbc.e());
        EXPECT(0xd4, gbc.h());
        EXPECT(0xc4, gbc.l());
        EXPECT(0x618b, gbc.sp());
        EXPECT(0x5f9f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 00E0
        gbc.setState(0xeec3, 0xfefd, 0x4170, 0xb387, 0xfa24, 0xfce7, 0x0, 0x1);
        gbc.writeMem(0xeec3, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x41, gbc.a());
        EXPECT(0xb3, gbc.b());
        EXPECT(0x87, gbc.c());
        EXPECT(0xfa, gbc.d());
        EXPECT(0x24, gbc.e());
        EXPECT(0xfc, gbc.h());
        EXPECT(0xe7, gbc.l());
        EXPECT(0xfefd, gbc.sp());
        EXPECT(0xeec5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xeec3));
        EXPECT(0x8c, gbc.readMem(0xeec4));
        // CB 8C 00E1
        gbc.setState(0xaac8, 0x36fd, 0x4c80, 0xdd4, 0x8df8, 0x997e, 0x1, 0x1);
        gbc.writeMem(0xaac8, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x4c, gbc.a());
        EXPECT(0xd, gbc.b());
        EXPECT(0xd4, gbc.c());
        EXPECT(0x8d, gbc.d());
        EXPECT(0xf8, gbc.e());
        EXPECT(0x99, gbc.h());
        EXPECT(0x7e, gbc.l());
        EXPECT(0x36fd, gbc.sp());
        EXPECT(0xaaca, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaac8));
        EXPECT(0x8c, gbc.readMem(0xaac9));
        // CB 8C 00E2
        gbc.setState(0xacba, 0x19f6, 0x5df0, 0x850b, 0x2432, 0x8df0, 0x0, 0x1);
        gbc.writeMem(0xacba, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x5d, gbc.a());
        EXPECT(0x85, gbc.b());
        EXPECT(0xb, gbc.c());
        EXPECT(0x24, gbc.d());
        EXPECT(0x32, gbc.e());
        EXPECT(0x8d, gbc.h());
        EXPECT(0xf0, gbc.l());
        EXPECT(0x19f6, gbc.sp());
        EXPECT(0xacbc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xacba));
        EXPECT(0x8c, gbc.readMem(0xacbb));
        // CB 8C 00E3
        gbc.setState(0xc2b9, 0xc564, 0xdad0, 0x4ef3, 0xfeb8, 0xc3c6, 0x0, 0x1);
        gbc.writeMem(0xc2b9, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xda, gbc.a());
        EXPECT(0x4e, gbc.b());
        EXPECT(0xf3, gbc.c());
        EXPECT(0xfe, gbc.d());
        EXPECT(0xb8, gbc.e());
        EXPECT(0xc1, gbc.h());
        EXPECT(0xc6, gbc.l());
        EXPECT(0xc564, gbc.sp());
        EXPECT(0xc2bb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc2b9));
        EXPECT(0x8c, gbc.readMem(0xc2ba));
        // CB 8C 00E4
        gbc.setState(0x1726, 0xf36f, 0x3750, 0x7793, 0x8b90, 0xa53a, 0x0, 0x0);
        gbc.writeMem(0x1726, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x37, gbc.a());
        EXPECT(0x77, gbc.b());
        EXPECT(0x93, gbc.c());
        EXPECT(0x8b, gbc.d());
        EXPECT(0x90, gbc.e());
        EXPECT(0xa5, gbc.h());
        EXPECT(0x3a, gbc.l());
        EXPECT(0xf36f, gbc.sp());
        EXPECT(0x1728, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 00E5
        gbc.setState(0xc70e, 0xd46a, 0x1a70, 0x62bd, 0x9ec6, 0xce21, 0x0, 0x0);
        gbc.writeMem(0xc70e, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x1a, gbc.a());
        EXPECT(0x62, gbc.b());
        EXPECT(0xbd, gbc.c());
        EXPECT(0x9e, gbc.d());
        EXPECT(0xc6, gbc.e());
        EXPECT(0xcc, gbc.h());
        EXPECT(0x21, gbc.l());
        EXPECT(0xd46a, gbc.sp());
        EXPECT(0xc710, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc70e));
        EXPECT(0x8c, gbc.readMem(0xc70f));
        // CB 8C 00E6
        gbc.setState(0xb554, 0xc2d9, 0x58d0, 0x9545, 0xa2cb, 0x2bd8, 0x1, 0x0);
        gbc.writeMem(0xb554, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x58, gbc.a());
        EXPECT(0x95, gbc.b());
        EXPECT(0x45, gbc.c());
        EXPECT(0xa2, gbc.d());
        EXPECT(0xcb, gbc.e());
        EXPECT(0x29, gbc.h());
        EXPECT(0xd8, gbc.l());
        EXPECT(0xc2d9, gbc.sp());
        EXPECT(0xb556, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb554));
        EXPECT(0x8c, gbc.readMem(0xb555));
        // CB 8C 00E7
        gbc.setState(0xe486, 0x4db6, 0xd240, 0xba77, 0x2dd3, 0x2fba, 0x1, 0x1);
        gbc.writeMem(0xe486, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xd2, gbc.a());
        EXPECT(0xba, gbc.b());
        EXPECT(0x77, gbc.c());
        EXPECT(0x2d, gbc.d());
        EXPECT(0xd3, gbc.e());
        EXPECT(0x2d, gbc.h());
        EXPECT(0xba, gbc.l());
        EXPECT(0x4db6, gbc.sp());
        EXPECT(0xe488, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe486));
        EXPECT(0x8c, gbc.readMem(0xe487));
        // CB 8C 00E8
        gbc.setState(0x3671, 0xda2c, 0xa130, 0xd6ea, 0x8174, 0x2c68, 0x1, 0x1);
        gbc.writeMem(0x3671, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xa1, gbc.a());
        EXPECT(0xd6, gbc.b());
        EXPECT(0xea, gbc.c());
        EXPECT(0x81, gbc.d());
        EXPECT(0x74, gbc.e());
        EXPECT(0x2c, gbc.h());
        EXPECT(0x68, gbc.l());
        EXPECT(0xda2c, gbc.sp());
        EXPECT(0x3673, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 00E9
        gbc.setState(0xa325, 0x482, 0xbac0, 0xdc51, 0xfdec, 0x7060, 0x0, 0x0);
        gbc.writeMem(0xa325, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xba, gbc.a());
        EXPECT(0xdc, gbc.b());
        EXPECT(0x51, gbc.c());
        EXPECT(0xfd, gbc.d());
        EXPECT(0xec, gbc.e());
        EXPECT(0x70, gbc.h());
        EXPECT(0x60, gbc.l());
        EXPECT(0x482, gbc.sp());
        EXPECT(0xa327, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa325));
        EXPECT(0x8c, gbc.readMem(0xa326));
        // CB 8C 00EA
        gbc.setState(0xa7c1, 0xc46f, 0x4370, 0x2a94, 0xf852, 0xf23, 0x0, 0x0);
        gbc.writeMem(0xa7c1, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x43, gbc.a());
        EXPECT(0x2a, gbc.b());
        EXPECT(0x94, gbc.c());
        EXPECT(0xf8, gbc.d());
        EXPECT(0x52, gbc.e());
        EXPECT(0xd, gbc.h());
        EXPECT(0x23, gbc.l());
        EXPECT(0xc46f, gbc.sp());
        EXPECT(0xa7c3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa7c1));
        EXPECT(0x8c, gbc.readMem(0xa7c2));
        // CB 8C 00EB
        gbc.setState(0xcb1e, 0xa68a, 0x9150, 0xe117, 0xb6b9, 0x537a, 0x1, 0x1);
        gbc.writeMem(0xcb1e, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x91, gbc.a());
        EXPECT(0xe1, gbc.b());
        EXPECT(0x17, gbc.c());
        EXPECT(0xb6, gbc.d());
        EXPECT(0xb9, gbc.e());
        EXPECT(0x51, gbc.h());
        EXPECT(0x7a, gbc.l());
        EXPECT(0xa68a, gbc.sp());
        EXPECT(0xcb20, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcb1e));
        EXPECT(0x8c, gbc.readMem(0xcb1f));
        // CB 8C 00EC
        gbc.setState(0xe743, 0x52cd, 0xce10, 0x2c64, 0x9b71, 0xd024, 0x0, 0x0);
        gbc.writeMem(0xe743, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xce, gbc.a());
        EXPECT(0x2c, gbc.b());
        EXPECT(0x64, gbc.c());
        EXPECT(0x9b, gbc.d());
        EXPECT(0x71, gbc.e());
        EXPECT(0xd0, gbc.h());
        EXPECT(0x24, gbc.l());
        EXPECT(0x52cd, gbc.sp());
        EXPECT(0xe745, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe743));
        EXPECT(0x8c, gbc.readMem(0xe744));
        // CB 8C 00ED
        gbc.setState(0xe9de, 0xd22b, 0x6c10, 0xccd2, 0xf620, 0x8c5d, 0x0, 0x0);
        gbc.writeMem(0xe9de, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x6c, gbc.a());
        EXPECT(0xcc, gbc.b());
        EXPECT(0xd2, gbc.c());
        EXPECT(0xf6, gbc.d());
        EXPECT(0x20, gbc.e());
        EXPECT(0x8c, gbc.h());
        EXPECT(0x5d, gbc.l());
        EXPECT(0xd22b, gbc.sp());
        EXPECT(0xe9e0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe9de));
        EXPECT(0x8c, gbc.readMem(0xe9df));
        // CB 8C 00EE
        gbc.setState(0x1864, 0x2225, 0x8720, 0xc763, 0x7e72, 0xef14, 0x1, 0x1);
        gbc.writeMem(0x1864, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x87, gbc.a());
        EXPECT(0xc7, gbc.b());
        EXPECT(0x63, gbc.c());
        EXPECT(0x7e, gbc.d());
        EXPECT(0x72, gbc.e());
        EXPECT(0xed, gbc.h());
        EXPECT(0x14, gbc.l());
        EXPECT(0x2225, gbc.sp());
        EXPECT(0x1866, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 00EF
        gbc.setState(0xef8e, 0xd676, 0xcf0, 0x225b, 0x2af6, 0xe987, 0x0, 0x0);
        gbc.writeMem(0xef8e, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xc, gbc.a());
        EXPECT(0x22, gbc.b());
        EXPECT(0x5b, gbc.c());
        EXPECT(0x2a, gbc.d());
        EXPECT(0xf6, gbc.e());
        EXPECT(0xe9, gbc.h());
        EXPECT(0x87, gbc.l());
        EXPECT(0xd676, gbc.sp());
        EXPECT(0xef90, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xef8e));
        EXPECT(0x8c, gbc.readMem(0xef8f));
        // CB 8C 00F0
        gbc.setState(0x4153, 0x3056, 0xe390, 0x43cd, 0xf935, 0x70b0, 0x1, 0x1);
        gbc.writeMem(0x4153, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xe3, gbc.a());
        EXPECT(0x43, gbc.b());
        EXPECT(0xcd, gbc.c());
        EXPECT(0xf9, gbc.d());
        EXPECT(0x35, gbc.e());
        EXPECT(0x70, gbc.h());
        EXPECT(0xb0, gbc.l());
        EXPECT(0x3056, gbc.sp());
        EXPECT(0x4155, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 00F1
        gbc.setState(0x884a, 0x18f9, 0xcab0, 0xb864, 0x4f30, 0x55ca, 0x1, 0x1);
        gbc.writeMem(0x884a, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xca, gbc.a());
        EXPECT(0xb8, gbc.b());
        EXPECT(0x64, gbc.c());
        EXPECT(0x4f, gbc.d());
        EXPECT(0x30, gbc.e());
        EXPECT(0x55, gbc.h());
        EXPECT(0xca, gbc.l());
        EXPECT(0x18f9, gbc.sp());
        EXPECT(0x884c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x884a));
        EXPECT(0x8c, gbc.readMem(0x884b));
        // CB 8C 00F2
        gbc.setState(0xa349, 0xddce, 0xfab0, 0xd734, 0xa171, 0x44ef, 0x0, 0x1);
        gbc.writeMem(0xa349, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xfa, gbc.a());
        EXPECT(0xd7, gbc.b());
        EXPECT(0x34, gbc.c());
        EXPECT(0xa1, gbc.d());
        EXPECT(0x71, gbc.e());
        EXPECT(0x44, gbc.h());
        EXPECT(0xef, gbc.l());
        EXPECT(0xddce, gbc.sp());
        EXPECT(0xa34b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa349));
        EXPECT(0x8c, gbc.readMem(0xa34a));
        // CB 8C 00F3
        gbc.setState(0xc639, 0x1bd0, 0xcfa0, 0x827d, 0x830d, 0xdea8, 0x0, 0x0);
        gbc.writeMem(0xc639, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xcf, gbc.a());
        EXPECT(0x82, gbc.b());
        EXPECT(0x7d, gbc.c());
        EXPECT(0x83, gbc.d());
        EXPECT(0xd, gbc.e());
        EXPECT(0xdc, gbc.h());
        EXPECT(0xa8, gbc.l());
        EXPECT(0x1bd0, gbc.sp());
        EXPECT(0xc63b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc639));
        EXPECT(0x8c, gbc.readMem(0xc63a));
        // CB 8C 00F4
        gbc.setState(0xc250, 0xe3d4, 0x9870, 0x4a51, 0x83b7, 0x66cd, 0x1, 0x1);
        gbc.writeMem(0xc250, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x98, gbc.a());
        EXPECT(0x4a, gbc.b());
        EXPECT(0x51, gbc.c());
        EXPECT(0x83, gbc.d());
        EXPECT(0xb7, gbc.e());
        EXPECT(0x64, gbc.h());
        EXPECT(0xcd, gbc.l());
        EXPECT(0xe3d4, gbc.sp());
        EXPECT(0xc252, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc250));
        EXPECT(0x8c, gbc.readMem(0xc251));
        // CB 8C 00F5
        gbc.setState(0x9057, 0x9738, 0x6790, 0x96a1, 0xe365, 0x8c67, 0x1, 0x1);
        gbc.writeMem(0x9057, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x67, gbc.a());
        EXPECT(0x96, gbc.b());
        EXPECT(0xa1, gbc.c());
        EXPECT(0xe3, gbc.d());
        EXPECT(0x65, gbc.e());
        EXPECT(0x8c, gbc.h());
        EXPECT(0x67, gbc.l());
        EXPECT(0x9738, gbc.sp());
        EXPECT(0x9059, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9057));
        EXPECT(0x8c, gbc.readMem(0x9058));
        // CB 8C 00F6
        gbc.setState(0xbaf4, 0x1f78, 0xa680, 0x737c, 0x8b3f, 0x7d4f, 0x1, 0x1);
        gbc.writeMem(0xbaf4, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xa6, gbc.a());
        EXPECT(0x73, gbc.b());
        EXPECT(0x7c, gbc.c());
        EXPECT(0x8b, gbc.d());
        EXPECT(0x3f, gbc.e());
        EXPECT(0x7d, gbc.h());
        EXPECT(0x4f, gbc.l());
        EXPECT(0x1f78, gbc.sp());
        EXPECT(0xbaf6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbaf4));
        EXPECT(0x8c, gbc.readMem(0xbaf5));
        // CB 8C 00F7
        gbc.setState(0xe8f2, 0xb39e, 0x9980, 0x498, 0x85cf, 0x7e34, 0x0, 0x1);
        gbc.writeMem(0xe8f2, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x99, gbc.a());
        EXPECT(0x4, gbc.b());
        EXPECT(0x98, gbc.c());
        EXPECT(0x85, gbc.d());
        EXPECT(0xcf, gbc.e());
        EXPECT(0x7c, gbc.h());
        EXPECT(0x34, gbc.l());
        EXPECT(0xb39e, gbc.sp());
        EXPECT(0xe8f4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe8f2));
        EXPECT(0x8c, gbc.readMem(0xe8f3));
        // CB 8C 00F8
        gbc.setState(0x868c, 0xce57, 0x52c0, 0x6ee, 0x6f7b, 0xd2ca, 0x0, 0x1);
        gbc.writeMem(0x868c, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x52, gbc.a());
        EXPECT(0x6, gbc.b());
        EXPECT(0xee, gbc.c());
        EXPECT(0x6f, gbc.d());
        EXPECT(0x7b, gbc.e());
        EXPECT(0xd0, gbc.h());
        EXPECT(0xca, gbc.l());
        EXPECT(0xce57, gbc.sp());
        EXPECT(0x868e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x868c));
        EXPECT(0x8c, gbc.readMem(0x868d));
        // CB 8C 00F9
        gbc.setState(0x29ab, 0xb4e0, 0xc0c0, 0xe71, 0xb23, 0x9b1, 0x0, 0x1);
        gbc.writeMem(0x29ab, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xc0, gbc.a());
        EXPECT(0xe, gbc.b());
        EXPECT(0x71, gbc.c());
        EXPECT(0xb, gbc.d());
        EXPECT(0x23, gbc.e());
        EXPECT(0x9, gbc.h());
        EXPECT(0xb1, gbc.l());
        EXPECT(0xb4e0, gbc.sp());
        EXPECT(0x29ad, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 00FA
        gbc.setState(0x9bed, 0x5004, 0x1070, 0xc59e, 0xb9c3, 0x1280, 0x0, 0x1);
        gbc.writeMem(0x9bed, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x10, gbc.a());
        EXPECT(0xc5, gbc.b());
        EXPECT(0x9e, gbc.c());
        EXPECT(0xb9, gbc.d());
        EXPECT(0xc3, gbc.e());
        EXPECT(0x10, gbc.h());
        EXPECT(0x80, gbc.l());
        EXPECT(0x5004, gbc.sp());
        EXPECT(0x9bef, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9bed));
        EXPECT(0x8c, gbc.readMem(0x9bee));
        // CB 8C 00FB
        gbc.setState(0x936c, 0xe326, 0x570, 0x95d8, 0x7fbd, 0xcbf, 0x1, 0x1);
        gbc.writeMem(0x936c, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x5, gbc.a());
        EXPECT(0x95, gbc.b());
        EXPECT(0xd8, gbc.c());
        EXPECT(0x7f, gbc.d());
        EXPECT(0xbd, gbc.e());
        EXPECT(0xc, gbc.h());
        EXPECT(0xbf, gbc.l());
        EXPECT(0xe326, gbc.sp());
        EXPECT(0x936e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x936c));
        EXPECT(0x8c, gbc.readMem(0x936d));
        // CB 8C 00FC
        gbc.setState(0xcc65, 0x1406, 0x2f90, 0x64f2, 0xa585, 0xbe3e, 0x0, 0x0);
        gbc.writeMem(0xcc65, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x2f, gbc.a());
        EXPECT(0x64, gbc.b());
        EXPECT(0xf2, gbc.c());
        EXPECT(0xa5, gbc.d());
        EXPECT(0x85, gbc.e());
        EXPECT(0xbc, gbc.h());
        EXPECT(0x3e, gbc.l());
        EXPECT(0x1406, gbc.sp());
        EXPECT(0xcc67, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcc65));
        EXPECT(0x8c, gbc.readMem(0xcc66));
        // CB 8C 00FD
        gbc.setState(0xa8be, 0xdbd5, 0xd820, 0x3b6a, 0x23e7, 0xc9d0, 0x1, 0x1);
        gbc.writeMem(0xa8be, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xd8, gbc.a());
        EXPECT(0x3b, gbc.b());
        EXPECT(0x6a, gbc.c());
        EXPECT(0x23, gbc.d());
        EXPECT(0xe7, gbc.e());
        EXPECT(0xc9, gbc.h());
        EXPECT(0xd0, gbc.l());
        EXPECT(0xdbd5, gbc.sp());
        EXPECT(0xa8c0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa8be));
        EXPECT(0x8c, gbc.readMem(0xa8bf));
        // CB 8C 00FE
        gbc.setState(0x79b3, 0x9459, 0x240, 0x85bd, 0x2ef8, 0x151c, 0x1, 0x1);
        gbc.writeMem(0x79b3, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x2, gbc.a());
        EXPECT(0x85, gbc.b());
        EXPECT(0xbd, gbc.c());
        EXPECT(0x2e, gbc.d());
        EXPECT(0xf8, gbc.e());
        EXPECT(0x15, gbc.h());
        EXPECT(0x1c, gbc.l());
        EXPECT(0x9459, gbc.sp());
        EXPECT(0x79b5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 00FF
        gbc.setState(0xdbd2, 0x8024, 0x9b50, 0x599b, 0xbea, 0xdd6f, 0x0, 0x1);
        gbc.writeMem(0xdbd2, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x9b, gbc.a());
        EXPECT(0x59, gbc.b());
        EXPECT(0x9b, gbc.c());
        EXPECT(0xb, gbc.d());
        EXPECT(0xea, gbc.e());
        EXPECT(0xdd, gbc.h());
        EXPECT(0x6f, gbc.l());
        EXPECT(0x8024, gbc.sp());
        EXPECT(0xdbd4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdbd2));
        EXPECT(0x8c, gbc.readMem(0xdbd3));
        // CB 8C 0100
        gbc.setState(0xe870, 0xa61f, 0x3260, 0xf431, 0xa95c, 0xab79, 0x1, 0x0);
        gbc.writeMem(0xe870, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x32, gbc.a());
        EXPECT(0xf4, gbc.b());
        EXPECT(0x31, gbc.c());
        EXPECT(0xa9, gbc.d());
        EXPECT(0x5c, gbc.e());
        EXPECT(0xa9, gbc.h());
        EXPECT(0x79, gbc.l());
        EXPECT(0xa61f, gbc.sp());
        EXPECT(0xe872, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe870));
        EXPECT(0x8c, gbc.readMem(0xe871));
        // CB 8C 0101
        gbc.setState(0xf66, 0xca05, 0x5ec0, 0xbf72, 0xf80b, 0xdbd9, 0x1, 0x0);
        gbc.writeMem(0xf66, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x5e, gbc.a());
        EXPECT(0xbf, gbc.b());
        EXPECT(0x72, gbc.c());
        EXPECT(0xf8, gbc.d());
        EXPECT(0xb, gbc.e());
        EXPECT(0xd9, gbc.h());
        EXPECT(0xd9, gbc.l());
        EXPECT(0xca05, gbc.sp());
        EXPECT(0xf68, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 0102
        gbc.setState(0x5fbe, 0x8d47, 0x7530, 0xb8ee, 0x63c6, 0x2a7f, 0x0, 0x0);
        gbc.writeMem(0x5fbe, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x75, gbc.a());
        EXPECT(0xb8, gbc.b());
        EXPECT(0xee, gbc.c());
        EXPECT(0x63, gbc.d());
        EXPECT(0xc6, gbc.e());
        EXPECT(0x28, gbc.h());
        EXPECT(0x7f, gbc.l());
        EXPECT(0x8d47, gbc.sp());
        EXPECT(0x5fc0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 0103
        gbc.setState(0x10b7, 0x5973, 0x2490, 0x9ea4, 0x4686, 0xcd06, 0x0, 0x1);
        gbc.writeMem(0x10b7, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x24, gbc.a());
        EXPECT(0x9e, gbc.b());
        EXPECT(0xa4, gbc.c());
        EXPECT(0x46, gbc.d());
        EXPECT(0x86, gbc.e());
        EXPECT(0xcd, gbc.h());
        EXPECT(0x6, gbc.l());
        EXPECT(0x5973, gbc.sp());
        EXPECT(0x10b9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 0104
        gbc.setState(0xd63f, 0x1c86, 0x60f0, 0x806c, 0x10e7, 0x2744, 0x1, 0x1);
        gbc.writeMem(0xd63f, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x60, gbc.a());
        EXPECT(0x80, gbc.b());
        EXPECT(0x6c, gbc.c());
        EXPECT(0x10, gbc.d());
        EXPECT(0xe7, gbc.e());
        EXPECT(0x25, gbc.h());
        EXPECT(0x44, gbc.l());
        EXPECT(0x1c86, gbc.sp());
        EXPECT(0xd641, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd63f));
        EXPECT(0x8c, gbc.readMem(0xd640));
        // CB 8C 0105
        gbc.setState(0x1ee7, 0x2fd7, 0x9770, 0x2bf7, 0x9c35, 0x11cf, 0x0, 0x0);
        gbc.writeMem(0x1ee7, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x97, gbc.a());
        EXPECT(0x2b, gbc.b());
        EXPECT(0xf7, gbc.c());
        EXPECT(0x9c, gbc.d());
        EXPECT(0x35, gbc.e());
        EXPECT(0x11, gbc.h());
        EXPECT(0xcf, gbc.l());
        EXPECT(0x2fd7, gbc.sp());
        EXPECT(0x1ee9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 0106
        gbc.setState(0x5495, 0x6bb4, 0x26b0, 0x1c9d, 0x4a00, 0x90fd, 0x0, 0x0);
        gbc.writeMem(0x5495, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x26, gbc.a());
        EXPECT(0x1c, gbc.b());
        EXPECT(0x9d, gbc.c());
        EXPECT(0x4a, gbc.d());
        EXPECT(0x0, gbc.e());
        EXPECT(0x90, gbc.h());
        EXPECT(0xfd, gbc.l());
        EXPECT(0x6bb4, gbc.sp());
        EXPECT(0x5497, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 0107
        gbc.setState(0x5617, 0x5b5a, 0x8010, 0x3330, 0xc6a9, 0xad04, 0x0, 0x0);
        gbc.writeMem(0x5617, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x80, gbc.a());
        EXPECT(0x33, gbc.b());
        EXPECT(0x30, gbc.c());
        EXPECT(0xc6, gbc.d());
        EXPECT(0xa9, gbc.e());
        EXPECT(0xad, gbc.h());
        EXPECT(0x4, gbc.l());
        EXPECT(0x5b5a, gbc.sp());
        EXPECT(0x5619, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 0108
        gbc.setState(0x2262, 0x3e53, 0x6d90, 0xcd2b, 0x7e50, 0x87ad, 0x0, 0x0);
        gbc.writeMem(0x2262, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x6d, gbc.a());
        EXPECT(0xcd, gbc.b());
        EXPECT(0x2b, gbc.c());
        EXPECT(0x7e, gbc.d());
        EXPECT(0x50, gbc.e());
        EXPECT(0x85, gbc.h());
        EXPECT(0xad, gbc.l());
        EXPECT(0x3e53, gbc.sp());
        EXPECT(0x2264, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 0109
        gbc.setState(0x9345, 0x7145, 0xc7c0, 0xfdc1, 0xc66d, 0xf724, 0x0, 0x1);
        gbc.writeMem(0x9345, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xc7, gbc.a());
        EXPECT(0xfd, gbc.b());
        EXPECT(0xc1, gbc.c());
        EXPECT(0xc6, gbc.d());
        EXPECT(0x6d, gbc.e());
        EXPECT(0xf5, gbc.h());
        EXPECT(0x24, gbc.l());
        EXPECT(0x7145, gbc.sp());
        EXPECT(0x9347, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9345));
        EXPECT(0x8c, gbc.readMem(0x9346));
        // CB 8C 010A
        gbc.setState(0x2bf3, 0xd2d3, 0xc080, 0xde44, 0xcaa3, 0x5e06, 0x1, 0x0);
        gbc.writeMem(0x2bf3, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xc0, gbc.a());
        EXPECT(0xde, gbc.b());
        EXPECT(0x44, gbc.c());
        EXPECT(0xca, gbc.d());
        EXPECT(0xa3, gbc.e());
        EXPECT(0x5c, gbc.h());
        EXPECT(0x6, gbc.l());
        EXPECT(0xd2d3, gbc.sp());
        EXPECT(0x2bf5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 010C
        gbc.setState(0x6a91, 0xea99, 0xcea0, 0x4fbb, 0xd9e7, 0xa06d, 0x1, 0x1);
        gbc.writeMem(0x6a91, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xce, gbc.a());
        EXPECT(0x4f, gbc.b());
        EXPECT(0xbb, gbc.c());
        EXPECT(0xd9, gbc.d());
        EXPECT(0xe7, gbc.e());
        EXPECT(0xa0, gbc.h());
        EXPECT(0x6d, gbc.l());
        EXPECT(0xea99, gbc.sp());
        EXPECT(0x6a93, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 010D
        gbc.setState(0x2eb6, 0x5fcc, 0xedd0, 0x5c7e, 0x41f9, 0x6911, 0x0, 0x1);
        gbc.writeMem(0x2eb6, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xed, gbc.a());
        EXPECT(0x5c, gbc.b());
        EXPECT(0x7e, gbc.c());
        EXPECT(0x41, gbc.d());
        EXPECT(0xf9, gbc.e());
        EXPECT(0x69, gbc.h());
        EXPECT(0x11, gbc.l());
        EXPECT(0x5fcc, gbc.sp());
        EXPECT(0x2eb8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 010E
        gbc.setState(0xe60a, 0xbb11, 0xbf50, 0x8071, 0xc6fc, 0x80e1, 0x0, 0x1);
        gbc.writeMem(0xe60a, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xbf, gbc.a());
        EXPECT(0x80, gbc.b());
        EXPECT(0x71, gbc.c());
        EXPECT(0xc6, gbc.d());
        EXPECT(0xfc, gbc.e());
        EXPECT(0x80, gbc.h());
        EXPECT(0xe1, gbc.l());
        EXPECT(0xbb11, gbc.sp());
        EXPECT(0xe60c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe60a));
        EXPECT(0x8c, gbc.readMem(0xe60b));
        // CB 8C 010F
        gbc.setState(0x39b1, 0x652e, 0x74f0, 0xaf0e, 0xfc54, 0x9b72, 0x1, 0x1);
        gbc.writeMem(0x39b1, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x74, gbc.a());
        EXPECT(0xaf, gbc.b());
        EXPECT(0xe, gbc.c());
        EXPECT(0xfc, gbc.d());
        EXPECT(0x54, gbc.e());
        EXPECT(0x99, gbc.h());
        EXPECT(0x72, gbc.l());
        EXPECT(0x652e, gbc.sp());
        EXPECT(0x39b3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 0110
        gbc.setState(0x19ca, 0xdf36, 0x870, 0x12bc, 0x3945, 0x5134, 0x0, 0x1);
        gbc.writeMem(0x19ca, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x8, gbc.a());
        EXPECT(0x12, gbc.b());
        EXPECT(0xbc, gbc.c());
        EXPECT(0x39, gbc.d());
        EXPECT(0x45, gbc.e());
        EXPECT(0x51, gbc.h());
        EXPECT(0x34, gbc.l());
        EXPECT(0xdf36, gbc.sp());
        EXPECT(0x19cc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 0111
        gbc.setState(0x8a9f, 0x9d6c, 0x9930, 0x9fd4, 0xd8bf, 0xd67e, 0x0, 0x0);
        gbc.writeMem(0x8a9f, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x99, gbc.a());
        EXPECT(0x9f, gbc.b());
        EXPECT(0xd4, gbc.c());
        EXPECT(0xd8, gbc.d());
        EXPECT(0xbf, gbc.e());
        EXPECT(0xd4, gbc.h());
        EXPECT(0x7e, gbc.l());
        EXPECT(0x9d6c, gbc.sp());
        EXPECT(0x8aa1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8a9f));
        EXPECT(0x8c, gbc.readMem(0x8aa0));
        // CB 8C 0112
        gbc.setState(0x2487, 0xea13, 0x85f0, 0xe7a1, 0x47d9, 0xcc74, 0x1, 0x1);
        gbc.writeMem(0x2487, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x85, gbc.a());
        EXPECT(0xe7, gbc.b());
        EXPECT(0xa1, gbc.c());
        EXPECT(0x47, gbc.d());
        EXPECT(0xd9, gbc.e());
        EXPECT(0xcc, gbc.h());
        EXPECT(0x74, gbc.l());
        EXPECT(0xea13, gbc.sp());
        EXPECT(0x2489, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 0113
        gbc.setState(0x6fcf, 0xe170, 0x6230, 0xd32, 0xd22a, 0x8648, 0x1, 0x1);
        gbc.writeMem(0x6fcf, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x62, gbc.a());
        EXPECT(0xd, gbc.b());
        EXPECT(0x32, gbc.c());
        EXPECT(0xd2, gbc.d());
        EXPECT(0x2a, gbc.e());
        EXPECT(0x84, gbc.h());
        EXPECT(0x48, gbc.l());
        EXPECT(0xe170, gbc.sp());
        EXPECT(0x6fd1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 0114
        gbc.setState(0x82ab, 0x21a4, 0x95b0, 0xcc7d, 0x164c, 0x713b, 0x0, 0x1);
        gbc.writeMem(0x82ab, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x95, gbc.a());
        EXPECT(0xcc, gbc.b());
        EXPECT(0x7d, gbc.c());
        EXPECT(0x16, gbc.d());
        EXPECT(0x4c, gbc.e());
        EXPECT(0x71, gbc.h());
        EXPECT(0x3b, gbc.l());
        EXPECT(0x21a4, gbc.sp());
        EXPECT(0x82ad, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x82ab));
        EXPECT(0x8c, gbc.readMem(0x82ac));
        // CB 8C 0115
        gbc.setState(0x5c9c, 0x59e2, 0xed50, 0xd45b, 0x59b8, 0xb1f4, 0x0, 0x0);
        gbc.writeMem(0x5c9c, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xed, gbc.a());
        EXPECT(0xd4, gbc.b());
        EXPECT(0x5b, gbc.c());
        EXPECT(0x59, gbc.d());
        EXPECT(0xb8, gbc.e());
        EXPECT(0xb1, gbc.h());
        EXPECT(0xf4, gbc.l());
        EXPECT(0x59e2, gbc.sp());
        EXPECT(0x5c9e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 0116
        gbc.setState(0x9782, 0x27a8, 0xc290, 0x8e59, 0x57e6, 0x2c24, 0x0, 0x1);
        gbc.writeMem(0x9782, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xc2, gbc.a());
        EXPECT(0x8e, gbc.b());
        EXPECT(0x59, gbc.c());
        EXPECT(0x57, gbc.d());
        EXPECT(0xe6, gbc.e());
        EXPECT(0x2c, gbc.h());
        EXPECT(0x24, gbc.l());
        EXPECT(0x27a8, gbc.sp());
        EXPECT(0x9784, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9782));
        EXPECT(0x8c, gbc.readMem(0x9783));
        // CB 8C 0117
        gbc.setState(0xdf5a, 0x89d9, 0xe5a0, 0xbc34, 0xccf0, 0xd1ec, 0x0, 0x1);
        gbc.writeMem(0xdf5a, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xe5, gbc.a());
        EXPECT(0xbc, gbc.b());
        EXPECT(0x34, gbc.c());
        EXPECT(0xcc, gbc.d());
        EXPECT(0xf0, gbc.e());
        EXPECT(0xd1, gbc.h());
        EXPECT(0xec, gbc.l());
        EXPECT(0x89d9, gbc.sp());
        EXPECT(0xdf5c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdf5a));
        EXPECT(0x8c, gbc.readMem(0xdf5b));
        // CB 8C 0118
        gbc.setState(0x2594, 0x4c5e, 0x8ce0, 0x81e, 0x1783, 0xe4ee, 0x1, 0x1);
        gbc.writeMem(0x2594, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x8c, gbc.a());
        EXPECT(0x8, gbc.b());
        EXPECT(0x1e, gbc.c());
        EXPECT(0x17, gbc.d());
        EXPECT(0x83, gbc.e());
        EXPECT(0xe4, gbc.h());
        EXPECT(0xee, gbc.l());
        EXPECT(0x4c5e, gbc.sp());
        EXPECT(0x2596, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 0119
        gbc.setState(0x94dd, 0xd40b, 0x790, 0x40d, 0x4b06, 0xa104, 0x0, 0x0);
        gbc.writeMem(0x94dd, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x7, gbc.a());
        EXPECT(0x4, gbc.b());
        EXPECT(0xd, gbc.c());
        EXPECT(0x4b, gbc.d());
        EXPECT(0x6, gbc.e());
        EXPECT(0xa1, gbc.h());
        EXPECT(0x4, gbc.l());
        EXPECT(0xd40b, gbc.sp());
        EXPECT(0x94df, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x94dd));
        EXPECT(0x8c, gbc.readMem(0x94de));
        // CB 8C 011A
        gbc.setState(0xde51, 0x4570, 0x1dc0, 0x2438, 0xe264, 0xa5ed, 0x0, 0x1);
        gbc.writeMem(0xde51, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x1d, gbc.a());
        EXPECT(0x24, gbc.b());
        EXPECT(0x38, gbc.c());
        EXPECT(0xe2, gbc.d());
        EXPECT(0x64, gbc.e());
        EXPECT(0xa5, gbc.h());
        EXPECT(0xed, gbc.l());
        EXPECT(0x4570, gbc.sp());
        EXPECT(0xde53, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xde51));
        EXPECT(0x8c, gbc.readMem(0xde52));
        // CB 8C 011B
        gbc.setState(0x51b5, 0xfcda, 0x2df0, 0x8dfa, 0x380c, 0x9e88, 0x1, 0x0);
        gbc.writeMem(0x51b5, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x2d, gbc.a());
        EXPECT(0x8d, gbc.b());
        EXPECT(0xfa, gbc.c());
        EXPECT(0x38, gbc.d());
        EXPECT(0xc, gbc.e());
        EXPECT(0x9c, gbc.h());
        EXPECT(0x88, gbc.l());
        EXPECT(0xfcda, gbc.sp());
        EXPECT(0x51b7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 011C
        gbc.setState(0x857d, 0x375c, 0x7c30, 0xf332, 0x9d86, 0xe3b, 0x1, 0x0);
        gbc.writeMem(0x857d, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x7c, gbc.a());
        EXPECT(0xf3, gbc.b());
        EXPECT(0x32, gbc.c());
        EXPECT(0x9d, gbc.d());
        EXPECT(0x86, gbc.e());
        EXPECT(0xc, gbc.h());
        EXPECT(0x3b, gbc.l());
        EXPECT(0x375c, gbc.sp());
        EXPECT(0x857f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x857d));
        EXPECT(0x8c, gbc.readMem(0x857e));
        // CB 8C 011D
        gbc.setState(0x2311, 0xa402, 0xce90, 0x24e0, 0x3337, 0xc012, 0x1, 0x0);
        gbc.writeMem(0x2311, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xce, gbc.a());
        EXPECT(0x24, gbc.b());
        EXPECT(0xe0, gbc.c());
        EXPECT(0x33, gbc.d());
        EXPECT(0x37, gbc.e());
        EXPECT(0xc0, gbc.h());
        EXPECT(0x12, gbc.l());
        EXPECT(0xa402, gbc.sp());
        EXPECT(0x2313, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 011E
        gbc.setState(0x1a13, 0x6514, 0xc50, 0x133, 0x71f, 0xab5b, 0x0, 0x0);
        gbc.writeMem(0x1a13, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xc, gbc.a());
        EXPECT(0x1, gbc.b());
        EXPECT(0x33, gbc.c());
        EXPECT(0x7, gbc.d());
        EXPECT(0x1f, gbc.e());
        EXPECT(0xa9, gbc.h());
        EXPECT(0x5b, gbc.l());
        EXPECT(0x6514, gbc.sp());
        EXPECT(0x1a15, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 011F
        gbc.setState(0x41d1, 0xfa6e, 0xe500, 0x5035, 0xb31b, 0x7567, 0x1, 0x1);
        gbc.writeMem(0x41d1, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xe5, gbc.a());
        EXPECT(0x50, gbc.b());
        EXPECT(0x35, gbc.c());
        EXPECT(0xb3, gbc.d());
        EXPECT(0x1b, gbc.e());
        EXPECT(0x75, gbc.h());
        EXPECT(0x67, gbc.l());
        EXPECT(0xfa6e, gbc.sp());
        EXPECT(0x41d3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 0120
        gbc.setState(0x385b, 0x1271, 0xe070, 0x1eb7, 0x939c, 0xa14b, 0x1, 0x1);
        gbc.writeMem(0x385b, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xe0, gbc.a());
        EXPECT(0x1e, gbc.b());
        EXPECT(0xb7, gbc.c());
        EXPECT(0x93, gbc.d());
        EXPECT(0x9c, gbc.e());
        EXPECT(0xa1, gbc.h());
        EXPECT(0x4b, gbc.l());
        EXPECT(0x1271, gbc.sp());
        EXPECT(0x385d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 0121
        gbc.setState(0x2cde, 0xea, 0xa110, 0xaf0e, 0x8141, 0x9017, 0x0, 0x0);
        gbc.writeMem(0x2cde, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xa1, gbc.a());
        EXPECT(0xaf, gbc.b());
        EXPECT(0xe, gbc.c());
        EXPECT(0x81, gbc.d());
        EXPECT(0x41, gbc.e());
        EXPECT(0x90, gbc.h());
        EXPECT(0x17, gbc.l());
        EXPECT(0xea, gbc.sp());
        EXPECT(0x2ce0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 0122
        gbc.setState(0x9001, 0x43ad, 0x7d70, 0x5dca, 0xc817, 0xbc55, 0x1, 0x1);
        gbc.writeMem(0x9001, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x7d, gbc.a());
        EXPECT(0x5d, gbc.b());
        EXPECT(0xca, gbc.c());
        EXPECT(0xc8, gbc.d());
        EXPECT(0x17, gbc.e());
        EXPECT(0xbc, gbc.h());
        EXPECT(0x55, gbc.l());
        EXPECT(0x43ad, gbc.sp());
        EXPECT(0x9003, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9001));
        EXPECT(0x8c, gbc.readMem(0x9002));
        // CB 8C 0123
        gbc.setState(0xabb2, 0xd958, 0x6490, 0xf0d5, 0x9032, 0x6ccd, 0x1, 0x0);
        gbc.writeMem(0xabb2, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x64, gbc.a());
        EXPECT(0xf0, gbc.b());
        EXPECT(0xd5, gbc.c());
        EXPECT(0x90, gbc.d());
        EXPECT(0x32, gbc.e());
        EXPECT(0x6c, gbc.h());
        EXPECT(0xcd, gbc.l());
        EXPECT(0xd958, gbc.sp());
        EXPECT(0xabb4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xabb2));
        EXPECT(0x8c, gbc.readMem(0xabb3));
        // CB 8C 0124
        gbc.setState(0x272, 0x4a49, 0x4940, 0x1a2b, 0xc321, 0x58a2, 0x1, 0x1);
        gbc.writeMem(0x272, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x49, gbc.a());
        EXPECT(0x1a, gbc.b());
        EXPECT(0x2b, gbc.c());
        EXPECT(0xc3, gbc.d());
        EXPECT(0x21, gbc.e());
        EXPECT(0x58, gbc.h());
        EXPECT(0xa2, gbc.l());
        EXPECT(0x4a49, gbc.sp());
        EXPECT(0x274, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 0126
        gbc.setState(0xaa28, 0x8dad, 0xd310, 0x7d83, 0xc9a5, 0x577c, 0x0, 0x1);
        gbc.writeMem(0xaa28, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xd3, gbc.a());
        EXPECT(0x7d, gbc.b());
        EXPECT(0x83, gbc.c());
        EXPECT(0xc9, gbc.d());
        EXPECT(0xa5, gbc.e());
        EXPECT(0x55, gbc.h());
        EXPECT(0x7c, gbc.l());
        EXPECT(0x8dad, gbc.sp());
        EXPECT(0xaa2a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaa28));
        EXPECT(0x8c, gbc.readMem(0xaa29));
        // CB 8C 0127
        gbc.setState(0x5183, 0x5716, 0x1a20, 0xf006, 0x9715, 0x1b87, 0x1, 0x1);
        gbc.writeMem(0x5183, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x1a, gbc.a());
        EXPECT(0xf0, gbc.b());
        EXPECT(0x6, gbc.c());
        EXPECT(0x97, gbc.d());
        EXPECT(0x15, gbc.e());
        EXPECT(0x19, gbc.h());
        EXPECT(0x87, gbc.l());
        EXPECT(0x5716, gbc.sp());
        EXPECT(0x5185, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 0128
        gbc.setState(0x973d, 0xc247, 0x98b0, 0x34ed, 0x3f3d, 0x40f7, 0x0, 0x1);
        gbc.writeMem(0x973d, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x98, gbc.a());
        EXPECT(0x34, gbc.b());
        EXPECT(0xed, gbc.c());
        EXPECT(0x3f, gbc.d());
        EXPECT(0x3d, gbc.e());
        EXPECT(0x40, gbc.h());
        EXPECT(0xf7, gbc.l());
        EXPECT(0xc247, gbc.sp());
        EXPECT(0x973f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x973d));
        EXPECT(0x8c, gbc.readMem(0x973e));
        // CB 8C 0129
        gbc.setState(0xa15b, 0x2c77, 0xb750, 0x94cf, 0xb7a3, 0x2326, 0x0, 0x0);
        gbc.writeMem(0xa15b, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xb7, gbc.a());
        EXPECT(0x94, gbc.b());
        EXPECT(0xcf, gbc.c());
        EXPECT(0xb7, gbc.d());
        EXPECT(0xa3, gbc.e());
        EXPECT(0x21, gbc.h());
        EXPECT(0x26, gbc.l());
        EXPECT(0x2c77, gbc.sp());
        EXPECT(0xa15d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa15b));
        EXPECT(0x8c, gbc.readMem(0xa15c));
        // CB 8C 012B
        gbc.setState(0xbc44, 0xeba6, 0xaf30, 0x12b6, 0xaf49, 0x8735, 0x1, 0x0);
        gbc.writeMem(0xbc44, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xaf, gbc.a());
        EXPECT(0x12, gbc.b());
        EXPECT(0xb6, gbc.c());
        EXPECT(0xaf, gbc.d());
        EXPECT(0x49, gbc.e());
        EXPECT(0x85, gbc.h());
        EXPECT(0x35, gbc.l());
        EXPECT(0xeba6, gbc.sp());
        EXPECT(0xbc46, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbc44));
        EXPECT(0x8c, gbc.readMem(0xbc45));
        // CB 8C 012C
        gbc.setState(0xbd88, 0xb845, 0x9f30, 0xc7fc, 0x3de5, 0x701f, 0x0, 0x1);
        gbc.writeMem(0xbd88, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x9f, gbc.a());
        EXPECT(0xc7, gbc.b());
        EXPECT(0xfc, gbc.c());
        EXPECT(0x3d, gbc.d());
        EXPECT(0xe5, gbc.e());
        EXPECT(0x70, gbc.h());
        EXPECT(0x1f, gbc.l());
        EXPECT(0xb845, gbc.sp());
        EXPECT(0xbd8a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbd88));
        EXPECT(0x8c, gbc.readMem(0xbd89));
        // CB 8C 012D
        gbc.setState(0x5236, 0x29f0, 0x1820, 0xbbe6, 0xee63, 0x41b4, 0x0, 0x0);
        gbc.writeMem(0x5236, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x18, gbc.a());
        EXPECT(0xbb, gbc.b());
        EXPECT(0xe6, gbc.c());
        EXPECT(0xee, gbc.d());
        EXPECT(0x63, gbc.e());
        EXPECT(0x41, gbc.h());
        EXPECT(0xb4, gbc.l());
        EXPECT(0x29f0, gbc.sp());
        EXPECT(0x5238, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 012E
        gbc.setState(0x7503, 0xd2ee, 0xa1a0, 0x41ac, 0xdd70, 0x4259, 0x0, 0x1);
        gbc.writeMem(0x7503, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xa1, gbc.a());
        EXPECT(0x41, gbc.b());
        EXPECT(0xac, gbc.c());
        EXPECT(0xdd, gbc.d());
        EXPECT(0x70, gbc.e());
        EXPECT(0x40, gbc.h());
        EXPECT(0x59, gbc.l());
        EXPECT(0xd2ee, gbc.sp());
        EXPECT(0x7505, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 012F
        gbc.setState(0xaab3, 0xca7d, 0x1240, 0xe784, 0x800c, 0x803a, 0x0, 0x0);
        gbc.writeMem(0xaab3, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x12, gbc.a());
        EXPECT(0xe7, gbc.b());
        EXPECT(0x84, gbc.c());
        EXPECT(0x80, gbc.d());
        EXPECT(0xc, gbc.e());
        EXPECT(0x80, gbc.h());
        EXPECT(0x3a, gbc.l());
        EXPECT(0xca7d, gbc.sp());
        EXPECT(0xaab5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaab3));
        EXPECT(0x8c, gbc.readMem(0xaab4));
        // CB 8C 0130
        gbc.setState(0x6df0, 0x9062, 0x5400, 0x21b3, 0x42f4, 0x346f, 0x1, 0x0);
        gbc.writeMem(0x6df0, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x54, gbc.a());
        EXPECT(0x21, gbc.b());
        EXPECT(0xb3, gbc.c());
        EXPECT(0x42, gbc.d());
        EXPECT(0xf4, gbc.e());
        EXPECT(0x34, gbc.h());
        EXPECT(0x6f, gbc.l());
        EXPECT(0x9062, gbc.sp());
        EXPECT(0x6df2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 0131
        gbc.setState(0x9cfd, 0x3231, 0x1270, 0xb48e, 0x6d3e, 0xcd52, 0x0, 0x1);
        gbc.writeMem(0x9cfd, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x12, gbc.a());
        EXPECT(0xb4, gbc.b());
        EXPECT(0x8e, gbc.c());
        EXPECT(0x6d, gbc.d());
        EXPECT(0x3e, gbc.e());
        EXPECT(0xcd, gbc.h());
        EXPECT(0x52, gbc.l());
        EXPECT(0x3231, gbc.sp());
        EXPECT(0x9cff, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9cfd));
        EXPECT(0x8c, gbc.readMem(0x9cfe));
        // CB 8C 0132
        gbc.setState(0x83fd, 0xafa9, 0xfe50, 0x2d89, 0x75e5, 0x2179, 0x1, 0x0);
        gbc.writeMem(0x83fd, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xfe, gbc.a());
        EXPECT(0x2d, gbc.b());
        EXPECT(0x89, gbc.c());
        EXPECT(0x75, gbc.d());
        EXPECT(0xe5, gbc.e());
        EXPECT(0x21, gbc.h());
        EXPECT(0x79, gbc.l());
        EXPECT(0xafa9, gbc.sp());
        EXPECT(0x83ff, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x83fd));
        EXPECT(0x8c, gbc.readMem(0x83fe));
        // CB 8C 0134
        gbc.setState(0x896c, 0x9a18, 0x1160, 0xb108, 0xad1d, 0xeb1c, 0x0, 0x1);
        gbc.writeMem(0x896c, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x11, gbc.a());
        EXPECT(0xb1, gbc.b());
        EXPECT(0x8, gbc.c());
        EXPECT(0xad, gbc.d());
        EXPECT(0x1d, gbc.e());
        EXPECT(0xe9, gbc.h());
        EXPECT(0x1c, gbc.l());
        EXPECT(0x9a18, gbc.sp());
        EXPECT(0x896e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x896c));
        EXPECT(0x8c, gbc.readMem(0x896d));
        // CB 8C 0136
        gbc.setState(0xe7e6, 0x9178, 0x8a0, 0xe27b, 0x509e, 0x3854, 0x0, 0x1);
        gbc.writeMem(0xe7e6, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x8, gbc.a());
        EXPECT(0xe2, gbc.b());
        EXPECT(0x7b, gbc.c());
        EXPECT(0x50, gbc.d());
        EXPECT(0x9e, gbc.e());
        EXPECT(0x38, gbc.h());
        EXPECT(0x54, gbc.l());
        EXPECT(0x9178, gbc.sp());
        EXPECT(0xe7e8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe7e6));
        EXPECT(0x8c, gbc.readMem(0xe7e7));
        // CB 8C 0137
        gbc.setState(0x5d7a, 0x23fa, 0x6720, 0x20a2, 0xc284, 0x909d, 0x1, 0x0);
        gbc.writeMem(0x5d7a, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x67, gbc.a());
        EXPECT(0x20, gbc.b());
        EXPECT(0xa2, gbc.c());
        EXPECT(0xc2, gbc.d());
        EXPECT(0x84, gbc.e());
        EXPECT(0x90, gbc.h());
        EXPECT(0x9d, gbc.l());
        EXPECT(0x23fa, gbc.sp());
        EXPECT(0x5d7c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 0138
        gbc.setState(0x1e84, 0xc6c4, 0xd2e0, 0x4d22, 0x85b1, 0xa1a9, 0x1, 0x0);
        gbc.writeMem(0x1e84, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xd2, gbc.a());
        EXPECT(0x4d, gbc.b());
        EXPECT(0x22, gbc.c());
        EXPECT(0x85, gbc.d());
        EXPECT(0xb1, gbc.e());
        EXPECT(0xa1, gbc.h());
        EXPECT(0xa9, gbc.l());
        EXPECT(0xc6c4, gbc.sp());
        EXPECT(0x1e86, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 0139
        gbc.setState(0xb511, 0x4b1c, 0x7be0, 0x5729, 0x6448, 0xe48, 0x0, 0x0);
        gbc.writeMem(0xb511, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x7b, gbc.a());
        EXPECT(0x57, gbc.b());
        EXPECT(0x29, gbc.c());
        EXPECT(0x64, gbc.d());
        EXPECT(0x48, gbc.e());
        EXPECT(0xc, gbc.h());
        EXPECT(0x48, gbc.l());
        EXPECT(0x4b1c, gbc.sp());
        EXPECT(0xb513, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb511));
        EXPECT(0x8c, gbc.readMem(0xb512));
        // CB 8C 013A
        gbc.setState(0xeefd, 0xa247, 0x97e0, 0x4a5e, 0x3cc8, 0x654, 0x1, 0x0);
        gbc.writeMem(0xeefd, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x97, gbc.a());
        EXPECT(0x4a, gbc.b());
        EXPECT(0x5e, gbc.c());
        EXPECT(0x3c, gbc.d());
        EXPECT(0xc8, gbc.e());
        EXPECT(0x4, gbc.h());
        EXPECT(0x54, gbc.l());
        EXPECT(0xa247, gbc.sp());
        EXPECT(0xeeff, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xeefd));
        EXPECT(0x8c, gbc.readMem(0xeefe));
        // CB 8C 013B
        gbc.setState(0x2842, 0x4e0, 0x9980, 0x9fae, 0xad1d, 0xafec, 0x1, 0x0);
        gbc.writeMem(0x2842, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x99, gbc.a());
        EXPECT(0x9f, gbc.b());
        EXPECT(0xae, gbc.c());
        EXPECT(0xad, gbc.d());
        EXPECT(0x1d, gbc.e());
        EXPECT(0xad, gbc.h());
        EXPECT(0xec, gbc.l());
        EXPECT(0x4e0, gbc.sp());
        EXPECT(0x2844, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 013C
        gbc.setState(0x354, 0x9853, 0xf730, 0x933f, 0x3acb, 0x2768, 0x0, 0x0);
        gbc.writeMem(0x354, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xf7, gbc.a());
        EXPECT(0x93, gbc.b());
        EXPECT(0x3f, gbc.c());
        EXPECT(0x3a, gbc.d());
        EXPECT(0xcb, gbc.e());
        EXPECT(0x25, gbc.h());
        EXPECT(0x68, gbc.l());
        EXPECT(0x9853, gbc.sp());
        EXPECT(0x356, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 013D
        gbc.setState(0x771c, 0x1f18, 0x2790, 0xf0da, 0xa194, 0x453a, 0x1, 0x1);
        gbc.writeMem(0x771c, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x27, gbc.a());
        EXPECT(0xf0, gbc.b());
        EXPECT(0xda, gbc.c());
        EXPECT(0xa1, gbc.d());
        EXPECT(0x94, gbc.e());
        EXPECT(0x45, gbc.h());
        EXPECT(0x3a, gbc.l());
        EXPECT(0x1f18, gbc.sp());
        EXPECT(0x771e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 013E
        gbc.setState(0x7fb8, 0xa5f6, 0x11f0, 0x8b87, 0xa317, 0xec27, 0x0, 0x0);
        gbc.writeMem(0x7fb8, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x11, gbc.a());
        EXPECT(0x8b, gbc.b());
        EXPECT(0x87, gbc.c());
        EXPECT(0xa3, gbc.d());
        EXPECT(0x17, gbc.e());
        EXPECT(0xec, gbc.h());
        EXPECT(0x27, gbc.l());
        EXPECT(0xa5f6, gbc.sp());
        EXPECT(0x7fba, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 0140
        gbc.setState(0x77b5, 0x2319, 0x7840, 0x704c, 0xab5f, 0x1c, 0x0, 0x0);
        gbc.writeMem(0x77b5, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x78, gbc.a());
        EXPECT(0x70, gbc.b());
        EXPECT(0x4c, gbc.c());
        EXPECT(0xab, gbc.d());
        EXPECT(0x5f, gbc.e());
        EXPECT(0x0, gbc.h());
        EXPECT(0x1c, gbc.l());
        EXPECT(0x2319, gbc.sp());
        EXPECT(0x77b7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 0141
        gbc.setState(0x683, 0x6dc9, 0xd6c0, 0x5068, 0x838f, 0x800c, 0x0, 0x0);
        gbc.writeMem(0x683, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xd6, gbc.a());
        EXPECT(0x50, gbc.b());
        EXPECT(0x68, gbc.c());
        EXPECT(0x83, gbc.d());
        EXPECT(0x8f, gbc.e());
        EXPECT(0x80, gbc.h());
        EXPECT(0xc, gbc.l());
        EXPECT(0x6dc9, gbc.sp());
        EXPECT(0x685, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 0142
        gbc.setState(0xed64, 0x9f6d, 0x80e0, 0x68a6, 0x3eb, 0x50b8, 0x1, 0x0);
        gbc.writeMem(0xed64, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x80, gbc.a());
        EXPECT(0x68, gbc.b());
        EXPECT(0xa6, gbc.c());
        EXPECT(0x3, gbc.d());
        EXPECT(0xeb, gbc.e());
        EXPECT(0x50, gbc.h());
        EXPECT(0xb8, gbc.l());
        EXPECT(0x9f6d, gbc.sp());
        EXPECT(0xed66, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xed64));
        EXPECT(0x8c, gbc.readMem(0xed65));
        // CB 8C 0143
        gbc.setState(0xa40f, 0x4f97, 0x5090, 0xa97, 0xf6ad, 0x77bd, 0x1, 0x0);
        gbc.writeMem(0xa40f, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x50, gbc.a());
        EXPECT(0xa, gbc.b());
        EXPECT(0x97, gbc.c());
        EXPECT(0xf6, gbc.d());
        EXPECT(0xad, gbc.e());
        EXPECT(0x75, gbc.h());
        EXPECT(0xbd, gbc.l());
        EXPECT(0x4f97, gbc.sp());
        EXPECT(0xa411, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa40f));
        EXPECT(0x8c, gbc.readMem(0xa410));
        // CB 8C 0144
        gbc.setState(0xdd53, 0xa2af, 0x38d0, 0x6f57, 0x7cab, 0xfd05, 0x0, 0x1);
        gbc.writeMem(0xdd53, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x38, gbc.a());
        EXPECT(0x6f, gbc.b());
        EXPECT(0x57, gbc.c());
        EXPECT(0x7c, gbc.d());
        EXPECT(0xab, gbc.e());
        EXPECT(0xfd, gbc.h());
        EXPECT(0x5, gbc.l());
        EXPECT(0xa2af, gbc.sp());
        EXPECT(0xdd55, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdd53));
        EXPECT(0x8c, gbc.readMem(0xdd54));
        // CB 8C 0145
        gbc.setState(0xc969, 0xbab2, 0xeb10, 0x541f, 0x8d9a, 0x1fb9, 0x1, 0x0);
        gbc.writeMem(0xc969, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xeb, gbc.a());
        EXPECT(0x54, gbc.b());
        EXPECT(0x1f, gbc.c());
        EXPECT(0x8d, gbc.d());
        EXPECT(0x9a, gbc.e());
        EXPECT(0x1d, gbc.h());
        EXPECT(0xb9, gbc.l());
        EXPECT(0xbab2, gbc.sp());
        EXPECT(0xc96b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc969));
        EXPECT(0x8c, gbc.readMem(0xc96a));
        // CB 8C 0146
        gbc.setState(0xd027, 0xb06, 0x24e0, 0xa81, 0xecce, 0x6db3, 0x1, 0x0);
        gbc.writeMem(0xd027, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x24, gbc.a());
        EXPECT(0xa, gbc.b());
        EXPECT(0x81, gbc.c());
        EXPECT(0xec, gbc.d());
        EXPECT(0xce, gbc.e());
        EXPECT(0x6d, gbc.h());
        EXPECT(0xb3, gbc.l());
        EXPECT(0xb06, gbc.sp());
        EXPECT(0xd029, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd027));
        EXPECT(0x8c, gbc.readMem(0xd028));
        // CB 8C 0147
        gbc.setState(0xab02, 0x12a4, 0x1800, 0x6586, 0x7b83, 0x711c, 0x0, 0x1);
        gbc.writeMem(0xab02, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x18, gbc.a());
        EXPECT(0x65, gbc.b());
        EXPECT(0x86, gbc.c());
        EXPECT(0x7b, gbc.d());
        EXPECT(0x83, gbc.e());
        EXPECT(0x71, gbc.h());
        EXPECT(0x1c, gbc.l());
        EXPECT(0x12a4, gbc.sp());
        EXPECT(0xab04, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xab02));
        EXPECT(0x8c, gbc.readMem(0xab03));
        // CB 8C 0148
        gbc.setState(0xc420, 0xc657, 0xe0f0, 0xc890, 0xc0cd, 0x8628, 0x1, 0x0);
        gbc.writeMem(0xc420, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xe0, gbc.a());
        EXPECT(0xc8, gbc.b());
        EXPECT(0x90, gbc.c());
        EXPECT(0xc0, gbc.d());
        EXPECT(0xcd, gbc.e());
        EXPECT(0x84, gbc.h());
        EXPECT(0x28, gbc.l());
        EXPECT(0xc657, gbc.sp());
        EXPECT(0xc422, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc420));
        EXPECT(0x8c, gbc.readMem(0xc421));
        // CB 8C 0149
        gbc.setState(0xe6f3, 0x7dc0, 0xc9d0, 0x4af0, 0x23ec, 0x95b5, 0x0, 0x1);
        gbc.writeMem(0xe6f3, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xc9, gbc.a());
        EXPECT(0x4a, gbc.b());
        EXPECT(0xf0, gbc.c());
        EXPECT(0x23, gbc.d());
        EXPECT(0xec, gbc.e());
        EXPECT(0x95, gbc.h());
        EXPECT(0xb5, gbc.l());
        EXPECT(0x7dc0, gbc.sp());
        EXPECT(0xe6f5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe6f3));
        EXPECT(0x8c, gbc.readMem(0xe6f4));
        // CB 8C 014A
        gbc.setState(0x676e, 0xb199, 0x2090, 0xeb24, 0x8874, 0xa8c0, 0x1, 0x1);
        gbc.writeMem(0x676e, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x20, gbc.a());
        EXPECT(0xeb, gbc.b());
        EXPECT(0x24, gbc.c());
        EXPECT(0x88, gbc.d());
        EXPECT(0x74, gbc.e());
        EXPECT(0xa8, gbc.h());
        EXPECT(0xc0, gbc.l());
        EXPECT(0xb199, gbc.sp());
        EXPECT(0x6770, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 014B
        gbc.setState(0xd1d0, 0x755, 0xf630, 0xa197, 0x8556, 0x20b7, 0x1, 0x0);
        gbc.writeMem(0xd1d0, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xf6, gbc.a());
        EXPECT(0xa1, gbc.b());
        EXPECT(0x97, gbc.c());
        EXPECT(0x85, gbc.d());
        EXPECT(0x56, gbc.e());
        EXPECT(0x20, gbc.h());
        EXPECT(0xb7, gbc.l());
        EXPECT(0x755, gbc.sp());
        EXPECT(0xd1d2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd1d0));
        EXPECT(0x8c, gbc.readMem(0xd1d1));
        // CB 8C 014C
        gbc.setState(0x34f3, 0xfefb, 0xf760, 0xdc4c, 0x80d9, 0x4897, 0x1, 0x0);
        gbc.writeMem(0x34f3, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xf7, gbc.a());
        EXPECT(0xdc, gbc.b());
        EXPECT(0x4c, gbc.c());
        EXPECT(0x80, gbc.d());
        EXPECT(0xd9, gbc.e());
        EXPECT(0x48, gbc.h());
        EXPECT(0x97, gbc.l());
        EXPECT(0xfefb, gbc.sp());
        EXPECT(0x34f5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 014D
        gbc.setState(0x3a7e, 0x6bd4, 0xf890, 0xeb23, 0x5a22, 0xa294, 0x1, 0x0);
        gbc.writeMem(0x3a7e, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xf8, gbc.a());
        EXPECT(0xeb, gbc.b());
        EXPECT(0x23, gbc.c());
        EXPECT(0x5a, gbc.d());
        EXPECT(0x22, gbc.e());
        EXPECT(0xa0, gbc.h());
        EXPECT(0x94, gbc.l());
        EXPECT(0x6bd4, gbc.sp());
        EXPECT(0x3a80, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 014E
        gbc.setState(0x759e, 0x4d45, 0x2390, 0x498e, 0x520c, 0x1e9a, 0x0, 0x0);
        gbc.writeMem(0x759e, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x23, gbc.a());
        EXPECT(0x49, gbc.b());
        EXPECT(0x8e, gbc.c());
        EXPECT(0x52, gbc.d());
        EXPECT(0xc, gbc.e());
        EXPECT(0x1c, gbc.h());
        EXPECT(0x9a, gbc.l());
        EXPECT(0x4d45, gbc.sp());
        EXPECT(0x75a0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 014F
        gbc.setState(0x9ef9, 0xd469, 0x8dd0, 0x3236, 0x3c57, 0x2c2c, 0x0, 0x1);
        gbc.writeMem(0x9ef9, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x8d, gbc.a());
        EXPECT(0x32, gbc.b());
        EXPECT(0x36, gbc.c());
        EXPECT(0x3c, gbc.d());
        EXPECT(0x57, gbc.e());
        EXPECT(0x2c, gbc.h());
        EXPECT(0x2c, gbc.l());
        EXPECT(0xd469, gbc.sp());
        EXPECT(0x9efb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9ef9));
        EXPECT(0x8c, gbc.readMem(0x9efa));
        // CB 8C 0150
        gbc.setState(0x50fd, 0xda8e, 0xe200, 0x3242, 0xb67e, 0x7d79, 0x1, 0x1);
        gbc.writeMem(0x50fd, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xe2, gbc.a());
        EXPECT(0x32, gbc.b());
        EXPECT(0x42, gbc.c());
        EXPECT(0xb6, gbc.d());
        EXPECT(0x7e, gbc.e());
        EXPECT(0x7d, gbc.h());
        EXPECT(0x79, gbc.l());
        EXPECT(0xda8e, gbc.sp());
        EXPECT(0x50ff, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 0151
        gbc.setState(0x4b69, 0x91f8, 0x2db0, 0xa947, 0xcb53, 0x88d5, 0x1, 0x0);
        gbc.writeMem(0x4b69, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x2d, gbc.a());
        EXPECT(0xa9, gbc.b());
        EXPECT(0x47, gbc.c());
        EXPECT(0xcb, gbc.d());
        EXPECT(0x53, gbc.e());
        EXPECT(0x88, gbc.h());
        EXPECT(0xd5, gbc.l());
        EXPECT(0x91f8, gbc.sp());
        EXPECT(0x4b6b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 0152
        gbc.setState(0x19a3, 0xe31, 0xf5e0, 0x79e1, 0xfdb1, 0xc78c, 0x0, 0x1);
        gbc.writeMem(0x19a3, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xf5, gbc.a());
        EXPECT(0x79, gbc.b());
        EXPECT(0xe1, gbc.c());
        EXPECT(0xfd, gbc.d());
        EXPECT(0xb1, gbc.e());
        EXPECT(0xc5, gbc.h());
        EXPECT(0x8c, gbc.l());
        EXPECT(0xe31, gbc.sp());
        EXPECT(0x19a5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 0153
        gbc.setState(0xc0dd, 0xce55, 0xe200, 0x9789, 0x28a8, 0x268a, 0x1, 0x0);
        gbc.writeMem(0xc0dd, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xe2, gbc.a());
        EXPECT(0x97, gbc.b());
        EXPECT(0x89, gbc.c());
        EXPECT(0x28, gbc.d());
        EXPECT(0xa8, gbc.e());
        EXPECT(0x24, gbc.h());
        EXPECT(0x8a, gbc.l());
        EXPECT(0xce55, gbc.sp());
        EXPECT(0xc0df, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc0dd));
        EXPECT(0x8c, gbc.readMem(0xc0de));
        // CB 8C 0154
        gbc.setState(0xa4e0, 0xad34, 0xcc00, 0xbcbf, 0x27d0, 0x3032, 0x1, 0x1);
        gbc.writeMem(0xa4e0, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xcc, gbc.a());
        EXPECT(0xbc, gbc.b());
        EXPECT(0xbf, gbc.c());
        EXPECT(0x27, gbc.d());
        EXPECT(0xd0, gbc.e());
        EXPECT(0x30, gbc.h());
        EXPECT(0x32, gbc.l());
        EXPECT(0xad34, gbc.sp());
        EXPECT(0xa4e2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa4e0));
        EXPECT(0x8c, gbc.readMem(0xa4e1));
        // CB 8C 0155
        gbc.setState(0x724e, 0x760d, 0x62c0, 0x1eb0, 0x13b7, 0x4edb, 0x0, 0x0);
        gbc.writeMem(0x724e, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x62, gbc.a());
        EXPECT(0x1e, gbc.b());
        EXPECT(0xb0, gbc.c());
        EXPECT(0x13, gbc.d());
        EXPECT(0xb7, gbc.e());
        EXPECT(0x4c, gbc.h());
        EXPECT(0xdb, gbc.l());
        EXPECT(0x760d, gbc.sp());
        EXPECT(0x7250, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 0156
        gbc.setState(0x4bae, 0x7703, 0xf240, 0x4dfb, 0xb174, 0xdebf, 0x1, 0x1);
        gbc.writeMem(0x4bae, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xf2, gbc.a());
        EXPECT(0x4d, gbc.b());
        EXPECT(0xfb, gbc.c());
        EXPECT(0xb1, gbc.d());
        EXPECT(0x74, gbc.e());
        EXPECT(0xdc, gbc.h());
        EXPECT(0xbf, gbc.l());
        EXPECT(0x7703, gbc.sp());
        EXPECT(0x4bb0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 0157
        gbc.setState(0xcf2, 0x9c1a, 0x2ac0, 0x659d, 0x9b2b, 0xc2da, 0x0, 0x1);
        gbc.writeMem(0xcf2, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x2a, gbc.a());
        EXPECT(0x65, gbc.b());
        EXPECT(0x9d, gbc.c());
        EXPECT(0x9b, gbc.d());
        EXPECT(0x2b, gbc.e());
        EXPECT(0xc0, gbc.h());
        EXPECT(0xda, gbc.l());
        EXPECT(0x9c1a, gbc.sp());
        EXPECT(0xcf4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 0158
        gbc.setState(0x7b56, 0xe5d3, 0x59c0, 0x4a0d, 0x202, 0x1e02, 0x0, 0x1);
        gbc.writeMem(0x7b56, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x59, gbc.a());
        EXPECT(0x4a, gbc.b());
        EXPECT(0xd, gbc.c());
        EXPECT(0x2, gbc.d());
        EXPECT(0x2, gbc.e());
        EXPECT(0x1c, gbc.h());
        EXPECT(0x2, gbc.l());
        EXPECT(0xe5d3, gbc.sp());
        EXPECT(0x7b58, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 0159
        gbc.setState(0x28b3, 0x3715, 0x9b90, 0xfcd0, 0x805d, 0xd718, 0x0, 0x0);
        gbc.writeMem(0x28b3, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x9b, gbc.a());
        EXPECT(0xfc, gbc.b());
        EXPECT(0xd0, gbc.c());
        EXPECT(0x80, gbc.d());
        EXPECT(0x5d, gbc.e());
        EXPECT(0xd5, gbc.h());
        EXPECT(0x18, gbc.l());
        EXPECT(0x3715, gbc.sp());
        EXPECT(0x28b5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 015A
        gbc.setState(0x5439, 0xa859, 0xf1e0, 0xf38d, 0x5fd9, 0xf6bb, 0x1, 0x1);
        gbc.writeMem(0x5439, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xf1, gbc.a());
        EXPECT(0xf3, gbc.b());
        EXPECT(0x8d, gbc.c());
        EXPECT(0x5f, gbc.d());
        EXPECT(0xd9, gbc.e());
        EXPECT(0xf4, gbc.h());
        EXPECT(0xbb, gbc.l());
        EXPECT(0xa859, gbc.sp());
        EXPECT(0x543b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 015B
        gbc.setState(0x47ce, 0xf4b, 0xfe30, 0xe1c9, 0xb24, 0x2c26, 0x1, 0x0);
        gbc.writeMem(0x47ce, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xfe, gbc.a());
        EXPECT(0xe1, gbc.b());
        EXPECT(0xc9, gbc.c());
        EXPECT(0xb, gbc.d());
        EXPECT(0x24, gbc.e());
        EXPECT(0x2c, gbc.h());
        EXPECT(0x26, gbc.l());
        EXPECT(0xf4b, gbc.sp());
        EXPECT(0x47d0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 015C
        gbc.setState(0xcbc0, 0x3538, 0x3f0, 0xad7f, 0xf985, 0xc95f, 0x1, 0x0);
        gbc.writeMem(0xcbc0, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x3, gbc.a());
        EXPECT(0xad, gbc.b());
        EXPECT(0x7f, gbc.c());
        EXPECT(0xf9, gbc.d());
        EXPECT(0x85, gbc.e());
        EXPECT(0xc9, gbc.h());
        EXPECT(0x5f, gbc.l());
        EXPECT(0x3538, gbc.sp());
        EXPECT(0xcbc2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcbc0));
        EXPECT(0x8c, gbc.readMem(0xcbc1));
        // CB 8C 015D
        gbc.setState(0x96bf, 0x2662, 0xf860, 0xfed4, 0xf5ea, 0x75df, 0x0, 0x0);
        gbc.writeMem(0x96bf, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xf8, gbc.a());
        EXPECT(0xfe, gbc.b());
        EXPECT(0xd4, gbc.c());
        EXPECT(0xf5, gbc.d());
        EXPECT(0xea, gbc.e());
        EXPECT(0x75, gbc.h());
        EXPECT(0xdf, gbc.l());
        EXPECT(0x2662, gbc.sp());
        EXPECT(0x96c1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x96bf));
        EXPECT(0x8c, gbc.readMem(0x96c0));
        // CB 8C 015E
        gbc.setState(0x404b, 0x3633, 0x20, 0xa77e, 0xc7b0, 0x8ebf, 0x1, 0x1);
        gbc.writeMem(0x404b, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xa7, gbc.b());
        EXPECT(0x7e, gbc.c());
        EXPECT(0xc7, gbc.d());
        EXPECT(0xb0, gbc.e());
        EXPECT(0x8c, gbc.h());
        EXPECT(0xbf, gbc.l());
        EXPECT(0x3633, gbc.sp());
        EXPECT(0x404d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 015F
        gbc.setState(0x11df, 0xd363, 0x45a0, 0x24e7, 0x9070, 0x703f, 0x0, 0x1);
        gbc.writeMem(0x11df, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x45, gbc.a());
        EXPECT(0x24, gbc.b());
        EXPECT(0xe7, gbc.c());
        EXPECT(0x90, gbc.d());
        EXPECT(0x70, gbc.e());
        EXPECT(0x70, gbc.h());
        EXPECT(0x3f, gbc.l());
        EXPECT(0xd363, gbc.sp());
        EXPECT(0x11e1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 0160
        gbc.setState(0x7e3a, 0xe6af, 0x1210, 0x83e0, 0x9b81, 0x5e5e, 0x1, 0x1);
        gbc.writeMem(0x7e3a, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x12, gbc.a());
        EXPECT(0x83, gbc.b());
        EXPECT(0xe0, gbc.c());
        EXPECT(0x9b, gbc.d());
        EXPECT(0x81, gbc.e());
        EXPECT(0x5c, gbc.h());
        EXPECT(0x5e, gbc.l());
        EXPECT(0xe6af, gbc.sp());
        EXPECT(0x7e3c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 0161
        gbc.setState(0x6b4f, 0x6041, 0x9cc0, 0x72a2, 0x2865, 0x9228, 0x1, 0x0);
        gbc.writeMem(0x6b4f, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x9c, gbc.a());
        EXPECT(0x72, gbc.b());
        EXPECT(0xa2, gbc.c());
        EXPECT(0x28, gbc.d());
        EXPECT(0x65, gbc.e());
        EXPECT(0x90, gbc.h());
        EXPECT(0x28, gbc.l());
        EXPECT(0x6041, gbc.sp());
        EXPECT(0x6b51, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 0162
        gbc.setState(0xc05f, 0x5548, 0xe280, 0x647f, 0xab86, 0xf42e, 0x1, 0x0);
        gbc.writeMem(0xc05f, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xe2, gbc.a());
        EXPECT(0x64, gbc.b());
        EXPECT(0x7f, gbc.c());
        EXPECT(0xab, gbc.d());
        EXPECT(0x86, gbc.e());
        EXPECT(0xf4, gbc.h());
        EXPECT(0x2e, gbc.l());
        EXPECT(0x5548, gbc.sp());
        EXPECT(0xc061, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc05f));
        EXPECT(0x8c, gbc.readMem(0xc060));
        // CB 8C 0163
        gbc.setState(0x16fb, 0x5745, 0x2ed0, 0xb4be, 0x9b7a, 0xa707, 0x0, 0x0);
        gbc.writeMem(0x16fb, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x2e, gbc.a());
        EXPECT(0xb4, gbc.b());
        EXPECT(0xbe, gbc.c());
        EXPECT(0x9b, gbc.d());
        EXPECT(0x7a, gbc.e());
        EXPECT(0xa5, gbc.h());
        EXPECT(0x7, gbc.l());
        EXPECT(0x5745, gbc.sp());
        EXPECT(0x16fd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 0164
        gbc.setState(0xbde2, 0xf221, 0xa720, 0xd0a, 0x96e2, 0x1fa9, 0x0, 0x0);
        gbc.writeMem(0xbde2, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xa7, gbc.a());
        EXPECT(0xd, gbc.b());
        EXPECT(0xa, gbc.c());
        EXPECT(0x96, gbc.d());
        EXPECT(0xe2, gbc.e());
        EXPECT(0x1d, gbc.h());
        EXPECT(0xa9, gbc.l());
        EXPECT(0xf221, gbc.sp());
        EXPECT(0xbde4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbde2));
        EXPECT(0x8c, gbc.readMem(0xbde3));
        // CB 8C 0165
        gbc.setState(0x58ed, 0x4770, 0x34d0, 0x1569, 0xad4b, 0x4c25, 0x1, 0x1);
        gbc.writeMem(0x58ed, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x34, gbc.a());
        EXPECT(0x15, gbc.b());
        EXPECT(0x69, gbc.c());
        EXPECT(0xad, gbc.d());
        EXPECT(0x4b, gbc.e());
        EXPECT(0x4c, gbc.h());
        EXPECT(0x25, gbc.l());
        EXPECT(0x4770, gbc.sp());
        EXPECT(0x58ef, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 0166
        gbc.setState(0x8d3e, 0xdbce, 0xbdc0, 0x7d65, 0x68d1, 0x7916, 0x0, 0x1);
        gbc.writeMem(0x8d3e, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xbd, gbc.a());
        EXPECT(0x7d, gbc.b());
        EXPECT(0x65, gbc.c());
        EXPECT(0x68, gbc.d());
        EXPECT(0xd1, gbc.e());
        EXPECT(0x79, gbc.h());
        EXPECT(0x16, gbc.l());
        EXPECT(0xdbce, gbc.sp());
        EXPECT(0x8d40, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8d3e));
        EXPECT(0x8c, gbc.readMem(0x8d3f));
        // CB 8C 0167
        gbc.setState(0xa045, 0xd2b4, 0x84a0, 0xf0c8, 0x625f, 0xedd4, 0x0, 0x1);
        gbc.writeMem(0xa045, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x84, gbc.a());
        EXPECT(0xf0, gbc.b());
        EXPECT(0xc8, gbc.c());
        EXPECT(0x62, gbc.d());
        EXPECT(0x5f, gbc.e());
        EXPECT(0xed, gbc.h());
        EXPECT(0xd4, gbc.l());
        EXPECT(0xd2b4, gbc.sp());
        EXPECT(0xa047, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa045));
        EXPECT(0x8c, gbc.readMem(0xa046));
        // CB 8C 0168
        gbc.setState(0xdb5a, 0xb63a, 0x1130, 0xb594, 0xef9e, 0xeaed, 0x0, 0x1);
        gbc.writeMem(0xdb5a, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x11, gbc.a());
        EXPECT(0xb5, gbc.b());
        EXPECT(0x94, gbc.c());
        EXPECT(0xef, gbc.d());
        EXPECT(0x9e, gbc.e());
        EXPECT(0xe8, gbc.h());
        EXPECT(0xed, gbc.l());
        EXPECT(0xb63a, gbc.sp());
        EXPECT(0xdb5c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdb5a));
        EXPECT(0x8c, gbc.readMem(0xdb5b));
        // CB 8C 0169
        gbc.setState(0x45cd, 0xfef4, 0x2cd0, 0x3203, 0xb332, 0xe368, 0x1, 0x0);
        gbc.writeMem(0x45cd, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x2c, gbc.a());
        EXPECT(0x32, gbc.b());
        EXPECT(0x3, gbc.c());
        EXPECT(0xb3, gbc.d());
        EXPECT(0x32, gbc.e());
        EXPECT(0xe1, gbc.h());
        EXPECT(0x68, gbc.l());
        EXPECT(0xfef4, gbc.sp());
        EXPECT(0x45cf, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 016A
        gbc.setState(0x6b80, 0xe714, 0x9ac0, 0x7c31, 0x6716, 0xa3cb, 0x0, 0x0);
        gbc.writeMem(0x6b80, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x9a, gbc.a());
        EXPECT(0x7c, gbc.b());
        EXPECT(0x31, gbc.c());
        EXPECT(0x67, gbc.d());
        EXPECT(0x16, gbc.e());
        EXPECT(0xa1, gbc.h());
        EXPECT(0xcb, gbc.l());
        EXPECT(0xe714, gbc.sp());
        EXPECT(0x6b82, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 016B
        gbc.setState(0xbdf, 0x6664, 0xe610, 0x1596, 0xd7ad, 0x1511, 0x0, 0x0);
        gbc.writeMem(0xbdf, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xe6, gbc.a());
        EXPECT(0x15, gbc.b());
        EXPECT(0x96, gbc.c());
        EXPECT(0xd7, gbc.d());
        EXPECT(0xad, gbc.e());
        EXPECT(0x15, gbc.h());
        EXPECT(0x11, gbc.l());
        EXPECT(0x6664, gbc.sp());
        EXPECT(0xbe1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 016C
        gbc.setState(0x9579, 0x155a, 0x5a20, 0x96be, 0x3e2b, 0x91f, 0x1, 0x0);
        gbc.writeMem(0x9579, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x5a, gbc.a());
        EXPECT(0x96, gbc.b());
        EXPECT(0xbe, gbc.c());
        EXPECT(0x3e, gbc.d());
        EXPECT(0x2b, gbc.e());
        EXPECT(0x9, gbc.h());
        EXPECT(0x1f, gbc.l());
        EXPECT(0x155a, gbc.sp());
        EXPECT(0x957b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9579));
        EXPECT(0x8c, gbc.readMem(0x957a));
        // CB 8C 016D
        gbc.setState(0x24d4, 0x62c1, 0x51b0, 0xdb54, 0xfa4b, 0x1e3e, 0x0, 0x1);
        gbc.writeMem(0x24d4, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x51, gbc.a());
        EXPECT(0xdb, gbc.b());
        EXPECT(0x54, gbc.c());
        EXPECT(0xfa, gbc.d());
        EXPECT(0x4b, gbc.e());
        EXPECT(0x1c, gbc.h());
        EXPECT(0x3e, gbc.l());
        EXPECT(0x62c1, gbc.sp());
        EXPECT(0x24d6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 016F
        gbc.setState(0x6d1a, 0xa6de, 0xa890, 0x9fc7, 0x9572, 0x6d11, 0x1, 0x0);
        gbc.writeMem(0x6d1a, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xa8, gbc.a());
        EXPECT(0x9f, gbc.b());
        EXPECT(0xc7, gbc.c());
        EXPECT(0x95, gbc.d());
        EXPECT(0x72, gbc.e());
        EXPECT(0x6d, gbc.h());
        EXPECT(0x11, gbc.l());
        EXPECT(0xa6de, gbc.sp());
        EXPECT(0x6d1c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 0170
        gbc.setState(0x9c72, 0xff74, 0xe370, 0x73c0, 0x79e7, 0x6867, 0x0, 0x0);
        gbc.writeMem(0x9c72, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xe3, gbc.a());
        EXPECT(0x73, gbc.b());
        EXPECT(0xc0, gbc.c());
        EXPECT(0x79, gbc.d());
        EXPECT(0xe7, gbc.e());
        EXPECT(0x68, gbc.h());
        EXPECT(0x67, gbc.l());
        EXPECT(0xff74, gbc.sp());
        EXPECT(0x9c74, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9c72));
        EXPECT(0x8c, gbc.readMem(0x9c73));
        // CB 8C 0171
        gbc.setState(0xb6a7, 0x84eb, 0x7de0, 0x6148, 0xb7d3, 0x73d7, 0x0, 0x1);
        gbc.writeMem(0xb6a7, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x7d, gbc.a());
        EXPECT(0x61, gbc.b());
        EXPECT(0x48, gbc.c());
        EXPECT(0xb7, gbc.d());
        EXPECT(0xd3, gbc.e());
        EXPECT(0x71, gbc.h());
        EXPECT(0xd7, gbc.l());
        EXPECT(0x84eb, gbc.sp());
        EXPECT(0xb6a9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb6a7));
        EXPECT(0x8c, gbc.readMem(0xb6a8));
        // CB 8C 0172
        gbc.setState(0xafac, 0xbb97, 0xd6f0, 0x10f3, 0xa00e, 0x62b8, 0x1, 0x1);
        gbc.writeMem(0xafac, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xd6, gbc.a());
        EXPECT(0x10, gbc.b());
        EXPECT(0xf3, gbc.c());
        EXPECT(0xa0, gbc.d());
        EXPECT(0xe, gbc.e());
        EXPECT(0x60, gbc.h());
        EXPECT(0xb8, gbc.l());
        EXPECT(0xbb97, gbc.sp());
        EXPECT(0xafae, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xafac));
        EXPECT(0x8c, gbc.readMem(0xafad));
        // CB 8C 0173
        gbc.setState(0xd15f, 0xff9d, 0x53f0, 0xf53e, 0xb25b, 0x1949, 0x0, 0x1);
        gbc.writeMem(0xd15f, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x53, gbc.a());
        EXPECT(0xf5, gbc.b());
        EXPECT(0x3e, gbc.c());
        EXPECT(0xb2, gbc.d());
        EXPECT(0x5b, gbc.e());
        EXPECT(0x19, gbc.h());
        EXPECT(0x49, gbc.l());
        EXPECT(0xff9d, gbc.sp());
        EXPECT(0xd161, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd15f));
        EXPECT(0x8c, gbc.readMem(0xd160));
        // CB 8C 0174
        gbc.setState(0x391d, 0x4220, 0xa230, 0xd520, 0x2284, 0xede7, 0x0, 0x0);
        gbc.writeMem(0x391d, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xa2, gbc.a());
        EXPECT(0xd5, gbc.b());
        EXPECT(0x20, gbc.c());
        EXPECT(0x22, gbc.d());
        EXPECT(0x84, gbc.e());
        EXPECT(0xed, gbc.h());
        EXPECT(0xe7, gbc.l());
        EXPECT(0x4220, gbc.sp());
        EXPECT(0x391f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 0175
        gbc.setState(0x3325, 0x67fb, 0xca70, 0xc5d6, 0xe8f3, 0x1ebf, 0x1, 0x0);
        gbc.writeMem(0x3325, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xca, gbc.a());
        EXPECT(0xc5, gbc.b());
        EXPECT(0xd6, gbc.c());
        EXPECT(0xe8, gbc.d());
        EXPECT(0xf3, gbc.e());
        EXPECT(0x1c, gbc.h());
        EXPECT(0xbf, gbc.l());
        EXPECT(0x67fb, gbc.sp());
        EXPECT(0x3327, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 0176
        gbc.setState(0xb62d, 0xc241, 0x3bd0, 0x6865, 0xe808, 0x300a, 0x1, 0x1);
        gbc.writeMem(0xb62d, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x3b, gbc.a());
        EXPECT(0x68, gbc.b());
        EXPECT(0x65, gbc.c());
        EXPECT(0xe8, gbc.d());
        EXPECT(0x8, gbc.e());
        EXPECT(0x30, gbc.h());
        EXPECT(0xa, gbc.l());
        EXPECT(0xc241, gbc.sp());
        EXPECT(0xb62f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb62d));
        EXPECT(0x8c, gbc.readMem(0xb62e));
        // CB 8C 0177
        gbc.setState(0x4fd7, 0x7eb2, 0x6580, 0x3de7, 0x26d7, 0xa6d0, 0x0, 0x0);
        gbc.writeMem(0x4fd7, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x65, gbc.a());
        EXPECT(0x3d, gbc.b());
        EXPECT(0xe7, gbc.c());
        EXPECT(0x26, gbc.d());
        EXPECT(0xd7, gbc.e());
        EXPECT(0xa4, gbc.h());
        EXPECT(0xd0, gbc.l());
        EXPECT(0x7eb2, gbc.sp());
        EXPECT(0x4fd9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 0178
        gbc.setState(0x3266, 0x8868, 0xe0c0, 0x8d0b, 0x55f5, 0x5937, 0x0, 0x0);
        gbc.writeMem(0x3266, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xe0, gbc.a());
        EXPECT(0x8d, gbc.b());
        EXPECT(0xb, gbc.c());
        EXPECT(0x55, gbc.d());
        EXPECT(0xf5, gbc.e());
        EXPECT(0x59, gbc.h());
        EXPECT(0x37, gbc.l());
        EXPECT(0x8868, gbc.sp());
        EXPECT(0x3268, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 0179
        gbc.setState(0xd6e0, 0xd69c, 0x9a10, 0xd4a4, 0x2e08, 0x828d, 0x0, 0x1);
        gbc.writeMem(0xd6e0, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x9a, gbc.a());
        EXPECT(0xd4, gbc.b());
        EXPECT(0xa4, gbc.c());
        EXPECT(0x2e, gbc.d());
        EXPECT(0x8, gbc.e());
        EXPECT(0x80, gbc.h());
        EXPECT(0x8d, gbc.l());
        EXPECT(0xd69c, gbc.sp());
        EXPECT(0xd6e2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd6e0));
        EXPECT(0x8c, gbc.readMem(0xd6e1));
        // CB 8C 017A
        gbc.setState(0x9d, 0x92c1, 0x1220, 0xa62b, 0xe9d2, 0x823c, 0x1, 0x0);
        gbc.writeMem(0x9d, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x12, gbc.a());
        EXPECT(0xa6, gbc.b());
        EXPECT(0x2b, gbc.c());
        EXPECT(0xe9, gbc.d());
        EXPECT(0xd2, gbc.e());
        EXPECT(0x80, gbc.h());
        EXPECT(0x3c, gbc.l());
        EXPECT(0x92c1, gbc.sp());
        EXPECT(0x9f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 017B
        gbc.setState(0x15e8, 0xd930, 0x8950, 0xcbd, 0x8778, 0x319c, 0x0, 0x0);
        gbc.writeMem(0x15e8, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x89, gbc.a());
        EXPECT(0xc, gbc.b());
        EXPECT(0xbd, gbc.c());
        EXPECT(0x87, gbc.d());
        EXPECT(0x78, gbc.e());
        EXPECT(0x31, gbc.h());
        EXPECT(0x9c, gbc.l());
        EXPECT(0xd930, gbc.sp());
        EXPECT(0x15ea, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 017C
        gbc.setState(0x84b4, 0xe98f, 0x960, 0x9856, 0xded6, 0xc885, 0x0, 0x1);
        gbc.writeMem(0x84b4, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x9, gbc.a());
        EXPECT(0x98, gbc.b());
        EXPECT(0x56, gbc.c());
        EXPECT(0xde, gbc.d());
        EXPECT(0xd6, gbc.e());
        EXPECT(0xc8, gbc.h());
        EXPECT(0x85, gbc.l());
        EXPECT(0xe98f, gbc.sp());
        EXPECT(0x84b6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x84b4));
        EXPECT(0x8c, gbc.readMem(0x84b5));
        // CB 8C 017D
        gbc.setState(0x1fe4, 0xc7d6, 0xa280, 0xb0f6, 0x2281, 0x393f, 0x0, 0x0);
        gbc.writeMem(0x1fe4, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xa2, gbc.a());
        EXPECT(0xb0, gbc.b());
        EXPECT(0xf6, gbc.c());
        EXPECT(0x22, gbc.d());
        EXPECT(0x81, gbc.e());
        EXPECT(0x39, gbc.h());
        EXPECT(0x3f, gbc.l());
        EXPECT(0xc7d6, gbc.sp());
        EXPECT(0x1fe6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 017E
        gbc.setState(0xebc, 0x7550, 0x94c0, 0xf9fe, 0x8129, 0x6743, 0x1, 0x1);
        gbc.writeMem(0xebc, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x94, gbc.a());
        EXPECT(0xf9, gbc.b());
        EXPECT(0xfe, gbc.c());
        EXPECT(0x81, gbc.d());
        EXPECT(0x29, gbc.e());
        EXPECT(0x65, gbc.h());
        EXPECT(0x43, gbc.l());
        EXPECT(0x7550, gbc.sp());
        EXPECT(0xebe, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 017F
        gbc.setState(0x1d3c, 0x2732, 0x1e40, 0x4d5a, 0xa13d, 0xba7c, 0x1, 0x1);
        gbc.writeMem(0x1d3c, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x1e, gbc.a());
        EXPECT(0x4d, gbc.b());
        EXPECT(0x5a, gbc.c());
        EXPECT(0xa1, gbc.d());
        EXPECT(0x3d, gbc.e());
        EXPECT(0xb8, gbc.h());
        EXPECT(0x7c, gbc.l());
        EXPECT(0x2732, gbc.sp());
        EXPECT(0x1d3e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 0180
        gbc.setState(0xd2f7, 0xbdeb, 0x17f0, 0x192b, 0xf40f, 0x67f1, 0x1, 0x0);
        gbc.writeMem(0xd2f7, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x17, gbc.a());
        EXPECT(0x19, gbc.b());
        EXPECT(0x2b, gbc.c());
        EXPECT(0xf4, gbc.d());
        EXPECT(0xf, gbc.e());
        EXPECT(0x65, gbc.h());
        EXPECT(0xf1, gbc.l());
        EXPECT(0xbdeb, gbc.sp());
        EXPECT(0xd2f9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd2f7));
        EXPECT(0x8c, gbc.readMem(0xd2f8));
        // CB 8C 0181
        gbc.setState(0x618a, 0xf202, 0xb120, 0xd69e, 0x7ab3, 0xcd5e, 0x1, 0x1);
        gbc.writeMem(0x618a, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xb1, gbc.a());
        EXPECT(0xd6, gbc.b());
        EXPECT(0x9e, gbc.c());
        EXPECT(0x7a, gbc.d());
        EXPECT(0xb3, gbc.e());
        EXPECT(0xcd, gbc.h());
        EXPECT(0x5e, gbc.l());
        EXPECT(0xf202, gbc.sp());
        EXPECT(0x618c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 0182
        gbc.setState(0x4e8e, 0x9d2e, 0xf30, 0x9b4a, 0x63bd, 0xb250, 0x1, 0x0);
        gbc.writeMem(0x4e8e, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xf, gbc.a());
        EXPECT(0x9b, gbc.b());
        EXPECT(0x4a, gbc.c());
        EXPECT(0x63, gbc.d());
        EXPECT(0xbd, gbc.e());
        EXPECT(0xb0, gbc.h());
        EXPECT(0x50, gbc.l());
        EXPECT(0x9d2e, gbc.sp());
        EXPECT(0x4e90, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 0183
        gbc.setState(0x566c, 0x6263, 0xee00, 0xca19, 0xf8ad, 0x7aa, 0x1, 0x1);
        gbc.writeMem(0x566c, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xee, gbc.a());
        EXPECT(0xca, gbc.b());
        EXPECT(0x19, gbc.c());
        EXPECT(0xf8, gbc.d());
        EXPECT(0xad, gbc.e());
        EXPECT(0x5, gbc.h());
        EXPECT(0xaa, gbc.l());
        EXPECT(0x6263, gbc.sp());
        EXPECT(0x566e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 0184
        gbc.setState(0x6704, 0xc5a5, 0x8f10, 0xf46a, 0x689d, 0x9d11, 0x0, 0x1);
        gbc.writeMem(0x6704, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x8f, gbc.a());
        EXPECT(0xf4, gbc.b());
        EXPECT(0x6a, gbc.c());
        EXPECT(0x68, gbc.d());
        EXPECT(0x9d, gbc.e());
        EXPECT(0x9d, gbc.h());
        EXPECT(0x11, gbc.l());
        EXPECT(0xc5a5, gbc.sp());
        EXPECT(0x6706, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 0185
        gbc.setState(0x72e6, 0x1fe2, 0x91b0, 0x916e, 0x3a2, 0xedcc, 0x1, 0x1);
        gbc.writeMem(0x72e6, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x91, gbc.a());
        EXPECT(0x91, gbc.b());
        EXPECT(0x6e, gbc.c());
        EXPECT(0x3, gbc.d());
        EXPECT(0xa2, gbc.e());
        EXPECT(0xed, gbc.h());
        EXPECT(0xcc, gbc.l());
        EXPECT(0x1fe2, gbc.sp());
        EXPECT(0x72e8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 0186
        gbc.setState(0xaa5f, 0x89b0, 0x4050, 0xccd7, 0x6f52, 0xcb72, 0x0, 0x0);
        gbc.writeMem(0xaa5f, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x40, gbc.a());
        EXPECT(0xcc, gbc.b());
        EXPECT(0xd7, gbc.c());
        EXPECT(0x6f, gbc.d());
        EXPECT(0x52, gbc.e());
        EXPECT(0xc9, gbc.h());
        EXPECT(0x72, gbc.l());
        EXPECT(0x89b0, gbc.sp());
        EXPECT(0xaa61, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaa5f));
        EXPECT(0x8c, gbc.readMem(0xaa60));
        // CB 8C 0187
        gbc.setState(0x4b09, 0x133b, 0xf860, 0xa4ba, 0xc04a, 0x441b, 0x0, 0x0);
        gbc.writeMem(0x4b09, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xf8, gbc.a());
        EXPECT(0xa4, gbc.b());
        EXPECT(0xba, gbc.c());
        EXPECT(0xc0, gbc.d());
        EXPECT(0x4a, gbc.e());
        EXPECT(0x44, gbc.h());
        EXPECT(0x1b, gbc.l());
        EXPECT(0x133b, gbc.sp());
        EXPECT(0x4b0b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 0188
        gbc.setState(0xb2b0, 0xb857, 0xe320, 0x480, 0xf660, 0x2ab7, 0x1, 0x0);
        gbc.writeMem(0xb2b0, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xe3, gbc.a());
        EXPECT(0x4, gbc.b());
        EXPECT(0x80, gbc.c());
        EXPECT(0xf6, gbc.d());
        EXPECT(0x60, gbc.e());
        EXPECT(0x28, gbc.h());
        EXPECT(0xb7, gbc.l());
        EXPECT(0xb857, gbc.sp());
        EXPECT(0xb2b2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb2b0));
        EXPECT(0x8c, gbc.readMem(0xb2b1));
        // CB 8C 0189
        gbc.setState(0xabbb, 0xda68, 0xcd40, 0x6c81, 0xf7d9, 0x655b, 0x0, 0x0);
        gbc.writeMem(0xabbb, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xcd, gbc.a());
        EXPECT(0x6c, gbc.b());
        EXPECT(0x81, gbc.c());
        EXPECT(0xf7, gbc.d());
        EXPECT(0xd9, gbc.e());
        EXPECT(0x65, gbc.h());
        EXPECT(0x5b, gbc.l());
        EXPECT(0xda68, gbc.sp());
        EXPECT(0xabbd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xabbb));
        EXPECT(0x8c, gbc.readMem(0xabbc));
        // CB 8C 018A
        gbc.setState(0xdf2b, 0x4219, 0xff50, 0xaae8, 0x6714, 0xc4d0, 0x1, 0x0);
        gbc.writeMem(0xdf2b, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xff, gbc.a());
        EXPECT(0xaa, gbc.b());
        EXPECT(0xe8, gbc.c());
        EXPECT(0x67, gbc.d());
        EXPECT(0x14, gbc.e());
        EXPECT(0xc4, gbc.h());
        EXPECT(0xd0, gbc.l());
        EXPECT(0x4219, gbc.sp());
        EXPECT(0xdf2d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdf2b));
        EXPECT(0x8c, gbc.readMem(0xdf2c));
        // CB 8C 018B
        gbc.setState(0x5fd9, 0x319, 0x3990, 0xd6b6, 0x1f47, 0xf40e, 0x0, 0x1);
        gbc.writeMem(0x5fd9, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x39, gbc.a());
        EXPECT(0xd6, gbc.b());
        EXPECT(0xb6, gbc.c());
        EXPECT(0x1f, gbc.d());
        EXPECT(0x47, gbc.e());
        EXPECT(0xf4, gbc.h());
        EXPECT(0xe, gbc.l());
        EXPECT(0x319, gbc.sp());
        EXPECT(0x5fdb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 018C
        gbc.setState(0xe872, 0xcd1e, 0x6bd0, 0x69ef, 0x8f5c, 0x6cfe, 0x1, 0x0);
        gbc.writeMem(0xe872, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x6b, gbc.a());
        EXPECT(0x69, gbc.b());
        EXPECT(0xef, gbc.c());
        EXPECT(0x8f, gbc.d());
        EXPECT(0x5c, gbc.e());
        EXPECT(0x6c, gbc.h());
        EXPECT(0xfe, gbc.l());
        EXPECT(0xcd1e, gbc.sp());
        EXPECT(0xe874, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe872));
        EXPECT(0x8c, gbc.readMem(0xe873));
        // CB 8C 018D
        gbc.setState(0x3bdb, 0x2f5e, 0x6d10, 0x2a8a, 0xa0f3, 0x617d, 0x1, 0x1);
        gbc.writeMem(0x3bdb, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x6d, gbc.a());
        EXPECT(0x2a, gbc.b());
        EXPECT(0x8a, gbc.c());
        EXPECT(0xa0, gbc.d());
        EXPECT(0xf3, gbc.e());
        EXPECT(0x61, gbc.h());
        EXPECT(0x7d, gbc.l());
        EXPECT(0x2f5e, gbc.sp());
        EXPECT(0x3bdd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 018E
        gbc.setState(0x3e09, 0xb944, 0x8100, 0x8923, 0xd934, 0xf630, 0x0, 0x0);
        gbc.writeMem(0x3e09, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x81, gbc.a());
        EXPECT(0x89, gbc.b());
        EXPECT(0x23, gbc.c());
        EXPECT(0xd9, gbc.d());
        EXPECT(0x34, gbc.e());
        EXPECT(0xf4, gbc.h());
        EXPECT(0x30, gbc.l());
        EXPECT(0xb944, gbc.sp());
        EXPECT(0x3e0b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 018F
        gbc.setState(0xefe2, 0x3e7c, 0x4070, 0xbef4, 0xecf6, 0x6cc4, 0x0, 0x0);
        gbc.writeMem(0xefe2, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x40, gbc.a());
        EXPECT(0xbe, gbc.b());
        EXPECT(0xf4, gbc.c());
        EXPECT(0xec, gbc.d());
        EXPECT(0xf6, gbc.e());
        EXPECT(0x6c, gbc.h());
        EXPECT(0xc4, gbc.l());
        EXPECT(0x3e7c, gbc.sp());
        EXPECT(0xefe4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xefe2));
        EXPECT(0x8c, gbc.readMem(0xefe3));
        // CB 8C 0190
        gbc.setState(0xaae7, 0xa9f1, 0x4250, 0xb7ae, 0xb18b, 0xbddd, 0x1, 0x1);
        gbc.writeMem(0xaae7, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x42, gbc.a());
        EXPECT(0xb7, gbc.b());
        EXPECT(0xae, gbc.c());
        EXPECT(0xb1, gbc.d());
        EXPECT(0x8b, gbc.e());
        EXPECT(0xbd, gbc.h());
        EXPECT(0xdd, gbc.l());
        EXPECT(0xa9f1, gbc.sp());
        EXPECT(0xaae9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaae7));
        EXPECT(0x8c, gbc.readMem(0xaae8));
        // CB 8C 0191
        gbc.setState(0x81c6, 0x2d3f, 0xd790, 0x84f1, 0x6042, 0xcb7c, 0x0, 0x0);
        gbc.writeMem(0x81c6, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xd7, gbc.a());
        EXPECT(0x84, gbc.b());
        EXPECT(0xf1, gbc.c());
        EXPECT(0x60, gbc.d());
        EXPECT(0x42, gbc.e());
        EXPECT(0xc9, gbc.h());
        EXPECT(0x7c, gbc.l());
        EXPECT(0x2d3f, gbc.sp());
        EXPECT(0x81c8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x81c6));
        EXPECT(0x8c, gbc.readMem(0x81c7));
        // CB 8C 0192
        gbc.setState(0x660c, 0x69cb, 0x7f40, 0xa67e, 0x6dad, 0x3565, 0x1, 0x0);
        gbc.writeMem(0x660c, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x7f, gbc.a());
        EXPECT(0xa6, gbc.b());
        EXPECT(0x7e, gbc.c());
        EXPECT(0x6d, gbc.d());
        EXPECT(0xad, gbc.e());
        EXPECT(0x35, gbc.h());
        EXPECT(0x65, gbc.l());
        EXPECT(0x69cb, gbc.sp());
        EXPECT(0x660e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 0193
        gbc.setState(0xd29b, 0xa502, 0x9a00, 0x1094, 0xa6b5, 0x4ac3, 0x0, 0x0);
        gbc.writeMem(0xd29b, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x9a, gbc.a());
        EXPECT(0x10, gbc.b());
        EXPECT(0x94, gbc.c());
        EXPECT(0xa6, gbc.d());
        EXPECT(0xb5, gbc.e());
        EXPECT(0x48, gbc.h());
        EXPECT(0xc3, gbc.l());
        EXPECT(0xa502, gbc.sp());
        EXPECT(0xd29d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd29b));
        EXPECT(0x8c, gbc.readMem(0xd29c));
        // CB 8C 0194
        gbc.setState(0x4333, 0x888, 0x9350, 0x7275, 0x9289, 0x19b4, 0x1, 0x0);
        gbc.writeMem(0x4333, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x93, gbc.a());
        EXPECT(0x72, gbc.b());
        EXPECT(0x75, gbc.c());
        EXPECT(0x92, gbc.d());
        EXPECT(0x89, gbc.e());
        EXPECT(0x19, gbc.h());
        EXPECT(0xb4, gbc.l());
        EXPECT(0x888, gbc.sp());
        EXPECT(0x4335, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 0195
        gbc.setState(0xcdbe, 0xf249, 0x3120, 0x46a, 0x70e4, 0x30b7, 0x1, 0x1);
        gbc.writeMem(0xcdbe, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x31, gbc.a());
        EXPECT(0x4, gbc.b());
        EXPECT(0x6a, gbc.c());
        EXPECT(0x70, gbc.d());
        EXPECT(0xe4, gbc.e());
        EXPECT(0x30, gbc.h());
        EXPECT(0xb7, gbc.l());
        EXPECT(0xf249, gbc.sp());
        EXPECT(0xcdc0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcdbe));
        EXPECT(0x8c, gbc.readMem(0xcdbf));
        // CB 8C 0196
        gbc.setState(0x13ca, 0x212a, 0x6b0, 0x3b31, 0x1c12, 0x8ce1, 0x1, 0x1);
        gbc.writeMem(0x13ca, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x6, gbc.a());
        EXPECT(0x3b, gbc.b());
        EXPECT(0x31, gbc.c());
        EXPECT(0x1c, gbc.d());
        EXPECT(0x12, gbc.e());
        EXPECT(0x8c, gbc.h());
        EXPECT(0xe1, gbc.l());
        EXPECT(0x212a, gbc.sp());
        EXPECT(0x13cc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 0197
        gbc.setState(0xc795, 0xb272, 0x51e0, 0xa755, 0x2c1f, 0xbab9, 0x1, 0x0);
        gbc.writeMem(0xc795, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x51, gbc.a());
        EXPECT(0xa7, gbc.b());
        EXPECT(0x55, gbc.c());
        EXPECT(0x2c, gbc.d());
        EXPECT(0x1f, gbc.e());
        EXPECT(0xb8, gbc.h());
        EXPECT(0xb9, gbc.l());
        EXPECT(0xb272, gbc.sp());
        EXPECT(0xc797, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc795));
        EXPECT(0x8c, gbc.readMem(0xc796));
        // CB 8C 0198
        gbc.setState(0x1cd0, 0x88c4, 0x2ff0, 0xb02d, 0xa72, 0x657c, 0x0, 0x1);
        gbc.writeMem(0x1cd0, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x2f, gbc.a());
        EXPECT(0xb0, gbc.b());
        EXPECT(0x2d, gbc.c());
        EXPECT(0xa, gbc.d());
        EXPECT(0x72, gbc.e());
        EXPECT(0x65, gbc.h());
        EXPECT(0x7c, gbc.l());
        EXPECT(0x88c4, gbc.sp());
        EXPECT(0x1cd2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 0199
        gbc.setState(0xe48e, 0xcf96, 0x1820, 0xc09b, 0xa6df, 0x2a8d, 0x0, 0x1);
        gbc.writeMem(0xe48e, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x18, gbc.a());
        EXPECT(0xc0, gbc.b());
        EXPECT(0x9b, gbc.c());
        EXPECT(0xa6, gbc.d());
        EXPECT(0xdf, gbc.e());
        EXPECT(0x28, gbc.h());
        EXPECT(0x8d, gbc.l());
        EXPECT(0xcf96, gbc.sp());
        EXPECT(0xe490, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe48e));
        EXPECT(0x8c, gbc.readMem(0xe48f));
        // CB 8C 019A
        gbc.setState(0x1407, 0x4bdd, 0x2dc0, 0xfcef, 0xa15d, 0x1fed, 0x0, 0x0);
        gbc.writeMem(0x1407, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x2d, gbc.a());
        EXPECT(0xfc, gbc.b());
        EXPECT(0xef, gbc.c());
        EXPECT(0xa1, gbc.d());
        EXPECT(0x5d, gbc.e());
        EXPECT(0x1d, gbc.h());
        EXPECT(0xed, gbc.l());
        EXPECT(0x4bdd, gbc.sp());
        EXPECT(0x1409, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 019B
        gbc.setState(0x9daf, 0xa72b, 0xdb10, 0x696c, 0xf221, 0xc8c0, 0x0, 0x0);
        gbc.writeMem(0x9daf, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xdb, gbc.a());
        EXPECT(0x69, gbc.b());
        EXPECT(0x6c, gbc.c());
        EXPECT(0xf2, gbc.d());
        EXPECT(0x21, gbc.e());
        EXPECT(0xc8, gbc.h());
        EXPECT(0xc0, gbc.l());
        EXPECT(0xa72b, gbc.sp());
        EXPECT(0x9db1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9daf));
        EXPECT(0x8c, gbc.readMem(0x9db0));
        // CB 8C 019C
        gbc.setState(0x5270, 0x1bc7, 0xff60, 0xe36a, 0x5f2, 0xf198, 0x1, 0x1);
        gbc.writeMem(0x5270, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xff, gbc.a());
        EXPECT(0xe3, gbc.b());
        EXPECT(0x6a, gbc.c());
        EXPECT(0x5, gbc.d());
        EXPECT(0xf2, gbc.e());
        EXPECT(0xf1, gbc.h());
        EXPECT(0x98, gbc.l());
        EXPECT(0x1bc7, gbc.sp());
        EXPECT(0x5272, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 019D
        gbc.setState(0x4f9f, 0x6e4c, 0x4d50, 0xad9, 0x84b2, 0x25a, 0x1, 0x1);
        gbc.writeMem(0x4f9f, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x4d, gbc.a());
        EXPECT(0xa, gbc.b());
        EXPECT(0xd9, gbc.c());
        EXPECT(0x84, gbc.d());
        EXPECT(0xb2, gbc.e());
        EXPECT(0x0, gbc.h());
        EXPECT(0x5a, gbc.l());
        EXPECT(0x6e4c, gbc.sp());
        EXPECT(0x4fa1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 019E
        gbc.setState(0x6505, 0xa8f0, 0x5620, 0x371c, 0x8c35, 0xd46f, 0x0, 0x0);
        gbc.writeMem(0x6505, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x56, gbc.a());
        EXPECT(0x37, gbc.b());
        EXPECT(0x1c, gbc.c());
        EXPECT(0x8c, gbc.d());
        EXPECT(0x35, gbc.e());
        EXPECT(0xd4, gbc.h());
        EXPECT(0x6f, gbc.l());
        EXPECT(0xa8f0, gbc.sp());
        EXPECT(0x6507, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 019F
        gbc.setState(0xbba9, 0xd59d, 0xd1c0, 0x6925, 0x236f, 0x2dd5, 0x1, 0x0);
        gbc.writeMem(0xbba9, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xd1, gbc.a());
        EXPECT(0x69, gbc.b());
        EXPECT(0x25, gbc.c());
        EXPECT(0x23, gbc.d());
        EXPECT(0x6f, gbc.e());
        EXPECT(0x2d, gbc.h());
        EXPECT(0xd5, gbc.l());
        EXPECT(0xd59d, gbc.sp());
        EXPECT(0xbbab, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbba9));
        EXPECT(0x8c, gbc.readMem(0xbbaa));
        // CB 8C 01A0
        gbc.setState(0x772c, 0xf53, 0xe150, 0x3d0f, 0x4cee, 0x331a, 0x0, 0x0);
        gbc.writeMem(0x772c, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xe1, gbc.a());
        EXPECT(0x3d, gbc.b());
        EXPECT(0xf, gbc.c());
        EXPECT(0x4c, gbc.d());
        EXPECT(0xee, gbc.e());
        EXPECT(0x31, gbc.h());
        EXPECT(0x1a, gbc.l());
        EXPECT(0xf53, gbc.sp());
        EXPECT(0x772e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 01A1
        gbc.setState(0x4077, 0x760c, 0x8f80, 0x2a7f, 0x42a6, 0x6ef9, 0x1, 0x1);
        gbc.writeMem(0x4077, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x8f, gbc.a());
        EXPECT(0x2a, gbc.b());
        EXPECT(0x7f, gbc.c());
        EXPECT(0x42, gbc.d());
        EXPECT(0xa6, gbc.e());
        EXPECT(0x6c, gbc.h());
        EXPECT(0xf9, gbc.l());
        EXPECT(0x760c, gbc.sp());
        EXPECT(0x4079, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 01A2
        gbc.setState(0x4bef, 0x6cd4, 0x2d0, 0xbdf6, 0x1e29, 0x4d64, 0x0, 0x1);
        gbc.writeMem(0x4bef, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x2, gbc.a());
        EXPECT(0xbd, gbc.b());
        EXPECT(0xf6, gbc.c());
        EXPECT(0x1e, gbc.d());
        EXPECT(0x29, gbc.e());
        EXPECT(0x4d, gbc.h());
        EXPECT(0x64, gbc.l());
        EXPECT(0x6cd4, gbc.sp());
        EXPECT(0x4bf1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 01A3
        gbc.setState(0x46bf, 0x633f, 0x9110, 0x8b27, 0x9c9c, 0x2524, 0x0, 0x0);
        gbc.writeMem(0x46bf, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x91, gbc.a());
        EXPECT(0x8b, gbc.b());
        EXPECT(0x27, gbc.c());
        EXPECT(0x9c, gbc.d());
        EXPECT(0x9c, gbc.e());
        EXPECT(0x25, gbc.h());
        EXPECT(0x24, gbc.l());
        EXPECT(0x633f, gbc.sp());
        EXPECT(0x46c1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 01A4
        gbc.setState(0x3299, 0xc534, 0xe400, 0xe31d, 0x698d, 0x23e7, 0x0, 0x1);
        gbc.writeMem(0x3299, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xe4, gbc.a());
        EXPECT(0xe3, gbc.b());
        EXPECT(0x1d, gbc.c());
        EXPECT(0x69, gbc.d());
        EXPECT(0x8d, gbc.e());
        EXPECT(0x21, gbc.h());
        EXPECT(0xe7, gbc.l());
        EXPECT(0xc534, gbc.sp());
        EXPECT(0x329b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 01A5
        gbc.setState(0x9e3b, 0x3d9b, 0xb310, 0x2223, 0x12bc, 0x9d95, 0x0, 0x0);
        gbc.writeMem(0x9e3b, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xb3, gbc.a());
        EXPECT(0x22, gbc.b());
        EXPECT(0x23, gbc.c());
        EXPECT(0x12, gbc.d());
        EXPECT(0xbc, gbc.e());
        EXPECT(0x9d, gbc.h());
        EXPECT(0x95, gbc.l());
        EXPECT(0x3d9b, gbc.sp());
        EXPECT(0x9e3d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9e3b));
        EXPECT(0x8c, gbc.readMem(0x9e3c));
        // CB 8C 01A6
        gbc.setState(0x40ec, 0x1b19, 0xaae0, 0x6c55, 0xabd8, 0x8620, 0x0, 0x1);
        gbc.writeMem(0x40ec, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xaa, gbc.a());
        EXPECT(0x6c, gbc.b());
        EXPECT(0x55, gbc.c());
        EXPECT(0xab, gbc.d());
        EXPECT(0xd8, gbc.e());
        EXPECT(0x84, gbc.h());
        EXPECT(0x20, gbc.l());
        EXPECT(0x1b19, gbc.sp());
        EXPECT(0x40ee, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 01A7
        gbc.setState(0x82a0, 0x108f, 0x3b20, 0x3d68, 0x3060, 0xe3a2, 0x0, 0x1);
        gbc.writeMem(0x82a0, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x3b, gbc.a());
        EXPECT(0x3d, gbc.b());
        EXPECT(0x68, gbc.c());
        EXPECT(0x30, gbc.d());
        EXPECT(0x60, gbc.e());
        EXPECT(0xe1, gbc.h());
        EXPECT(0xa2, gbc.l());
        EXPECT(0x108f, gbc.sp());
        EXPECT(0x82a2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x82a0));
        EXPECT(0x8c, gbc.readMem(0x82a1));
        // CB 8C 01A8
        gbc.setState(0x4fd5, 0xad4f, 0x3230, 0x35ab, 0x6a70, 0x2e53, 0x1, 0x1);
        gbc.writeMem(0x4fd5, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x32, gbc.a());
        EXPECT(0x35, gbc.b());
        EXPECT(0xab, gbc.c());
        EXPECT(0x6a, gbc.d());
        EXPECT(0x70, gbc.e());
        EXPECT(0x2c, gbc.h());
        EXPECT(0x53, gbc.l());
        EXPECT(0xad4f, gbc.sp());
        EXPECT(0x4fd7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 01A9
        gbc.setState(0x1adf, 0xb3df, 0x190, 0xd6d5, 0xcb49, 0x94b6, 0x0, 0x1);
        gbc.writeMem(0x1adf, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x1, gbc.a());
        EXPECT(0xd6, gbc.b());
        EXPECT(0xd5, gbc.c());
        EXPECT(0xcb, gbc.d());
        EXPECT(0x49, gbc.e());
        EXPECT(0x94, gbc.h());
        EXPECT(0xb6, gbc.l());
        EXPECT(0xb3df, gbc.sp());
        EXPECT(0x1ae1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 01AA
        gbc.setState(0x1641, 0xcb6e, 0xd5e0, 0x91fa, 0x71e4, 0x5d8d, 0x0, 0x1);
        gbc.writeMem(0x1641, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xd5, gbc.a());
        EXPECT(0x91, gbc.b());
        EXPECT(0xfa, gbc.c());
        EXPECT(0x71, gbc.d());
        EXPECT(0xe4, gbc.e());
        EXPECT(0x5d, gbc.h());
        EXPECT(0x8d, gbc.l());
        EXPECT(0xcb6e, gbc.sp());
        EXPECT(0x1643, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 01AB
        gbc.setState(0x787e, 0x946f, 0x1b0, 0x2415, 0xc40a, 0xfdfb, 0x0, 0x0);
        gbc.writeMem(0x787e, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x1, gbc.a());
        EXPECT(0x24, gbc.b());
        EXPECT(0x15, gbc.c());
        EXPECT(0xc4, gbc.d());
        EXPECT(0xa, gbc.e());
        EXPECT(0xfd, gbc.h());
        EXPECT(0xfb, gbc.l());
        EXPECT(0x946f, gbc.sp());
        EXPECT(0x7880, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 01AC
        gbc.setState(0x4ad5, 0x1032, 0xfb90, 0xaa83, 0x7e90, 0x72e, 0x1, 0x0);
        gbc.writeMem(0x4ad5, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xfb, gbc.a());
        EXPECT(0xaa, gbc.b());
        EXPECT(0x83, gbc.c());
        EXPECT(0x7e, gbc.d());
        EXPECT(0x90, gbc.e());
        EXPECT(0x5, gbc.h());
        EXPECT(0x2e, gbc.l());
        EXPECT(0x1032, gbc.sp());
        EXPECT(0x4ad7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 01AD
        gbc.setState(0x1664, 0x4877, 0x9ea0, 0x5a58, 0x1725, 0x905f, 0x1, 0x0);
        gbc.writeMem(0x1664, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x9e, gbc.a());
        EXPECT(0x5a, gbc.b());
        EXPECT(0x58, gbc.c());
        EXPECT(0x17, gbc.d());
        EXPECT(0x25, gbc.e());
        EXPECT(0x90, gbc.h());
        EXPECT(0x5f, gbc.l());
        EXPECT(0x4877, gbc.sp());
        EXPECT(0x1666, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 01AF
        gbc.setState(0x30ff, 0xaf2b, 0x5420, 0xce62, 0x87e3, 0xc367, 0x0, 0x1);
        gbc.writeMem(0x30ff, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x54, gbc.a());
        EXPECT(0xce, gbc.b());
        EXPECT(0x62, gbc.c());
        EXPECT(0x87, gbc.d());
        EXPECT(0xe3, gbc.e());
        EXPECT(0xc1, gbc.h());
        EXPECT(0x67, gbc.l());
        EXPECT(0xaf2b, gbc.sp());
        EXPECT(0x3101, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 01B0
        gbc.setState(0xe012, 0xa42, 0xd4e0, 0x9c7, 0xa3d, 0xba4e, 0x1, 0x0);
        gbc.writeMem(0xe012, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xd4, gbc.a());
        EXPECT(0x9, gbc.b());
        EXPECT(0xc7, gbc.c());
        EXPECT(0xa, gbc.d());
        EXPECT(0x3d, gbc.e());
        EXPECT(0xb8, gbc.h());
        EXPECT(0x4e, gbc.l());
        EXPECT(0xa42, gbc.sp());
        EXPECT(0xe014, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe012));
        EXPECT(0x8c, gbc.readMem(0xe013));
        // CB 8C 01B1
        gbc.setState(0x22ac, 0x4796, 0x8060, 0x329d, 0xb135, 0xd59a, 0x1, 0x1);
        gbc.writeMem(0x22ac, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x80, gbc.a());
        EXPECT(0x32, gbc.b());
        EXPECT(0x9d, gbc.c());
        EXPECT(0xb1, gbc.d());
        EXPECT(0x35, gbc.e());
        EXPECT(0xd5, gbc.h());
        EXPECT(0x9a, gbc.l());
        EXPECT(0x4796, gbc.sp());
        EXPECT(0x22ae, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 01B3
        gbc.setState(0xa213, 0x82fa, 0x70d0, 0x9fed, 0xeba0, 0x47c4, 0x1, 0x0);
        gbc.writeMem(0xa213, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x70, gbc.a());
        EXPECT(0x9f, gbc.b());
        EXPECT(0xed, gbc.c());
        EXPECT(0xeb, gbc.d());
        EXPECT(0xa0, gbc.e());
        EXPECT(0x45, gbc.h());
        EXPECT(0xc4, gbc.l());
        EXPECT(0x82fa, gbc.sp());
        EXPECT(0xa215, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa213));
        EXPECT(0x8c, gbc.readMem(0xa214));
        // CB 8C 01B4
        gbc.setState(0x762, 0xbcd9, 0x780, 0x98e1, 0xe299, 0xc49a, 0x0, 0x0);
        gbc.writeMem(0x762, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x7, gbc.a());
        EXPECT(0x98, gbc.b());
        EXPECT(0xe1, gbc.c());
        EXPECT(0xe2, gbc.d());
        EXPECT(0x99, gbc.e());
        EXPECT(0xc4, gbc.h());
        EXPECT(0x9a, gbc.l());
        EXPECT(0xbcd9, gbc.sp());
        EXPECT(0x764, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 01B5
        gbc.setState(0x8b73, 0x1b68, 0x83b0, 0xb05d, 0x7d85, 0xb39a, 0x1, 0x1);
        gbc.writeMem(0x8b73, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x83, gbc.a());
        EXPECT(0xb0, gbc.b());
        EXPECT(0x5d, gbc.c());
        EXPECT(0x7d, gbc.d());
        EXPECT(0x85, gbc.e());
        EXPECT(0xb1, gbc.h());
        EXPECT(0x9a, gbc.l());
        EXPECT(0x1b68, gbc.sp());
        EXPECT(0x8b75, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8b73));
        EXPECT(0x8c, gbc.readMem(0x8b74));
        // CB 8C 01B6
        gbc.setState(0x33f0, 0x4c28, 0x57b0, 0x9958, 0x5ee7, 0x32c2, 0x1, 0x1);
        gbc.writeMem(0x33f0, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x57, gbc.a());
        EXPECT(0x99, gbc.b());
        EXPECT(0x58, gbc.c());
        EXPECT(0x5e, gbc.d());
        EXPECT(0xe7, gbc.e());
        EXPECT(0x30, gbc.h());
        EXPECT(0xc2, gbc.l());
        EXPECT(0x4c28, gbc.sp());
        EXPECT(0x33f2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 01B7
        gbc.setState(0xdf5, 0x16d2, 0xdad0, 0x1f11, 0xe717, 0xf5b7, 0x0, 0x1);
        gbc.writeMem(0xdf5, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xda, gbc.a());
        EXPECT(0x1f, gbc.b());
        EXPECT(0x11, gbc.c());
        EXPECT(0xe7, gbc.d());
        EXPECT(0x17, gbc.e());
        EXPECT(0xf5, gbc.h());
        EXPECT(0xb7, gbc.l());
        EXPECT(0x16d2, gbc.sp());
        EXPECT(0xdf7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 01B8
        gbc.setState(0x5293, 0xd882, 0x36e0, 0xca6a, 0x8364, 0xaa5, 0x0, 0x0);
        gbc.writeMem(0x5293, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x36, gbc.a());
        EXPECT(0xca, gbc.b());
        EXPECT(0x6a, gbc.c());
        EXPECT(0x83, gbc.d());
        EXPECT(0x64, gbc.e());
        EXPECT(0x8, gbc.h());
        EXPECT(0xa5, gbc.l());
        EXPECT(0xd882, gbc.sp());
        EXPECT(0x5295, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 01B9
        gbc.setState(0x50ad, 0xf8d9, 0xe250, 0x3b2e, 0x6053, 0x41fa, 0x0, 0x0);
        gbc.writeMem(0x50ad, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xe2, gbc.a());
        EXPECT(0x3b, gbc.b());
        EXPECT(0x2e, gbc.c());
        EXPECT(0x60, gbc.d());
        EXPECT(0x53, gbc.e());
        EXPECT(0x41, gbc.h());
        EXPECT(0xfa, gbc.l());
        EXPECT(0xf8d9, gbc.sp());
        EXPECT(0x50af, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 01BA
        gbc.setState(0xc4bc, 0xc578, 0x31d0, 0xd0ed, 0xf383, 0x7e1c, 0x1, 0x0);
        gbc.writeMem(0xc4bc, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x31, gbc.a());
        EXPECT(0xd0, gbc.b());
        EXPECT(0xed, gbc.c());
        EXPECT(0xf3, gbc.d());
        EXPECT(0x83, gbc.e());
        EXPECT(0x7c, gbc.h());
        EXPECT(0x1c, gbc.l());
        EXPECT(0xc578, gbc.sp());
        EXPECT(0xc4be, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc4bc));
        EXPECT(0x8c, gbc.readMem(0xc4bd));
        // CB 8C 01BB
        gbc.setState(0x5dbc, 0xe320, 0xaab0, 0x5d9a, 0x4268, 0xdbb2, 0x0, 0x0);
        gbc.writeMem(0x5dbc, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xaa, gbc.a());
        EXPECT(0x5d, gbc.b());
        EXPECT(0x9a, gbc.c());
        EXPECT(0x42, gbc.d());
        EXPECT(0x68, gbc.e());
        EXPECT(0xd9, gbc.h());
        EXPECT(0xb2, gbc.l());
        EXPECT(0xe320, gbc.sp());
        EXPECT(0x5dbe, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 01BC
        gbc.setState(0x4d21, 0xe145, 0x98e0, 0xaf4e, 0xd1de, 0x6e68, 0x0, 0x0);
        gbc.writeMem(0x4d21, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x98, gbc.a());
        EXPECT(0xaf, gbc.b());
        EXPECT(0x4e, gbc.c());
        EXPECT(0xd1, gbc.d());
        EXPECT(0xde, gbc.e());
        EXPECT(0x6c, gbc.h());
        EXPECT(0x68, gbc.l());
        EXPECT(0xe145, gbc.sp());
        EXPECT(0x4d23, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 01BD
        gbc.setState(0xc6f4, 0xf5ec, 0x6700, 0x4dd8, 0xb6cb, 0xa653, 0x1, 0x1);
        gbc.writeMem(0xc6f4, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x67, gbc.a());
        EXPECT(0x4d, gbc.b());
        EXPECT(0xd8, gbc.c());
        EXPECT(0xb6, gbc.d());
        EXPECT(0xcb, gbc.e());
        EXPECT(0xa4, gbc.h());
        EXPECT(0x53, gbc.l());
        EXPECT(0xf5ec, gbc.sp());
        EXPECT(0xc6f6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc6f4));
        EXPECT(0x8c, gbc.readMem(0xc6f5));
        // CB 8C 01BE
        gbc.setState(0xc801, 0xd29f, 0xe0, 0x8eb0, 0x9245, 0xe0b1, 0x1, 0x1);
        gbc.writeMem(0xc801, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x8e, gbc.b());
        EXPECT(0xb0, gbc.c());
        EXPECT(0x92, gbc.d());
        EXPECT(0x45, gbc.e());
        EXPECT(0xe0, gbc.h());
        EXPECT(0xb1, gbc.l());
        EXPECT(0xd29f, gbc.sp());
        EXPECT(0xc803, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc801));
        EXPECT(0x8c, gbc.readMem(0xc802));
        // CB 8C 01BF
        gbc.setState(0x72c1, 0x87e9, 0x4e90, 0x9a60, 0x8b1, 0x4c40, 0x0, 0x1);
        gbc.writeMem(0x72c1, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x4e, gbc.a());
        EXPECT(0x9a, gbc.b());
        EXPECT(0x60, gbc.c());
        EXPECT(0x8, gbc.d());
        EXPECT(0xb1, gbc.e());
        EXPECT(0x4c, gbc.h());
        EXPECT(0x40, gbc.l());
        EXPECT(0x87e9, gbc.sp());
        EXPECT(0x72c3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 01C0
        gbc.setState(0x9e78, 0xe9a, 0x3220, 0x2a32, 0x1c7f, 0xe9c9, 0x1, 0x1);
        gbc.writeMem(0x9e78, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x32, gbc.a());
        EXPECT(0x2a, gbc.b());
        EXPECT(0x32, gbc.c());
        EXPECT(0x1c, gbc.d());
        EXPECT(0x7f, gbc.e());
        EXPECT(0xe9, gbc.h());
        EXPECT(0xc9, gbc.l());
        EXPECT(0xe9a, gbc.sp());
        EXPECT(0x9e7a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9e78));
        EXPECT(0x8c, gbc.readMem(0x9e79));
        // CB 8C 01C2
        gbc.setState(0xd93b, 0xdbc5, 0xb300, 0x6d01, 0x5a88, 0x701a, 0x0, 0x0);
        gbc.writeMem(0xd93b, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xb3, gbc.a());
        EXPECT(0x6d, gbc.b());
        EXPECT(0x1, gbc.c());
        EXPECT(0x5a, gbc.d());
        EXPECT(0x88, gbc.e());
        EXPECT(0x70, gbc.h());
        EXPECT(0x1a, gbc.l());
        EXPECT(0xdbc5, gbc.sp());
        EXPECT(0xd93d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd93b));
        EXPECT(0x8c, gbc.readMem(0xd93c));
        // CB 8C 01C3
        gbc.setState(0x2830, 0xcfe9, 0x2450, 0x51c6, 0xd065, 0x1d45, 0x1, 0x0);
        gbc.writeMem(0x2830, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x24, gbc.a());
        EXPECT(0x51, gbc.b());
        EXPECT(0xc6, gbc.c());
        EXPECT(0xd0, gbc.d());
        EXPECT(0x65, gbc.e());
        EXPECT(0x1d, gbc.h());
        EXPECT(0x45, gbc.l());
        EXPECT(0xcfe9, gbc.sp());
        EXPECT(0x2832, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 01C4
        gbc.setState(0xb596, 0x2ab3, 0xdda0, 0x9ed4, 0xbd78, 0x5b13, 0x0, 0x1);
        gbc.writeMem(0xb596, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xdd, gbc.a());
        EXPECT(0x9e, gbc.b());
        EXPECT(0xd4, gbc.c());
        EXPECT(0xbd, gbc.d());
        EXPECT(0x78, gbc.e());
        EXPECT(0x59, gbc.h());
        EXPECT(0x13, gbc.l());
        EXPECT(0x2ab3, gbc.sp());
        EXPECT(0xb598, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb596));
        EXPECT(0x8c, gbc.readMem(0xb597));
        // CB 8C 01C5
        gbc.setState(0x73a3, 0x4351, 0x5780, 0x4645, 0x834b, 0x73e2, 0x1, 0x0);
        gbc.writeMem(0x73a3, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x57, gbc.a());
        EXPECT(0x46, gbc.b());
        EXPECT(0x45, gbc.c());
        EXPECT(0x83, gbc.d());
        EXPECT(0x4b, gbc.e());
        EXPECT(0x71, gbc.h());
        EXPECT(0xe2, gbc.l());
        EXPECT(0x4351, gbc.sp());
        EXPECT(0x73a5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 01C6
        gbc.setState(0x9ff6, 0xe369, 0xeb40, 0xae74, 0x5f27, 0x895e, 0x1, 0x1);
        gbc.writeMem(0x9ff6, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xeb, gbc.a());
        EXPECT(0xae, gbc.b());
        EXPECT(0x74, gbc.c());
        EXPECT(0x5f, gbc.d());
        EXPECT(0x27, gbc.e());
        EXPECT(0x89, gbc.h());
        EXPECT(0x5e, gbc.l());
        EXPECT(0xe369, gbc.sp());
        EXPECT(0x9ff8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9ff6));
        EXPECT(0x8c, gbc.readMem(0x9ff7));
        // CB 8C 01C7
        gbc.setState(0xc92b, 0xc819, 0xe150, 0x5bfd, 0xc149, 0x7b36, 0x1, 0x1);
        gbc.writeMem(0xc92b, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xe1, gbc.a());
        EXPECT(0x5b, gbc.b());
        EXPECT(0xfd, gbc.c());
        EXPECT(0xc1, gbc.d());
        EXPECT(0x49, gbc.e());
        EXPECT(0x79, gbc.h());
        EXPECT(0x36, gbc.l());
        EXPECT(0xc819, gbc.sp());
        EXPECT(0xc92d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc92b));
        EXPECT(0x8c, gbc.readMem(0xc92c));
        // CB 8C 01C8
        gbc.setState(0x4bdc, 0xd241, 0x8820, 0xcdc2, 0x23b2, 0x97c, 0x1, 0x0);
        gbc.writeMem(0x4bdc, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x88, gbc.a());
        EXPECT(0xcd, gbc.b());
        EXPECT(0xc2, gbc.c());
        EXPECT(0x23, gbc.d());
        EXPECT(0xb2, gbc.e());
        EXPECT(0x9, gbc.h());
        EXPECT(0x7c, gbc.l());
        EXPECT(0xd241, gbc.sp());
        EXPECT(0x4bde, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 01C9
        gbc.setState(0xbc82, 0x9531, 0xca0, 0x9e62, 0x10d, 0xb3c1, 0x1, 0x1);
        gbc.writeMem(0xbc82, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xc, gbc.a());
        EXPECT(0x9e, gbc.b());
        EXPECT(0x62, gbc.c());
        EXPECT(0x1, gbc.d());
        EXPECT(0xd, gbc.e());
        EXPECT(0xb1, gbc.h());
        EXPECT(0xc1, gbc.l());
        EXPECT(0x9531, gbc.sp());
        EXPECT(0xbc84, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbc82));
        EXPECT(0x8c, gbc.readMem(0xbc83));
        // CB 8C 01CA
        gbc.setState(0x98ff, 0x7bd, 0xd660, 0x5fc5, 0x287d, 0xf0b5, 0x0, 0x1);
        gbc.writeMem(0x98ff, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xd6, gbc.a());
        EXPECT(0x5f, gbc.b());
        EXPECT(0xc5, gbc.c());
        EXPECT(0x28, gbc.d());
        EXPECT(0x7d, gbc.e());
        EXPECT(0xf0, gbc.h());
        EXPECT(0xb5, gbc.l());
        EXPECT(0x7bd, gbc.sp());
        EXPECT(0x9901, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x98ff));
        EXPECT(0x8c, gbc.readMem(0x9900));
        // CB 8C 01CB
        gbc.setState(0x8a2b, 0xc236, 0x1130, 0xd686, 0x7ab5, 0xe555, 0x1, 0x1);
        gbc.writeMem(0x8a2b, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x11, gbc.a());
        EXPECT(0xd6, gbc.b());
        EXPECT(0x86, gbc.c());
        EXPECT(0x7a, gbc.d());
        EXPECT(0xb5, gbc.e());
        EXPECT(0xe5, gbc.h());
        EXPECT(0x55, gbc.l());
        EXPECT(0xc236, gbc.sp());
        EXPECT(0x8a2d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8a2b));
        EXPECT(0x8c, gbc.readMem(0x8a2c));
        // CB 8C 01CC
        gbc.setState(0xa08e, 0x39bf, 0x9210, 0x2840, 0xfbb2, 0x2af7, 0x0, 0x1);
        gbc.writeMem(0xa08e, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x92, gbc.a());
        EXPECT(0x28, gbc.b());
        EXPECT(0x40, gbc.c());
        EXPECT(0xfb, gbc.d());
        EXPECT(0xb2, gbc.e());
        EXPECT(0x28, gbc.h());
        EXPECT(0xf7, gbc.l());
        EXPECT(0x39bf, gbc.sp());
        EXPECT(0xa090, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa08e));
        EXPECT(0x8c, gbc.readMem(0xa08f));
        // CB 8C 01CD
        gbc.setState(0x1d42, 0x44ef, 0x2730, 0xed79, 0x53f, 0xebe, 0x1, 0x1);
        gbc.writeMem(0x1d42, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x27, gbc.a());
        EXPECT(0xed, gbc.b());
        EXPECT(0x79, gbc.c());
        EXPECT(0x5, gbc.d());
        EXPECT(0x3f, gbc.e());
        EXPECT(0xc, gbc.h());
        EXPECT(0xbe, gbc.l());
        EXPECT(0x44ef, gbc.sp());
        EXPECT(0x1d44, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 01CF
        gbc.setState(0xaff6, 0xbd5c, 0x24d0, 0x5420, 0xec2, 0x6b06, 0x0, 0x0);
        gbc.writeMem(0xaff6, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x24, gbc.a());
        EXPECT(0x54, gbc.b());
        EXPECT(0x20, gbc.c());
        EXPECT(0xe, gbc.d());
        EXPECT(0xc2, gbc.e());
        EXPECT(0x69, gbc.h());
        EXPECT(0x6, gbc.l());
        EXPECT(0xbd5c, gbc.sp());
        EXPECT(0xaff8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaff6));
        EXPECT(0x8c, gbc.readMem(0xaff7));
        // CB 8C 01D0
        gbc.setState(0x3d99, 0x2b12, 0xfa00, 0x2ba7, 0xf13a, 0x8ed6, 0x1, 0x1);
        gbc.writeMem(0x3d99, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xfa, gbc.a());
        EXPECT(0x2b, gbc.b());
        EXPECT(0xa7, gbc.c());
        EXPECT(0xf1, gbc.d());
        EXPECT(0x3a, gbc.e());
        EXPECT(0x8c, gbc.h());
        EXPECT(0xd6, gbc.l());
        EXPECT(0x2b12, gbc.sp());
        EXPECT(0x3d9b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 01D1
        gbc.setState(0x590, 0xe766, 0xaf00, 0xad2d, 0xe173, 0x246c, 0x1, 0x0);
        gbc.writeMem(0x590, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xaf, gbc.a());
        EXPECT(0xad, gbc.b());
        EXPECT(0x2d, gbc.c());
        EXPECT(0xe1, gbc.d());
        EXPECT(0x73, gbc.e());
        EXPECT(0x24, gbc.h());
        EXPECT(0x6c, gbc.l());
        EXPECT(0xe766, gbc.sp());
        EXPECT(0x592, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 01D2
        gbc.setState(0xf6a, 0xc6d6, 0xb8e0, 0x7458, 0x4b37, 0x42ac, 0x1, 0x1);
        gbc.writeMem(0xf6a, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xb8, gbc.a());
        EXPECT(0x74, gbc.b());
        EXPECT(0x58, gbc.c());
        EXPECT(0x4b, gbc.d());
        EXPECT(0x37, gbc.e());
        EXPECT(0x40, gbc.h());
        EXPECT(0xac, gbc.l());
        EXPECT(0xc6d6, gbc.sp());
        EXPECT(0xf6c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 01D3
        gbc.setState(0xb5e4, 0x7bbf, 0xf650, 0x70ab, 0xa52c, 0x767b, 0x1, 0x1);
        gbc.writeMem(0xb5e4, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xf6, gbc.a());
        EXPECT(0x70, gbc.b());
        EXPECT(0xab, gbc.c());
        EXPECT(0xa5, gbc.d());
        EXPECT(0x2c, gbc.e());
        EXPECT(0x74, gbc.h());
        EXPECT(0x7b, gbc.l());
        EXPECT(0x7bbf, gbc.sp());
        EXPECT(0xb5e6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb5e4));
        EXPECT(0x8c, gbc.readMem(0xb5e5));
        // CB 8C 01D4
        gbc.setState(0x7705, 0xab2c, 0x6950, 0x151f, 0xb95f, 0xd88c, 0x0, 0x1);
        gbc.writeMem(0x7705, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x69, gbc.a());
        EXPECT(0x15, gbc.b());
        EXPECT(0x1f, gbc.c());
        EXPECT(0xb9, gbc.d());
        EXPECT(0x5f, gbc.e());
        EXPECT(0xd8, gbc.h());
        EXPECT(0x8c, gbc.l());
        EXPECT(0xab2c, gbc.sp());
        EXPECT(0x7707, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 01D5
        gbc.setState(0x3935, 0x5f4f, 0x18e0, 0x7382, 0xe3dd, 0xf544, 0x0, 0x0);
        gbc.writeMem(0x3935, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x18, gbc.a());
        EXPECT(0x73, gbc.b());
        EXPECT(0x82, gbc.c());
        EXPECT(0xe3, gbc.d());
        EXPECT(0xdd, gbc.e());
        EXPECT(0xf5, gbc.h());
        EXPECT(0x44, gbc.l());
        EXPECT(0x5f4f, gbc.sp());
        EXPECT(0x3937, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 01D6
        gbc.setState(0x7c80, 0x5e72, 0x6850, 0x9773, 0x8f92, 0xe756, 0x0, 0x1);
        gbc.writeMem(0x7c80, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x68, gbc.a());
        EXPECT(0x97, gbc.b());
        EXPECT(0x73, gbc.c());
        EXPECT(0x8f, gbc.d());
        EXPECT(0x92, gbc.e());
        EXPECT(0xe5, gbc.h());
        EXPECT(0x56, gbc.l());
        EXPECT(0x5e72, gbc.sp());
        EXPECT(0x7c82, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 01D7
        gbc.setState(0x4283, 0xd9f6, 0x37d0, 0x8e0d, 0xd517, 0x6a53, 0x1, 0x1);
        gbc.writeMem(0x4283, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x37, gbc.a());
        EXPECT(0x8e, gbc.b());
        EXPECT(0xd, gbc.c());
        EXPECT(0xd5, gbc.d());
        EXPECT(0x17, gbc.e());
        EXPECT(0x68, gbc.h());
        EXPECT(0x53, gbc.l());
        EXPECT(0xd9f6, gbc.sp());
        EXPECT(0x4285, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 01D8
        gbc.setState(0x1680, 0x8f4, 0x9740, 0x9753, 0xc1e8, 0x1094, 0x0, 0x1);
        gbc.writeMem(0x1680, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x97, gbc.a());
        EXPECT(0x97, gbc.b());
        EXPECT(0x53, gbc.c());
        EXPECT(0xc1, gbc.d());
        EXPECT(0xe8, gbc.e());
        EXPECT(0x10, gbc.h());
        EXPECT(0x94, gbc.l());
        EXPECT(0x8f4, gbc.sp());
        EXPECT(0x1682, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 01D9
        gbc.setState(0x13d0, 0x310b, 0x6d00, 0x43e7, 0xeded, 0x7e56, 0x1, 0x0);
        gbc.writeMem(0x13d0, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x6d, gbc.a());
        EXPECT(0x43, gbc.b());
        EXPECT(0xe7, gbc.c());
        EXPECT(0xed, gbc.d());
        EXPECT(0xed, gbc.e());
        EXPECT(0x7c, gbc.h());
        EXPECT(0x56, gbc.l());
        EXPECT(0x310b, gbc.sp());
        EXPECT(0x13d2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 01DA
        gbc.setState(0xa4f7, 0x3c6b, 0x21f0, 0x58c9, 0xf051, 0xf968, 0x1, 0x0);
        gbc.writeMem(0xa4f7, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x21, gbc.a());
        EXPECT(0x58, gbc.b());
        EXPECT(0xc9, gbc.c());
        EXPECT(0xf0, gbc.d());
        EXPECT(0x51, gbc.e());
        EXPECT(0xf9, gbc.h());
        EXPECT(0x68, gbc.l());
        EXPECT(0x3c6b, gbc.sp());
        EXPECT(0xa4f9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa4f7));
        EXPECT(0x8c, gbc.readMem(0xa4f8));
        // CB 8C 01DB
        gbc.setState(0x31ad, 0xb993, 0xe690, 0x8fd6, 0x296e, 0x9cf4, 0x1, 0x0);
        gbc.writeMem(0x31ad, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xe6, gbc.a());
        EXPECT(0x8f, gbc.b());
        EXPECT(0xd6, gbc.c());
        EXPECT(0x29, gbc.d());
        EXPECT(0x6e, gbc.e());
        EXPECT(0x9c, gbc.h());
        EXPECT(0xf4, gbc.l());
        EXPECT(0xb993, gbc.sp());
        EXPECT(0x31af, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 01DC
        gbc.setState(0xda99, 0xb987, 0xd720, 0xfae2, 0xbea1, 0x6280, 0x0, 0x0);
        gbc.writeMem(0xda99, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xd7, gbc.a());
        EXPECT(0xfa, gbc.b());
        EXPECT(0xe2, gbc.c());
        EXPECT(0xbe, gbc.d());
        EXPECT(0xa1, gbc.e());
        EXPECT(0x60, gbc.h());
        EXPECT(0x80, gbc.l());
        EXPECT(0xb987, gbc.sp());
        EXPECT(0xda9b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xda99));
        EXPECT(0x8c, gbc.readMem(0xda9a));
        // CB 8C 01DD
        gbc.setState(0xa94c, 0x6b58, 0x4950, 0x2ed4, 0x25c3, 0x91f4, 0x1, 0x1);
        gbc.writeMem(0xa94c, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x49, gbc.a());
        EXPECT(0x2e, gbc.b());
        EXPECT(0xd4, gbc.c());
        EXPECT(0x25, gbc.d());
        EXPECT(0xc3, gbc.e());
        EXPECT(0x91, gbc.h());
        EXPECT(0xf4, gbc.l());
        EXPECT(0x6b58, gbc.sp());
        EXPECT(0xa94e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa94c));
        EXPECT(0x8c, gbc.readMem(0xa94d));
        // CB 8C 01DE
        gbc.setState(0x4dc6, 0xfc95, 0x8180, 0xe345, 0xdef8, 0xef5e, 0x0, 0x1);
        gbc.writeMem(0x4dc6, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x81, gbc.a());
        EXPECT(0xe3, gbc.b());
        EXPECT(0x45, gbc.c());
        EXPECT(0xde, gbc.d());
        EXPECT(0xf8, gbc.e());
        EXPECT(0xed, gbc.h());
        EXPECT(0x5e, gbc.l());
        EXPECT(0xfc95, gbc.sp());
        EXPECT(0x4dc8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 01E0
        gbc.setState(0x1c67, 0x1499, 0x8360, 0x124b, 0xf5ed, 0x7fa8, 0x0, 0x1);
        gbc.writeMem(0x1c67, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x83, gbc.a());
        EXPECT(0x12, gbc.b());
        EXPECT(0x4b, gbc.c());
        EXPECT(0xf5, gbc.d());
        EXPECT(0xed, gbc.e());
        EXPECT(0x7d, gbc.h());
        EXPECT(0xa8, gbc.l());
        EXPECT(0x1499, gbc.sp());
        EXPECT(0x1c69, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 01E1
        gbc.setState(0x801d, 0xa253, 0xba70, 0x24fd, 0xdcd4, 0x1515, 0x0, 0x1);
        gbc.writeMem(0x801d, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xba, gbc.a());
        EXPECT(0x24, gbc.b());
        EXPECT(0xfd, gbc.c());
        EXPECT(0xdc, gbc.d());
        EXPECT(0xd4, gbc.e());
        EXPECT(0x15, gbc.h());
        EXPECT(0x15, gbc.l());
        EXPECT(0xa253, gbc.sp());
        EXPECT(0x801f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x801d));
        EXPECT(0x8c, gbc.readMem(0x801e));
        // CB 8C 01E2
        gbc.setState(0xa9dc, 0xb3cb, 0xea00, 0xc774, 0x81b6, 0x2429, 0x1, 0x0);
        gbc.writeMem(0xa9dc, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xea, gbc.a());
        EXPECT(0xc7, gbc.b());
        EXPECT(0x74, gbc.c());
        EXPECT(0x81, gbc.d());
        EXPECT(0xb6, gbc.e());
        EXPECT(0x24, gbc.h());
        EXPECT(0x29, gbc.l());
        EXPECT(0xb3cb, gbc.sp());
        EXPECT(0xa9de, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa9dc));
        EXPECT(0x8c, gbc.readMem(0xa9dd));
        // CB 8C 01E3
        gbc.setState(0x8974, 0xf39e, 0xf860, 0x4062, 0xbf0b, 0x7791, 0x1, 0x1);
        gbc.writeMem(0x8974, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xf8, gbc.a());
        EXPECT(0x40, gbc.b());
        EXPECT(0x62, gbc.c());
        EXPECT(0xbf, gbc.d());
        EXPECT(0xb, gbc.e());
        EXPECT(0x75, gbc.h());
        EXPECT(0x91, gbc.l());
        EXPECT(0xf39e, gbc.sp());
        EXPECT(0x8976, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8974));
        EXPECT(0x8c, gbc.readMem(0x8975));
        // CB 8C 01E4
        gbc.setState(0x1e74, 0x956e, 0x2340, 0xac33, 0xeb70, 0x7484, 0x0, 0x1);
        gbc.writeMem(0x1e74, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x23, gbc.a());
        EXPECT(0xac, gbc.b());
        EXPECT(0x33, gbc.c());
        EXPECT(0xeb, gbc.d());
        EXPECT(0x70, gbc.e());
        EXPECT(0x74, gbc.h());
        EXPECT(0x84, gbc.l());
        EXPECT(0x956e, gbc.sp());
        EXPECT(0x1e76, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 01E5
        gbc.setState(0x1705, 0x435a, 0x63e0, 0x6e05, 0x436e, 0x2001, 0x1, 0x1);
        gbc.writeMem(0x1705, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x63, gbc.a());
        EXPECT(0x6e, gbc.b());
        EXPECT(0x5, gbc.c());
        EXPECT(0x43, gbc.d());
        EXPECT(0x6e, gbc.e());
        EXPECT(0x20, gbc.h());
        EXPECT(0x1, gbc.l());
        EXPECT(0x435a, gbc.sp());
        EXPECT(0x1707, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 01E6
        gbc.setState(0x9344, 0xf02c, 0x9ae0, 0xc49, 0x702d, 0xba75, 0x1, 0x0);
        gbc.writeMem(0x9344, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x9a, gbc.a());
        EXPECT(0xc, gbc.b());
        EXPECT(0x49, gbc.c());
        EXPECT(0x70, gbc.d());
        EXPECT(0x2d, gbc.e());
        EXPECT(0xb8, gbc.h());
        EXPECT(0x75, gbc.l());
        EXPECT(0xf02c, gbc.sp());
        EXPECT(0x9346, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9344));
        EXPECT(0x8c, gbc.readMem(0x9345));
        // CB 8C 01E7
        gbc.setState(0x83e3, 0x8c3, 0xc4b0, 0x96d0, 0xb310, 0x39a7, 0x1, 0x0);
        gbc.writeMem(0x83e3, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xc4, gbc.a());
        EXPECT(0x96, gbc.b());
        EXPECT(0xd0, gbc.c());
        EXPECT(0xb3, gbc.d());
        EXPECT(0x10, gbc.e());
        EXPECT(0x39, gbc.h());
        EXPECT(0xa7, gbc.l());
        EXPECT(0x8c3, gbc.sp());
        EXPECT(0x83e5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x83e3));
        EXPECT(0x8c, gbc.readMem(0x83e4));
        // CB 8C 01E9
        gbc.setState(0xb475, 0x1ad, 0x34a0, 0xf775, 0xbf69, 0x65e, 0x0, 0x1);
        gbc.writeMem(0xb475, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x34, gbc.a());
        EXPECT(0xf7, gbc.b());
        EXPECT(0x75, gbc.c());
        EXPECT(0xbf, gbc.d());
        EXPECT(0x69, gbc.e());
        EXPECT(0x4, gbc.h());
        EXPECT(0x5e, gbc.l());
        EXPECT(0x1ad, gbc.sp());
        EXPECT(0xb477, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb475));
        EXPECT(0x8c, gbc.readMem(0xb476));
        // CB 8C 01EB
        gbc.setState(0x7825, 0x4c7d, 0xaf40, 0x341c, 0xcf9d, 0xb80c, 0x0, 0x0);
        gbc.writeMem(0x7825, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xaf, gbc.a());
        EXPECT(0x34, gbc.b());
        EXPECT(0x1c, gbc.c());
        EXPECT(0xcf, gbc.d());
        EXPECT(0x9d, gbc.e());
        EXPECT(0xb8, gbc.h());
        EXPECT(0xc, gbc.l());
        EXPECT(0x4c7d, gbc.sp());
        EXPECT(0x7827, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 01EC
        gbc.setState(0x58c6, 0x93dc, 0x2060, 0xd781, 0x2909, 0x81cd, 0x1, 0x1);
        gbc.writeMem(0x58c6, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x20, gbc.a());
        EXPECT(0xd7, gbc.b());
        EXPECT(0x81, gbc.c());
        EXPECT(0x29, gbc.d());
        EXPECT(0x9, gbc.e());
        EXPECT(0x81, gbc.h());
        EXPECT(0xcd, gbc.l());
        EXPECT(0x93dc, gbc.sp());
        EXPECT(0x58c8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 01ED
        gbc.setState(0x722b, 0x9363, 0x2760, 0x531d, 0x4a4a, 0xc8b5, 0x0, 0x1);
        gbc.writeMem(0x722b, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x27, gbc.a());
        EXPECT(0x53, gbc.b());
        EXPECT(0x1d, gbc.c());
        EXPECT(0x4a, gbc.d());
        EXPECT(0x4a, gbc.e());
        EXPECT(0xc8, gbc.h());
        EXPECT(0xb5, gbc.l());
        EXPECT(0x9363, gbc.sp());
        EXPECT(0x722d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 01EF
        gbc.setState(0x43c3, 0xb222, 0x5340, 0xa943, 0x4611, 0x7bc3, 0x0, 0x0);
        gbc.writeMem(0x43c3, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x53, gbc.a());
        EXPECT(0xa9, gbc.b());
        EXPECT(0x43, gbc.c());
        EXPECT(0x46, gbc.d());
        EXPECT(0x11, gbc.e());
        EXPECT(0x79, gbc.h());
        EXPECT(0xc3, gbc.l());
        EXPECT(0xb222, gbc.sp());
        EXPECT(0x43c5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 01F0
        gbc.setState(0x58ae, 0x2a10, 0x39e0, 0x8016, 0xec27, 0x7d86, 0x1, 0x1);
        gbc.writeMem(0x58ae, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x39, gbc.a());
        EXPECT(0x80, gbc.b());
        EXPECT(0x16, gbc.c());
        EXPECT(0xec, gbc.d());
        EXPECT(0x27, gbc.e());
        EXPECT(0x7d, gbc.h());
        EXPECT(0x86, gbc.l());
        EXPECT(0x2a10, gbc.sp());
        EXPECT(0x58b0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 01F1
        gbc.setState(0xc738, 0xf75c, 0xbec0, 0x649e, 0xb59a, 0xda62, 0x1, 0x1);
        gbc.writeMem(0xc738, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xbe, gbc.a());
        EXPECT(0x64, gbc.b());
        EXPECT(0x9e, gbc.c());
        EXPECT(0xb5, gbc.d());
        EXPECT(0x9a, gbc.e());
        EXPECT(0xd8, gbc.h());
        EXPECT(0x62, gbc.l());
        EXPECT(0xf75c, gbc.sp());
        EXPECT(0xc73a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc738));
        EXPECT(0x8c, gbc.readMem(0xc739));
        // CB 8C 01F2
        gbc.setState(0x2d5a, 0x44fa, 0x42a0, 0x8421, 0x6af4, 0x7383, 0x0, 0x0);
        gbc.writeMem(0x2d5a, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x42, gbc.a());
        EXPECT(0x84, gbc.b());
        EXPECT(0x21, gbc.c());
        EXPECT(0x6a, gbc.d());
        EXPECT(0xf4, gbc.e());
        EXPECT(0x71, gbc.h());
        EXPECT(0x83, gbc.l());
        EXPECT(0x44fa, gbc.sp());
        EXPECT(0x2d5c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 01F3
        gbc.setState(0x6b35, 0x438a, 0x7e80, 0x2fba, 0x24a4, 0xba4a, 0x1, 0x0);
        gbc.writeMem(0x6b35, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x7e, gbc.a());
        EXPECT(0x2f, gbc.b());
        EXPECT(0xba, gbc.c());
        EXPECT(0x24, gbc.d());
        EXPECT(0xa4, gbc.e());
        EXPECT(0xb8, gbc.h());
        EXPECT(0x4a, gbc.l());
        EXPECT(0x438a, gbc.sp());
        EXPECT(0x6b37, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 01F4
        gbc.setState(0x933f, 0xb513, 0xd150, 0x6ebe, 0xda48, 0x4cdc, 0x1, 0x1);
        gbc.writeMem(0x933f, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xd1, gbc.a());
        EXPECT(0x6e, gbc.b());
        EXPECT(0xbe, gbc.c());
        EXPECT(0xda, gbc.d());
        EXPECT(0x48, gbc.e());
        EXPECT(0x4c, gbc.h());
        EXPECT(0xdc, gbc.l());
        EXPECT(0xb513, gbc.sp());
        EXPECT(0x9341, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x933f));
        EXPECT(0x8c, gbc.readMem(0x9340));
        // CB 8C 01F5
        gbc.setState(0x42f6, 0xc3b2, 0xf750, 0x77aa, 0xcd85, 0x4c0c, 0x0, 0x1);
        gbc.writeMem(0x42f6, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xf7, gbc.a());
        EXPECT(0x77, gbc.b());
        EXPECT(0xaa, gbc.c());
        EXPECT(0xcd, gbc.d());
        EXPECT(0x85, gbc.e());
        EXPECT(0x4c, gbc.h());
        EXPECT(0xc, gbc.l());
        EXPECT(0xc3b2, gbc.sp());
        EXPECT(0x42f8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 01F6
        gbc.setState(0xe19f, 0x336e, 0x8fc0, 0x2e3e, 0x3b48, 0x8cb0, 0x0, 0x0);
        gbc.writeMem(0xe19f, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x8f, gbc.a());
        EXPECT(0x2e, gbc.b());
        EXPECT(0x3e, gbc.c());
        EXPECT(0x3b, gbc.d());
        EXPECT(0x48, gbc.e());
        EXPECT(0x8c, gbc.h());
        EXPECT(0xb0, gbc.l());
        EXPECT(0x336e, gbc.sp());
        EXPECT(0xe1a1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe19f));
        EXPECT(0x8c, gbc.readMem(0xe1a0));
        // CB 8C 01F8
        gbc.setState(0x1d2e, 0xb5e1, 0xe8a0, 0x151f, 0x1faf, 0xc785, 0x1, 0x0);
        gbc.writeMem(0x1d2e, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xe8, gbc.a());
        EXPECT(0x15, gbc.b());
        EXPECT(0x1f, gbc.c());
        EXPECT(0x1f, gbc.d());
        EXPECT(0xaf, gbc.e());
        EXPECT(0xc5, gbc.h());
        EXPECT(0x85, gbc.l());
        EXPECT(0xb5e1, gbc.sp());
        EXPECT(0x1d30, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 01F9
        gbc.setState(0x284b, 0x9bac, 0xa110, 0xd0d7, 0x87ae, 0x6fbf, 0x1, 0x0);
        gbc.writeMem(0x284b, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xa1, gbc.a());
        EXPECT(0xd0, gbc.b());
        EXPECT(0xd7, gbc.c());
        EXPECT(0x87, gbc.d());
        EXPECT(0xae, gbc.e());
        EXPECT(0x6d, gbc.h());
        EXPECT(0xbf, gbc.l());
        EXPECT(0x9bac, gbc.sp());
        EXPECT(0x284d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 01FA
        gbc.setState(0x6fa8, 0xdbc9, 0xc2e0, 0xd2f3, 0xbdce, 0x6e15, 0x1, 0x1);
        gbc.writeMem(0x6fa8, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xc2, gbc.a());
        EXPECT(0xd2, gbc.b());
        EXPECT(0xf3, gbc.c());
        EXPECT(0xbd, gbc.d());
        EXPECT(0xce, gbc.e());
        EXPECT(0x6c, gbc.h());
        EXPECT(0x15, gbc.l());
        EXPECT(0xdbc9, gbc.sp());
        EXPECT(0x6faa, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 01FB
        gbc.setState(0x5b6, 0xe029, 0xc640, 0x249a, 0x974a, 0x9bf, 0x1, 0x1);
        gbc.writeMem(0x5b6, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xc6, gbc.a());
        EXPECT(0x24, gbc.b());
        EXPECT(0x9a, gbc.c());
        EXPECT(0x97, gbc.d());
        EXPECT(0x4a, gbc.e());
        EXPECT(0x9, gbc.h());
        EXPECT(0xbf, gbc.l());
        EXPECT(0xe029, gbc.sp());
        EXPECT(0x5b8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 01FC
        gbc.setState(0xea1d, 0x3547, 0xa160, 0xf2e6, 0xf0f6, 0x488, 0x1, 0x1);
        gbc.writeMem(0xea1d, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xa1, gbc.a());
        EXPECT(0xf2, gbc.b());
        EXPECT(0xe6, gbc.c());
        EXPECT(0xf0, gbc.d());
        EXPECT(0xf6, gbc.e());
        EXPECT(0x4, gbc.h());
        EXPECT(0x88, gbc.l());
        EXPECT(0x3547, gbc.sp());
        EXPECT(0xea1f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xea1d));
        EXPECT(0x8c, gbc.readMem(0xea1e));
        // CB 8C 01FD
        gbc.setState(0x2bce, 0x7573, 0xbe20, 0xc639, 0x7e26, 0x1762, 0x0, 0x1);
        gbc.writeMem(0x2bce, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xbe, gbc.a());
        EXPECT(0xc6, gbc.b());
        EXPECT(0x39, gbc.c());
        EXPECT(0x7e, gbc.d());
        EXPECT(0x26, gbc.e());
        EXPECT(0x15, gbc.h());
        EXPECT(0x62, gbc.l());
        EXPECT(0x7573, gbc.sp());
        EXPECT(0x2bd0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 01FE
        gbc.setState(0xe7d8, 0x5ea2, 0x1b20, 0xd654, 0x8847, 0xca10, 0x1, 0x0);
        gbc.writeMem(0xe7d8, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x1b, gbc.a());
        EXPECT(0xd6, gbc.b());
        EXPECT(0x54, gbc.c());
        EXPECT(0x88, gbc.d());
        EXPECT(0x47, gbc.e());
        EXPECT(0xc8, gbc.h());
        EXPECT(0x10, gbc.l());
        EXPECT(0x5ea2, gbc.sp());
        EXPECT(0xe7da, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe7d8));
        EXPECT(0x8c, gbc.readMem(0xe7d9));
        // CB 8C 0200
        gbc.setState(0x98af, 0x1384, 0x7c90, 0xcb2, 0x9c0e, 0x1c5c, 0x0, 0x1);
        gbc.writeMem(0x98af, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x7c, gbc.a());
        EXPECT(0xc, gbc.b());
        EXPECT(0xb2, gbc.c());
        EXPECT(0x9c, gbc.d());
        EXPECT(0xe, gbc.e());
        EXPECT(0x1c, gbc.h());
        EXPECT(0x5c, gbc.l());
        EXPECT(0x1384, gbc.sp());
        EXPECT(0x98b1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x98af));
        EXPECT(0x8c, gbc.readMem(0x98b0));
        // CB 8C 0201
        gbc.setState(0x5f5d, 0xac51, 0x8960, 0x3e95, 0x6b36, 0x113e, 0x0, 0x1);
        gbc.writeMem(0x5f5d, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x89, gbc.a());
        EXPECT(0x3e, gbc.b());
        EXPECT(0x95, gbc.c());
        EXPECT(0x6b, gbc.d());
        EXPECT(0x36, gbc.e());
        EXPECT(0x11, gbc.h());
        EXPECT(0x3e, gbc.l());
        EXPECT(0xac51, gbc.sp());
        EXPECT(0x5f5f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 0202
        gbc.setState(0xdaca, 0xffba, 0x27a0, 0x815c, 0x4e1, 0xe0e2, 0x0, 0x1);
        gbc.writeMem(0xdaca, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x27, gbc.a());
        EXPECT(0x81, gbc.b());
        EXPECT(0x5c, gbc.c());
        EXPECT(0x4, gbc.d());
        EXPECT(0xe1, gbc.e());
        EXPECT(0xe0, gbc.h());
        EXPECT(0xe2, gbc.l());
        EXPECT(0xffba, gbc.sp());
        EXPECT(0xdacc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdaca));
        EXPECT(0x8c, gbc.readMem(0xdacb));
        // CB 8C 0203
        gbc.setState(0xc983, 0x7e2b, 0xa500, 0x22af, 0x3e85, 0xe62f, 0x1, 0x1);
        gbc.writeMem(0xc983, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xa5, gbc.a());
        EXPECT(0x22, gbc.b());
        EXPECT(0xaf, gbc.c());
        EXPECT(0x3e, gbc.d());
        EXPECT(0x85, gbc.e());
        EXPECT(0xe4, gbc.h());
        EXPECT(0x2f, gbc.l());
        EXPECT(0x7e2b, gbc.sp());
        EXPECT(0xc985, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc983));
        EXPECT(0x8c, gbc.readMem(0xc984));
        // CB 8C 0204
        gbc.setState(0x3745, 0x9cd4, 0x8c60, 0x6e64, 0xd73d, 0xe944, 0x0, 0x1);
        gbc.writeMem(0x3745, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x8c, gbc.a());
        EXPECT(0x6e, gbc.b());
        EXPECT(0x64, gbc.c());
        EXPECT(0xd7, gbc.d());
        EXPECT(0x3d, gbc.e());
        EXPECT(0xe9, gbc.h());
        EXPECT(0x44, gbc.l());
        EXPECT(0x9cd4, gbc.sp());
        EXPECT(0x3747, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 0206
        gbc.setState(0xeb0b, 0x759f, 0xcf40, 0xe435, 0x849b, 0x79d, 0x1, 0x1);
        gbc.writeMem(0xeb0b, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xcf, gbc.a());
        EXPECT(0xe4, gbc.b());
        EXPECT(0x35, gbc.c());
        EXPECT(0x84, gbc.d());
        EXPECT(0x9b, gbc.e());
        EXPECT(0x5, gbc.h());
        EXPECT(0x9d, gbc.l());
        EXPECT(0x759f, gbc.sp());
        EXPECT(0xeb0d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xeb0b));
        EXPECT(0x8c, gbc.readMem(0xeb0c));
        // CB 8C 0207
        gbc.setState(0x9680, 0x87d9, 0x4d60, 0x13b0, 0x1473, 0xf5, 0x1, 0x0);
        gbc.writeMem(0x9680, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x4d, gbc.a());
        EXPECT(0x13, gbc.b());
        EXPECT(0xb0, gbc.c());
        EXPECT(0x14, gbc.d());
        EXPECT(0x73, gbc.e());
        EXPECT(0x0, gbc.h());
        EXPECT(0xf5, gbc.l());
        EXPECT(0x87d9, gbc.sp());
        EXPECT(0x9682, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9680));
        EXPECT(0x8c, gbc.readMem(0x9681));
        // CB 8C 0208
        gbc.setState(0xeaa3, 0x3489, 0x7930, 0xff27, 0xdc39, 0x5421, 0x0, 0x0);
        gbc.writeMem(0xeaa3, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x79, gbc.a());
        EXPECT(0xff, gbc.b());
        EXPECT(0x27, gbc.c());
        EXPECT(0xdc, gbc.d());
        EXPECT(0x39, gbc.e());
        EXPECT(0x54, gbc.h());
        EXPECT(0x21, gbc.l());
        EXPECT(0x3489, gbc.sp());
        EXPECT(0xeaa5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xeaa3));
        EXPECT(0x8c, gbc.readMem(0xeaa4));
        // CB 8C 0209
        gbc.setState(0xd303, 0x3c61, 0xd360, 0xf12, 0x3f0c, 0xc26, 0x0, 0x1);
        gbc.writeMem(0xd303, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xd3, gbc.a());
        EXPECT(0xf, gbc.b());
        EXPECT(0x12, gbc.c());
        EXPECT(0x3f, gbc.d());
        EXPECT(0xc, gbc.e());
        EXPECT(0xc, gbc.h());
        EXPECT(0x26, gbc.l());
        EXPECT(0x3c61, gbc.sp());
        EXPECT(0xd305, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd303));
        EXPECT(0x8c, gbc.readMem(0xd304));
        // CB 8C 020A
        gbc.setState(0x6b86, 0xa3ad, 0x3120, 0x3ac9, 0x82c0, 0x171e, 0x0, 0x1);
        gbc.writeMem(0x6b86, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x31, gbc.a());
        EXPECT(0x3a, gbc.b());
        EXPECT(0xc9, gbc.c());
        EXPECT(0x82, gbc.d());
        EXPECT(0xc0, gbc.e());
        EXPECT(0x15, gbc.h());
        EXPECT(0x1e, gbc.l());
        EXPECT(0xa3ad, gbc.sp());
        EXPECT(0x6b88, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 020B
        gbc.setState(0x75b6, 0x1548, 0xb120, 0x5255, 0xf252, 0x80f2, 0x0, 0x0);
        gbc.writeMem(0x75b6, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xb1, gbc.a());
        EXPECT(0x52, gbc.b());
        EXPECT(0x55, gbc.c());
        EXPECT(0xf2, gbc.d());
        EXPECT(0x52, gbc.e());
        EXPECT(0x80, gbc.h());
        EXPECT(0xf2, gbc.l());
        EXPECT(0x1548, gbc.sp());
        EXPECT(0x75b8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 020C
        gbc.setState(0x85, 0xe8ce, 0x9690, 0x2f49, 0x3e96, 0x977, 0x1, 0x0);
        gbc.writeMem(0x85, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x96, gbc.a());
        EXPECT(0x2f, gbc.b());
        EXPECT(0x49, gbc.c());
        EXPECT(0x3e, gbc.d());
        EXPECT(0x96, gbc.e());
        EXPECT(0x9, gbc.h());
        EXPECT(0x77, gbc.l());
        EXPECT(0xe8ce, gbc.sp());
        EXPECT(0x87, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 020D
        gbc.setState(0x66e4, 0x87d5, 0x2350, 0xa0f6, 0x895a, 0x8538, 0x1, 0x0);
        gbc.writeMem(0x66e4, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x23, gbc.a());
        EXPECT(0xa0, gbc.b());
        EXPECT(0xf6, gbc.c());
        EXPECT(0x89, gbc.d());
        EXPECT(0x5a, gbc.e());
        EXPECT(0x85, gbc.h());
        EXPECT(0x38, gbc.l());
        EXPECT(0x87d5, gbc.sp());
        EXPECT(0x66e6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 020E
        gbc.setState(0xddcb, 0x1301, 0x5080, 0xfc81, 0xf16b, 0xc928, 0x1, 0x1);
        gbc.writeMem(0xddcb, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x50, gbc.a());
        EXPECT(0xfc, gbc.b());
        EXPECT(0x81, gbc.c());
        EXPECT(0xf1, gbc.d());
        EXPECT(0x6b, gbc.e());
        EXPECT(0xc9, gbc.h());
        EXPECT(0x28, gbc.l());
        EXPECT(0x1301, gbc.sp());
        EXPECT(0xddcd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xddcb));
        EXPECT(0x8c, gbc.readMem(0xddcc));
        // CB 8C 020F
        gbc.setState(0x737b, 0xa10d, 0x6a30, 0x58d3, 0x3ec9, 0x3dc2, 0x0, 0x0);
        gbc.writeMem(0x737b, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x6a, gbc.a());
        EXPECT(0x58, gbc.b());
        EXPECT(0xd3, gbc.c());
        EXPECT(0x3e, gbc.d());
        EXPECT(0xc9, gbc.e());
        EXPECT(0x3d, gbc.h());
        EXPECT(0xc2, gbc.l());
        EXPECT(0xa10d, gbc.sp());
        EXPECT(0x737d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 0210
        gbc.setState(0xbcb3, 0xa563, 0xed0, 0x75f2, 0x4584, 0x9844, 0x1, 0x0);
        gbc.writeMem(0xbcb3, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xe, gbc.a());
        EXPECT(0x75, gbc.b());
        EXPECT(0xf2, gbc.c());
        EXPECT(0x45, gbc.d());
        EXPECT(0x84, gbc.e());
        EXPECT(0x98, gbc.h());
        EXPECT(0x44, gbc.l());
        EXPECT(0xa563, gbc.sp());
        EXPECT(0xbcb5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbcb3));
        EXPECT(0x8c, gbc.readMem(0xbcb4));
        // CB 8C 0211
        gbc.setState(0x7b6c, 0xf7e0, 0x2c50, 0xf5bc, 0x31d0, 0x3e65, 0x0, 0x0);
        gbc.writeMem(0x7b6c, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x2c, gbc.a());
        EXPECT(0xf5, gbc.b());
        EXPECT(0xbc, gbc.c());
        EXPECT(0x31, gbc.d());
        EXPECT(0xd0, gbc.e());
        EXPECT(0x3c, gbc.h());
        EXPECT(0x65, gbc.l());
        EXPECT(0xf7e0, gbc.sp());
        EXPECT(0x7b6e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 0212
        gbc.setState(0xb0a1, 0x6ae1, 0x6b00, 0xe580, 0x69eb, 0xe7d, 0x0, 0x0);
        gbc.writeMem(0xb0a1, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x6b, gbc.a());
        EXPECT(0xe5, gbc.b());
        EXPECT(0x80, gbc.c());
        EXPECT(0x69, gbc.d());
        EXPECT(0xeb, gbc.e());
        EXPECT(0xc, gbc.h());
        EXPECT(0x7d, gbc.l());
        EXPECT(0x6ae1, gbc.sp());
        EXPECT(0xb0a3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb0a1));
        EXPECT(0x8c, gbc.readMem(0xb0a2));
        // CB 8C 0213
        gbc.setState(0xcc44, 0x19da, 0x5b30, 0x6e5d, 0x3595, 0xa054, 0x1, 0x0);
        gbc.writeMem(0xcc44, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x5b, gbc.a());
        EXPECT(0x6e, gbc.b());
        EXPECT(0x5d, gbc.c());
        EXPECT(0x35, gbc.d());
        EXPECT(0x95, gbc.e());
        EXPECT(0xa0, gbc.h());
        EXPECT(0x54, gbc.l());
        EXPECT(0x19da, gbc.sp());
        EXPECT(0xcc46, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcc44));
        EXPECT(0x8c, gbc.readMem(0xcc45));
        // CB 8C 0214
        gbc.setState(0x55bf, 0xa3d3, 0x27b0, 0x6fbd, 0xf250, 0x4c53, 0x0, 0x0);
        gbc.writeMem(0x55bf, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x27, gbc.a());
        EXPECT(0x6f, gbc.b());
        EXPECT(0xbd, gbc.c());
        EXPECT(0xf2, gbc.d());
        EXPECT(0x50, gbc.e());
        EXPECT(0x4c, gbc.h());
        EXPECT(0x53, gbc.l());
        EXPECT(0xa3d3, gbc.sp());
        EXPECT(0x55c1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 0215
        gbc.setState(0xcd2a, 0xde74, 0xb2b0, 0xf4f3, 0xef9, 0xd93b, 0x1, 0x1);
        gbc.writeMem(0xcd2a, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xb2, gbc.a());
        EXPECT(0xf4, gbc.b());
        EXPECT(0xf3, gbc.c());
        EXPECT(0xe, gbc.d());
        EXPECT(0xf9, gbc.e());
        EXPECT(0xd9, gbc.h());
        EXPECT(0x3b, gbc.l());
        EXPECT(0xde74, gbc.sp());
        EXPECT(0xcd2c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcd2a));
        EXPECT(0x8c, gbc.readMem(0xcd2b));
        // CB 8C 0216
        gbc.setState(0xc1b0, 0xb682, 0x140, 0x58aa, 0xc4a9, 0xeef3, 0x1, 0x1);
        gbc.writeMem(0xc1b0, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x1, gbc.a());
        EXPECT(0x58, gbc.b());
        EXPECT(0xaa, gbc.c());
        EXPECT(0xc4, gbc.d());
        EXPECT(0xa9, gbc.e());
        EXPECT(0xec, gbc.h());
        EXPECT(0xf3, gbc.l());
        EXPECT(0xb682, gbc.sp());
        EXPECT(0xc1b2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc1b0));
        EXPECT(0x8c, gbc.readMem(0xc1b1));
        // CB 8C 0217
        gbc.setState(0x8e82, 0x858d, 0x4f10, 0xa6c7, 0x915a, 0xce4d, 0x1, 0x1);
        gbc.writeMem(0x8e82, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x4f, gbc.a());
        EXPECT(0xa6, gbc.b());
        EXPECT(0xc7, gbc.c());
        EXPECT(0x91, gbc.d());
        EXPECT(0x5a, gbc.e());
        EXPECT(0xcc, gbc.h());
        EXPECT(0x4d, gbc.l());
        EXPECT(0x858d, gbc.sp());
        EXPECT(0x8e84, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8e82));
        EXPECT(0x8c, gbc.readMem(0x8e83));
        // CB 8C 0218
        gbc.setState(0x867a, 0x3bba, 0xfcd0, 0xc4ae, 0xd4ff, 0x1102, 0x0, 0x1);
        gbc.writeMem(0x867a, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xfc, gbc.a());
        EXPECT(0xc4, gbc.b());
        EXPECT(0xae, gbc.c());
        EXPECT(0xd4, gbc.d());
        EXPECT(0xff, gbc.e());
        EXPECT(0x11, gbc.h());
        EXPECT(0x2, gbc.l());
        EXPECT(0x3bba, gbc.sp());
        EXPECT(0x867c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x867a));
        EXPECT(0x8c, gbc.readMem(0x867b));
        // CB 8C 0219
        gbc.setState(0x7ae0, 0xbcc, 0xf00, 0xd639, 0x62cf, 0x5ad8, 0x0, 0x1);
        gbc.writeMem(0x7ae0, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xf, gbc.a());
        EXPECT(0xd6, gbc.b());
        EXPECT(0x39, gbc.c());
        EXPECT(0x62, gbc.d());
        EXPECT(0xcf, gbc.e());
        EXPECT(0x58, gbc.h());
        EXPECT(0xd8, gbc.l());
        EXPECT(0xbcc, gbc.sp());
        EXPECT(0x7ae2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 021A
        gbc.setState(0xc05b, 0x93bd, 0xbe30, 0xc2e1, 0x74e2, 0xe295, 0x1, 0x0);
        gbc.writeMem(0xc05b, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xbe, gbc.a());
        EXPECT(0xc2, gbc.b());
        EXPECT(0xe1, gbc.c());
        EXPECT(0x74, gbc.d());
        EXPECT(0xe2, gbc.e());
        EXPECT(0xe0, gbc.h());
        EXPECT(0x95, gbc.l());
        EXPECT(0x93bd, gbc.sp());
        EXPECT(0xc05d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc05b));
        EXPECT(0x8c, gbc.readMem(0xc05c));
        // CB 8C 021B
        gbc.setState(0x3878, 0x5e17, 0x5e80, 0xb89b, 0xbc08, 0x1bae, 0x1, 0x0);
        gbc.writeMem(0x3878, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x5e, gbc.a());
        EXPECT(0xb8, gbc.b());
        EXPECT(0x9b, gbc.c());
        EXPECT(0xbc, gbc.d());
        EXPECT(0x8, gbc.e());
        EXPECT(0x19, gbc.h());
        EXPECT(0xae, gbc.l());
        EXPECT(0x5e17, gbc.sp());
        EXPECT(0x387a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 021C
        gbc.setState(0x1599, 0x93ac, 0xeb70, 0xf68e, 0xd771, 0xdd34, 0x1, 0x0);
        gbc.writeMem(0x1599, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xeb, gbc.a());
        EXPECT(0xf6, gbc.b());
        EXPECT(0x8e, gbc.c());
        EXPECT(0xd7, gbc.d());
        EXPECT(0x71, gbc.e());
        EXPECT(0xdd, gbc.h());
        EXPECT(0x34, gbc.l());
        EXPECT(0x93ac, gbc.sp());
        EXPECT(0x159b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 021D
        gbc.setState(0x7f56, 0x9df7, 0x2960, 0x45ba, 0x2f60, 0x8527, 0x1, 0x1);
        gbc.writeMem(0x7f56, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x29, gbc.a());
        EXPECT(0x45, gbc.b());
        EXPECT(0xba, gbc.c());
        EXPECT(0x2f, gbc.d());
        EXPECT(0x60, gbc.e());
        EXPECT(0x85, gbc.h());
        EXPECT(0x27, gbc.l());
        EXPECT(0x9df7, gbc.sp());
        EXPECT(0x7f58, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 021E
        gbc.setState(0x3b6c, 0xfee, 0xc590, 0xf254, 0xdeca, 0x5e3e, 0x0, 0x0);
        gbc.writeMem(0x3b6c, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xc5, gbc.a());
        EXPECT(0xf2, gbc.b());
        EXPECT(0x54, gbc.c());
        EXPECT(0xde, gbc.d());
        EXPECT(0xca, gbc.e());
        EXPECT(0x5c, gbc.h());
        EXPECT(0x3e, gbc.l());
        EXPECT(0xfee, gbc.sp());
        EXPECT(0x3b6e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 021F
        gbc.setState(0x707f, 0x6719, 0x87a0, 0x2f28, 0x4766, 0xfec, 0x1, 0x0);
        gbc.writeMem(0x707f, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x87, gbc.a());
        EXPECT(0x2f, gbc.b());
        EXPECT(0x28, gbc.c());
        EXPECT(0x47, gbc.d());
        EXPECT(0x66, gbc.e());
        EXPECT(0xd, gbc.h());
        EXPECT(0xec, gbc.l());
        EXPECT(0x6719, gbc.sp());
        EXPECT(0x7081, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 0220
        gbc.setState(0x315e, 0x89bc, 0x6b20, 0xb3b1, 0xe074, 0xc190, 0x0, 0x1);
        gbc.writeMem(0x315e, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x6b, gbc.a());
        EXPECT(0xb3, gbc.b());
        EXPECT(0xb1, gbc.c());
        EXPECT(0xe0, gbc.d());
        EXPECT(0x74, gbc.e());
        EXPECT(0xc1, gbc.h());
        EXPECT(0x90, gbc.l());
        EXPECT(0x89bc, gbc.sp());
        EXPECT(0x3160, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 0221
        gbc.setState(0x32f, 0x93ad, 0x3450, 0x7450, 0x20d7, 0x65f9, 0x1, 0x1);
        gbc.writeMem(0x32f, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x34, gbc.a());
        EXPECT(0x74, gbc.b());
        EXPECT(0x50, gbc.c());
        EXPECT(0x20, gbc.d());
        EXPECT(0xd7, gbc.e());
        EXPECT(0x65, gbc.h());
        EXPECT(0xf9, gbc.l());
        EXPECT(0x93ad, gbc.sp());
        EXPECT(0x331, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 0222
        gbc.setState(0x5872, 0xbc27, 0xc1a0, 0xeb45, 0xa3f5, 0x2f91, 0x1, 0x1);
        gbc.writeMem(0x5872, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xc1, gbc.a());
        EXPECT(0xeb, gbc.b());
        EXPECT(0x45, gbc.c());
        EXPECT(0xa3, gbc.d());
        EXPECT(0xf5, gbc.e());
        EXPECT(0x2d, gbc.h());
        EXPECT(0x91, gbc.l());
        EXPECT(0xbc27, gbc.sp());
        EXPECT(0x5874, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 0223
        gbc.setState(0x53cf, 0x8b15, 0xa80, 0x1b7b, 0xf1c6, 0x54e8, 0x1, 0x0);
        gbc.writeMem(0x53cf, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xa, gbc.a());
        EXPECT(0x1b, gbc.b());
        EXPECT(0x7b, gbc.c());
        EXPECT(0xf1, gbc.d());
        EXPECT(0xc6, gbc.e());
        EXPECT(0x54, gbc.h());
        EXPECT(0xe8, gbc.l());
        EXPECT(0x8b15, gbc.sp());
        EXPECT(0x53d1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 0224
        gbc.setState(0x676c, 0x8a68, 0x3b10, 0x572e, 0xddf3, 0xa12e, 0x0, 0x1);
        gbc.writeMem(0x676c, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x3b, gbc.a());
        EXPECT(0x57, gbc.b());
        EXPECT(0x2e, gbc.c());
        EXPECT(0xdd, gbc.d());
        EXPECT(0xf3, gbc.e());
        EXPECT(0xa1, gbc.h());
        EXPECT(0x2e, gbc.l());
        EXPECT(0x8a68, gbc.sp());
        EXPECT(0x676e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 0225
        gbc.setState(0x31de, 0x847c, 0x6780, 0x1891, 0x7eaf, 0xecc6, 0x1, 0x0);
        gbc.writeMem(0x31de, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x67, gbc.a());
        EXPECT(0x18, gbc.b());
        EXPECT(0x91, gbc.c());
        EXPECT(0x7e, gbc.d());
        EXPECT(0xaf, gbc.e());
        EXPECT(0xec, gbc.h());
        EXPECT(0xc6, gbc.l());
        EXPECT(0x847c, gbc.sp());
        EXPECT(0x31e0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 0226
        gbc.setState(0x3191, 0x7ad9, 0xe9c0, 0x96e6, 0x4038, 0x3a05, 0x0, 0x1);
        gbc.writeMem(0x3191, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xe9, gbc.a());
        EXPECT(0x96, gbc.b());
        EXPECT(0xe6, gbc.c());
        EXPECT(0x40, gbc.d());
        EXPECT(0x38, gbc.e());
        EXPECT(0x38, gbc.h());
        EXPECT(0x5, gbc.l());
        EXPECT(0x7ad9, gbc.sp());
        EXPECT(0x3193, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 0227
        gbc.setState(0x2c60, 0x8b7a, 0x2dc0, 0x46d2, 0x1a8f, 0x309f, 0x1, 0x1);
        gbc.writeMem(0x2c60, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x2d, gbc.a());
        EXPECT(0x46, gbc.b());
        EXPECT(0xd2, gbc.c());
        EXPECT(0x1a, gbc.d());
        EXPECT(0x8f, gbc.e());
        EXPECT(0x30, gbc.h());
        EXPECT(0x9f, gbc.l());
        EXPECT(0x8b7a, gbc.sp());
        EXPECT(0x2c62, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 0228
        gbc.setState(0x741a, 0x3cfe, 0xb5c0, 0x8115, 0x7f54, 0x55e4, 0x1, 0x1);
        gbc.writeMem(0x741a, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xb5, gbc.a());
        EXPECT(0x81, gbc.b());
        EXPECT(0x15, gbc.c());
        EXPECT(0x7f, gbc.d());
        EXPECT(0x54, gbc.e());
        EXPECT(0x55, gbc.h());
        EXPECT(0xe4, gbc.l());
        EXPECT(0x3cfe, gbc.sp());
        EXPECT(0x741c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 0229
        gbc.setState(0xd282, 0x2b7b, 0x1830, 0x7bd4, 0x88e0, 0xa8b0, 0x1, 0x0);
        gbc.writeMem(0xd282, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x18, gbc.a());
        EXPECT(0x7b, gbc.b());
        EXPECT(0xd4, gbc.c());
        EXPECT(0x88, gbc.d());
        EXPECT(0xe0, gbc.e());
        EXPECT(0xa8, gbc.h());
        EXPECT(0xb0, gbc.l());
        EXPECT(0x2b7b, gbc.sp());
        EXPECT(0xd284, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd282));
        EXPECT(0x8c, gbc.readMem(0xd283));
        // CB 8C 022A
        gbc.setState(0xd671, 0x2d72, 0xefe0, 0x6640, 0xce03, 0xab17, 0x1, 0x0);
        gbc.writeMem(0xd671, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xef, gbc.a());
        EXPECT(0x66, gbc.b());
        EXPECT(0x40, gbc.c());
        EXPECT(0xce, gbc.d());
        EXPECT(0x3, gbc.e());
        EXPECT(0xa9, gbc.h());
        EXPECT(0x17, gbc.l());
        EXPECT(0x2d72, gbc.sp());
        EXPECT(0xd673, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd671));
        EXPECT(0x8c, gbc.readMem(0xd672));
        // CB 8C 022B
        gbc.setState(0x8389, 0x5e83, 0xf9b0, 0x836c, 0xb170, 0x2707, 0x0, 0x0);
        gbc.writeMem(0x8389, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xf9, gbc.a());
        EXPECT(0x83, gbc.b());
        EXPECT(0x6c, gbc.c());
        EXPECT(0xb1, gbc.d());
        EXPECT(0x70, gbc.e());
        EXPECT(0x25, gbc.h());
        EXPECT(0x7, gbc.l());
        EXPECT(0x5e83, gbc.sp());
        EXPECT(0x838b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8389));
        EXPECT(0x8c, gbc.readMem(0x838a));
        // CB 8C 022C
        gbc.setState(0xdd71, 0x7035, 0x8830, 0x96c5, 0x709d, 0x9788, 0x1, 0x1);
        gbc.writeMem(0xdd71, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x88, gbc.a());
        EXPECT(0x96, gbc.b());
        EXPECT(0xc5, gbc.c());
        EXPECT(0x70, gbc.d());
        EXPECT(0x9d, gbc.e());
        EXPECT(0x95, gbc.h());
        EXPECT(0x88, gbc.l());
        EXPECT(0x7035, gbc.sp());
        EXPECT(0xdd73, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdd71));
        EXPECT(0x8c, gbc.readMem(0xdd72));
        // CB 8C 022D
        gbc.setState(0xcb83, 0x2b6d, 0x8290, 0x745e, 0x5310, 0x5cb3, 0x0, 0x0);
        gbc.writeMem(0xcb83, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x82, gbc.a());
        EXPECT(0x74, gbc.b());
        EXPECT(0x5e, gbc.c());
        EXPECT(0x53, gbc.d());
        EXPECT(0x10, gbc.e());
        EXPECT(0x5c, gbc.h());
        EXPECT(0xb3, gbc.l());
        EXPECT(0x2b6d, gbc.sp());
        EXPECT(0xcb85, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcb83));
        EXPECT(0x8c, gbc.readMem(0xcb84));
        // CB 8C 022E
        gbc.setState(0xcf14, 0x71b4, 0x8c20, 0x274a, 0x76db, 0x316c, 0x0, 0x1);
        gbc.writeMem(0xcf14, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x8c, gbc.a());
        EXPECT(0x27, gbc.b());
        EXPECT(0x4a, gbc.c());
        EXPECT(0x76, gbc.d());
        EXPECT(0xdb, gbc.e());
        EXPECT(0x31, gbc.h());
        EXPECT(0x6c, gbc.l());
        EXPECT(0x71b4, gbc.sp());
        EXPECT(0xcf16, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcf14));
        EXPECT(0x8c, gbc.readMem(0xcf15));
        // CB 8C 022F
        gbc.setState(0x19be, 0x83a4, 0x7030, 0x55e, 0xedf6, 0x4a16, 0x0, 0x1);
        gbc.writeMem(0x19be, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x70, gbc.a());
        EXPECT(0x5, gbc.b());
        EXPECT(0x5e, gbc.c());
        EXPECT(0xed, gbc.d());
        EXPECT(0xf6, gbc.e());
        EXPECT(0x48, gbc.h());
        EXPECT(0x16, gbc.l());
        EXPECT(0x83a4, gbc.sp());
        EXPECT(0x19c0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 0230
        gbc.setState(0x1a98, 0x4564, 0x51a0, 0x178b, 0x74cc, 0x61b, 0x1, 0x0);
        gbc.writeMem(0x1a98, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x51, gbc.a());
        EXPECT(0x17, gbc.b());
        EXPECT(0x8b, gbc.c());
        EXPECT(0x74, gbc.d());
        EXPECT(0xcc, gbc.e());
        EXPECT(0x4, gbc.h());
        EXPECT(0x1b, gbc.l());
        EXPECT(0x4564, gbc.sp());
        EXPECT(0x1a9a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 0231
        gbc.setState(0x9d50, 0x6462, 0xc520, 0x9541, 0x2823, 0x66a0, 0x0, 0x1);
        gbc.writeMem(0x9d50, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xc5, gbc.a());
        EXPECT(0x95, gbc.b());
        EXPECT(0x41, gbc.c());
        EXPECT(0x28, gbc.d());
        EXPECT(0x23, gbc.e());
        EXPECT(0x64, gbc.h());
        EXPECT(0xa0, gbc.l());
        EXPECT(0x6462, gbc.sp());
        EXPECT(0x9d52, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9d50));
        EXPECT(0x8c, gbc.readMem(0x9d51));
        // CB 8C 0232
        gbc.setState(0xd660, 0x124, 0x99f0, 0x3c55, 0x2859, 0x6f21, 0x1, 0x1);
        gbc.writeMem(0xd660, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x99, gbc.a());
        EXPECT(0x3c, gbc.b());
        EXPECT(0x55, gbc.c());
        EXPECT(0x28, gbc.d());
        EXPECT(0x59, gbc.e());
        EXPECT(0x6d, gbc.h());
        EXPECT(0x21, gbc.l());
        EXPECT(0x124, gbc.sp());
        EXPECT(0xd662, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd660));
        EXPECT(0x8c, gbc.readMem(0xd661));
        // CB 8C 0233
        gbc.setState(0x7775, 0xc28b, 0xd8c0, 0xf313, 0xe6aa, 0xb9c2, 0x0, 0x1);
        gbc.writeMem(0x7775, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xd8, gbc.a());
        EXPECT(0xf3, gbc.b());
        EXPECT(0x13, gbc.c());
        EXPECT(0xe6, gbc.d());
        EXPECT(0xaa, gbc.e());
        EXPECT(0xb9, gbc.h());
        EXPECT(0xc2, gbc.l());
        EXPECT(0xc28b, gbc.sp());
        EXPECT(0x7777, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 0234
        gbc.setState(0x9f9f, 0x60ea, 0x4ce0, 0xdfd4, 0xcb55, 0x4672, 0x1, 0x0);
        gbc.writeMem(0x9f9f, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x4c, gbc.a());
        EXPECT(0xdf, gbc.b());
        EXPECT(0xd4, gbc.c());
        EXPECT(0xcb, gbc.d());
        EXPECT(0x55, gbc.e());
        EXPECT(0x44, gbc.h());
        EXPECT(0x72, gbc.l());
        EXPECT(0x60ea, gbc.sp());
        EXPECT(0x9fa1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9f9f));
        EXPECT(0x8c, gbc.readMem(0x9fa0));
        // CB 8C 0235
        gbc.setState(0xa0b5, 0xca22, 0x2f70, 0x2fb9, 0x63ad, 0x7b0, 0x1, 0x1);
        gbc.writeMem(0xa0b5, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x2f, gbc.a());
        EXPECT(0x2f, gbc.b());
        EXPECT(0xb9, gbc.c());
        EXPECT(0x63, gbc.d());
        EXPECT(0xad, gbc.e());
        EXPECT(0x5, gbc.h());
        EXPECT(0xb0, gbc.l());
        EXPECT(0xca22, gbc.sp());
        EXPECT(0xa0b7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa0b5));
        EXPECT(0x8c, gbc.readMem(0xa0b6));
        // CB 8C 0236
        gbc.setState(0x336f, 0x708f, 0xb030, 0xfa7c, 0x6d5e, 0x307b, 0x0, 0x0);
        gbc.writeMem(0x336f, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xb0, gbc.a());
        EXPECT(0xfa, gbc.b());
        EXPECT(0x7c, gbc.c());
        EXPECT(0x6d, gbc.d());
        EXPECT(0x5e, gbc.e());
        EXPECT(0x30, gbc.h());
        EXPECT(0x7b, gbc.l());
        EXPECT(0x708f, gbc.sp());
        EXPECT(0x3371, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 0237
        gbc.setState(0x8674, 0x98b2, 0x4770, 0xfe51, 0x40bf, 0x3dba, 0x0, 0x1);
        gbc.writeMem(0x8674, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x47, gbc.a());
        EXPECT(0xfe, gbc.b());
        EXPECT(0x51, gbc.c());
        EXPECT(0x40, gbc.d());
        EXPECT(0xbf, gbc.e());
        EXPECT(0x3d, gbc.h());
        EXPECT(0xba, gbc.l());
        EXPECT(0x98b2, gbc.sp());
        EXPECT(0x8676, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8674));
        EXPECT(0x8c, gbc.readMem(0x8675));
        // CB 8C 0238
        gbc.setState(0xc326, 0xaabd, 0xe030, 0x9e52, 0xae52, 0x7a4, 0x0, 0x1);
        gbc.writeMem(0xc326, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xe0, gbc.a());
        EXPECT(0x9e, gbc.b());
        EXPECT(0x52, gbc.c());
        EXPECT(0xae, gbc.d());
        EXPECT(0x52, gbc.e());
        EXPECT(0x5, gbc.h());
        EXPECT(0xa4, gbc.l());
        EXPECT(0xaabd, gbc.sp());
        EXPECT(0xc328, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc326));
        EXPECT(0x8c, gbc.readMem(0xc327));
        // CB 8C 0239
        gbc.setState(0xc73b, 0x9c3f, 0x3ab0, 0xfefa, 0x1f71, 0xaab6, 0x0, 0x1);
        gbc.writeMem(0xc73b, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x3a, gbc.a());
        EXPECT(0xfe, gbc.b());
        EXPECT(0xfa, gbc.c());
        EXPECT(0x1f, gbc.d());
        EXPECT(0x71, gbc.e());
        EXPECT(0xa8, gbc.h());
        EXPECT(0xb6, gbc.l());
        EXPECT(0x9c3f, gbc.sp());
        EXPECT(0xc73d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc73b));
        EXPECT(0x8c, gbc.readMem(0xc73c));
        // CB 8C 023A
        gbc.setState(0xc117, 0xcf6b, 0xae0, 0x5ea3, 0xb645, 0x1767, 0x1, 0x0);
        gbc.writeMem(0xc117, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xa, gbc.a());
        EXPECT(0x5e, gbc.b());
        EXPECT(0xa3, gbc.c());
        EXPECT(0xb6, gbc.d());
        EXPECT(0x45, gbc.e());
        EXPECT(0x15, gbc.h());
        EXPECT(0x67, gbc.l());
        EXPECT(0xcf6b, gbc.sp());
        EXPECT(0xc119, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc117));
        EXPECT(0x8c, gbc.readMem(0xc118));
        // CB 8C 023B
        gbc.setState(0x16d7, 0x1666, 0xa60, 0x1428, 0xc8a, 0xe849, 0x1, 0x0);
        gbc.writeMem(0x16d7, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xa, gbc.a());
        EXPECT(0x14, gbc.b());
        EXPECT(0x28, gbc.c());
        EXPECT(0xc, gbc.d());
        EXPECT(0x8a, gbc.e());
        EXPECT(0xe8, gbc.h());
        EXPECT(0x49, gbc.l());
        EXPECT(0x1666, gbc.sp());
        EXPECT(0x16d9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 023C
        gbc.setState(0x378a, 0x36d5, 0x4f10, 0xa3af, 0xf10e, 0xf8a3, 0x1, 0x0);
        gbc.writeMem(0x378a, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x4f, gbc.a());
        EXPECT(0xa3, gbc.b());
        EXPECT(0xaf, gbc.c());
        EXPECT(0xf1, gbc.d());
        EXPECT(0xe, gbc.e());
        EXPECT(0xf8, gbc.h());
        EXPECT(0xa3, gbc.l());
        EXPECT(0x36d5, gbc.sp());
        EXPECT(0x378c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 023D
        gbc.setState(0xc2c0, 0xa238, 0x2db0, 0x36d9, 0xa7ed, 0x3f7, 0x1, 0x0);
        gbc.writeMem(0xc2c0, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x2d, gbc.a());
        EXPECT(0x36, gbc.b());
        EXPECT(0xd9, gbc.c());
        EXPECT(0xa7, gbc.d());
        EXPECT(0xed, gbc.e());
        EXPECT(0x1, gbc.h());
        EXPECT(0xf7, gbc.l());
        EXPECT(0xa238, gbc.sp());
        EXPECT(0xc2c2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc2c0));
        EXPECT(0x8c, gbc.readMem(0xc2c1));
        // CB 8C 023E
        gbc.setState(0x7e92, 0x16b5, 0xb7c0, 0x12b3, 0x5598, 0x3c23, 0x0, 0x1);
        gbc.writeMem(0x7e92, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xb7, gbc.a());
        EXPECT(0x12, gbc.b());
        EXPECT(0xb3, gbc.c());
        EXPECT(0x55, gbc.d());
        EXPECT(0x98, gbc.e());
        EXPECT(0x3c, gbc.h());
        EXPECT(0x23, gbc.l());
        EXPECT(0x16b5, gbc.sp());
        EXPECT(0x7e94, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 023F
        gbc.setState(0xee32, 0x4708, 0x490, 0x6079, 0x3072, 0x6d3d, 0x1, 0x0);
        gbc.writeMem(0xee32, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x4, gbc.a());
        EXPECT(0x60, gbc.b());
        EXPECT(0x79, gbc.c());
        EXPECT(0x30, gbc.d());
        EXPECT(0x72, gbc.e());
        EXPECT(0x6d, gbc.h());
        EXPECT(0x3d, gbc.l());
        EXPECT(0x4708, gbc.sp());
        EXPECT(0xee34, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xee32));
        EXPECT(0x8c, gbc.readMem(0xee33));
        // CB 8C 0240
        gbc.setState(0x5a69, 0xc38d, 0x2b20, 0x9c74, 0x4f20, 0x59b, 0x1, 0x1);
        gbc.writeMem(0x5a69, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x2b, gbc.a());
        EXPECT(0x9c, gbc.b());
        EXPECT(0x74, gbc.c());
        EXPECT(0x4f, gbc.d());
        EXPECT(0x20, gbc.e());
        EXPECT(0x5, gbc.h());
        EXPECT(0x9b, gbc.l());
        EXPECT(0xc38d, gbc.sp());
        EXPECT(0x5a6b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 0241
        gbc.setState(0xe238, 0xf4c, 0xac40, 0xeecf, 0xe4e2, 0x1972, 0x1, 0x1);
        gbc.writeMem(0xe238, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xac, gbc.a());
        EXPECT(0xee, gbc.b());
        EXPECT(0xcf, gbc.c());
        EXPECT(0xe4, gbc.d());
        EXPECT(0xe2, gbc.e());
        EXPECT(0x19, gbc.h());
        EXPECT(0x72, gbc.l());
        EXPECT(0xf4c, gbc.sp());
        EXPECT(0xe23a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe238));
        EXPECT(0x8c, gbc.readMem(0xe239));
        // CB 8C 0242
        gbc.setState(0x856d, 0xe1a6, 0xce30, 0xf13c, 0x22e9, 0xdab8, 0x1, 0x0);
        gbc.writeMem(0x856d, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xce, gbc.a());
        EXPECT(0xf1, gbc.b());
        EXPECT(0x3c, gbc.c());
        EXPECT(0x22, gbc.d());
        EXPECT(0xe9, gbc.e());
        EXPECT(0xd8, gbc.h());
        EXPECT(0xb8, gbc.l());
        EXPECT(0xe1a6, gbc.sp());
        EXPECT(0x856f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x856d));
        EXPECT(0x8c, gbc.readMem(0x856e));
        // CB 8C 0243
        gbc.setState(0x63a9, 0x74c1, 0xed60, 0xe51f, 0x9759, 0x8061, 0x1, 0x1);
        gbc.writeMem(0x63a9, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xed, gbc.a());
        EXPECT(0xe5, gbc.b());
        EXPECT(0x1f, gbc.c());
        EXPECT(0x97, gbc.d());
        EXPECT(0x59, gbc.e());
        EXPECT(0x80, gbc.h());
        EXPECT(0x61, gbc.l());
        EXPECT(0x74c1, gbc.sp());
        EXPECT(0x63ab, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 0245
        gbc.setState(0x1387, 0x30a4, 0x3f30, 0x5b9f, 0x7cfb, 0xbf4c, 0x0, 0x1);
        gbc.writeMem(0x1387, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x3f, gbc.a());
        EXPECT(0x5b, gbc.b());
        EXPECT(0x9f, gbc.c());
        EXPECT(0x7c, gbc.d());
        EXPECT(0xfb, gbc.e());
        EXPECT(0xbd, gbc.h());
        EXPECT(0x4c, gbc.l());
        EXPECT(0x30a4, gbc.sp());
        EXPECT(0x1389, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 0246
        gbc.setState(0x153f, 0xc29f, 0xda20, 0xfa4b, 0x4fa, 0xf358, 0x0, 0x1);
        gbc.writeMem(0x153f, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xda, gbc.a());
        EXPECT(0xfa, gbc.b());
        EXPECT(0x4b, gbc.c());
        EXPECT(0x4, gbc.d());
        EXPECT(0xfa, gbc.e());
        EXPECT(0xf1, gbc.h());
        EXPECT(0x58, gbc.l());
        EXPECT(0xc29f, gbc.sp());
        EXPECT(0x1541, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 0247
        gbc.setState(0xb801, 0x4c63, 0x6ca0, 0xc5b5, 0x1e88, 0x64a5, 0x1, 0x0);
        gbc.writeMem(0xb801, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x6c, gbc.a());
        EXPECT(0xc5, gbc.b());
        EXPECT(0xb5, gbc.c());
        EXPECT(0x1e, gbc.d());
        EXPECT(0x88, gbc.e());
        EXPECT(0x64, gbc.h());
        EXPECT(0xa5, gbc.l());
        EXPECT(0x4c63, gbc.sp());
        EXPECT(0xb803, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb801));
        EXPECT(0x8c, gbc.readMem(0xb802));
        // CB 8C 0248
        gbc.setState(0x537, 0x9276, 0xc050, 0x515a, 0xeb43, 0x1e33, 0x1, 0x1);
        gbc.writeMem(0x537, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xc0, gbc.a());
        EXPECT(0x51, gbc.b());
        EXPECT(0x5a, gbc.c());
        EXPECT(0xeb, gbc.d());
        EXPECT(0x43, gbc.e());
        EXPECT(0x1c, gbc.h());
        EXPECT(0x33, gbc.l());
        EXPECT(0x9276, gbc.sp());
        EXPECT(0x539, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 0249
        gbc.setState(0x289a, 0xdc59, 0x4ef0, 0xf7a, 0x363f, 0x5c85, 0x0, 0x0);
        gbc.writeMem(0x289a, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x4e, gbc.a());
        EXPECT(0xf, gbc.b());
        EXPECT(0x7a, gbc.c());
        EXPECT(0x36, gbc.d());
        EXPECT(0x3f, gbc.e());
        EXPECT(0x5c, gbc.h());
        EXPECT(0x85, gbc.l());
        EXPECT(0xdc59, gbc.sp());
        EXPECT(0x289c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 024A
        gbc.setState(0xbec4, 0x24ba, 0x7b60, 0x5c61, 0x38f1, 0xbf0, 0x0, 0x0);
        gbc.writeMem(0xbec4, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x7b, gbc.a());
        EXPECT(0x5c, gbc.b());
        EXPECT(0x61, gbc.c());
        EXPECT(0x38, gbc.d());
        EXPECT(0xf1, gbc.e());
        EXPECT(0x9, gbc.h());
        EXPECT(0xf0, gbc.l());
        EXPECT(0x24ba, gbc.sp());
        EXPECT(0xbec6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbec4));
        EXPECT(0x8c, gbc.readMem(0xbec5));
        // CB 8C 024B
        gbc.setState(0x7926, 0xf018, 0x40d0, 0x757f, 0x21b9, 0x5c5, 0x1, 0x0);
        gbc.writeMem(0x7926, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x40, gbc.a());
        EXPECT(0x75, gbc.b());
        EXPECT(0x7f, gbc.c());
        EXPECT(0x21, gbc.d());
        EXPECT(0xb9, gbc.e());
        EXPECT(0x5, gbc.h());
        EXPECT(0xc5, gbc.l());
        EXPECT(0xf018, gbc.sp());
        EXPECT(0x7928, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 024D
        gbc.setState(0x9046, 0xd1a4, 0xd3e0, 0x10bd, 0xfc48, 0x157a, 0x1, 0x1);
        gbc.writeMem(0x9046, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xd3, gbc.a());
        EXPECT(0x10, gbc.b());
        EXPECT(0xbd, gbc.c());
        EXPECT(0xfc, gbc.d());
        EXPECT(0x48, gbc.e());
        EXPECT(0x15, gbc.h());
        EXPECT(0x7a, gbc.l());
        EXPECT(0xd1a4, gbc.sp());
        EXPECT(0x9048, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9046));
        EXPECT(0x8c, gbc.readMem(0x9047));
        // CB 8C 024E
        gbc.setState(0x5f2a, 0x9a00, 0xf6f0, 0x793, 0x15a6, 0xce8, 0x0, 0x1);
        gbc.writeMem(0x5f2a, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xf6, gbc.a());
        EXPECT(0x7, gbc.b());
        EXPECT(0x93, gbc.c());
        EXPECT(0x15, gbc.d());
        EXPECT(0xa6, gbc.e());
        EXPECT(0xc, gbc.h());
        EXPECT(0xe8, gbc.l());
        EXPECT(0x9a00, gbc.sp());
        EXPECT(0x5f2c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 024F
        gbc.setState(0xb627, 0x7d24, 0x99f0, 0xeef0, 0x6720, 0x5d6d, 0x1, 0x1);
        gbc.writeMem(0xb627, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x99, gbc.a());
        EXPECT(0xee, gbc.b());
        EXPECT(0xf0, gbc.c());
        EXPECT(0x67, gbc.d());
        EXPECT(0x20, gbc.e());
        EXPECT(0x5d, gbc.h());
        EXPECT(0x6d, gbc.l());
        EXPECT(0x7d24, gbc.sp());
        EXPECT(0xb629, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb627));
        EXPECT(0x8c, gbc.readMem(0xb628));
        // CB 8C 0250
        gbc.setState(0x2a6b, 0xf60b, 0x7150, 0xd3db, 0x4390, 0x5005, 0x1, 0x1);
        gbc.writeMem(0x2a6b, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x71, gbc.a());
        EXPECT(0xd3, gbc.b());
        EXPECT(0xdb, gbc.c());
        EXPECT(0x43, gbc.d());
        EXPECT(0x90, gbc.e());
        EXPECT(0x50, gbc.h());
        EXPECT(0x5, gbc.l());
        EXPECT(0xf60b, gbc.sp());
        EXPECT(0x2a6d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 0251
        gbc.setState(0xa138, 0x8899, 0xee30, 0xcb6d, 0x2aa4, 0x2e8d, 0x0, 0x1);
        gbc.writeMem(0xa138, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xee, gbc.a());
        EXPECT(0xcb, gbc.b());
        EXPECT(0x6d, gbc.c());
        EXPECT(0x2a, gbc.d());
        EXPECT(0xa4, gbc.e());
        EXPECT(0x2c, gbc.h());
        EXPECT(0x8d, gbc.l());
        EXPECT(0x8899, gbc.sp());
        EXPECT(0xa13a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa138));
        EXPECT(0x8c, gbc.readMem(0xa139));
        // CB 8C 0252
        gbc.setState(0xbf1d, 0x47db, 0x3220, 0x77b8, 0x4c77, 0xe651, 0x0, 0x1);
        gbc.writeMem(0xbf1d, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x32, gbc.a());
        EXPECT(0x77, gbc.b());
        EXPECT(0xb8, gbc.c());
        EXPECT(0x4c, gbc.d());
        EXPECT(0x77, gbc.e());
        EXPECT(0xe4, gbc.h());
        EXPECT(0x51, gbc.l());
        EXPECT(0x47db, gbc.sp());
        EXPECT(0xbf1f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbf1d));
        EXPECT(0x8c, gbc.readMem(0xbf1e));
        // CB 8C 0253
        gbc.setState(0xee65, 0x29ce, 0x6fd0, 0x4cf5, 0x530f, 0x2a89, 0x1, 0x1);
        gbc.writeMem(0xee65, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x6f, gbc.a());
        EXPECT(0x4c, gbc.b());
        EXPECT(0xf5, gbc.c());
        EXPECT(0x53, gbc.d());
        EXPECT(0xf, gbc.e());
        EXPECT(0x28, gbc.h());
        EXPECT(0x89, gbc.l());
        EXPECT(0x29ce, gbc.sp());
        EXPECT(0xee67, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xee65));
        EXPECT(0x8c, gbc.readMem(0xee66));
        // CB 8C 0254
        gbc.setState(0xa66e, 0xde24, 0x46c0, 0x7144, 0x4a90, 0x228b, 0x0, 0x0);
        gbc.writeMem(0xa66e, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x46, gbc.a());
        EXPECT(0x71, gbc.b());
        EXPECT(0x44, gbc.c());
        EXPECT(0x4a, gbc.d());
        EXPECT(0x90, gbc.e());
        EXPECT(0x20, gbc.h());
        EXPECT(0x8b, gbc.l());
        EXPECT(0xde24, gbc.sp());
        EXPECT(0xa670, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa66e));
        EXPECT(0x8c, gbc.readMem(0xa66f));
        // CB 8C 0255
        gbc.setState(0x5c9c, 0x2c60, 0x6790, 0xe974, 0x84da, 0x1efc, 0x0, 0x1);
        gbc.writeMem(0x5c9c, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x67, gbc.a());
        EXPECT(0xe9, gbc.b());
        EXPECT(0x74, gbc.c());
        EXPECT(0x84, gbc.d());
        EXPECT(0xda, gbc.e());
        EXPECT(0x1c, gbc.h());
        EXPECT(0xfc, gbc.l());
        EXPECT(0x2c60, gbc.sp());
        EXPECT(0x5c9e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 0256
        gbc.setState(0x3120, 0x615a, 0xd460, 0xbdb7, 0xa65c, 0x2964, 0x0, 0x0);
        gbc.writeMem(0x3120, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xd4, gbc.a());
        EXPECT(0xbd, gbc.b());
        EXPECT(0xb7, gbc.c());
        EXPECT(0xa6, gbc.d());
        EXPECT(0x5c, gbc.e());
        EXPECT(0x29, gbc.h());
        EXPECT(0x64, gbc.l());
        EXPECT(0x615a, gbc.sp());
        EXPECT(0x3122, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 0257
        gbc.setState(0xbdac, 0xb196, 0xd0, 0xe85c, 0x8618, 0x323a, 0x1, 0x1);
        gbc.writeMem(0xbdac, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xe8, gbc.b());
        EXPECT(0x5c, gbc.c());
        EXPECT(0x86, gbc.d());
        EXPECT(0x18, gbc.e());
        EXPECT(0x30, gbc.h());
        EXPECT(0x3a, gbc.l());
        EXPECT(0xb196, gbc.sp());
        EXPECT(0xbdae, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbdac));
        EXPECT(0x8c, gbc.readMem(0xbdad));
        // CB 8C 0258
        gbc.setState(0xed22, 0x1935, 0x7490, 0x8a68, 0xa110, 0x807, 0x0, 0x0);
        gbc.writeMem(0xed22, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x74, gbc.a());
        EXPECT(0x8a, gbc.b());
        EXPECT(0x68, gbc.c());
        EXPECT(0xa1, gbc.d());
        EXPECT(0x10, gbc.e());
        EXPECT(0x8, gbc.h());
        EXPECT(0x7, gbc.l());
        EXPECT(0x1935, gbc.sp());
        EXPECT(0xed24, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xed22));
        EXPECT(0x8c, gbc.readMem(0xed23));
        // CB 8C 0259
        gbc.setState(0xac21, 0x9068, 0x5380, 0x37f5, 0x6658, 0xbf0c, 0x0, 0x0);
        gbc.writeMem(0xac21, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x53, gbc.a());
        EXPECT(0x37, gbc.b());
        EXPECT(0xf5, gbc.c());
        EXPECT(0x66, gbc.d());
        EXPECT(0x58, gbc.e());
        EXPECT(0xbd, gbc.h());
        EXPECT(0xc, gbc.l());
        EXPECT(0x9068, gbc.sp());
        EXPECT(0xac23, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xac21));
        EXPECT(0x8c, gbc.readMem(0xac22));
        // CB 8C 025A
        gbc.setState(0x79ae, 0x5504, 0x410, 0x839e, 0x8ffe, 0xfcbd, 0x0, 0x0);
        gbc.writeMem(0x79ae, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x4, gbc.a());
        EXPECT(0x83, gbc.b());
        EXPECT(0x9e, gbc.c());
        EXPECT(0x8f, gbc.d());
        EXPECT(0xfe, gbc.e());
        EXPECT(0xfc, gbc.h());
        EXPECT(0xbd, gbc.l());
        EXPECT(0x5504, gbc.sp());
        EXPECT(0x79b0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 025B
        gbc.setState(0x686e, 0xdd54, 0x3bc0, 0x4331, 0xa2bd, 0x45f9, 0x0, 0x1);
        gbc.writeMem(0x686e, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x3b, gbc.a());
        EXPECT(0x43, gbc.b());
        EXPECT(0x31, gbc.c());
        EXPECT(0xa2, gbc.d());
        EXPECT(0xbd, gbc.e());
        EXPECT(0x45, gbc.h());
        EXPECT(0xf9, gbc.l());
        EXPECT(0xdd54, gbc.sp());
        EXPECT(0x6870, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 025C
        gbc.setState(0xa8e1, 0xccdf, 0x2830, 0x1149, 0xbfa1, 0x2077, 0x1, 0x0);
        gbc.writeMem(0xa8e1, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x28, gbc.a());
        EXPECT(0x11, gbc.b());
        EXPECT(0x49, gbc.c());
        EXPECT(0xbf, gbc.d());
        EXPECT(0xa1, gbc.e());
        EXPECT(0x20, gbc.h());
        EXPECT(0x77, gbc.l());
        EXPECT(0xccdf, gbc.sp());
        EXPECT(0xa8e3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa8e1));
        EXPECT(0x8c, gbc.readMem(0xa8e2));
        // CB 8C 025D
        gbc.setState(0x771f, 0x4c8c, 0x7f0, 0x930, 0x2e09, 0x4840, 0x0, 0x1);
        gbc.writeMem(0x771f, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x7, gbc.a());
        EXPECT(0x9, gbc.b());
        EXPECT(0x30, gbc.c());
        EXPECT(0x2e, gbc.d());
        EXPECT(0x9, gbc.e());
        EXPECT(0x48, gbc.h());
        EXPECT(0x40, gbc.l());
        EXPECT(0x4c8c, gbc.sp());
        EXPECT(0x7721, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 025E
        gbc.setState(0x3adf, 0xd52d, 0x8100, 0xe73f, 0xb364, 0x5ab6, 0x0, 0x1);
        gbc.writeMem(0x3adf, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x81, gbc.a());
        EXPECT(0xe7, gbc.b());
        EXPECT(0x3f, gbc.c());
        EXPECT(0xb3, gbc.d());
        EXPECT(0x64, gbc.e());
        EXPECT(0x58, gbc.h());
        EXPECT(0xb6, gbc.l());
        EXPECT(0xd52d, gbc.sp());
        EXPECT(0x3ae1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 025F
        gbc.setState(0xad34, 0xeb9e, 0xfeb0, 0x91e7, 0x68f6, 0x10b1, 0x1, 0x0);
        gbc.writeMem(0xad34, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xfe, gbc.a());
        EXPECT(0x91, gbc.b());
        EXPECT(0xe7, gbc.c());
        EXPECT(0x68, gbc.d());
        EXPECT(0xf6, gbc.e());
        EXPECT(0x10, gbc.h());
        EXPECT(0xb1, gbc.l());
        EXPECT(0xeb9e, gbc.sp());
        EXPECT(0xad36, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xad34));
        EXPECT(0x8c, gbc.readMem(0xad35));
        // CB 8C 0260
        gbc.setState(0x3bd9, 0x2ed, 0xfc50, 0x241b, 0x4fe5, 0x74fc, 0x0, 0x0);
        gbc.writeMem(0x3bd9, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xfc, gbc.a());
        EXPECT(0x24, gbc.b());
        EXPECT(0x1b, gbc.c());
        EXPECT(0x4f, gbc.d());
        EXPECT(0xe5, gbc.e());
        EXPECT(0x74, gbc.h());
        EXPECT(0xfc, gbc.l());
        EXPECT(0x2ed, gbc.sp());
        EXPECT(0x3bdb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 0261
        gbc.setState(0x258c, 0x4df5, 0xadb0, 0x568, 0xf3a0, 0x65c5, 0x0, 0x1);
        gbc.writeMem(0x258c, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xad, gbc.a());
        EXPECT(0x5, gbc.b());
        EXPECT(0x68, gbc.c());
        EXPECT(0xf3, gbc.d());
        EXPECT(0xa0, gbc.e());
        EXPECT(0x65, gbc.h());
        EXPECT(0xc5, gbc.l());
        EXPECT(0x4df5, gbc.sp());
        EXPECT(0x258e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 0262
        gbc.setState(0x3dad, 0x4d1a, 0x1ef0, 0x955b, 0xd34e, 0x874, 0x1, 0x1);
        gbc.writeMem(0x3dad, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x1e, gbc.a());
        EXPECT(0x95, gbc.b());
        EXPECT(0x5b, gbc.c());
        EXPECT(0xd3, gbc.d());
        EXPECT(0x4e, gbc.e());
        EXPECT(0x8, gbc.h());
        EXPECT(0x74, gbc.l());
        EXPECT(0x4d1a, gbc.sp());
        EXPECT(0x3daf, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 0264
        gbc.setState(0xa1e5, 0xafdb, 0xec80, 0xce8f, 0x8363, 0xf268, 0x1, 0x0);
        gbc.writeMem(0xa1e5, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xec, gbc.a());
        EXPECT(0xce, gbc.b());
        EXPECT(0x8f, gbc.c());
        EXPECT(0x83, gbc.d());
        EXPECT(0x63, gbc.e());
        EXPECT(0xf0, gbc.h());
        EXPECT(0x68, gbc.l());
        EXPECT(0xafdb, gbc.sp());
        EXPECT(0xa1e7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa1e5));
        EXPECT(0x8c, gbc.readMem(0xa1e6));
        // CB 8C 0265
        gbc.setState(0x87b2, 0xc8d, 0x1760, 0x8bb4, 0xa1a9, 0xd643, 0x1, 0x1);
        gbc.writeMem(0x87b2, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x17, gbc.a());
        EXPECT(0x8b, gbc.b());
        EXPECT(0xb4, gbc.c());
        EXPECT(0xa1, gbc.d());
        EXPECT(0xa9, gbc.e());
        EXPECT(0xd4, gbc.h());
        EXPECT(0x43, gbc.l());
        EXPECT(0xc8d, gbc.sp());
        EXPECT(0x87b4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x87b2));
        EXPECT(0x8c, gbc.readMem(0x87b3));
        // CB 8C 0266
        gbc.setState(0x6a5b, 0x7318, 0x4260, 0x8e83, 0x3172, 0x3b88, 0x0, 0x0);
        gbc.writeMem(0x6a5b, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x42, gbc.a());
        EXPECT(0x8e, gbc.b());
        EXPECT(0x83, gbc.c());
        EXPECT(0x31, gbc.d());
        EXPECT(0x72, gbc.e());
        EXPECT(0x39, gbc.h());
        EXPECT(0x88, gbc.l());
        EXPECT(0x7318, gbc.sp());
        EXPECT(0x6a5d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 0267
        gbc.setState(0x6e7c, 0xde5c, 0xf8e0, 0xc985, 0x6da6, 0xc4b6, 0x1, 0x1);
        gbc.writeMem(0x6e7c, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xf8, gbc.a());
        EXPECT(0xc9, gbc.b());
        EXPECT(0x85, gbc.c());
        EXPECT(0x6d, gbc.d());
        EXPECT(0xa6, gbc.e());
        EXPECT(0xc4, gbc.h());
        EXPECT(0xb6, gbc.l());
        EXPECT(0xde5c, gbc.sp());
        EXPECT(0x6e7e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 0268
        gbc.setState(0xc24a, 0x517e, 0x6230, 0xf8d6, 0xed58, 0x2d3c, 0x0, 0x1);
        gbc.writeMem(0xc24a, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x62, gbc.a());
        EXPECT(0xf8, gbc.b());
        EXPECT(0xd6, gbc.c());
        EXPECT(0xed, gbc.d());
        EXPECT(0x58, gbc.e());
        EXPECT(0x2d, gbc.h());
        EXPECT(0x3c, gbc.l());
        EXPECT(0x517e, gbc.sp());
        EXPECT(0xc24c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc24a));
        EXPECT(0x8c, gbc.readMem(0xc24b));
        // CB 8C 0269
        gbc.setState(0x8939, 0x7375, 0x2fd0, 0x584c, 0x5173, 0x6130, 0x0, 0x1);
        gbc.writeMem(0x8939, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x2f, gbc.a());
        EXPECT(0x58, gbc.b());
        EXPECT(0x4c, gbc.c());
        EXPECT(0x51, gbc.d());
        EXPECT(0x73, gbc.e());
        EXPECT(0x61, gbc.h());
        EXPECT(0x30, gbc.l());
        EXPECT(0x7375, gbc.sp());
        EXPECT(0x893b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8939));
        EXPECT(0x8c, gbc.readMem(0x893a));
        // CB 8C 026A
        gbc.setState(0xa41d, 0x1d5, 0x1460, 0x5f78, 0x5931, 0x4969, 0x1, 0x0);
        gbc.writeMem(0xa41d, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x14, gbc.a());
        EXPECT(0x5f, gbc.b());
        EXPECT(0x78, gbc.c());
        EXPECT(0x59, gbc.d());
        EXPECT(0x31, gbc.e());
        EXPECT(0x49, gbc.h());
        EXPECT(0x69, gbc.l());
        EXPECT(0x1d5, gbc.sp());
        EXPECT(0xa41f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa41d));
        EXPECT(0x8c, gbc.readMem(0xa41e));
        // CB 8C 026B
        gbc.setState(0x53e2, 0xcbdb, 0x44c0, 0xdfca, 0x4f65, 0x2213, 0x0, 0x0);
        gbc.writeMem(0x53e2, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x44, gbc.a());
        EXPECT(0xdf, gbc.b());
        EXPECT(0xca, gbc.c());
        EXPECT(0x4f, gbc.d());
        EXPECT(0x65, gbc.e());
        EXPECT(0x20, gbc.h());
        EXPECT(0x13, gbc.l());
        EXPECT(0xcbdb, gbc.sp());
        EXPECT(0x53e4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 026D
        gbc.setState(0xa778, 0x10a1, 0xd0c0, 0x3e91, 0xa5de, 0x4c63, 0x0, 0x0);
        gbc.writeMem(0xa778, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xd0, gbc.a());
        EXPECT(0x3e, gbc.b());
        EXPECT(0x91, gbc.c());
        EXPECT(0xa5, gbc.d());
        EXPECT(0xde, gbc.e());
        EXPECT(0x4c, gbc.h());
        EXPECT(0x63, gbc.l());
        EXPECT(0x10a1, gbc.sp());
        EXPECT(0xa77a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa778));
        EXPECT(0x8c, gbc.readMem(0xa779));
        // CB 8C 026E
        gbc.setState(0x10dd, 0x9752, 0x14b0, 0x57a5, 0xe5c, 0xa363, 0x0, 0x0);
        gbc.writeMem(0x10dd, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x14, gbc.a());
        EXPECT(0x57, gbc.b());
        EXPECT(0xa5, gbc.c());
        EXPECT(0xe, gbc.d());
        EXPECT(0x5c, gbc.e());
        EXPECT(0xa1, gbc.h());
        EXPECT(0x63, gbc.l());
        EXPECT(0x9752, gbc.sp());
        EXPECT(0x10df, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 026F
        gbc.setState(0x6627, 0x5246, 0x3b70, 0x914, 0xd65c, 0x4253, 0x0, 0x1);
        gbc.writeMem(0x6627, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x3b, gbc.a());
        EXPECT(0x9, gbc.b());
        EXPECT(0x14, gbc.c());
        EXPECT(0xd6, gbc.d());
        EXPECT(0x5c, gbc.e());
        EXPECT(0x40, gbc.h());
        EXPECT(0x53, gbc.l());
        EXPECT(0x5246, gbc.sp());
        EXPECT(0x6629, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 0270
        gbc.setState(0x11c0, 0x53b5, 0x2950, 0x8f32, 0x2bc5, 0xe5e4, 0x1, 0x1);
        gbc.writeMem(0x11c0, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x29, gbc.a());
        EXPECT(0x8f, gbc.b());
        EXPECT(0x32, gbc.c());
        EXPECT(0x2b, gbc.d());
        EXPECT(0xc5, gbc.e());
        EXPECT(0xe5, gbc.h());
        EXPECT(0xe4, gbc.l());
        EXPECT(0x53b5, gbc.sp());
        EXPECT(0x11c2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 0271
        gbc.setState(0xc1e0, 0xe0c6, 0xb1d0, 0x670c, 0xb8f7, 0xf2a9, 0x0, 0x0);
        gbc.writeMem(0xc1e0, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xb1, gbc.a());
        EXPECT(0x67, gbc.b());
        EXPECT(0xc, gbc.c());
        EXPECT(0xb8, gbc.d());
        EXPECT(0xf7, gbc.e());
        EXPECT(0xf0, gbc.h());
        EXPECT(0xa9, gbc.l());
        EXPECT(0xe0c6, gbc.sp());
        EXPECT(0xc1e2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc1e0));
        EXPECT(0x8c, gbc.readMem(0xc1e1));
        // CB 8C 0272
        gbc.setState(0xdc5c, 0x5f8c, 0xa0, 0x1819, 0xa77b, 0x46b0, 0x1, 0x1);
        gbc.writeMem(0xdc5c, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x18, gbc.b());
        EXPECT(0x19, gbc.c());
        EXPECT(0xa7, gbc.d());
        EXPECT(0x7b, gbc.e());
        EXPECT(0x44, gbc.h());
        EXPECT(0xb0, gbc.l());
        EXPECT(0x5f8c, gbc.sp());
        EXPECT(0xdc5e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdc5c));
        EXPECT(0x8c, gbc.readMem(0xdc5d));
        // CB 8C 0273
        gbc.setState(0x690a, 0x7c7c, 0x8a90, 0xdcc, 0x4e0a, 0x952, 0x1, 0x1);
        gbc.writeMem(0x690a, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x8a, gbc.a());
        EXPECT(0xd, gbc.b());
        EXPECT(0xcc, gbc.c());
        EXPECT(0x4e, gbc.d());
        EXPECT(0xa, gbc.e());
        EXPECT(0x9, gbc.h());
        EXPECT(0x52, gbc.l());
        EXPECT(0x7c7c, gbc.sp());
        EXPECT(0x690c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 0274
        gbc.setState(0xe8c8, 0xbdcf, 0xd0, 0x2bfb, 0x2b80, 0x746e, 0x1, 0x1);
        gbc.writeMem(0xe8c8, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x2b, gbc.b());
        EXPECT(0xfb, gbc.c());
        EXPECT(0x2b, gbc.d());
        EXPECT(0x80, gbc.e());
        EXPECT(0x74, gbc.h());
        EXPECT(0x6e, gbc.l());
        EXPECT(0xbdcf, gbc.sp());
        EXPECT(0xe8ca, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe8c8));
        EXPECT(0x8c, gbc.readMem(0xe8c9));
        // CB 8C 0275
        gbc.setState(0x45f8, 0x26d7, 0xfb20, 0x444d, 0x328, 0xda28, 0x0, 0x0);
        gbc.writeMem(0x45f8, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xfb, gbc.a());
        EXPECT(0x44, gbc.b());
        EXPECT(0x4d, gbc.c());
        EXPECT(0x3, gbc.d());
        EXPECT(0x28, gbc.e());
        EXPECT(0xd8, gbc.h());
        EXPECT(0x28, gbc.l());
        EXPECT(0x26d7, gbc.sp());
        EXPECT(0x45fa, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 0276
        gbc.setState(0xa754, 0x72d2, 0x570, 0x3831, 0x7087, 0x5a36, 0x0, 0x1);
        gbc.writeMem(0xa754, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x5, gbc.a());
        EXPECT(0x38, gbc.b());
        EXPECT(0x31, gbc.c());
        EXPECT(0x70, gbc.d());
        EXPECT(0x87, gbc.e());
        EXPECT(0x58, gbc.h());
        EXPECT(0x36, gbc.l());
        EXPECT(0x72d2, gbc.sp());
        EXPECT(0xa756, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa754));
        EXPECT(0x8c, gbc.readMem(0xa755));
        // CB 8C 0277
        gbc.setState(0x1c0b, 0xd11c, 0x6af0, 0x3cc9, 0xe61c, 0xcdd, 0x1, 0x1);
        gbc.writeMem(0x1c0b, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x6a, gbc.a());
        EXPECT(0x3c, gbc.b());
        EXPECT(0xc9, gbc.c());
        EXPECT(0xe6, gbc.d());
        EXPECT(0x1c, gbc.e());
        EXPECT(0xc, gbc.h());
        EXPECT(0xdd, gbc.l());
        EXPECT(0xd11c, gbc.sp());
        EXPECT(0x1c0d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 0278
        gbc.setState(0x664e, 0xefdc, 0xfa20, 0x6dd7, 0xfc9f, 0x1fd0, 0x1, 0x0);
        gbc.writeMem(0x664e, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xfa, gbc.a());
        EXPECT(0x6d, gbc.b());
        EXPECT(0xd7, gbc.c());
        EXPECT(0xfc, gbc.d());
        EXPECT(0x9f, gbc.e());
        EXPECT(0x1d, gbc.h());
        EXPECT(0xd0, gbc.l());
        EXPECT(0xefdc, gbc.sp());
        EXPECT(0x6650, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 0279
        gbc.setState(0x65c7, 0x5de7, 0xe240, 0x582b, 0x91b7, 0x7074, 0x0, 0x1);
        gbc.writeMem(0x65c7, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xe2, gbc.a());
        EXPECT(0x58, gbc.b());
        EXPECT(0x2b, gbc.c());
        EXPECT(0x91, gbc.d());
        EXPECT(0xb7, gbc.e());
        EXPECT(0x70, gbc.h());
        EXPECT(0x74, gbc.l());
        EXPECT(0x5de7, gbc.sp());
        EXPECT(0x65c9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 027A
        gbc.setState(0x83ce, 0x9968, 0x9570, 0xa3ee, 0x8fef, 0x43d, 0x1, 0x1);
        gbc.writeMem(0x83ce, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x95, gbc.a());
        EXPECT(0xa3, gbc.b());
        EXPECT(0xee, gbc.c());
        EXPECT(0x8f, gbc.d());
        EXPECT(0xef, gbc.e());
        EXPECT(0x4, gbc.h());
        EXPECT(0x3d, gbc.l());
        EXPECT(0x9968, gbc.sp());
        EXPECT(0x83d0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x83ce));
        EXPECT(0x8c, gbc.readMem(0x83cf));
        // CB 8C 027B
        gbc.setState(0x97, 0x29f0, 0xa10, 0xfff1, 0xafd9, 0xe2a4, 0x1, 0x1);
        gbc.writeMem(0x97, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xa, gbc.a());
        EXPECT(0xff, gbc.b());
        EXPECT(0xf1, gbc.c());
        EXPECT(0xaf, gbc.d());
        EXPECT(0xd9, gbc.e());
        EXPECT(0xe0, gbc.h());
        EXPECT(0xa4, gbc.l());
        EXPECT(0x29f0, gbc.sp());
        EXPECT(0x99, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 027C
        gbc.setState(0x7b2c, 0xe888, 0x9d20, 0x51f5, 0x2878, 0x5687, 0x0, 0x0);
        gbc.writeMem(0x7b2c, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x9d, gbc.a());
        EXPECT(0x51, gbc.b());
        EXPECT(0xf5, gbc.c());
        EXPECT(0x28, gbc.d());
        EXPECT(0x78, gbc.e());
        EXPECT(0x54, gbc.h());
        EXPECT(0x87, gbc.l());
        EXPECT(0xe888, gbc.sp());
        EXPECT(0x7b2e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 027D
        gbc.setState(0xefa2, 0x4eb6, 0xe460, 0x1f0d, 0xa87b, 0x660f, 0x1, 0x0);
        gbc.writeMem(0xefa2, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xe4, gbc.a());
        EXPECT(0x1f, gbc.b());
        EXPECT(0xd, gbc.c());
        EXPECT(0xa8, gbc.d());
        EXPECT(0x7b, gbc.e());
        EXPECT(0x64, gbc.h());
        EXPECT(0xf, gbc.l());
        EXPECT(0x4eb6, gbc.sp());
        EXPECT(0xefa4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xefa2));
        EXPECT(0x8c, gbc.readMem(0xefa3));
        // CB 8C 027E
        gbc.setState(0x578e, 0x921, 0xc4b0, 0xbdcc, 0xdad7, 0xd3fc, 0x0, 0x1);
        gbc.writeMem(0x578e, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xc4, gbc.a());
        EXPECT(0xbd, gbc.b());
        EXPECT(0xcc, gbc.c());
        EXPECT(0xda, gbc.d());
        EXPECT(0xd7, gbc.e());
        EXPECT(0xd1, gbc.h());
        EXPECT(0xfc, gbc.l());
        EXPECT(0x921, gbc.sp());
        EXPECT(0x5790, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 027F
        gbc.setState(0x7ee0, 0xdfd6, 0xcdd0, 0xe976, 0xcda2, 0x58cd, 0x0, 0x1);
        gbc.writeMem(0x7ee0, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xcd, gbc.a());
        EXPECT(0xe9, gbc.b());
        EXPECT(0x76, gbc.c());
        EXPECT(0xcd, gbc.d());
        EXPECT(0xa2, gbc.e());
        EXPECT(0x58, gbc.h());
        EXPECT(0xcd, gbc.l());
        EXPECT(0xdfd6, gbc.sp());
        EXPECT(0x7ee2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 0280
        gbc.setState(0x2a30, 0x21f1, 0x650, 0xd9b3, 0xb871, 0x3ce1, 0x1, 0x0);
        gbc.writeMem(0x2a30, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x6, gbc.a());
        EXPECT(0xd9, gbc.b());
        EXPECT(0xb3, gbc.c());
        EXPECT(0xb8, gbc.d());
        EXPECT(0x71, gbc.e());
        EXPECT(0x3c, gbc.h());
        EXPECT(0xe1, gbc.l());
        EXPECT(0x21f1, gbc.sp());
        EXPECT(0x2a32, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 0281
        gbc.setState(0x5352, 0xb0f9, 0xfa10, 0xfd58, 0x5afb, 0x9b55, 0x1, 0x1);
        gbc.writeMem(0x5352, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xfa, gbc.a());
        EXPECT(0xfd, gbc.b());
        EXPECT(0x58, gbc.c());
        EXPECT(0x5a, gbc.d());
        EXPECT(0xfb, gbc.e());
        EXPECT(0x99, gbc.h());
        EXPECT(0x55, gbc.l());
        EXPECT(0xb0f9, gbc.sp());
        EXPECT(0x5354, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 0282
        gbc.setState(0x990e, 0xbd20, 0xe6a0, 0x794e, 0x2936, 0xbfa, 0x1, 0x1);
        gbc.writeMem(0x990e, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xe6, gbc.a());
        EXPECT(0x79, gbc.b());
        EXPECT(0x4e, gbc.c());
        EXPECT(0x29, gbc.d());
        EXPECT(0x36, gbc.e());
        EXPECT(0x9, gbc.h());
        EXPECT(0xfa, gbc.l());
        EXPECT(0xbd20, gbc.sp());
        EXPECT(0x9910, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x990e));
        EXPECT(0x8c, gbc.readMem(0x990f));
        // CB 8C 0283
        gbc.setState(0xebfe, 0x93e6, 0xa270, 0x92c6, 0xc68d, 0x68a5, 0x0, 0x1);
        gbc.writeMem(0xebfe, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xa2, gbc.a());
        EXPECT(0x92, gbc.b());
        EXPECT(0xc6, gbc.c());
        EXPECT(0xc6, gbc.d());
        EXPECT(0x8d, gbc.e());
        EXPECT(0x68, gbc.h());
        EXPECT(0xa5, gbc.l());
        EXPECT(0x93e6, gbc.sp());
        EXPECT(0xec00, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xebfe));
        EXPECT(0x8c, gbc.readMem(0xebff));
        // CB 8C 0284
        gbc.setState(0xc3bb, 0x741b, 0x8d70, 0x6535, 0x4bcb, 0xaf6b, 0x0, 0x1);
        gbc.writeMem(0xc3bb, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x8d, gbc.a());
        EXPECT(0x65, gbc.b());
        EXPECT(0x35, gbc.c());
        EXPECT(0x4b, gbc.d());
        EXPECT(0xcb, gbc.e());
        EXPECT(0xad, gbc.h());
        EXPECT(0x6b, gbc.l());
        EXPECT(0x741b, gbc.sp());
        EXPECT(0xc3bd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc3bb));
        EXPECT(0x8c, gbc.readMem(0xc3bc));
        // CB 8C 0285
        gbc.setState(0xa3d5, 0x3770, 0x7540, 0xc110, 0x1599, 0xcff9, 0x0, 0x1);
        gbc.writeMem(0xa3d5, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x75, gbc.a());
        EXPECT(0xc1, gbc.b());
        EXPECT(0x10, gbc.c());
        EXPECT(0x15, gbc.d());
        EXPECT(0x99, gbc.e());
        EXPECT(0xcd, gbc.h());
        EXPECT(0xf9, gbc.l());
        EXPECT(0x3770, gbc.sp());
        EXPECT(0xa3d7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa3d5));
        EXPECT(0x8c, gbc.readMem(0xa3d6));
        // CB 8C 0286
        gbc.setState(0xc88f, 0xe906, 0x8bc0, 0xec14, 0x13ae, 0x789d, 0x0, 0x0);
        gbc.writeMem(0xc88f, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x8b, gbc.a());
        EXPECT(0xec, gbc.b());
        EXPECT(0x14, gbc.c());
        EXPECT(0x13, gbc.d());
        EXPECT(0xae, gbc.e());
        EXPECT(0x78, gbc.h());
        EXPECT(0x9d, gbc.l());
        EXPECT(0xe906, gbc.sp());
        EXPECT(0xc891, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc88f));
        EXPECT(0x8c, gbc.readMem(0xc890));
        // CB 8C 0287
        gbc.setState(0x3b3a, 0x553, 0x40f0, 0x7b0c, 0xc3b5, 0x1568, 0x0, 0x0);
        gbc.writeMem(0x3b3a, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x40, gbc.a());
        EXPECT(0x7b, gbc.b());
        EXPECT(0xc, gbc.c());
        EXPECT(0xc3, gbc.d());
        EXPECT(0xb5, gbc.e());
        EXPECT(0x15, gbc.h());
        EXPECT(0x68, gbc.l());
        EXPECT(0x553, gbc.sp());
        EXPECT(0x3b3c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 0288
        gbc.setState(0x40ad, 0xdfd9, 0x4210, 0x54e0, 0xf13, 0x84be, 0x1, 0x1);
        gbc.writeMem(0x40ad, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x42, gbc.a());
        EXPECT(0x54, gbc.b());
        EXPECT(0xe0, gbc.c());
        EXPECT(0xf, gbc.d());
        EXPECT(0x13, gbc.e());
        EXPECT(0x84, gbc.h());
        EXPECT(0xbe, gbc.l());
        EXPECT(0xdfd9, gbc.sp());
        EXPECT(0x40af, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 0289
        gbc.setState(0x351d, 0xc50b, 0x7250, 0xfab3, 0x1e00, 0x979e, 0x0, 0x1);
        gbc.writeMem(0x351d, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x72, gbc.a());
        EXPECT(0xfa, gbc.b());
        EXPECT(0xb3, gbc.c());
        EXPECT(0x1e, gbc.d());
        EXPECT(0x0, gbc.e());
        EXPECT(0x95, gbc.h());
        EXPECT(0x9e, gbc.l());
        EXPECT(0xc50b, gbc.sp());
        EXPECT(0x351f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 028A
        gbc.setState(0xbbb3, 0x3ba2, 0x5b20, 0xc7eb, 0x58fa, 0x6471, 0x0, 0x1);
        gbc.writeMem(0xbbb3, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x5b, gbc.a());
        EXPECT(0xc7, gbc.b());
        EXPECT(0xeb, gbc.c());
        EXPECT(0x58, gbc.d());
        EXPECT(0xfa, gbc.e());
        EXPECT(0x64, gbc.h());
        EXPECT(0x71, gbc.l());
        EXPECT(0x3ba2, gbc.sp());
        EXPECT(0xbbb5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbbb3));
        EXPECT(0x8c, gbc.readMem(0xbbb4));
        // CB 8C 028B
        gbc.setState(0xb6bb, 0x19f9, 0x3cf0, 0x7b8e, 0x91a0, 0x78e9, 0x0, 0x0);
        gbc.writeMem(0xb6bb, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x3c, gbc.a());
        EXPECT(0x7b, gbc.b());
        EXPECT(0x8e, gbc.c());
        EXPECT(0x91, gbc.d());
        EXPECT(0xa0, gbc.e());
        EXPECT(0x78, gbc.h());
        EXPECT(0xe9, gbc.l());
        EXPECT(0x19f9, gbc.sp());
        EXPECT(0xb6bd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb6bb));
        EXPECT(0x8c, gbc.readMem(0xb6bc));
        // CB 8C 028C
        gbc.setState(0xc964, 0x2f6b, 0xe380, 0x8ce4, 0xcd9e, 0x822a, 0x0, 0x1);
        gbc.writeMem(0xc964, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xe3, gbc.a());
        EXPECT(0x8c, gbc.b());
        EXPECT(0xe4, gbc.c());
        EXPECT(0xcd, gbc.d());
        EXPECT(0x9e, gbc.e());
        EXPECT(0x80, gbc.h());
        EXPECT(0x2a, gbc.l());
        EXPECT(0x2f6b, gbc.sp());
        EXPECT(0xc966, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc964));
        EXPECT(0x8c, gbc.readMem(0xc965));
        // CB 8C 028D
        gbc.setState(0x42ab, 0xe61e, 0xe940, 0xe8f7, 0x27d5, 0xabfa, 0x0, 0x0);
        gbc.writeMem(0x42ab, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xe9, gbc.a());
        EXPECT(0xe8, gbc.b());
        EXPECT(0xf7, gbc.c());
        EXPECT(0x27, gbc.d());
        EXPECT(0xd5, gbc.e());
        EXPECT(0xa9, gbc.h());
        EXPECT(0xfa, gbc.l());
        EXPECT(0xe61e, gbc.sp());
        EXPECT(0x42ad, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 028E
        gbc.setState(0x6451, 0x2393, 0x8bd0, 0xc9b3, 0xa6c3, 0x3b00, 0x1, 0x1);
        gbc.writeMem(0x6451, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x8b, gbc.a());
        EXPECT(0xc9, gbc.b());
        EXPECT(0xb3, gbc.c());
        EXPECT(0xa6, gbc.d());
        EXPECT(0xc3, gbc.e());
        EXPECT(0x39, gbc.h());
        EXPECT(0x0, gbc.l());
        EXPECT(0x2393, gbc.sp());
        EXPECT(0x6453, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 028F
        gbc.setState(0x54d8, 0xf4a1, 0x8b60, 0xb752, 0x848a, 0xdd0, 0x0, 0x0);
        gbc.writeMem(0x54d8, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x8b, gbc.a());
        EXPECT(0xb7, gbc.b());
        EXPECT(0x52, gbc.c());
        EXPECT(0x84, gbc.d());
        EXPECT(0x8a, gbc.e());
        EXPECT(0xd, gbc.h());
        EXPECT(0xd0, gbc.l());
        EXPECT(0xf4a1, gbc.sp());
        EXPECT(0x54da, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 0290
        gbc.setState(0x8a9c, 0x56e4, 0xbb80, 0x28f7, 0xdc2a, 0xf03d, 0x0, 0x1);
        gbc.writeMem(0x8a9c, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xbb, gbc.a());
        EXPECT(0x28, gbc.b());
        EXPECT(0xf7, gbc.c());
        EXPECT(0xdc, gbc.d());
        EXPECT(0x2a, gbc.e());
        EXPECT(0xf0, gbc.h());
        EXPECT(0x3d, gbc.l());
        EXPECT(0x56e4, gbc.sp());
        EXPECT(0x8a9e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8a9c));
        EXPECT(0x8c, gbc.readMem(0x8a9d));
        // CB 8C 0291
        gbc.setState(0xda55, 0xf60a, 0xb670, 0xb128, 0x267a, 0xba5d, 0x1, 0x0);
        gbc.writeMem(0xda55, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xb6, gbc.a());
        EXPECT(0xb1, gbc.b());
        EXPECT(0x28, gbc.c());
        EXPECT(0x26, gbc.d());
        EXPECT(0x7a, gbc.e());
        EXPECT(0xb8, gbc.h());
        EXPECT(0x5d, gbc.l());
        EXPECT(0xf60a, gbc.sp());
        EXPECT(0xda57, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xda55));
        EXPECT(0x8c, gbc.readMem(0xda56));
        // CB 8C 0292
        gbc.setState(0x8131, 0xf918, 0x31e0, 0xda59, 0xea29, 0x2b28, 0x0, 0x1);
        gbc.writeMem(0x8131, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x31, gbc.a());
        EXPECT(0xda, gbc.b());
        EXPECT(0x59, gbc.c());
        EXPECT(0xea, gbc.d());
        EXPECT(0x29, gbc.e());
        EXPECT(0x29, gbc.h());
        EXPECT(0x28, gbc.l());
        EXPECT(0xf918, gbc.sp());
        EXPECT(0x8133, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8131));
        EXPECT(0x8c, gbc.readMem(0x8132));
        // CB 8C 0293
        gbc.setState(0x9486, 0xfde, 0x6ff0, 0xa23e, 0xa89d, 0x8c37, 0x1, 0x0);
        gbc.writeMem(0x9486, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x6f, gbc.a());
        EXPECT(0xa2, gbc.b());
        EXPECT(0x3e, gbc.c());
        EXPECT(0xa8, gbc.d());
        EXPECT(0x9d, gbc.e());
        EXPECT(0x8c, gbc.h());
        EXPECT(0x37, gbc.l());
        EXPECT(0xfde, gbc.sp());
        EXPECT(0x9488, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9486));
        EXPECT(0x8c, gbc.readMem(0x9487));
        // CB 8C 0294
        gbc.setState(0x67a, 0x27e3, 0x7d80, 0x933a, 0x60ec, 0x3ed2, 0x0, 0x0);
        gbc.writeMem(0x67a, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x7d, gbc.a());
        EXPECT(0x93, gbc.b());
        EXPECT(0x3a, gbc.c());
        EXPECT(0x60, gbc.d());
        EXPECT(0xec, gbc.e());
        EXPECT(0x3c, gbc.h());
        EXPECT(0xd2, gbc.l());
        EXPECT(0x27e3, gbc.sp());
        EXPECT(0x67c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 0295
        gbc.setState(0xe392, 0x4e9, 0xd760, 0xde67, 0x506d, 0x7098, 0x0, 0x0);
        gbc.writeMem(0xe392, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xd7, gbc.a());
        EXPECT(0xde, gbc.b());
        EXPECT(0x67, gbc.c());
        EXPECT(0x50, gbc.d());
        EXPECT(0x6d, gbc.e());
        EXPECT(0x70, gbc.h());
        EXPECT(0x98, gbc.l());
        EXPECT(0x4e9, gbc.sp());
        EXPECT(0xe394, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe392));
        EXPECT(0x8c, gbc.readMem(0xe393));
        // CB 8C 0296
        gbc.setState(0xed20, 0xe1f0, 0xff10, 0x3e00, 0xee7b, 0x21ef, 0x1, 0x0);
        gbc.writeMem(0xed20, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xff, gbc.a());
        EXPECT(0x3e, gbc.b());
        EXPECT(0x0, gbc.c());
        EXPECT(0xee, gbc.d());
        EXPECT(0x7b, gbc.e());
        EXPECT(0x21, gbc.h());
        EXPECT(0xef, gbc.l());
        EXPECT(0xe1f0, gbc.sp());
        EXPECT(0xed22, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xed20));
        EXPECT(0x8c, gbc.readMem(0xed21));
        // CB 8C 0297
        gbc.setState(0xa2ff, 0x1e45, 0xd980, 0x79dc, 0x281e, 0x4518, 0x0, 0x1);
        gbc.writeMem(0xa2ff, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xd9, gbc.a());
        EXPECT(0x79, gbc.b());
        EXPECT(0xdc, gbc.c());
        EXPECT(0x28, gbc.d());
        EXPECT(0x1e, gbc.e());
        EXPECT(0x45, gbc.h());
        EXPECT(0x18, gbc.l());
        EXPECT(0x1e45, gbc.sp());
        EXPECT(0xa301, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa2ff));
        EXPECT(0x8c, gbc.readMem(0xa300));
        // CB 8C 0298
        gbc.setState(0xef0a, 0xbf42, 0x8570, 0x638c, 0xf037, 0x4883, 0x0, 0x1);
        gbc.writeMem(0xef0a, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x85, gbc.a());
        EXPECT(0x63, gbc.b());
        EXPECT(0x8c, gbc.c());
        EXPECT(0xf0, gbc.d());
        EXPECT(0x37, gbc.e());
        EXPECT(0x48, gbc.h());
        EXPECT(0x83, gbc.l());
        EXPECT(0xbf42, gbc.sp());
        EXPECT(0xef0c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xef0a));
        EXPECT(0x8c, gbc.readMem(0xef0b));
        // CB 8C 0299
        gbc.setState(0x892d, 0xd622, 0xc990, 0x58d1, 0x53b4, 0xee8d, 0x1, 0x0);
        gbc.writeMem(0x892d, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xc9, gbc.a());
        EXPECT(0x58, gbc.b());
        EXPECT(0xd1, gbc.c());
        EXPECT(0x53, gbc.d());
        EXPECT(0xb4, gbc.e());
        EXPECT(0xec, gbc.h());
        EXPECT(0x8d, gbc.l());
        EXPECT(0xd622, gbc.sp());
        EXPECT(0x892f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x892d));
        EXPECT(0x8c, gbc.readMem(0x892e));
        // CB 8C 029A
        gbc.setState(0x7524, 0x8ead, 0xd180, 0x78e1, 0x8814, 0xee2e, 0x0, 0x1);
        gbc.writeMem(0x7524, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xd1, gbc.a());
        EXPECT(0x78, gbc.b());
        EXPECT(0xe1, gbc.c());
        EXPECT(0x88, gbc.d());
        EXPECT(0x14, gbc.e());
        EXPECT(0xec, gbc.h());
        EXPECT(0x2e, gbc.l());
        EXPECT(0x8ead, gbc.sp());
        EXPECT(0x7526, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 029C
        gbc.setState(0x5a2a, 0xb82e, 0x70, 0x64e2, 0x57f8, 0xb683, 0x0, 0x1);
        gbc.writeMem(0x5a2a, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x64, gbc.b());
        EXPECT(0xe2, gbc.c());
        EXPECT(0x57, gbc.d());
        EXPECT(0xf8, gbc.e());
        EXPECT(0xb4, gbc.h());
        EXPECT(0x83, gbc.l());
        EXPECT(0xb82e, gbc.sp());
        EXPECT(0x5a2c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 029D
        gbc.setState(0xeba6, 0x8366, 0x2540, 0x2e4b, 0x400d, 0xdd5e, 0x0, 0x0);
        gbc.writeMem(0xeba6, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x25, gbc.a());
        EXPECT(0x2e, gbc.b());
        EXPECT(0x4b, gbc.c());
        EXPECT(0x40, gbc.d());
        EXPECT(0xd, gbc.e());
        EXPECT(0xdd, gbc.h());
        EXPECT(0x5e, gbc.l());
        EXPECT(0x8366, gbc.sp());
        EXPECT(0xeba8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xeba6));
        EXPECT(0x8c, gbc.readMem(0xeba7));
        // CB 8C 029E
        gbc.setState(0x14d, 0x591c, 0xa220, 0xc15f, 0xba59, 0x9ce4, 0x0, 0x0);
        gbc.writeMem(0x14d, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xa2, gbc.a());
        EXPECT(0xc1, gbc.b());
        EXPECT(0x5f, gbc.c());
        EXPECT(0xba, gbc.d());
        EXPECT(0x59, gbc.e());
        EXPECT(0x9c, gbc.h());
        EXPECT(0xe4, gbc.l());
        EXPECT(0x591c, gbc.sp());
        EXPECT(0x14f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 029F
        gbc.setState(0x995c, 0x2e5f, 0xf950, 0xdaac, 0xb42b, 0xed97, 0x0, 0x1);
        gbc.writeMem(0x995c, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xf9, gbc.a());
        EXPECT(0xda, gbc.b());
        EXPECT(0xac, gbc.c());
        EXPECT(0xb4, gbc.d());
        EXPECT(0x2b, gbc.e());
        EXPECT(0xed, gbc.h());
        EXPECT(0x97, gbc.l());
        EXPECT(0x2e5f, gbc.sp());
        EXPECT(0x995e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x995c));
        EXPECT(0x8c, gbc.readMem(0x995d));
        // CB 8C 02A0
        gbc.setState(0xca6d, 0x2f2a, 0x7940, 0x6982, 0xc2e, 0x9efe, 0x0, 0x1);
        gbc.writeMem(0xca6d, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x79, gbc.a());
        EXPECT(0x69, gbc.b());
        EXPECT(0x82, gbc.c());
        EXPECT(0xc, gbc.d());
        EXPECT(0x2e, gbc.e());
        EXPECT(0x9c, gbc.h());
        EXPECT(0xfe, gbc.l());
        EXPECT(0x2f2a, gbc.sp());
        EXPECT(0xca6f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xca6d));
        EXPECT(0x8c, gbc.readMem(0xca6e));
        // CB 8C 02A1
        gbc.setState(0x6f45, 0xa33e, 0xc810, 0x9c53, 0xee87, 0xb589, 0x1, 0x1);
        gbc.writeMem(0x6f45, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xc8, gbc.a());
        EXPECT(0x9c, gbc.b());
        EXPECT(0x53, gbc.c());
        EXPECT(0xee, gbc.d());
        EXPECT(0x87, gbc.e());
        EXPECT(0xb5, gbc.h());
        EXPECT(0x89, gbc.l());
        EXPECT(0xa33e, gbc.sp());
        EXPECT(0x6f47, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 02A2
        gbc.setState(0x4bdf, 0xdbff, 0xd0f0, 0x50bb, 0x8107, 0x2727, 0x0, 0x0);
        gbc.writeMem(0x4bdf, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xd0, gbc.a());
        EXPECT(0x50, gbc.b());
        EXPECT(0xbb, gbc.c());
        EXPECT(0x81, gbc.d());
        EXPECT(0x7, gbc.e());
        EXPECT(0x25, gbc.h());
        EXPECT(0x27, gbc.l());
        EXPECT(0xdbff, gbc.sp());
        EXPECT(0x4be1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 02A4
        gbc.setState(0xadf6, 0x22f2, 0x7df0, 0x9e93, 0xd9be, 0x1519, 0x1, 0x1);
        gbc.writeMem(0xadf6, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x7d, gbc.a());
        EXPECT(0x9e, gbc.b());
        EXPECT(0x93, gbc.c());
        EXPECT(0xd9, gbc.d());
        EXPECT(0xbe, gbc.e());
        EXPECT(0x15, gbc.h());
        EXPECT(0x19, gbc.l());
        EXPECT(0x22f2, gbc.sp());
        EXPECT(0xadf8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xadf6));
        EXPECT(0x8c, gbc.readMem(0xadf7));
        // CB 8C 02A5
        gbc.setState(0xc7, 0xd58c, 0xccf0, 0xf93c, 0x35d8, 0x694b, 0x1, 0x1);
        gbc.writeMem(0xc7, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xcc, gbc.a());
        EXPECT(0xf9, gbc.b());
        EXPECT(0x3c, gbc.c());
        EXPECT(0x35, gbc.d());
        EXPECT(0xd8, gbc.e());
        EXPECT(0x69, gbc.h());
        EXPECT(0x4b, gbc.l());
        EXPECT(0xd58c, gbc.sp());
        EXPECT(0xc9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 02A6
        gbc.setState(0x9d41, 0x1b7e, 0x9930, 0xa534, 0x5f43, 0x8b64, 0x1, 0x1);
        gbc.writeMem(0x9d41, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x99, gbc.a());
        EXPECT(0xa5, gbc.b());
        EXPECT(0x34, gbc.c());
        EXPECT(0x5f, gbc.d());
        EXPECT(0x43, gbc.e());
        EXPECT(0x89, gbc.h());
        EXPECT(0x64, gbc.l());
        EXPECT(0x1b7e, gbc.sp());
        EXPECT(0x9d43, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9d41));
        EXPECT(0x8c, gbc.readMem(0x9d42));
        // CB 8C 02A7
        gbc.setState(0x7d, 0xe7e9, 0xe310, 0x7ce1, 0x756c, 0xa35d, 0x0, 0x1);
        gbc.writeMem(0x7d, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xe3, gbc.a());
        EXPECT(0x7c, gbc.b());
        EXPECT(0xe1, gbc.c());
        EXPECT(0x75, gbc.d());
        EXPECT(0x6c, gbc.e());
        EXPECT(0xa1, gbc.h());
        EXPECT(0x5d, gbc.l());
        EXPECT(0xe7e9, gbc.sp());
        EXPECT(0x7f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 02A8
        gbc.setState(0x55de, 0x4e6e, 0x8da0, 0x9b96, 0x294e, 0xe261, 0x0, 0x1);
        gbc.writeMem(0x55de, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x8d, gbc.a());
        EXPECT(0x9b, gbc.b());
        EXPECT(0x96, gbc.c());
        EXPECT(0x29, gbc.d());
        EXPECT(0x4e, gbc.e());
        EXPECT(0xe0, gbc.h());
        EXPECT(0x61, gbc.l());
        EXPECT(0x4e6e, gbc.sp());
        EXPECT(0x55e0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 02A9
        gbc.setState(0x81a7, 0x6cb, 0x17d0, 0x1868, 0x3d7c, 0x2825, 0x0, 0x0);
        gbc.writeMem(0x81a7, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x17, gbc.a());
        EXPECT(0x18, gbc.b());
        EXPECT(0x68, gbc.c());
        EXPECT(0x3d, gbc.d());
        EXPECT(0x7c, gbc.e());
        EXPECT(0x28, gbc.h());
        EXPECT(0x25, gbc.l());
        EXPECT(0x6cb, gbc.sp());
        EXPECT(0x81a9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x81a7));
        EXPECT(0x8c, gbc.readMem(0x81a8));
        // CB 8C 02AA
        gbc.setState(0x33b0, 0xc58b, 0x8a40, 0x4385, 0xb0a, 0x1222, 0x1, 0x1);
        gbc.writeMem(0x33b0, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x8a, gbc.a());
        EXPECT(0x43, gbc.b());
        EXPECT(0x85, gbc.c());
        EXPECT(0xb, gbc.d());
        EXPECT(0xa, gbc.e());
        EXPECT(0x10, gbc.h());
        EXPECT(0x22, gbc.l());
        EXPECT(0xc58b, gbc.sp());
        EXPECT(0x33b2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 02AB
        gbc.setState(0x520b, 0xdb9f, 0x15e0, 0xf66b, 0xe043, 0xa9c7, 0x0, 0x0);
        gbc.writeMem(0x520b, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x15, gbc.a());
        EXPECT(0xf6, gbc.b());
        EXPECT(0x6b, gbc.c());
        EXPECT(0xe0, gbc.d());
        EXPECT(0x43, gbc.e());
        EXPECT(0xa9, gbc.h());
        EXPECT(0xc7, gbc.l());
        EXPECT(0xdb9f, gbc.sp());
        EXPECT(0x520d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 02AC
        gbc.setState(0xb200, 0xb20, 0xff60, 0xfa73, 0x7c2a, 0x6c69, 0x0, 0x1);
        gbc.writeMem(0xb200, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xff, gbc.a());
        EXPECT(0xfa, gbc.b());
        EXPECT(0x73, gbc.c());
        EXPECT(0x7c, gbc.d());
        EXPECT(0x2a, gbc.e());
        EXPECT(0x6c, gbc.h());
        EXPECT(0x69, gbc.l());
        EXPECT(0xb20, gbc.sp());
        EXPECT(0xb202, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb200));
        EXPECT(0x8c, gbc.readMem(0xb201));
        // CB 8C 02AD
        gbc.setState(0x79d4, 0x5d8a, 0x32d0, 0x27e0, 0xcfff, 0xa18a, 0x0, 0x0);
        gbc.writeMem(0x79d4, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x32, gbc.a());
        EXPECT(0x27, gbc.b());
        EXPECT(0xe0, gbc.c());
        EXPECT(0xcf, gbc.d());
        EXPECT(0xff, gbc.e());
        EXPECT(0xa1, gbc.h());
        EXPECT(0x8a, gbc.l());
        EXPECT(0x5d8a, gbc.sp());
        EXPECT(0x79d6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 02AE
        gbc.setState(0xa470, 0xb27f, 0xb100, 0x64a0, 0xaf5d, 0x5353, 0x1, 0x1);
        gbc.writeMem(0xa470, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xb1, gbc.a());
        EXPECT(0x64, gbc.b());
        EXPECT(0xa0, gbc.c());
        EXPECT(0xaf, gbc.d());
        EXPECT(0x5d, gbc.e());
        EXPECT(0x51, gbc.h());
        EXPECT(0x53, gbc.l());
        EXPECT(0xb27f, gbc.sp());
        EXPECT(0xa472, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa470));
        EXPECT(0x8c, gbc.readMem(0xa471));
        // CB 8C 02AF
        gbc.setState(0x719d, 0x40b7, 0xcc30, 0xf789, 0x4f4, 0xeec8, 0x1, 0x0);
        gbc.writeMem(0x719d, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xcc, gbc.a());
        EXPECT(0xf7, gbc.b());
        EXPECT(0x89, gbc.c());
        EXPECT(0x4, gbc.d());
        EXPECT(0xf4, gbc.e());
        EXPECT(0xec, gbc.h());
        EXPECT(0xc8, gbc.l());
        EXPECT(0x40b7, gbc.sp());
        EXPECT(0x719f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 02B0
        gbc.setState(0xab1e, 0xedb, 0x8a40, 0x69c7, 0xdd21, 0xa711, 0x0, 0x1);
        gbc.writeMem(0xab1e, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x8a, gbc.a());
        EXPECT(0x69, gbc.b());
        EXPECT(0xc7, gbc.c());
        EXPECT(0xdd, gbc.d());
        EXPECT(0x21, gbc.e());
        EXPECT(0xa5, gbc.h());
        EXPECT(0x11, gbc.l());
        EXPECT(0xedb, gbc.sp());
        EXPECT(0xab20, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xab1e));
        EXPECT(0x8c, gbc.readMem(0xab1f));
        // CB 8C 02B1
        gbc.setState(0xe436, 0xa118, 0xebd0, 0x4e23, 0xc6fc, 0xf508, 0x1, 0x1);
        gbc.writeMem(0xe436, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xeb, gbc.a());
        EXPECT(0x4e, gbc.b());
        EXPECT(0x23, gbc.c());
        EXPECT(0xc6, gbc.d());
        EXPECT(0xfc, gbc.e());
        EXPECT(0xf5, gbc.h());
        EXPECT(0x8, gbc.l());
        EXPECT(0xa118, gbc.sp());
        EXPECT(0xe438, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe436));
        EXPECT(0x8c, gbc.readMem(0xe437));
        // CB 8C 02B2
        gbc.setState(0x1be1, 0x8512, 0xa330, 0xb700, 0x4941, 0x6450, 0x1, 0x1);
        gbc.writeMem(0x1be1, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xa3, gbc.a());
        EXPECT(0xb7, gbc.b());
        EXPECT(0x0, gbc.c());
        EXPECT(0x49, gbc.d());
        EXPECT(0x41, gbc.e());
        EXPECT(0x64, gbc.h());
        EXPECT(0x50, gbc.l());
        EXPECT(0x8512, gbc.sp());
        EXPECT(0x1be3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 02B3
        gbc.setState(0x97db, 0xce8e, 0x37c0, 0x3feb, 0xdf8b, 0xcad6, 0x0, 0x1);
        gbc.writeMem(0x97db, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x37, gbc.a());
        EXPECT(0x3f, gbc.b());
        EXPECT(0xeb, gbc.c());
        EXPECT(0xdf, gbc.d());
        EXPECT(0x8b, gbc.e());
        EXPECT(0xc8, gbc.h());
        EXPECT(0xd6, gbc.l());
        EXPECT(0xce8e, gbc.sp());
        EXPECT(0x97dd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x97db));
        EXPECT(0x8c, gbc.readMem(0x97dc));
        // CB 8C 02B4
        gbc.setState(0x17d4, 0xd02d, 0xedb0, 0x8a88, 0x20d, 0xf81c, 0x1, 0x0);
        gbc.writeMem(0x17d4, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xed, gbc.a());
        EXPECT(0x8a, gbc.b());
        EXPECT(0x88, gbc.c());
        EXPECT(0x2, gbc.d());
        EXPECT(0xd, gbc.e());
        EXPECT(0xf8, gbc.h());
        EXPECT(0x1c, gbc.l());
        EXPECT(0xd02d, gbc.sp());
        EXPECT(0x17d6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 02B5
        gbc.setState(0x783e, 0x552f, 0xef80, 0x926e, 0xec28, 0xc36b, 0x1, 0x0);
        gbc.writeMem(0x783e, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xef, gbc.a());
        EXPECT(0x92, gbc.b());
        EXPECT(0x6e, gbc.c());
        EXPECT(0xec, gbc.d());
        EXPECT(0x28, gbc.e());
        EXPECT(0xc1, gbc.h());
        EXPECT(0x6b, gbc.l());
        EXPECT(0x552f, gbc.sp());
        EXPECT(0x7840, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 02B6
        gbc.setState(0x8993, 0x4262, 0xa080, 0x7328, 0xeb9e, 0x2388, 0x0, 0x0);
        gbc.writeMem(0x8993, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xa0, gbc.a());
        EXPECT(0x73, gbc.b());
        EXPECT(0x28, gbc.c());
        EXPECT(0xeb, gbc.d());
        EXPECT(0x9e, gbc.e());
        EXPECT(0x21, gbc.h());
        EXPECT(0x88, gbc.l());
        EXPECT(0x4262, gbc.sp());
        EXPECT(0x8995, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8993));
        EXPECT(0x8c, gbc.readMem(0x8994));
        // CB 8C 02B8
        gbc.setState(0x9205, 0xaf5d, 0x4e0, 0x2e7a, 0x7124, 0x4655, 0x0, 0x1);
        gbc.writeMem(0x9205, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x4, gbc.a());
        EXPECT(0x2e, gbc.b());
        EXPECT(0x7a, gbc.c());
        EXPECT(0x71, gbc.d());
        EXPECT(0x24, gbc.e());
        EXPECT(0x44, gbc.h());
        EXPECT(0x55, gbc.l());
        EXPECT(0xaf5d, gbc.sp());
        EXPECT(0x9207, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9205));
        EXPECT(0x8c, gbc.readMem(0x9206));
        // CB 8C 02B9
        gbc.setState(0x712a, 0x912f, 0x64e0, 0x172e, 0x2b9f, 0x6d03, 0x0, 0x1);
        gbc.writeMem(0x712a, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x64, gbc.a());
        EXPECT(0x17, gbc.b());
        EXPECT(0x2e, gbc.c());
        EXPECT(0x2b, gbc.d());
        EXPECT(0x9f, gbc.e());
        EXPECT(0x6d, gbc.h());
        EXPECT(0x3, gbc.l());
        EXPECT(0x912f, gbc.sp());
        EXPECT(0x712c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 02BA
        gbc.setState(0x94cb, 0xa3c1, 0x6d60, 0xc98a, 0xa04b, 0xa5e2, 0x0, 0x0);
        gbc.writeMem(0x94cb, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x6d, gbc.a());
        EXPECT(0xc9, gbc.b());
        EXPECT(0x8a, gbc.c());
        EXPECT(0xa0, gbc.d());
        EXPECT(0x4b, gbc.e());
        EXPECT(0xa5, gbc.h());
        EXPECT(0xe2, gbc.l());
        EXPECT(0xa3c1, gbc.sp());
        EXPECT(0x94cd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x94cb));
        EXPECT(0x8c, gbc.readMem(0x94cc));
        // CB 8C 02BB
        gbc.setState(0x90a5, 0x45fe, 0xfa50, 0x446d, 0xf282, 0xdbe4, 0x1, 0x0);
        gbc.writeMem(0x90a5, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xfa, gbc.a());
        EXPECT(0x44, gbc.b());
        EXPECT(0x6d, gbc.c());
        EXPECT(0xf2, gbc.d());
        EXPECT(0x82, gbc.e());
        EXPECT(0xd9, gbc.h());
        EXPECT(0xe4, gbc.l());
        EXPECT(0x45fe, gbc.sp());
        EXPECT(0x90a7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x90a5));
        EXPECT(0x8c, gbc.readMem(0x90a6));
        // CB 8C 02BC
        gbc.setState(0xa7dc, 0x342f, 0xf100, 0x5887, 0x93d3, 0x7e0f, 0x1, 0x0);
        gbc.writeMem(0xa7dc, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xf1, gbc.a());
        EXPECT(0x58, gbc.b());
        EXPECT(0x87, gbc.c());
        EXPECT(0x93, gbc.d());
        EXPECT(0xd3, gbc.e());
        EXPECT(0x7c, gbc.h());
        EXPECT(0xf, gbc.l());
        EXPECT(0x342f, gbc.sp());
        EXPECT(0xa7de, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa7dc));
        EXPECT(0x8c, gbc.readMem(0xa7dd));
        // CB 8C 02BD
        gbc.setState(0x586d, 0x3491, 0x7640, 0x9f50, 0x8de, 0x418b, 0x1, 0x0);
        gbc.writeMem(0x586d, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x76, gbc.a());
        EXPECT(0x9f, gbc.b());
        EXPECT(0x50, gbc.c());
        EXPECT(0x8, gbc.d());
        EXPECT(0xde, gbc.e());
        EXPECT(0x41, gbc.h());
        EXPECT(0x8b, gbc.l());
        EXPECT(0x3491, gbc.sp());
        EXPECT(0x586f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 02BE
        gbc.setState(0x959c, 0xa58f, 0xf3f0, 0x5fc4, 0xcaa, 0xb690, 0x1, 0x1);
        gbc.writeMem(0x959c, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xf3, gbc.a());
        EXPECT(0x5f, gbc.b());
        EXPECT(0xc4, gbc.c());
        EXPECT(0xc, gbc.d());
        EXPECT(0xaa, gbc.e());
        EXPECT(0xb4, gbc.h());
        EXPECT(0x90, gbc.l());
        EXPECT(0xa58f, gbc.sp());
        EXPECT(0x959e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x959c));
        EXPECT(0x8c, gbc.readMem(0x959d));
        // CB 8C 02BF
        gbc.setState(0x7a36, 0xb1eb, 0x2cc0, 0x4af3, 0xafae, 0xb04f, 0x1, 0x0);
        gbc.writeMem(0x7a36, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x2c, gbc.a());
        EXPECT(0x4a, gbc.b());
        EXPECT(0xf3, gbc.c());
        EXPECT(0xaf, gbc.d());
        EXPECT(0xae, gbc.e());
        EXPECT(0xb0, gbc.h());
        EXPECT(0x4f, gbc.l());
        EXPECT(0xb1eb, gbc.sp());
        EXPECT(0x7a38, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 02C0
        gbc.setState(0x7100, 0x6567, 0xdfc0, 0xa601, 0x7aa2, 0x434e, 0x1, 0x1);
        gbc.writeMem(0x7100, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xdf, gbc.a());
        EXPECT(0xa6, gbc.b());
        EXPECT(0x1, gbc.c());
        EXPECT(0x7a, gbc.d());
        EXPECT(0xa2, gbc.e());
        EXPECT(0x41, gbc.h());
        EXPECT(0x4e, gbc.l());
        EXPECT(0x6567, gbc.sp());
        EXPECT(0x7102, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 02C1
        gbc.setState(0x44a0, 0x7b3f, 0x7ab0, 0xfa64, 0xcfbe, 0x9b65, 0x0, 0x0);
        gbc.writeMem(0x44a0, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x7a, gbc.a());
        EXPECT(0xfa, gbc.b());
        EXPECT(0x64, gbc.c());
        EXPECT(0xcf, gbc.d());
        EXPECT(0xbe, gbc.e());
        EXPECT(0x99, gbc.h());
        EXPECT(0x65, gbc.l());
        EXPECT(0x7b3f, gbc.sp());
        EXPECT(0x44a2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 02C2
        gbc.setState(0xaac2, 0x8ada, 0xea20, 0x64d6, 0xc9a6, 0x2f04, 0x0, 0x1);
        gbc.writeMem(0xaac2, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xea, gbc.a());
        EXPECT(0x64, gbc.b());
        EXPECT(0xd6, gbc.c());
        EXPECT(0xc9, gbc.d());
        EXPECT(0xa6, gbc.e());
        EXPECT(0x2d, gbc.h());
        EXPECT(0x4, gbc.l());
        EXPECT(0x8ada, gbc.sp());
        EXPECT(0xaac4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaac2));
        EXPECT(0x8c, gbc.readMem(0xaac3));
        // CB 8C 02C3
        gbc.setState(0x531c, 0xa960, 0x7990, 0xea44, 0xc31, 0x8337, 0x1, 0x1);
        gbc.writeMem(0x531c, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x79, gbc.a());
        EXPECT(0xea, gbc.b());
        EXPECT(0x44, gbc.c());
        EXPECT(0xc, gbc.d());
        EXPECT(0x31, gbc.e());
        EXPECT(0x81, gbc.h());
        EXPECT(0x37, gbc.l());
        EXPECT(0xa960, gbc.sp());
        EXPECT(0x531e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 02C4
        gbc.setState(0xc9d1, 0x3a9f, 0x620, 0x7877, 0xede2, 0xdf78, 0x0, 0x1);
        gbc.writeMem(0xc9d1, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x6, gbc.a());
        EXPECT(0x78, gbc.b());
        EXPECT(0x77, gbc.c());
        EXPECT(0xed, gbc.d());
        EXPECT(0xe2, gbc.e());
        EXPECT(0xdd, gbc.h());
        EXPECT(0x78, gbc.l());
        EXPECT(0x3a9f, gbc.sp());
        EXPECT(0xc9d3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc9d1));
        EXPECT(0x8c, gbc.readMem(0xc9d2));
        // CB 8C 02C5
        gbc.setState(0x5b7c, 0xfd54, 0xcf80, 0xd791, 0xa8f9, 0x9c9b, 0x0, 0x1);
        gbc.writeMem(0x5b7c, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xcf, gbc.a());
        EXPECT(0xd7, gbc.b());
        EXPECT(0x91, gbc.c());
        EXPECT(0xa8, gbc.d());
        EXPECT(0xf9, gbc.e());
        EXPECT(0x9c, gbc.h());
        EXPECT(0x9b, gbc.l());
        EXPECT(0xfd54, gbc.sp());
        EXPECT(0x5b7e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 02C6
        gbc.setState(0x2641, 0xf739, 0xee80, 0xd9cd, 0x59b3, 0x1a68, 0x1, 0x0);
        gbc.writeMem(0x2641, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xee, gbc.a());
        EXPECT(0xd9, gbc.b());
        EXPECT(0xcd, gbc.c());
        EXPECT(0x59, gbc.d());
        EXPECT(0xb3, gbc.e());
        EXPECT(0x18, gbc.h());
        EXPECT(0x68, gbc.l());
        EXPECT(0xf739, gbc.sp());
        EXPECT(0x2643, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 02C7
        gbc.setState(0x4398, 0x7d00, 0xa6c0, 0xbe0f, 0x4d50, 0x5744, 0x1, 0x0);
        gbc.writeMem(0x4398, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xa6, gbc.a());
        EXPECT(0xbe, gbc.b());
        EXPECT(0xf, gbc.c());
        EXPECT(0x4d, gbc.d());
        EXPECT(0x50, gbc.e());
        EXPECT(0x55, gbc.h());
        EXPECT(0x44, gbc.l());
        EXPECT(0x7d00, gbc.sp());
        EXPECT(0x439a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 02C8
        gbc.setState(0x440b, 0x80d9, 0x8760, 0xc289, 0x94ff, 0xbb2f, 0x0, 0x1);
        gbc.writeMem(0x440b, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x87, gbc.a());
        EXPECT(0xc2, gbc.b());
        EXPECT(0x89, gbc.c());
        EXPECT(0x94, gbc.d());
        EXPECT(0xff, gbc.e());
        EXPECT(0xb9, gbc.h());
        EXPECT(0x2f, gbc.l());
        EXPECT(0x80d9, gbc.sp());
        EXPECT(0x440d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 02C9
        gbc.setState(0x61b, 0xf945, 0x5ba0, 0x3dd4, 0x427f, 0x8c7b, 0x0, 0x1);
        gbc.writeMem(0x61b, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x5b, gbc.a());
        EXPECT(0x3d, gbc.b());
        EXPECT(0xd4, gbc.c());
        EXPECT(0x42, gbc.d());
        EXPECT(0x7f, gbc.e());
        EXPECT(0x8c, gbc.h());
        EXPECT(0x7b, gbc.l());
        EXPECT(0xf945, gbc.sp());
        EXPECT(0x61d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 02CA
        gbc.setState(0xdf29, 0x5dca, 0x63d0, 0xbebf, 0x7e87, 0xa82e, 0x0, 0x1);
        gbc.writeMem(0xdf29, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x63, gbc.a());
        EXPECT(0xbe, gbc.b());
        EXPECT(0xbf, gbc.c());
        EXPECT(0x7e, gbc.d());
        EXPECT(0x87, gbc.e());
        EXPECT(0xa8, gbc.h());
        EXPECT(0x2e, gbc.l());
        EXPECT(0x5dca, gbc.sp());
        EXPECT(0xdf2b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdf29));
        EXPECT(0x8c, gbc.readMem(0xdf2a));
        // CB 8C 02CC
        gbc.setState(0x66c7, 0x80a7, 0x5d80, 0x69dc, 0x8ab, 0x24dd, 0x0, 0x1);
        gbc.writeMem(0x66c7, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x5d, gbc.a());
        EXPECT(0x69, gbc.b());
        EXPECT(0xdc, gbc.c());
        EXPECT(0x8, gbc.d());
        EXPECT(0xab, gbc.e());
        EXPECT(0x24, gbc.h());
        EXPECT(0xdd, gbc.l());
        EXPECT(0x80a7, gbc.sp());
        EXPECT(0x66c9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 02CD
        gbc.setState(0x79de, 0xb59f, 0xd4b0, 0x3780, 0xee7d, 0xfb94, 0x1, 0x1);
        gbc.writeMem(0x79de, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xd4, gbc.a());
        EXPECT(0x37, gbc.b());
        EXPECT(0x80, gbc.c());
        EXPECT(0xee, gbc.d());
        EXPECT(0x7d, gbc.e());
        EXPECT(0xf9, gbc.h());
        EXPECT(0x94, gbc.l());
        EXPECT(0xb59f, gbc.sp());
        EXPECT(0x79e0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 02CE
        gbc.setState(0x2f06, 0xb1a1, 0x64b0, 0x8b6a, 0x4c68, 0x375a, 0x0, 0x1);
        gbc.writeMem(0x2f06, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x64, gbc.a());
        EXPECT(0x8b, gbc.b());
        EXPECT(0x6a, gbc.c());
        EXPECT(0x4c, gbc.d());
        EXPECT(0x68, gbc.e());
        EXPECT(0x35, gbc.h());
        EXPECT(0x5a, gbc.l());
        EXPECT(0xb1a1, gbc.sp());
        EXPECT(0x2f08, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 02D0
        gbc.setState(0x163b, 0x7fdf, 0x4390, 0xd177, 0x85d6, 0x7e66, 0x0, 0x0);
        gbc.writeMem(0x163b, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x43, gbc.a());
        EXPECT(0xd1, gbc.b());
        EXPECT(0x77, gbc.c());
        EXPECT(0x85, gbc.d());
        EXPECT(0xd6, gbc.e());
        EXPECT(0x7c, gbc.h());
        EXPECT(0x66, gbc.l());
        EXPECT(0x7fdf, gbc.sp());
        EXPECT(0x163d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 02D1
        gbc.setState(0xe8c, 0x841e, 0xd130, 0xced2, 0x7595, 0x1196, 0x0, 0x1);
        gbc.writeMem(0xe8c, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xd1, gbc.a());
        EXPECT(0xce, gbc.b());
        EXPECT(0xd2, gbc.c());
        EXPECT(0x75, gbc.d());
        EXPECT(0x95, gbc.e());
        EXPECT(0x11, gbc.h());
        EXPECT(0x96, gbc.l());
        EXPECT(0x841e, gbc.sp());
        EXPECT(0xe8e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 02D2
        gbc.setState(0x386f, 0xad1e, 0xdc30, 0x3093, 0xc348, 0x34ab, 0x0, 0x1);
        gbc.writeMem(0x386f, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xdc, gbc.a());
        EXPECT(0x30, gbc.b());
        EXPECT(0x93, gbc.c());
        EXPECT(0xc3, gbc.d());
        EXPECT(0x48, gbc.e());
        EXPECT(0x34, gbc.h());
        EXPECT(0xab, gbc.l());
        EXPECT(0xad1e, gbc.sp());
        EXPECT(0x3871, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 02D3
        gbc.setState(0x5aa8, 0xf748, 0xa770, 0x8fbb, 0x49e5, 0x6d20, 0x0, 0x1);
        gbc.writeMem(0x5aa8, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xa7, gbc.a());
        EXPECT(0x8f, gbc.b());
        EXPECT(0xbb, gbc.c());
        EXPECT(0x49, gbc.d());
        EXPECT(0xe5, gbc.e());
        EXPECT(0x6d, gbc.h());
        EXPECT(0x20, gbc.l());
        EXPECT(0xf748, gbc.sp());
        EXPECT(0x5aaa, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 02D4
        gbc.setState(0x39f2, 0xecb8, 0x7d0, 0x962, 0x776b, 0x610a, 0x0, 0x0);
        gbc.writeMem(0x39f2, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x7, gbc.a());
        EXPECT(0x9, gbc.b());
        EXPECT(0x62, gbc.c());
        EXPECT(0x77, gbc.d());
        EXPECT(0x6b, gbc.e());
        EXPECT(0x61, gbc.h());
        EXPECT(0xa, gbc.l());
        EXPECT(0xecb8, gbc.sp());
        EXPECT(0x39f4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 02D5
        gbc.setState(0x60d4, 0xa6a6, 0x2410, 0x17e2, 0xa40d, 0xb59b, 0x1, 0x0);
        gbc.writeMem(0x60d4, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x24, gbc.a());
        EXPECT(0x17, gbc.b());
        EXPECT(0xe2, gbc.c());
        EXPECT(0xa4, gbc.d());
        EXPECT(0xd, gbc.e());
        EXPECT(0xb5, gbc.h());
        EXPECT(0x9b, gbc.l());
        EXPECT(0xa6a6, gbc.sp());
        EXPECT(0x60d6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 02D6
        gbc.setState(0xbce8, 0xfea, 0x3890, 0xa878, 0x39af, 0xa13a, 0x1, 0x0);
        gbc.writeMem(0xbce8, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x38, gbc.a());
        EXPECT(0xa8, gbc.b());
        EXPECT(0x78, gbc.c());
        EXPECT(0x39, gbc.d());
        EXPECT(0xaf, gbc.e());
        EXPECT(0xa1, gbc.h());
        EXPECT(0x3a, gbc.l());
        EXPECT(0xfea, gbc.sp());
        EXPECT(0xbcea, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbce8));
        EXPECT(0x8c, gbc.readMem(0xbce9));
        // CB 8C 02D7
        gbc.setState(0x725f, 0xbed8, 0xcbc0, 0x9e91, 0xcfdb, 0x87f2, 0x0, 0x1);
        gbc.writeMem(0x725f, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xcb, gbc.a());
        EXPECT(0x9e, gbc.b());
        EXPECT(0x91, gbc.c());
        EXPECT(0xcf, gbc.d());
        EXPECT(0xdb, gbc.e());
        EXPECT(0x85, gbc.h());
        EXPECT(0xf2, gbc.l());
        EXPECT(0xbed8, gbc.sp());
        EXPECT(0x7261, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 02D8
        gbc.setState(0x5ed9, 0x52e6, 0xe8a0, 0xc30d, 0xd452, 0xf60a, 0x0, 0x1);
        gbc.writeMem(0x5ed9, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xe8, gbc.a());
        EXPECT(0xc3, gbc.b());
        EXPECT(0xd, gbc.c());
        EXPECT(0xd4, gbc.d());
        EXPECT(0x52, gbc.e());
        EXPECT(0xf4, gbc.h());
        EXPECT(0xa, gbc.l());
        EXPECT(0x52e6, gbc.sp());
        EXPECT(0x5edb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 02D9
        gbc.setState(0x5365, 0xf7ff, 0x9fc0, 0x1eb4, 0x58fa, 0x6646, 0x1, 0x1);
        gbc.writeMem(0x5365, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x9f, gbc.a());
        EXPECT(0x1e, gbc.b());
        EXPECT(0xb4, gbc.c());
        EXPECT(0x58, gbc.d());
        EXPECT(0xfa, gbc.e());
        EXPECT(0x64, gbc.h());
        EXPECT(0x46, gbc.l());
        EXPECT(0xf7ff, gbc.sp());
        EXPECT(0x5367, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 02DA
        gbc.setState(0x5a9e, 0x213e, 0x5630, 0x11fb, 0xf4ac, 0x56ec, 0x0, 0x0);
        gbc.writeMem(0x5a9e, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x56, gbc.a());
        EXPECT(0x11, gbc.b());
        EXPECT(0xfb, gbc.c());
        EXPECT(0xf4, gbc.d());
        EXPECT(0xac, gbc.e());
        EXPECT(0x54, gbc.h());
        EXPECT(0xec, gbc.l());
        EXPECT(0x213e, gbc.sp());
        EXPECT(0x5aa0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 02DB
        gbc.setState(0x66c5, 0x2f91, 0x7080, 0x17bf, 0x1b3, 0xa691, 0x0, 0x0);
        gbc.writeMem(0x66c5, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x70, gbc.a());
        EXPECT(0x17, gbc.b());
        EXPECT(0xbf, gbc.c());
        EXPECT(0x1, gbc.d());
        EXPECT(0xb3, gbc.e());
        EXPECT(0xa4, gbc.h());
        EXPECT(0x91, gbc.l());
        EXPECT(0x2f91, gbc.sp());
        EXPECT(0x66c7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 02DC
        gbc.setState(0xb6ed, 0x720d, 0xfb10, 0xd046, 0xff1b, 0xd98f, 0x0, 0x0);
        gbc.writeMem(0xb6ed, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xfb, gbc.a());
        EXPECT(0xd0, gbc.b());
        EXPECT(0x46, gbc.c());
        EXPECT(0xff, gbc.d());
        EXPECT(0x1b, gbc.e());
        EXPECT(0xd9, gbc.h());
        EXPECT(0x8f, gbc.l());
        EXPECT(0x720d, gbc.sp());
        EXPECT(0xb6ef, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb6ed));
        EXPECT(0x8c, gbc.readMem(0xb6ee));
        // CB 8C 02DD
        gbc.setState(0x9839, 0x6108, 0x1670, 0xd61d, 0xa855, 0x5972, 0x1, 0x1);
        gbc.writeMem(0x9839, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x16, gbc.a());
        EXPECT(0xd6, gbc.b());
        EXPECT(0x1d, gbc.c());
        EXPECT(0xa8, gbc.d());
        EXPECT(0x55, gbc.e());
        EXPECT(0x59, gbc.h());
        EXPECT(0x72, gbc.l());
        EXPECT(0x6108, gbc.sp());
        EXPECT(0x983b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9839));
        EXPECT(0x8c, gbc.readMem(0x983a));
        // CB 8C 02DE
        gbc.setState(0xc03d, 0x4188, 0x92c0, 0x16aa, 0x5700, 0x1c0d, 0x1, 0x1);
        gbc.writeMem(0xc03d, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x92, gbc.a());
        EXPECT(0x16, gbc.b());
        EXPECT(0xaa, gbc.c());
        EXPECT(0x57, gbc.d());
        EXPECT(0x0, gbc.e());
        EXPECT(0x1c, gbc.h());
        EXPECT(0xd, gbc.l());
        EXPECT(0x4188, gbc.sp());
        EXPECT(0xc03f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc03d));
        EXPECT(0x8c, gbc.readMem(0xc03e));
        // CB 8C 02DF
        gbc.setState(0x1216, 0xf57c, 0xc4b0, 0xea69, 0xe8e4, 0xd9e2, 0x0, 0x0);
        gbc.writeMem(0x1216, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xc4, gbc.a());
        EXPECT(0xea, gbc.b());
        EXPECT(0x69, gbc.c());
        EXPECT(0xe8, gbc.d());
        EXPECT(0xe4, gbc.e());
        EXPECT(0xd9, gbc.h());
        EXPECT(0xe2, gbc.l());
        EXPECT(0xf57c, gbc.sp());
        EXPECT(0x1218, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 02E0
        gbc.setState(0x422f, 0x6bca, 0x7ce0, 0xee5, 0xe220, 0xb44f, 0x0, 0x0);
        gbc.writeMem(0x422f, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x7c, gbc.a());
        EXPECT(0xe, gbc.b());
        EXPECT(0xe5, gbc.c());
        EXPECT(0xe2, gbc.d());
        EXPECT(0x20, gbc.e());
        EXPECT(0xb4, gbc.h());
        EXPECT(0x4f, gbc.l());
        EXPECT(0x6bca, gbc.sp());
        EXPECT(0x4231, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 02E1
        gbc.setState(0x3c8f, 0x4cc2, 0xd930, 0xbd83, 0xf3ce, 0x8c09, 0x0, 0x1);
        gbc.writeMem(0x3c8f, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xd9, gbc.a());
        EXPECT(0xbd, gbc.b());
        EXPECT(0x83, gbc.c());
        EXPECT(0xf3, gbc.d());
        EXPECT(0xce, gbc.e());
        EXPECT(0x8c, gbc.h());
        EXPECT(0x9, gbc.l());
        EXPECT(0x4cc2, gbc.sp());
        EXPECT(0x3c91, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 02E2
        gbc.setState(0xc34c, 0xb28e, 0x42e0, 0x1ff6, 0xe960, 0x4b1f, 0x0, 0x0);
        gbc.writeMem(0xc34c, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x42, gbc.a());
        EXPECT(0x1f, gbc.b());
        EXPECT(0xf6, gbc.c());
        EXPECT(0xe9, gbc.d());
        EXPECT(0x60, gbc.e());
        EXPECT(0x49, gbc.h());
        EXPECT(0x1f, gbc.l());
        EXPECT(0xb28e, gbc.sp());
        EXPECT(0xc34e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc34c));
        EXPECT(0x8c, gbc.readMem(0xc34d));
        // CB 8C 02E3
        gbc.setState(0x8625, 0x71b4, 0xa2c0, 0xcd48, 0x76a, 0xa641, 0x1, 0x1);
        gbc.writeMem(0x8625, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xa2, gbc.a());
        EXPECT(0xcd, gbc.b());
        EXPECT(0x48, gbc.c());
        EXPECT(0x7, gbc.d());
        EXPECT(0x6a, gbc.e());
        EXPECT(0xa4, gbc.h());
        EXPECT(0x41, gbc.l());
        EXPECT(0x71b4, gbc.sp());
        EXPECT(0x8627, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8625));
        EXPECT(0x8c, gbc.readMem(0x8626));
        // CB 8C 02E4
        gbc.setState(0x7b47, 0xc3b, 0x2bd0, 0xb13b, 0x3651, 0x7239, 0x0, 0x1);
        gbc.writeMem(0x7b47, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x2b, gbc.a());
        EXPECT(0xb1, gbc.b());
        EXPECT(0x3b, gbc.c());
        EXPECT(0x36, gbc.d());
        EXPECT(0x51, gbc.e());
        EXPECT(0x70, gbc.h());
        EXPECT(0x39, gbc.l());
        EXPECT(0xc3b, gbc.sp());
        EXPECT(0x7b49, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 02E5
        gbc.setState(0xd02b, 0xbd98, 0xfe50, 0xce19, 0x43f, 0x822d, 0x0, 0x0);
        gbc.writeMem(0xd02b, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xfe, gbc.a());
        EXPECT(0xce, gbc.b());
        EXPECT(0x19, gbc.c());
        EXPECT(0x4, gbc.d());
        EXPECT(0x3f, gbc.e());
        EXPECT(0x80, gbc.h());
        EXPECT(0x2d, gbc.l());
        EXPECT(0xbd98, gbc.sp());
        EXPECT(0xd02d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd02b));
        EXPECT(0x8c, gbc.readMem(0xd02c));
        // CB 8C 02E6
        gbc.setState(0x93e9, 0x733b, 0x9890, 0x1d95, 0x7536, 0x4113, 0x1, 0x1);
        gbc.writeMem(0x93e9, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x98, gbc.a());
        EXPECT(0x1d, gbc.b());
        EXPECT(0x95, gbc.c());
        EXPECT(0x75, gbc.d());
        EXPECT(0x36, gbc.e());
        EXPECT(0x41, gbc.h());
        EXPECT(0x13, gbc.l());
        EXPECT(0x733b, gbc.sp());
        EXPECT(0x93eb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x93e9));
        EXPECT(0x8c, gbc.readMem(0x93ea));
        // CB 8C 02E7
        gbc.setState(0x28d2, 0x8c5c, 0x2860, 0x5e35, 0x3469, 0x2d0a, 0x0, 0x1);
        gbc.writeMem(0x28d2, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x28, gbc.a());
        EXPECT(0x5e, gbc.b());
        EXPECT(0x35, gbc.c());
        EXPECT(0x34, gbc.d());
        EXPECT(0x69, gbc.e());
        EXPECT(0x2d, gbc.h());
        EXPECT(0xa, gbc.l());
        EXPECT(0x8c5c, gbc.sp());
        EXPECT(0x28d4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 02E8
        gbc.setState(0xbcc6, 0x8455, 0x1730, 0x7e2c, 0x903f, 0xb5ea, 0x0, 0x0);
        gbc.writeMem(0xbcc6, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x17, gbc.a());
        EXPECT(0x7e, gbc.b());
        EXPECT(0x2c, gbc.c());
        EXPECT(0x90, gbc.d());
        EXPECT(0x3f, gbc.e());
        EXPECT(0xb5, gbc.h());
        EXPECT(0xea, gbc.l());
        EXPECT(0x8455, gbc.sp());
        EXPECT(0xbcc8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbcc6));
        EXPECT(0x8c, gbc.readMem(0xbcc7));
        // CB 8C 02E9
        gbc.setState(0xbe98, 0x73c8, 0xe930, 0x4b04, 0x4b1f, 0x6b1f, 0x1, 0x0);
        gbc.writeMem(0xbe98, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xe9, gbc.a());
        EXPECT(0x4b, gbc.b());
        EXPECT(0x4, gbc.c());
        EXPECT(0x4b, gbc.d());
        EXPECT(0x1f, gbc.e());
        EXPECT(0x69, gbc.h());
        EXPECT(0x1f, gbc.l());
        EXPECT(0x73c8, gbc.sp());
        EXPECT(0xbe9a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbe98));
        EXPECT(0x8c, gbc.readMem(0xbe99));
        // CB 8C 02EA
        gbc.setState(0xe719, 0xfc6e, 0x92e0, 0xb1c9, 0x314d, 0x719a, 0x0, 0x0);
        gbc.writeMem(0xe719, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x92, gbc.a());
        EXPECT(0xb1, gbc.b());
        EXPECT(0xc9, gbc.c());
        EXPECT(0x31, gbc.d());
        EXPECT(0x4d, gbc.e());
        EXPECT(0x71, gbc.h());
        EXPECT(0x9a, gbc.l());
        EXPECT(0xfc6e, gbc.sp());
        EXPECT(0xe71b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe719));
        EXPECT(0x8c, gbc.readMem(0xe71a));
        // CB 8C 02EB
        gbc.setState(0x849, 0xab62, 0x99e0, 0x9a5a, 0xafff, 0xa3f1, 0x0, 0x0);
        gbc.writeMem(0x849, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x99, gbc.a());
        EXPECT(0x9a, gbc.b());
        EXPECT(0x5a, gbc.c());
        EXPECT(0xaf, gbc.d());
        EXPECT(0xff, gbc.e());
        EXPECT(0xa1, gbc.h());
        EXPECT(0xf1, gbc.l());
        EXPECT(0xab62, gbc.sp());
        EXPECT(0x84b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 02EC
        gbc.setState(0x49ac, 0x87ba, 0x5e70, 0x1c97, 0xb678, 0x1a34, 0x0, 0x1);
        gbc.writeMem(0x49ac, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x5e, gbc.a());
        EXPECT(0x1c, gbc.b());
        EXPECT(0x97, gbc.c());
        EXPECT(0xb6, gbc.d());
        EXPECT(0x78, gbc.e());
        EXPECT(0x18, gbc.h());
        EXPECT(0x34, gbc.l());
        EXPECT(0x87ba, gbc.sp());
        EXPECT(0x49ae, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 02ED
        gbc.setState(0x75ab, 0x2118, 0xe0b0, 0xf2, 0x9cd4, 0xa61c, 0x0, 0x1);
        gbc.writeMem(0x75ab, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xe0, gbc.a());
        EXPECT(0x0, gbc.b());
        EXPECT(0xf2, gbc.c());
        EXPECT(0x9c, gbc.d());
        EXPECT(0xd4, gbc.e());
        EXPECT(0xa4, gbc.h());
        EXPECT(0x1c, gbc.l());
        EXPECT(0x2118, gbc.sp());
        EXPECT(0x75ad, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 02EE
        gbc.setState(0x6878, 0xad09, 0x5de0, 0xf947, 0xd6c6, 0x3349, 0x0, 0x0);
        gbc.writeMem(0x6878, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x5d, gbc.a());
        EXPECT(0xf9, gbc.b());
        EXPECT(0x47, gbc.c());
        EXPECT(0xd6, gbc.d());
        EXPECT(0xc6, gbc.e());
        EXPECT(0x31, gbc.h());
        EXPECT(0x49, gbc.l());
        EXPECT(0xad09, gbc.sp());
        EXPECT(0x687a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 02EF
        gbc.setState(0x74fb, 0x7a56, 0xa880, 0xac1e, 0x7d12, 0xc59b, 0x0, 0x1);
        gbc.writeMem(0x74fb, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xa8, gbc.a());
        EXPECT(0xac, gbc.b());
        EXPECT(0x1e, gbc.c());
        EXPECT(0x7d, gbc.d());
        EXPECT(0x12, gbc.e());
        EXPECT(0xc5, gbc.h());
        EXPECT(0x9b, gbc.l());
        EXPECT(0x7a56, gbc.sp());
        EXPECT(0x74fd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 02F0
        gbc.setState(0x268e, 0x892b, 0xeb30, 0x5429, 0x5337, 0x49cc, 0x0, 0x1);
        gbc.writeMem(0x268e, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xeb, gbc.a());
        EXPECT(0x54, gbc.b());
        EXPECT(0x29, gbc.c());
        EXPECT(0x53, gbc.d());
        EXPECT(0x37, gbc.e());
        EXPECT(0x49, gbc.h());
        EXPECT(0xcc, gbc.l());
        EXPECT(0x892b, gbc.sp());
        EXPECT(0x2690, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 02F2
        gbc.setState(0xa6fd, 0xeba1, 0x7040, 0x77b3, 0x7381, 0xb2bc, 0x1, 0x0);
        gbc.writeMem(0xa6fd, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x70, gbc.a());
        EXPECT(0x77, gbc.b());
        EXPECT(0xb3, gbc.c());
        EXPECT(0x73, gbc.d());
        EXPECT(0x81, gbc.e());
        EXPECT(0xb0, gbc.h());
        EXPECT(0xbc, gbc.l());
        EXPECT(0xeba1, gbc.sp());
        EXPECT(0xa6ff, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa6fd));
        EXPECT(0x8c, gbc.readMem(0xa6fe));
        // CB 8C 02F3
        gbc.setState(0x83ac, 0xa2ba, 0x9aa0, 0x7357, 0xd5b, 0x1ccb, 0x0, 0x1);
        gbc.writeMem(0x83ac, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x9a, gbc.a());
        EXPECT(0x73, gbc.b());
        EXPECT(0x57, gbc.c());
        EXPECT(0xd, gbc.d());
        EXPECT(0x5b, gbc.e());
        EXPECT(0x1c, gbc.h());
        EXPECT(0xcb, gbc.l());
        EXPECT(0xa2ba, gbc.sp());
        EXPECT(0x83ae, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x83ac));
        EXPECT(0x8c, gbc.readMem(0x83ad));
        // CB 8C 02F4
        gbc.setState(0x23e6, 0x7388, 0xe8c0, 0x605d, 0x4fda, 0xd958, 0x1, 0x1);
        gbc.writeMem(0x23e6, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xe8, gbc.a());
        EXPECT(0x60, gbc.b());
        EXPECT(0x5d, gbc.c());
        EXPECT(0x4f, gbc.d());
        EXPECT(0xda, gbc.e());
        EXPECT(0xd9, gbc.h());
        EXPECT(0x58, gbc.l());
        EXPECT(0x7388, gbc.sp());
        EXPECT(0x23e8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 02F5
        gbc.setState(0x1e68, 0xe585, 0xce70, 0x5b0, 0x6bd9, 0xe5b7, 0x1, 0x1);
        gbc.writeMem(0x1e68, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xce, gbc.a());
        EXPECT(0x5, gbc.b());
        EXPECT(0xb0, gbc.c());
        EXPECT(0x6b, gbc.d());
        EXPECT(0xd9, gbc.e());
        EXPECT(0xe5, gbc.h());
        EXPECT(0xb7, gbc.l());
        EXPECT(0xe585, gbc.sp());
        EXPECT(0x1e6a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 02F6
        gbc.setState(0x8dc6, 0xba1c, 0x9d0, 0x7197, 0x94ad, 0x4a1d, 0x1, 0x1);
        gbc.writeMem(0x8dc6, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x9, gbc.a());
        EXPECT(0x71, gbc.b());
        EXPECT(0x97, gbc.c());
        EXPECT(0x94, gbc.d());
        EXPECT(0xad, gbc.e());
        EXPECT(0x48, gbc.h());
        EXPECT(0x1d, gbc.l());
        EXPECT(0xba1c, gbc.sp());
        EXPECT(0x8dc8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8dc6));
        EXPECT(0x8c, gbc.readMem(0x8dc7));
        // CB 8C 02F7
        gbc.setState(0xe8fb, 0x7a17, 0x1730, 0x2bf4, 0xecb2, 0x64b8, 0x1, 0x0);
        gbc.writeMem(0xe8fb, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x17, gbc.a());
        EXPECT(0x2b, gbc.b());
        EXPECT(0xf4, gbc.c());
        EXPECT(0xec, gbc.d());
        EXPECT(0xb2, gbc.e());
        EXPECT(0x64, gbc.h());
        EXPECT(0xb8, gbc.l());
        EXPECT(0x7a17, gbc.sp());
        EXPECT(0xe8fd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe8fb));
        EXPECT(0x8c, gbc.readMem(0xe8fc));
        // CB 8C 02F8
        gbc.setState(0xdb01, 0xd974, 0x1bb0, 0x89a, 0xc1e1, 0x6f0d, 0x1, 0x1);
        gbc.writeMem(0xdb01, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x1b, gbc.a());
        EXPECT(0x8, gbc.b());
        EXPECT(0x9a, gbc.c());
        EXPECT(0xc1, gbc.d());
        EXPECT(0xe1, gbc.e());
        EXPECT(0x6d, gbc.h());
        EXPECT(0xd, gbc.l());
        EXPECT(0xd974, gbc.sp());
        EXPECT(0xdb03, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdb01));
        EXPECT(0x8c, gbc.readMem(0xdb02));
        // CB 8C 02F9
        gbc.setState(0xc75f, 0xad69, 0x5c70, 0x9f8f, 0x3307, 0x7cf3, 0x0, 0x1);
        gbc.writeMem(0xc75f, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x5c, gbc.a());
        EXPECT(0x9f, gbc.b());
        EXPECT(0x8f, gbc.c());
        EXPECT(0x33, gbc.d());
        EXPECT(0x7, gbc.e());
        EXPECT(0x7c, gbc.h());
        EXPECT(0xf3, gbc.l());
        EXPECT(0xad69, gbc.sp());
        EXPECT(0xc761, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc75f));
        EXPECT(0x8c, gbc.readMem(0xc760));
        // CB 8C 02FA
        gbc.setState(0xbad0, 0xcb3b, 0xfde0, 0x7ab7, 0x2522, 0xfea5, 0x0, 0x0);
        gbc.writeMem(0xbad0, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xfd, gbc.a());
        EXPECT(0x7a, gbc.b());
        EXPECT(0xb7, gbc.c());
        EXPECT(0x25, gbc.d());
        EXPECT(0x22, gbc.e());
        EXPECT(0xfc, gbc.h());
        EXPECT(0xa5, gbc.l());
        EXPECT(0xcb3b, gbc.sp());
        EXPECT(0xbad2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbad0));
        EXPECT(0x8c, gbc.readMem(0xbad1));
        // CB 8C 02FB
        gbc.setState(0xaec, 0xa4ab, 0x22f0, 0x6d40, 0x1044, 0x9b7, 0x1, 0x1);
        gbc.writeMem(0xaec, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x22, gbc.a());
        EXPECT(0x6d, gbc.b());
        EXPECT(0x40, gbc.c());
        EXPECT(0x10, gbc.d());
        EXPECT(0x44, gbc.e());
        EXPECT(0x9, gbc.h());
        EXPECT(0xb7, gbc.l());
        EXPECT(0xa4ab, gbc.sp());
        EXPECT(0xaee, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 02FC
        gbc.setState(0xae1f, 0x628c, 0x6740, 0x8c48, 0xa501, 0x5be5, 0x1, 0x1);
        gbc.writeMem(0xae1f, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x67, gbc.a());
        EXPECT(0x8c, gbc.b());
        EXPECT(0x48, gbc.c());
        EXPECT(0xa5, gbc.d());
        EXPECT(0x1, gbc.e());
        EXPECT(0x59, gbc.h());
        EXPECT(0xe5, gbc.l());
        EXPECT(0x628c, gbc.sp());
        EXPECT(0xae21, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xae1f));
        EXPECT(0x8c, gbc.readMem(0xae20));
        // CB 8C 02FD
        gbc.setState(0xe212, 0x9f93, 0xf670, 0xd54b, 0xfdf3, 0x93cf, 0x1, 0x0);
        gbc.writeMem(0xe212, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xf6, gbc.a());
        EXPECT(0xd5, gbc.b());
        EXPECT(0x4b, gbc.c());
        EXPECT(0xfd, gbc.d());
        EXPECT(0xf3, gbc.e());
        EXPECT(0x91, gbc.h());
        EXPECT(0xcf, gbc.l());
        EXPECT(0x9f93, gbc.sp());
        EXPECT(0xe214, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe212));
        EXPECT(0x8c, gbc.readMem(0xe213));
        // CB 8C 02FE
        gbc.setState(0xd85a, 0x8288, 0xccd0, 0xd1c6, 0xe98b, 0xf3d2, 0x0, 0x0);
        gbc.writeMem(0xd85a, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xcc, gbc.a());
        EXPECT(0xd1, gbc.b());
        EXPECT(0xc6, gbc.c());
        EXPECT(0xe9, gbc.d());
        EXPECT(0x8b, gbc.e());
        EXPECT(0xf1, gbc.h());
        EXPECT(0xd2, gbc.l());
        EXPECT(0x8288, gbc.sp());
        EXPECT(0xd85c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd85a));
        EXPECT(0x8c, gbc.readMem(0xd85b));
        // CB 8C 02FF
        gbc.setState(0xca2c, 0x4d7b, 0x2660, 0x816e, 0x4d6f, 0x7e49, 0x1, 0x1);
        gbc.writeMem(0xca2c, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x26, gbc.a());
        EXPECT(0x81, gbc.b());
        EXPECT(0x6e, gbc.c());
        EXPECT(0x4d, gbc.d());
        EXPECT(0x6f, gbc.e());
        EXPECT(0x7c, gbc.h());
        EXPECT(0x49, gbc.l());
        EXPECT(0x4d7b, gbc.sp());
        EXPECT(0xca2e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xca2c));
        EXPECT(0x8c, gbc.readMem(0xca2d));
        // CB 8C 0300
        gbc.setState(0x1c2f, 0x1e25, 0xca10, 0x32e7, 0x7a2f, 0x81a3, 0x0, 0x0);
        gbc.writeMem(0x1c2f, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xca, gbc.a());
        EXPECT(0x32, gbc.b());
        EXPECT(0xe7, gbc.c());
        EXPECT(0x7a, gbc.d());
        EXPECT(0x2f, gbc.e());
        EXPECT(0x81, gbc.h());
        EXPECT(0xa3, gbc.l());
        EXPECT(0x1e25, gbc.sp());
        EXPECT(0x1c31, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 0301
        gbc.setState(0x5ba1, 0xd3b4, 0x21e0, 0x119b, 0x3c4b, 0x5a96, 0x1, 0x0);
        gbc.writeMem(0x5ba1, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x21, gbc.a());
        EXPECT(0x11, gbc.b());
        EXPECT(0x9b, gbc.c());
        EXPECT(0x3c, gbc.d());
        EXPECT(0x4b, gbc.e());
        EXPECT(0x58, gbc.h());
        EXPECT(0x96, gbc.l());
        EXPECT(0xd3b4, gbc.sp());
        EXPECT(0x5ba3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 0302
        gbc.setState(0x7c5, 0xcf92, 0x2bb0, 0xb983, 0x344a, 0xd940, 0x1, 0x1);
        gbc.writeMem(0x7c5, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x2b, gbc.a());
        EXPECT(0xb9, gbc.b());
        EXPECT(0x83, gbc.c());
        EXPECT(0x34, gbc.d());
        EXPECT(0x4a, gbc.e());
        EXPECT(0xd9, gbc.h());
        EXPECT(0x40, gbc.l());
        EXPECT(0xcf92, gbc.sp());
        EXPECT(0x7c7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 0303
        gbc.setState(0xcce7, 0x7fee, 0x2e50, 0xfeda, 0x47b9, 0x7d53, 0x0, 0x1);
        gbc.writeMem(0xcce7, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x2e, gbc.a());
        EXPECT(0xfe, gbc.b());
        EXPECT(0xda, gbc.c());
        EXPECT(0x47, gbc.d());
        EXPECT(0xb9, gbc.e());
        EXPECT(0x7d, gbc.h());
        EXPECT(0x53, gbc.l());
        EXPECT(0x7fee, gbc.sp());
        EXPECT(0xcce9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcce7));
        EXPECT(0x8c, gbc.readMem(0xcce8));
        // CB 8C 0304
        gbc.setState(0x4958, 0xc0ea, 0x83e0, 0x6144, 0x5148, 0x7cf6, 0x1, 0x1);
        gbc.writeMem(0x4958, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x83, gbc.a());
        EXPECT(0x61, gbc.b());
        EXPECT(0x44, gbc.c());
        EXPECT(0x51, gbc.d());
        EXPECT(0x48, gbc.e());
        EXPECT(0x7c, gbc.h());
        EXPECT(0xf6, gbc.l());
        EXPECT(0xc0ea, gbc.sp());
        EXPECT(0x495a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 0305
        gbc.setState(0x4da4, 0x2db2, 0x37e0, 0x5bf1, 0xa0f3, 0x4ec0, 0x1, 0x1);
        gbc.writeMem(0x4da4, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x37, gbc.a());
        EXPECT(0x5b, gbc.b());
        EXPECT(0xf1, gbc.c());
        EXPECT(0xa0, gbc.d());
        EXPECT(0xf3, gbc.e());
        EXPECT(0x4c, gbc.h());
        EXPECT(0xc0, gbc.l());
        EXPECT(0x2db2, gbc.sp());
        EXPECT(0x4da6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 0306
        gbc.setState(0x8468, 0x1e2a, 0x1a70, 0x884e, 0xb892, 0x3785, 0x0, 0x1);
        gbc.writeMem(0x8468, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x1a, gbc.a());
        EXPECT(0x88, gbc.b());
        EXPECT(0x4e, gbc.c());
        EXPECT(0xb8, gbc.d());
        EXPECT(0x92, gbc.e());
        EXPECT(0x35, gbc.h());
        EXPECT(0x85, gbc.l());
        EXPECT(0x1e2a, gbc.sp());
        EXPECT(0x846a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8468));
        EXPECT(0x8c, gbc.readMem(0x8469));
        // CB 8C 0307
        gbc.setState(0xc429, 0x4683, 0x60c0, 0x6260, 0x2f5b, 0x7628, 0x0, 0x0);
        gbc.writeMem(0xc429, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x60, gbc.a());
        EXPECT(0x62, gbc.b());
        EXPECT(0x60, gbc.c());
        EXPECT(0x2f, gbc.d());
        EXPECT(0x5b, gbc.e());
        EXPECT(0x74, gbc.h());
        EXPECT(0x28, gbc.l());
        EXPECT(0x4683, gbc.sp());
        EXPECT(0xc42b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc429));
        EXPECT(0x8c, gbc.readMem(0xc42a));
        // CB 8C 0308
        gbc.setState(0xb34a, 0x1829, 0xeda0, 0xeadd, 0x7e16, 0x1ecd, 0x1, 0x1);
        gbc.writeMem(0xb34a, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xed, gbc.a());
        EXPECT(0xea, gbc.b());
        EXPECT(0xdd, gbc.c());
        EXPECT(0x7e, gbc.d());
        EXPECT(0x16, gbc.e());
        EXPECT(0x1c, gbc.h());
        EXPECT(0xcd, gbc.l());
        EXPECT(0x1829, gbc.sp());
        EXPECT(0xb34c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb34a));
        EXPECT(0x8c, gbc.readMem(0xb34b));
        // CB 8C 0309
        gbc.setState(0xac96, 0x2e25, 0x3300, 0x56e2, 0x4c79, 0xec27, 0x1, 0x0);
        gbc.writeMem(0xac96, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x33, gbc.a());
        EXPECT(0x56, gbc.b());
        EXPECT(0xe2, gbc.c());
        EXPECT(0x4c, gbc.d());
        EXPECT(0x79, gbc.e());
        EXPECT(0xec, gbc.h());
        EXPECT(0x27, gbc.l());
        EXPECT(0x2e25, gbc.sp());
        EXPECT(0xac98, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xac96));
        EXPECT(0x8c, gbc.readMem(0xac97));
        // CB 8C 030A
        gbc.setState(0x262b, 0xd4b, 0xa4b0, 0x36c8, 0xa910, 0x98d2, 0x1, 0x1);
        gbc.writeMem(0x262b, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xa4, gbc.a());
        EXPECT(0x36, gbc.b());
        EXPECT(0xc8, gbc.c());
        EXPECT(0xa9, gbc.d());
        EXPECT(0x10, gbc.e());
        EXPECT(0x98, gbc.h());
        EXPECT(0xd2, gbc.l());
        EXPECT(0xd4b, gbc.sp());
        EXPECT(0x262d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 030B
        gbc.setState(0x758f, 0xaa92, 0x60c0, 0x6784, 0x7dd0, 0x9676, 0x0, 0x0);
        gbc.writeMem(0x758f, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x60, gbc.a());
        EXPECT(0x67, gbc.b());
        EXPECT(0x84, gbc.c());
        EXPECT(0x7d, gbc.d());
        EXPECT(0xd0, gbc.e());
        EXPECT(0x94, gbc.h());
        EXPECT(0x76, gbc.l());
        EXPECT(0xaa92, gbc.sp());
        EXPECT(0x7591, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 030C
        gbc.setState(0x5c8a, 0x8a5b, 0x85b0, 0x4393, 0xe643, 0x899b, 0x1, 0x1);
        gbc.writeMem(0x5c8a, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x85, gbc.a());
        EXPECT(0x43, gbc.b());
        EXPECT(0x93, gbc.c());
        EXPECT(0xe6, gbc.d());
        EXPECT(0x43, gbc.e());
        EXPECT(0x89, gbc.h());
        EXPECT(0x9b, gbc.l());
        EXPECT(0x8a5b, gbc.sp());
        EXPECT(0x5c8c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 030D
        gbc.setState(0xb649, 0x9631, 0xc440, 0xaace, 0x1d11, 0xd803, 0x0, 0x1);
        gbc.writeMem(0xb649, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xc4, gbc.a());
        EXPECT(0xaa, gbc.b());
        EXPECT(0xce, gbc.c());
        EXPECT(0x1d, gbc.d());
        EXPECT(0x11, gbc.e());
        EXPECT(0xd8, gbc.h());
        EXPECT(0x3, gbc.l());
        EXPECT(0x9631, gbc.sp());
        EXPECT(0xb64b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb649));
        EXPECT(0x8c, gbc.readMem(0xb64a));
        // CB 8C 030E
        gbc.setState(0x1c2, 0x57d4, 0xc6b0, 0xcb42, 0xff55, 0xd596, 0x0, 0x0);
        gbc.writeMem(0x1c2, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xc6, gbc.a());
        EXPECT(0xcb, gbc.b());
        EXPECT(0x42, gbc.c());
        EXPECT(0xff, gbc.d());
        EXPECT(0x55, gbc.e());
        EXPECT(0xd5, gbc.h());
        EXPECT(0x96, gbc.l());
        EXPECT(0x57d4, gbc.sp());
        EXPECT(0x1c4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 030F
        gbc.setState(0x47b7, 0x6764, 0x25d0, 0x62b0, 0x484a, 0xf9f0, 0x0, 0x0);
        gbc.writeMem(0x47b7, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x25, gbc.a());
        EXPECT(0x62, gbc.b());
        EXPECT(0xb0, gbc.c());
        EXPECT(0x48, gbc.d());
        EXPECT(0x4a, gbc.e());
        EXPECT(0xf9, gbc.h());
        EXPECT(0xf0, gbc.l());
        EXPECT(0x6764, gbc.sp());
        EXPECT(0x47b9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 0311
        gbc.setState(0x2548, 0xeb65, 0x7af0, 0xbd3d, 0x50a9, 0x1488, 0x1, 0x1);
        gbc.writeMem(0x2548, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x7a, gbc.a());
        EXPECT(0xbd, gbc.b());
        EXPECT(0x3d, gbc.c());
        EXPECT(0x50, gbc.d());
        EXPECT(0xa9, gbc.e());
        EXPECT(0x14, gbc.h());
        EXPECT(0x88, gbc.l());
        EXPECT(0xeb65, gbc.sp());
        EXPECT(0x254a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 0312
        gbc.setState(0x26, 0xd63a, 0xebe0, 0x94d7, 0x7228, 0x98a3, 0x1, 0x1);
        gbc.writeMem(0x26, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xeb, gbc.a());
        EXPECT(0x94, gbc.b());
        EXPECT(0xd7, gbc.c());
        EXPECT(0x72, gbc.d());
        EXPECT(0x28, gbc.e());
        EXPECT(0x98, gbc.h());
        EXPECT(0xa3, gbc.l());
        EXPECT(0xd63a, gbc.sp());
        EXPECT(0x28, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 0313
        gbc.setState(0x7945, 0xba41, 0xc240, 0x67df, 0xfcde, 0x1ed, 0x1, 0x1);
        gbc.writeMem(0x7945, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xc2, gbc.a());
        EXPECT(0x67, gbc.b());
        EXPECT(0xdf, gbc.c());
        EXPECT(0xfc, gbc.d());
        EXPECT(0xde, gbc.e());
        EXPECT(0x1, gbc.h());
        EXPECT(0xed, gbc.l());
        EXPECT(0xba41, gbc.sp());
        EXPECT(0x7947, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 0314
        gbc.setState(0xc783, 0x49f9, 0x5cd0, 0x284, 0xbed5, 0x2b20, 0x0, 0x0);
        gbc.writeMem(0xc783, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x5c, gbc.a());
        EXPECT(0x2, gbc.b());
        EXPECT(0x84, gbc.c());
        EXPECT(0xbe, gbc.d());
        EXPECT(0xd5, gbc.e());
        EXPECT(0x29, gbc.h());
        EXPECT(0x20, gbc.l());
        EXPECT(0x49f9, gbc.sp());
        EXPECT(0xc785, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc783));
        EXPECT(0x8c, gbc.readMem(0xc784));
        // CB 8C 0315
        gbc.setState(0xb886, 0x3540, 0x3e00, 0xe212, 0xa1af, 0xd2ae, 0x0, 0x1);
        gbc.writeMem(0xb886, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x3e, gbc.a());
        EXPECT(0xe2, gbc.b());
        EXPECT(0x12, gbc.c());
        EXPECT(0xa1, gbc.d());
        EXPECT(0xaf, gbc.e());
        EXPECT(0xd0, gbc.h());
        EXPECT(0xae, gbc.l());
        EXPECT(0x3540, gbc.sp());
        EXPECT(0xb888, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb886));
        EXPECT(0x8c, gbc.readMem(0xb887));
        // CB 8C 0316
        gbc.setState(0x6997, 0xb250, 0xaa70, 0xeeb6, 0x19e9, 0xedeb, 0x1, 0x0);
        gbc.writeMem(0x6997, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xaa, gbc.a());
        EXPECT(0xee, gbc.b());
        EXPECT(0xb6, gbc.c());
        EXPECT(0x19, gbc.d());
        EXPECT(0xe9, gbc.e());
        EXPECT(0xed, gbc.h());
        EXPECT(0xeb, gbc.l());
        EXPECT(0xb250, gbc.sp());
        EXPECT(0x6999, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 0317
        gbc.setState(0x6631, 0xad85, 0xc9a0, 0xb6a0, 0x8891, 0x756d, 0x1, 0x1);
        gbc.writeMem(0x6631, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xc9, gbc.a());
        EXPECT(0xb6, gbc.b());
        EXPECT(0xa0, gbc.c());
        EXPECT(0x88, gbc.d());
        EXPECT(0x91, gbc.e());
        EXPECT(0x75, gbc.h());
        EXPECT(0x6d, gbc.l());
        EXPECT(0xad85, gbc.sp());
        EXPECT(0x6633, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 0318
        gbc.setState(0x2b9e, 0x6138, 0x8fd0, 0x8044, 0xf072, 0xf72b, 0x1, 0x1);
        gbc.writeMem(0x2b9e, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x8f, gbc.a());
        EXPECT(0x80, gbc.b());
        EXPECT(0x44, gbc.c());
        EXPECT(0xf0, gbc.d());
        EXPECT(0x72, gbc.e());
        EXPECT(0xf5, gbc.h());
        EXPECT(0x2b, gbc.l());
        EXPECT(0x6138, gbc.sp());
        EXPECT(0x2ba0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 0319
        gbc.setState(0xcc2, 0x3a72, 0x87c0, 0x45a0, 0x3f0f, 0x30a0, 0x1, 0x0);
        gbc.writeMem(0xcc2, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x87, gbc.a());
        EXPECT(0x45, gbc.b());
        EXPECT(0xa0, gbc.c());
        EXPECT(0x3f, gbc.d());
        EXPECT(0xf, gbc.e());
        EXPECT(0x30, gbc.h());
        EXPECT(0xa0, gbc.l());
        EXPECT(0x3a72, gbc.sp());
        EXPECT(0xcc4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 031B
        gbc.setState(0x54a0, 0x9340, 0xc180, 0x7d27, 0x3486, 0x5789, 0x1, 0x0);
        gbc.writeMem(0x54a0, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xc1, gbc.a());
        EXPECT(0x7d, gbc.b());
        EXPECT(0x27, gbc.c());
        EXPECT(0x34, gbc.d());
        EXPECT(0x86, gbc.e());
        EXPECT(0x55, gbc.h());
        EXPECT(0x89, gbc.l());
        EXPECT(0x9340, gbc.sp());
        EXPECT(0x54a2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 031C
        gbc.setState(0xe866, 0x4e4b, 0xc290, 0x47a9, 0x1165, 0xb0e2, 0x1, 0x0);
        gbc.writeMem(0xe866, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xc2, gbc.a());
        EXPECT(0x47, gbc.b());
        EXPECT(0xa9, gbc.c());
        EXPECT(0x11, gbc.d());
        EXPECT(0x65, gbc.e());
        EXPECT(0xb0, gbc.h());
        EXPECT(0xe2, gbc.l());
        EXPECT(0x4e4b, gbc.sp());
        EXPECT(0xe868, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe866));
        EXPECT(0x8c, gbc.readMem(0xe867));
        // CB 8C 031D
        gbc.setState(0xe901, 0x281d, 0x9870, 0x9d91, 0xf4a6, 0x3846, 0x1, 0x1);
        gbc.writeMem(0xe901, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x98, gbc.a());
        EXPECT(0x9d, gbc.b());
        EXPECT(0x91, gbc.c());
        EXPECT(0xf4, gbc.d());
        EXPECT(0xa6, gbc.e());
        EXPECT(0x38, gbc.h());
        EXPECT(0x46, gbc.l());
        EXPECT(0x281d, gbc.sp());
        EXPECT(0xe903, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe901));
        EXPECT(0x8c, gbc.readMem(0xe902));
        // CB 8C 031E
        gbc.setState(0xe55c, 0x13b6, 0xb570, 0x80f3, 0x62fc, 0x4b64, 0x0, 0x0);
        gbc.writeMem(0xe55c, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xb5, gbc.a());
        EXPECT(0x80, gbc.b());
        EXPECT(0xf3, gbc.c());
        EXPECT(0x62, gbc.d());
        EXPECT(0xfc, gbc.e());
        EXPECT(0x49, gbc.h());
        EXPECT(0x64, gbc.l());
        EXPECT(0x13b6, gbc.sp());
        EXPECT(0xe55e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe55c));
        EXPECT(0x8c, gbc.readMem(0xe55d));
        // CB 8C 031F
        gbc.setState(0xc81f, 0x745b, 0xb940, 0x70de, 0xd44a, 0x568a, 0x0, 0x1);
        gbc.writeMem(0xc81f, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xb9, gbc.a());
        EXPECT(0x70, gbc.b());
        EXPECT(0xde, gbc.c());
        EXPECT(0xd4, gbc.d());
        EXPECT(0x4a, gbc.e());
        EXPECT(0x54, gbc.h());
        EXPECT(0x8a, gbc.l());
        EXPECT(0x745b, gbc.sp());
        EXPECT(0xc821, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc81f));
        EXPECT(0x8c, gbc.readMem(0xc820));
        // CB 8C 0320
        gbc.setState(0xa92f, 0xc69c, 0xfaf0, 0x851f, 0xa053, 0x5c75, 0x0, 0x0);
        gbc.writeMem(0xa92f, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xfa, gbc.a());
        EXPECT(0x85, gbc.b());
        EXPECT(0x1f, gbc.c());
        EXPECT(0xa0, gbc.d());
        EXPECT(0x53, gbc.e());
        EXPECT(0x5c, gbc.h());
        EXPECT(0x75, gbc.l());
        EXPECT(0xc69c, gbc.sp());
        EXPECT(0xa931, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa92f));
        EXPECT(0x8c, gbc.readMem(0xa930));
        // CB 8C 0321
        gbc.setState(0xa524, 0x98a7, 0x5ef0, 0x1381, 0x452d, 0x86bb, 0x0, 0x0);
        gbc.writeMem(0xa524, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x5e, gbc.a());
        EXPECT(0x13, gbc.b());
        EXPECT(0x81, gbc.c());
        EXPECT(0x45, gbc.d());
        EXPECT(0x2d, gbc.e());
        EXPECT(0x84, gbc.h());
        EXPECT(0xbb, gbc.l());
        EXPECT(0x98a7, gbc.sp());
        EXPECT(0xa526, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa524));
        EXPECT(0x8c, gbc.readMem(0xa525));
        // CB 8C 0322
        gbc.setState(0x9bfa, 0xb49d, 0xe550, 0xd5f9, 0xd931, 0x2fdc, 0x1, 0x0);
        gbc.writeMem(0x9bfa, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xe5, gbc.a());
        EXPECT(0xd5, gbc.b());
        EXPECT(0xf9, gbc.c());
        EXPECT(0xd9, gbc.d());
        EXPECT(0x31, gbc.e());
        EXPECT(0x2d, gbc.h());
        EXPECT(0xdc, gbc.l());
        EXPECT(0xb49d, gbc.sp());
        EXPECT(0x9bfc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9bfa));
        EXPECT(0x8c, gbc.readMem(0x9bfb));
        // CB 8C 0323
        gbc.setState(0x9688, 0x152f, 0xe2e0, 0x6596, 0x9faa, 0xb236, 0x0, 0x0);
        gbc.writeMem(0x9688, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xe2, gbc.a());
        EXPECT(0x65, gbc.b());
        EXPECT(0x96, gbc.c());
        EXPECT(0x9f, gbc.d());
        EXPECT(0xaa, gbc.e());
        EXPECT(0xb0, gbc.h());
        EXPECT(0x36, gbc.l());
        EXPECT(0x152f, gbc.sp());
        EXPECT(0x968a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9688));
        EXPECT(0x8c, gbc.readMem(0x9689));
        // CB 8C 0324
        gbc.setState(0xa516, 0x9aa0, 0x6020, 0xa404, 0xdd5a, 0x848, 0x0, 0x1);
        gbc.writeMem(0xa516, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x60, gbc.a());
        EXPECT(0xa4, gbc.b());
        EXPECT(0x4, gbc.c());
        EXPECT(0xdd, gbc.d());
        EXPECT(0x5a, gbc.e());
        EXPECT(0x8, gbc.h());
        EXPECT(0x48, gbc.l());
        EXPECT(0x9aa0, gbc.sp());
        EXPECT(0xa518, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa516));
        EXPECT(0x8c, gbc.readMem(0xa517));
        // CB 8C 0325
        gbc.setState(0xe51d, 0xf042, 0x5840, 0x2eb7, 0x7cab, 0x3b19, 0x0, 0x0);
        gbc.writeMem(0xe51d, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x58, gbc.a());
        EXPECT(0x2e, gbc.b());
        EXPECT(0xb7, gbc.c());
        EXPECT(0x7c, gbc.d());
        EXPECT(0xab, gbc.e());
        EXPECT(0x39, gbc.h());
        EXPECT(0x19, gbc.l());
        EXPECT(0xf042, gbc.sp());
        EXPECT(0xe51f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe51d));
        EXPECT(0x8c, gbc.readMem(0xe51e));
        // CB 8C 0326
        gbc.setState(0x9fb5, 0x5122, 0xf430, 0x1286, 0x23f6, 0xb23, 0x0, 0x0);
        gbc.writeMem(0x9fb5, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xf4, gbc.a());
        EXPECT(0x12, gbc.b());
        EXPECT(0x86, gbc.c());
        EXPECT(0x23, gbc.d());
        EXPECT(0xf6, gbc.e());
        EXPECT(0x9, gbc.h());
        EXPECT(0x23, gbc.l());
        EXPECT(0x5122, gbc.sp());
        EXPECT(0x9fb7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9fb5));
        EXPECT(0x8c, gbc.readMem(0x9fb6));
        // CB 8C 0327
        gbc.setState(0x65e7, 0xbe77, 0xf8e0, 0x2edf, 0xdbd5, 0xbdea, 0x0, 0x1);
        gbc.writeMem(0x65e7, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xf8, gbc.a());
        EXPECT(0x2e, gbc.b());
        EXPECT(0xdf, gbc.c());
        EXPECT(0xdb, gbc.d());
        EXPECT(0xd5, gbc.e());
        EXPECT(0xbd, gbc.h());
        EXPECT(0xea, gbc.l());
        EXPECT(0xbe77, gbc.sp());
        EXPECT(0x65e9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 0328
        gbc.setState(0xef4e, 0x3fb8, 0xd8f0, 0x95bd, 0x7d37, 0xc98a, 0x1, 0x1);
        gbc.writeMem(0xef4e, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xd8, gbc.a());
        EXPECT(0x95, gbc.b());
        EXPECT(0xbd, gbc.c());
        EXPECT(0x7d, gbc.d());
        EXPECT(0x37, gbc.e());
        EXPECT(0xc9, gbc.h());
        EXPECT(0x8a, gbc.l());
        EXPECT(0x3fb8, gbc.sp());
        EXPECT(0xef50, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xef4e));
        EXPECT(0x8c, gbc.readMem(0xef4f));
        // CB 8C 0329
        gbc.setState(0xae12, 0x4488, 0x10c0, 0xfe09, 0x8093, 0x7026, 0x1, 0x1);
        gbc.writeMem(0xae12, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x10, gbc.a());
        EXPECT(0xfe, gbc.b());
        EXPECT(0x9, gbc.c());
        EXPECT(0x80, gbc.d());
        EXPECT(0x93, gbc.e());
        EXPECT(0x70, gbc.h());
        EXPECT(0x26, gbc.l());
        EXPECT(0x4488, gbc.sp());
        EXPECT(0xae14, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xae12));
        EXPECT(0x8c, gbc.readMem(0xae13));
        // CB 8C 032A
        gbc.setState(0x3d6c, 0xa5fc, 0xdba0, 0x26ae, 0x7094, 0xf6e5, 0x1, 0x1);
        gbc.writeMem(0x3d6c, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xdb, gbc.a());
        EXPECT(0x26, gbc.b());
        EXPECT(0xae, gbc.c());
        EXPECT(0x70, gbc.d());
        EXPECT(0x94, gbc.e());
        EXPECT(0xf4, gbc.h());
        EXPECT(0xe5, gbc.l());
        EXPECT(0xa5fc, gbc.sp());
        EXPECT(0x3d6e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 032C
        gbc.setState(0x359a, 0xadbb, 0x90, 0xf96a, 0x23d0, 0x9025, 0x0, 0x0);
        gbc.writeMem(0x359a, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xf9, gbc.b());
        EXPECT(0x6a, gbc.c());
        EXPECT(0x23, gbc.d());
        EXPECT(0xd0, gbc.e());
        EXPECT(0x90, gbc.h());
        EXPECT(0x25, gbc.l());
        EXPECT(0xadbb, gbc.sp());
        EXPECT(0x359c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 032D
        gbc.setState(0x8cf1, 0x9f32, 0x9720, 0x338e, 0xf160, 0xf612, 0x1, 0x1);
        gbc.writeMem(0x8cf1, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x97, gbc.a());
        EXPECT(0x33, gbc.b());
        EXPECT(0x8e, gbc.c());
        EXPECT(0xf1, gbc.d());
        EXPECT(0x60, gbc.e());
        EXPECT(0xf4, gbc.h());
        EXPECT(0x12, gbc.l());
        EXPECT(0x9f32, gbc.sp());
        EXPECT(0x8cf3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8cf1));
        EXPECT(0x8c, gbc.readMem(0x8cf2));
        // CB 8C 032E
        gbc.setState(0x57d2, 0xebc1, 0xc120, 0x4cc8, 0x7e9c, 0x25b2, 0x0, 0x1);
        gbc.writeMem(0x57d2, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xc1, gbc.a());
        EXPECT(0x4c, gbc.b());
        EXPECT(0xc8, gbc.c());
        EXPECT(0x7e, gbc.d());
        EXPECT(0x9c, gbc.e());
        EXPECT(0x25, gbc.h());
        EXPECT(0xb2, gbc.l());
        EXPECT(0xebc1, gbc.sp());
        EXPECT(0x57d4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 032F
        gbc.setState(0xbab2, 0x449f, 0xcef0, 0x39a7, 0x6356, 0x5a24, 0x1, 0x0);
        gbc.writeMem(0xbab2, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xce, gbc.a());
        EXPECT(0x39, gbc.b());
        EXPECT(0xa7, gbc.c());
        EXPECT(0x63, gbc.d());
        EXPECT(0x56, gbc.e());
        EXPECT(0x58, gbc.h());
        EXPECT(0x24, gbc.l());
        EXPECT(0x449f, gbc.sp());
        EXPECT(0xbab4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbab2));
        EXPECT(0x8c, gbc.readMem(0xbab3));
        // CB 8C 0330
        gbc.setState(0xefa, 0xc540, 0x7ae0, 0x4133, 0xe734, 0x9be3, 0x0, 0x0);
        gbc.writeMem(0xefa, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x7a, gbc.a());
        EXPECT(0x41, gbc.b());
        EXPECT(0x33, gbc.c());
        EXPECT(0xe7, gbc.d());
        EXPECT(0x34, gbc.e());
        EXPECT(0x99, gbc.h());
        EXPECT(0xe3, gbc.l());
        EXPECT(0xc540, gbc.sp());
        EXPECT(0xefc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 0331
        gbc.setState(0x1920, 0xa64e, 0xc7e0, 0x223b, 0x9880, 0x9e18, 0x1, 0x1);
        gbc.writeMem(0x1920, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xc7, gbc.a());
        EXPECT(0x22, gbc.b());
        EXPECT(0x3b, gbc.c());
        EXPECT(0x98, gbc.d());
        EXPECT(0x80, gbc.e());
        EXPECT(0x9c, gbc.h());
        EXPECT(0x18, gbc.l());
        EXPECT(0xa64e, gbc.sp());
        EXPECT(0x1922, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 0332
        gbc.setState(0x9773, 0x9928, 0xa240, 0x485b, 0xc6ef, 0x7e3e, 0x0, 0x1);
        gbc.writeMem(0x9773, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xa2, gbc.a());
        EXPECT(0x48, gbc.b());
        EXPECT(0x5b, gbc.c());
        EXPECT(0xc6, gbc.d());
        EXPECT(0xef, gbc.e());
        EXPECT(0x7c, gbc.h());
        EXPECT(0x3e, gbc.l());
        EXPECT(0x9928, gbc.sp());
        EXPECT(0x9775, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9773));
        EXPECT(0x8c, gbc.readMem(0x9774));
        // CB 8C 0333
        gbc.setState(0x51a9, 0x9204, 0xb690, 0x55e0, 0x300e, 0xe7d0, 0x1, 0x1);
        gbc.writeMem(0x51a9, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xb6, gbc.a());
        EXPECT(0x55, gbc.b());
        EXPECT(0xe0, gbc.c());
        EXPECT(0x30, gbc.d());
        EXPECT(0xe, gbc.e());
        EXPECT(0xe5, gbc.h());
        EXPECT(0xd0, gbc.l());
        EXPECT(0x9204, gbc.sp());
        EXPECT(0x51ab, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 0334
        gbc.setState(0xc457, 0x7d5a, 0x2370, 0x43d3, 0xeb49, 0xd315, 0x1, 0x1);
        gbc.writeMem(0xc457, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x23, gbc.a());
        EXPECT(0x43, gbc.b());
        EXPECT(0xd3, gbc.c());
        EXPECT(0xeb, gbc.d());
        EXPECT(0x49, gbc.e());
        EXPECT(0xd1, gbc.h());
        EXPECT(0x15, gbc.l());
        EXPECT(0x7d5a, gbc.sp());
        EXPECT(0xc459, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc457));
        EXPECT(0x8c, gbc.readMem(0xc458));
        // CB 8C 0335
        gbc.setState(0xc8fd, 0x92e9, 0x23d0, 0xb433, 0xc775, 0x4dee, 0x1, 0x0);
        gbc.writeMem(0xc8fd, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x23, gbc.a());
        EXPECT(0xb4, gbc.b());
        EXPECT(0x33, gbc.c());
        EXPECT(0xc7, gbc.d());
        EXPECT(0x75, gbc.e());
        EXPECT(0x4d, gbc.h());
        EXPECT(0xee, gbc.l());
        EXPECT(0x92e9, gbc.sp());
        EXPECT(0xc8ff, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc8fd));
        EXPECT(0x8c, gbc.readMem(0xc8fe));
        // CB 8C 0336
        gbc.setState(0xed50, 0xf5b4, 0x4270, 0xea81, 0xa118, 0x646c, 0x1, 0x0);
        gbc.writeMem(0xed50, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x42, gbc.a());
        EXPECT(0xea, gbc.b());
        EXPECT(0x81, gbc.c());
        EXPECT(0xa1, gbc.d());
        EXPECT(0x18, gbc.e());
        EXPECT(0x64, gbc.h());
        EXPECT(0x6c, gbc.l());
        EXPECT(0xf5b4, gbc.sp());
        EXPECT(0xed52, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xed50));
        EXPECT(0x8c, gbc.readMem(0xed51));
        // CB 8C 0337
        gbc.setState(0xefdf, 0xa967, 0xc5e0, 0x46aa, 0xe83f, 0x8986, 0x1, 0x0);
        gbc.writeMem(0xefdf, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xc5, gbc.a());
        EXPECT(0x46, gbc.b());
        EXPECT(0xaa, gbc.c());
        EXPECT(0xe8, gbc.d());
        EXPECT(0x3f, gbc.e());
        EXPECT(0x89, gbc.h());
        EXPECT(0x86, gbc.l());
        EXPECT(0xa967, gbc.sp());
        EXPECT(0xefe1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xefdf));
        EXPECT(0x8c, gbc.readMem(0xefe0));
        // CB 8C 0338
        gbc.setState(0xa247, 0xef0e, 0xd780, 0x7e02, 0xff93, 0x110c, 0x1, 0x0);
        gbc.writeMem(0xa247, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xd7, gbc.a());
        EXPECT(0x7e, gbc.b());
        EXPECT(0x2, gbc.c());
        EXPECT(0xff, gbc.d());
        EXPECT(0x93, gbc.e());
        EXPECT(0x11, gbc.h());
        EXPECT(0xc, gbc.l());
        EXPECT(0xef0e, gbc.sp());
        EXPECT(0xa249, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa247));
        EXPECT(0x8c, gbc.readMem(0xa248));
        // CB 8C 0339
        gbc.setState(0x754d, 0x9c24, 0x7740, 0xdf7f, 0x62bf, 0x84f9, 0x1, 0x0);
        gbc.writeMem(0x754d, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x77, gbc.a());
        EXPECT(0xdf, gbc.b());
        EXPECT(0x7f, gbc.c());
        EXPECT(0x62, gbc.d());
        EXPECT(0xbf, gbc.e());
        EXPECT(0x84, gbc.h());
        EXPECT(0xf9, gbc.l());
        EXPECT(0x9c24, gbc.sp());
        EXPECT(0x754f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 033A
        gbc.setState(0x9571, 0xc4a8, 0x4720, 0x83a6, 0x22dd, 0x4189, 0x1, 0x1);
        gbc.writeMem(0x9571, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x47, gbc.a());
        EXPECT(0x83, gbc.b());
        EXPECT(0xa6, gbc.c());
        EXPECT(0x22, gbc.d());
        EXPECT(0xdd, gbc.e());
        EXPECT(0x41, gbc.h());
        EXPECT(0x89, gbc.l());
        EXPECT(0xc4a8, gbc.sp());
        EXPECT(0x9573, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9571));
        EXPECT(0x8c, gbc.readMem(0x9572));
        // CB 8C 033B
        gbc.setState(0xe53f, 0x3f73, 0xb5f0, 0x3a84, 0x8a94, 0x355b, 0x1, 0x0);
        gbc.writeMem(0xe53f, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xb5, gbc.a());
        EXPECT(0x3a, gbc.b());
        EXPECT(0x84, gbc.c());
        EXPECT(0x8a, gbc.d());
        EXPECT(0x94, gbc.e());
        EXPECT(0x35, gbc.h());
        EXPECT(0x5b, gbc.l());
        EXPECT(0x3f73, gbc.sp());
        EXPECT(0xe541, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe53f));
        EXPECT(0x8c, gbc.readMem(0xe540));
        // CB 8C 033C
        gbc.setState(0x43b3, 0xa92f, 0x1960, 0x4b71, 0xcf81, 0xab65, 0x1, 0x1);
        gbc.writeMem(0x43b3, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x19, gbc.a());
        EXPECT(0x4b, gbc.b());
        EXPECT(0x71, gbc.c());
        EXPECT(0xcf, gbc.d());
        EXPECT(0x81, gbc.e());
        EXPECT(0xa9, gbc.h());
        EXPECT(0x65, gbc.l());
        EXPECT(0xa92f, gbc.sp());
        EXPECT(0x43b5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 033D
        gbc.setState(0x61ea, 0x1524, 0x92e0, 0xf89f, 0x109, 0xe72b, 0x0, 0x0);
        gbc.writeMem(0x61ea, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x92, gbc.a());
        EXPECT(0xf8, gbc.b());
        EXPECT(0x9f, gbc.c());
        EXPECT(0x1, gbc.d());
        EXPECT(0x9, gbc.e());
        EXPECT(0xe5, gbc.h());
        EXPECT(0x2b, gbc.l());
        EXPECT(0x1524, gbc.sp());
        EXPECT(0x61ec, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 033E
        gbc.setState(0xe95, 0x8dd4, 0x35f0, 0x130c, 0x4eac, 0xf178, 0x0, 0x0);
        gbc.writeMem(0xe95, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x35, gbc.a());
        EXPECT(0x13, gbc.b());
        EXPECT(0xc, gbc.c());
        EXPECT(0x4e, gbc.d());
        EXPECT(0xac, gbc.e());
        EXPECT(0xf1, gbc.h());
        EXPECT(0x78, gbc.l());
        EXPECT(0x8dd4, gbc.sp());
        EXPECT(0xe97, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 033F
        gbc.setState(0x98a9, 0x8a6d, 0x5b80, 0x16af, 0xa82e, 0x27e7, 0x1, 0x1);
        gbc.writeMem(0x98a9, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x5b, gbc.a());
        EXPECT(0x16, gbc.b());
        EXPECT(0xaf, gbc.c());
        EXPECT(0xa8, gbc.d());
        EXPECT(0x2e, gbc.e());
        EXPECT(0x25, gbc.h());
        EXPECT(0xe7, gbc.l());
        EXPECT(0x8a6d, gbc.sp());
        EXPECT(0x98ab, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x98a9));
        EXPECT(0x8c, gbc.readMem(0x98aa));
        // CB 8C 0340
        gbc.setState(0x931d, 0x22f0, 0xf610, 0x8b1c, 0x4c0f, 0x53b0, 0x1, 0x1);
        gbc.writeMem(0x931d, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xf6, gbc.a());
        EXPECT(0x8b, gbc.b());
        EXPECT(0x1c, gbc.c());
        EXPECT(0x4c, gbc.d());
        EXPECT(0xf, gbc.e());
        EXPECT(0x51, gbc.h());
        EXPECT(0xb0, gbc.l());
        EXPECT(0x22f0, gbc.sp());
        EXPECT(0x931f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x931d));
        EXPECT(0x8c, gbc.readMem(0x931e));
        // CB 8C 0341
        gbc.setState(0x41cd, 0x970d, 0x5350, 0x399f, 0x92f6, 0x1c42, 0x0, 0x0);
        gbc.writeMem(0x41cd, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x53, gbc.a());
        EXPECT(0x39, gbc.b());
        EXPECT(0x9f, gbc.c());
        EXPECT(0x92, gbc.d());
        EXPECT(0xf6, gbc.e());
        EXPECT(0x1c, gbc.h());
        EXPECT(0x42, gbc.l());
        EXPECT(0x970d, gbc.sp());
        EXPECT(0x41cf, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 0342
        gbc.setState(0x6575, 0x5b5e, 0x1fe0, 0x2ee2, 0xa0fc, 0x8966, 0x1, 0x1);
        gbc.writeMem(0x6575, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x1f, gbc.a());
        EXPECT(0x2e, gbc.b());
        EXPECT(0xe2, gbc.c());
        EXPECT(0xa0, gbc.d());
        EXPECT(0xfc, gbc.e());
        EXPECT(0x89, gbc.h());
        EXPECT(0x66, gbc.l());
        EXPECT(0x5b5e, gbc.sp());
        EXPECT(0x6577, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 0343
        gbc.setState(0xbfe9, 0x2d04, 0xd2f0, 0xfc54, 0x1c8a, 0x5ef2, 0x1, 0x0);
        gbc.writeMem(0xbfe9, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xd2, gbc.a());
        EXPECT(0xfc, gbc.b());
        EXPECT(0x54, gbc.c());
        EXPECT(0x1c, gbc.d());
        EXPECT(0x8a, gbc.e());
        EXPECT(0x5c, gbc.h());
        EXPECT(0xf2, gbc.l());
        EXPECT(0x2d04, gbc.sp());
        EXPECT(0xbfeb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbfe9));
        EXPECT(0x8c, gbc.readMem(0xbfea));
        // CB 8C 0344
        gbc.setState(0x8a28, 0xbaa9, 0xe240, 0x723a, 0x1da3, 0xa447, 0x1, 0x0);
        gbc.writeMem(0x8a28, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xe2, gbc.a());
        EXPECT(0x72, gbc.b());
        EXPECT(0x3a, gbc.c());
        EXPECT(0x1d, gbc.d());
        EXPECT(0xa3, gbc.e());
        EXPECT(0xa4, gbc.h());
        EXPECT(0x47, gbc.l());
        EXPECT(0xbaa9, gbc.sp());
        EXPECT(0x8a2a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8a28));
        EXPECT(0x8c, gbc.readMem(0x8a29));
        // CB 8C 0345
        gbc.setState(0x1935, 0x7121, 0xc2a0, 0x85b8, 0xa2d3, 0xf5cb, 0x0, 0x1);
        gbc.writeMem(0x1935, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xc2, gbc.a());
        EXPECT(0x85, gbc.b());
        EXPECT(0xb8, gbc.c());
        EXPECT(0xa2, gbc.d());
        EXPECT(0xd3, gbc.e());
        EXPECT(0xf5, gbc.h());
        EXPECT(0xcb, gbc.l());
        EXPECT(0x7121, gbc.sp());
        EXPECT(0x1937, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 0346
        gbc.setState(0x569e, 0x2694, 0x3e40, 0xb336, 0x9804, 0x6f6d, 0x0, 0x1);
        gbc.writeMem(0x569e, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x3e, gbc.a());
        EXPECT(0xb3, gbc.b());
        EXPECT(0x36, gbc.c());
        EXPECT(0x98, gbc.d());
        EXPECT(0x4, gbc.e());
        EXPECT(0x6d, gbc.h());
        EXPECT(0x6d, gbc.l());
        EXPECT(0x2694, gbc.sp());
        EXPECT(0x56a0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 0347
        gbc.setState(0xe844, 0xb40f, 0x30, 0x631c, 0x3ce, 0x3cdd, 0x0, 0x1);
        gbc.writeMem(0xe844, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x63, gbc.b());
        EXPECT(0x1c, gbc.c());
        EXPECT(0x3, gbc.d());
        EXPECT(0xce, gbc.e());
        EXPECT(0x3c, gbc.h());
        EXPECT(0xdd, gbc.l());
        EXPECT(0xb40f, gbc.sp());
        EXPECT(0xe846, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe844));
        EXPECT(0x8c, gbc.readMem(0xe845));
        // CB 8C 0348
        gbc.setState(0xa668, 0xa6b2, 0x5770, 0xb360, 0x2355, 0xfb87, 0x0, 0x1);
        gbc.writeMem(0xa668, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x57, gbc.a());
        EXPECT(0xb3, gbc.b());
        EXPECT(0x60, gbc.c());
        EXPECT(0x23, gbc.d());
        EXPECT(0x55, gbc.e());
        EXPECT(0xf9, gbc.h());
        EXPECT(0x87, gbc.l());
        EXPECT(0xa6b2, gbc.sp());
        EXPECT(0xa66a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa668));
        EXPECT(0x8c, gbc.readMem(0xa669));
        // CB 8C 0349
        gbc.setState(0x8b9c, 0x7a5e, 0x9be0, 0x4ba9, 0x47f8, 0x673f, 0x1, 0x1);
        gbc.writeMem(0x8b9c, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x9b, gbc.a());
        EXPECT(0x4b, gbc.b());
        EXPECT(0xa9, gbc.c());
        EXPECT(0x47, gbc.d());
        EXPECT(0xf8, gbc.e());
        EXPECT(0x65, gbc.h());
        EXPECT(0x3f, gbc.l());
        EXPECT(0x7a5e, gbc.sp());
        EXPECT(0x8b9e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8b9c));
        EXPECT(0x8c, gbc.readMem(0x8b9d));
        // CB 8C 034A
        gbc.setState(0xc65a, 0x3b4a, 0x5fe0, 0x39a, 0xbff3, 0x461d, 0x0, 0x0);
        gbc.writeMem(0xc65a, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x5f, gbc.a());
        EXPECT(0x3, gbc.b());
        EXPECT(0x9a, gbc.c());
        EXPECT(0xbf, gbc.d());
        EXPECT(0xf3, gbc.e());
        EXPECT(0x44, gbc.h());
        EXPECT(0x1d, gbc.l());
        EXPECT(0x3b4a, gbc.sp());
        EXPECT(0xc65c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc65a));
        EXPECT(0x8c, gbc.readMem(0xc65b));
        // CB 8C 034B
        gbc.setState(0x34f6, 0xa007, 0xdae0, 0xacea, 0x809b, 0x8833, 0x0, 0x0);
        gbc.writeMem(0x34f6, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xda, gbc.a());
        EXPECT(0xac, gbc.b());
        EXPECT(0xea, gbc.c());
        EXPECT(0x80, gbc.d());
        EXPECT(0x9b, gbc.e());
        EXPECT(0x88, gbc.h());
        EXPECT(0x33, gbc.l());
        EXPECT(0xa007, gbc.sp());
        EXPECT(0x34f8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 034C
        gbc.setState(0xaa3, 0x1353, 0x89e0, 0x752b, 0xbe5c, 0x1fe5, 0x1, 0x1);
        gbc.writeMem(0xaa3, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x89, gbc.a());
        EXPECT(0x75, gbc.b());
        EXPECT(0x2b, gbc.c());
        EXPECT(0xbe, gbc.d());
        EXPECT(0x5c, gbc.e());
        EXPECT(0x1d, gbc.h());
        EXPECT(0xe5, gbc.l());
        EXPECT(0x1353, gbc.sp());
        EXPECT(0xaa5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 034D
        gbc.setState(0xd394, 0xe95, 0xe5a0, 0x7c12, 0xe6f5, 0xfa1, 0x0, 0x1);
        gbc.writeMem(0xd394, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xe5, gbc.a());
        EXPECT(0x7c, gbc.b());
        EXPECT(0x12, gbc.c());
        EXPECT(0xe6, gbc.d());
        EXPECT(0xf5, gbc.e());
        EXPECT(0xd, gbc.h());
        EXPECT(0xa1, gbc.l());
        EXPECT(0xe95, gbc.sp());
        EXPECT(0xd396, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd394));
        EXPECT(0x8c, gbc.readMem(0xd395));
        // CB 8C 034E
        gbc.setState(0xdf59, 0xc74c, 0x5fb0, 0x8985, 0x6ac, 0xbfaf, 0x0, 0x0);
        gbc.writeMem(0xdf59, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x5f, gbc.a());
        EXPECT(0x89, gbc.b());
        EXPECT(0x85, gbc.c());
        EXPECT(0x6, gbc.d());
        EXPECT(0xac, gbc.e());
        EXPECT(0xbd, gbc.h());
        EXPECT(0xaf, gbc.l());
        EXPECT(0xc74c, gbc.sp());
        EXPECT(0xdf5b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdf59));
        EXPECT(0x8c, gbc.readMem(0xdf5a));
        // CB 8C 034F
        gbc.setState(0x31be, 0x2b93, 0x1fb0, 0x149f, 0xfd36, 0xefc5, 0x1, 0x0);
        gbc.writeMem(0x31be, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x1f, gbc.a());
        EXPECT(0x14, gbc.b());
        EXPECT(0x9f, gbc.c());
        EXPECT(0xfd, gbc.d());
        EXPECT(0x36, gbc.e());
        EXPECT(0xed, gbc.h());
        EXPECT(0xc5, gbc.l());
        EXPECT(0x2b93, gbc.sp());
        EXPECT(0x31c0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 0350
        gbc.setState(0xc28c, 0x20a0, 0x2700, 0x579a, 0x33a6, 0x6598, 0x1, 0x0);
        gbc.writeMem(0xc28c, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x27, gbc.a());
        EXPECT(0x57, gbc.b());
        EXPECT(0x9a, gbc.c());
        EXPECT(0x33, gbc.d());
        EXPECT(0xa6, gbc.e());
        EXPECT(0x65, gbc.h());
        EXPECT(0x98, gbc.l());
        EXPECT(0x20a0, gbc.sp());
        EXPECT(0xc28e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc28c));
        EXPECT(0x8c, gbc.readMem(0xc28d));
        // CB 8C 0351
        gbc.setState(0x4ee6, 0x9544, 0x1460, 0x4625, 0x3274, 0xba65, 0x0, 0x0);
        gbc.writeMem(0x4ee6, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x14, gbc.a());
        EXPECT(0x46, gbc.b());
        EXPECT(0x25, gbc.c());
        EXPECT(0x32, gbc.d());
        EXPECT(0x74, gbc.e());
        EXPECT(0xb8, gbc.h());
        EXPECT(0x65, gbc.l());
        EXPECT(0x9544, gbc.sp());
        EXPECT(0x4ee8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 0352
        gbc.setState(0x4b34, 0x3802, 0xbae0, 0x95c0, 0x22c5, 0xe91a, 0x0, 0x0);
        gbc.writeMem(0x4b34, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xba, gbc.a());
        EXPECT(0x95, gbc.b());
        EXPECT(0xc0, gbc.c());
        EXPECT(0x22, gbc.d());
        EXPECT(0xc5, gbc.e());
        EXPECT(0xe9, gbc.h());
        EXPECT(0x1a, gbc.l());
        EXPECT(0x3802, gbc.sp());
        EXPECT(0x4b36, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 0353
        gbc.setState(0x5ebc, 0xd818, 0x7be0, 0x9637, 0x9a78, 0xe7fd, 0x1, 0x0);
        gbc.writeMem(0x5ebc, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x7b, gbc.a());
        EXPECT(0x96, gbc.b());
        EXPECT(0x37, gbc.c());
        EXPECT(0x9a, gbc.d());
        EXPECT(0x78, gbc.e());
        EXPECT(0xe5, gbc.h());
        EXPECT(0xfd, gbc.l());
        EXPECT(0xd818, gbc.sp());
        EXPECT(0x5ebe, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 0354
        gbc.setState(0xbe4d, 0x5698, 0x890, 0x1828, 0x93c1, 0x8047, 0x0, 0x0);
        gbc.writeMem(0xbe4d, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x8, gbc.a());
        EXPECT(0x18, gbc.b());
        EXPECT(0x28, gbc.c());
        EXPECT(0x93, gbc.d());
        EXPECT(0xc1, gbc.e());
        EXPECT(0x80, gbc.h());
        EXPECT(0x47, gbc.l());
        EXPECT(0x5698, gbc.sp());
        EXPECT(0xbe4f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbe4d));
        EXPECT(0x8c, gbc.readMem(0xbe4e));
        // CB 8C 0355
        gbc.setState(0x6fd5, 0xe7cd, 0xd720, 0x3b3d, 0x3081, 0x3421, 0x0, 0x1);
        gbc.writeMem(0x6fd5, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xd7, gbc.a());
        EXPECT(0x3b, gbc.b());
        EXPECT(0x3d, gbc.c());
        EXPECT(0x30, gbc.d());
        EXPECT(0x81, gbc.e());
        EXPECT(0x34, gbc.h());
        EXPECT(0x21, gbc.l());
        EXPECT(0xe7cd, gbc.sp());
        EXPECT(0x6fd7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 0356
        gbc.setState(0x2a10, 0x3ef2, 0x1a10, 0xcea3, 0xa0a2, 0x8a4c, 0x1, 0x0);
        gbc.writeMem(0x2a10, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x1a, gbc.a());
        EXPECT(0xce, gbc.b());
        EXPECT(0xa3, gbc.c());
        EXPECT(0xa0, gbc.d());
        EXPECT(0xa2, gbc.e());
        EXPECT(0x88, gbc.h());
        EXPECT(0x4c, gbc.l());
        EXPECT(0x3ef2, gbc.sp());
        EXPECT(0x2a12, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 0357
        gbc.setState(0x1c68, 0x76e, 0x80e0, 0x368c, 0x78a1, 0x56df, 0x0, 0x0);
        gbc.writeMem(0x1c68, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x80, gbc.a());
        EXPECT(0x36, gbc.b());
        EXPECT(0x8c, gbc.c());
        EXPECT(0x78, gbc.d());
        EXPECT(0xa1, gbc.e());
        EXPECT(0x54, gbc.h());
        EXPECT(0xdf, gbc.l());
        EXPECT(0x76e, gbc.sp());
        EXPECT(0x1c6a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 0358
        gbc.setState(0x5dc4, 0x6e7a, 0x5400, 0x7e94, 0x11fd, 0x2439, 0x1, 0x1);
        gbc.writeMem(0x5dc4, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x54, gbc.a());
        EXPECT(0x7e, gbc.b());
        EXPECT(0x94, gbc.c());
        EXPECT(0x11, gbc.d());
        EXPECT(0xfd, gbc.e());
        EXPECT(0x24, gbc.h());
        EXPECT(0x39, gbc.l());
        EXPECT(0x6e7a, gbc.sp());
        EXPECT(0x5dc6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 0359
        gbc.setState(0xe90e, 0xc4c2, 0xc050, 0x9f23, 0xece5, 0xba40, 0x1, 0x1);
        gbc.writeMem(0xe90e, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xc0, gbc.a());
        EXPECT(0x9f, gbc.b());
        EXPECT(0x23, gbc.c());
        EXPECT(0xec, gbc.d());
        EXPECT(0xe5, gbc.e());
        EXPECT(0xb8, gbc.h());
        EXPECT(0x40, gbc.l());
        EXPECT(0xc4c2, gbc.sp());
        EXPECT(0xe910, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe90e));
        EXPECT(0x8c, gbc.readMem(0xe90f));
        // CB 8C 035A
        gbc.setState(0xd2a0, 0xf4ec, 0x8cf0, 0xd334, 0x3c53, 0x840, 0x1, 0x0);
        gbc.writeMem(0xd2a0, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x8c, gbc.a());
        EXPECT(0xd3, gbc.b());
        EXPECT(0x34, gbc.c());
        EXPECT(0x3c, gbc.d());
        EXPECT(0x53, gbc.e());
        EXPECT(0x8, gbc.h());
        EXPECT(0x40, gbc.l());
        EXPECT(0xf4ec, gbc.sp());
        EXPECT(0xd2a2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd2a0));
        EXPECT(0x8c, gbc.readMem(0xd2a1));
        // CB 8C 035B
        gbc.setState(0x9375, 0xda65, 0xa640, 0x646, 0xc185, 0x5699, 0x0, 0x0);
        gbc.writeMem(0x9375, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xa6, gbc.a());
        EXPECT(0x6, gbc.b());
        EXPECT(0x46, gbc.c());
        EXPECT(0xc1, gbc.d());
        EXPECT(0x85, gbc.e());
        EXPECT(0x54, gbc.h());
        EXPECT(0x99, gbc.l());
        EXPECT(0xda65, gbc.sp());
        EXPECT(0x9377, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9375));
        EXPECT(0x8c, gbc.readMem(0x9376));
        // CB 8C 035D
        gbc.setState(0x1f7d, 0x6ef, 0x5f90, 0x7a82, 0x2ff9, 0xf3f6, 0x1, 0x1);
        gbc.writeMem(0x1f7d, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x5f, gbc.a());
        EXPECT(0x7a, gbc.b());
        EXPECT(0x82, gbc.c());
        EXPECT(0x2f, gbc.d());
        EXPECT(0xf9, gbc.e());
        EXPECT(0xf1, gbc.h());
        EXPECT(0xf6, gbc.l());
        EXPECT(0x6ef, gbc.sp());
        EXPECT(0x1f7f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 035E
        gbc.setState(0x8d05, 0xefb2, 0x9db0, 0x3ffb, 0xc19b, 0xc7bf, 0x0, 0x0);
        gbc.writeMem(0x8d05, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x9d, gbc.a());
        EXPECT(0x3f, gbc.b());
        EXPECT(0xfb, gbc.c());
        EXPECT(0xc1, gbc.d());
        EXPECT(0x9b, gbc.e());
        EXPECT(0xc5, gbc.h());
        EXPECT(0xbf, gbc.l());
        EXPECT(0xefb2, gbc.sp());
        EXPECT(0x8d07, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8d05));
        EXPECT(0x8c, gbc.readMem(0x8d06));
        // CB 8C 035F
        gbc.setState(0x7532, 0xb13c, 0x20a0, 0x1ce3, 0x74e7, 0x9fa9, 0x0, 0x1);
        gbc.writeMem(0x7532, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x20, gbc.a());
        EXPECT(0x1c, gbc.b());
        EXPECT(0xe3, gbc.c());
        EXPECT(0x74, gbc.d());
        EXPECT(0xe7, gbc.e());
        EXPECT(0x9d, gbc.h());
        EXPECT(0xa9, gbc.l());
        EXPECT(0xb13c, gbc.sp());
        EXPECT(0x7534, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 0360
        gbc.setState(0xe45a, 0x9ca7, 0x7360, 0xe4de, 0x2c18, 0xb7df, 0x0, 0x0);
        gbc.writeMem(0xe45a, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x73, gbc.a());
        EXPECT(0xe4, gbc.b());
        EXPECT(0xde, gbc.c());
        EXPECT(0x2c, gbc.d());
        EXPECT(0x18, gbc.e());
        EXPECT(0xb5, gbc.h());
        EXPECT(0xdf, gbc.l());
        EXPECT(0x9ca7, gbc.sp());
        EXPECT(0xe45c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe45a));
        EXPECT(0x8c, gbc.readMem(0xe45b));
        // CB 8C 0361
        gbc.setState(0x9d09, 0xd1a8, 0x4870, 0xadca, 0x3cf7, 0x1c8c, 0x1, 0x0);
        gbc.writeMem(0x9d09, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x48, gbc.a());
        EXPECT(0xad, gbc.b());
        EXPECT(0xca, gbc.c());
        EXPECT(0x3c, gbc.d());
        EXPECT(0xf7, gbc.e());
        EXPECT(0x1c, gbc.h());
        EXPECT(0x8c, gbc.l());
        EXPECT(0xd1a8, gbc.sp());
        EXPECT(0x9d0b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9d09));
        EXPECT(0x8c, gbc.readMem(0x9d0a));
        // CB 8C 0362
        gbc.setState(0x5af2, 0x8276, 0xeb00, 0x5c39, 0xba54, 0x20f7, 0x1, 0x0);
        gbc.writeMem(0x5af2, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xeb, gbc.a());
        EXPECT(0x5c, gbc.b());
        EXPECT(0x39, gbc.c());
        EXPECT(0xba, gbc.d());
        EXPECT(0x54, gbc.e());
        EXPECT(0x20, gbc.h());
        EXPECT(0xf7, gbc.l());
        EXPECT(0x8276, gbc.sp());
        EXPECT(0x5af4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 0363
        gbc.setState(0x4918, 0xa1e3, 0x8200, 0x9b0, 0xff5c, 0x1a85, 0x1, 0x1);
        gbc.writeMem(0x4918, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x82, gbc.a());
        EXPECT(0x9, gbc.b());
        EXPECT(0xb0, gbc.c());
        EXPECT(0xff, gbc.d());
        EXPECT(0x5c, gbc.e());
        EXPECT(0x18, gbc.h());
        EXPECT(0x85, gbc.l());
        EXPECT(0xa1e3, gbc.sp());
        EXPECT(0x491a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 0364
        gbc.setState(0xc465, 0x2e48, 0x7e20, 0x84f5, 0x50f0, 0xc9f3, 0x0, 0x1);
        gbc.writeMem(0xc465, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x7e, gbc.a());
        EXPECT(0x84, gbc.b());
        EXPECT(0xf5, gbc.c());
        EXPECT(0x50, gbc.d());
        EXPECT(0xf0, gbc.e());
        EXPECT(0xc9, gbc.h());
        EXPECT(0xf3, gbc.l());
        EXPECT(0x2e48, gbc.sp());
        EXPECT(0xc467, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc465));
        EXPECT(0x8c, gbc.readMem(0xc466));
        // CB 8C 0365
        gbc.setState(0x7f9f, 0x93ea, 0x65f0, 0x7a48, 0xd83e, 0xf036, 0x0, 0x0);
        gbc.writeMem(0x7f9f, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x65, gbc.a());
        EXPECT(0x7a, gbc.b());
        EXPECT(0x48, gbc.c());
        EXPECT(0xd8, gbc.d());
        EXPECT(0x3e, gbc.e());
        EXPECT(0xf0, gbc.h());
        EXPECT(0x36, gbc.l());
        EXPECT(0x93ea, gbc.sp());
        EXPECT(0x7fa1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 0366
        gbc.setState(0x67e1, 0xc162, 0x5ba0, 0x11cd, 0x9a4b, 0x3698, 0x0, 0x1);
        gbc.writeMem(0x67e1, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x5b, gbc.a());
        EXPECT(0x11, gbc.b());
        EXPECT(0xcd, gbc.c());
        EXPECT(0x9a, gbc.d());
        EXPECT(0x4b, gbc.e());
        EXPECT(0x34, gbc.h());
        EXPECT(0x98, gbc.l());
        EXPECT(0xc162, gbc.sp());
        EXPECT(0x67e3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 0367
        gbc.setState(0xa97b, 0xffe7, 0x3d20, 0x63a2, 0x37dc, 0xf178, 0x0, 0x0);
        gbc.writeMem(0xa97b, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x3d, gbc.a());
        EXPECT(0x63, gbc.b());
        EXPECT(0xa2, gbc.c());
        EXPECT(0x37, gbc.d());
        EXPECT(0xdc, gbc.e());
        EXPECT(0xf1, gbc.h());
        EXPECT(0x78, gbc.l());
        EXPECT(0xffe7, gbc.sp());
        EXPECT(0xa97d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa97b));
        EXPECT(0x8c, gbc.readMem(0xa97c));
        // CB 8C 0368
        gbc.setState(0x2d20, 0xfb6d, 0xdd00, 0x3c69, 0xe32f, 0x8080, 0x1, 0x1);
        gbc.writeMem(0x2d20, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xdd, gbc.a());
        EXPECT(0x3c, gbc.b());
        EXPECT(0x69, gbc.c());
        EXPECT(0xe3, gbc.d());
        EXPECT(0x2f, gbc.e());
        EXPECT(0x80, gbc.h());
        EXPECT(0x80, gbc.l());
        EXPECT(0xfb6d, gbc.sp());
        EXPECT(0x2d22, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 0369
        gbc.setState(0xe8f7, 0x325f, 0x65a0, 0x76f0, 0x7907, 0x28b3, 0x0, 0x1);
        gbc.writeMem(0xe8f7, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x65, gbc.a());
        EXPECT(0x76, gbc.b());
        EXPECT(0xf0, gbc.c());
        EXPECT(0x79, gbc.d());
        EXPECT(0x7, gbc.e());
        EXPECT(0x28, gbc.h());
        EXPECT(0xb3, gbc.l());
        EXPECT(0x325f, gbc.sp());
        EXPECT(0xe8f9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe8f7));
        EXPECT(0x8c, gbc.readMem(0xe8f8));
        // CB 8C 036A
        gbc.setState(0x212f, 0x9873, 0x3620, 0xf67e, 0x4221, 0x844, 0x0, 0x1);
        gbc.writeMem(0x212f, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x36, gbc.a());
        EXPECT(0xf6, gbc.b());
        EXPECT(0x7e, gbc.c());
        EXPECT(0x42, gbc.d());
        EXPECT(0x21, gbc.e());
        EXPECT(0x8, gbc.h());
        EXPECT(0x44, gbc.l());
        EXPECT(0x9873, gbc.sp());
        EXPECT(0x2131, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 036B
        gbc.setState(0xc4d7, 0xbc20, 0xdd0, 0x82d6, 0x7392, 0x5bbe, 0x1, 0x0);
        gbc.writeMem(0xc4d7, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xd, gbc.a());
        EXPECT(0x82, gbc.b());
        EXPECT(0xd6, gbc.c());
        EXPECT(0x73, gbc.d());
        EXPECT(0x92, gbc.e());
        EXPECT(0x59, gbc.h());
        EXPECT(0xbe, gbc.l());
        EXPECT(0xbc20, gbc.sp());
        EXPECT(0xc4d9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc4d7));
        EXPECT(0x8c, gbc.readMem(0xc4d8));
        // CB 8C 036C
        gbc.setState(0x11f7, 0x95a4, 0xb650, 0x6b97, 0x4628, 0x7586, 0x0, 0x1);
        gbc.writeMem(0x11f7, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xb6, gbc.a());
        EXPECT(0x6b, gbc.b());
        EXPECT(0x97, gbc.c());
        EXPECT(0x46, gbc.d());
        EXPECT(0x28, gbc.e());
        EXPECT(0x75, gbc.h());
        EXPECT(0x86, gbc.l());
        EXPECT(0x95a4, gbc.sp());
        EXPECT(0x11f9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 036D
        gbc.setState(0x33a, 0x5ecd, 0xba90, 0x4167, 0x3d1e, 0x6f23, 0x0, 0x0);
        gbc.writeMem(0x33a, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xba, gbc.a());
        EXPECT(0x41, gbc.b());
        EXPECT(0x67, gbc.c());
        EXPECT(0x3d, gbc.d());
        EXPECT(0x1e, gbc.e());
        EXPECT(0x6d, gbc.h());
        EXPECT(0x23, gbc.l());
        EXPECT(0x5ecd, gbc.sp());
        EXPECT(0x33c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 036E
        gbc.setState(0x2306, 0x5a15, 0x6760, 0x3b6d, 0xff31, 0x8cc8, 0x0, 0x0);
        gbc.writeMem(0x2306, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x67, gbc.a());
        EXPECT(0x3b, gbc.b());
        EXPECT(0x6d, gbc.c());
        EXPECT(0xff, gbc.d());
        EXPECT(0x31, gbc.e());
        EXPECT(0x8c, gbc.h());
        EXPECT(0xc8, gbc.l());
        EXPECT(0x5a15, gbc.sp());
        EXPECT(0x2308, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 036F
        gbc.setState(0x95, 0xa92, 0x240, 0xcd4b, 0x4e94, 0x1074, 0x1, 0x1);
        gbc.writeMem(0x95, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x2, gbc.a());
        EXPECT(0xcd, gbc.b());
        EXPECT(0x4b, gbc.c());
        EXPECT(0x4e, gbc.d());
        EXPECT(0x94, gbc.e());
        EXPECT(0x10, gbc.h());
        EXPECT(0x74, gbc.l());
        EXPECT(0xa92, gbc.sp());
        EXPECT(0x97, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 0370
        gbc.setState(0x4e6a, 0x92f7, 0x62c0, 0x7b81, 0x9b31, 0x78dc, 0x1, 0x0);
        gbc.writeMem(0x4e6a, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x62, gbc.a());
        EXPECT(0x7b, gbc.b());
        EXPECT(0x81, gbc.c());
        EXPECT(0x9b, gbc.d());
        EXPECT(0x31, gbc.e());
        EXPECT(0x78, gbc.h());
        EXPECT(0xdc, gbc.l());
        EXPECT(0x92f7, gbc.sp());
        EXPECT(0x4e6c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 0371
        gbc.setState(0x84d9, 0x7571, 0xfcc0, 0xc10a, 0x7fce, 0xb3b3, 0x1, 0x0);
        gbc.writeMem(0x84d9, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xfc, gbc.a());
        EXPECT(0xc1, gbc.b());
        EXPECT(0xa, gbc.c());
        EXPECT(0x7f, gbc.d());
        EXPECT(0xce, gbc.e());
        EXPECT(0xb1, gbc.h());
        EXPECT(0xb3, gbc.l());
        EXPECT(0x7571, gbc.sp());
        EXPECT(0x84db, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x84d9));
        EXPECT(0x8c, gbc.readMem(0x84da));
        // CB 8C 0372
        gbc.setState(0x491, 0x97f3, 0xd290, 0xa6b5, 0x2867, 0xa5dc, 0x1, 0x0);
        gbc.writeMem(0x491, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xd2, gbc.a());
        EXPECT(0xa6, gbc.b());
        EXPECT(0xb5, gbc.c());
        EXPECT(0x28, gbc.d());
        EXPECT(0x67, gbc.e());
        EXPECT(0xa5, gbc.h());
        EXPECT(0xdc, gbc.l());
        EXPECT(0x97f3, gbc.sp());
        EXPECT(0x493, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 0373
        gbc.setState(0x9893, 0x15ba, 0xc310, 0x5e, 0xf797, 0x9b3f, 0x0, 0x1);
        gbc.writeMem(0x9893, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xc3, gbc.a());
        EXPECT(0x0, gbc.b());
        EXPECT(0x5e, gbc.c());
        EXPECT(0xf7, gbc.d());
        EXPECT(0x97, gbc.e());
        EXPECT(0x99, gbc.h());
        EXPECT(0x3f, gbc.l());
        EXPECT(0x15ba, gbc.sp());
        EXPECT(0x9895, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9893));
        EXPECT(0x8c, gbc.readMem(0x9894));
        // CB 8C 0374
        gbc.setState(0x9efd, 0xc2bf, 0x3930, 0x784d, 0xdcf, 0xbe54, 0x1, 0x0);
        gbc.writeMem(0x9efd, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x39, gbc.a());
        EXPECT(0x78, gbc.b());
        EXPECT(0x4d, gbc.c());
        EXPECT(0xd, gbc.d());
        EXPECT(0xcf, gbc.e());
        EXPECT(0xbc, gbc.h());
        EXPECT(0x54, gbc.l());
        EXPECT(0xc2bf, gbc.sp());
        EXPECT(0x9eff, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9efd));
        EXPECT(0x8c, gbc.readMem(0x9efe));
        // CB 8C 0376
        gbc.setState(0x397d, 0xc634, 0xd490, 0xcf94, 0xad85, 0x8edb, 0x1, 0x1);
        gbc.writeMem(0x397d, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xd4, gbc.a());
        EXPECT(0xcf, gbc.b());
        EXPECT(0x94, gbc.c());
        EXPECT(0xad, gbc.d());
        EXPECT(0x85, gbc.e());
        EXPECT(0x8c, gbc.h());
        EXPECT(0xdb, gbc.l());
        EXPECT(0xc634, gbc.sp());
        EXPECT(0x397f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 0377
        gbc.setState(0x7435, 0x10f7, 0xbb00, 0x5b53, 0xaebe, 0xdab5, 0x1, 0x1);
        gbc.writeMem(0x7435, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xbb, gbc.a());
        EXPECT(0x5b, gbc.b());
        EXPECT(0x53, gbc.c());
        EXPECT(0xae, gbc.d());
        EXPECT(0xbe, gbc.e());
        EXPECT(0xd8, gbc.h());
        EXPECT(0xb5, gbc.l());
        EXPECT(0x10f7, gbc.sp());
        EXPECT(0x7437, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 0378
        gbc.setState(0x8c16, 0x2876, 0xe0, 0xf40, 0x6a26, 0xd434, 0x1, 0x0);
        gbc.writeMem(0x8c16, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xf, gbc.b());
        EXPECT(0x40, gbc.c());
        EXPECT(0x6a, gbc.d());
        EXPECT(0x26, gbc.e());
        EXPECT(0xd4, gbc.h());
        EXPECT(0x34, gbc.l());
        EXPECT(0x2876, gbc.sp());
        EXPECT(0x8c18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8c16));
        EXPECT(0x8c, gbc.readMem(0x8c17));
        // CB 8C 0379
        gbc.setState(0xcb6b, 0x4d0, 0x3f80, 0x2015, 0x4b6a, 0xa600, 0x0, 0x1);
        gbc.writeMem(0xcb6b, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x3f, gbc.a());
        EXPECT(0x20, gbc.b());
        EXPECT(0x15, gbc.c());
        EXPECT(0x4b, gbc.d());
        EXPECT(0x6a, gbc.e());
        EXPECT(0xa4, gbc.h());
        EXPECT(0x0, gbc.l());
        EXPECT(0x4d0, gbc.sp());
        EXPECT(0xcb6d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcb6b));
        EXPECT(0x8c, gbc.readMem(0xcb6c));
        // CB 8C 037A
        gbc.setState(0x9d09, 0x595f, 0x7c60, 0x6fff, 0x8709, 0x6079, 0x1, 0x1);
        gbc.writeMem(0x9d09, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x7c, gbc.a());
        EXPECT(0x6f, gbc.b());
        EXPECT(0xff, gbc.c());
        EXPECT(0x87, gbc.d());
        EXPECT(0x9, gbc.e());
        EXPECT(0x60, gbc.h());
        EXPECT(0x79, gbc.l());
        EXPECT(0x595f, gbc.sp());
        EXPECT(0x9d0b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9d09));
        EXPECT(0x8c, gbc.readMem(0x9d0a));
        // CB 8C 037B
        gbc.setState(0x8ac2, 0x194, 0x4090, 0x1b0a, 0x166, 0x14d9, 0x0, 0x0);
        gbc.writeMem(0x8ac2, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x40, gbc.a());
        EXPECT(0x1b, gbc.b());
        EXPECT(0xa, gbc.c());
        EXPECT(0x1, gbc.d());
        EXPECT(0x66, gbc.e());
        EXPECT(0x14, gbc.h());
        EXPECT(0xd9, gbc.l());
        EXPECT(0x194, gbc.sp());
        EXPECT(0x8ac4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8ac2));
        EXPECT(0x8c, gbc.readMem(0x8ac3));
        // CB 8C 037C
        gbc.setState(0x6767, 0x31f7, 0xba70, 0xe95f, 0x3ae0, 0x5ab2, 0x1, 0x1);
        gbc.writeMem(0x6767, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xba, gbc.a());
        EXPECT(0xe9, gbc.b());
        EXPECT(0x5f, gbc.c());
        EXPECT(0x3a, gbc.d());
        EXPECT(0xe0, gbc.e());
        EXPECT(0x58, gbc.h());
        EXPECT(0xb2, gbc.l());
        EXPECT(0x31f7, gbc.sp());
        EXPECT(0x6769, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 037D
        gbc.setState(0x556d, 0xd848, 0xabe0, 0xa64, 0x5484, 0xe901, 0x1, 0x1);
        gbc.writeMem(0x556d, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xab, gbc.a());
        EXPECT(0xa, gbc.b());
        EXPECT(0x64, gbc.c());
        EXPECT(0x54, gbc.d());
        EXPECT(0x84, gbc.e());
        EXPECT(0xe9, gbc.h());
        EXPECT(0x1, gbc.l());
        EXPECT(0xd848, gbc.sp());
        EXPECT(0x556f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 037E
        gbc.setState(0xca41, 0x891e, 0xfcd0, 0x3245, 0xd35a, 0xce6b, 0x1, 0x0);
        gbc.writeMem(0xca41, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xfc, gbc.a());
        EXPECT(0x32, gbc.b());
        EXPECT(0x45, gbc.c());
        EXPECT(0xd3, gbc.d());
        EXPECT(0x5a, gbc.e());
        EXPECT(0xcc, gbc.h());
        EXPECT(0x6b, gbc.l());
        EXPECT(0x891e, gbc.sp());
        EXPECT(0xca43, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xca41));
        EXPECT(0x8c, gbc.readMem(0xca42));
        // CB 8C 037F
        gbc.setState(0x799f, 0x3951, 0xec70, 0xd465, 0xb024, 0x40a, 0x0, 0x0);
        gbc.writeMem(0x799f, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xec, gbc.a());
        EXPECT(0xd4, gbc.b());
        EXPECT(0x65, gbc.c());
        EXPECT(0xb0, gbc.d());
        EXPECT(0x24, gbc.e());
        EXPECT(0x4, gbc.h());
        EXPECT(0xa, gbc.l());
        EXPECT(0x3951, gbc.sp());
        EXPECT(0x79a1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 0380
        gbc.setState(0xd2a6, 0xe3da, 0x83f0, 0x3f15, 0xe6dd, 0x3782, 0x0, 0x1);
        gbc.writeMem(0xd2a6, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x83, gbc.a());
        EXPECT(0x3f, gbc.b());
        EXPECT(0x15, gbc.c());
        EXPECT(0xe6, gbc.d());
        EXPECT(0xdd, gbc.e());
        EXPECT(0x35, gbc.h());
        EXPECT(0x82, gbc.l());
        EXPECT(0xe3da, gbc.sp());
        EXPECT(0xd2a8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd2a6));
        EXPECT(0x8c, gbc.readMem(0xd2a7));
        // CB 8C 0381
        gbc.setState(0xe4bf, 0x1b2e, 0x2e80, 0x9efc, 0x3817, 0xb7d0, 0x1, 0x1);
        gbc.writeMem(0xe4bf, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x2e, gbc.a());
        EXPECT(0x9e, gbc.b());
        EXPECT(0xfc, gbc.c());
        EXPECT(0x38, gbc.d());
        EXPECT(0x17, gbc.e());
        EXPECT(0xb5, gbc.h());
        EXPECT(0xd0, gbc.l());
        EXPECT(0x1b2e, gbc.sp());
        EXPECT(0xe4c1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe4bf));
        EXPECT(0x8c, gbc.readMem(0xe4c0));
        // CB 8C 0382
        gbc.setState(0x4cd6, 0x4621, 0xaa10, 0x767d, 0xedf, 0x7419, 0x1, 0x1);
        gbc.writeMem(0x4cd6, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xaa, gbc.a());
        EXPECT(0x76, gbc.b());
        EXPECT(0x7d, gbc.c());
        EXPECT(0xe, gbc.d());
        EXPECT(0xdf, gbc.e());
        EXPECT(0x74, gbc.h());
        EXPECT(0x19, gbc.l());
        EXPECT(0x4621, gbc.sp());
        EXPECT(0x4cd8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 0383
        gbc.setState(0xb92e, 0x9e7d, 0xf8e0, 0xd98d, 0x9738, 0x72d9, 0x0, 0x0);
        gbc.writeMem(0xb92e, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xf8, gbc.a());
        EXPECT(0xd9, gbc.b());
        EXPECT(0x8d, gbc.c());
        EXPECT(0x97, gbc.d());
        EXPECT(0x38, gbc.e());
        EXPECT(0x70, gbc.h());
        EXPECT(0xd9, gbc.l());
        EXPECT(0x9e7d, gbc.sp());
        EXPECT(0xb930, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb92e));
        EXPECT(0x8c, gbc.readMem(0xb92f));
        // CB 8C 0384
        gbc.setState(0x495a, 0x6112, 0x48d0, 0xb4c1, 0x3951, 0x7dae, 0x1, 0x0);
        gbc.writeMem(0x495a, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x48, gbc.a());
        EXPECT(0xb4, gbc.b());
        EXPECT(0xc1, gbc.c());
        EXPECT(0x39, gbc.d());
        EXPECT(0x51, gbc.e());
        EXPECT(0x7d, gbc.h());
        EXPECT(0xae, gbc.l());
        EXPECT(0x6112, gbc.sp());
        EXPECT(0x495c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 0385
        gbc.setState(0x840e, 0xdf9e, 0xf010, 0xc277, 0xe2c6, 0xedb9, 0x1, 0x1);
        gbc.writeMem(0x840e, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xf0, gbc.a());
        EXPECT(0xc2, gbc.b());
        EXPECT(0x77, gbc.c());
        EXPECT(0xe2, gbc.d());
        EXPECT(0xc6, gbc.e());
        EXPECT(0xed, gbc.h());
        EXPECT(0xb9, gbc.l());
        EXPECT(0xdf9e, gbc.sp());
        EXPECT(0x8410, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x840e));
        EXPECT(0x8c, gbc.readMem(0x840f));
        // CB 8C 0386
        gbc.setState(0xa0c1, 0x27c, 0x1540, 0xb1d2, 0xf6d4, 0x1a1b, 0x0, 0x0);
        gbc.writeMem(0xa0c1, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x15, gbc.a());
        EXPECT(0xb1, gbc.b());
        EXPECT(0xd2, gbc.c());
        EXPECT(0xf6, gbc.d());
        EXPECT(0xd4, gbc.e());
        EXPECT(0x18, gbc.h());
        EXPECT(0x1b, gbc.l());
        EXPECT(0x27c, gbc.sp());
        EXPECT(0xa0c3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa0c1));
        EXPECT(0x8c, gbc.readMem(0xa0c2));
        // CB 8C 0387
        gbc.setState(0x476c, 0x3c0c, 0xec40, 0x9960, 0x34b8, 0x1f96, 0x1, 0x1);
        gbc.writeMem(0x476c, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xec, gbc.a());
        EXPECT(0x99, gbc.b());
        EXPECT(0x60, gbc.c());
        EXPECT(0x34, gbc.d());
        EXPECT(0xb8, gbc.e());
        EXPECT(0x1d, gbc.h());
        EXPECT(0x96, gbc.l());
        EXPECT(0x3c0c, gbc.sp());
        EXPECT(0x476e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 0388
        gbc.setState(0xe9b0, 0xed73, 0x5450, 0x48a2, 0x4fe8, 0xa769, 0x1, 0x1);
        gbc.writeMem(0xe9b0, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x54, gbc.a());
        EXPECT(0x48, gbc.b());
        EXPECT(0xa2, gbc.c());
        EXPECT(0x4f, gbc.d());
        EXPECT(0xe8, gbc.e());
        EXPECT(0xa5, gbc.h());
        EXPECT(0x69, gbc.l());
        EXPECT(0xed73, gbc.sp());
        EXPECT(0xe9b2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe9b0));
        EXPECT(0x8c, gbc.readMem(0xe9b1));
        // CB 8C 0389
        gbc.setState(0x246d, 0xed8d, 0x91e0, 0x605c, 0xe539, 0x1c40, 0x0, 0x0);
        gbc.writeMem(0x246d, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x91, gbc.a());
        EXPECT(0x60, gbc.b());
        EXPECT(0x5c, gbc.c());
        EXPECT(0xe5, gbc.d());
        EXPECT(0x39, gbc.e());
        EXPECT(0x1c, gbc.h());
        EXPECT(0x40, gbc.l());
        EXPECT(0xed8d, gbc.sp());
        EXPECT(0x246f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 038A
        gbc.setState(0xd203, 0x6277, 0x5fb0, 0x2fb2, 0x25fe, 0xe928, 0x1, 0x0);
        gbc.writeMem(0xd203, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x5f, gbc.a());
        EXPECT(0x2f, gbc.b());
        EXPECT(0xb2, gbc.c());
        EXPECT(0x25, gbc.d());
        EXPECT(0xfe, gbc.e());
        EXPECT(0xe9, gbc.h());
        EXPECT(0x28, gbc.l());
        EXPECT(0x6277, gbc.sp());
        EXPECT(0xd205, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd203));
        EXPECT(0x8c, gbc.readMem(0xd204));
        // CB 8C 038B
        gbc.setState(0x8ab, 0x3504, 0xe370, 0xe2c3, 0x76c1, 0xed20, 0x0, 0x1);
        gbc.writeMem(0x8ab, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xe3, gbc.a());
        EXPECT(0xe2, gbc.b());
        EXPECT(0xc3, gbc.c());
        EXPECT(0x76, gbc.d());
        EXPECT(0xc1, gbc.e());
        EXPECT(0xed, gbc.h());
        EXPECT(0x20, gbc.l());
        EXPECT(0x3504, gbc.sp());
        EXPECT(0x8ad, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 038C
        gbc.setState(0xc5fe, 0x6910, 0x1b20, 0x3591, 0xd964, 0x7786, 0x1, 0x0);
        gbc.writeMem(0xc5fe, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x1b, gbc.a());
        EXPECT(0x35, gbc.b());
        EXPECT(0x91, gbc.c());
        EXPECT(0xd9, gbc.d());
        EXPECT(0x64, gbc.e());
        EXPECT(0x75, gbc.h());
        EXPECT(0x86, gbc.l());
        EXPECT(0x6910, gbc.sp());
        EXPECT(0xc600, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc5fe));
        EXPECT(0x8c, gbc.readMem(0xc5ff));
        // CB 8C 038D
        gbc.setState(0xcaa9, 0x1b50, 0x8370, 0xb0d3, 0x1db7, 0xc080, 0x1, 0x1);
        gbc.writeMem(0xcaa9, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x83, gbc.a());
        EXPECT(0xb0, gbc.b());
        EXPECT(0xd3, gbc.c());
        EXPECT(0x1d, gbc.d());
        EXPECT(0xb7, gbc.e());
        EXPECT(0xc0, gbc.h());
        EXPECT(0x80, gbc.l());
        EXPECT(0x1b50, gbc.sp());
        EXPECT(0xcaab, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcaa9));
        EXPECT(0x8c, gbc.readMem(0xcaaa));
        // CB 8C 038E
        gbc.setState(0x3a5e, 0xc82e, 0xff00, 0x10b4, 0x2c5, 0x2bec, 0x0, 0x0);
        gbc.writeMem(0x3a5e, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xff, gbc.a());
        EXPECT(0x10, gbc.b());
        EXPECT(0xb4, gbc.c());
        EXPECT(0x2, gbc.d());
        EXPECT(0xc5, gbc.e());
        EXPECT(0x29, gbc.h());
        EXPECT(0xec, gbc.l());
        EXPECT(0xc82e, gbc.sp());
        EXPECT(0x3a60, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 038F
        gbc.setState(0x33c8, 0x248b, 0x2540, 0x837b, 0x4436, 0xf721, 0x0, 0x1);
        gbc.writeMem(0x33c8, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x25, gbc.a());
        EXPECT(0x83, gbc.b());
        EXPECT(0x7b, gbc.c());
        EXPECT(0x44, gbc.d());
        EXPECT(0x36, gbc.e());
        EXPECT(0xf5, gbc.h());
        EXPECT(0x21, gbc.l());
        EXPECT(0x248b, gbc.sp());
        EXPECT(0x33ca, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 0390
        gbc.setState(0xf17, 0x7bb0, 0x9550, 0xcbc, 0x44a7, 0x95a6, 0x1, 0x1);
        gbc.writeMem(0xf17, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x95, gbc.a());
        EXPECT(0xc, gbc.b());
        EXPECT(0xbc, gbc.c());
        EXPECT(0x44, gbc.d());
        EXPECT(0xa7, gbc.e());
        EXPECT(0x95, gbc.h());
        EXPECT(0xa6, gbc.l());
        EXPECT(0x7bb0, gbc.sp());
        EXPECT(0xf19, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 0391
        gbc.setState(0x1084, 0x2132, 0x6c00, 0xa3d, 0x2f7c, 0xc330, 0x0, 0x1);
        gbc.writeMem(0x1084, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x6c, gbc.a());
        EXPECT(0xa, gbc.b());
        EXPECT(0x3d, gbc.c());
        EXPECT(0x2f, gbc.d());
        EXPECT(0x7c, gbc.e());
        EXPECT(0xc1, gbc.h());
        EXPECT(0x30, gbc.l());
        EXPECT(0x2132, gbc.sp());
        EXPECT(0x1086, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 0392
        gbc.setState(0x57a5, 0x5d8a, 0xa910, 0xc8d, 0xdf70, 0xfbcd, 0x1, 0x1);
        gbc.writeMem(0x57a5, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xa9, gbc.a());
        EXPECT(0xc, gbc.b());
        EXPECT(0x8d, gbc.c());
        EXPECT(0xdf, gbc.d());
        EXPECT(0x70, gbc.e());
        EXPECT(0xf9, gbc.h());
        EXPECT(0xcd, gbc.l());
        EXPECT(0x5d8a, gbc.sp());
        EXPECT(0x57a7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 0393
        gbc.setState(0xea5d, 0xac57, 0x65d0, 0xa672, 0xa5a1, 0xa5e8, 0x1, 0x1);
        gbc.writeMem(0xea5d, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x65, gbc.a());
        EXPECT(0xa6, gbc.b());
        EXPECT(0x72, gbc.c());
        EXPECT(0xa5, gbc.d());
        EXPECT(0xa1, gbc.e());
        EXPECT(0xa5, gbc.h());
        EXPECT(0xe8, gbc.l());
        EXPECT(0xac57, gbc.sp());
        EXPECT(0xea5f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xea5d));
        EXPECT(0x8c, gbc.readMem(0xea5e));
        // CB 8C 0394
        gbc.setState(0x90ee, 0x38b7, 0x43d0, 0x4b8f, 0x52af, 0x6815, 0x1, 0x1);
        gbc.writeMem(0x90ee, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x43, gbc.a());
        EXPECT(0x4b, gbc.b());
        EXPECT(0x8f, gbc.c());
        EXPECT(0x52, gbc.d());
        EXPECT(0xaf, gbc.e());
        EXPECT(0x68, gbc.h());
        EXPECT(0x15, gbc.l());
        EXPECT(0x38b7, gbc.sp());
        EXPECT(0x90f0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x90ee));
        EXPECT(0x8c, gbc.readMem(0x90ef));
        // CB 8C 0396
        gbc.setState(0x6a50, 0x9a4f, 0xad70, 0xc5d5, 0x5621, 0xa53f, 0x1, 0x0);
        gbc.writeMem(0x6a50, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xad, gbc.a());
        EXPECT(0xc5, gbc.b());
        EXPECT(0xd5, gbc.c());
        EXPECT(0x56, gbc.d());
        EXPECT(0x21, gbc.e());
        EXPECT(0xa5, gbc.h());
        EXPECT(0x3f, gbc.l());
        EXPECT(0x9a4f, gbc.sp());
        EXPECT(0x6a52, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 0397
        gbc.setState(0xa88b, 0xea12, 0xbeb0, 0xba23, 0xf365, 0xf062, 0x1, 0x1);
        gbc.writeMem(0xa88b, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xbe, gbc.a());
        EXPECT(0xba, gbc.b());
        EXPECT(0x23, gbc.c());
        EXPECT(0xf3, gbc.d());
        EXPECT(0x65, gbc.e());
        EXPECT(0xf0, gbc.h());
        EXPECT(0x62, gbc.l());
        EXPECT(0xea12, gbc.sp());
        EXPECT(0xa88d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa88b));
        EXPECT(0x8c, gbc.readMem(0xa88c));
        // CB 8C 0398
        gbc.setState(0xcbfc, 0x3146, 0x8290, 0x507, 0xf8d4, 0x93d9, 0x1, 0x0);
        gbc.writeMem(0xcbfc, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x82, gbc.a());
        EXPECT(0x5, gbc.b());
        EXPECT(0x7, gbc.c());
        EXPECT(0xf8, gbc.d());
        EXPECT(0xd4, gbc.e());
        EXPECT(0x91, gbc.h());
        EXPECT(0xd9, gbc.l());
        EXPECT(0x3146, gbc.sp());
        EXPECT(0xcbfe, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcbfc));
        EXPECT(0x8c, gbc.readMem(0xcbfd));
        // CB 8C 039A
        gbc.setState(0x6f52, 0x3a07, 0xb0, 0xb285, 0x8f29, 0xd3df, 0x0, 0x1);
        gbc.writeMem(0x6f52, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xb2, gbc.b());
        EXPECT(0x85, gbc.c());
        EXPECT(0x8f, gbc.d());
        EXPECT(0x29, gbc.e());
        EXPECT(0xd1, gbc.h());
        EXPECT(0xdf, gbc.l());
        EXPECT(0x3a07, gbc.sp());
        EXPECT(0x6f54, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 039B
        gbc.setState(0x7110, 0xa5e3, 0xe7e0, 0x4fb, 0x4fd1, 0x9094, 0x0, 0x0);
        gbc.writeMem(0x7110, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xe7, gbc.a());
        EXPECT(0x4, gbc.b());
        EXPECT(0xfb, gbc.c());
        EXPECT(0x4f, gbc.d());
        EXPECT(0xd1, gbc.e());
        EXPECT(0x90, gbc.h());
        EXPECT(0x94, gbc.l());
        EXPECT(0xa5e3, gbc.sp());
        EXPECT(0x7112, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 039C
        gbc.setState(0x5472, 0x346d, 0xbe20, 0xdabe, 0x593a, 0x36ff, 0x0, 0x0);
        gbc.writeMem(0x5472, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xbe, gbc.a());
        EXPECT(0xda, gbc.b());
        EXPECT(0xbe, gbc.c());
        EXPECT(0x59, gbc.d());
        EXPECT(0x3a, gbc.e());
        EXPECT(0x34, gbc.h());
        EXPECT(0xff, gbc.l());
        EXPECT(0x346d, gbc.sp());
        EXPECT(0x5474, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 039D
        gbc.setState(0x3ac9, 0xa1b8, 0xcfe0, 0x510c, 0x205a, 0x452b, 0x0, 0x0);
        gbc.writeMem(0x3ac9, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xcf, gbc.a());
        EXPECT(0x51, gbc.b());
        EXPECT(0xc, gbc.c());
        EXPECT(0x20, gbc.d());
        EXPECT(0x5a, gbc.e());
        EXPECT(0x45, gbc.h());
        EXPECT(0x2b, gbc.l());
        EXPECT(0xa1b8, gbc.sp());
        EXPECT(0x3acb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 039E
        gbc.setState(0xad7b, 0x4046, 0xe1e0, 0x94d6, 0xb20a, 0x7e95, 0x0, 0x1);
        gbc.writeMem(0xad7b, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xe1, gbc.a());
        EXPECT(0x94, gbc.b());
        EXPECT(0xd6, gbc.c());
        EXPECT(0xb2, gbc.d());
        EXPECT(0xa, gbc.e());
        EXPECT(0x7c, gbc.h());
        EXPECT(0x95, gbc.l());
        EXPECT(0x4046, gbc.sp());
        EXPECT(0xad7d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xad7b));
        EXPECT(0x8c, gbc.readMem(0xad7c));
        // CB 8C 039F
        gbc.setState(0x52a2, 0x57c3, 0x43e0, 0x3f76, 0xe66d, 0xd3a1, 0x1, 0x0);
        gbc.writeMem(0x52a2, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x43, gbc.a());
        EXPECT(0x3f, gbc.b());
        EXPECT(0x76, gbc.c());
        EXPECT(0xe6, gbc.d());
        EXPECT(0x6d, gbc.e());
        EXPECT(0xd1, gbc.h());
        EXPECT(0xa1, gbc.l());
        EXPECT(0x57c3, gbc.sp());
        EXPECT(0x52a4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 03A0
        gbc.setState(0x2560, 0x80f3, 0x1ad0, 0x1c60, 0x87ca, 0x302b, 0x0, 0x0);
        gbc.writeMem(0x2560, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x1a, gbc.a());
        EXPECT(0x1c, gbc.b());
        EXPECT(0x60, gbc.c());
        EXPECT(0x87, gbc.d());
        EXPECT(0xca, gbc.e());
        EXPECT(0x30, gbc.h());
        EXPECT(0x2b, gbc.l());
        EXPECT(0x80f3, gbc.sp());
        EXPECT(0x2562, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 03A1
        gbc.setState(0x4621, 0x7855, 0xeb10, 0x30ef, 0xf125, 0x4aca, 0x1, 0x0);
        gbc.writeMem(0x4621, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xeb, gbc.a());
        EXPECT(0x30, gbc.b());
        EXPECT(0xef, gbc.c());
        EXPECT(0xf1, gbc.d());
        EXPECT(0x25, gbc.e());
        EXPECT(0x48, gbc.h());
        EXPECT(0xca, gbc.l());
        EXPECT(0x7855, gbc.sp());
        EXPECT(0x4623, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 03A3
        gbc.setState(0xc25c, 0xec8d, 0x2f60, 0xb081, 0xfbce, 0x8928, 0x1, 0x0);
        gbc.writeMem(0xc25c, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x2f, gbc.a());
        EXPECT(0xb0, gbc.b());
        EXPECT(0x81, gbc.c());
        EXPECT(0xfb, gbc.d());
        EXPECT(0xce, gbc.e());
        EXPECT(0x89, gbc.h());
        EXPECT(0x28, gbc.l());
        EXPECT(0xec8d, gbc.sp());
        EXPECT(0xc25e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc25c));
        EXPECT(0x8c, gbc.readMem(0xc25d));
        // CB 8C 03A4
        gbc.setState(0x80e1, 0xf2, 0xb220, 0x5413, 0x143, 0x53f6, 0x0, 0x1);
        gbc.writeMem(0x80e1, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xb2, gbc.a());
        EXPECT(0x54, gbc.b());
        EXPECT(0x13, gbc.c());
        EXPECT(0x1, gbc.d());
        EXPECT(0x43, gbc.e());
        EXPECT(0x51, gbc.h());
        EXPECT(0xf6, gbc.l());
        EXPECT(0xf2, gbc.sp());
        EXPECT(0x80e3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x80e1));
        EXPECT(0x8c, gbc.readMem(0x80e2));
        // CB 8C 03A5
        gbc.setState(0x7e2, 0x1e35, 0x4e10, 0x4794, 0x93b7, 0xd70a, 0x1, 0x0);
        gbc.writeMem(0x7e2, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x4e, gbc.a());
        EXPECT(0x47, gbc.b());
        EXPECT(0x94, gbc.c());
        EXPECT(0x93, gbc.d());
        EXPECT(0xb7, gbc.e());
        EXPECT(0xd5, gbc.h());
        EXPECT(0xa, gbc.l());
        EXPECT(0x1e35, gbc.sp());
        EXPECT(0x7e4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 03A6
        gbc.setState(0x2ef8, 0xb89a, 0xa020, 0x9062, 0x119b, 0x80f8, 0x1, 0x0);
        gbc.writeMem(0x2ef8, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xa0, gbc.a());
        EXPECT(0x90, gbc.b());
        EXPECT(0x62, gbc.c());
        EXPECT(0x11, gbc.d());
        EXPECT(0x9b, gbc.e());
        EXPECT(0x80, gbc.h());
        EXPECT(0xf8, gbc.l());
        EXPECT(0xb89a, gbc.sp());
        EXPECT(0x2efa, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 03A7
        gbc.setState(0xd9dd, 0x8c74, 0x1a80, 0x6e6d, 0x91eb, 0xdb64, 0x1, 0x0);
        gbc.writeMem(0xd9dd, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x1a, gbc.a());
        EXPECT(0x6e, gbc.b());
        EXPECT(0x6d, gbc.c());
        EXPECT(0x91, gbc.d());
        EXPECT(0xeb, gbc.e());
        EXPECT(0xd9, gbc.h());
        EXPECT(0x64, gbc.l());
        EXPECT(0x8c74, gbc.sp());
        EXPECT(0xd9df, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd9dd));
        EXPECT(0x8c, gbc.readMem(0xd9de));
        // CB 8C 03A8
        gbc.setState(0xcc51, 0xb5ae, 0xcff0, 0x61c3, 0x6956, 0xdd73, 0x0, 0x1);
        gbc.writeMem(0xcc51, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xcf, gbc.a());
        EXPECT(0x61, gbc.b());
        EXPECT(0xc3, gbc.c());
        EXPECT(0x69, gbc.d());
        EXPECT(0x56, gbc.e());
        EXPECT(0xdd, gbc.h());
        EXPECT(0x73, gbc.l());
        EXPECT(0xb5ae, gbc.sp());
        EXPECT(0xcc53, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcc51));
        EXPECT(0x8c, gbc.readMem(0xcc52));
        // CB 8C 03A9
        gbc.setState(0x9924, 0x5e3c, 0x6150, 0x382a, 0x574b, 0x7ead, 0x0, 0x0);
        gbc.writeMem(0x9924, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x61, gbc.a());
        EXPECT(0x38, gbc.b());
        EXPECT(0x2a, gbc.c());
        EXPECT(0x57, gbc.d());
        EXPECT(0x4b, gbc.e());
        EXPECT(0x7c, gbc.h());
        EXPECT(0xad, gbc.l());
        EXPECT(0x5e3c, gbc.sp());
        EXPECT(0x9926, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9924));
        EXPECT(0x8c, gbc.readMem(0x9925));
        // CB 8C 03AA
        gbc.setState(0x4f9d, 0x4d36, 0x65f0, 0xb5b8, 0xc68f, 0xdb21, 0x0, 0x1);
        gbc.writeMem(0x4f9d, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x65, gbc.a());
        EXPECT(0xb5, gbc.b());
        EXPECT(0xb8, gbc.c());
        EXPECT(0xc6, gbc.d());
        EXPECT(0x8f, gbc.e());
        EXPECT(0xd9, gbc.h());
        EXPECT(0x21, gbc.l());
        EXPECT(0x4d36, gbc.sp());
        EXPECT(0x4f9f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 03AB
        gbc.setState(0x6327, 0x876a, 0x7b00, 0xac62, 0xcfd6, 0x5de8, 0x0, 0x1);
        gbc.writeMem(0x6327, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x7b, gbc.a());
        EXPECT(0xac, gbc.b());
        EXPECT(0x62, gbc.c());
        EXPECT(0xcf, gbc.d());
        EXPECT(0xd6, gbc.e());
        EXPECT(0x5d, gbc.h());
        EXPECT(0xe8, gbc.l());
        EXPECT(0x876a, gbc.sp());
        EXPECT(0x6329, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 03AC
        gbc.setState(0x2b0c, 0x6f16, 0xe400, 0x4675, 0x137c, 0x5c9, 0x0, 0x1);
        gbc.writeMem(0x2b0c, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xe4, gbc.a());
        EXPECT(0x46, gbc.b());
        EXPECT(0x75, gbc.c());
        EXPECT(0x13, gbc.d());
        EXPECT(0x7c, gbc.e());
        EXPECT(0x5, gbc.h());
        EXPECT(0xc9, gbc.l());
        EXPECT(0x6f16, gbc.sp());
        EXPECT(0x2b0e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 03AD
        gbc.setState(0x54ee, 0x7347, 0x2860, 0xafca, 0x4c69, 0x2239, 0x0, 0x0);
        gbc.writeMem(0x54ee, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x28, gbc.a());
        EXPECT(0xaf, gbc.b());
        EXPECT(0xca, gbc.c());
        EXPECT(0x4c, gbc.d());
        EXPECT(0x69, gbc.e());
        EXPECT(0x20, gbc.h());
        EXPECT(0x39, gbc.l());
        EXPECT(0x7347, gbc.sp());
        EXPECT(0x54f0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 03AE
        gbc.setState(0x2de1, 0x2c26, 0x5f0, 0xdce6, 0xa7fa, 0xa6e7, 0x0, 0x1);
        gbc.writeMem(0x2de1, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x5, gbc.a());
        EXPECT(0xdc, gbc.b());
        EXPECT(0xe6, gbc.c());
        EXPECT(0xa7, gbc.d());
        EXPECT(0xfa, gbc.e());
        EXPECT(0xa4, gbc.h());
        EXPECT(0xe7, gbc.l());
        EXPECT(0x2c26, gbc.sp());
        EXPECT(0x2de3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 03AF
        gbc.setState(0x44c3, 0x472c, 0xfe80, 0x736a, 0xeb2b, 0x7cfa, 0x0, 0x0);
        gbc.writeMem(0x44c3, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xfe, gbc.a());
        EXPECT(0x73, gbc.b());
        EXPECT(0x6a, gbc.c());
        EXPECT(0xeb, gbc.d());
        EXPECT(0x2b, gbc.e());
        EXPECT(0x7c, gbc.h());
        EXPECT(0xfa, gbc.l());
        EXPECT(0x472c, gbc.sp());
        EXPECT(0x44c5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 03B1
        gbc.setState(0xd9b6, 0x1b85, 0xef40, 0x56d1, 0x4b57, 0x3b7f, 0x1, 0x0);
        gbc.writeMem(0xd9b6, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xef, gbc.a());
        EXPECT(0x56, gbc.b());
        EXPECT(0xd1, gbc.c());
        EXPECT(0x4b, gbc.d());
        EXPECT(0x57, gbc.e());
        EXPECT(0x39, gbc.h());
        EXPECT(0x7f, gbc.l());
        EXPECT(0x1b85, gbc.sp());
        EXPECT(0xd9b8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd9b6));
        EXPECT(0x8c, gbc.readMem(0xd9b7));
        // CB 8C 03B2
        gbc.setState(0x8309, 0x61c1, 0xb860, 0xe5ad, 0xf9e2, 0xc79e, 0x0, 0x0);
        gbc.writeMem(0x8309, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xb8, gbc.a());
        EXPECT(0xe5, gbc.b());
        EXPECT(0xad, gbc.c());
        EXPECT(0xf9, gbc.d());
        EXPECT(0xe2, gbc.e());
        EXPECT(0xc5, gbc.h());
        EXPECT(0x9e, gbc.l());
        EXPECT(0x61c1, gbc.sp());
        EXPECT(0x830b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8309));
        EXPECT(0x8c, gbc.readMem(0x830a));
        // CB 8C 03B3
        gbc.setState(0xc1a8, 0xf415, 0xf240, 0x33b8, 0xe9d6, 0x2a77, 0x0, 0x1);
        gbc.writeMem(0xc1a8, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xf2, gbc.a());
        EXPECT(0x33, gbc.b());
        EXPECT(0xb8, gbc.c());
        EXPECT(0xe9, gbc.d());
        EXPECT(0xd6, gbc.e());
        EXPECT(0x28, gbc.h());
        EXPECT(0x77, gbc.l());
        EXPECT(0xf415, gbc.sp());
        EXPECT(0xc1aa, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc1a8));
        EXPECT(0x8c, gbc.readMem(0xc1a9));
        // CB 8C 03B4
        gbc.setState(0xd241, 0xb5d, 0xe030, 0x3bb5, 0x483d, 0x6f89, 0x1, 0x0);
        gbc.writeMem(0xd241, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xe0, gbc.a());
        EXPECT(0x3b, gbc.b());
        EXPECT(0xb5, gbc.c());
        EXPECT(0x48, gbc.d());
        EXPECT(0x3d, gbc.e());
        EXPECT(0x6d, gbc.h());
        EXPECT(0x89, gbc.l());
        EXPECT(0xb5d, gbc.sp());
        EXPECT(0xd243, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd241));
        EXPECT(0x8c, gbc.readMem(0xd242));
        // CB 8C 03B5
        gbc.setState(0xaabf, 0x9557, 0x1190, 0x4e27, 0x5399, 0xc421, 0x0, 0x1);
        gbc.writeMem(0xaabf, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x11, gbc.a());
        EXPECT(0x4e, gbc.b());
        EXPECT(0x27, gbc.c());
        EXPECT(0x53, gbc.d());
        EXPECT(0x99, gbc.e());
        EXPECT(0xc4, gbc.h());
        EXPECT(0x21, gbc.l());
        EXPECT(0x9557, gbc.sp());
        EXPECT(0xaac1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaabf));
        EXPECT(0x8c, gbc.readMem(0xaac0));
        // CB 8C 03B6
        gbc.setState(0x5c36, 0x878b, 0xdb10, 0xcbde, 0xf96f, 0x3056, 0x0, 0x1);
        gbc.writeMem(0x5c36, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xdb, gbc.a());
        EXPECT(0xcb, gbc.b());
        EXPECT(0xde, gbc.c());
        EXPECT(0xf9, gbc.d());
        EXPECT(0x6f, gbc.e());
        EXPECT(0x30, gbc.h());
        EXPECT(0x56, gbc.l());
        EXPECT(0x878b, gbc.sp());
        EXPECT(0x5c38, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 03B7
        gbc.setState(0x6b68, 0x2f89, 0x63d0, 0x728f, 0x249d, 0xe704, 0x0, 0x0);
        gbc.writeMem(0x6b68, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x63, gbc.a());
        EXPECT(0x72, gbc.b());
        EXPECT(0x8f, gbc.c());
        EXPECT(0x24, gbc.d());
        EXPECT(0x9d, gbc.e());
        EXPECT(0xe5, gbc.h());
        EXPECT(0x4, gbc.l());
        EXPECT(0x2f89, gbc.sp());
        EXPECT(0x6b6a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 03B8
        gbc.setState(0x15b9, 0x3928, 0xbde0, 0x5230, 0x92d6, 0x2267, 0x1, 0x1);
        gbc.writeMem(0x15b9, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xbd, gbc.a());
        EXPECT(0x52, gbc.b());
        EXPECT(0x30, gbc.c());
        EXPECT(0x92, gbc.d());
        EXPECT(0xd6, gbc.e());
        EXPECT(0x20, gbc.h());
        EXPECT(0x67, gbc.l());
        EXPECT(0x3928, gbc.sp());
        EXPECT(0x15bb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 03B9
        gbc.setState(0xfb6, 0x9f58, 0x3e0, 0x41db, 0x1bb9, 0xda01, 0x0, 0x1);
        gbc.writeMem(0xfb6, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x3, gbc.a());
        EXPECT(0x41, gbc.b());
        EXPECT(0xdb, gbc.c());
        EXPECT(0x1b, gbc.d());
        EXPECT(0xb9, gbc.e());
        EXPECT(0xd8, gbc.h());
        EXPECT(0x1, gbc.l());
        EXPECT(0x9f58, gbc.sp());
        EXPECT(0xfb8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 03BA
        gbc.setState(0xca7b, 0xbd20, 0xdc80, 0x76cb, 0x638e, 0xe62f, 0x0, 0x0);
        gbc.writeMem(0xca7b, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xdc, gbc.a());
        EXPECT(0x76, gbc.b());
        EXPECT(0xcb, gbc.c());
        EXPECT(0x63, gbc.d());
        EXPECT(0x8e, gbc.e());
        EXPECT(0xe4, gbc.h());
        EXPECT(0x2f, gbc.l());
        EXPECT(0xbd20, gbc.sp());
        EXPECT(0xca7d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xca7b));
        EXPECT(0x8c, gbc.readMem(0xca7c));
        // CB 8C 03BB
        gbc.setState(0x10f7, 0x7367, 0x4030, 0xf797, 0xf1c4, 0x5526, 0x0, 0x1);
        gbc.writeMem(0x10f7, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x40, gbc.a());
        EXPECT(0xf7, gbc.b());
        EXPECT(0x97, gbc.c());
        EXPECT(0xf1, gbc.d());
        EXPECT(0xc4, gbc.e());
        EXPECT(0x55, gbc.h());
        EXPECT(0x26, gbc.l());
        EXPECT(0x7367, gbc.sp());
        EXPECT(0x10f9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 03BC
        gbc.setState(0x9f2c, 0xdd89, 0x3ec0, 0x10c4, 0x76ef, 0x5f88, 0x1, 0x0);
        gbc.writeMem(0x9f2c, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x3e, gbc.a());
        EXPECT(0x10, gbc.b());
        EXPECT(0xc4, gbc.c());
        EXPECT(0x76, gbc.d());
        EXPECT(0xef, gbc.e());
        EXPECT(0x5d, gbc.h());
        EXPECT(0x88, gbc.l());
        EXPECT(0xdd89, gbc.sp());
        EXPECT(0x9f2e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9f2c));
        EXPECT(0x8c, gbc.readMem(0x9f2d));
        // CB 8C 03BD
        gbc.setState(0xa982, 0x5c80, 0x4ee0, 0xae1e, 0xf598, 0x29d3, 0x0, 0x0);
        gbc.writeMem(0xa982, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x4e, gbc.a());
        EXPECT(0xae, gbc.b());
        EXPECT(0x1e, gbc.c());
        EXPECT(0xf5, gbc.d());
        EXPECT(0x98, gbc.e());
        EXPECT(0x29, gbc.h());
        EXPECT(0xd3, gbc.l());
        EXPECT(0x5c80, gbc.sp());
        EXPECT(0xa984, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa982));
        EXPECT(0x8c, gbc.readMem(0xa983));
        // CB 8C 03BE
        gbc.setState(0x65e6, 0xabb5, 0x3d0, 0xb54d, 0x8b1e, 0x13de, 0x1, 0x1);
        gbc.writeMem(0x65e6, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x3, gbc.a());
        EXPECT(0xb5, gbc.b());
        EXPECT(0x4d, gbc.c());
        EXPECT(0x8b, gbc.d());
        EXPECT(0x1e, gbc.e());
        EXPECT(0x11, gbc.h());
        EXPECT(0xde, gbc.l());
        EXPECT(0xabb5, gbc.sp());
        EXPECT(0x65e8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 03BF
        gbc.setState(0x62fd, 0xd2d, 0x9920, 0x6343, 0xdcf6, 0xfa26, 0x1, 0x1);
        gbc.writeMem(0x62fd, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x99, gbc.a());
        EXPECT(0x63, gbc.b());
        EXPECT(0x43, gbc.c());
        EXPECT(0xdc, gbc.d());
        EXPECT(0xf6, gbc.e());
        EXPECT(0xf8, gbc.h());
        EXPECT(0x26, gbc.l());
        EXPECT(0xd2d, gbc.sp());
        EXPECT(0x62ff, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 03C0
        gbc.setState(0x934d, 0x7903, 0xda80, 0xaab5, 0x3025, 0xbdb2, 0x0, 0x1);
        gbc.writeMem(0x934d, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xda, gbc.a());
        EXPECT(0xaa, gbc.b());
        EXPECT(0xb5, gbc.c());
        EXPECT(0x30, gbc.d());
        EXPECT(0x25, gbc.e());
        EXPECT(0xbd, gbc.h());
        EXPECT(0xb2, gbc.l());
        EXPECT(0x7903, gbc.sp());
        EXPECT(0x934f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x934d));
        EXPECT(0x8c, gbc.readMem(0x934e));
        // CB 8C 03C1
        gbc.setState(0x4d17, 0xbc8c, 0xd800, 0xe11e, 0xbdb5, 0x6035, 0x0, 0x1);
        gbc.writeMem(0x4d17, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xd8, gbc.a());
        EXPECT(0xe1, gbc.b());
        EXPECT(0x1e, gbc.c());
        EXPECT(0xbd, gbc.d());
        EXPECT(0xb5, gbc.e());
        EXPECT(0x60, gbc.h());
        EXPECT(0x35, gbc.l());
        EXPECT(0xbc8c, gbc.sp());
        EXPECT(0x4d19, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 03C2
        gbc.setState(0x9368, 0x8d5, 0x2190, 0x77a4, 0x6efa, 0x75e6, 0x1, 0x1);
        gbc.writeMem(0x9368, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x21, gbc.a());
        EXPECT(0x77, gbc.b());
        EXPECT(0xa4, gbc.c());
        EXPECT(0x6e, gbc.d());
        EXPECT(0xfa, gbc.e());
        EXPECT(0x75, gbc.h());
        EXPECT(0xe6, gbc.l());
        EXPECT(0x8d5, gbc.sp());
        EXPECT(0x936a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9368));
        EXPECT(0x8c, gbc.readMem(0x9369));
        // CB 8C 03C3
        gbc.setState(0x1986, 0x4a5e, 0xa100, 0x459c, 0x4633, 0xd389, 0x0, 0x0);
        gbc.writeMem(0x1986, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xa1, gbc.a());
        EXPECT(0x45, gbc.b());
        EXPECT(0x9c, gbc.c());
        EXPECT(0x46, gbc.d());
        EXPECT(0x33, gbc.e());
        EXPECT(0xd1, gbc.h());
        EXPECT(0x89, gbc.l());
        EXPECT(0x4a5e, gbc.sp());
        EXPECT(0x1988, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 03C4
        gbc.setState(0xd593, 0x1c97, 0xd2f0, 0x4e2f, 0x310a, 0xf70f, 0x1, 0x0);
        gbc.writeMem(0xd593, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xd2, gbc.a());
        EXPECT(0x4e, gbc.b());
        EXPECT(0x2f, gbc.c());
        EXPECT(0x31, gbc.d());
        EXPECT(0xa, gbc.e());
        EXPECT(0xf5, gbc.h());
        EXPECT(0xf, gbc.l());
        EXPECT(0x1c97, gbc.sp());
        EXPECT(0xd595, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd593));
        EXPECT(0x8c, gbc.readMem(0xd594));
        // CB 8C 03C5
        gbc.setState(0x14c8, 0xab1b, 0x95a0, 0xd7bb, 0x5856, 0xbd1a, 0x1, 0x1);
        gbc.writeMem(0x14c8, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x95, gbc.a());
        EXPECT(0xd7, gbc.b());
        EXPECT(0xbb, gbc.c());
        EXPECT(0x58, gbc.d());
        EXPECT(0x56, gbc.e());
        EXPECT(0xbd, gbc.h());
        EXPECT(0x1a, gbc.l());
        EXPECT(0xab1b, gbc.sp());
        EXPECT(0x14ca, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 03C6
        gbc.setState(0x7e4a, 0x24c9, 0xcff0, 0x476a, 0xe6c4, 0x447d, 0x0, 0x0);
        gbc.writeMem(0x7e4a, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xcf, gbc.a());
        EXPECT(0x47, gbc.b());
        EXPECT(0x6a, gbc.c());
        EXPECT(0xe6, gbc.d());
        EXPECT(0xc4, gbc.e());
        EXPECT(0x44, gbc.h());
        EXPECT(0x7d, gbc.l());
        EXPECT(0x24c9, gbc.sp());
        EXPECT(0x7e4c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 03C7
        gbc.setState(0x9a7b, 0x8b60, 0x34a0, 0xf521, 0x6cbb, 0x1984, 0x1, 0x1);
        gbc.writeMem(0x9a7b, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x34, gbc.a());
        EXPECT(0xf5, gbc.b());
        EXPECT(0x21, gbc.c());
        EXPECT(0x6c, gbc.d());
        EXPECT(0xbb, gbc.e());
        EXPECT(0x19, gbc.h());
        EXPECT(0x84, gbc.l());
        EXPECT(0x8b60, gbc.sp());
        EXPECT(0x9a7d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9a7b));
        EXPECT(0x8c, gbc.readMem(0x9a7c));
        // CB 8C 03C8
        gbc.setState(0x2cd2, 0x3dad, 0x47f0, 0xf7fb, 0x4771, 0xcbc8, 0x1, 0x0);
        gbc.writeMem(0x2cd2, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x47, gbc.a());
        EXPECT(0xf7, gbc.b());
        EXPECT(0xfb, gbc.c());
        EXPECT(0x47, gbc.d());
        EXPECT(0x71, gbc.e());
        EXPECT(0xc9, gbc.h());
        EXPECT(0xc8, gbc.l());
        EXPECT(0x3dad, gbc.sp());
        EXPECT(0x2cd4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 03C9
        gbc.setState(0x290a, 0xd4a7, 0x3940, 0xff6, 0x906, 0x7aa, 0x1, 0x0);
        gbc.writeMem(0x290a, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x39, gbc.a());
        EXPECT(0xf, gbc.b());
        EXPECT(0xf6, gbc.c());
        EXPECT(0x9, gbc.d());
        EXPECT(0x6, gbc.e());
        EXPECT(0x5, gbc.h());
        EXPECT(0xaa, gbc.l());
        EXPECT(0xd4a7, gbc.sp());
        EXPECT(0x290c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 03CA
        gbc.setState(0xe393, 0xf703, 0xfb90, 0x987f, 0xc250, 0x3031, 0x1, 0x0);
        gbc.writeMem(0xe393, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xfb, gbc.a());
        EXPECT(0x98, gbc.b());
        EXPECT(0x7f, gbc.c());
        EXPECT(0xc2, gbc.d());
        EXPECT(0x50, gbc.e());
        EXPECT(0x30, gbc.h());
        EXPECT(0x31, gbc.l());
        EXPECT(0xf703, gbc.sp());
        EXPECT(0xe395, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe393));
        EXPECT(0x8c, gbc.readMem(0xe394));
        // CB 8C 03CC
        gbc.setState(0x1cf2, 0xdcc8, 0x3fe0, 0x43eb, 0xf753, 0x3b1c, 0x0, 0x1);
        gbc.writeMem(0x1cf2, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x3f, gbc.a());
        EXPECT(0x43, gbc.b());
        EXPECT(0xeb, gbc.c());
        EXPECT(0xf7, gbc.d());
        EXPECT(0x53, gbc.e());
        EXPECT(0x39, gbc.h());
        EXPECT(0x1c, gbc.l());
        EXPECT(0xdcc8, gbc.sp());
        EXPECT(0x1cf4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 03CD
        gbc.setState(0x4b1, 0xe7a5, 0xf5c0, 0xbd76, 0xf3f8, 0xa1a3, 0x1, 0x1);
        gbc.writeMem(0x4b1, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xf5, gbc.a());
        EXPECT(0xbd, gbc.b());
        EXPECT(0x76, gbc.c());
        EXPECT(0xf3, gbc.d());
        EXPECT(0xf8, gbc.e());
        EXPECT(0xa1, gbc.h());
        EXPECT(0xa3, gbc.l());
        EXPECT(0xe7a5, gbc.sp());
        EXPECT(0x4b3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 03CE
        gbc.setState(0x36a3, 0x52b3, 0xa200, 0x7797, 0xae4, 0x1e96, 0x1, 0x1);
        gbc.writeMem(0x36a3, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xa2, gbc.a());
        EXPECT(0x77, gbc.b());
        EXPECT(0x97, gbc.c());
        EXPECT(0xa, gbc.d());
        EXPECT(0xe4, gbc.e());
        EXPECT(0x1c, gbc.h());
        EXPECT(0x96, gbc.l());
        EXPECT(0x52b3, gbc.sp());
        EXPECT(0x36a5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 03CF
        gbc.setState(0x149a, 0x2c87, 0xd3d0, 0xe021, 0xdce4, 0x27a9, 0x0, 0x0);
        gbc.writeMem(0x149a, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xd3, gbc.a());
        EXPECT(0xe0, gbc.b());
        EXPECT(0x21, gbc.c());
        EXPECT(0xdc, gbc.d());
        EXPECT(0xe4, gbc.e());
        EXPECT(0x25, gbc.h());
        EXPECT(0xa9, gbc.l());
        EXPECT(0x2c87, gbc.sp());
        EXPECT(0x149c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 03D0
        gbc.setState(0xdd90, 0x583e, 0x9e20, 0x7457, 0x5957, 0xac96, 0x0, 0x0);
        gbc.writeMem(0xdd90, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x9e, gbc.a());
        EXPECT(0x74, gbc.b());
        EXPECT(0x57, gbc.c());
        EXPECT(0x59, gbc.d());
        EXPECT(0x57, gbc.e());
        EXPECT(0xac, gbc.h());
        EXPECT(0x96, gbc.l());
        EXPECT(0x583e, gbc.sp());
        EXPECT(0xdd92, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdd90));
        EXPECT(0x8c, gbc.readMem(0xdd91));
        // CB 8C 03D1
        gbc.setState(0xdc7f, 0x81cf, 0x44e0, 0xc28b, 0x4e35, 0x6a98, 0x0, 0x1);
        gbc.writeMem(0xdc7f, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x44, gbc.a());
        EXPECT(0xc2, gbc.b());
        EXPECT(0x8b, gbc.c());
        EXPECT(0x4e, gbc.d());
        EXPECT(0x35, gbc.e());
        EXPECT(0x68, gbc.h());
        EXPECT(0x98, gbc.l());
        EXPECT(0x81cf, gbc.sp());
        EXPECT(0xdc81, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdc7f));
        EXPECT(0x8c, gbc.readMem(0xdc80));
        // CB 8C 03D2
        gbc.setState(0x64e2, 0x2631, 0x7bc0, 0xa3f2, 0xfdeb, 0x1a2e, 0x1, 0x1);
        gbc.writeMem(0x64e2, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x7b, gbc.a());
        EXPECT(0xa3, gbc.b());
        EXPECT(0xf2, gbc.c());
        EXPECT(0xfd, gbc.d());
        EXPECT(0xeb, gbc.e());
        EXPECT(0x18, gbc.h());
        EXPECT(0x2e, gbc.l());
        EXPECT(0x2631, gbc.sp());
        EXPECT(0x64e4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 03D3
        gbc.setState(0x7d7a, 0xee49, 0x5380, 0x527, 0xba54, 0x1ecf, 0x1, 0x0);
        gbc.writeMem(0x7d7a, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x53, gbc.a());
        EXPECT(0x5, gbc.b());
        EXPECT(0x27, gbc.c());
        EXPECT(0xba, gbc.d());
        EXPECT(0x54, gbc.e());
        EXPECT(0x1c, gbc.h());
        EXPECT(0xcf, gbc.l());
        EXPECT(0xee49, gbc.sp());
        EXPECT(0x7d7c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 03D4
        gbc.setState(0xc3f0, 0xbf8b, 0xa860, 0x61cd, 0x31bc, 0xb008, 0x0, 0x1);
        gbc.writeMem(0xc3f0, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xa8, gbc.a());
        EXPECT(0x61, gbc.b());
        EXPECT(0xcd, gbc.c());
        EXPECT(0x31, gbc.d());
        EXPECT(0xbc, gbc.e());
        EXPECT(0xb0, gbc.h());
        EXPECT(0x8, gbc.l());
        EXPECT(0xbf8b, gbc.sp());
        EXPECT(0xc3f2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc3f0));
        EXPECT(0x8c, gbc.readMem(0xc3f1));
        // CB 8C 03D5
        gbc.setState(0x7a84, 0xf45c, 0x7b80, 0xb2d1, 0x680b, 0x8101, 0x0, 0x1);
        gbc.writeMem(0x7a84, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x7b, gbc.a());
        EXPECT(0xb2, gbc.b());
        EXPECT(0xd1, gbc.c());
        EXPECT(0x68, gbc.d());
        EXPECT(0xb, gbc.e());
        EXPECT(0x81, gbc.h());
        EXPECT(0x1, gbc.l());
        EXPECT(0xf45c, gbc.sp());
        EXPECT(0x7a86, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 03D6
        gbc.setState(0xeb06, 0xac01, 0x8070, 0x33a, 0x9693, 0x128, 0x0, 0x1);
        gbc.writeMem(0xeb06, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x80, gbc.a());
        EXPECT(0x3, gbc.b());
        EXPECT(0x3a, gbc.c());
        EXPECT(0x96, gbc.d());
        EXPECT(0x93, gbc.e());
        EXPECT(0x1, gbc.h());
        EXPECT(0x28, gbc.l());
        EXPECT(0xac01, gbc.sp());
        EXPECT(0xeb08, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xeb06));
        EXPECT(0x8c, gbc.readMem(0xeb07));
        // CB 8C 03D7
        gbc.setState(0x4ad0, 0xf511, 0xc300, 0x2b53, 0x8cf7, 0xd5a5, 0x1, 0x0);
        gbc.writeMem(0x4ad0, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xc3, gbc.a());
        EXPECT(0x2b, gbc.b());
        EXPECT(0x53, gbc.c());
        EXPECT(0x8c, gbc.d());
        EXPECT(0xf7, gbc.e());
        EXPECT(0xd5, gbc.h());
        EXPECT(0xa5, gbc.l());
        EXPECT(0xf511, gbc.sp());
        EXPECT(0x4ad2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 03D8
        gbc.setState(0x9e68, 0xece7, 0x9b40, 0x7242, 0x51db, 0xed4f, 0x1, 0x0);
        gbc.writeMem(0x9e68, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x9b, gbc.a());
        EXPECT(0x72, gbc.b());
        EXPECT(0x42, gbc.c());
        EXPECT(0x51, gbc.d());
        EXPECT(0xdb, gbc.e());
        EXPECT(0xed, gbc.h());
        EXPECT(0x4f, gbc.l());
        EXPECT(0xece7, gbc.sp());
        EXPECT(0x9e6a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9e68));
        EXPECT(0x8c, gbc.readMem(0x9e69));
        // CB 8C 03D9
        gbc.setState(0xb787, 0x8d84, 0xdaf0, 0x73a1, 0x4cdc, 0xb558, 0x1, 0x0);
        gbc.writeMem(0xb787, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xda, gbc.a());
        EXPECT(0x73, gbc.b());
        EXPECT(0xa1, gbc.c());
        EXPECT(0x4c, gbc.d());
        EXPECT(0xdc, gbc.e());
        EXPECT(0xb5, gbc.h());
        EXPECT(0x58, gbc.l());
        EXPECT(0x8d84, gbc.sp());
        EXPECT(0xb789, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb787));
        EXPECT(0x8c, gbc.readMem(0xb788));
        // CB 8C 03DA
        gbc.setState(0x8121, 0x3a3, 0xd720, 0x7915, 0x39d4, 0x85bf, 0x0, 0x0);
        gbc.writeMem(0x8121, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xd7, gbc.a());
        EXPECT(0x79, gbc.b());
        EXPECT(0x15, gbc.c());
        EXPECT(0x39, gbc.d());
        EXPECT(0xd4, gbc.e());
        EXPECT(0x85, gbc.h());
        EXPECT(0xbf, gbc.l());
        EXPECT(0x3a3, gbc.sp());
        EXPECT(0x8123, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8121));
        EXPECT(0x8c, gbc.readMem(0x8122));
        // CB 8C 03DB
        gbc.setState(0x58a0, 0xd72e, 0x7040, 0xe3a6, 0xdf5c, 0x46f, 0x1, 0x1);
        gbc.writeMem(0x58a0, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x70, gbc.a());
        EXPECT(0xe3, gbc.b());
        EXPECT(0xa6, gbc.c());
        EXPECT(0xdf, gbc.d());
        EXPECT(0x5c, gbc.e());
        EXPECT(0x4, gbc.h());
        EXPECT(0x6f, gbc.l());
        EXPECT(0xd72e, gbc.sp());
        EXPECT(0x58a2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 03DC
        gbc.setState(0xe447, 0xc0e4, 0x1e00, 0x436, 0xd017, 0x5f31, 0x0, 0x0);
        gbc.writeMem(0xe447, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x1e, gbc.a());
        EXPECT(0x4, gbc.b());
        EXPECT(0x36, gbc.c());
        EXPECT(0xd0, gbc.d());
        EXPECT(0x17, gbc.e());
        EXPECT(0x5d, gbc.h());
        EXPECT(0x31, gbc.l());
        EXPECT(0xc0e4, gbc.sp());
        EXPECT(0xe449, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe447));
        EXPECT(0x8c, gbc.readMem(0xe448));
        // CB 8C 03DD
        gbc.setState(0x911a, 0xb046, 0x20c0, 0x7a6f, 0x2132, 0x5dc2, 0x1, 0x1);
        gbc.writeMem(0x911a, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x20, gbc.a());
        EXPECT(0x7a, gbc.b());
        EXPECT(0x6f, gbc.c());
        EXPECT(0x21, gbc.d());
        EXPECT(0x32, gbc.e());
        EXPECT(0x5d, gbc.h());
        EXPECT(0xc2, gbc.l());
        EXPECT(0xb046, gbc.sp());
        EXPECT(0x911c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x911a));
        EXPECT(0x8c, gbc.readMem(0x911b));
        // CB 8C 03DE
        gbc.setState(0xbb7a, 0xa482, 0xc300, 0xcb01, 0xb184, 0xd161, 0x1, 0x0);
        gbc.writeMem(0xbb7a, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xc3, gbc.a());
        EXPECT(0xcb, gbc.b());
        EXPECT(0x1, gbc.c());
        EXPECT(0xb1, gbc.d());
        EXPECT(0x84, gbc.e());
        EXPECT(0xd1, gbc.h());
        EXPECT(0x61, gbc.l());
        EXPECT(0xa482, gbc.sp());
        EXPECT(0xbb7c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbb7a));
        EXPECT(0x8c, gbc.readMem(0xbb7b));
        // CB 8C 03DF
        gbc.setState(0x6ee6, 0x7602, 0xbea0, 0x5b48, 0x42ad, 0x9985, 0x1, 0x0);
        gbc.writeMem(0x6ee6, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xbe, gbc.a());
        EXPECT(0x5b, gbc.b());
        EXPECT(0x48, gbc.c());
        EXPECT(0x42, gbc.d());
        EXPECT(0xad, gbc.e());
        EXPECT(0x99, gbc.h());
        EXPECT(0x85, gbc.l());
        EXPECT(0x7602, gbc.sp());
        EXPECT(0x6ee8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 03E0
        gbc.setState(0xc63f, 0x6e00, 0x89a0, 0xb78, 0xf459, 0xd3ff, 0x1, 0x0);
        gbc.writeMem(0xc63f, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x89, gbc.a());
        EXPECT(0xb, gbc.b());
        EXPECT(0x78, gbc.c());
        EXPECT(0xf4, gbc.d());
        EXPECT(0x59, gbc.e());
        EXPECT(0xd1, gbc.h());
        EXPECT(0xff, gbc.l());
        EXPECT(0x6e00, gbc.sp());
        EXPECT(0xc641, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc63f));
        EXPECT(0x8c, gbc.readMem(0xc640));
        // CB 8C 03E1
        gbc.setState(0xe073, 0xc18, 0x4890, 0x7583, 0x92c3, 0xf2a5, 0x0, 0x0);
        gbc.writeMem(0xe073, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x48, gbc.a());
        EXPECT(0x75, gbc.b());
        EXPECT(0x83, gbc.c());
        EXPECT(0x92, gbc.d());
        EXPECT(0xc3, gbc.e());
        EXPECT(0xf0, gbc.h());
        EXPECT(0xa5, gbc.l());
        EXPECT(0xc18, gbc.sp());
        EXPECT(0xe075, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe073));
        EXPECT(0x8c, gbc.readMem(0xe074));
        // CB 8C 03E2
        gbc.setState(0x690c, 0xb3b3, 0x6f80, 0x494d, 0x9a1f, 0xd178, 0x1, 0x0);
        gbc.writeMem(0x690c, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x6f, gbc.a());
        EXPECT(0x49, gbc.b());
        EXPECT(0x4d, gbc.c());
        EXPECT(0x9a, gbc.d());
        EXPECT(0x1f, gbc.e());
        EXPECT(0xd1, gbc.h());
        EXPECT(0x78, gbc.l());
        EXPECT(0xb3b3, gbc.sp());
        EXPECT(0x690e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 03E3
        gbc.setState(0xa901, 0x4f22, 0xc0f0, 0xe0a9, 0x9e64, 0x86fa, 0x0, 0x1);
        gbc.writeMem(0xa901, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xc0, gbc.a());
        EXPECT(0xe0, gbc.b());
        EXPECT(0xa9, gbc.c());
        EXPECT(0x9e, gbc.d());
        EXPECT(0x64, gbc.e());
        EXPECT(0x84, gbc.h());
        EXPECT(0xfa, gbc.l());
        EXPECT(0x4f22, gbc.sp());
        EXPECT(0xa903, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa901));
        EXPECT(0x8c, gbc.readMem(0xa902));
        // CB 8C 03E4
        gbc.setState(0x5772, 0x7206, 0xbee0, 0x1071, 0x7c5f, 0x5a57, 0x1, 0x1);
        gbc.writeMem(0x5772, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0xbe, gbc.a());
        EXPECT(0x10, gbc.b());
        EXPECT(0x71, gbc.c());
        EXPECT(0x7c, gbc.d());
        EXPECT(0x5f, gbc.e());
        EXPECT(0x58, gbc.h());
        EXPECT(0x57, gbc.l());
        EXPECT(0x7206, gbc.sp());
        EXPECT(0x5774, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 8C 03E5
        gbc.setState(0x510c, 0x5285, 0x45d0, 0x6e5a, 0x4caf, 0xd7ae, 0x1, 0x1);
        gbc.writeMem(0x510c, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x45, gbc.a());
        EXPECT(0x6e, gbc.b());
        EXPECT(0x5a, gbc.c());
        EXPECT(0x4c, gbc.d());
        EXPECT(0xaf, gbc.e());
        EXPECT(0xd5, gbc.h());
        EXPECT(0xae, gbc.l());
        EXPECT(0x5285, gbc.sp());
        EXPECT(0x510e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 8C 03E6
        gbc.setState(0xe0f4, 0xd57a, 0x7940, 0xb002, 0x65eb, 0x771b, 0x0, 0x0);
        gbc.writeMem(0xe0f4, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x79, gbc.a());
        EXPECT(0xb0, gbc.b());
        EXPECT(0x2, gbc.c());
        EXPECT(0x65, gbc.d());
        EXPECT(0xeb, gbc.e());
        EXPECT(0x75, gbc.h());
        EXPECT(0x1b, gbc.l());
        EXPECT(0xd57a, gbc.sp());
        EXPECT(0xe0f6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe0f4));
        EXPECT(0x8c, gbc.readMem(0xe0f5));
        // CB 8C 03E7
        gbc.setState(0x5832, 0x7c7e, 0x8530, 0xf72d, 0xaffc, 0xc700, 0x0, 0x1);
        gbc.writeMem(0x5832, { 0xcb, 0x8c });
        gbc.step();
        EXPECT(0x85, gbc.a());
        EXPECT(0xf7, gbc.b());
        EXPECT(0x2d, gbc.c());
        EXPECT(0xaf, gbc.d());
        EXPECT(0xfc, gbc.e());
        EXPECT(0xc5, gbc.h());
        EXPECT(0x0, gbc.l());
        EXPECT(0x7c7e, gbc.sp());
        EXPECT(0x5834, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
    }
