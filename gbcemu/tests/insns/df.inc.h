    TEST(gbcemu, opcode_df) {
        GBCEmu gbc{"", nullptr};
        uint8_t cartridge[0x8000];
        cartridge[0x149] = 0x02; // 8kb external RAM
        gbc.loadCartridge(new FlashGamePak(cartridge));
        // DF 0000
        gbc.setState(0xb121, 0xbfb1, 0x5c00, 0xc952, 0xecfc, 0xd9a5, 0x1, 0x0);
        gbc.writeMem(0xb121, { 0xdf });
        gbc.writeMem(0xbfaf, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x5c, gbc.a());
        EXPECT(0xc9, gbc.b());
        EXPECT(0x52, gbc.c());
        EXPECT(0xec, gbc.d());
        EXPECT(0xfc, gbc.e());
        EXPECT(0xd9, gbc.h());
        EXPECT(0xa5, gbc.l());
        EXPECT(0xbfaf, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0xb121));
        EXPECT(0x22, gbc.readMem(0xbfaf));
        EXPECT(0xb1, gbc.readMem(0xbfb0));
        // DF 0002
        gbc.setState(0x5be3, 0x98ba, 0xd90, 0xfb5b, 0xb95f, 0x6d95, 0x1, 0x0);
        gbc.writeMem(0x5be3, { 0xdf });
        gbc.writeMem(0x98b8, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xd, gbc.a());
        EXPECT(0xfb, gbc.b());
        EXPECT(0x5b, gbc.c());
        EXPECT(0xb9, gbc.d());
        EXPECT(0x5f, gbc.e());
        EXPECT(0x6d, gbc.h());
        EXPECT(0x95, gbc.l());
        EXPECT(0x98b8, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xe4, gbc.readMem(0x98b8));
        EXPECT(0x5b, gbc.readMem(0x98b9));
        // DF 0004
        gbc.setState(0x451a, 0xded7, 0x1b90, 0x1465, 0x8931, 0x4bb8, 0x1, 0x0);
        gbc.writeMem(0x451a, { 0xdf });
        gbc.writeMem(0xded5, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x1b, gbc.a());
        EXPECT(0x14, gbc.b());
        EXPECT(0x65, gbc.c());
        EXPECT(0x89, gbc.d());
        EXPECT(0x31, gbc.e());
        EXPECT(0x4b, gbc.h());
        EXPECT(0xb8, gbc.l());
        EXPECT(0xded5, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x1b, gbc.readMem(0xded5));
        EXPECT(0x45, gbc.readMem(0xded6));
        // DF 0006
        gbc.setState(0x5610, 0xd1bf, 0x65b0, 0xb018, 0xb9fc, 0xf92d, 0x0, 0x1);
        gbc.writeMem(0x5610, { 0xdf });
        gbc.writeMem(0xd1bd, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x65, gbc.a());
        EXPECT(0xb0, gbc.b());
        EXPECT(0x18, gbc.c());
        EXPECT(0xb9, gbc.d());
        EXPECT(0xfc, gbc.e());
        EXPECT(0xf9, gbc.h());
        EXPECT(0x2d, gbc.l());
        EXPECT(0xd1bd, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x11, gbc.readMem(0xd1bd));
        EXPECT(0x56, gbc.readMem(0xd1be));
        // DF 0009
        gbc.setState(0x2dff, 0xab4b, 0x3380, 0xd315, 0x1144, 0x1eda, 0x0, 0x1);
        gbc.writeMem(0x2dff, { 0xdf });
        gbc.writeMem(0xab49, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x33, gbc.a());
        EXPECT(0xd3, gbc.b());
        EXPECT(0x15, gbc.c());
        EXPECT(0x11, gbc.d());
        EXPECT(0x44, gbc.e());
        EXPECT(0x1e, gbc.h());
        EXPECT(0xda, gbc.l());
        EXPECT(0xab49, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x0, gbc.readMem(0xab49));
        EXPECT(0x2e, gbc.readMem(0xab4a));
        // DF 000A
        gbc.setState(0x3dff, 0xf085, 0xc060, 0x4333, 0xe4a5, 0xe82, 0x0, 0x0);
        gbc.writeMem(0x3dff, { 0xdf });
        gbc.writeMem(0xf083, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xc0, gbc.a());
        EXPECT(0x43, gbc.b());
        EXPECT(0x33, gbc.c());
        EXPECT(0xe4, gbc.d());
        EXPECT(0xa5, gbc.e());
        EXPECT(0xe, gbc.h());
        EXPECT(0x82, gbc.l());
        EXPECT(0xf083, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x0, gbc.readMem(0xf083));
        EXPECT(0x3e, gbc.readMem(0xf084));
        // DF 000D
        gbc.setState(0xbc60, 0x91d4, 0x460, 0xc761, 0xc4d2, 0x9627, 0x1, 0x0);
        gbc.writeMem(0x91d2, { 0x0, 0x0 });
        gbc.writeMem(0xbc60, { 0xdf });
        gbc.step();
        EXPECT(0x4, gbc.a());
        EXPECT(0xc7, gbc.b());
        EXPECT(0x61, gbc.c());
        EXPECT(0xc4, gbc.d());
        EXPECT(0xd2, gbc.e());
        EXPECT(0x96, gbc.h());
        EXPECT(0x27, gbc.l());
        EXPECT(0x91d2, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x61, gbc.readMem(0x91d2));
        EXPECT(0xbc, gbc.readMem(0x91d3));
        EXPECT(0xdf, gbc.readMem(0xbc60));
        // DF 000E
        gbc.setState(0x8ed, 0xfea3, 0x3740, 0xfe3e, 0x97cd, 0x2e02, 0x1, 0x0);
        gbc.writeMem(0x8ed, { 0xdf });
        gbc.writeMem(0xfea1, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x37, gbc.a());
        EXPECT(0xfe, gbc.b());
        EXPECT(0x3e, gbc.c());
        EXPECT(0x97, gbc.d());
        EXPECT(0xcd, gbc.e());
        EXPECT(0x2e, gbc.h());
        EXPECT(0x2, gbc.l());
        EXPECT(0xfea1, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xee, gbc.readMem(0xfea1));
        EXPECT(0x8, gbc.readMem(0xfea2));
        // DF 000F
        gbc.setState(0xce8, 0xf1e5, 0x19d0, 0x877, 0xb1f6, 0xf63d, 0x0, 0x1);
        gbc.writeMem(0xce8, { 0xdf });
        gbc.writeMem(0xf1e3, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x19, gbc.a());
        EXPECT(0x8, gbc.b());
        EXPECT(0x77, gbc.c());
        EXPECT(0xb1, gbc.d());
        EXPECT(0xf6, gbc.e());
        EXPECT(0xf6, gbc.h());
        EXPECT(0x3d, gbc.l());
        EXPECT(0xf1e3, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xe9, gbc.readMem(0xf1e3));
        EXPECT(0xc, gbc.readMem(0xf1e4));
        // DF 0014
        gbc.setState(0x7067, 0xa7d4, 0xc700, 0x9394, 0x9a6b, 0x754d, 0x1, 0x1);
        gbc.writeMem(0x7067, { 0xdf });
        gbc.writeMem(0xa7d2, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xc7, gbc.a());
        EXPECT(0x93, gbc.b());
        EXPECT(0x94, gbc.c());
        EXPECT(0x9a, gbc.d());
        EXPECT(0x6b, gbc.e());
        EXPECT(0x75, gbc.h());
        EXPECT(0x4d, gbc.l());
        EXPECT(0xa7d2, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x68, gbc.readMem(0xa7d2));
        EXPECT(0x70, gbc.readMem(0xa7d3));
        // DF 0015
        gbc.setState(0xee52, 0xc23e, 0xf810, 0x6725, 0xd190, 0x3efd, 0x0, 0x0);
        gbc.writeMem(0xc23c, { 0x0, 0x0 });
        gbc.writeMem(0xee52, { 0xdf });
        gbc.step();
        EXPECT(0xf8, gbc.a());
        EXPECT(0x67, gbc.b());
        EXPECT(0x25, gbc.c());
        EXPECT(0xd1, gbc.d());
        EXPECT(0x90, gbc.e());
        EXPECT(0x3e, gbc.h());
        EXPECT(0xfd, gbc.l());
        EXPECT(0xc23c, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x53, gbc.readMem(0xc23c));
        EXPECT(0xee, gbc.readMem(0xc23d));
        EXPECT(0xdf, gbc.readMem(0xee52));
        // DF 0017
        gbc.setState(0x5b78, 0xcadc, 0xacd0, 0x60ae, 0xe4e, 0xcdfa, 0x1, 0x0);
        gbc.writeMem(0x5b78, { 0xdf });
        gbc.writeMem(0xcada, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xac, gbc.a());
        EXPECT(0x60, gbc.b());
        EXPECT(0xae, gbc.c());
        EXPECT(0xe, gbc.d());
        EXPECT(0x4e, gbc.e());
        EXPECT(0xcd, gbc.h());
        EXPECT(0xfa, gbc.l());
        EXPECT(0xcada, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x79, gbc.readMem(0xcada));
        EXPECT(0x5b, gbc.readMem(0xcadb));
        // DF 001A
        gbc.setState(0x5501, 0xe86c, 0x7020, 0xb1e2, 0x1122, 0xc37c, 0x0, 0x0);
        gbc.writeMem(0x5501, { 0xdf });
        gbc.writeMem(0xe86a, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x70, gbc.a());
        EXPECT(0xb1, gbc.b());
        EXPECT(0xe2, gbc.c());
        EXPECT(0x11, gbc.d());
        EXPECT(0x22, gbc.e());
        EXPECT(0xc3, gbc.h());
        EXPECT(0x7c, gbc.l());
        EXPECT(0xe86a, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x2, gbc.readMem(0xe86a));
        EXPECT(0x55, gbc.readMem(0xe86b));
        // DF 001C
        gbc.setState(0xe9bf, 0x8c20, 0xb660, 0xe1fc, 0xb47e, 0xb7f5, 0x1, 0x1);
        gbc.writeMem(0x8c1e, { 0x0, 0x0 });
        gbc.writeMem(0xe9bf, { 0xdf });
        gbc.step();
        EXPECT(0xb6, gbc.a());
        EXPECT(0xe1, gbc.b());
        EXPECT(0xfc, gbc.c());
        EXPECT(0xb4, gbc.d());
        EXPECT(0x7e, gbc.e());
        EXPECT(0xb7, gbc.h());
        EXPECT(0xf5, gbc.l());
        EXPECT(0x8c1e, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xc0, gbc.readMem(0x8c1e));
        EXPECT(0xe9, gbc.readMem(0x8c1f));
        EXPECT(0xdf, gbc.readMem(0xe9bf));
        // DF 001E
        gbc.setState(0xc53, 0xdb1f, 0x1880, 0x22a2, 0x7484, 0xc402, 0x1, 0x1);
        gbc.writeMem(0xc53, { 0xdf });
        gbc.writeMem(0xdb1d, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x18, gbc.a());
        EXPECT(0x22, gbc.b());
        EXPECT(0xa2, gbc.c());
        EXPECT(0x74, gbc.d());
        EXPECT(0x84, gbc.e());
        EXPECT(0xc4, gbc.h());
        EXPECT(0x2, gbc.l());
        EXPECT(0xdb1d, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x54, gbc.readMem(0xdb1d));
        EXPECT(0xc, gbc.readMem(0xdb1e));
        // DF 001F
        gbc.setState(0xdf72, 0xe781, 0x8500, 0x79e7, 0xa812, 0xf404, 0x1, 0x1);
        gbc.writeMem(0xdf72, { 0xdf });
        gbc.writeMem(0xe77f, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x85, gbc.a());
        EXPECT(0x79, gbc.b());
        EXPECT(0xe7, gbc.c());
        EXPECT(0xa8, gbc.d());
        EXPECT(0x12, gbc.e());
        EXPECT(0xf4, gbc.h());
        EXPECT(0x4, gbc.l());
        EXPECT(0xe77f, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0xdf72));
        EXPECT(0x73, gbc.readMem(0xe77f));
        EXPECT(0xdf, gbc.readMem(0xe780));
        // DF 0027
        gbc.setState(0x4527, 0xaa50, 0xab20, 0xcfd0, 0x8ca1, 0xfa17, 0x1, 0x1);
        gbc.writeMem(0x4527, { 0xdf });
        gbc.writeMem(0xaa4e, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xab, gbc.a());
        EXPECT(0xcf, gbc.b());
        EXPECT(0xd0, gbc.c());
        EXPECT(0x8c, gbc.d());
        EXPECT(0xa1, gbc.e());
        EXPECT(0xfa, gbc.h());
        EXPECT(0x17, gbc.l());
        EXPECT(0xaa4e, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x28, gbc.readMem(0xaa4e));
        EXPECT(0x45, gbc.readMem(0xaa4f));
        // DF 0028
        gbc.setState(0x29e2, 0xff4a, 0x5670, 0x1fad, 0xb15e, 0xc58b, 0x1, 0x1);
        gbc.writeMem(0x29e2, { 0xdf });
        gbc.writeMem(0xff48, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x56, gbc.a());
        EXPECT(0x1f, gbc.b());
        EXPECT(0xad, gbc.c());
        EXPECT(0xb1, gbc.d());
        EXPECT(0x5e, gbc.e());
        EXPECT(0xc5, gbc.h());
        EXPECT(0x8b, gbc.l());
        EXPECT(0xff48, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xe3, gbc.readMem(0xff48));
        EXPECT(0x29, gbc.readMem(0xff49));
        // DF 0029
        gbc.setState(0x22ba, 0xe231, 0xe0c0, 0xe71a, 0xf769, 0xf5c2, 0x0, 0x1);
        gbc.writeMem(0x22ba, { 0xdf });
        gbc.writeMem(0xe22f, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xe0, gbc.a());
        EXPECT(0xe7, gbc.b());
        EXPECT(0x1a, gbc.c());
        EXPECT(0xf7, gbc.d());
        EXPECT(0x69, gbc.e());
        EXPECT(0xf5, gbc.h());
        EXPECT(0xc2, gbc.l());
        EXPECT(0xe22f, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xbb, gbc.readMem(0xe22f));
        EXPECT(0x22, gbc.readMem(0xe230));
        // DF 002C
        gbc.setState(0x9e53, 0xc3e6, 0x9a70, 0xc866, 0xb36, 0xa813, 0x1, 0x0);
        gbc.writeMem(0x9e53, { 0xdf });
        gbc.writeMem(0xc3e4, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x9a, gbc.a());
        EXPECT(0xc8, gbc.b());
        EXPECT(0x66, gbc.c());
        EXPECT(0xb, gbc.d());
        EXPECT(0x36, gbc.e());
        EXPECT(0xa8, gbc.h());
        EXPECT(0x13, gbc.l());
        EXPECT(0xc3e4, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0x9e53));
        EXPECT(0x54, gbc.readMem(0xc3e4));
        EXPECT(0x9e, gbc.readMem(0xc3e5));
        // DF 002E
        gbc.setState(0x80d0, 0xd012, 0x850, 0xcf62, 0xca52, 0x2bd9, 0x0, 0x0);
        gbc.writeMem(0x80d0, { 0xdf });
        gbc.writeMem(0xd010, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x8, gbc.a());
        EXPECT(0xcf, gbc.b());
        EXPECT(0x62, gbc.c());
        EXPECT(0xca, gbc.d());
        EXPECT(0x52, gbc.e());
        EXPECT(0x2b, gbc.h());
        EXPECT(0xd9, gbc.l());
        EXPECT(0xd010, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0x80d0));
        EXPECT(0xd1, gbc.readMem(0xd010));
        EXPECT(0x80, gbc.readMem(0xd011));
        // DF 0030
        gbc.setState(0xb6b5, 0xb65d, 0x36b0, 0x2bfe, 0xd4d0, 0x3531, 0x0, 0x1);
        gbc.writeMem(0xb65b, { 0x0, 0x0 });
        gbc.writeMem(0xb6b5, { 0xdf });
        gbc.step();
        EXPECT(0x36, gbc.a());
        EXPECT(0x2b, gbc.b());
        EXPECT(0xfe, gbc.c());
        EXPECT(0xd4, gbc.d());
        EXPECT(0xd0, gbc.e());
        EXPECT(0x35, gbc.h());
        EXPECT(0x31, gbc.l());
        EXPECT(0xb65b, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xb6, gbc.readMem(0xb65b));
        EXPECT(0xb6, gbc.readMem(0xb65c));
        EXPECT(0xdf, gbc.readMem(0xb6b5));
        // DF 0032
        gbc.setState(0x617d, 0x9deb, 0xac90, 0x306, 0xb0a9, 0xd3ad, 0x0, 0x0);
        gbc.writeMem(0x617d, { 0xdf });
        gbc.writeMem(0x9de9, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xac, gbc.a());
        EXPECT(0x3, gbc.b());
        EXPECT(0x6, gbc.c());
        EXPECT(0xb0, gbc.d());
        EXPECT(0xa9, gbc.e());
        EXPECT(0xd3, gbc.h());
        EXPECT(0xad, gbc.l());
        EXPECT(0x9de9, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x7e, gbc.readMem(0x9de9));
        EXPECT(0x61, gbc.readMem(0x9dea));
        // DF 0034
        gbc.setState(0x9633, 0x938f, 0x6110, 0x67d9, 0x588c, 0xab57, 0x0, 0x1);
        gbc.writeMem(0x938d, { 0x0, 0x0 });
        gbc.writeMem(0x9633, { 0xdf });
        gbc.step();
        EXPECT(0x61, gbc.a());
        EXPECT(0x67, gbc.b());
        EXPECT(0xd9, gbc.c());
        EXPECT(0x58, gbc.d());
        EXPECT(0x8c, gbc.e());
        EXPECT(0xab, gbc.h());
        EXPECT(0x57, gbc.l());
        EXPECT(0x938d, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x34, gbc.readMem(0x938d));
        EXPECT(0x96, gbc.readMem(0x938e));
        EXPECT(0xdf, gbc.readMem(0x9633));
        // DF 0036
        gbc.setState(0xeef8, 0xad0d, 0xea20, 0x37c1, 0xabd7, 0x7c83, 0x1, 0x1);
        gbc.writeMem(0xad0b, { 0x0, 0x0 });
        gbc.writeMem(0xeef8, { 0xdf });
        gbc.step();
        EXPECT(0xea, gbc.a());
        EXPECT(0x37, gbc.b());
        EXPECT(0xc1, gbc.c());
        EXPECT(0xab, gbc.d());
        EXPECT(0xd7, gbc.e());
        EXPECT(0x7c, gbc.h());
        EXPECT(0x83, gbc.l());
        EXPECT(0xad0b, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xf9, gbc.readMem(0xad0b));
        EXPECT(0xee, gbc.readMem(0xad0c));
        EXPECT(0xdf, gbc.readMem(0xeef8));
        // DF 0039
        gbc.setState(0x2eae, 0xa8c1, 0xc0f0, 0xf12b, 0x2751, 0x556f, 0x1, 0x1);
        gbc.writeMem(0x2eae, { 0xdf });
        gbc.writeMem(0xa8bf, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xc0, gbc.a());
        EXPECT(0xf1, gbc.b());
        EXPECT(0x2b, gbc.c());
        EXPECT(0x27, gbc.d());
        EXPECT(0x51, gbc.e());
        EXPECT(0x55, gbc.h());
        EXPECT(0x6f, gbc.l());
        EXPECT(0xa8bf, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xa8bf));
        EXPECT(0x2e, gbc.readMem(0xa8c0));
        // DF 003A
        gbc.setState(0xef1, 0x824d, 0x4550, 0xb08a, 0x8f55, 0x3cb4, 0x0, 0x0);
        gbc.writeMem(0xef1, { 0xdf });
        gbc.writeMem(0x824b, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x45, gbc.a());
        EXPECT(0xb0, gbc.b());
        EXPECT(0x8a, gbc.c());
        EXPECT(0x8f, gbc.d());
        EXPECT(0x55, gbc.e());
        EXPECT(0x3c, gbc.h());
        EXPECT(0xb4, gbc.l());
        EXPECT(0x824b, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xf2, gbc.readMem(0x824b));
        EXPECT(0xe, gbc.readMem(0x824c));
        // DF 003B
        gbc.setState(0xb2f, 0x8cd2, 0xa1f0, 0x2168, 0x6b88, 0xd2eb, 0x1, 0x0);
        gbc.writeMem(0xb2f, { 0xdf });
        gbc.writeMem(0x8cd0, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xa1, gbc.a());
        EXPECT(0x21, gbc.b());
        EXPECT(0x68, gbc.c());
        EXPECT(0x6b, gbc.d());
        EXPECT(0x88, gbc.e());
        EXPECT(0xd2, gbc.h());
        EXPECT(0xeb, gbc.l());
        EXPECT(0x8cd0, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x30, gbc.readMem(0x8cd0));
        EXPECT(0xb, gbc.readMem(0x8cd1));
        // DF 003C
        gbc.setState(0xb8fa, 0x9732, 0xb720, 0x2a85, 0x20aa, 0xd869, 0x1, 0x0);
        gbc.writeMem(0x9730, { 0x0, 0x0 });
        gbc.writeMem(0xb8fa, { 0xdf });
        gbc.step();
        EXPECT(0xb7, gbc.a());
        EXPECT(0x2a, gbc.b());
        EXPECT(0x85, gbc.c());
        EXPECT(0x20, gbc.d());
        EXPECT(0xaa, gbc.e());
        EXPECT(0xd8, gbc.h());
        EXPECT(0x69, gbc.l());
        EXPECT(0x9730, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xfb, gbc.readMem(0x9730));
        EXPECT(0xb8, gbc.readMem(0x9731));
        EXPECT(0xdf, gbc.readMem(0xb8fa));
        // DF 0041
        gbc.setState(0x720d, 0xe498, 0x2070, 0x9855, 0x1ca2, 0xb82a, 0x0, 0x1);
        gbc.writeMem(0x720d, { 0xdf });
        gbc.writeMem(0xe496, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x20, gbc.a());
        EXPECT(0x98, gbc.b());
        EXPECT(0x55, gbc.c());
        EXPECT(0x1c, gbc.d());
        EXPECT(0xa2, gbc.e());
        EXPECT(0xb8, gbc.h());
        EXPECT(0x2a, gbc.l());
        EXPECT(0xe496, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xe, gbc.readMem(0xe496));
        EXPECT(0x72, gbc.readMem(0xe497));
        // DF 0042
        gbc.setState(0xdc37, 0xecec, 0xf3e0, 0x4759, 0xb6ee, 0x80b2, 0x0, 0x0);
        gbc.writeMem(0xdc37, { 0xdf });
        gbc.writeMem(0xecea, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xf3, gbc.a());
        EXPECT(0x47, gbc.b());
        EXPECT(0x59, gbc.c());
        EXPECT(0xb6, gbc.d());
        EXPECT(0xee, gbc.e());
        EXPECT(0x80, gbc.h());
        EXPECT(0xb2, gbc.l());
        EXPECT(0xecea, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0xdc37));
        EXPECT(0x38, gbc.readMem(0xecea));
        EXPECT(0xdc, gbc.readMem(0xeceb));
        // DF 0043
        gbc.setState(0xa46d, 0x9a86, 0xb110, 0x6ec, 0x62af, 0x8dd9, 0x0, 0x0);
        gbc.writeMem(0x9a84, { 0x0, 0x0 });
        gbc.writeMem(0xa46d, { 0xdf });
        gbc.step();
        EXPECT(0xb1, gbc.a());
        EXPECT(0x6, gbc.b());
        EXPECT(0xec, gbc.c());
        EXPECT(0x62, gbc.d());
        EXPECT(0xaf, gbc.e());
        EXPECT(0x8d, gbc.h());
        EXPECT(0xd9, gbc.l());
        EXPECT(0x9a84, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x6e, gbc.readMem(0x9a84));
        EXPECT(0xa4, gbc.readMem(0x9a85));
        EXPECT(0xdf, gbc.readMem(0xa46d));
        // DF 0044
        gbc.setState(0x52c, 0x97fb, 0x36e0, 0xe7c7, 0x5173, 0x9647, 0x1, 0x1);
        gbc.writeMem(0x52c, { 0xdf });
        gbc.writeMem(0x97f9, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x36, gbc.a());
        EXPECT(0xe7, gbc.b());
        EXPECT(0xc7, gbc.c());
        EXPECT(0x51, gbc.d());
        EXPECT(0x73, gbc.e());
        EXPECT(0x96, gbc.h());
        EXPECT(0x47, gbc.l());
        EXPECT(0x97f9, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x2d, gbc.readMem(0x97f9));
        EXPECT(0x5, gbc.readMem(0x97fa));
        // DF 0047
        gbc.setState(0x3b5, 0xff4e, 0xf90, 0xeb55, 0x7a64, 0x592c, 0x1, 0x0);
        gbc.writeMem(0x3b5, { 0xdf });
        gbc.writeMem(0xff4c, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xf, gbc.a());
        EXPECT(0xeb, gbc.b());
        EXPECT(0x55, gbc.c());
        EXPECT(0x7a, gbc.d());
        EXPECT(0x64, gbc.e());
        EXPECT(0x59, gbc.h());
        EXPECT(0x2c, gbc.l());
        EXPECT(0xff4c, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xb6, gbc.readMem(0xff4c));
        EXPECT(0x3, gbc.readMem(0xff4d));
        // DF 0049
        gbc.setState(0x2e94, 0x8b42, 0xd1e0, 0x47ff, 0x3238, 0x2e37, 0x1, 0x0);
        gbc.writeMem(0x2e94, { 0xdf });
        gbc.writeMem(0x8b40, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xd1, gbc.a());
        EXPECT(0x47, gbc.b());
        EXPECT(0xff, gbc.c());
        EXPECT(0x32, gbc.d());
        EXPECT(0x38, gbc.e());
        EXPECT(0x2e, gbc.h());
        EXPECT(0x37, gbc.l());
        EXPECT(0x8b40, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x95, gbc.readMem(0x8b40));
        EXPECT(0x2e, gbc.readMem(0x8b41));
        // DF 004D
        gbc.setState(0x2be4, 0xf41b, 0x52c0, 0x4f82, 0xf013, 0x6594, 0x1, 0x1);
        gbc.writeMem(0x2be4, { 0xdf });
        gbc.writeMem(0xf419, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x52, gbc.a());
        EXPECT(0x4f, gbc.b());
        EXPECT(0x82, gbc.c());
        EXPECT(0xf0, gbc.d());
        EXPECT(0x13, gbc.e());
        EXPECT(0x65, gbc.h());
        EXPECT(0x94, gbc.l());
        EXPECT(0xf419, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xe5, gbc.readMem(0xf419));
        EXPECT(0x2b, gbc.readMem(0xf41a));
        // DF 0051
        gbc.setState(0x8ce7, 0x9227, 0x34c0, 0x4e5, 0x295a, 0x9de9, 0x1, 0x0);
        gbc.writeMem(0x8ce7, { 0xdf });
        gbc.writeMem(0x9225, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x34, gbc.a());
        EXPECT(0x4, gbc.b());
        EXPECT(0xe5, gbc.c());
        EXPECT(0x29, gbc.d());
        EXPECT(0x5a, gbc.e());
        EXPECT(0x9d, gbc.h());
        EXPECT(0xe9, gbc.l());
        EXPECT(0x9225, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0x8ce7));
        EXPECT(0xe8, gbc.readMem(0x9225));
        EXPECT(0x8c, gbc.readMem(0x9226));
        // DF 0052
        gbc.setState(0x855b, 0xbccb, 0x8dd0, 0xca47, 0xd8b4, 0x4591, 0x0, 0x0);
        gbc.writeMem(0x855b, { 0xdf });
        gbc.writeMem(0xbcc9, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x8d, gbc.a());
        EXPECT(0xca, gbc.b());
        EXPECT(0x47, gbc.c());
        EXPECT(0xd8, gbc.d());
        EXPECT(0xb4, gbc.e());
        EXPECT(0x45, gbc.h());
        EXPECT(0x91, gbc.l());
        EXPECT(0xbcc9, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0x855b));
        EXPECT(0x5c, gbc.readMem(0xbcc9));
        EXPECT(0x85, gbc.readMem(0xbcca));
        // DF 0058
        gbc.setState(0xc8b6, 0xe3a8, 0xfa70, 0x9850, 0xa840, 0xaa2c, 0x1, 0x1);
        gbc.writeMem(0xc8b6, { 0xdf });
        gbc.writeMem(0xe3a6, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xfa, gbc.a());
        EXPECT(0x98, gbc.b());
        EXPECT(0x50, gbc.c());
        EXPECT(0xa8, gbc.d());
        EXPECT(0x40, gbc.e());
        EXPECT(0xaa, gbc.h());
        EXPECT(0x2c, gbc.l());
        EXPECT(0xe3a6, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0xc8b6));
        EXPECT(0xb7, gbc.readMem(0xe3a6));
        EXPECT(0xc8, gbc.readMem(0xe3a7));
        // DF 0059
        gbc.setState(0x2a08, 0xc08d, 0x1e90, 0x3f78, 0x5509, 0xf492, 0x1, 0x0);
        gbc.writeMem(0x2a08, { 0xdf });
        gbc.writeMem(0xc08b, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x1e, gbc.a());
        EXPECT(0x3f, gbc.b());
        EXPECT(0x78, gbc.c());
        EXPECT(0x55, gbc.d());
        EXPECT(0x9, gbc.e());
        EXPECT(0xf4, gbc.h());
        EXPECT(0x92, gbc.l());
        EXPECT(0xc08b, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x9, gbc.readMem(0xc08b));
        EXPECT(0x2a, gbc.readMem(0xc08c));
        // DF 005C
        gbc.setState(0x219d, 0xad26, 0x37b0, 0xb44b, 0xd13c, 0xd45e, 0x0, 0x0);
        gbc.writeMem(0x219d, { 0xdf });
        gbc.writeMem(0xad24, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x37, gbc.a());
        EXPECT(0xb4, gbc.b());
        EXPECT(0x4b, gbc.c());
        EXPECT(0xd1, gbc.d());
        EXPECT(0x3c, gbc.e());
        EXPECT(0xd4, gbc.h());
        EXPECT(0x5e, gbc.l());
        EXPECT(0xad24, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x9e, gbc.readMem(0xad24));
        EXPECT(0x21, gbc.readMem(0xad25));
        // DF 0060
        gbc.setState(0x16dc, 0xc335, 0x3de0, 0xefd0, 0xcb23, 0x779d, 0x1, 0x1);
        gbc.writeMem(0x16dc, { 0xdf });
        gbc.writeMem(0xc333, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x3d, gbc.a());
        EXPECT(0xef, gbc.b());
        EXPECT(0xd0, gbc.c());
        EXPECT(0xcb, gbc.d());
        EXPECT(0x23, gbc.e());
        EXPECT(0x77, gbc.h());
        EXPECT(0x9d, gbc.l());
        EXPECT(0xc333, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdd, gbc.readMem(0xc333));
        EXPECT(0x16, gbc.readMem(0xc334));
        // DF 0062
        gbc.setState(0x5ec4, 0xff77, 0xef0, 0x6f58, 0x5b12, 0xa02a, 0x0, 0x0);
        gbc.writeMem(0x5ec4, { 0xdf });
        gbc.writeMem(0xff75, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xe, gbc.a());
        EXPECT(0x6f, gbc.b());
        EXPECT(0x58, gbc.c());
        EXPECT(0x5b, gbc.d());
        EXPECT(0x12, gbc.e());
        EXPECT(0xa0, gbc.h());
        EXPECT(0x2a, gbc.l());
        EXPECT(0xff75, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xc5, gbc.readMem(0xff75));
        EXPECT(0x5e, gbc.readMem(0xff76));
        // DF 0063
        gbc.setState(0x9c00, 0xf83c, 0x4f80, 0x38fe, 0x8dce, 0x531e, 0x1, 0x1);
        gbc.writeMem(0x9c00, { 0xdf });
        gbc.writeMem(0xf83a, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x4f, gbc.a());
        EXPECT(0x38, gbc.b());
        EXPECT(0xfe, gbc.c());
        EXPECT(0x8d, gbc.d());
        EXPECT(0xce, gbc.e());
        EXPECT(0x53, gbc.h());
        EXPECT(0x1e, gbc.l());
        EXPECT(0xf83a, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0x9c00));
        EXPECT(0x1, gbc.readMem(0xf83a));
        EXPECT(0x9c, gbc.readMem(0xf83b));
        // DF 0066
        gbc.setState(0x9586, 0xd80a, 0xfab0, 0x1c4a, 0x43bf, 0x63e1, 0x0, 0x0);
        gbc.writeMem(0x9586, { 0xdf });
        gbc.writeMem(0xd808, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xfa, gbc.a());
        EXPECT(0x1c, gbc.b());
        EXPECT(0x4a, gbc.c());
        EXPECT(0x43, gbc.d());
        EXPECT(0xbf, gbc.e());
        EXPECT(0x63, gbc.h());
        EXPECT(0xe1, gbc.l());
        EXPECT(0xd808, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0x9586));
        EXPECT(0x87, gbc.readMem(0xd808));
        EXPECT(0x95, gbc.readMem(0xd809));
        // DF 0067
        gbc.setState(0xa4e5, 0xd99e, 0x7cf0, 0x933d, 0xa4a7, 0xb87, 0x0, 0x0);
        gbc.writeMem(0xa4e5, { 0xdf });
        gbc.writeMem(0xd99c, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x7c, gbc.a());
        EXPECT(0x93, gbc.b());
        EXPECT(0x3d, gbc.c());
        EXPECT(0xa4, gbc.d());
        EXPECT(0xa7, gbc.e());
        EXPECT(0xb, gbc.h());
        EXPECT(0x87, gbc.l());
        EXPECT(0xd99c, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0xa4e5));
        EXPECT(0xe6, gbc.readMem(0xd99c));
        EXPECT(0xa4, gbc.readMem(0xd99d));
        // DF 0069
        gbc.setState(0x7b99, 0xe84f, 0x4f10, 0x9d02, 0x4546, 0x223a, 0x1, 0x1);
        gbc.writeMem(0x7b99, { 0xdf });
        gbc.writeMem(0xe84d, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x4f, gbc.a());
        EXPECT(0x9d, gbc.b());
        EXPECT(0x2, gbc.c());
        EXPECT(0x45, gbc.d());
        EXPECT(0x46, gbc.e());
        EXPECT(0x22, gbc.h());
        EXPECT(0x3a, gbc.l());
        EXPECT(0xe84d, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x9a, gbc.readMem(0xe84d));
        EXPECT(0x7b, gbc.readMem(0xe84e));
        // DF 006A
        gbc.setState(0x6eee, 0xb3e5, 0x8260, 0x58f6, 0xb53d, 0x43d1, 0x0, 0x0);
        gbc.writeMem(0x6eee, { 0xdf });
        gbc.writeMem(0xb3e3, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x82, gbc.a());
        EXPECT(0x58, gbc.b());
        EXPECT(0xf6, gbc.c());
        EXPECT(0xb5, gbc.d());
        EXPECT(0x3d, gbc.e());
        EXPECT(0x43, gbc.h());
        EXPECT(0xd1, gbc.l());
        EXPECT(0xb3e3, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xef, gbc.readMem(0xb3e3));
        EXPECT(0x6e, gbc.readMem(0xb3e4));
        // DF 006B
        gbc.setState(0x6490, 0xac5d, 0xf80, 0xc1dc, 0xa51d, 0xc5f4, 0x0, 0x1);
        gbc.writeMem(0x6490, { 0xdf });
        gbc.writeMem(0xac5b, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xf, gbc.a());
        EXPECT(0xc1, gbc.b());
        EXPECT(0xdc, gbc.c());
        EXPECT(0xa5, gbc.d());
        EXPECT(0x1d, gbc.e());
        EXPECT(0xc5, gbc.h());
        EXPECT(0xf4, gbc.l());
        EXPECT(0xac5b, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x91, gbc.readMem(0xac5b));
        EXPECT(0x64, gbc.readMem(0xac5c));
        // DF 006D
        gbc.setState(0xd669, 0xfe57, 0x3390, 0x3262, 0xa2ff, 0x54c8, 0x0, 0x0);
        gbc.writeMem(0xd669, { 0xdf });
        gbc.writeMem(0xfe55, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x33, gbc.a());
        EXPECT(0x32, gbc.b());
        EXPECT(0x62, gbc.c());
        EXPECT(0xa2, gbc.d());
        EXPECT(0xff, gbc.e());
        EXPECT(0x54, gbc.h());
        EXPECT(0xc8, gbc.l());
        EXPECT(0xfe55, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0xd669));
        EXPECT(0x6a, gbc.readMem(0xfe55));
        EXPECT(0xd6, gbc.readMem(0xfe56));
        // DF 0072
        gbc.setState(0x2436, 0xa594, 0x97c0, 0x18c3, 0xf30c, 0x37fb, 0x1, 0x0);
        gbc.writeMem(0x2436, { 0xdf });
        gbc.writeMem(0xa592, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x97, gbc.a());
        EXPECT(0x18, gbc.b());
        EXPECT(0xc3, gbc.c());
        EXPECT(0xf3, gbc.d());
        EXPECT(0xc, gbc.e());
        EXPECT(0x37, gbc.h());
        EXPECT(0xfb, gbc.l());
        EXPECT(0xa592, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x37, gbc.readMem(0xa592));
        EXPECT(0x24, gbc.readMem(0xa593));
        // DF 0074
        gbc.setState(0x6855, 0xd419, 0x3240, 0x65a8, 0x96a1, 0xbe9f, 0x0, 0x1);
        gbc.writeMem(0x6855, { 0xdf });
        gbc.writeMem(0xd417, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x32, gbc.a());
        EXPECT(0x65, gbc.b());
        EXPECT(0xa8, gbc.c());
        EXPECT(0x96, gbc.d());
        EXPECT(0xa1, gbc.e());
        EXPECT(0xbe, gbc.h());
        EXPECT(0x9f, gbc.l());
        EXPECT(0xd417, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x56, gbc.readMem(0xd417));
        EXPECT(0x68, gbc.readMem(0xd418));
        // DF 0078
        gbc.setState(0xe684, 0xe158, 0xc710, 0xb0c0, 0xff3c, 0x241b, 0x1, 0x1);
        gbc.writeMem(0xe156, { 0x0, 0x0 });
        gbc.writeMem(0xe684, { 0xdf });
        gbc.step();
        EXPECT(0xc7, gbc.a());
        EXPECT(0xb0, gbc.b());
        EXPECT(0xc0, gbc.c());
        EXPECT(0xff, gbc.d());
        EXPECT(0x3c, gbc.e());
        EXPECT(0x24, gbc.h());
        EXPECT(0x1b, gbc.l());
        EXPECT(0xe156, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x85, gbc.readMem(0xe156));
        EXPECT(0xe6, gbc.readMem(0xe157));
        EXPECT(0xdf, gbc.readMem(0xe684));
        // DF 007C
        gbc.setState(0xdaa3, 0xec20, 0x2d80, 0x5191, 0x64dc, 0x4f4b, 0x0, 0x0);
        gbc.writeMem(0xdaa3, { 0xdf });
        gbc.writeMem(0xec1e, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x2d, gbc.a());
        EXPECT(0x51, gbc.b());
        EXPECT(0x91, gbc.c());
        EXPECT(0x64, gbc.d());
        EXPECT(0xdc, gbc.e());
        EXPECT(0x4f, gbc.h());
        EXPECT(0x4b, gbc.l());
        EXPECT(0xec1e, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0xdaa3));
        EXPECT(0xa4, gbc.readMem(0xec1e));
        EXPECT(0xda, gbc.readMem(0xec1f));
        // DF 007E
        gbc.setState(0x5b0, 0xd607, 0xe590, 0x92a1, 0xc205, 0xe7f, 0x0, 0x1);
        gbc.writeMem(0x5b0, { 0xdf });
        gbc.writeMem(0xd605, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xe5, gbc.a());
        EXPECT(0x92, gbc.b());
        EXPECT(0xa1, gbc.c());
        EXPECT(0xc2, gbc.d());
        EXPECT(0x5, gbc.e());
        EXPECT(0xe, gbc.h());
        EXPECT(0x7f, gbc.l());
        EXPECT(0xd605, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xb1, gbc.readMem(0xd605));
        EXPECT(0x5, gbc.readMem(0xd606));
        // DF 0085
        gbc.setState(0xed9e, 0xdc33, 0xaf0, 0x2c3, 0xd87d, 0x2593, 0x0, 0x0);
        gbc.writeMem(0xdc31, { 0x0, 0x0 });
        gbc.writeMem(0xed9e, { 0xdf });
        gbc.step();
        EXPECT(0xa, gbc.a());
        EXPECT(0x2, gbc.b());
        EXPECT(0xc3, gbc.c());
        EXPECT(0xd8, gbc.d());
        EXPECT(0x7d, gbc.e());
        EXPECT(0x25, gbc.h());
        EXPECT(0x93, gbc.l());
        EXPECT(0xdc31, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x9f, gbc.readMem(0xdc31));
        EXPECT(0xed, gbc.readMem(0xdc32));
        EXPECT(0xdf, gbc.readMem(0xed9e));
        // DF 0086
        gbc.setState(0x835, 0xa740, 0x81e0, 0x48ab, 0x9e5, 0x2e32, 0x1, 0x1);
        gbc.writeMem(0x835, { 0xdf });
        gbc.writeMem(0xa73e, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x81, gbc.a());
        EXPECT(0x48, gbc.b());
        EXPECT(0xab, gbc.c());
        EXPECT(0x9, gbc.d());
        EXPECT(0xe5, gbc.e());
        EXPECT(0x2e, gbc.h());
        EXPECT(0x32, gbc.l());
        EXPECT(0xa73e, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x36, gbc.readMem(0xa73e));
        EXPECT(0x8, gbc.readMem(0xa73f));
        // DF 0088
        gbc.setState(0x694f, 0xaf5e, 0xb370, 0x32ca, 0x332d, 0xc942, 0x0, 0x1);
        gbc.writeMem(0x694f, { 0xdf });
        gbc.writeMem(0xaf5c, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xb3, gbc.a());
        EXPECT(0x32, gbc.b());
        EXPECT(0xca, gbc.c());
        EXPECT(0x33, gbc.d());
        EXPECT(0x2d, gbc.e());
        EXPECT(0xc9, gbc.h());
        EXPECT(0x42, gbc.l());
        EXPECT(0xaf5c, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x50, gbc.readMem(0xaf5c));
        EXPECT(0x69, gbc.readMem(0xaf5d));
        // DF 0089
        gbc.setState(0xc235, 0x8463, 0x8ac0, 0x59d7, 0xf9dc, 0x7a07, 0x1, 0x1);
        gbc.writeMem(0x8461, { 0x0, 0x0 });
        gbc.writeMem(0xc235, { 0xdf });
        gbc.step();
        EXPECT(0x8a, gbc.a());
        EXPECT(0x59, gbc.b());
        EXPECT(0xd7, gbc.c());
        EXPECT(0xf9, gbc.d());
        EXPECT(0xdc, gbc.e());
        EXPECT(0x7a, gbc.h());
        EXPECT(0x7, gbc.l());
        EXPECT(0x8461, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x36, gbc.readMem(0x8461));
        EXPECT(0xc2, gbc.readMem(0x8462));
        EXPECT(0xdf, gbc.readMem(0xc235));
        // DF 008A
        gbc.setState(0xb6c3, 0xe2e0, 0x72f0, 0x8c9e, 0x8bf0, 0xe353, 0x0, 0x0);
        gbc.writeMem(0xb6c3, { 0xdf });
        gbc.writeMem(0xe2de, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x72, gbc.a());
        EXPECT(0x8c, gbc.b());
        EXPECT(0x9e, gbc.c());
        EXPECT(0x8b, gbc.d());
        EXPECT(0xf0, gbc.e());
        EXPECT(0xe3, gbc.h());
        EXPECT(0x53, gbc.l());
        EXPECT(0xe2de, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0xb6c3));
        EXPECT(0xc4, gbc.readMem(0xe2de));
        EXPECT(0xb6, gbc.readMem(0xe2df));
        // DF 008B
        gbc.setState(0xfc2, 0xab5a, 0x9960, 0xf040, 0xa26f, 0xfd4f, 0x0, 0x0);
        gbc.writeMem(0xfc2, { 0xdf });
        gbc.writeMem(0xab58, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x99, gbc.a());
        EXPECT(0xf0, gbc.b());
        EXPECT(0x40, gbc.c());
        EXPECT(0xa2, gbc.d());
        EXPECT(0x6f, gbc.e());
        EXPECT(0xfd, gbc.h());
        EXPECT(0x4f, gbc.l());
        EXPECT(0xab58, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xc3, gbc.readMem(0xab58));
        EXPECT(0xf, gbc.readMem(0xab59));
        // DF 008C
        gbc.setState(0xd0fa, 0xc70c, 0xd2b0, 0xa716, 0x103, 0x5118, 0x0, 0x1);
        gbc.writeMem(0xc70a, { 0x0, 0x0 });
        gbc.writeMem(0xd0fa, { 0xdf });
        gbc.step();
        EXPECT(0xd2, gbc.a());
        EXPECT(0xa7, gbc.b());
        EXPECT(0x16, gbc.c());
        EXPECT(0x1, gbc.d());
        EXPECT(0x3, gbc.e());
        EXPECT(0x51, gbc.h());
        EXPECT(0x18, gbc.l());
        EXPECT(0xc70a, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xfb, gbc.readMem(0xc70a));
        EXPECT(0xd0, gbc.readMem(0xc70b));
        EXPECT(0xdf, gbc.readMem(0xd0fa));
        // DF 0095
        gbc.setState(0xe2e7, 0xd5f3, 0xf270, 0x6c93, 0x9f51, 0xb96d, 0x0, 0x0);
        gbc.writeMem(0xd5f1, { 0x0, 0x0 });
        gbc.writeMem(0xe2e7, { 0xdf });
        gbc.step();
        EXPECT(0xf2, gbc.a());
        EXPECT(0x6c, gbc.b());
        EXPECT(0x93, gbc.c());
        EXPECT(0x9f, gbc.d());
        EXPECT(0x51, gbc.e());
        EXPECT(0xb9, gbc.h());
        EXPECT(0x6d, gbc.l());
        EXPECT(0xd5f1, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xe8, gbc.readMem(0xd5f1));
        EXPECT(0xe2, gbc.readMem(0xd5f2));
        EXPECT(0xdf, gbc.readMem(0xe2e7));
        // DF 0096
        gbc.setState(0xedaa, 0xb9b9, 0xa8e0, 0x14f5, 0x72b5, 0x1400, 0x1, 0x1);
        gbc.writeMem(0xb9b7, { 0x0, 0x0 });
        gbc.writeMem(0xedaa, { 0xdf });
        gbc.step();
        EXPECT(0xa8, gbc.a());
        EXPECT(0x14, gbc.b());
        EXPECT(0xf5, gbc.c());
        EXPECT(0x72, gbc.d());
        EXPECT(0xb5, gbc.e());
        EXPECT(0x14, gbc.h());
        EXPECT(0x0, gbc.l());
        EXPECT(0xb9b7, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xab, gbc.readMem(0xb9b7));
        EXPECT(0xed, gbc.readMem(0xb9b8));
        EXPECT(0xdf, gbc.readMem(0xedaa));
        // DF 0099
        gbc.setState(0x85bf, 0x93e1, 0xf310, 0x9bb6, 0x4d29, 0xf183, 0x0, 0x1);
        gbc.writeMem(0x85bf, { 0xdf });
        gbc.writeMem(0x93df, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xf3, gbc.a());
        EXPECT(0x9b, gbc.b());
        EXPECT(0xb6, gbc.c());
        EXPECT(0x4d, gbc.d());
        EXPECT(0x29, gbc.e());
        EXPECT(0xf1, gbc.h());
        EXPECT(0x83, gbc.l());
        EXPECT(0x93df, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0x85bf));
        EXPECT(0xc0, gbc.readMem(0x93df));
        EXPECT(0x85, gbc.readMem(0x93e0));
        // DF 00A0
        gbc.setState(0x8b22, 0x9fe9, 0x93f0, 0x3c35, 0x2a1f, 0xd979, 0x0, 0x1);
        gbc.writeMem(0x8b22, { 0xdf });
        gbc.writeMem(0x9fe7, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x93, gbc.a());
        EXPECT(0x3c, gbc.b());
        EXPECT(0x35, gbc.c());
        EXPECT(0x2a, gbc.d());
        EXPECT(0x1f, gbc.e());
        EXPECT(0xd9, gbc.h());
        EXPECT(0x79, gbc.l());
        EXPECT(0x9fe7, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0x8b22));
        EXPECT(0x23, gbc.readMem(0x9fe7));
        EXPECT(0x8b, gbc.readMem(0x9fe8));
        // DF 00A5
        gbc.setState(0xd86b, 0xbc7e, 0xf450, 0xccc3, 0x52ec, 0xb70c, 0x0, 0x0);
        gbc.writeMem(0xbc7c, { 0x0, 0x0 });
        gbc.writeMem(0xd86b, { 0xdf });
        gbc.step();
        EXPECT(0xf4, gbc.a());
        EXPECT(0xcc, gbc.b());
        EXPECT(0xc3, gbc.c());
        EXPECT(0x52, gbc.d());
        EXPECT(0xec, gbc.e());
        EXPECT(0xb7, gbc.h());
        EXPECT(0xc, gbc.l());
        EXPECT(0xbc7c, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x6c, gbc.readMem(0xbc7c));
        EXPECT(0xd8, gbc.readMem(0xbc7d));
        EXPECT(0xdf, gbc.readMem(0xd86b));
        // DF 00A6
        gbc.setState(0xe8d7, 0x93c7, 0xd830, 0x2afa, 0x1336, 0x9b7e, 0x1, 0x0);
        gbc.writeMem(0x93c5, { 0x0, 0x0 });
        gbc.writeMem(0xe8d7, { 0xdf });
        gbc.step();
        EXPECT(0xd8, gbc.a());
        EXPECT(0x2a, gbc.b());
        EXPECT(0xfa, gbc.c());
        EXPECT(0x13, gbc.d());
        EXPECT(0x36, gbc.e());
        EXPECT(0x9b, gbc.h());
        EXPECT(0x7e, gbc.l());
        EXPECT(0x93c5, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xd8, gbc.readMem(0x93c5));
        EXPECT(0xe8, gbc.readMem(0x93c6));
        EXPECT(0xdf, gbc.readMem(0xe8d7));
        // DF 00A8
        gbc.setState(0xb896, 0xf45a, 0x3f80, 0x8985, 0xf052, 0x957a, 0x1, 0x1);
        gbc.writeMem(0xb896, { 0xdf });
        gbc.writeMem(0xf458, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x3f, gbc.a());
        EXPECT(0x89, gbc.b());
        EXPECT(0x85, gbc.c());
        EXPECT(0xf0, gbc.d());
        EXPECT(0x52, gbc.e());
        EXPECT(0x95, gbc.h());
        EXPECT(0x7a, gbc.l());
        EXPECT(0xf458, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0xb896));
        EXPECT(0x97, gbc.readMem(0xf458));
        EXPECT(0xb8, gbc.readMem(0xf459));
        // DF 00AA
        gbc.setState(0x5f3, 0xc6ac, 0xc950, 0x5bed, 0xd8ce, 0x7738, 0x0, 0x1);
        gbc.writeMem(0x5f3, { 0xdf });
        gbc.writeMem(0xc6aa, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xc9, gbc.a());
        EXPECT(0x5b, gbc.b());
        EXPECT(0xed, gbc.c());
        EXPECT(0xd8, gbc.d());
        EXPECT(0xce, gbc.e());
        EXPECT(0x77, gbc.h());
        EXPECT(0x38, gbc.l());
        EXPECT(0xc6aa, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xf4, gbc.readMem(0xc6aa));
        EXPECT(0x5, gbc.readMem(0xc6ab));
        // DF 00AF
        gbc.setState(0x5d08, 0xf59b, 0xcf60, 0xfaf3, 0x8ed3, 0x34df, 0x1, 0x1);
        gbc.writeMem(0x5d08, { 0xdf });
        gbc.writeMem(0xf599, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xcf, gbc.a());
        EXPECT(0xfa, gbc.b());
        EXPECT(0xf3, gbc.c());
        EXPECT(0x8e, gbc.d());
        EXPECT(0xd3, gbc.e());
        EXPECT(0x34, gbc.h());
        EXPECT(0xdf, gbc.l());
        EXPECT(0xf599, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x9, gbc.readMem(0xf599));
        EXPECT(0x5d, gbc.readMem(0xf59a));
        // DF 00B6
        gbc.setState(0xdf33, 0xf5f3, 0x5260, 0x77b8, 0xb503, 0xb583, 0x1, 0x1);
        gbc.writeMem(0xdf33, { 0xdf });
        gbc.writeMem(0xf5f1, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x52, gbc.a());
        EXPECT(0x77, gbc.b());
        EXPECT(0xb8, gbc.c());
        EXPECT(0xb5, gbc.d());
        EXPECT(0x3, gbc.e());
        EXPECT(0xb5, gbc.h());
        EXPECT(0x83, gbc.l());
        EXPECT(0xf5f1, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0xdf33));
        EXPECT(0x34, gbc.readMem(0xf5f1));
        EXPECT(0xdf, gbc.readMem(0xf5f2));
        // DF 00B8
        gbc.setState(0x39c1, 0xbe8a, 0x8570, 0x9f19, 0xfd94, 0x5711, 0x0, 0x1);
        gbc.writeMem(0x39c1, { 0xdf });
        gbc.writeMem(0xbe88, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x85, gbc.a());
        EXPECT(0x9f, gbc.b());
        EXPECT(0x19, gbc.c());
        EXPECT(0xfd, gbc.d());
        EXPECT(0x94, gbc.e());
        EXPECT(0x57, gbc.h());
        EXPECT(0x11, gbc.l());
        EXPECT(0xbe88, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xc2, gbc.readMem(0xbe88));
        EXPECT(0x39, gbc.readMem(0xbe89));
        // DF 00BC
        gbc.setState(0xaf61, 0xb312, 0xc5a0, 0x40c, 0x5eb7, 0x86eb, 0x0, 0x0);
        gbc.writeMem(0xaf61, { 0xdf });
        gbc.writeMem(0xb310, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xc5, gbc.a());
        EXPECT(0x4, gbc.b());
        EXPECT(0xc, gbc.c());
        EXPECT(0x5e, gbc.d());
        EXPECT(0xb7, gbc.e());
        EXPECT(0x86, gbc.h());
        EXPECT(0xeb, gbc.l());
        EXPECT(0xb310, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0xaf61));
        EXPECT(0x62, gbc.readMem(0xb310));
        EXPECT(0xaf, gbc.readMem(0xb311));
        // DF 00BF
        gbc.setState(0x6449, 0xafcb, 0x2ce0, 0x2274, 0x888c, 0x7969, 0x0, 0x1);
        gbc.writeMem(0x6449, { 0xdf });
        gbc.writeMem(0xafc9, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x2c, gbc.a());
        EXPECT(0x22, gbc.b());
        EXPECT(0x74, gbc.c());
        EXPECT(0x88, gbc.d());
        EXPECT(0x8c, gbc.e());
        EXPECT(0x79, gbc.h());
        EXPECT(0x69, gbc.l());
        EXPECT(0xafc9, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x4a, gbc.readMem(0xafc9));
        EXPECT(0x64, gbc.readMem(0xafca));
        // DF 00C0
        gbc.setState(0xb92c, 0xea1e, 0xbdf0, 0x6a13, 0xa550, 0x27ac, 0x0, 0x1);
        gbc.writeMem(0xb92c, { 0xdf });
        gbc.writeMem(0xea1c, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xbd, gbc.a());
        EXPECT(0x6a, gbc.b());
        EXPECT(0x13, gbc.c());
        EXPECT(0xa5, gbc.d());
        EXPECT(0x50, gbc.e());
        EXPECT(0x27, gbc.h());
        EXPECT(0xac, gbc.l());
        EXPECT(0xea1c, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0xb92c));
        EXPECT(0x2d, gbc.readMem(0xea1c));
        EXPECT(0xb9, gbc.readMem(0xea1d));
        // DF 00C1
        gbc.setState(0xed03, 0xd771, 0xd010, 0xa9c6, 0x4320, 0x63b0, 0x0, 0x1);
        gbc.writeMem(0xd76f, { 0x0, 0x0 });
        gbc.writeMem(0xed03, { 0xdf });
        gbc.step();
        EXPECT(0xd0, gbc.a());
        EXPECT(0xa9, gbc.b());
        EXPECT(0xc6, gbc.c());
        EXPECT(0x43, gbc.d());
        EXPECT(0x20, gbc.e());
        EXPECT(0x63, gbc.h());
        EXPECT(0xb0, gbc.l());
        EXPECT(0xd76f, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x4, gbc.readMem(0xd76f));
        EXPECT(0xed, gbc.readMem(0xd770));
        EXPECT(0xdf, gbc.readMem(0xed03));
        // DF 00C2
        gbc.setState(0x7a3f, 0xd0f4, 0x6880, 0x38cd, 0x9ab3, 0x8c66, 0x1, 0x0);
        gbc.writeMem(0x7a3f, { 0xdf });
        gbc.writeMem(0xd0f2, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x68, gbc.a());
        EXPECT(0x38, gbc.b());
        EXPECT(0xcd, gbc.c());
        EXPECT(0x9a, gbc.d());
        EXPECT(0xb3, gbc.e());
        EXPECT(0x8c, gbc.h());
        EXPECT(0x66, gbc.l());
        EXPECT(0xd0f2, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x40, gbc.readMem(0xd0f2));
        EXPECT(0x7a, gbc.readMem(0xd0f3));
        // DF 00C3
        gbc.setState(0x646e, 0xc338, 0xa60, 0xe0ec, 0xa3b9, 0x3a9a, 0x1, 0x0);
        gbc.writeMem(0x646e, { 0xdf });
        gbc.writeMem(0xc336, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xa, gbc.a());
        EXPECT(0xe0, gbc.b());
        EXPECT(0xec, gbc.c());
        EXPECT(0xa3, gbc.d());
        EXPECT(0xb9, gbc.e());
        EXPECT(0x3a, gbc.h());
        EXPECT(0x9a, gbc.l());
        EXPECT(0xc336, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x6f, gbc.readMem(0xc336));
        EXPECT(0x64, gbc.readMem(0xc337));
        // DF 00C4
        gbc.setState(0x5f01, 0xd2fe, 0x7ec0, 0x3693, 0x885e, 0x8276, 0x0, 0x0);
        gbc.writeMem(0x5f01, { 0xdf });
        gbc.writeMem(0xd2fc, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x7e, gbc.a());
        EXPECT(0x36, gbc.b());
        EXPECT(0x93, gbc.c());
        EXPECT(0x88, gbc.d());
        EXPECT(0x5e, gbc.e());
        EXPECT(0x82, gbc.h());
        EXPECT(0x76, gbc.l());
        EXPECT(0xd2fc, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x2, gbc.readMem(0xd2fc));
        EXPECT(0x5f, gbc.readMem(0xd2fd));
        // DF 00C6
        gbc.setState(0x3902, 0xc848, 0xc200, 0xfcd7, 0xf441, 0x7fbb, 0x1, 0x1);
        gbc.writeMem(0x3902, { 0xdf });
        gbc.writeMem(0xc846, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xc2, gbc.a());
        EXPECT(0xfc, gbc.b());
        EXPECT(0xd7, gbc.c());
        EXPECT(0xf4, gbc.d());
        EXPECT(0x41, gbc.e());
        EXPECT(0x7f, gbc.h());
        EXPECT(0xbb, gbc.l());
        EXPECT(0xc846, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x3, gbc.readMem(0xc846));
        EXPECT(0x39, gbc.readMem(0xc847));
        // DF 00C7
        gbc.setState(0xcc78, 0x9ea2, 0x7820, 0x552, 0xd31f, 0xbeb3, 0x1, 0x0);
        gbc.writeMem(0x9ea0, { 0x0, 0x0 });
        gbc.writeMem(0xcc78, { 0xdf });
        gbc.step();
        EXPECT(0x78, gbc.a());
        EXPECT(0x5, gbc.b());
        EXPECT(0x52, gbc.c());
        EXPECT(0xd3, gbc.d());
        EXPECT(0x1f, gbc.e());
        EXPECT(0xbe, gbc.h());
        EXPECT(0xb3, gbc.l());
        EXPECT(0x9ea0, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x79, gbc.readMem(0x9ea0));
        EXPECT(0xcc, gbc.readMem(0x9ea1));
        EXPECT(0xdf, gbc.readMem(0xcc78));
        // DF 00C9
        gbc.setState(0xdd85, 0xd99f, 0x3180, 0x1759, 0xd4c, 0xac2d, 0x1, 0x1);
        gbc.writeMem(0xd99d, { 0x0, 0x0 });
        gbc.writeMem(0xdd85, { 0xdf });
        gbc.step();
        EXPECT(0x31, gbc.a());
        EXPECT(0x17, gbc.b());
        EXPECT(0x59, gbc.c());
        EXPECT(0xd, gbc.d());
        EXPECT(0x4c, gbc.e());
        EXPECT(0xac, gbc.h());
        EXPECT(0x2d, gbc.l());
        EXPECT(0xd99d, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x86, gbc.readMem(0xd99d));
        EXPECT(0xdd, gbc.readMem(0xd99e));
        EXPECT(0xdf, gbc.readMem(0xdd85));
        // DF 00CA
        gbc.setState(0x65c7, 0x8440, 0x9000, 0x4fe7, 0x8dbe, 0xd64e, 0x1, 0x1);
        gbc.writeMem(0x65c7, { 0xdf });
        gbc.writeMem(0x843e, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x90, gbc.a());
        EXPECT(0x4f, gbc.b());
        EXPECT(0xe7, gbc.c());
        EXPECT(0x8d, gbc.d());
        EXPECT(0xbe, gbc.e());
        EXPECT(0xd6, gbc.h());
        EXPECT(0x4e, gbc.l());
        EXPECT(0x843e, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xc8, gbc.readMem(0x843e));
        EXPECT(0x65, gbc.readMem(0x843f));
        // DF 00CC
        gbc.setState(0xf95, 0xc419, 0x5760, 0x283c, 0xb7d8, 0xb8ec, 0x1, 0x1);
        gbc.writeMem(0xf95, { 0xdf });
        gbc.writeMem(0xc417, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x57, gbc.a());
        EXPECT(0x28, gbc.b());
        EXPECT(0x3c, gbc.c());
        EXPECT(0xb7, gbc.d());
        EXPECT(0xd8, gbc.e());
        EXPECT(0xb8, gbc.h());
        EXPECT(0xec, gbc.l());
        EXPECT(0xc417, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x96, gbc.readMem(0xc417));
        EXPECT(0xf, gbc.readMem(0xc418));
        // DF 00CD
        gbc.setState(0x7485, 0xeabb, 0xb660, 0x8a4c, 0x278d, 0xa1f1, 0x0, 0x0);
        gbc.writeMem(0x7485, { 0xdf });
        gbc.writeMem(0xeab9, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xb6, gbc.a());
        EXPECT(0x8a, gbc.b());
        EXPECT(0x4c, gbc.c());
        EXPECT(0x27, gbc.d());
        EXPECT(0x8d, gbc.e());
        EXPECT(0xa1, gbc.h());
        EXPECT(0xf1, gbc.l());
        EXPECT(0xeab9, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x86, gbc.readMem(0xeab9));
        EXPECT(0x74, gbc.readMem(0xeaba));
        // DF 00CE
        gbc.setState(0xd4ba, 0xe9d5, 0x8a90, 0xb144, 0x8f4b, 0x92f5, 0x0, 0x1);
        gbc.writeMem(0xd4ba, { 0xdf });
        gbc.writeMem(0xe9d3, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x8a, gbc.a());
        EXPECT(0xb1, gbc.b());
        EXPECT(0x44, gbc.c());
        EXPECT(0x8f, gbc.d());
        EXPECT(0x4b, gbc.e());
        EXPECT(0x92, gbc.h());
        EXPECT(0xf5, gbc.l());
        EXPECT(0xe9d3, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0xd4ba));
        EXPECT(0xbb, gbc.readMem(0xe9d3));
        EXPECT(0xd4, gbc.readMem(0xe9d4));
        // DF 00CF
        gbc.setState(0x6e44, 0xadf7, 0x4f40, 0xb986, 0xde49, 0x886c, 0x0, 0x0);
        gbc.writeMem(0x6e44, { 0xdf });
        gbc.writeMem(0xadf5, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x4f, gbc.a());
        EXPECT(0xb9, gbc.b());
        EXPECT(0x86, gbc.c());
        EXPECT(0xde, gbc.d());
        EXPECT(0x49, gbc.e());
        EXPECT(0x88, gbc.h());
        EXPECT(0x6c, gbc.l());
        EXPECT(0xadf5, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x45, gbc.readMem(0xadf5));
        EXPECT(0x6e, gbc.readMem(0xadf6));
        // DF 00D3
        gbc.setState(0x985f, 0xa98a, 0xb460, 0x4738, 0x1bb0, 0x56cb, 0x0, 0x0);
        gbc.writeMem(0x985f, { 0xdf });
        gbc.writeMem(0xa988, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xb4, gbc.a());
        EXPECT(0x47, gbc.b());
        EXPECT(0x38, gbc.c());
        EXPECT(0x1b, gbc.d());
        EXPECT(0xb0, gbc.e());
        EXPECT(0x56, gbc.h());
        EXPECT(0xcb, gbc.l());
        EXPECT(0xa988, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0x985f));
        EXPECT(0x60, gbc.readMem(0xa988));
        EXPECT(0x98, gbc.readMem(0xa989));
        // DF 00D4
        gbc.setState(0x9b09, 0xef33, 0x58b0, 0x5629, 0x5535, 0x1a28, 0x0, 0x1);
        gbc.writeMem(0x9b09, { 0xdf });
        gbc.writeMem(0xef31, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x58, gbc.a());
        EXPECT(0x56, gbc.b());
        EXPECT(0x29, gbc.c());
        EXPECT(0x55, gbc.d());
        EXPECT(0x35, gbc.e());
        EXPECT(0x1a, gbc.h());
        EXPECT(0x28, gbc.l());
        EXPECT(0xef31, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0x9b09));
        EXPECT(0xa, gbc.readMem(0xef31));
        EXPECT(0x9b, gbc.readMem(0xef32));
        // DF 00D5
        gbc.setState(0x1a52, 0xbe4a, 0x8480, 0x8f75, 0xa2a2, 0x68de, 0x1, 0x0);
        gbc.writeMem(0x1a52, { 0xdf });
        gbc.writeMem(0xbe48, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x84, gbc.a());
        EXPECT(0x8f, gbc.b());
        EXPECT(0x75, gbc.c());
        EXPECT(0xa2, gbc.d());
        EXPECT(0xa2, gbc.e());
        EXPECT(0x68, gbc.h());
        EXPECT(0xde, gbc.l());
        EXPECT(0xbe48, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x53, gbc.readMem(0xbe48));
        EXPECT(0x1a, gbc.readMem(0xbe49));
        // DF 00D6
        gbc.setState(0xc54f, 0xa0c1, 0x8090, 0x628e, 0x5d92, 0x2086, 0x0, 0x0);
        gbc.writeMem(0xa0bf, { 0x0, 0x0 });
        gbc.writeMem(0xc54f, { 0xdf });
        gbc.step();
        EXPECT(0x80, gbc.a());
        EXPECT(0x62, gbc.b());
        EXPECT(0x8e, gbc.c());
        EXPECT(0x5d, gbc.d());
        EXPECT(0x92, gbc.e());
        EXPECT(0x20, gbc.h());
        EXPECT(0x86, gbc.l());
        EXPECT(0xa0bf, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x50, gbc.readMem(0xa0bf));
        EXPECT(0xc5, gbc.readMem(0xa0c0));
        EXPECT(0xdf, gbc.readMem(0xc54f));
        // DF 00D9
        gbc.setState(0xcb14, 0x9f7c, 0x4740, 0x52bb, 0x9c76, 0x6bbf, 0x1, 0x1);
        gbc.writeMem(0x9f7a, { 0x0, 0x0 });
        gbc.writeMem(0xcb14, { 0xdf });
        gbc.step();
        EXPECT(0x47, gbc.a());
        EXPECT(0x52, gbc.b());
        EXPECT(0xbb, gbc.c());
        EXPECT(0x9c, gbc.d());
        EXPECT(0x76, gbc.e());
        EXPECT(0x6b, gbc.h());
        EXPECT(0xbf, gbc.l());
        EXPECT(0x9f7a, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x15, gbc.readMem(0x9f7a));
        EXPECT(0xcb, gbc.readMem(0x9f7b));
        EXPECT(0xdf, gbc.readMem(0xcb14));
        // DF 00DB
        gbc.setState(0x2fd2, 0xbec3, 0x7160, 0xc636, 0x32ca, 0x5fa3, 0x1, 0x0);
        gbc.writeMem(0x2fd2, { 0xdf });
        gbc.writeMem(0xbec1, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x71, gbc.a());
        EXPECT(0xc6, gbc.b());
        EXPECT(0x36, gbc.c());
        EXPECT(0x32, gbc.d());
        EXPECT(0xca, gbc.e());
        EXPECT(0x5f, gbc.h());
        EXPECT(0xa3, gbc.l());
        EXPECT(0xbec1, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xd3, gbc.readMem(0xbec1));
        EXPECT(0x2f, gbc.readMem(0xbec2));
        // DF 00DE
        gbc.setState(0x62c8, 0xe288, 0x2540, 0xc580, 0xfbde, 0x2ae7, 0x1, 0x1);
        gbc.writeMem(0x62c8, { 0xdf });
        gbc.writeMem(0xe286, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x25, gbc.a());
        EXPECT(0xc5, gbc.b());
        EXPECT(0x80, gbc.c());
        EXPECT(0xfb, gbc.d());
        EXPECT(0xde, gbc.e());
        EXPECT(0x2a, gbc.h());
        EXPECT(0xe7, gbc.l());
        EXPECT(0xe286, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xc9, gbc.readMem(0xe286));
        EXPECT(0x62, gbc.readMem(0xe287));
        // DF 00DF
        gbc.setState(0x8f8e, 0xc37b, 0x2ce0, 0x5472, 0x554c, 0x75b2, 0x0, 0x1);
        gbc.writeMem(0x8f8e, { 0xdf });
        gbc.writeMem(0xc379, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x2c, gbc.a());
        EXPECT(0x54, gbc.b());
        EXPECT(0x72, gbc.c());
        EXPECT(0x55, gbc.d());
        EXPECT(0x4c, gbc.e());
        EXPECT(0x75, gbc.h());
        EXPECT(0xb2, gbc.l());
        EXPECT(0xc379, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0x8f8e));
        EXPECT(0x8f, gbc.readMem(0xc379));
        EXPECT(0x8f, gbc.readMem(0xc37a));
        // DF 00E0
        gbc.setState(0xb7a3, 0xa47b, 0xc80, 0xc5a, 0x1f73, 0x7ac2, 0x0, 0x0);
        gbc.writeMem(0xa479, { 0x0, 0x0 });
        gbc.writeMem(0xb7a3, { 0xdf });
        gbc.step();
        EXPECT(0xc, gbc.a());
        EXPECT(0xc, gbc.b());
        EXPECT(0x5a, gbc.c());
        EXPECT(0x1f, gbc.d());
        EXPECT(0x73, gbc.e());
        EXPECT(0x7a, gbc.h());
        EXPECT(0xc2, gbc.l());
        EXPECT(0xa479, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xa4, gbc.readMem(0xa479));
        EXPECT(0xb7, gbc.readMem(0xa47a));
        EXPECT(0xdf, gbc.readMem(0xb7a3));
        // DF 00E3
        gbc.setState(0x5e09, 0xfd95, 0xb500, 0xbe16, 0x35b9, 0xaed8, 0x1, 0x0);
        gbc.writeMem(0x5e09, { 0xdf });
        gbc.writeMem(0xfd93, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xb5, gbc.a());
        EXPECT(0xbe, gbc.b());
        EXPECT(0x16, gbc.c());
        EXPECT(0x35, gbc.d());
        EXPECT(0xb9, gbc.e());
        EXPECT(0xae, gbc.h());
        EXPECT(0xd8, gbc.l());
        EXPECT(0xfd93, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xa, gbc.readMem(0xfd93));
        EXPECT(0x5e, gbc.readMem(0xfd94));
        // DF 00E4
        gbc.setState(0x2a65, 0x89e4, 0x8950, 0xe962, 0xb6cf, 0xd91, 0x0, 0x0);
        gbc.writeMem(0x2a65, { 0xdf });
        gbc.writeMem(0x89e2, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x89, gbc.a());
        EXPECT(0xe9, gbc.b());
        EXPECT(0x62, gbc.c());
        EXPECT(0xb6, gbc.d());
        EXPECT(0xcf, gbc.e());
        EXPECT(0xd, gbc.h());
        EXPECT(0x91, gbc.l());
        EXPECT(0x89e2, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x66, gbc.readMem(0x89e2));
        EXPECT(0x2a, gbc.readMem(0x89e3));
        // DF 00EC
        gbc.setState(0xa861, 0xad28, 0xc470, 0x4d9a, 0xec03, 0x2a49, 0x0, 0x1);
        gbc.writeMem(0xa861, { 0xdf });
        gbc.writeMem(0xad26, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xc4, gbc.a());
        EXPECT(0x4d, gbc.b());
        EXPECT(0x9a, gbc.c());
        EXPECT(0xec, gbc.d());
        EXPECT(0x3, gbc.e());
        EXPECT(0x2a, gbc.h());
        EXPECT(0x49, gbc.l());
        EXPECT(0xad26, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0xa861));
        EXPECT(0x62, gbc.readMem(0xad26));
        EXPECT(0xa8, gbc.readMem(0xad27));
        // DF 00EE
        gbc.setState(0xc0c3, 0xb270, 0x9550, 0xce6, 0x87d8, 0xc32, 0x0, 0x1);
        gbc.writeMem(0xb26e, { 0x0, 0x0 });
        gbc.writeMem(0xc0c3, { 0xdf });
        gbc.step();
        EXPECT(0x95, gbc.a());
        EXPECT(0xc, gbc.b());
        EXPECT(0xe6, gbc.c());
        EXPECT(0x87, gbc.d());
        EXPECT(0xd8, gbc.e());
        EXPECT(0xc, gbc.h());
        EXPECT(0x32, gbc.l());
        EXPECT(0xb26e, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xc4, gbc.readMem(0xb26e));
        EXPECT(0xc0, gbc.readMem(0xb26f));
        EXPECT(0xdf, gbc.readMem(0xc0c3));
        // DF 00F0
        gbc.setState(0xef2d, 0xf547, 0x4ee0, 0x1a90, 0xef63, 0xc57f, 0x0, 0x0);
        gbc.writeMem(0xef2d, { 0xdf });
        gbc.writeMem(0xf545, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x4e, gbc.a());
        EXPECT(0x1a, gbc.b());
        EXPECT(0x90, gbc.c());
        EXPECT(0xef, gbc.d());
        EXPECT(0x63, gbc.e());
        EXPECT(0xc5, gbc.h());
        EXPECT(0x7f, gbc.l());
        EXPECT(0xf545, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0xef2d));
        EXPECT(0x2e, gbc.readMem(0xf545));
        EXPECT(0xef, gbc.readMem(0xf546));
        // DF 00F1
        gbc.setState(0x1922, 0xe54d, 0xd090, 0x837d, 0xc841, 0xdfd0, 0x1, 0x0);
        gbc.writeMem(0x1922, { 0xdf });
        gbc.writeMem(0xe54b, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xd0, gbc.a());
        EXPECT(0x83, gbc.b());
        EXPECT(0x7d, gbc.c());
        EXPECT(0xc8, gbc.d());
        EXPECT(0x41, gbc.e());
        EXPECT(0xdf, gbc.h());
        EXPECT(0xd0, gbc.l());
        EXPECT(0xe54b, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x23, gbc.readMem(0xe54b));
        EXPECT(0x19, gbc.readMem(0xe54c));
        // DF 00F3
        gbc.setState(0xdf8f, 0xc706, 0x6ad0, 0xe1a5, 0x975, 0x1ad9, 0x1, 0x1);
        gbc.writeMem(0xc704, { 0x0, 0x0 });
        gbc.writeMem(0xdf8f, { 0xdf });
        gbc.step();
        EXPECT(0x6a, gbc.a());
        EXPECT(0xe1, gbc.b());
        EXPECT(0xa5, gbc.c());
        EXPECT(0x9, gbc.d());
        EXPECT(0x75, gbc.e());
        EXPECT(0x1a, gbc.h());
        EXPECT(0xd9, gbc.l());
        EXPECT(0xc704, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x90, gbc.readMem(0xc704));
        EXPECT(0xdf, gbc.readMem(0xc705));
        EXPECT(0xdf, gbc.readMem(0xdf8f));
        // DF 00F4
        gbc.setState(0x6f10, 0xce65, 0x8c30, 0xb103, 0x6cc1, 0x53aa, 0x0, 0x0);
        gbc.writeMem(0x6f10, { 0xdf });
        gbc.writeMem(0xce63, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x8c, gbc.a());
        EXPECT(0xb1, gbc.b());
        EXPECT(0x3, gbc.c());
        EXPECT(0x6c, gbc.d());
        EXPECT(0xc1, gbc.e());
        EXPECT(0x53, gbc.h());
        EXPECT(0xaa, gbc.l());
        EXPECT(0xce63, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x11, gbc.readMem(0xce63));
        EXPECT(0x6f, gbc.readMem(0xce64));
        // DF 00F6
        gbc.setState(0xd7, 0xc9dc, 0x35d0, 0x98df, 0xdef4, 0x7d3d, 0x1, 0x0);
        gbc.writeMem(0xd7, { 0xdf });
        gbc.writeMem(0xc9da, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x35, gbc.a());
        EXPECT(0x98, gbc.b());
        EXPECT(0xdf, gbc.c());
        EXPECT(0xde, gbc.d());
        EXPECT(0xf4, gbc.e());
        EXPECT(0x7d, gbc.h());
        EXPECT(0x3d, gbc.l());
        EXPECT(0xc9da, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xd8, gbc.readMem(0xc9da));
        EXPECT(0x0, gbc.readMem(0xc9db));
        // DF 00F8
        gbc.setState(0xba4d, 0x95a8, 0xbc60, 0x55ab, 0x8f01, 0x2133, 0x0, 0x0);
        gbc.writeMem(0x95a6, { 0x0, 0x0 });
        gbc.writeMem(0xba4d, { 0xdf });
        gbc.step();
        EXPECT(0xbc, gbc.a());
        EXPECT(0x55, gbc.b());
        EXPECT(0xab, gbc.c());
        EXPECT(0x8f, gbc.d());
        EXPECT(0x1, gbc.e());
        EXPECT(0x21, gbc.h());
        EXPECT(0x33, gbc.l());
        EXPECT(0x95a6, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x4e, gbc.readMem(0x95a6));
        EXPECT(0xba, gbc.readMem(0x95a7));
        EXPECT(0xdf, gbc.readMem(0xba4d));
        // DF 00FA
        gbc.setState(0x59a9, 0xcc00, 0xf4c0, 0xe3e, 0x72, 0x305d, 0x1, 0x0);
        gbc.writeMem(0x59a9, { 0xdf });
        gbc.writeMem(0xcbfe, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xf4, gbc.a());
        EXPECT(0xe, gbc.b());
        EXPECT(0x3e, gbc.c());
        EXPECT(0x0, gbc.d());
        EXPECT(0x72, gbc.e());
        EXPECT(0x30, gbc.h());
        EXPECT(0x5d, gbc.l());
        EXPECT(0xcbfe, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaa, gbc.readMem(0xcbfe));
        EXPECT(0x59, gbc.readMem(0xcbff));
        // DF 0101
        gbc.setState(0x3b5c, 0xd37a, 0x8420, 0x872e, 0x2624, 0x8736, 0x1, 0x1);
        gbc.writeMem(0x3b5c, { 0xdf });
        gbc.writeMem(0xd378, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x84, gbc.a());
        EXPECT(0x87, gbc.b());
        EXPECT(0x2e, gbc.c());
        EXPECT(0x26, gbc.d());
        EXPECT(0x24, gbc.e());
        EXPECT(0x87, gbc.h());
        EXPECT(0x36, gbc.l());
        EXPECT(0xd378, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x5d, gbc.readMem(0xd378));
        EXPECT(0x3b, gbc.readMem(0xd379));
        // DF 0102
        gbc.setState(0x929d, 0x94de, 0x6750, 0x98c6, 0xc1d1, 0x7353, 0x1, 0x0);
        gbc.writeMem(0x929d, { 0xdf });
        gbc.writeMem(0x94dc, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x67, gbc.a());
        EXPECT(0x98, gbc.b());
        EXPECT(0xc6, gbc.c());
        EXPECT(0xc1, gbc.d());
        EXPECT(0xd1, gbc.e());
        EXPECT(0x73, gbc.h());
        EXPECT(0x53, gbc.l());
        EXPECT(0x94dc, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0x929d));
        EXPECT(0x9e, gbc.readMem(0x94dc));
        EXPECT(0x92, gbc.readMem(0x94dd));
        // DF 0103
        gbc.setState(0xa252, 0xbd68, 0x83b0, 0xbe49, 0xdcbb, 0xe164, 0x1, 0x1);
        gbc.writeMem(0xa252, { 0xdf });
        gbc.writeMem(0xbd66, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x83, gbc.a());
        EXPECT(0xbe, gbc.b());
        EXPECT(0x49, gbc.c());
        EXPECT(0xdc, gbc.d());
        EXPECT(0xbb, gbc.e());
        EXPECT(0xe1, gbc.h());
        EXPECT(0x64, gbc.l());
        EXPECT(0xbd66, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0xa252));
        EXPECT(0x53, gbc.readMem(0xbd66));
        EXPECT(0xa2, gbc.readMem(0xbd67));
        // DF 0104
        gbc.setState(0xdee8, 0xfef7, 0x78a0, 0xbf28, 0xca6c, 0x5670, 0x1, 0x0);
        gbc.writeMem(0xdee8, { 0xdf });
        gbc.writeMem(0xfef5, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x78, gbc.a());
        EXPECT(0xbf, gbc.b());
        EXPECT(0x28, gbc.c());
        EXPECT(0xca, gbc.d());
        EXPECT(0x6c, gbc.e());
        EXPECT(0x56, gbc.h());
        EXPECT(0x70, gbc.l());
        EXPECT(0xfef5, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0xdee8));
        EXPECT(0xe9, gbc.readMem(0xfef5));
        EXPECT(0xde, gbc.readMem(0xfef6));
        // DF 0105
        gbc.setState(0x26db, 0x9fa7, 0xf130, 0x7c7e, 0x5342, 0xc112, 0x0, 0x0);
        gbc.writeMem(0x26db, { 0xdf });
        gbc.writeMem(0x9fa5, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xf1, gbc.a());
        EXPECT(0x7c, gbc.b());
        EXPECT(0x7e, gbc.c());
        EXPECT(0x53, gbc.d());
        EXPECT(0x42, gbc.e());
        EXPECT(0xc1, gbc.h());
        EXPECT(0x12, gbc.l());
        EXPECT(0x9fa5, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0x9fa5));
        EXPECT(0x26, gbc.readMem(0x9fa6));
        // DF 0106
        gbc.setState(0x60de, 0xf97f, 0xf670, 0xd248, 0x3c, 0x5546, 0x0, 0x1);
        gbc.writeMem(0x60de, { 0xdf });
        gbc.writeMem(0xf97d, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xf6, gbc.a());
        EXPECT(0xd2, gbc.b());
        EXPECT(0x48, gbc.c());
        EXPECT(0x0, gbc.d());
        EXPECT(0x3c, gbc.e());
        EXPECT(0x55, gbc.h());
        EXPECT(0x46, gbc.l());
        EXPECT(0xf97d, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0xf97d));
        EXPECT(0x60, gbc.readMem(0xf97e));
        // DF 0107
        gbc.setState(0x41ba, 0x8004, 0xc180, 0x614, 0x9e7e, 0xd278, 0x1, 0x1);
        gbc.writeMem(0x41ba, { 0xdf });
        gbc.writeMem(0x8002, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xc1, gbc.a());
        EXPECT(0x6, gbc.b());
        EXPECT(0x14, gbc.c());
        EXPECT(0x9e, gbc.d());
        EXPECT(0x7e, gbc.e());
        EXPECT(0xd2, gbc.h());
        EXPECT(0x78, gbc.l());
        EXPECT(0x8002, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xbb, gbc.readMem(0x8002));
        EXPECT(0x41, gbc.readMem(0x8003));
        // DF 0108
        gbc.setState(0x5c41, 0xfd5d, 0xf800, 0x5eea, 0xdd6b, 0x1f6a, 0x1, 0x1);
        gbc.writeMem(0x5c41, { 0xdf });
        gbc.writeMem(0xfd5b, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xf8, gbc.a());
        EXPECT(0x5e, gbc.b());
        EXPECT(0xea, gbc.c());
        EXPECT(0xdd, gbc.d());
        EXPECT(0x6b, gbc.e());
        EXPECT(0x1f, gbc.h());
        EXPECT(0x6a, gbc.l());
        EXPECT(0xfd5b, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x42, gbc.readMem(0xfd5b));
        EXPECT(0x5c, gbc.readMem(0xfd5c));
        // DF 010A
        gbc.setState(0x9bc5, 0x8901, 0x9300, 0xf168, 0xc1f8, 0x6107, 0x1, 0x1);
        gbc.writeMem(0x88ff, { 0x0, 0x0 });
        gbc.writeMem(0x9bc5, { 0xdf });
        gbc.step();
        EXPECT(0x93, gbc.a());
        EXPECT(0xf1, gbc.b());
        EXPECT(0x68, gbc.c());
        EXPECT(0xc1, gbc.d());
        EXPECT(0xf8, gbc.e());
        EXPECT(0x61, gbc.h());
        EXPECT(0x7, gbc.l());
        EXPECT(0x88ff, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xc6, gbc.readMem(0x88ff));
        EXPECT(0x9b, gbc.readMem(0x8900));
        EXPECT(0xdf, gbc.readMem(0x9bc5));
        // DF 010B
        gbc.setState(0xd71c, 0xdea9, 0x74c0, 0xef9, 0xb9e5, 0x3f30, 0x1, 0x1);
        gbc.writeMem(0xd71c, { 0xdf });
        gbc.writeMem(0xdea7, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x74, gbc.a());
        EXPECT(0xe, gbc.b());
        EXPECT(0xf9, gbc.c());
        EXPECT(0xb9, gbc.d());
        EXPECT(0xe5, gbc.e());
        EXPECT(0x3f, gbc.h());
        EXPECT(0x30, gbc.l());
        EXPECT(0xdea7, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0xd71c));
        EXPECT(0x1d, gbc.readMem(0xdea7));
        EXPECT(0xd7, gbc.readMem(0xdea8));
        // DF 010D
        gbc.setState(0x9fee, 0xbba7, 0xff30, 0xa908, 0x1e29, 0x3491, 0x1, 0x0);
        gbc.writeMem(0x9fee, { 0xdf });
        gbc.writeMem(0xbba5, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xff, gbc.a());
        EXPECT(0xa9, gbc.b());
        EXPECT(0x8, gbc.c());
        EXPECT(0x1e, gbc.d());
        EXPECT(0x29, gbc.e());
        EXPECT(0x34, gbc.h());
        EXPECT(0x91, gbc.l());
        EXPECT(0xbba5, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0x9fee));
        EXPECT(0xef, gbc.readMem(0xbba5));
        EXPECT(0x9f, gbc.readMem(0xbba6));
        // DF 010E
        gbc.setState(0x9026, 0xda6b, 0x7560, 0x521d, 0x7d1b, 0x6e90, 0x1, 0x0);
        gbc.writeMem(0x9026, { 0xdf });
        gbc.writeMem(0xda69, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x75, gbc.a());
        EXPECT(0x52, gbc.b());
        EXPECT(0x1d, gbc.c());
        EXPECT(0x7d, gbc.d());
        EXPECT(0x1b, gbc.e());
        EXPECT(0x6e, gbc.h());
        EXPECT(0x90, gbc.l());
        EXPECT(0xda69, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0x9026));
        EXPECT(0x27, gbc.readMem(0xda69));
        EXPECT(0x90, gbc.readMem(0xda6a));
        // DF 010F
        gbc.setState(0xbfbb, 0xd68c, 0x5190, 0xcf58, 0x4d11, 0xab25, 0x1, 0x0);
        gbc.writeMem(0xbfbb, { 0xdf });
        gbc.writeMem(0xd68a, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x51, gbc.a());
        EXPECT(0xcf, gbc.b());
        EXPECT(0x58, gbc.c());
        EXPECT(0x4d, gbc.d());
        EXPECT(0x11, gbc.e());
        EXPECT(0xab, gbc.h());
        EXPECT(0x25, gbc.l());
        EXPECT(0xd68a, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0xbfbb));
        EXPECT(0xbc, gbc.readMem(0xd68a));
        EXPECT(0xbf, gbc.readMem(0xd68b));
        // DF 0118
        gbc.setState(0x488e, 0xc092, 0xef0, 0xb99c, 0x5fe2, 0xa02, 0x0, 0x0);
        gbc.writeMem(0x488e, { 0xdf });
        gbc.writeMem(0xc090, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xe, gbc.a());
        EXPECT(0xb9, gbc.b());
        EXPECT(0x9c, gbc.c());
        EXPECT(0x5f, gbc.d());
        EXPECT(0xe2, gbc.e());
        EXPECT(0xa, gbc.h());
        EXPECT(0x2, gbc.l());
        EXPECT(0xc090, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x8f, gbc.readMem(0xc090));
        EXPECT(0x48, gbc.readMem(0xc091));
        // DF 0119
        gbc.setState(0x88b2, 0xe462, 0x58b0, 0xfcd2, 0xed33, 0xc7c1, 0x0, 0x0);
        gbc.writeMem(0x88b2, { 0xdf });
        gbc.writeMem(0xe460, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x58, gbc.a());
        EXPECT(0xfc, gbc.b());
        EXPECT(0xd2, gbc.c());
        EXPECT(0xed, gbc.d());
        EXPECT(0x33, gbc.e());
        EXPECT(0xc7, gbc.h());
        EXPECT(0xc1, gbc.l());
        EXPECT(0xe460, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0x88b2));
        EXPECT(0xb3, gbc.readMem(0xe460));
        EXPECT(0x88, gbc.readMem(0xe461));
        // DF 011E
        gbc.setState(0x7931, 0xa99f, 0x4c60, 0x89f0, 0xa2eb, 0xc670, 0x1, 0x1);
        gbc.writeMem(0x7931, { 0xdf });
        gbc.writeMem(0xa99d, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x4c, gbc.a());
        EXPECT(0x89, gbc.b());
        EXPECT(0xf0, gbc.c());
        EXPECT(0xa2, gbc.d());
        EXPECT(0xeb, gbc.e());
        EXPECT(0xc6, gbc.h());
        EXPECT(0x70, gbc.l());
        EXPECT(0xa99d, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x32, gbc.readMem(0xa99d));
        EXPECT(0x79, gbc.readMem(0xa99e));
        // DF 011F
        gbc.setState(0xc8db, 0xdb0b, 0xdc60, 0x61b1, 0x33a, 0x86a5, 0x0, 0x1);
        gbc.writeMem(0xc8db, { 0xdf });
        gbc.writeMem(0xdb09, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xdc, gbc.a());
        EXPECT(0x61, gbc.b());
        EXPECT(0xb1, gbc.c());
        EXPECT(0x3, gbc.d());
        EXPECT(0x3a, gbc.e());
        EXPECT(0x86, gbc.h());
        EXPECT(0xa5, gbc.l());
        EXPECT(0xdb09, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0xc8db));
        EXPECT(0xdc, gbc.readMem(0xdb09));
        EXPECT(0xc8, gbc.readMem(0xdb0a));
        // DF 0121
        gbc.setState(0x9efc, 0xcbfa, 0xede0, 0xed9e, 0xf5ac, 0x14d1, 0x1, 0x1);
        gbc.writeMem(0x9efc, { 0xdf });
        gbc.writeMem(0xcbf8, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xed, gbc.a());
        EXPECT(0xed, gbc.b());
        EXPECT(0x9e, gbc.c());
        EXPECT(0xf5, gbc.d());
        EXPECT(0xac, gbc.e());
        EXPECT(0x14, gbc.h());
        EXPECT(0xd1, gbc.l());
        EXPECT(0xcbf8, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0x9efc));
        EXPECT(0xfd, gbc.readMem(0xcbf8));
        EXPECT(0x9e, gbc.readMem(0xcbf9));
        // DF 0122
        gbc.setState(0xbda5, 0x9839, 0x33f0, 0x9863, 0x4e72, 0x79ce, 0x0, 0x1);
        gbc.writeMem(0x9837, { 0x0, 0x0 });
        gbc.writeMem(0xbda5, { 0xdf });
        gbc.step();
        EXPECT(0x33, gbc.a());
        EXPECT(0x98, gbc.b());
        EXPECT(0x63, gbc.c());
        EXPECT(0x4e, gbc.d());
        EXPECT(0x72, gbc.e());
        EXPECT(0x79, gbc.h());
        EXPECT(0xce, gbc.l());
        EXPECT(0x9837, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xa6, gbc.readMem(0x9837));
        EXPECT(0xbd, gbc.readMem(0x9838));
        EXPECT(0xdf, gbc.readMem(0xbda5));
        // DF 0129
        gbc.setState(0x5a51, 0xf559, 0xf470, 0x9f4a, 0x3d32, 0x775b, 0x1, 0x0);
        gbc.writeMem(0x5a51, { 0xdf });
        gbc.writeMem(0xf557, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xf4, gbc.a());
        EXPECT(0x9f, gbc.b());
        EXPECT(0x4a, gbc.c());
        EXPECT(0x3d, gbc.d());
        EXPECT(0x32, gbc.e());
        EXPECT(0x77, gbc.h());
        EXPECT(0x5b, gbc.l());
        EXPECT(0xf557, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x52, gbc.readMem(0xf557));
        EXPECT(0x5a, gbc.readMem(0xf558));
        // DF 012C
        gbc.setState(0x6127, 0xbca2, 0x59a0, 0x8839, 0x7093, 0xe2ec, 0x0, 0x1);
        gbc.writeMem(0x6127, { 0xdf });
        gbc.writeMem(0xbca0, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x59, gbc.a());
        EXPECT(0x88, gbc.b());
        EXPECT(0x39, gbc.c());
        EXPECT(0x70, gbc.d());
        EXPECT(0x93, gbc.e());
        EXPECT(0xe2, gbc.h());
        EXPECT(0xec, gbc.l());
        EXPECT(0xbca0, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x28, gbc.readMem(0xbca0));
        EXPECT(0x61, gbc.readMem(0xbca1));
        // DF 012D
        gbc.setState(0x4da6, 0xabb2, 0x690, 0xd4fb, 0x6698, 0x6286, 0x1, 0x0);
        gbc.writeMem(0x4da6, { 0xdf });
        gbc.writeMem(0xabb0, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x6, gbc.a());
        EXPECT(0xd4, gbc.b());
        EXPECT(0xfb, gbc.c());
        EXPECT(0x66, gbc.d());
        EXPECT(0x98, gbc.e());
        EXPECT(0x62, gbc.h());
        EXPECT(0x86, gbc.l());
        EXPECT(0xabb0, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xa7, gbc.readMem(0xabb0));
        EXPECT(0x4d, gbc.readMem(0xabb1));
        // DF 012E
        gbc.setState(0x2d83, 0xffa9, 0x12f0, 0x8ce6, 0x6c25, 0x4cd9, 0x1, 0x1);
        gbc.writeMem(0x2d83, { 0xdf });
        gbc.writeMem(0xffa7, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x12, gbc.a());
        EXPECT(0x8c, gbc.b());
        EXPECT(0xe6, gbc.c());
        EXPECT(0x6c, gbc.d());
        EXPECT(0x25, gbc.e());
        EXPECT(0x4c, gbc.h());
        EXPECT(0xd9, gbc.l());
        EXPECT(0xffa7, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x84, gbc.readMem(0xffa7));
        EXPECT(0x2d, gbc.readMem(0xffa8));
        // DF 0130
        gbc.setState(0xa178, 0xf2bf, 0xfb80, 0x38b2, 0x2e4e, 0x8819, 0x0, 0x1);
        gbc.writeMem(0xa178, { 0xdf });
        gbc.writeMem(0xf2bd, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xfb, gbc.a());
        EXPECT(0x38, gbc.b());
        EXPECT(0xb2, gbc.c());
        EXPECT(0x2e, gbc.d());
        EXPECT(0x4e, gbc.e());
        EXPECT(0x88, gbc.h());
        EXPECT(0x19, gbc.l());
        EXPECT(0xf2bd, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0xa178));
        EXPECT(0x79, gbc.readMem(0xf2bd));
        EXPECT(0xa1, gbc.readMem(0xf2be));
        // DF 0131
        gbc.setState(0x1df7, 0xede7, 0x51a0, 0x7c21, 0x9a1c, 0x7c4e, 0x0, 0x1);
        gbc.writeMem(0x1df7, { 0xdf });
        gbc.writeMem(0xede5, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x51, gbc.a());
        EXPECT(0x7c, gbc.b());
        EXPECT(0x21, gbc.c());
        EXPECT(0x9a, gbc.d());
        EXPECT(0x1c, gbc.e());
        EXPECT(0x7c, gbc.h());
        EXPECT(0x4e, gbc.l());
        EXPECT(0xede5, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xf8, gbc.readMem(0xede5));
        EXPECT(0x1d, gbc.readMem(0xede6));
        // DF 0135
        gbc.setState(0x6b26, 0xfb80, 0x7e30, 0x16df, 0x7b50, 0x9252, 0x1, 0x1);
        gbc.writeMem(0x6b26, { 0xdf });
        gbc.writeMem(0xfb7e, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x7e, gbc.a());
        EXPECT(0x16, gbc.b());
        EXPECT(0xdf, gbc.c());
        EXPECT(0x7b, gbc.d());
        EXPECT(0x50, gbc.e());
        EXPECT(0x92, gbc.h());
        EXPECT(0x52, gbc.l());
        EXPECT(0xfb7e, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x27, gbc.readMem(0xfb7e));
        EXPECT(0x6b, gbc.readMem(0xfb7f));
        // DF 0137
        gbc.setState(0xe7bf, 0xf7e3, 0x5830, 0x6fd7, 0x37cb, 0xf3fd, 0x0, 0x1);
        gbc.writeMem(0xe7bf, { 0xdf });
        gbc.writeMem(0xf7e1, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x58, gbc.a());
        EXPECT(0x6f, gbc.b());
        EXPECT(0xd7, gbc.c());
        EXPECT(0x37, gbc.d());
        EXPECT(0xcb, gbc.e());
        EXPECT(0xf3, gbc.h());
        EXPECT(0xfd, gbc.l());
        EXPECT(0xf7e1, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0xe7bf));
        EXPECT(0xc0, gbc.readMem(0xf7e1));
        EXPECT(0xe7, gbc.readMem(0xf7e2));
        // DF 0138
        gbc.setState(0x8afd, 0x99f1, 0x7df0, 0x5b2, 0x6bce, 0x4546, 0x1, 0x1);
        gbc.writeMem(0x8afd, { 0xdf });
        gbc.writeMem(0x99ef, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x7d, gbc.a());
        EXPECT(0x5, gbc.b());
        EXPECT(0xb2, gbc.c());
        EXPECT(0x6b, gbc.d());
        EXPECT(0xce, gbc.e());
        EXPECT(0x45, gbc.h());
        EXPECT(0x46, gbc.l());
        EXPECT(0x99ef, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0x8afd));
        EXPECT(0xfe, gbc.readMem(0x99ef));
        EXPECT(0x8a, gbc.readMem(0x99f0));
        // DF 0139
        gbc.setState(0xb41d, 0xdbc6, 0x3340, 0xf26c, 0x9576, 0xacfb, 0x0, 0x1);
        gbc.writeMem(0xb41d, { 0xdf });
        gbc.writeMem(0xdbc4, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x33, gbc.a());
        EXPECT(0xf2, gbc.b());
        EXPECT(0x6c, gbc.c());
        EXPECT(0x95, gbc.d());
        EXPECT(0x76, gbc.e());
        EXPECT(0xac, gbc.h());
        EXPECT(0xfb, gbc.l());
        EXPECT(0xdbc4, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0xb41d));
        EXPECT(0x1e, gbc.readMem(0xdbc4));
        EXPECT(0xb4, gbc.readMem(0xdbc5));
        // DF 013B
        gbc.setState(0x589f, 0xe63d, 0xeca0, 0x42e, 0xfcdd, 0x4dd2, 0x1, 0x0);
        gbc.writeMem(0x589f, { 0xdf });
        gbc.writeMem(0xe63b, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xec, gbc.a());
        EXPECT(0x4, gbc.b());
        EXPECT(0x2e, gbc.c());
        EXPECT(0xfc, gbc.d());
        EXPECT(0xdd, gbc.e());
        EXPECT(0x4d, gbc.h());
        EXPECT(0xd2, gbc.l());
        EXPECT(0xe63b, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xa0, gbc.readMem(0xe63b));
        EXPECT(0x58, gbc.readMem(0xe63c));
        // DF 013C
        gbc.setState(0x9043, 0xd59f, 0x2ba0, 0xdf6d, 0xa602, 0x3011, 0x1, 0x0);
        gbc.writeMem(0x9043, { 0xdf });
        gbc.writeMem(0xd59d, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x2b, gbc.a());
        EXPECT(0xdf, gbc.b());
        EXPECT(0x6d, gbc.c());
        EXPECT(0xa6, gbc.d());
        EXPECT(0x2, gbc.e());
        EXPECT(0x30, gbc.h());
        EXPECT(0x11, gbc.l());
        EXPECT(0xd59d, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0x9043));
        EXPECT(0x44, gbc.readMem(0xd59d));
        EXPECT(0x90, gbc.readMem(0xd59e));
        // DF 013E
        gbc.setState(0xedc7, 0x991c, 0x6dd0, 0x3c72, 0x7170, 0x1bd9, 0x1, 0x1);
        gbc.writeMem(0x991a, { 0x0, 0x0 });
        gbc.writeMem(0xedc7, { 0xdf });
        gbc.step();
        EXPECT(0x6d, gbc.a());
        EXPECT(0x3c, gbc.b());
        EXPECT(0x72, gbc.c());
        EXPECT(0x71, gbc.d());
        EXPECT(0x70, gbc.e());
        EXPECT(0x1b, gbc.h());
        EXPECT(0xd9, gbc.l());
        EXPECT(0x991a, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xc8, gbc.readMem(0x991a));
        EXPECT(0xed, gbc.readMem(0x991b));
        EXPECT(0xdf, gbc.readMem(0xedc7));
        // DF 013F
        gbc.setState(0xc8a3, 0xdb2b, 0x9fe0, 0xb831, 0x7858, 0x41be, 0x0, 0x1);
        gbc.writeMem(0xc8a3, { 0xdf });
        gbc.writeMem(0xdb29, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x9f, gbc.a());
        EXPECT(0xb8, gbc.b());
        EXPECT(0x31, gbc.c());
        EXPECT(0x78, gbc.d());
        EXPECT(0x58, gbc.e());
        EXPECT(0x41, gbc.h());
        EXPECT(0xbe, gbc.l());
        EXPECT(0xdb29, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0xc8a3));
        EXPECT(0xa4, gbc.readMem(0xdb29));
        EXPECT(0xc8, gbc.readMem(0xdb2a));
        // DF 0140
        gbc.setState(0x84aa, 0xe31a, 0x5e60, 0x7acd, 0x7791, 0x7f24, 0x1, 0x0);
        gbc.writeMem(0x84aa, { 0xdf });
        gbc.writeMem(0xe318, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x5e, gbc.a());
        EXPECT(0x7a, gbc.b());
        EXPECT(0xcd, gbc.c());
        EXPECT(0x77, gbc.d());
        EXPECT(0x91, gbc.e());
        EXPECT(0x7f, gbc.h());
        EXPECT(0x24, gbc.l());
        EXPECT(0xe318, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0x84aa));
        EXPECT(0xab, gbc.readMem(0xe318));
        EXPECT(0x84, gbc.readMem(0xe319));
        // DF 0141
        gbc.setState(0x3b9a, 0x864d, 0xfd70, 0xadde, 0xb128, 0x95fb, 0x0, 0x1);
        gbc.writeMem(0x3b9a, { 0xdf });
        gbc.writeMem(0x864b, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xfd, gbc.a());
        EXPECT(0xad, gbc.b());
        EXPECT(0xde, gbc.c());
        EXPECT(0xb1, gbc.d());
        EXPECT(0x28, gbc.e());
        EXPECT(0x95, gbc.h());
        EXPECT(0xfb, gbc.l());
        EXPECT(0x864b, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x9b, gbc.readMem(0x864b));
        EXPECT(0x3b, gbc.readMem(0x864c));
        // DF 0143
        gbc.setState(0xbc5a, 0xf0a5, 0xa240, 0x109a, 0x5ca1, 0x3f4f, 0x1, 0x1);
        gbc.writeMem(0xbc5a, { 0xdf });
        gbc.writeMem(0xf0a3, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xa2, gbc.a());
        EXPECT(0x10, gbc.b());
        EXPECT(0x9a, gbc.c());
        EXPECT(0x5c, gbc.d());
        EXPECT(0xa1, gbc.e());
        EXPECT(0x3f, gbc.h());
        EXPECT(0x4f, gbc.l());
        EXPECT(0xf0a3, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0xbc5a));
        EXPECT(0x5b, gbc.readMem(0xf0a3));
        EXPECT(0xbc, gbc.readMem(0xf0a4));
        // DF 0148
        gbc.setState(0xe466, 0x8f32, 0xb4b0, 0x97c4, 0xd308, 0xde09, 0x1, 0x0);
        gbc.writeMem(0x8f30, { 0x0, 0x0 });
        gbc.writeMem(0xe466, { 0xdf });
        gbc.step();
        EXPECT(0xb4, gbc.a());
        EXPECT(0x97, gbc.b());
        EXPECT(0xc4, gbc.c());
        EXPECT(0xd3, gbc.d());
        EXPECT(0x8, gbc.e());
        EXPECT(0xde, gbc.h());
        EXPECT(0x9, gbc.l());
        EXPECT(0x8f30, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x67, gbc.readMem(0x8f30));
        EXPECT(0xe4, gbc.readMem(0x8f31));
        EXPECT(0xdf, gbc.readMem(0xe466));
        // DF 0149
        gbc.setState(0xec8a, 0xec59, 0x8600, 0xc8b3, 0x4139, 0xc3cb, 0x1, 0x0);
        gbc.writeMem(0xec57, { 0x0, 0x0 });
        gbc.writeMem(0xec8a, { 0xdf });
        gbc.step();
        EXPECT(0x86, gbc.a());
        EXPECT(0xc8, gbc.b());
        EXPECT(0xb3, gbc.c());
        EXPECT(0x41, gbc.d());
        EXPECT(0x39, gbc.e());
        EXPECT(0xc3, gbc.h());
        EXPECT(0xcb, gbc.l());
        EXPECT(0xec57, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x8b, gbc.readMem(0xec57));
        EXPECT(0xec, gbc.readMem(0xec58));
        EXPECT(0xdf, gbc.readMem(0xec8a));
        // DF 014A
        gbc.setState(0xa2ae, 0x9756, 0x40f0, 0x8e82, 0xb7ab, 0x565a, 0x0, 0x1);
        gbc.writeMem(0x9754, { 0x0, 0x0 });
        gbc.writeMem(0xa2ae, { 0xdf });
        gbc.step();
        EXPECT(0x40, gbc.a());
        EXPECT(0x8e, gbc.b());
        EXPECT(0x82, gbc.c());
        EXPECT(0xb7, gbc.d());
        EXPECT(0xab, gbc.e());
        EXPECT(0x56, gbc.h());
        EXPECT(0x5a, gbc.l());
        EXPECT(0x9754, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x9754));
        EXPECT(0xa2, gbc.readMem(0x9755));
        EXPECT(0xdf, gbc.readMem(0xa2ae));
        // DF 014B
        gbc.setState(0xe578, 0xcc46, 0x7c70, 0x1d5a, 0x1fce, 0x2010, 0x1, 0x0);
        gbc.writeMem(0xcc44, { 0x0, 0x0 });
        gbc.writeMem(0xe578, { 0xdf });
        gbc.step();
        EXPECT(0x7c, gbc.a());
        EXPECT(0x1d, gbc.b());
        EXPECT(0x5a, gbc.c());
        EXPECT(0x1f, gbc.d());
        EXPECT(0xce, gbc.e());
        EXPECT(0x20, gbc.h());
        EXPECT(0x10, gbc.l());
        EXPECT(0xcc44, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x79, gbc.readMem(0xcc44));
        EXPECT(0xe5, gbc.readMem(0xcc45));
        EXPECT(0xdf, gbc.readMem(0xe578));
        // DF 014D
        gbc.setState(0x85b4, 0xe8b4, 0x1a70, 0xf58a, 0x88be, 0x70d7, 0x0, 0x0);
        gbc.writeMem(0x85b4, { 0xdf });
        gbc.writeMem(0xe8b2, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x1a, gbc.a());
        EXPECT(0xf5, gbc.b());
        EXPECT(0x8a, gbc.c());
        EXPECT(0x88, gbc.d());
        EXPECT(0xbe, gbc.e());
        EXPECT(0x70, gbc.h());
        EXPECT(0xd7, gbc.l());
        EXPECT(0xe8b2, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0x85b4));
        EXPECT(0xb5, gbc.readMem(0xe8b2));
        EXPECT(0x85, gbc.readMem(0xe8b3));
        // DF 014E
        gbc.setState(0x7689, 0xf525, 0xad00, 0x9ed8, 0xaf74, 0xe3bd, 0x0, 0x0);
        gbc.writeMem(0x7689, { 0xdf });
        gbc.writeMem(0xf523, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xad, gbc.a());
        EXPECT(0x9e, gbc.b());
        EXPECT(0xd8, gbc.c());
        EXPECT(0xaf, gbc.d());
        EXPECT(0x74, gbc.e());
        EXPECT(0xe3, gbc.h());
        EXPECT(0xbd, gbc.l());
        EXPECT(0xf523, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x8a, gbc.readMem(0xf523));
        EXPECT(0x76, gbc.readMem(0xf524));
        // DF 0153
        gbc.setState(0x7f87, 0xac25, 0xe470, 0x6a04, 0xbab6, 0x7080, 0x0, 0x1);
        gbc.writeMem(0x7f87, { 0xdf });
        gbc.writeMem(0xac23, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xe4, gbc.a());
        EXPECT(0x6a, gbc.b());
        EXPECT(0x4, gbc.c());
        EXPECT(0xba, gbc.d());
        EXPECT(0xb6, gbc.e());
        EXPECT(0x70, gbc.h());
        EXPECT(0x80, gbc.l());
        EXPECT(0xac23, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x88, gbc.readMem(0xac23));
        EXPECT(0x7f, gbc.readMem(0xac24));
        // DF 0155
        gbc.setState(0x34e2, 0xaddd, 0xa340, 0x5bbe, 0x25b7, 0xe215, 0x0, 0x0);
        gbc.writeMem(0x34e2, { 0xdf });
        gbc.writeMem(0xaddb, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xa3, gbc.a());
        EXPECT(0x5b, gbc.b());
        EXPECT(0xbe, gbc.c());
        EXPECT(0x25, gbc.d());
        EXPECT(0xb7, gbc.e());
        EXPECT(0xe2, gbc.h());
        EXPECT(0x15, gbc.l());
        EXPECT(0xaddb, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xe3, gbc.readMem(0xaddb));
        EXPECT(0x34, gbc.readMem(0xaddc));
        // DF 015B
        gbc.setState(0x7492, 0xcf9b, 0x67d0, 0x642a, 0x6761, 0xe252, 0x0, 0x0);
        gbc.writeMem(0x7492, { 0xdf });
        gbc.writeMem(0xcf99, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x67, gbc.a());
        EXPECT(0x64, gbc.b());
        EXPECT(0x2a, gbc.c());
        EXPECT(0x67, gbc.d());
        EXPECT(0x61, gbc.e());
        EXPECT(0xe2, gbc.h());
        EXPECT(0x52, gbc.l());
        EXPECT(0xcf99, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x93, gbc.readMem(0xcf99));
        EXPECT(0x74, gbc.readMem(0xcf9a));
        // DF 015D
        gbc.setState(0x57f3, 0xfed5, 0x87e0, 0xdf58, 0x7008, 0xab6e, 0x0, 0x1);
        gbc.writeMem(0x57f3, { 0xdf });
        gbc.writeMem(0xfed3, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x87, gbc.a());
        EXPECT(0xdf, gbc.b());
        EXPECT(0x58, gbc.c());
        EXPECT(0x70, gbc.d());
        EXPECT(0x8, gbc.e());
        EXPECT(0xab, gbc.h());
        EXPECT(0x6e, gbc.l());
        EXPECT(0xfed3, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xf4, gbc.readMem(0xfed3));
        EXPECT(0x57, gbc.readMem(0xfed4));
        // DF 0160
        gbc.setState(0x215a, 0xa47c, 0xd1f0, 0xf917, 0xf571, 0x3473, 0x1, 0x1);
        gbc.writeMem(0x215a, { 0xdf });
        gbc.writeMem(0xa47a, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xd1, gbc.a());
        EXPECT(0xf9, gbc.b());
        EXPECT(0x17, gbc.c());
        EXPECT(0xf5, gbc.d());
        EXPECT(0x71, gbc.e());
        EXPECT(0x34, gbc.h());
        EXPECT(0x73, gbc.l());
        EXPECT(0xa47a, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x5b, gbc.readMem(0xa47a));
        EXPECT(0x21, gbc.readMem(0xa47b));
        // DF 0162
        gbc.setState(0x7c12, 0xb843, 0xa610, 0x529e, 0x4d48, 0x4d75, 0x1, 0x0);
        gbc.writeMem(0x7c12, { 0xdf });
        gbc.writeMem(0xb841, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xa6, gbc.a());
        EXPECT(0x52, gbc.b());
        EXPECT(0x9e, gbc.c());
        EXPECT(0x4d, gbc.d());
        EXPECT(0x48, gbc.e());
        EXPECT(0x4d, gbc.h());
        EXPECT(0x75, gbc.l());
        EXPECT(0xb841, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x13, gbc.readMem(0xb841));
        EXPECT(0x7c, gbc.readMem(0xb842));
        // DF 0166
        gbc.setState(0xe53a, 0xb3cf, 0x3400, 0x488, 0x3dd2, 0xb70c, 0x0, 0x0);
        gbc.writeMem(0xb3cd, { 0x0, 0x0 });
        gbc.writeMem(0xe53a, { 0xdf });
        gbc.step();
        EXPECT(0x34, gbc.a());
        EXPECT(0x4, gbc.b());
        EXPECT(0x88, gbc.c());
        EXPECT(0x3d, gbc.d());
        EXPECT(0xd2, gbc.e());
        EXPECT(0xb7, gbc.h());
        EXPECT(0xc, gbc.l());
        EXPECT(0xb3cd, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x3b, gbc.readMem(0xb3cd));
        EXPECT(0xe5, gbc.readMem(0xb3ce));
        EXPECT(0xdf, gbc.readMem(0xe53a));
        // DF 0169
        gbc.setState(0x36c4, 0xe60b, 0x2f30, 0x26d9, 0x4131, 0x2af2, 0x1, 0x0);
        gbc.writeMem(0x36c4, { 0xdf });
        gbc.writeMem(0xe609, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x2f, gbc.a());
        EXPECT(0x26, gbc.b());
        EXPECT(0xd9, gbc.c());
        EXPECT(0x41, gbc.d());
        EXPECT(0x31, gbc.e());
        EXPECT(0x2a, gbc.h());
        EXPECT(0xf2, gbc.l());
        EXPECT(0xe609, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xc5, gbc.readMem(0xe609));
        EXPECT(0x36, gbc.readMem(0xe60a));
        // DF 016A
        gbc.setState(0x24c3, 0xb0c0, 0x6280, 0xc28c, 0xbd6c, 0xbf7e, 0x1, 0x0);
        gbc.writeMem(0x24c3, { 0xdf });
        gbc.writeMem(0xb0be, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x62, gbc.a());
        EXPECT(0xc2, gbc.b());
        EXPECT(0x8c, gbc.c());
        EXPECT(0xbd, gbc.d());
        EXPECT(0x6c, gbc.e());
        EXPECT(0xbf, gbc.h());
        EXPECT(0x7e, gbc.l());
        EXPECT(0xb0be, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xc4, gbc.readMem(0xb0be));
        EXPECT(0x24, gbc.readMem(0xb0bf));
        // DF 016C
        gbc.setState(0x2af2, 0xe51b, 0xcb10, 0x1c5a, 0x781a, 0x6967, 0x0, 0x0);
        gbc.writeMem(0x2af2, { 0xdf });
        gbc.writeMem(0xe519, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xcb, gbc.a());
        EXPECT(0x1c, gbc.b());
        EXPECT(0x5a, gbc.c());
        EXPECT(0x78, gbc.d());
        EXPECT(0x1a, gbc.e());
        EXPECT(0x69, gbc.h());
        EXPECT(0x67, gbc.l());
        EXPECT(0xe519, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xf3, gbc.readMem(0xe519));
        EXPECT(0x2a, gbc.readMem(0xe51a));
        // DF 016D
        gbc.setState(0xeb45, 0x9a23, 0xea90, 0x7d0c, 0x589d, 0xf3a3, 0x1, 0x0);
        gbc.writeMem(0x9a21, { 0x0, 0x0 });
        gbc.writeMem(0xeb45, { 0xdf });
        gbc.step();
        EXPECT(0xea, gbc.a());
        EXPECT(0x7d, gbc.b());
        EXPECT(0xc, gbc.c());
        EXPECT(0x58, gbc.d());
        EXPECT(0x9d, gbc.e());
        EXPECT(0xf3, gbc.h());
        EXPECT(0xa3, gbc.l());
        EXPECT(0x9a21, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x46, gbc.readMem(0x9a21));
        EXPECT(0xeb, gbc.readMem(0x9a22));
        EXPECT(0xdf, gbc.readMem(0xeb45));
        // DF 016F
        gbc.setState(0xc276, 0x8077, 0xb100, 0xa1ad, 0xa260, 0xebcd, 0x0, 0x0);
        gbc.writeMem(0x8075, { 0x0, 0x0 });
        gbc.writeMem(0xc276, { 0xdf });
        gbc.step();
        EXPECT(0xb1, gbc.a());
        EXPECT(0xa1, gbc.b());
        EXPECT(0xad, gbc.c());
        EXPECT(0xa2, gbc.d());
        EXPECT(0x60, gbc.e());
        EXPECT(0xeb, gbc.h());
        EXPECT(0xcd, gbc.l());
        EXPECT(0x8075, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x77, gbc.readMem(0x8075));
        EXPECT(0xc2, gbc.readMem(0x8076));
        EXPECT(0xdf, gbc.readMem(0xc276));
        // DF 0170
        gbc.setState(0xbe26, 0xd02d, 0xb120, 0xd621, 0x1c78, 0xe122, 0x0, 0x1);
        gbc.writeMem(0xbe26, { 0xdf });
        gbc.writeMem(0xd02b, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xb1, gbc.a());
        EXPECT(0xd6, gbc.b());
        EXPECT(0x21, gbc.c());
        EXPECT(0x1c, gbc.d());
        EXPECT(0x78, gbc.e());
        EXPECT(0xe1, gbc.h());
        EXPECT(0x22, gbc.l());
        EXPECT(0xd02b, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0xbe26));
        EXPECT(0x27, gbc.readMem(0xd02b));
        EXPECT(0xbe, gbc.readMem(0xd02c));
        // DF 0171
        gbc.setState(0x4296, 0xa6f2, 0xd510, 0x6fb5, 0xb836, 0x16e4, 0x1, 0x0);
        gbc.writeMem(0x4296, { 0xdf });
        gbc.writeMem(0xa6f0, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xd5, gbc.a());
        EXPECT(0x6f, gbc.b());
        EXPECT(0xb5, gbc.c());
        EXPECT(0xb8, gbc.d());
        EXPECT(0x36, gbc.e());
        EXPECT(0x16, gbc.h());
        EXPECT(0xe4, gbc.l());
        EXPECT(0xa6f0, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x97, gbc.readMem(0xa6f0));
        EXPECT(0x42, gbc.readMem(0xa6f1));
        // DF 0172
        gbc.setState(0xd466, 0xe8b3, 0x4650, 0xff43, 0xef51, 0x6790, 0x0, 0x0);
        gbc.writeMem(0xd466, { 0xdf });
        gbc.writeMem(0xe8b1, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x46, gbc.a());
        EXPECT(0xff, gbc.b());
        EXPECT(0x43, gbc.c());
        EXPECT(0xef, gbc.d());
        EXPECT(0x51, gbc.e());
        EXPECT(0x67, gbc.h());
        EXPECT(0x90, gbc.l());
        EXPECT(0xe8b1, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0xd466));
        EXPECT(0x67, gbc.readMem(0xe8b1));
        EXPECT(0xd4, gbc.readMem(0xe8b2));
        // DF 0173
        gbc.setState(0xd624, 0xb8d8, 0xbaa0, 0xde78, 0x3cc5, 0x4a06, 0x1, 0x1);
        gbc.writeMem(0xb8d6, { 0x0, 0x0 });
        gbc.writeMem(0xd624, { 0xdf });
        gbc.step();
        EXPECT(0xba, gbc.a());
        EXPECT(0xde, gbc.b());
        EXPECT(0x78, gbc.c());
        EXPECT(0x3c, gbc.d());
        EXPECT(0xc5, gbc.e());
        EXPECT(0x4a, gbc.h());
        EXPECT(0x6, gbc.l());
        EXPECT(0xb8d6, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x25, gbc.readMem(0xb8d6));
        EXPECT(0xd6, gbc.readMem(0xb8d7));
        EXPECT(0xdf, gbc.readMem(0xd624));
        // DF 0174
        gbc.setState(0xe96e, 0x82a1, 0xc4b0, 0x7ac7, 0x5e84, 0x6284, 0x0, 0x0);
        gbc.writeMem(0x829f, { 0x0, 0x0 });
        gbc.writeMem(0xe96e, { 0xdf });
        gbc.step();
        EXPECT(0xc4, gbc.a());
        EXPECT(0x7a, gbc.b());
        EXPECT(0xc7, gbc.c());
        EXPECT(0x5e, gbc.d());
        EXPECT(0x84, gbc.e());
        EXPECT(0x62, gbc.h());
        EXPECT(0x84, gbc.l());
        EXPECT(0x829f, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x6f, gbc.readMem(0x829f));
        EXPECT(0xe9, gbc.readMem(0x82a0));
        EXPECT(0xdf, gbc.readMem(0xe96e));
        // DF 0176
        gbc.setState(0xabc9, 0xd0ec, 0x24a0, 0x1279, 0xa007, 0x5070, 0x1, 0x0);
        gbc.writeMem(0xabc9, { 0xdf });
        gbc.writeMem(0xd0ea, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x24, gbc.a());
        EXPECT(0x12, gbc.b());
        EXPECT(0x79, gbc.c());
        EXPECT(0xa0, gbc.d());
        EXPECT(0x7, gbc.e());
        EXPECT(0x50, gbc.h());
        EXPECT(0x70, gbc.l());
        EXPECT(0xd0ea, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0xabc9));
        EXPECT(0xca, gbc.readMem(0xd0ea));
        EXPECT(0xab, gbc.readMem(0xd0eb));
        // DF 0177
        gbc.setState(0xe48c, 0xac8b, 0x85a0, 0x795f, 0x1b22, 0x20c1, 0x1, 0x0);
        gbc.writeMem(0xac89, { 0x0, 0x0 });
        gbc.writeMem(0xe48c, { 0xdf });
        gbc.step();
        EXPECT(0x85, gbc.a());
        EXPECT(0x79, gbc.b());
        EXPECT(0x5f, gbc.c());
        EXPECT(0x1b, gbc.d());
        EXPECT(0x22, gbc.e());
        EXPECT(0x20, gbc.h());
        EXPECT(0xc1, gbc.l());
        EXPECT(0xac89, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x8d, gbc.readMem(0xac89));
        EXPECT(0xe4, gbc.readMem(0xac8a));
        EXPECT(0xdf, gbc.readMem(0xe48c));
        // DF 0179
        gbc.setState(0x5e3a, 0xae0a, 0x7d30, 0xaf, 0x1f8b, 0xc94b, 0x1, 0x0);
        gbc.writeMem(0x5e3a, { 0xdf });
        gbc.writeMem(0xae08, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x7d, gbc.a());
        EXPECT(0x0, gbc.b());
        EXPECT(0xaf, gbc.c());
        EXPECT(0x1f, gbc.d());
        EXPECT(0x8b, gbc.e());
        EXPECT(0xc9, gbc.h());
        EXPECT(0x4b, gbc.l());
        EXPECT(0xae08, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x3b, gbc.readMem(0xae08));
        EXPECT(0x5e, gbc.readMem(0xae09));
        // DF 017B
        gbc.setState(0x9a9e, 0xfa3f, 0xc340, 0xae46, 0x4590, 0xd7f6, 0x0, 0x0);
        gbc.writeMem(0x9a9e, { 0xdf });
        gbc.writeMem(0xfa3d, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xc3, gbc.a());
        EXPECT(0xae, gbc.b());
        EXPECT(0x46, gbc.c());
        EXPECT(0x45, gbc.d());
        EXPECT(0x90, gbc.e());
        EXPECT(0xd7, gbc.h());
        EXPECT(0xf6, gbc.l());
        EXPECT(0xfa3d, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0x9a9e));
        EXPECT(0x9f, gbc.readMem(0xfa3d));
        EXPECT(0x9a, gbc.readMem(0xfa3e));
        // DF 017D
        gbc.setState(0x671c, 0xdc72, 0x6e0, 0x7581, 0x30af, 0xe88d, 0x0, 0x1);
        gbc.writeMem(0x671c, { 0xdf });
        gbc.writeMem(0xdc70, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x6, gbc.a());
        EXPECT(0x75, gbc.b());
        EXPECT(0x81, gbc.c());
        EXPECT(0x30, gbc.d());
        EXPECT(0xaf, gbc.e());
        EXPECT(0xe8, gbc.h());
        EXPECT(0x8d, gbc.l());
        EXPECT(0xdc70, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x1d, gbc.readMem(0xdc70));
        EXPECT(0x67, gbc.readMem(0xdc71));
        // DF 0180
        gbc.setState(0x6f40, 0xe6e9, 0xef10, 0x58fa, 0xed7f, 0x2533, 0x1, 0x0);
        gbc.writeMem(0x6f40, { 0xdf });
        gbc.writeMem(0xe6e7, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xef, gbc.a());
        EXPECT(0x58, gbc.b());
        EXPECT(0xfa, gbc.c());
        EXPECT(0xed, gbc.d());
        EXPECT(0x7f, gbc.e());
        EXPECT(0x25, gbc.h());
        EXPECT(0x33, gbc.l());
        EXPECT(0xe6e7, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x41, gbc.readMem(0xe6e7));
        EXPECT(0x6f, gbc.readMem(0xe6e8));
        // DF 0181
        gbc.setState(0x399d, 0xb3b6, 0x2940, 0x603f, 0x404a, 0x4bd5, 0x1, 0x0);
        gbc.writeMem(0x399d, { 0xdf });
        gbc.writeMem(0xb3b4, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x29, gbc.a());
        EXPECT(0x60, gbc.b());
        EXPECT(0x3f, gbc.c());
        EXPECT(0x40, gbc.d());
        EXPECT(0x4a, gbc.e());
        EXPECT(0x4b, gbc.h());
        EXPECT(0xd5, gbc.l());
        EXPECT(0xb3b4, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x9e, gbc.readMem(0xb3b4));
        EXPECT(0x39, gbc.readMem(0xb3b5));
        // DF 0182
        gbc.setState(0xcc78, 0xcf2b, 0x2890, 0x8cde, 0xd6bc, 0x2c29, 0x1, 0x1);
        gbc.writeMem(0xcc78, { 0xdf });
        gbc.writeMem(0xcf29, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x28, gbc.a());
        EXPECT(0x8c, gbc.b());
        EXPECT(0xde, gbc.c());
        EXPECT(0xd6, gbc.d());
        EXPECT(0xbc, gbc.e());
        EXPECT(0x2c, gbc.h());
        EXPECT(0x29, gbc.l());
        EXPECT(0xcf29, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0xcc78));
        EXPECT(0x79, gbc.readMem(0xcf29));
        EXPECT(0xcc, gbc.readMem(0xcf2a));
        // DF 0185
        gbc.setState(0x4977, 0xc3d6, 0x39f0, 0x74d9, 0x237a, 0xc55c, 0x0, 0x0);
        gbc.writeMem(0x4977, { 0xdf });
        gbc.writeMem(0xc3d4, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x39, gbc.a());
        EXPECT(0x74, gbc.b());
        EXPECT(0xd9, gbc.c());
        EXPECT(0x23, gbc.d());
        EXPECT(0x7a, gbc.e());
        EXPECT(0xc5, gbc.h());
        EXPECT(0x5c, gbc.l());
        EXPECT(0xc3d4, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x78, gbc.readMem(0xc3d4));
        EXPECT(0x49, gbc.readMem(0xc3d5));
        // DF 0187
        gbc.setState(0x6736, 0xcfcb, 0x1180, 0xaffe, 0x4a6f, 0x9ef, 0x1, 0x0);
        gbc.writeMem(0x6736, { 0xdf });
        gbc.writeMem(0xcfc9, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x11, gbc.a());
        EXPECT(0xaf, gbc.b());
        EXPECT(0xfe, gbc.c());
        EXPECT(0x4a, gbc.d());
        EXPECT(0x6f, gbc.e());
        EXPECT(0x9, gbc.h());
        EXPECT(0xef, gbc.l());
        EXPECT(0xcfc9, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x37, gbc.readMem(0xcfc9));
        EXPECT(0x67, gbc.readMem(0xcfca));
        // DF 0189
        gbc.setState(0xafbb, 0xe1d9, 0xff30, 0x9c61, 0xee48, 0x1517, 0x1, 0x0);
        gbc.writeMem(0xafbb, { 0xdf });
        gbc.writeMem(0xe1d7, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xff, gbc.a());
        EXPECT(0x9c, gbc.b());
        EXPECT(0x61, gbc.c());
        EXPECT(0xee, gbc.d());
        EXPECT(0x48, gbc.e());
        EXPECT(0x15, gbc.h());
        EXPECT(0x17, gbc.l());
        EXPECT(0xe1d7, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0xafbb));
        EXPECT(0xbc, gbc.readMem(0xe1d7));
        EXPECT(0xaf, gbc.readMem(0xe1d8));
        // DF 018B
        gbc.setState(0x5972, 0xa375, 0xab40, 0x7fc1, 0xfd73, 0x9b40, 0x1, 0x1);
        gbc.writeMem(0x5972, { 0xdf });
        gbc.writeMem(0xa373, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xab, gbc.a());
        EXPECT(0x7f, gbc.b());
        EXPECT(0xc1, gbc.c());
        EXPECT(0xfd, gbc.d());
        EXPECT(0x73, gbc.e());
        EXPECT(0x9b, gbc.h());
        EXPECT(0x40, gbc.l());
        EXPECT(0xa373, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x73, gbc.readMem(0xa373));
        EXPECT(0x59, gbc.readMem(0xa374));
        // DF 018C
        gbc.setState(0xb298, 0xbbc8, 0x5fe0, 0xf598, 0xe898, 0xf17d, 0x1, 0x0);
        gbc.writeMem(0xb298, { 0xdf });
        gbc.writeMem(0xbbc6, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x5f, gbc.a());
        EXPECT(0xf5, gbc.b());
        EXPECT(0x98, gbc.c());
        EXPECT(0xe8, gbc.d());
        EXPECT(0x98, gbc.e());
        EXPECT(0xf1, gbc.h());
        EXPECT(0x7d, gbc.l());
        EXPECT(0xbbc6, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0xb298));
        EXPECT(0x99, gbc.readMem(0xbbc6));
        EXPECT(0xb2, gbc.readMem(0xbbc7));
        // DF 018D
        gbc.setState(0xca0d, 0xb96b, 0x9120, 0xd38f, 0x4369, 0x158b, 0x1, 0x1);
        gbc.writeMem(0xb969, { 0x0, 0x0 });
        gbc.writeMem(0xca0d, { 0xdf });
        gbc.step();
        EXPECT(0x91, gbc.a());
        EXPECT(0xd3, gbc.b());
        EXPECT(0x8f, gbc.c());
        EXPECT(0x43, gbc.d());
        EXPECT(0x69, gbc.e());
        EXPECT(0x15, gbc.h());
        EXPECT(0x8b, gbc.l());
        EXPECT(0xb969, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xe, gbc.readMem(0xb969));
        EXPECT(0xca, gbc.readMem(0xb96a));
        EXPECT(0xdf, gbc.readMem(0xca0d));
        // DF 018F
        gbc.setState(0x2157, 0xcf90, 0xd980, 0x334c, 0xa933, 0x1ae5, 0x0, 0x0);
        gbc.writeMem(0x2157, { 0xdf });
        gbc.writeMem(0xcf8e, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xd9, gbc.a());
        EXPECT(0x33, gbc.b());
        EXPECT(0x4c, gbc.c());
        EXPECT(0xa9, gbc.d());
        EXPECT(0x33, gbc.e());
        EXPECT(0x1a, gbc.h());
        EXPECT(0xe5, gbc.l());
        EXPECT(0xcf8e, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x58, gbc.readMem(0xcf8e));
        EXPECT(0x21, gbc.readMem(0xcf8f));
        // DF 0191
        gbc.setState(0x6ff8, 0xf400, 0x5700, 0xfe52, 0x6b20, 0x1749, 0x0, 0x1);
        gbc.writeMem(0x6ff8, { 0xdf });
        gbc.writeMem(0xf3fe, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x57, gbc.a());
        EXPECT(0xfe, gbc.b());
        EXPECT(0x52, gbc.c());
        EXPECT(0x6b, gbc.d());
        EXPECT(0x20, gbc.e());
        EXPECT(0x17, gbc.h());
        EXPECT(0x49, gbc.l());
        EXPECT(0xf3fe, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xf9, gbc.readMem(0xf3fe));
        EXPECT(0x6f, gbc.readMem(0xf3ff));
        // DF 0192
        gbc.setState(0x42ce, 0xd15e, 0x8f80, 0x5090, 0xddc2, 0x7b5b, 0x1, 0x1);
        gbc.writeMem(0x42ce, { 0xdf });
        gbc.writeMem(0xd15c, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x8f, gbc.a());
        EXPECT(0x50, gbc.b());
        EXPECT(0x90, gbc.c());
        EXPECT(0xdd, gbc.d());
        EXPECT(0xc2, gbc.e());
        EXPECT(0x7b, gbc.h());
        EXPECT(0x5b, gbc.l());
        EXPECT(0xd15c, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0xd15c));
        EXPECT(0x42, gbc.readMem(0xd15d));
        // DF 0193
        gbc.setState(0x93d4, 0xded8, 0xce40, 0xb45, 0x3e44, 0x11b5, 0x1, 0x1);
        gbc.writeMem(0x93d4, { 0xdf });
        gbc.writeMem(0xded6, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xce, gbc.a());
        EXPECT(0xb, gbc.b());
        EXPECT(0x45, gbc.c());
        EXPECT(0x3e, gbc.d());
        EXPECT(0x44, gbc.e());
        EXPECT(0x11, gbc.h());
        EXPECT(0xb5, gbc.l());
        EXPECT(0xded6, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0x93d4));
        EXPECT(0xd5, gbc.readMem(0xded6));
        EXPECT(0x93, gbc.readMem(0xded7));
        // DF 0194
        gbc.setState(0xe813, 0xc06c, 0x9d10, 0xab95, 0xb9a4, 0x61c8, 0x0, 0x1);
        gbc.writeMem(0xc06a, { 0x0, 0x0 });
        gbc.writeMem(0xe813, { 0xdf });
        gbc.step();
        EXPECT(0x9d, gbc.a());
        EXPECT(0xab, gbc.b());
        EXPECT(0x95, gbc.c());
        EXPECT(0xb9, gbc.d());
        EXPECT(0xa4, gbc.e());
        EXPECT(0x61, gbc.h());
        EXPECT(0xc8, gbc.l());
        EXPECT(0xc06a, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x14, gbc.readMem(0xc06a));
        EXPECT(0xe8, gbc.readMem(0xc06b));
        EXPECT(0xdf, gbc.readMem(0xe813));
        // DF 0195
        gbc.setState(0xac4c, 0x8ce7, 0xd9d0, 0x4c8f, 0x1a96, 0x6e03, 0x1, 0x0);
        gbc.writeMem(0x8ce5, { 0x0, 0x0 });
        gbc.writeMem(0xac4c, { 0xdf });
        gbc.step();
        EXPECT(0xd9, gbc.a());
        EXPECT(0x4c, gbc.b());
        EXPECT(0x8f, gbc.c());
        EXPECT(0x1a, gbc.d());
        EXPECT(0x96, gbc.e());
        EXPECT(0x6e, gbc.h());
        EXPECT(0x3, gbc.l());
        EXPECT(0x8ce5, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x4d, gbc.readMem(0x8ce5));
        EXPECT(0xac, gbc.readMem(0x8ce6));
        EXPECT(0xdf, gbc.readMem(0xac4c));
        // DF 0197
        gbc.setState(0x1ee3, 0x9c11, 0x7bf0, 0xbfc6, 0x22ae, 0xe5c8, 0x0, 0x1);
        gbc.writeMem(0x1ee3, { 0xdf });
        gbc.writeMem(0x9c0f, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x7b, gbc.a());
        EXPECT(0xbf, gbc.b());
        EXPECT(0xc6, gbc.c());
        EXPECT(0x22, gbc.d());
        EXPECT(0xae, gbc.e());
        EXPECT(0xe5, gbc.h());
        EXPECT(0xc8, gbc.l());
        EXPECT(0x9c0f, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xe4, gbc.readMem(0x9c0f));
        EXPECT(0x1e, gbc.readMem(0x9c10));
        // DF 0198
        gbc.setState(0xa922, 0x8f5c, 0xdc50, 0x3c9c, 0xdc85, 0x2788, 0x0, 0x0);
        gbc.writeMem(0x8f5a, { 0x0, 0x0 });
        gbc.writeMem(0xa922, { 0xdf });
        gbc.step();
        EXPECT(0xdc, gbc.a());
        EXPECT(0x3c, gbc.b());
        EXPECT(0x9c, gbc.c());
        EXPECT(0xdc, gbc.d());
        EXPECT(0x85, gbc.e());
        EXPECT(0x27, gbc.h());
        EXPECT(0x88, gbc.l());
        EXPECT(0x8f5a, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x23, gbc.readMem(0x8f5a));
        EXPECT(0xa9, gbc.readMem(0x8f5b));
        EXPECT(0xdf, gbc.readMem(0xa922));
        // DF 0199
        gbc.setState(0x60a7, 0xdfe4, 0x8d40, 0xbe2b, 0x438b, 0x9b0f, 0x1, 0x0);
        gbc.writeMem(0x60a7, { 0xdf });
        gbc.writeMem(0xdfe2, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x8d, gbc.a());
        EXPECT(0xbe, gbc.b());
        EXPECT(0x2b, gbc.c());
        EXPECT(0x43, gbc.d());
        EXPECT(0x8b, gbc.e());
        EXPECT(0x9b, gbc.h());
        EXPECT(0xf, gbc.l());
        EXPECT(0xdfe2, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xa8, gbc.readMem(0xdfe2));
        EXPECT(0x60, gbc.readMem(0xdfe3));
        // DF 019A
        gbc.setState(0x9056, 0x95fe, 0x6320, 0xd0cc, 0xf051, 0x2b85, 0x1, 0x0);
        gbc.writeMem(0x9056, { 0xdf });
        gbc.writeMem(0x95fc, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x63, gbc.a());
        EXPECT(0xd0, gbc.b());
        EXPECT(0xcc, gbc.c());
        EXPECT(0xf0, gbc.d());
        EXPECT(0x51, gbc.e());
        EXPECT(0x2b, gbc.h());
        EXPECT(0x85, gbc.l());
        EXPECT(0x95fc, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0x9056));
        EXPECT(0x57, gbc.readMem(0x95fc));
        EXPECT(0x90, gbc.readMem(0x95fd));
        // DF 019B
        gbc.setState(0xb331, 0xec06, 0x5460, 0x380d, 0xf4dc, 0xa595, 0x1, 0x1);
        gbc.writeMem(0xb331, { 0xdf });
        gbc.writeMem(0xec04, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x54, gbc.a());
        EXPECT(0x38, gbc.b());
        EXPECT(0xd, gbc.c());
        EXPECT(0xf4, gbc.d());
        EXPECT(0xdc, gbc.e());
        EXPECT(0xa5, gbc.h());
        EXPECT(0x95, gbc.l());
        EXPECT(0xec04, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0xb331));
        EXPECT(0x32, gbc.readMem(0xec04));
        EXPECT(0xb3, gbc.readMem(0xec05));
        // DF 019D
        gbc.setState(0x384c, 0x9994, 0x91b0, 0xb555, 0xa704, 0x6fe2, 0x1, 0x1);
        gbc.writeMem(0x384c, { 0xdf });
        gbc.writeMem(0x9992, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x91, gbc.a());
        EXPECT(0xb5, gbc.b());
        EXPECT(0x55, gbc.c());
        EXPECT(0xa7, gbc.d());
        EXPECT(0x4, gbc.e());
        EXPECT(0x6f, gbc.h());
        EXPECT(0xe2, gbc.l());
        EXPECT(0x9992, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x4d, gbc.readMem(0x9992));
        EXPECT(0x38, gbc.readMem(0x9993));
        // DF 019E
        gbc.setState(0x8496, 0x81e0, 0x73d0, 0xdb6b, 0xabef, 0x9c70, 0x1, 0x1);
        gbc.writeMem(0x81de, { 0x0, 0x0 });
        gbc.writeMem(0x8496, { 0xdf });
        gbc.step();
        EXPECT(0x73, gbc.a());
        EXPECT(0xdb, gbc.b());
        EXPECT(0x6b, gbc.c());
        EXPECT(0xab, gbc.d());
        EXPECT(0xef, gbc.e());
        EXPECT(0x9c, gbc.h());
        EXPECT(0x70, gbc.l());
        EXPECT(0x81de, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x97, gbc.readMem(0x81de));
        EXPECT(0x84, gbc.readMem(0x81df));
        EXPECT(0xdf, gbc.readMem(0x8496));
        // DF 01A0
        gbc.setState(0x31ee, 0xc743, 0x4820, 0x6efa, 0x16d1, 0x2fcb, 0x1, 0x0);
        gbc.writeMem(0x31ee, { 0xdf });
        gbc.writeMem(0xc741, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x48, gbc.a());
        EXPECT(0x6e, gbc.b());
        EXPECT(0xfa, gbc.c());
        EXPECT(0x16, gbc.d());
        EXPECT(0xd1, gbc.e());
        EXPECT(0x2f, gbc.h());
        EXPECT(0xcb, gbc.l());
        EXPECT(0xc741, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xef, gbc.readMem(0xc741));
        EXPECT(0x31, gbc.readMem(0xc742));
        // DF 01A1
        gbc.setState(0x2b0d, 0xa816, 0x4a30, 0x497f, 0x3012, 0xa4de, 0x1, 0x0);
        gbc.writeMem(0x2b0d, { 0xdf });
        gbc.writeMem(0xa814, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x4a, gbc.a());
        EXPECT(0x49, gbc.b());
        EXPECT(0x7f, gbc.c());
        EXPECT(0x30, gbc.d());
        EXPECT(0x12, gbc.e());
        EXPECT(0xa4, gbc.h());
        EXPECT(0xde, gbc.l());
        EXPECT(0xa814, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xe, gbc.readMem(0xa814));
        EXPECT(0x2b, gbc.readMem(0xa815));
        // DF 01A5
        gbc.setState(0xd0, 0x8cfc, 0x1840, 0xf520, 0x1a3e, 0x7e65, 0x1, 0x0);
        gbc.writeMem(0xd0, { 0xdf });
        gbc.writeMem(0x8cfa, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x18, gbc.a());
        EXPECT(0xf5, gbc.b());
        EXPECT(0x20, gbc.c());
        EXPECT(0x1a, gbc.d());
        EXPECT(0x3e, gbc.e());
        EXPECT(0x7e, gbc.h());
        EXPECT(0x65, gbc.l());
        EXPECT(0x8cfa, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xd1, gbc.readMem(0x8cfa));
        EXPECT(0x0, gbc.readMem(0x8cfb));
        // DF 01A8
        gbc.setState(0x685c, 0xf42a, 0xf70, 0xe84d, 0x42ab, 0x6dad, 0x1, 0x0);
        gbc.writeMem(0x685c, { 0xdf });
        gbc.writeMem(0xf428, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xf, gbc.a());
        EXPECT(0xe8, gbc.b());
        EXPECT(0x4d, gbc.c());
        EXPECT(0x42, gbc.d());
        EXPECT(0xab, gbc.e());
        EXPECT(0x6d, gbc.h());
        EXPECT(0xad, gbc.l());
        EXPECT(0xf428, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x5d, gbc.readMem(0xf428));
        EXPECT(0x68, gbc.readMem(0xf429));
        // DF 01A9
        gbc.setState(0x36fc, 0xd3ab, 0x9460, 0xa207, 0xc052, 0x80a, 0x0, 0x0);
        gbc.writeMem(0x36fc, { 0xdf });
        gbc.writeMem(0xd3a9, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x94, gbc.a());
        EXPECT(0xa2, gbc.b());
        EXPECT(0x7, gbc.c());
        EXPECT(0xc0, gbc.d());
        EXPECT(0x52, gbc.e());
        EXPECT(0x8, gbc.h());
        EXPECT(0xa, gbc.l());
        EXPECT(0xd3a9, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xfd, gbc.readMem(0xd3a9));
        EXPECT(0x36, gbc.readMem(0xd3aa));
        // DF 01AA
        gbc.setState(0x488d, 0xcf8a, 0x8d00, 0x8479, 0xd99e, 0x5513, 0x1, 0x1);
        gbc.writeMem(0x488d, { 0xdf });
        gbc.writeMem(0xcf88, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x8d, gbc.a());
        EXPECT(0x84, gbc.b());
        EXPECT(0x79, gbc.c());
        EXPECT(0xd9, gbc.d());
        EXPECT(0x9e, gbc.e());
        EXPECT(0x55, gbc.h());
        EXPECT(0x13, gbc.l());
        EXPECT(0xcf88, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x8e, gbc.readMem(0xcf88));
        EXPECT(0x48, gbc.readMem(0xcf89));
        // DF 01AB
        gbc.setState(0x2737, 0x8af4, 0x8520, 0xbf1d, 0x949b, 0x985, 0x0, 0x1);
        gbc.writeMem(0x2737, { 0xdf });
        gbc.writeMem(0x8af2, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x85, gbc.a());
        EXPECT(0xbf, gbc.b());
        EXPECT(0x1d, gbc.c());
        EXPECT(0x94, gbc.d());
        EXPECT(0x9b, gbc.e());
        EXPECT(0x9, gbc.h());
        EXPECT(0x85, gbc.l());
        EXPECT(0x8af2, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x38, gbc.readMem(0x8af2));
        EXPECT(0x27, gbc.readMem(0x8af3));
        // DF 01AC
        gbc.setState(0x4a02, 0xa63e, 0x96d0, 0xbb0e, 0xb2cb, 0x9361, 0x1, 0x0);
        gbc.writeMem(0x4a02, { 0xdf });
        gbc.writeMem(0xa63c, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x96, gbc.a());
        EXPECT(0xbb, gbc.b());
        EXPECT(0xe, gbc.c());
        EXPECT(0xb2, gbc.d());
        EXPECT(0xcb, gbc.e());
        EXPECT(0x93, gbc.h());
        EXPECT(0x61, gbc.l());
        EXPECT(0xa63c, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x3, gbc.readMem(0xa63c));
        EXPECT(0x4a, gbc.readMem(0xa63d));
        // DF 01AD
        gbc.setState(0x7667, 0x943c, 0xda00, 0x23c8, 0x7f69, 0x63c0, 0x0, 0x1);
        gbc.writeMem(0x7667, { 0xdf });
        gbc.writeMem(0x943a, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xda, gbc.a());
        EXPECT(0x23, gbc.b());
        EXPECT(0xc8, gbc.c());
        EXPECT(0x7f, gbc.d());
        EXPECT(0x69, gbc.e());
        EXPECT(0x63, gbc.h());
        EXPECT(0xc0, gbc.l());
        EXPECT(0x943a, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x68, gbc.readMem(0x943a));
        EXPECT(0x76, gbc.readMem(0x943b));
        // DF 01AF
        gbc.setState(0x865a, 0x9929, 0x480, 0xc5c6, 0xa89e, 0xf4b6, 0x1, 0x1);
        gbc.writeMem(0x865a, { 0xdf });
        gbc.writeMem(0x9927, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x4, gbc.a());
        EXPECT(0xc5, gbc.b());
        EXPECT(0xc6, gbc.c());
        EXPECT(0xa8, gbc.d());
        EXPECT(0x9e, gbc.e());
        EXPECT(0xf4, gbc.h());
        EXPECT(0xb6, gbc.l());
        EXPECT(0x9927, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0x865a));
        EXPECT(0x5b, gbc.readMem(0x9927));
        EXPECT(0x86, gbc.readMem(0x9928));
        // DF 01B0
        gbc.setState(0x19a3, 0xdb56, 0xcbb0, 0xcae7, 0x5577, 0x62c2, 0x1, 0x1);
        gbc.writeMem(0x19a3, { 0xdf });
        gbc.writeMem(0xdb54, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xcb, gbc.a());
        EXPECT(0xca, gbc.b());
        EXPECT(0xe7, gbc.c());
        EXPECT(0x55, gbc.d());
        EXPECT(0x77, gbc.e());
        EXPECT(0x62, gbc.h());
        EXPECT(0xc2, gbc.l());
        EXPECT(0xdb54, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xa4, gbc.readMem(0xdb54));
        EXPECT(0x19, gbc.readMem(0xdb55));
        // DF 01B4
        gbc.setState(0x3575, 0x9f56, 0xd900, 0x975a, 0x4f52, 0x5c37, 0x0, 0x0);
        gbc.writeMem(0x3575, { 0xdf });
        gbc.writeMem(0x9f54, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xd9, gbc.a());
        EXPECT(0x97, gbc.b());
        EXPECT(0x5a, gbc.c());
        EXPECT(0x4f, gbc.d());
        EXPECT(0x52, gbc.e());
        EXPECT(0x5c, gbc.h());
        EXPECT(0x37, gbc.l());
        EXPECT(0x9f54, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x76, gbc.readMem(0x9f54));
        EXPECT(0x35, gbc.readMem(0x9f55));
        // DF 01B7
        gbc.setState(0xe36a, 0xc219, 0x31e0, 0xd513, 0x37c4, 0x58c4, 0x1, 0x1);
        gbc.writeMem(0xc217, { 0x0, 0x0 });
        gbc.writeMem(0xe36a, { 0xdf });
        gbc.step();
        EXPECT(0x31, gbc.a());
        EXPECT(0xd5, gbc.b());
        EXPECT(0x13, gbc.c());
        EXPECT(0x37, gbc.d());
        EXPECT(0xc4, gbc.e());
        EXPECT(0x58, gbc.h());
        EXPECT(0xc4, gbc.l());
        EXPECT(0xc217, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x6b, gbc.readMem(0xc217));
        EXPECT(0xe3, gbc.readMem(0xc218));
        EXPECT(0xdf, gbc.readMem(0xe36a));
        // DF 01B8
        gbc.setState(0xdb1, 0xa312, 0x1bb0, 0x8997, 0x50db, 0x67ca, 0x1, 0x0);
        gbc.writeMem(0xdb1, { 0xdf });
        gbc.writeMem(0xa310, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x1b, gbc.a());
        EXPECT(0x89, gbc.b());
        EXPECT(0x97, gbc.c());
        EXPECT(0x50, gbc.d());
        EXPECT(0xdb, gbc.e());
        EXPECT(0x67, gbc.h());
        EXPECT(0xca, gbc.l());
        EXPECT(0xa310, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xb2, gbc.readMem(0xa310));
        EXPECT(0xd, gbc.readMem(0xa311));
        // DF 01BB
        gbc.setState(0x8c49, 0x8429, 0x1020, 0x145, 0xd2b3, 0xa903, 0x1, 0x0);
        gbc.writeMem(0x8427, { 0x0, 0x0 });
        gbc.writeMem(0x8c49, { 0xdf });
        gbc.step();
        EXPECT(0x10, gbc.a());
        EXPECT(0x1, gbc.b());
        EXPECT(0x45, gbc.c());
        EXPECT(0xd2, gbc.d());
        EXPECT(0xb3, gbc.e());
        EXPECT(0xa9, gbc.h());
        EXPECT(0x3, gbc.l());
        EXPECT(0x8427, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x4a, gbc.readMem(0x8427));
        EXPECT(0x8c, gbc.readMem(0x8428));
        EXPECT(0xdf, gbc.readMem(0x8c49));
        // DF 01BD
        gbc.setState(0x6d0, 0xc504, 0xd1a0, 0xf0c8, 0x37ba, 0x723a, 0x0, 0x1);
        gbc.writeMem(0x6d0, { 0xdf });
        gbc.writeMem(0xc502, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xd1, gbc.a());
        EXPECT(0xf0, gbc.b());
        EXPECT(0xc8, gbc.c());
        EXPECT(0x37, gbc.d());
        EXPECT(0xba, gbc.e());
        EXPECT(0x72, gbc.h());
        EXPECT(0x3a, gbc.l());
        EXPECT(0xc502, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xd1, gbc.readMem(0xc502));
        EXPECT(0x6, gbc.readMem(0xc503));
        // DF 01C0
        gbc.setState(0x5649, 0x9c5f, 0x9580, 0xb5a8, 0x56d3, 0x2741, 0x1, 0x1);
        gbc.writeMem(0x5649, { 0xdf });
        gbc.writeMem(0x9c5d, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x95, gbc.a());
        EXPECT(0xb5, gbc.b());
        EXPECT(0xa8, gbc.c());
        EXPECT(0x56, gbc.d());
        EXPECT(0xd3, gbc.e());
        EXPECT(0x27, gbc.h());
        EXPECT(0x41, gbc.l());
        EXPECT(0x9c5d, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x4a, gbc.readMem(0x9c5d));
        EXPECT(0x56, gbc.readMem(0x9c5e));
        // DF 01C1
        gbc.setState(0x3575, 0xa4f8, 0x47b0, 0xd8f2, 0xf1b8, 0x8377, 0x1, 0x0);
        gbc.writeMem(0x3575, { 0xdf });
        gbc.writeMem(0xa4f6, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x47, gbc.a());
        EXPECT(0xd8, gbc.b());
        EXPECT(0xf2, gbc.c());
        EXPECT(0xf1, gbc.d());
        EXPECT(0xb8, gbc.e());
        EXPECT(0x83, gbc.h());
        EXPECT(0x77, gbc.l());
        EXPECT(0xa4f6, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x76, gbc.readMem(0xa4f6));
        EXPECT(0x35, gbc.readMem(0xa4f7));
        // DF 01C3
        gbc.setState(0xe176, 0x9054, 0x41d0, 0xc725, 0x8618, 0x9743, 0x1, 0x0);
        gbc.writeMem(0x9052, { 0x0, 0x0 });
        gbc.writeMem(0xe176, { 0xdf });
        gbc.step();
        EXPECT(0x41, gbc.a());
        EXPECT(0xc7, gbc.b());
        EXPECT(0x25, gbc.c());
        EXPECT(0x86, gbc.d());
        EXPECT(0x18, gbc.e());
        EXPECT(0x97, gbc.h());
        EXPECT(0x43, gbc.l());
        EXPECT(0x9052, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x77, gbc.readMem(0x9052));
        EXPECT(0xe1, gbc.readMem(0x9053));
        EXPECT(0xdf, gbc.readMem(0xe176));
        // DF 01C5
        gbc.setState(0xd3cd, 0xe1d9, 0xc190, 0x2485, 0x4d1e, 0x18aa, 0x1, 0x0);
        gbc.writeMem(0xd3cd, { 0xdf });
        gbc.writeMem(0xe1d7, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xc1, gbc.a());
        EXPECT(0x24, gbc.b());
        EXPECT(0x85, gbc.c());
        EXPECT(0x4d, gbc.d());
        EXPECT(0x1e, gbc.e());
        EXPECT(0x18, gbc.h());
        EXPECT(0xaa, gbc.l());
        EXPECT(0xe1d7, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0xd3cd));
        EXPECT(0xce, gbc.readMem(0xe1d7));
        EXPECT(0xd3, gbc.readMem(0xe1d8));
        // DF 01C6
        gbc.setState(0xe563, 0xb58f, 0xc680, 0x516f, 0xa220, 0xd1fb, 0x1, 0x1);
        gbc.writeMem(0xb58d, { 0x0, 0x0 });
        gbc.writeMem(0xe563, { 0xdf });
        gbc.step();
        EXPECT(0xc6, gbc.a());
        EXPECT(0x51, gbc.b());
        EXPECT(0x6f, gbc.c());
        EXPECT(0xa2, gbc.d());
        EXPECT(0x20, gbc.e());
        EXPECT(0xd1, gbc.h());
        EXPECT(0xfb, gbc.l());
        EXPECT(0xb58d, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x64, gbc.readMem(0xb58d));
        EXPECT(0xe5, gbc.readMem(0xb58e));
        EXPECT(0xdf, gbc.readMem(0xe563));
        // DF 01CD
        gbc.setState(0xe6ef, 0xfc54, 0xfa70, 0xe0c2, 0x5177, 0x1a59, 0x0, 0x1);
        gbc.writeMem(0xe6ef, { 0xdf });
        gbc.writeMem(0xfc52, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xfa, gbc.a());
        EXPECT(0xe0, gbc.b());
        EXPECT(0xc2, gbc.c());
        EXPECT(0x51, gbc.d());
        EXPECT(0x77, gbc.e());
        EXPECT(0x1a, gbc.h());
        EXPECT(0x59, gbc.l());
        EXPECT(0xfc52, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0xe6ef));
        EXPECT(0xf0, gbc.readMem(0xfc52));
        EXPECT(0xe6, gbc.readMem(0xfc53));
        // DF 01D2
        gbc.setState(0xeb0, 0xb1b4, 0x7a20, 0x23a1, 0xa668, 0x5954, 0x0, 0x0);
        gbc.writeMem(0xeb0, { 0xdf });
        gbc.writeMem(0xb1b2, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x7a, gbc.a());
        EXPECT(0x23, gbc.b());
        EXPECT(0xa1, gbc.c());
        EXPECT(0xa6, gbc.d());
        EXPECT(0x68, gbc.e());
        EXPECT(0x59, gbc.h());
        EXPECT(0x54, gbc.l());
        EXPECT(0xb1b2, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xb1, gbc.readMem(0xb1b2));
        EXPECT(0xe, gbc.readMem(0xb1b3));
        // DF 01D5
        gbc.setState(0x6d9a, 0x8134, 0xe370, 0x61df, 0x5cd3, 0x4557, 0x1, 0x0);
        gbc.writeMem(0x6d9a, { 0xdf });
        gbc.writeMem(0x8132, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xe3, gbc.a());
        EXPECT(0x61, gbc.b());
        EXPECT(0xdf, gbc.c());
        EXPECT(0x5c, gbc.d());
        EXPECT(0xd3, gbc.e());
        EXPECT(0x45, gbc.h());
        EXPECT(0x57, gbc.l());
        EXPECT(0x8132, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x9b, gbc.readMem(0x8132));
        EXPECT(0x6d, gbc.readMem(0x8133));
        // DF 01D6
        gbc.setState(0x599f, 0xb142, 0xa7f0, 0xa882, 0xf144, 0x3959, 0x1, 0x0);
        gbc.writeMem(0x599f, { 0xdf });
        gbc.writeMem(0xb140, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xa7, gbc.a());
        EXPECT(0xa8, gbc.b());
        EXPECT(0x82, gbc.c());
        EXPECT(0xf1, gbc.d());
        EXPECT(0x44, gbc.e());
        EXPECT(0x39, gbc.h());
        EXPECT(0x59, gbc.l());
        EXPECT(0xb140, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xa0, gbc.readMem(0xb140));
        EXPECT(0x59, gbc.readMem(0xb141));
        // DF 01D9
        gbc.setState(0xac91, 0x88ef, 0x1fa0, 0x1a93, 0x7905, 0x83dc, 0x0, 0x0);
        gbc.writeMem(0x88ed, { 0x0, 0x0 });
        gbc.writeMem(0xac91, { 0xdf });
        gbc.step();
        EXPECT(0x1f, gbc.a());
        EXPECT(0x1a, gbc.b());
        EXPECT(0x93, gbc.c());
        EXPECT(0x79, gbc.d());
        EXPECT(0x5, gbc.e());
        EXPECT(0x83, gbc.h());
        EXPECT(0xdc, gbc.l());
        EXPECT(0x88ed, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x92, gbc.readMem(0x88ed));
        EXPECT(0xac, gbc.readMem(0x88ee));
        EXPECT(0xdf, gbc.readMem(0xac91));
        // DF 01DB
        gbc.setState(0xb3a8, 0xc238, 0xe3f0, 0x83d4, 0xf4f3, 0xe3a6, 0x1, 0x0);
        gbc.writeMem(0xb3a8, { 0xdf });
        gbc.writeMem(0xc236, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xe3, gbc.a());
        EXPECT(0x83, gbc.b());
        EXPECT(0xd4, gbc.c());
        EXPECT(0xf4, gbc.d());
        EXPECT(0xf3, gbc.e());
        EXPECT(0xe3, gbc.h());
        EXPECT(0xa6, gbc.l());
        EXPECT(0xc236, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0xb3a8));
        EXPECT(0xa9, gbc.readMem(0xc236));
        EXPECT(0xb3, gbc.readMem(0xc237));
        // DF 01E0
        gbc.setState(0xc409, 0xb4cf, 0xd560, 0xd983, 0x187, 0xe318, 0x0, 0x0);
        gbc.writeMem(0xb4cd, { 0x0, 0x0 });
        gbc.writeMem(0xc409, { 0xdf });
        gbc.step();
        EXPECT(0xd5, gbc.a());
        EXPECT(0xd9, gbc.b());
        EXPECT(0x83, gbc.c());
        EXPECT(0x1, gbc.d());
        EXPECT(0x87, gbc.e());
        EXPECT(0xe3, gbc.h());
        EXPECT(0x18, gbc.l());
        EXPECT(0xb4cd, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xa, gbc.readMem(0xb4cd));
        EXPECT(0xc4, gbc.readMem(0xb4ce));
        EXPECT(0xdf, gbc.readMem(0xc409));
        // DF 01E1
        gbc.setState(0xb275, 0xd999, 0x3640, 0x669d, 0x1d62, 0x15c0, 0x0, 0x1);
        gbc.writeMem(0xb275, { 0xdf });
        gbc.writeMem(0xd997, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x36, gbc.a());
        EXPECT(0x66, gbc.b());
        EXPECT(0x9d, gbc.c());
        EXPECT(0x1d, gbc.d());
        EXPECT(0x62, gbc.e());
        EXPECT(0x15, gbc.h());
        EXPECT(0xc0, gbc.l());
        EXPECT(0xd997, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0xb275));
        EXPECT(0x76, gbc.readMem(0xd997));
        EXPECT(0xb2, gbc.readMem(0xd998));
        // DF 01E2
        gbc.setState(0x603, 0x894d, 0x48b0, 0xfbef, 0x1df, 0x1795, 0x1, 0x1);
        gbc.writeMem(0x603, { 0xdf });
        gbc.writeMem(0x894b, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x48, gbc.a());
        EXPECT(0xfb, gbc.b());
        EXPECT(0xef, gbc.c());
        EXPECT(0x1, gbc.d());
        EXPECT(0xdf, gbc.e());
        EXPECT(0x17, gbc.h());
        EXPECT(0x95, gbc.l());
        EXPECT(0x894b, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x4, gbc.readMem(0x894b));
        EXPECT(0x6, gbc.readMem(0x894c));
        // DF 01E3
        gbc.setState(0x5d63, 0xe374, 0xb8b0, 0xf37b, 0x641, 0x4e9a, 0x1, 0x0);
        gbc.writeMem(0x5d63, { 0xdf });
        gbc.writeMem(0xe372, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xb8, gbc.a());
        EXPECT(0xf3, gbc.b());
        EXPECT(0x7b, gbc.c());
        EXPECT(0x6, gbc.d());
        EXPECT(0x41, gbc.e());
        EXPECT(0x4e, gbc.h());
        EXPECT(0x9a, gbc.l());
        EXPECT(0xe372, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x64, gbc.readMem(0xe372));
        EXPECT(0x5d, gbc.readMem(0xe373));
        // DF 01E4
        gbc.setState(0xe9e2, 0xc172, 0x94b0, 0x9567, 0xd655, 0xf28a, 0x1, 0x1);
        gbc.writeMem(0xc170, { 0x0, 0x0 });
        gbc.writeMem(0xe9e2, { 0xdf });
        gbc.step();
        EXPECT(0x94, gbc.a());
        EXPECT(0x95, gbc.b());
        EXPECT(0x67, gbc.c());
        EXPECT(0xd6, gbc.d());
        EXPECT(0x55, gbc.e());
        EXPECT(0xf2, gbc.h());
        EXPECT(0x8a, gbc.l());
        EXPECT(0xc170, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xe3, gbc.readMem(0xc170));
        EXPECT(0xe9, gbc.readMem(0xc171));
        EXPECT(0xdf, gbc.readMem(0xe9e2));
        // DF 01E5
        gbc.setState(0x245b, 0xcc94, 0xc850, 0x7d24, 0x6079, 0xaaef, 0x1, 0x1);
        gbc.writeMem(0x245b, { 0xdf });
        gbc.writeMem(0xcc92, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xc8, gbc.a());
        EXPECT(0x7d, gbc.b());
        EXPECT(0x24, gbc.c());
        EXPECT(0x60, gbc.d());
        EXPECT(0x79, gbc.e());
        EXPECT(0xaa, gbc.h());
        EXPECT(0xef, gbc.l());
        EXPECT(0xcc92, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x5c, gbc.readMem(0xcc92));
        EXPECT(0x24, gbc.readMem(0xcc93));
        // DF 01E6
        gbc.setState(0x6fe8, 0xe843, 0xbbf0, 0xa8d0, 0x287a, 0xa7f6, 0x1, 0x0);
        gbc.writeMem(0x6fe8, { 0xdf });
        gbc.writeMem(0xe841, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xbb, gbc.a());
        EXPECT(0xa8, gbc.b());
        EXPECT(0xd0, gbc.c());
        EXPECT(0x28, gbc.d());
        EXPECT(0x7a, gbc.e());
        EXPECT(0xa7, gbc.h());
        EXPECT(0xf6, gbc.l());
        EXPECT(0xe841, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xe9, gbc.readMem(0xe841));
        EXPECT(0x6f, gbc.readMem(0xe842));
        // DF 01E9
        gbc.setState(0x6fc7, 0xadcb, 0x3480, 0xf7df, 0x48f3, 0xf5e9, 0x0, 0x1);
        gbc.writeMem(0x6fc7, { 0xdf });
        gbc.writeMem(0xadc9, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x34, gbc.a());
        EXPECT(0xf7, gbc.b());
        EXPECT(0xdf, gbc.c());
        EXPECT(0x48, gbc.d());
        EXPECT(0xf3, gbc.e());
        EXPECT(0xf5, gbc.h());
        EXPECT(0xe9, gbc.l());
        EXPECT(0xadc9, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xc8, gbc.readMem(0xadc9));
        EXPECT(0x6f, gbc.readMem(0xadca));
        // DF 01EB
        gbc.setState(0x1f29, 0xd200, 0x9620, 0x907e, 0x9aa6, 0x3e2, 0x0, 0x0);
        gbc.writeMem(0x1f29, { 0xdf });
        gbc.writeMem(0xd1fe, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x96, gbc.a());
        EXPECT(0x90, gbc.b());
        EXPECT(0x7e, gbc.c());
        EXPECT(0x9a, gbc.d());
        EXPECT(0xa6, gbc.e());
        EXPECT(0x3, gbc.h());
        EXPECT(0xe2, gbc.l());
        EXPECT(0xd1fe, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x2a, gbc.readMem(0xd1fe));
        EXPECT(0x1f, gbc.readMem(0xd1ff));
        // DF 01ED
        gbc.setState(0x7ab, 0xfd9a, 0xbb40, 0xff44, 0xbdc3, 0x65b2, 0x0, 0x1);
        gbc.writeMem(0x7ab, { 0xdf });
        gbc.writeMem(0xfd98, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xbb, gbc.a());
        EXPECT(0xff, gbc.b());
        EXPECT(0x44, gbc.c());
        EXPECT(0xbd, gbc.d());
        EXPECT(0xc3, gbc.e());
        EXPECT(0x65, gbc.h());
        EXPECT(0xb2, gbc.l());
        EXPECT(0xfd98, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xac, gbc.readMem(0xfd98));
        EXPECT(0x7, gbc.readMem(0xfd99));
        // DF 01EE
        gbc.setState(0xc087, 0xcef4, 0x3410, 0xc173, 0xdead, 0x7569, 0x0, 0x0);
        gbc.writeMem(0xc087, { 0xdf });
        gbc.writeMem(0xcef2, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x34, gbc.a());
        EXPECT(0xc1, gbc.b());
        EXPECT(0x73, gbc.c());
        EXPECT(0xde, gbc.d());
        EXPECT(0xad, gbc.e());
        EXPECT(0x75, gbc.h());
        EXPECT(0x69, gbc.l());
        EXPECT(0xcef2, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0xc087));
        EXPECT(0x88, gbc.readMem(0xcef2));
        EXPECT(0xc0, gbc.readMem(0xcef3));
        // DF 01EF
        gbc.setState(0xb902, 0x9e84, 0x7730, 0x7714, 0xd34e, 0x6ef2, 0x1, 0x1);
        gbc.writeMem(0x9e82, { 0x0, 0x0 });
        gbc.writeMem(0xb902, { 0xdf });
        gbc.step();
        EXPECT(0x77, gbc.a());
        EXPECT(0x77, gbc.b());
        EXPECT(0x14, gbc.c());
        EXPECT(0xd3, gbc.d());
        EXPECT(0x4e, gbc.e());
        EXPECT(0x6e, gbc.h());
        EXPECT(0xf2, gbc.l());
        EXPECT(0x9e82, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x3, gbc.readMem(0x9e82));
        EXPECT(0xb9, gbc.readMem(0x9e83));
        EXPECT(0xdf, gbc.readMem(0xb902));
        // DF 01F3
        gbc.setState(0xb1e4, 0xeb6e, 0xaae0, 0xddd9, 0x36b9, 0x86ed, 0x1, 0x0);
        gbc.writeMem(0xb1e4, { 0xdf });
        gbc.writeMem(0xeb6c, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xaa, gbc.a());
        EXPECT(0xdd, gbc.b());
        EXPECT(0xd9, gbc.c());
        EXPECT(0x36, gbc.d());
        EXPECT(0xb9, gbc.e());
        EXPECT(0x86, gbc.h());
        EXPECT(0xed, gbc.l());
        EXPECT(0xeb6c, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0xb1e4));
        EXPECT(0xe5, gbc.readMem(0xeb6c));
        EXPECT(0xb1, gbc.readMem(0xeb6d));
        // DF 01F5
        gbc.setState(0x95c7, 0xeab7, 0xaa20, 0x85fa, 0xa718, 0xc1af, 0x0, 0x1);
        gbc.writeMem(0x95c7, { 0xdf });
        gbc.writeMem(0xeab5, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xaa, gbc.a());
        EXPECT(0x85, gbc.b());
        EXPECT(0xfa, gbc.c());
        EXPECT(0xa7, gbc.d());
        EXPECT(0x18, gbc.e());
        EXPECT(0xc1, gbc.h());
        EXPECT(0xaf, gbc.l());
        EXPECT(0xeab5, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0x95c7));
        EXPECT(0xc8, gbc.readMem(0xeab5));
        EXPECT(0x95, gbc.readMem(0xeab6));
        // DF 01F6
        gbc.setState(0x4eb9, 0xaec4, 0x81a0, 0x4a9a, 0x20c7, 0x8dce, 0x0, 0x1);
        gbc.writeMem(0x4eb9, { 0xdf });
        gbc.writeMem(0xaec2, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x81, gbc.a());
        EXPECT(0x4a, gbc.b());
        EXPECT(0x9a, gbc.c());
        EXPECT(0x20, gbc.d());
        EXPECT(0xc7, gbc.e());
        EXPECT(0x8d, gbc.h());
        EXPECT(0xce, gbc.l());
        EXPECT(0xaec2, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xba, gbc.readMem(0xaec2));
        EXPECT(0x4e, gbc.readMem(0xaec3));
        // DF 01F7
        gbc.setState(0xd662, 0x9b64, 0xfb20, 0x7daa, 0xca75, 0x7844, 0x1, 0x0);
        gbc.writeMem(0x9b62, { 0x0, 0x0 });
        gbc.writeMem(0xd662, { 0xdf });
        gbc.step();
        EXPECT(0xfb, gbc.a());
        EXPECT(0x7d, gbc.b());
        EXPECT(0xaa, gbc.c());
        EXPECT(0xca, gbc.d());
        EXPECT(0x75, gbc.e());
        EXPECT(0x78, gbc.h());
        EXPECT(0x44, gbc.l());
        EXPECT(0x9b62, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x63, gbc.readMem(0x9b62));
        EXPECT(0xd6, gbc.readMem(0x9b63));
        EXPECT(0xdf, gbc.readMem(0xd662));
        // DF 01F8
        gbc.setState(0xa9bd, 0xa07d, 0x5a80, 0xfbe2, 0xf48c, 0xfd0d, 0x0, 0x0);
        gbc.writeMem(0xa07b, { 0x0, 0x0 });
        gbc.writeMem(0xa9bd, { 0xdf });
        gbc.step();
        EXPECT(0x5a, gbc.a());
        EXPECT(0xfb, gbc.b());
        EXPECT(0xe2, gbc.c());
        EXPECT(0xf4, gbc.d());
        EXPECT(0x8c, gbc.e());
        EXPECT(0xfd, gbc.h());
        EXPECT(0xd, gbc.l());
        EXPECT(0xa07b, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xbe, gbc.readMem(0xa07b));
        EXPECT(0xa9, gbc.readMem(0xa07c));
        EXPECT(0xdf, gbc.readMem(0xa9bd));
        // DF 01FA
        gbc.setState(0x20f, 0x9840, 0xd670, 0xa757, 0xb7fc, 0x45fa, 0x1, 0x1);
        gbc.writeMem(0x20f, { 0xdf });
        gbc.writeMem(0x983e, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xd6, gbc.a());
        EXPECT(0xa7, gbc.b());
        EXPECT(0x57, gbc.c());
        EXPECT(0xb7, gbc.d());
        EXPECT(0xfc, gbc.e());
        EXPECT(0x45, gbc.h());
        EXPECT(0xfa, gbc.l());
        EXPECT(0x983e, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x10, gbc.readMem(0x983e));
        EXPECT(0x2, gbc.readMem(0x983f));
        // DF 0200
        gbc.setState(0xb308, 0xa562, 0xd5c0, 0x470, 0xc54e, 0xc83f, 0x1, 0x0);
        gbc.writeMem(0xa560, { 0x0, 0x0 });
        gbc.writeMem(0xb308, { 0xdf });
        gbc.step();
        EXPECT(0xd5, gbc.a());
        EXPECT(0x4, gbc.b());
        EXPECT(0x70, gbc.c());
        EXPECT(0xc5, gbc.d());
        EXPECT(0x4e, gbc.e());
        EXPECT(0xc8, gbc.h());
        EXPECT(0x3f, gbc.l());
        EXPECT(0xa560, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x9, gbc.readMem(0xa560));
        EXPECT(0xb3, gbc.readMem(0xa561));
        EXPECT(0xdf, gbc.readMem(0xb308));
        // DF 0201
        gbc.setState(0xcebb, 0x9ad2, 0x7ce0, 0x2a53, 0xff53, 0xbe98, 0x1, 0x1);
        gbc.writeMem(0x9ad0, { 0x0, 0x0 });
        gbc.writeMem(0xcebb, { 0xdf });
        gbc.step();
        EXPECT(0x7c, gbc.a());
        EXPECT(0x2a, gbc.b());
        EXPECT(0x53, gbc.c());
        EXPECT(0xff, gbc.d());
        EXPECT(0x53, gbc.e());
        EXPECT(0xbe, gbc.h());
        EXPECT(0x98, gbc.l());
        EXPECT(0x9ad0, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xbc, gbc.readMem(0x9ad0));
        EXPECT(0xce, gbc.readMem(0x9ad1));
        EXPECT(0xdf, gbc.readMem(0xcebb));
        // DF 0202
        gbc.setState(0xaaaa, 0xb39a, 0xdbc0, 0x64e1, 0xec94, 0xf9cf, 0x1, 0x0);
        gbc.writeMem(0xaaaa, { 0xdf });
        gbc.writeMem(0xb398, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xdb, gbc.a());
        EXPECT(0x64, gbc.b());
        EXPECT(0xe1, gbc.c());
        EXPECT(0xec, gbc.d());
        EXPECT(0x94, gbc.e());
        EXPECT(0xf9, gbc.h());
        EXPECT(0xcf, gbc.l());
        EXPECT(0xb398, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0xaaaa));
        EXPECT(0xab, gbc.readMem(0xb398));
        EXPECT(0xaa, gbc.readMem(0xb399));
        // DF 0208
        gbc.setState(0x70da, 0xfda6, 0xd510, 0x70bf, 0x8391, 0x1ca0, 0x1, 0x0);
        gbc.writeMem(0x70da, { 0xdf });
        gbc.writeMem(0xfda4, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xd5, gbc.a());
        EXPECT(0x70, gbc.b());
        EXPECT(0xbf, gbc.c());
        EXPECT(0x83, gbc.d());
        EXPECT(0x91, gbc.e());
        EXPECT(0x1c, gbc.h());
        EXPECT(0xa0, gbc.l());
        EXPECT(0xfda4, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdb, gbc.readMem(0xfda4));
        EXPECT(0x70, gbc.readMem(0xfda5));
        // DF 020B
        gbc.setState(0xc1ce, 0xc8a5, 0x8bc0, 0xad72, 0x851c, 0xd9d1, 0x0, 0x1);
        gbc.writeMem(0xc1ce, { 0xdf });
        gbc.writeMem(0xc8a3, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x8b, gbc.a());
        EXPECT(0xad, gbc.b());
        EXPECT(0x72, gbc.c());
        EXPECT(0x85, gbc.d());
        EXPECT(0x1c, gbc.e());
        EXPECT(0xd9, gbc.h());
        EXPECT(0xd1, gbc.l());
        EXPECT(0xc8a3, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0xc1ce));
        EXPECT(0xcf, gbc.readMem(0xc8a3));
        EXPECT(0xc1, gbc.readMem(0xc8a4));
        // DF 020C
        gbc.setState(0x24f6, 0x856a, 0x26d0, 0xc29, 0x6e89, 0x1e43, 0x1, 0x0);
        gbc.writeMem(0x24f6, { 0xdf });
        gbc.writeMem(0x8568, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x26, gbc.a());
        EXPECT(0xc, gbc.b());
        EXPECT(0x29, gbc.c());
        EXPECT(0x6e, gbc.d());
        EXPECT(0x89, gbc.e());
        EXPECT(0x1e, gbc.h());
        EXPECT(0x43, gbc.l());
        EXPECT(0x8568, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xf7, gbc.readMem(0x8568));
        EXPECT(0x24, gbc.readMem(0x8569));
        // DF 020D
        gbc.setState(0x621c, 0xb198, 0x3020, 0x70b4, 0x92c7, 0x3d6c, 0x0, 0x1);
        gbc.writeMem(0x621c, { 0xdf });
        gbc.writeMem(0xb196, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x30, gbc.a());
        EXPECT(0x70, gbc.b());
        EXPECT(0xb4, gbc.c());
        EXPECT(0x92, gbc.d());
        EXPECT(0xc7, gbc.e());
        EXPECT(0x3d, gbc.h());
        EXPECT(0x6c, gbc.l());
        EXPECT(0xb196, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x1d, gbc.readMem(0xb196));
        EXPECT(0x62, gbc.readMem(0xb197));
        // DF 020E
        gbc.setState(0x8840, 0x8ec8, 0x7dc0, 0x4614, 0xc170, 0x5275, 0x0, 0x0);
        gbc.writeMem(0x8840, { 0xdf });
        gbc.writeMem(0x8ec6, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x7d, gbc.a());
        EXPECT(0x46, gbc.b());
        EXPECT(0x14, gbc.c());
        EXPECT(0xc1, gbc.d());
        EXPECT(0x70, gbc.e());
        EXPECT(0x52, gbc.h());
        EXPECT(0x75, gbc.l());
        EXPECT(0x8ec6, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0x8840));
        EXPECT(0x41, gbc.readMem(0x8ec6));
        EXPECT(0x88, gbc.readMem(0x8ec7));
        // DF 020F
        gbc.setState(0xdcdb, 0xb09e, 0x3aa0, 0xbacc, 0x2e42, 0x4012, 0x1, 0x0);
        gbc.writeMem(0xb09c, { 0x0, 0x0 });
        gbc.writeMem(0xdcdb, { 0xdf });
        gbc.step();
        EXPECT(0x3a, gbc.a());
        EXPECT(0xba, gbc.b());
        EXPECT(0xcc, gbc.c());
        EXPECT(0x2e, gbc.d());
        EXPECT(0x42, gbc.e());
        EXPECT(0x40, gbc.h());
        EXPECT(0x12, gbc.l());
        EXPECT(0xb09c, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xb09c));
        EXPECT(0xdc, gbc.readMem(0xb09d));
        EXPECT(0xdf, gbc.readMem(0xdcdb));
        // DF 0210
        gbc.setState(0x6629, 0xfe89, 0x2500, 0x8812, 0xd03a, 0x5c95, 0x1, 0x0);
        gbc.writeMem(0x6629, { 0xdf });
        gbc.writeMem(0xfe87, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x25, gbc.a());
        EXPECT(0x88, gbc.b());
        EXPECT(0x12, gbc.c());
        EXPECT(0xd0, gbc.d());
        EXPECT(0x3a, gbc.e());
        EXPECT(0x5c, gbc.h());
        EXPECT(0x95, gbc.l());
        EXPECT(0xfe87, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x2a, gbc.readMem(0xfe87));
        EXPECT(0x66, gbc.readMem(0xfe88));
        // DF 0211
        gbc.setState(0xbd0d, 0xff26, 0x5680, 0x577c, 0x8104, 0xd427, 0x1, 0x1);
        gbc.writeMem(0xbd0d, { 0xdf });
        gbc.writeMem(0xff24, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x56, gbc.a());
        EXPECT(0x57, gbc.b());
        EXPECT(0x7c, gbc.c());
        EXPECT(0x81, gbc.d());
        EXPECT(0x4, gbc.e());
        EXPECT(0xd4, gbc.h());
        EXPECT(0x27, gbc.l());
        EXPECT(0xff24, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0xbd0d));
        EXPECT(0xe, gbc.readMem(0xff24));
        EXPECT(0xbd, gbc.readMem(0xff25));
        // DF 0214
        gbc.setState(0xba4, 0xa04b, 0x9630, 0xdd4e, 0x8c23, 0xf909, 0x1, 0x1);
        gbc.writeMem(0xba4, { 0xdf });
        gbc.writeMem(0xa049, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x96, gbc.a());
        EXPECT(0xdd, gbc.b());
        EXPECT(0x4e, gbc.c());
        EXPECT(0x8c, gbc.d());
        EXPECT(0x23, gbc.e());
        EXPECT(0xf9, gbc.h());
        EXPECT(0x9, gbc.l());
        EXPECT(0xa049, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xa5, gbc.readMem(0xa049));
        EXPECT(0xb, gbc.readMem(0xa04a));
        // DF 0217
        gbc.setState(0xbc70, 0xad90, 0x88f0, 0x63de, 0x4260, 0x7e6, 0x1, 0x0);
        gbc.writeMem(0xad8e, { 0x0, 0x0 });
        gbc.writeMem(0xbc70, { 0xdf });
        gbc.step();
        EXPECT(0x88, gbc.a());
        EXPECT(0x63, gbc.b());
        EXPECT(0xde, gbc.c());
        EXPECT(0x42, gbc.d());
        EXPECT(0x60, gbc.e());
        EXPECT(0x7, gbc.h());
        EXPECT(0xe6, gbc.l());
        EXPECT(0xad8e, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x71, gbc.readMem(0xad8e));
        EXPECT(0xbc, gbc.readMem(0xad8f));
        EXPECT(0xdf, gbc.readMem(0xbc70));
        // DF 0218
        gbc.setState(0x9fe6, 0xc0f2, 0xaaa0, 0xf3c4, 0xfbc1, 0xaaca, 0x1, 0x1);
        gbc.writeMem(0x9fe6, { 0xdf });
        gbc.writeMem(0xc0f0, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xaa, gbc.a());
        EXPECT(0xf3, gbc.b());
        EXPECT(0xc4, gbc.c());
        EXPECT(0xfb, gbc.d());
        EXPECT(0xc1, gbc.e());
        EXPECT(0xaa, gbc.h());
        EXPECT(0xca, gbc.l());
        EXPECT(0xc0f0, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0x9fe6));
        EXPECT(0xe7, gbc.readMem(0xc0f0));
        EXPECT(0x9f, gbc.readMem(0xc0f1));
        // DF 021D
        gbc.setState(0x5176, 0x91b2, 0xfa60, 0x370e, 0xf9f2, 0x6e2d, 0x0, 0x1);
        gbc.writeMem(0x5176, { 0xdf });
        gbc.writeMem(0x91b0, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xfa, gbc.a());
        EXPECT(0x37, gbc.b());
        EXPECT(0xe, gbc.c());
        EXPECT(0xf9, gbc.d());
        EXPECT(0xf2, gbc.e());
        EXPECT(0x6e, gbc.h());
        EXPECT(0x2d, gbc.l());
        EXPECT(0x91b0, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x77, gbc.readMem(0x91b0));
        EXPECT(0x51, gbc.readMem(0x91b1));
        // DF 021E
        gbc.setState(0x2470, 0xfb99, 0x5110, 0x88e7, 0x978c, 0x1582, 0x0, 0x0);
        gbc.writeMem(0x2470, { 0xdf });
        gbc.writeMem(0xfb97, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x51, gbc.a());
        EXPECT(0x88, gbc.b());
        EXPECT(0xe7, gbc.c());
        EXPECT(0x97, gbc.d());
        EXPECT(0x8c, gbc.e());
        EXPECT(0x15, gbc.h());
        EXPECT(0x82, gbc.l());
        EXPECT(0xfb97, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x71, gbc.readMem(0xfb97));
        EXPECT(0x24, gbc.readMem(0xfb98));
        // DF 021F
        gbc.setState(0x3b0, 0xc51f, 0xd380, 0xdd28, 0xaaf8, 0xee17, 0x1, 0x0);
        gbc.writeMem(0x3b0, { 0xdf });
        gbc.writeMem(0xc51d, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xd3, gbc.a());
        EXPECT(0xdd, gbc.b());
        EXPECT(0x28, gbc.c());
        EXPECT(0xaa, gbc.d());
        EXPECT(0xf8, gbc.e());
        EXPECT(0xee, gbc.h());
        EXPECT(0x17, gbc.l());
        EXPECT(0xc51d, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xb1, gbc.readMem(0xc51d));
        EXPECT(0x3, gbc.readMem(0xc51e));
        // DF 0220
        gbc.setState(0x7b18, 0xe806, 0x3e20, 0x7902, 0x29b3, 0x68b5, 0x1, 0x0);
        gbc.writeMem(0x7b18, { 0xdf });
        gbc.writeMem(0xe804, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x3e, gbc.a());
        EXPECT(0x79, gbc.b());
        EXPECT(0x2, gbc.c());
        EXPECT(0x29, gbc.d());
        EXPECT(0xb3, gbc.e());
        EXPECT(0x68, gbc.h());
        EXPECT(0xb5, gbc.l());
        EXPECT(0xe804, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x19, gbc.readMem(0xe804));
        EXPECT(0x7b, gbc.readMem(0xe805));
        // DF 0221
        gbc.setState(0x15e4, 0xd6db, 0x3620, 0x8cc8, 0x474e, 0x1a4e, 0x0, 0x1);
        gbc.writeMem(0x15e4, { 0xdf });
        gbc.writeMem(0xd6d9, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x36, gbc.a());
        EXPECT(0x8c, gbc.b());
        EXPECT(0xc8, gbc.c());
        EXPECT(0x47, gbc.d());
        EXPECT(0x4e, gbc.e());
        EXPECT(0x1a, gbc.h());
        EXPECT(0x4e, gbc.l());
        EXPECT(0xd6d9, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xe5, gbc.readMem(0xd6d9));
        EXPECT(0x15, gbc.readMem(0xd6da));
        // DF 0222
        gbc.setState(0x50c9, 0xaafb, 0xfdd0, 0x5da2, 0xe589, 0x2efb, 0x1, 0x0);
        gbc.writeMem(0x50c9, { 0xdf });
        gbc.writeMem(0xaaf9, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xfd, gbc.a());
        EXPECT(0x5d, gbc.b());
        EXPECT(0xa2, gbc.c());
        EXPECT(0xe5, gbc.d());
        EXPECT(0x89, gbc.e());
        EXPECT(0x2e, gbc.h());
        EXPECT(0xfb, gbc.l());
        EXPECT(0xaaf9, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xca, gbc.readMem(0xaaf9));
        EXPECT(0x50, gbc.readMem(0xaafa));
        // DF 0223
        gbc.setState(0x3b19, 0x822b, 0xda30, 0x1b04, 0x1d61, 0xb7c1, 0x0, 0x0);
        gbc.writeMem(0x3b19, { 0xdf });
        gbc.writeMem(0x8229, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xda, gbc.a());
        EXPECT(0x1b, gbc.b());
        EXPECT(0x4, gbc.c());
        EXPECT(0x1d, gbc.d());
        EXPECT(0x61, gbc.e());
        EXPECT(0xb7, gbc.h());
        EXPECT(0xc1, gbc.l());
        EXPECT(0x8229, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x1a, gbc.readMem(0x8229));
        EXPECT(0x3b, gbc.readMem(0x822a));
        // DF 0224
        gbc.setState(0xd54e, 0xf150, 0xcd30, 0x8d25, 0xfed3, 0x4fd3, 0x1, 0x1);
        gbc.writeMem(0xd54e, { 0xdf });
        gbc.writeMem(0xf14e, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xcd, gbc.a());
        EXPECT(0x8d, gbc.b());
        EXPECT(0x25, gbc.c());
        EXPECT(0xfe, gbc.d());
        EXPECT(0xd3, gbc.e());
        EXPECT(0x4f, gbc.h());
        EXPECT(0xd3, gbc.l());
        EXPECT(0xf14e, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0xd54e));
        EXPECT(0x4f, gbc.readMem(0xf14e));
        EXPECT(0xd5, gbc.readMem(0xf14f));
        // DF 0225
        gbc.setState(0x8a0d, 0xc011, 0xb40, 0xbb86, 0x4dec, 0xf1f2, 0x0, 0x1);
        gbc.writeMem(0x8a0d, { 0xdf });
        gbc.writeMem(0xc00f, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xb, gbc.a());
        EXPECT(0xbb, gbc.b());
        EXPECT(0x86, gbc.c());
        EXPECT(0x4d, gbc.d());
        EXPECT(0xec, gbc.e());
        EXPECT(0xf1, gbc.h());
        EXPECT(0xf2, gbc.l());
        EXPECT(0xc00f, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0x8a0d));
        EXPECT(0xe, gbc.readMem(0xc00f));
        EXPECT(0x8a, gbc.readMem(0xc010));
        // DF 0226
        gbc.setState(0xe365, 0x9a21, 0x9e50, 0x7f43, 0xd70b, 0xa307, 0x1, 0x0);
        gbc.writeMem(0x9a1f, { 0x0, 0x0 });
        gbc.writeMem(0xe365, { 0xdf });
        gbc.step();
        EXPECT(0x9e, gbc.a());
        EXPECT(0x7f, gbc.b());
        EXPECT(0x43, gbc.c());
        EXPECT(0xd7, gbc.d());
        EXPECT(0xb, gbc.e());
        EXPECT(0xa3, gbc.h());
        EXPECT(0x7, gbc.l());
        EXPECT(0x9a1f, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x66, gbc.readMem(0x9a1f));
        EXPECT(0xe3, gbc.readMem(0x9a20));
        EXPECT(0xdf, gbc.readMem(0xe365));
        // DF 0227
        gbc.setState(0xe4c, 0x8daa, 0x26d0, 0xdf6d, 0xc26a, 0xed3f, 0x0, 0x0);
        gbc.writeMem(0xe4c, { 0xdf });
        gbc.writeMem(0x8da8, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x26, gbc.a());
        EXPECT(0xdf, gbc.b());
        EXPECT(0x6d, gbc.c());
        EXPECT(0xc2, gbc.d());
        EXPECT(0x6a, gbc.e());
        EXPECT(0xed, gbc.h());
        EXPECT(0x3f, gbc.l());
        EXPECT(0x8da8, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x4d, gbc.readMem(0x8da8));
        EXPECT(0xe, gbc.readMem(0x8da9));
        // DF 0229
        gbc.setState(0x7f6b, 0xe012, 0xf8e0, 0x3efe, 0x2afd, 0x5e6a, 0x0, 0x1);
        gbc.writeMem(0x7f6b, { 0xdf });
        gbc.writeMem(0xe010, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xf8, gbc.a());
        EXPECT(0x3e, gbc.b());
        EXPECT(0xfe, gbc.c());
        EXPECT(0x2a, gbc.d());
        EXPECT(0xfd, gbc.e());
        EXPECT(0x5e, gbc.h());
        EXPECT(0x6a, gbc.l());
        EXPECT(0xe010, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x6c, gbc.readMem(0xe010));
        EXPECT(0x7f, gbc.readMem(0xe011));
        // DF 022C
        gbc.setState(0x86c5, 0x8864, 0xd5a0, 0x1c98, 0x1120, 0x5379, 0x0, 0x0);
        gbc.writeMem(0x86c5, { 0xdf });
        gbc.writeMem(0x8862, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xd5, gbc.a());
        EXPECT(0x1c, gbc.b());
        EXPECT(0x98, gbc.c());
        EXPECT(0x11, gbc.d());
        EXPECT(0x20, gbc.e());
        EXPECT(0x53, gbc.h());
        EXPECT(0x79, gbc.l());
        EXPECT(0x8862, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0x86c5));
        EXPECT(0xc6, gbc.readMem(0x8862));
        EXPECT(0x86, gbc.readMem(0x8863));
        // DF 022D
        gbc.setState(0x65f6, 0xe3df, 0xf9c0, 0x1735, 0x4d2d, 0xb398, 0x1, 0x1);
        gbc.writeMem(0x65f6, { 0xdf });
        gbc.writeMem(0xe3dd, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xf9, gbc.a());
        EXPECT(0x17, gbc.b());
        EXPECT(0x35, gbc.c());
        EXPECT(0x4d, gbc.d());
        EXPECT(0x2d, gbc.e());
        EXPECT(0xb3, gbc.h());
        EXPECT(0x98, gbc.l());
        EXPECT(0xe3dd, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xf7, gbc.readMem(0xe3dd));
        EXPECT(0x65, gbc.readMem(0xe3de));
        // DF 0230
        gbc.setState(0xb347, 0xbcf6, 0x64b0, 0x33d6, 0x659d, 0x7eee, 0x0, 0x0);
        gbc.writeMem(0xb347, { 0xdf });
        gbc.writeMem(0xbcf4, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x64, gbc.a());
        EXPECT(0x33, gbc.b());
        EXPECT(0xd6, gbc.c());
        EXPECT(0x65, gbc.d());
        EXPECT(0x9d, gbc.e());
        EXPECT(0x7e, gbc.h());
        EXPECT(0xee, gbc.l());
        EXPECT(0xbcf4, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0xb347));
        EXPECT(0x48, gbc.readMem(0xbcf4));
        EXPECT(0xb3, gbc.readMem(0xbcf5));
        // DF 0236
        gbc.setState(0x81bf, 0xbf3a, 0x8240, 0x1d44, 0x8be8, 0x7448, 0x1, 0x0);
        gbc.writeMem(0x81bf, { 0xdf });
        gbc.writeMem(0xbf38, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x82, gbc.a());
        EXPECT(0x1d, gbc.b());
        EXPECT(0x44, gbc.c());
        EXPECT(0x8b, gbc.d());
        EXPECT(0xe8, gbc.e());
        EXPECT(0x74, gbc.h());
        EXPECT(0x48, gbc.l());
        EXPECT(0xbf38, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0x81bf));
        EXPECT(0xc0, gbc.readMem(0xbf38));
        EXPECT(0x81, gbc.readMem(0xbf39));
        // DF 0237
        gbc.setState(0xca86, 0xe9cc, 0xb310, 0x8156, 0xfe58, 0x3870, 0x1, 0x0);
        gbc.writeMem(0xca86, { 0xdf });
        gbc.writeMem(0xe9ca, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xb3, gbc.a());
        EXPECT(0x81, gbc.b());
        EXPECT(0x56, gbc.c());
        EXPECT(0xfe, gbc.d());
        EXPECT(0x58, gbc.e());
        EXPECT(0x38, gbc.h());
        EXPECT(0x70, gbc.l());
        EXPECT(0xe9ca, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0xca86));
        EXPECT(0x87, gbc.readMem(0xe9ca));
        EXPECT(0xca, gbc.readMem(0xe9cb));
        // DF 023A
        gbc.setState(0x5df7, 0xbe59, 0xf1e0, 0xd57, 0xa9ef, 0x60c5, 0x0, 0x0);
        gbc.writeMem(0x5df7, { 0xdf });
        gbc.writeMem(0xbe57, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xf1, gbc.a());
        EXPECT(0xd, gbc.b());
        EXPECT(0x57, gbc.c());
        EXPECT(0xa9, gbc.d());
        EXPECT(0xef, gbc.e());
        EXPECT(0x60, gbc.h());
        EXPECT(0xc5, gbc.l());
        EXPECT(0xbe57, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xf8, gbc.readMem(0xbe57));
        EXPECT(0x5d, gbc.readMem(0xbe58));
        // DF 023D
        gbc.setState(0xb45f, 0xda7b, 0xef20, 0xfbf2, 0xcf3f, 0x488e, 0x1, 0x0);
        gbc.writeMem(0xb45f, { 0xdf });
        gbc.writeMem(0xda79, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xef, gbc.a());
        EXPECT(0xfb, gbc.b());
        EXPECT(0xf2, gbc.c());
        EXPECT(0xcf, gbc.d());
        EXPECT(0x3f, gbc.e());
        EXPECT(0x48, gbc.h());
        EXPECT(0x8e, gbc.l());
        EXPECT(0xda79, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0xb45f));
        EXPECT(0x60, gbc.readMem(0xda79));
        EXPECT(0xb4, gbc.readMem(0xda7a));
        // DF 023F
        gbc.setState(0xc54f, 0xd6ba, 0xeef0, 0x95b9, 0x7fe9, 0x57b0, 0x0, 0x0);
        gbc.writeMem(0xc54f, { 0xdf });
        gbc.writeMem(0xd6b8, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xee, gbc.a());
        EXPECT(0x95, gbc.b());
        EXPECT(0xb9, gbc.c());
        EXPECT(0x7f, gbc.d());
        EXPECT(0xe9, gbc.e());
        EXPECT(0x57, gbc.h());
        EXPECT(0xb0, gbc.l());
        EXPECT(0xd6b8, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0xc54f));
        EXPECT(0x50, gbc.readMem(0xd6b8));
        EXPECT(0xc5, gbc.readMem(0xd6b9));
        // DF 0240
        gbc.setState(0x4388, 0xe1b4, 0xc810, 0x9eba, 0x9ff5, 0x97bf, 0x0, 0x1);
        gbc.writeMem(0x4388, { 0xdf });
        gbc.writeMem(0xe1b2, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xc8, gbc.a());
        EXPECT(0x9e, gbc.b());
        EXPECT(0xba, gbc.c());
        EXPECT(0x9f, gbc.d());
        EXPECT(0xf5, gbc.e());
        EXPECT(0x97, gbc.h());
        EXPECT(0xbf, gbc.l());
        EXPECT(0xe1b2, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x89, gbc.readMem(0xe1b2));
        EXPECT(0x43, gbc.readMem(0xe1b3));
        // DF 0241
        gbc.setState(0x118f, 0xa1f7, 0x38f0, 0x866, 0x85b6, 0x5094, 0x1, 0x1);
        gbc.writeMem(0x118f, { 0xdf });
        gbc.writeMem(0xa1f5, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x38, gbc.a());
        EXPECT(0x8, gbc.b());
        EXPECT(0x66, gbc.c());
        EXPECT(0x85, gbc.d());
        EXPECT(0xb6, gbc.e());
        EXPECT(0x50, gbc.h());
        EXPECT(0x94, gbc.l());
        EXPECT(0xa1f5, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x90, gbc.readMem(0xa1f5));
        EXPECT(0x11, gbc.readMem(0xa1f6));
        // DF 0245
        gbc.setState(0x5263, 0x80c9, 0x4010, 0x67a3, 0xdabc, 0x1fc0, 0x0, 0x1);
        gbc.writeMem(0x5263, { 0xdf });
        gbc.writeMem(0x80c7, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x40, gbc.a());
        EXPECT(0x67, gbc.b());
        EXPECT(0xa3, gbc.c());
        EXPECT(0xda, gbc.d());
        EXPECT(0xbc, gbc.e());
        EXPECT(0x1f, gbc.h());
        EXPECT(0xc0, gbc.l());
        EXPECT(0x80c7, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x64, gbc.readMem(0x80c7));
        EXPECT(0x52, gbc.readMem(0x80c8));
        // DF 0246
        gbc.setState(0x9d7a, 0xad46, 0xf520, 0x2b3f, 0x5ab3, 0xc35a, 0x1, 0x0);
        gbc.writeMem(0x9d7a, { 0xdf });
        gbc.writeMem(0xad44, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xf5, gbc.a());
        EXPECT(0x2b, gbc.b());
        EXPECT(0x3f, gbc.c());
        EXPECT(0x5a, gbc.d());
        EXPECT(0xb3, gbc.e());
        EXPECT(0xc3, gbc.h());
        EXPECT(0x5a, gbc.l());
        EXPECT(0xad44, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0x9d7a));
        EXPECT(0x7b, gbc.readMem(0xad44));
        EXPECT(0x9d, gbc.readMem(0xad45));
        // DF 0249
        gbc.setState(0xd26f, 0xd994, 0x4e0, 0xec48, 0x9518, 0x957b, 0x0, 0x1);
        gbc.writeMem(0xd26f, { 0xdf });
        gbc.writeMem(0xd992, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x4, gbc.a());
        EXPECT(0xec, gbc.b());
        EXPECT(0x48, gbc.c());
        EXPECT(0x95, gbc.d());
        EXPECT(0x18, gbc.e());
        EXPECT(0x95, gbc.h());
        EXPECT(0x7b, gbc.l());
        EXPECT(0xd992, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0xd26f));
        EXPECT(0x70, gbc.readMem(0xd992));
        EXPECT(0xd2, gbc.readMem(0xd993));
        // DF 024A
        gbc.setState(0xe584, 0xec86, 0xb620, 0x9dc4, 0x8c8d, 0x3465, 0x0, 0x0);
        gbc.writeMem(0xe584, { 0xdf });
        gbc.writeMem(0xec84, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xb6, gbc.a());
        EXPECT(0x9d, gbc.b());
        EXPECT(0xc4, gbc.c());
        EXPECT(0x8c, gbc.d());
        EXPECT(0x8d, gbc.e());
        EXPECT(0x34, gbc.h());
        EXPECT(0x65, gbc.l());
        EXPECT(0xec84, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0xe584));
        EXPECT(0x85, gbc.readMem(0xec84));
        EXPECT(0xe5, gbc.readMem(0xec85));
        // DF 024B
        gbc.setState(0xe2c3, 0x8824, 0x3bb0, 0xe582, 0xf591, 0x6ba7, 0x1, 0x0);
        gbc.writeMem(0x8822, { 0x0, 0x0 });
        gbc.writeMem(0xe2c3, { 0xdf });
        gbc.step();
        EXPECT(0x3b, gbc.a());
        EXPECT(0xe5, gbc.b());
        EXPECT(0x82, gbc.c());
        EXPECT(0xf5, gbc.d());
        EXPECT(0x91, gbc.e());
        EXPECT(0x6b, gbc.h());
        EXPECT(0xa7, gbc.l());
        EXPECT(0x8822, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xc4, gbc.readMem(0x8822));
        EXPECT(0xe2, gbc.readMem(0x8823));
        EXPECT(0xdf, gbc.readMem(0xe2c3));
        // DF 0250
        gbc.setState(0xcbc2, 0xa061, 0xb0, 0x3f8a, 0x5725, 0x5e3f, 0x1, 0x1);
        gbc.writeMem(0xa05f, { 0x0, 0x0 });
        gbc.writeMem(0xcbc2, { 0xdf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x3f, gbc.b());
        EXPECT(0x8a, gbc.c());
        EXPECT(0x57, gbc.d());
        EXPECT(0x25, gbc.e());
        EXPECT(0x5e, gbc.h());
        EXPECT(0x3f, gbc.l());
        EXPECT(0xa05f, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xc3, gbc.readMem(0xa05f));
        EXPECT(0xcb, gbc.readMem(0xa060));
        EXPECT(0xdf, gbc.readMem(0xcbc2));
        // DF 0255
        gbc.setState(0x8d8f, 0xcc78, 0xa480, 0x166e, 0xf13a, 0x3323, 0x0, 0x0);
        gbc.writeMem(0x8d8f, { 0xdf });
        gbc.writeMem(0xcc76, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xa4, gbc.a());
        EXPECT(0x16, gbc.b());
        EXPECT(0x6e, gbc.c());
        EXPECT(0xf1, gbc.d());
        EXPECT(0x3a, gbc.e());
        EXPECT(0x33, gbc.h());
        EXPECT(0x23, gbc.l());
        EXPECT(0xcc76, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0x8d8f));
        EXPECT(0x90, gbc.readMem(0xcc76));
        EXPECT(0x8d, gbc.readMem(0xcc77));
        // DF 0256
        gbc.setState(0x63e4, 0x8474, 0xd5a0, 0x494e, 0x150d, 0x8312, 0x0, 0x1);
        gbc.writeMem(0x63e4, { 0xdf });
        gbc.writeMem(0x8472, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xd5, gbc.a());
        EXPECT(0x49, gbc.b());
        EXPECT(0x4e, gbc.c());
        EXPECT(0x15, gbc.d());
        EXPECT(0xd, gbc.e());
        EXPECT(0x83, gbc.h());
        EXPECT(0x12, gbc.l());
        EXPECT(0x8472, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xe5, gbc.readMem(0x8472));
        EXPECT(0x63, gbc.readMem(0x8473));
        // DF 0257
        gbc.setState(0xeee4, 0xc6fd, 0x35b0, 0xbfc1, 0xca81, 0x1497, 0x1, 0x0);
        gbc.writeMem(0xc6fb, { 0x0, 0x0 });
        gbc.writeMem(0xeee4, { 0xdf });
        gbc.step();
        EXPECT(0x35, gbc.a());
        EXPECT(0xbf, gbc.b());
        EXPECT(0xc1, gbc.c());
        EXPECT(0xca, gbc.d());
        EXPECT(0x81, gbc.e());
        EXPECT(0x14, gbc.h());
        EXPECT(0x97, gbc.l());
        EXPECT(0xc6fb, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xe5, gbc.readMem(0xc6fb));
        EXPECT(0xee, gbc.readMem(0xc6fc));
        EXPECT(0xdf, gbc.readMem(0xeee4));
        // DF 0258
        gbc.setState(0x46ef, 0xb029, 0x5f80, 0x775f, 0x4d3, 0xa3bb, 0x0, 0x1);
        gbc.writeMem(0x46ef, { 0xdf });
        gbc.writeMem(0xb027, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x5f, gbc.a());
        EXPECT(0x77, gbc.b());
        EXPECT(0x5f, gbc.c());
        EXPECT(0x4, gbc.d());
        EXPECT(0xd3, gbc.e());
        EXPECT(0xa3, gbc.h());
        EXPECT(0xbb, gbc.l());
        EXPECT(0xb027, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xf0, gbc.readMem(0xb027));
        EXPECT(0x46, gbc.readMem(0xb028));
        // DF 025F
        gbc.setState(0x2988, 0x84f8, 0xf610, 0xc636, 0x6fc9, 0x7fdf, 0x1, 0x0);
        gbc.writeMem(0x2988, { 0xdf });
        gbc.writeMem(0x84f6, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xf6, gbc.a());
        EXPECT(0xc6, gbc.b());
        EXPECT(0x36, gbc.c());
        EXPECT(0x6f, gbc.d());
        EXPECT(0xc9, gbc.e());
        EXPECT(0x7f, gbc.h());
        EXPECT(0xdf, gbc.l());
        EXPECT(0x84f6, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x89, gbc.readMem(0x84f6));
        EXPECT(0x29, gbc.readMem(0x84f7));
        // DF 0260
        gbc.setState(0xac38, 0x919c, 0x2cf0, 0x194d, 0x80dd, 0x426, 0x0, 0x0);
        gbc.writeMem(0x919a, { 0x0, 0x0 });
        gbc.writeMem(0xac38, { 0xdf });
        gbc.step();
        EXPECT(0x2c, gbc.a());
        EXPECT(0x19, gbc.b());
        EXPECT(0x4d, gbc.c());
        EXPECT(0x80, gbc.d());
        EXPECT(0xdd, gbc.e());
        EXPECT(0x4, gbc.h());
        EXPECT(0x26, gbc.l());
        EXPECT(0x919a, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x39, gbc.readMem(0x919a));
        EXPECT(0xac, gbc.readMem(0x919b));
        EXPECT(0xdf, gbc.readMem(0xac38));
        // DF 0261
        gbc.setState(0xcb8c, 0xaf69, 0x1b00, 0x3284, 0x961e, 0xd72a, 0x1, 0x1);
        gbc.writeMem(0xaf67, { 0x0, 0x0 });
        gbc.writeMem(0xcb8c, { 0xdf });
        gbc.step();
        EXPECT(0x1b, gbc.a());
        EXPECT(0x32, gbc.b());
        EXPECT(0x84, gbc.c());
        EXPECT(0x96, gbc.d());
        EXPECT(0x1e, gbc.e());
        EXPECT(0xd7, gbc.h());
        EXPECT(0x2a, gbc.l());
        EXPECT(0xaf67, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x8d, gbc.readMem(0xaf67));
        EXPECT(0xcb, gbc.readMem(0xaf68));
        EXPECT(0xdf, gbc.readMem(0xcb8c));
        // DF 0262
        gbc.setState(0x5e70, 0xa6c7, 0x5c00, 0x5d9b, 0xfdff, 0xdcae, 0x0, 0x1);
        gbc.writeMem(0x5e70, { 0xdf });
        gbc.writeMem(0xa6c5, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x5c, gbc.a());
        EXPECT(0x5d, gbc.b());
        EXPECT(0x9b, gbc.c());
        EXPECT(0xfd, gbc.d());
        EXPECT(0xff, gbc.e());
        EXPECT(0xdc, gbc.h());
        EXPECT(0xae, gbc.l());
        EXPECT(0xa6c5, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x71, gbc.readMem(0xa6c5));
        EXPECT(0x5e, gbc.readMem(0xa6c6));
        // DF 0263
        gbc.setState(0x516a, 0xaa7d, 0x30a0, 0xe88d, 0xbf34, 0x3de5, 0x1, 0x1);
        gbc.writeMem(0x516a, { 0xdf });
        gbc.writeMem(0xaa7b, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x30, gbc.a());
        EXPECT(0xe8, gbc.b());
        EXPECT(0x8d, gbc.c());
        EXPECT(0xbf, gbc.d());
        EXPECT(0x34, gbc.e());
        EXPECT(0x3d, gbc.h());
        EXPECT(0xe5, gbc.l());
        EXPECT(0xaa7b, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x6b, gbc.readMem(0xaa7b));
        EXPECT(0x51, gbc.readMem(0xaa7c));
        // DF 0266
        gbc.setState(0x4ee1, 0xed27, 0x1150, 0xd01a, 0x4e46, 0xabc5, 0x0, 0x1);
        gbc.writeMem(0x4ee1, { 0xdf });
        gbc.writeMem(0xed25, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x11, gbc.a());
        EXPECT(0xd0, gbc.b());
        EXPECT(0x1a, gbc.c());
        EXPECT(0x4e, gbc.d());
        EXPECT(0x46, gbc.e());
        EXPECT(0xab, gbc.h());
        EXPECT(0xc5, gbc.l());
        EXPECT(0xed25, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xe2, gbc.readMem(0xed25));
        EXPECT(0x4e, gbc.readMem(0xed26));
        // DF 0267
        gbc.setState(0x470a, 0xbb4b, 0x1530, 0xa962, 0x3f82, 0x58bd, 0x1, 0x1);
        gbc.writeMem(0x470a, { 0xdf });
        gbc.writeMem(0xbb49, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x15, gbc.a());
        EXPECT(0xa9, gbc.b());
        EXPECT(0x62, gbc.c());
        EXPECT(0x3f, gbc.d());
        EXPECT(0x82, gbc.e());
        EXPECT(0x58, gbc.h());
        EXPECT(0xbd, gbc.l());
        EXPECT(0xbb49, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xb, gbc.readMem(0xbb49));
        EXPECT(0x47, gbc.readMem(0xbb4a));
        // DF 0269
        gbc.setState(0x49b2, 0x91db, 0xa5f0, 0x7739, 0x100e, 0xd603, 0x0, 0x0);
        gbc.writeMem(0x49b2, { 0xdf });
        gbc.writeMem(0x91d9, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xa5, gbc.a());
        EXPECT(0x77, gbc.b());
        EXPECT(0x39, gbc.c());
        EXPECT(0x10, gbc.d());
        EXPECT(0xe, gbc.e());
        EXPECT(0xd6, gbc.h());
        EXPECT(0x3, gbc.l());
        EXPECT(0x91d9, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xb3, gbc.readMem(0x91d9));
        EXPECT(0x49, gbc.readMem(0x91da));
        // DF 026D
        gbc.setState(0x968d, 0xc1de, 0x4150, 0xb0dc, 0xc77a, 0xc90, 0x1, 0x1);
        gbc.writeMem(0x968d, { 0xdf });
        gbc.writeMem(0xc1dc, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x41, gbc.a());
        EXPECT(0xb0, gbc.b());
        EXPECT(0xdc, gbc.c());
        EXPECT(0xc7, gbc.d());
        EXPECT(0x7a, gbc.e());
        EXPECT(0xc, gbc.h());
        EXPECT(0x90, gbc.l());
        EXPECT(0xc1dc, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0x968d));
        EXPECT(0x8e, gbc.readMem(0xc1dc));
        EXPECT(0x96, gbc.readMem(0xc1dd));
        // DF 026F
        gbc.setState(0x971e, 0xe15f, 0x2520, 0xecb0, 0x4326, 0x7017, 0x0, 0x1);
        gbc.writeMem(0x971e, { 0xdf });
        gbc.writeMem(0xe15d, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x25, gbc.a());
        EXPECT(0xec, gbc.b());
        EXPECT(0xb0, gbc.c());
        EXPECT(0x43, gbc.d());
        EXPECT(0x26, gbc.e());
        EXPECT(0x70, gbc.h());
        EXPECT(0x17, gbc.l());
        EXPECT(0xe15d, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0x971e));
        EXPECT(0x1f, gbc.readMem(0xe15d));
        EXPECT(0x97, gbc.readMem(0xe15e));
        // DF 0272
        gbc.setState(0x7e7b, 0xdf35, 0x8ab0, 0xb1bc, 0x702c, 0x8391, 0x0, 0x0);
        gbc.writeMem(0x7e7b, { 0xdf });
        gbc.writeMem(0xdf33, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x8a, gbc.a());
        EXPECT(0xb1, gbc.b());
        EXPECT(0xbc, gbc.c());
        EXPECT(0x70, gbc.d());
        EXPECT(0x2c, gbc.e());
        EXPECT(0x83, gbc.h());
        EXPECT(0x91, gbc.l());
        EXPECT(0xdf33, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x7c, gbc.readMem(0xdf33));
        EXPECT(0x7e, gbc.readMem(0xdf34));
        // DF 0275
        gbc.setState(0xd57f, 0x985c, 0xf770, 0xb9a2, 0xbe8c, 0x7ee0, 0x1, 0x1);
        gbc.writeMem(0x985a, { 0x0, 0x0 });
        gbc.writeMem(0xd57f, { 0xdf });
        gbc.step();
        EXPECT(0xf7, gbc.a());
        EXPECT(0xb9, gbc.b());
        EXPECT(0xa2, gbc.c());
        EXPECT(0xbe, gbc.d());
        EXPECT(0x8c, gbc.e());
        EXPECT(0x7e, gbc.h());
        EXPECT(0xe0, gbc.l());
        EXPECT(0x985a, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x80, gbc.readMem(0x985a));
        EXPECT(0xd5, gbc.readMem(0x985b));
        EXPECT(0xdf, gbc.readMem(0xd57f));
        // DF 0277
        gbc.setState(0xd67e, 0xc16d, 0xc420, 0x275d, 0x6044, 0x1f52, 0x1, 0x1);
        gbc.writeMem(0xc16b, { 0x0, 0x0 });
        gbc.writeMem(0xd67e, { 0xdf });
        gbc.step();
        EXPECT(0xc4, gbc.a());
        EXPECT(0x27, gbc.b());
        EXPECT(0x5d, gbc.c());
        EXPECT(0x60, gbc.d());
        EXPECT(0x44, gbc.e());
        EXPECT(0x1f, gbc.h());
        EXPECT(0x52, gbc.l());
        EXPECT(0xc16b, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x7f, gbc.readMem(0xc16b));
        EXPECT(0xd6, gbc.readMem(0xc16c));
        EXPECT(0xdf, gbc.readMem(0xd67e));
        // DF 0279
        gbc.setState(0x2912, 0xd9fc, 0xea0, 0xf38e, 0x248d, 0xb426, 0x0, 0x1);
        gbc.writeMem(0x2912, { 0xdf });
        gbc.writeMem(0xd9fa, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xe, gbc.a());
        EXPECT(0xf3, gbc.b());
        EXPECT(0x8e, gbc.c());
        EXPECT(0x24, gbc.d());
        EXPECT(0x8d, gbc.e());
        EXPECT(0xb4, gbc.h());
        EXPECT(0x26, gbc.l());
        EXPECT(0xd9fa, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x13, gbc.readMem(0xd9fa));
        EXPECT(0x29, gbc.readMem(0xd9fb));
        // DF 027B
        gbc.setState(0xa7d0, 0xbb3e, 0x5b20, 0xb016, 0x978f, 0x3132, 0x1, 0x1);
        gbc.writeMem(0xa7d0, { 0xdf });
        gbc.writeMem(0xbb3c, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x5b, gbc.a());
        EXPECT(0xb0, gbc.b());
        EXPECT(0x16, gbc.c());
        EXPECT(0x97, gbc.d());
        EXPECT(0x8f, gbc.e());
        EXPECT(0x31, gbc.h());
        EXPECT(0x32, gbc.l());
        EXPECT(0xbb3c, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0xa7d0));
        EXPECT(0xd1, gbc.readMem(0xbb3c));
        EXPECT(0xa7, gbc.readMem(0xbb3d));
        // DF 027C
        gbc.setState(0x6f9, 0xefcb, 0x4a70, 0x4860, 0xc6c7, 0x4b15, 0x0, 0x0);
        gbc.writeMem(0x6f9, { 0xdf });
        gbc.writeMem(0xefc9, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x4a, gbc.a());
        EXPECT(0x48, gbc.b());
        EXPECT(0x60, gbc.c());
        EXPECT(0xc6, gbc.d());
        EXPECT(0xc7, gbc.e());
        EXPECT(0x4b, gbc.h());
        EXPECT(0x15, gbc.l());
        EXPECT(0xefc9, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xfa, gbc.readMem(0xefc9));
        EXPECT(0x6, gbc.readMem(0xefca));
        // DF 027E
        gbc.setState(0x6b82, 0x89e5, 0xc880, 0xd1ce, 0x4d1b, 0xc79d, 0x0, 0x0);
        gbc.writeMem(0x6b82, { 0xdf });
        gbc.writeMem(0x89e3, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xc8, gbc.a());
        EXPECT(0xd1, gbc.b());
        EXPECT(0xce, gbc.c());
        EXPECT(0x4d, gbc.d());
        EXPECT(0x1b, gbc.e());
        EXPECT(0xc7, gbc.h());
        EXPECT(0x9d, gbc.l());
        EXPECT(0x89e3, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x83, gbc.readMem(0x89e3));
        EXPECT(0x6b, gbc.readMem(0x89e4));
        // DF 0281
        gbc.setState(0xd7f5, 0x82b3, 0x2b60, 0xa0ac, 0x66b4, 0xf722, 0x0, 0x1);
        gbc.writeMem(0x82b1, { 0x0, 0x0 });
        gbc.writeMem(0xd7f5, { 0xdf });
        gbc.step();
        EXPECT(0x2b, gbc.a());
        EXPECT(0xa0, gbc.b());
        EXPECT(0xac, gbc.c());
        EXPECT(0x66, gbc.d());
        EXPECT(0xb4, gbc.e());
        EXPECT(0xf7, gbc.h());
        EXPECT(0x22, gbc.l());
        EXPECT(0x82b1, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xf6, gbc.readMem(0x82b1));
        EXPECT(0xd7, gbc.readMem(0x82b2));
        EXPECT(0xdf, gbc.readMem(0xd7f5));
        // DF 0282
        gbc.setState(0x7518, 0xfc97, 0xf040, 0xa0bf, 0xfc38, 0x1d86, 0x1, 0x1);
        gbc.writeMem(0x7518, { 0xdf });
        gbc.writeMem(0xfc95, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xf0, gbc.a());
        EXPECT(0xa0, gbc.b());
        EXPECT(0xbf, gbc.c());
        EXPECT(0xfc, gbc.d());
        EXPECT(0x38, gbc.e());
        EXPECT(0x1d, gbc.h());
        EXPECT(0x86, gbc.l());
        EXPECT(0xfc95, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x19, gbc.readMem(0xfc95));
        EXPECT(0x75, gbc.readMem(0xfc96));
        // DF 0284
        gbc.setState(0xabf6, 0xcf8e, 0x5f30, 0x4fd2, 0xcd6b, 0xf6a8, 0x0, 0x1);
        gbc.writeMem(0xabf6, { 0xdf });
        gbc.writeMem(0xcf8c, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x5f, gbc.a());
        EXPECT(0x4f, gbc.b());
        EXPECT(0xd2, gbc.c());
        EXPECT(0xcd, gbc.d());
        EXPECT(0x6b, gbc.e());
        EXPECT(0xf6, gbc.h());
        EXPECT(0xa8, gbc.l());
        EXPECT(0xcf8c, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0xabf6));
        EXPECT(0xf7, gbc.readMem(0xcf8c));
        EXPECT(0xab, gbc.readMem(0xcf8d));
        // DF 0285
        gbc.setState(0x64dc, 0xb0e8, 0xe2b0, 0x8257, 0xe403, 0x8b75, 0x1, 0x1);
        gbc.writeMem(0x64dc, { 0xdf });
        gbc.writeMem(0xb0e6, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xe2, gbc.a());
        EXPECT(0x82, gbc.b());
        EXPECT(0x57, gbc.c());
        EXPECT(0xe4, gbc.d());
        EXPECT(0x3, gbc.e());
        EXPECT(0x8b, gbc.h());
        EXPECT(0x75, gbc.l());
        EXPECT(0xb0e6, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdd, gbc.readMem(0xb0e6));
        EXPECT(0x64, gbc.readMem(0xb0e7));
        // DF 0287
        gbc.setState(0x5719, 0xa68f, 0xd880, 0x40cb, 0x2f2, 0x5e28, 0x1, 0x0);
        gbc.writeMem(0x5719, { 0xdf });
        gbc.writeMem(0xa68d, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xd8, gbc.a());
        EXPECT(0x40, gbc.b());
        EXPECT(0xcb, gbc.c());
        EXPECT(0x2, gbc.d());
        EXPECT(0xf2, gbc.e());
        EXPECT(0x5e, gbc.h());
        EXPECT(0x28, gbc.l());
        EXPECT(0xa68d, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x1a, gbc.readMem(0xa68d));
        EXPECT(0x57, gbc.readMem(0xa68e));
        // DF 0288
        gbc.setState(0xae1d, 0xb89e, 0xcf30, 0x8cad, 0xb7af, 0xbbec, 0x0, 0x1);
        gbc.writeMem(0xae1d, { 0xdf });
        gbc.writeMem(0xb89c, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xcf, gbc.a());
        EXPECT(0x8c, gbc.b());
        EXPECT(0xad, gbc.c());
        EXPECT(0xb7, gbc.d());
        EXPECT(0xaf, gbc.e());
        EXPECT(0xbb, gbc.h());
        EXPECT(0xec, gbc.l());
        EXPECT(0xb89c, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0xae1d));
        EXPECT(0x1e, gbc.readMem(0xb89c));
        EXPECT(0xae, gbc.readMem(0xb89d));
        // DF 0289
        gbc.setState(0x24ea, 0xbb39, 0x1d30, 0xc15, 0xe2a2, 0xad4b, 0x1, 0x0);
        gbc.writeMem(0x24ea, { 0xdf });
        gbc.writeMem(0xbb37, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x1d, gbc.a());
        EXPECT(0xc, gbc.b());
        EXPECT(0x15, gbc.c());
        EXPECT(0xe2, gbc.d());
        EXPECT(0xa2, gbc.e());
        EXPECT(0xad, gbc.h());
        EXPECT(0x4b, gbc.l());
        EXPECT(0xbb37, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xeb, gbc.readMem(0xbb37));
        EXPECT(0x24, gbc.readMem(0xbb38));
        // DF 028C
        gbc.setState(0x8db7, 0x9641, 0xfbf0, 0x2fdd, 0xd9f7, 0x49a7, 0x0, 0x1);
        gbc.writeMem(0x8db7, { 0xdf });
        gbc.writeMem(0x963f, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xfb, gbc.a());
        EXPECT(0x2f, gbc.b());
        EXPECT(0xdd, gbc.c());
        EXPECT(0xd9, gbc.d());
        EXPECT(0xf7, gbc.e());
        EXPECT(0x49, gbc.h());
        EXPECT(0xa7, gbc.l());
        EXPECT(0x963f, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0x8db7));
        EXPECT(0xb8, gbc.readMem(0x963f));
        EXPECT(0x8d, gbc.readMem(0x9640));
        // DF 0295
        gbc.setState(0x51cd, 0x880f, 0xb120, 0x7260, 0xcdb6, 0xd031, 0x1, 0x0);
        gbc.writeMem(0x51cd, { 0xdf });
        gbc.writeMem(0x880d, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xb1, gbc.a());
        EXPECT(0x72, gbc.b());
        EXPECT(0x60, gbc.c());
        EXPECT(0xcd, gbc.d());
        EXPECT(0xb6, gbc.e());
        EXPECT(0xd0, gbc.h());
        EXPECT(0x31, gbc.l());
        EXPECT(0x880d, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xce, gbc.readMem(0x880d));
        EXPECT(0x51, gbc.readMem(0x880e));
        // DF 0296
        gbc.setState(0x9f32, 0xe360, 0x4990, 0x533c, 0xfe1a, 0xc2cb, 0x1, 0x0);
        gbc.writeMem(0x9f32, { 0xdf });
        gbc.writeMem(0xe35e, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x49, gbc.a());
        EXPECT(0x53, gbc.b());
        EXPECT(0x3c, gbc.c());
        EXPECT(0xfe, gbc.d());
        EXPECT(0x1a, gbc.e());
        EXPECT(0xc2, gbc.h());
        EXPECT(0xcb, gbc.l());
        EXPECT(0xe35e, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0x9f32));
        EXPECT(0x33, gbc.readMem(0xe35e));
        EXPECT(0x9f, gbc.readMem(0xe35f));
        // DF 0297
        gbc.setState(0x7b3a, 0xbb47, 0xa3e0, 0xb46d, 0x2fcc, 0x503a, 0x0, 0x1);
        gbc.writeMem(0x7b3a, { 0xdf });
        gbc.writeMem(0xbb45, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xa3, gbc.a());
        EXPECT(0xb4, gbc.b());
        EXPECT(0x6d, gbc.c());
        EXPECT(0x2f, gbc.d());
        EXPECT(0xcc, gbc.e());
        EXPECT(0x50, gbc.h());
        EXPECT(0x3a, gbc.l());
        EXPECT(0xbb45, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x3b, gbc.readMem(0xbb45));
        EXPECT(0x7b, gbc.readMem(0xbb46));
        // DF 0299
        gbc.setState(0xb41, 0x8ef6, 0xc6f0, 0xd9d0, 0x91aa, 0x482d, 0x1, 0x0);
        gbc.writeMem(0xb41, { 0xdf });
        gbc.writeMem(0x8ef4, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xc6, gbc.a());
        EXPECT(0xd9, gbc.b());
        EXPECT(0xd0, gbc.c());
        EXPECT(0x91, gbc.d());
        EXPECT(0xaa, gbc.e());
        EXPECT(0x48, gbc.h());
        EXPECT(0x2d, gbc.l());
        EXPECT(0x8ef4, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x42, gbc.readMem(0x8ef4));
        EXPECT(0xb, gbc.readMem(0x8ef5));
        // DF 029B
        gbc.setState(0x45f8, 0x849a, 0x6220, 0xbc86, 0xafa1, 0xa3df, 0x0, 0x0);
        gbc.writeMem(0x45f8, { 0xdf });
        gbc.writeMem(0x8498, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x62, gbc.a());
        EXPECT(0xbc, gbc.b());
        EXPECT(0x86, gbc.c());
        EXPECT(0xaf, gbc.d());
        EXPECT(0xa1, gbc.e());
        EXPECT(0xa3, gbc.h());
        EXPECT(0xdf, gbc.l());
        EXPECT(0x8498, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xf9, gbc.readMem(0x8498));
        EXPECT(0x45, gbc.readMem(0x8499));
        // DF 029E
        gbc.setState(0xa086, 0xc3ee, 0xcb30, 0x5891, 0x57a6, 0x5a09, 0x1, 0x0);
        gbc.writeMem(0xa086, { 0xdf });
        gbc.writeMem(0xc3ec, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xcb, gbc.a());
        EXPECT(0x58, gbc.b());
        EXPECT(0x91, gbc.c());
        EXPECT(0x57, gbc.d());
        EXPECT(0xa6, gbc.e());
        EXPECT(0x5a, gbc.h());
        EXPECT(0x9, gbc.l());
        EXPECT(0xc3ec, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0xa086));
        EXPECT(0x87, gbc.readMem(0xc3ec));
        EXPECT(0xa0, gbc.readMem(0xc3ed));
        // DF 029F
        gbc.setState(0x7c5a, 0x89e1, 0x75a0, 0xa9c8, 0xab6d, 0x55e4, 0x0, 0x1);
        gbc.writeMem(0x7c5a, { 0xdf });
        gbc.writeMem(0x89df, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x75, gbc.a());
        EXPECT(0xa9, gbc.b());
        EXPECT(0xc8, gbc.c());
        EXPECT(0xab, gbc.d());
        EXPECT(0x6d, gbc.e());
        EXPECT(0x55, gbc.h());
        EXPECT(0xe4, gbc.l());
        EXPECT(0x89df, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x5b, gbc.readMem(0x89df));
        EXPECT(0x7c, gbc.readMem(0x89e0));
        // DF 02A1
        gbc.setState(0x7b3d, 0x9af9, 0x3b0, 0xd957, 0xfabe, 0x3f05, 0x1, 0x1);
        gbc.writeMem(0x7b3d, { 0xdf });
        gbc.writeMem(0x9af7, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x3, gbc.a());
        EXPECT(0xd9, gbc.b());
        EXPECT(0x57, gbc.c());
        EXPECT(0xfa, gbc.d());
        EXPECT(0xbe, gbc.e());
        EXPECT(0x3f, gbc.h());
        EXPECT(0x5, gbc.l());
        EXPECT(0x9af7, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x3e, gbc.readMem(0x9af7));
        EXPECT(0x7b, gbc.readMem(0x9af8));
        // DF 02A3
        gbc.setState(0x79b6, 0xa147, 0x2320, 0x666a, 0xa718, 0xba83, 0x1, 0x1);
        gbc.writeMem(0x79b6, { 0xdf });
        gbc.writeMem(0xa145, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x23, gbc.a());
        EXPECT(0x66, gbc.b());
        EXPECT(0x6a, gbc.c());
        EXPECT(0xa7, gbc.d());
        EXPECT(0x18, gbc.e());
        EXPECT(0xba, gbc.h());
        EXPECT(0x83, gbc.l());
        EXPECT(0xa145, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xb7, gbc.readMem(0xa145));
        EXPECT(0x79, gbc.readMem(0xa146));
        // DF 02A5
        gbc.setState(0x1c5b, 0xac04, 0xc010, 0xe5b9, 0x83f5, 0x5dff, 0x1, 0x1);
        gbc.writeMem(0x1c5b, { 0xdf });
        gbc.writeMem(0xac02, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xc0, gbc.a());
        EXPECT(0xe5, gbc.b());
        EXPECT(0xb9, gbc.c());
        EXPECT(0x83, gbc.d());
        EXPECT(0xf5, gbc.e());
        EXPECT(0x5d, gbc.h());
        EXPECT(0xff, gbc.l());
        EXPECT(0xac02, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x5c, gbc.readMem(0xac02));
        EXPECT(0x1c, gbc.readMem(0xac03));
        // DF 02AA
        gbc.setState(0xad76, 0xb138, 0xf9c0, 0xee2, 0xd5f4, 0x2b73, 0x0, 0x1);
        gbc.writeMem(0xad76, { 0xdf });
        gbc.writeMem(0xb136, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xf9, gbc.a());
        EXPECT(0xe, gbc.b());
        EXPECT(0xe2, gbc.c());
        EXPECT(0xd5, gbc.d());
        EXPECT(0xf4, gbc.e());
        EXPECT(0x2b, gbc.h());
        EXPECT(0x73, gbc.l());
        EXPECT(0xb136, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0xad76));
        EXPECT(0x77, gbc.readMem(0xb136));
        EXPECT(0xad, gbc.readMem(0xb137));
        // DF 02AD
        gbc.setState(0x21a6, 0xcba4, 0x9680, 0x4eb6, 0xb908, 0x2689, 0x1, 0x0);
        gbc.writeMem(0x21a6, { 0xdf });
        gbc.writeMem(0xcba2, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x96, gbc.a());
        EXPECT(0x4e, gbc.b());
        EXPECT(0xb6, gbc.c());
        EXPECT(0xb9, gbc.d());
        EXPECT(0x8, gbc.e());
        EXPECT(0x26, gbc.h());
        EXPECT(0x89, gbc.l());
        EXPECT(0xcba2, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xa7, gbc.readMem(0xcba2));
        EXPECT(0x21, gbc.readMem(0xcba3));
        // DF 02AE
        gbc.setState(0x4c94, 0xb328, 0x2bc0, 0x427b, 0xa4f4, 0x6aa, 0x1, 0x1);
        gbc.writeMem(0x4c94, { 0xdf });
        gbc.writeMem(0xb326, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x2b, gbc.a());
        EXPECT(0x42, gbc.b());
        EXPECT(0x7b, gbc.c());
        EXPECT(0xa4, gbc.d());
        EXPECT(0xf4, gbc.e());
        EXPECT(0x6, gbc.h());
        EXPECT(0xaa, gbc.l());
        EXPECT(0xb326, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x95, gbc.readMem(0xb326));
        EXPECT(0x4c, gbc.readMem(0xb327));
        // DF 02AF
        gbc.setState(0x90ef, 0xbaa1, 0xb140, 0x1918, 0xf296, 0x5bc8, 0x1, 0x0);
        gbc.writeMem(0x90ef, { 0xdf });
        gbc.writeMem(0xba9f, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xb1, gbc.a());
        EXPECT(0x19, gbc.b());
        EXPECT(0x18, gbc.c());
        EXPECT(0xf2, gbc.d());
        EXPECT(0x96, gbc.e());
        EXPECT(0x5b, gbc.h());
        EXPECT(0xc8, gbc.l());
        EXPECT(0xba9f, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0x90ef));
        EXPECT(0xf0, gbc.readMem(0xba9f));
        EXPECT(0x90, gbc.readMem(0xbaa0));
        // DF 02B0
        gbc.setState(0xd4be, 0xd512, 0x29a0, 0x827d, 0x45f4, 0x3016, 0x0, 0x1);
        gbc.writeMem(0xd4be, { 0xdf });
        gbc.writeMem(0xd510, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x29, gbc.a());
        EXPECT(0x82, gbc.b());
        EXPECT(0x7d, gbc.c());
        EXPECT(0x45, gbc.d());
        EXPECT(0xf4, gbc.e());
        EXPECT(0x30, gbc.h());
        EXPECT(0x16, gbc.l());
        EXPECT(0xd510, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0xd4be));
        EXPECT(0xbf, gbc.readMem(0xd510));
        EXPECT(0xd4, gbc.readMem(0xd511));
        // DF 02B2
        gbc.setState(0x73fd, 0xe41d, 0x3f20, 0xc1c1, 0x3da0, 0xe175, 0x0, 0x1);
        gbc.writeMem(0x73fd, { 0xdf });
        gbc.writeMem(0xe41b, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x3f, gbc.a());
        EXPECT(0xc1, gbc.b());
        EXPECT(0xc1, gbc.c());
        EXPECT(0x3d, gbc.d());
        EXPECT(0xa0, gbc.e());
        EXPECT(0xe1, gbc.h());
        EXPECT(0x75, gbc.l());
        EXPECT(0xe41b, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xfe, gbc.readMem(0xe41b));
        EXPECT(0x73, gbc.readMem(0xe41c));
        // DF 02B5
        gbc.setState(0xb774, 0xbd87, 0xd010, 0x2fb7, 0x92cc, 0x2c08, 0x1, 0x1);
        gbc.writeMem(0xb774, { 0xdf });
        gbc.writeMem(0xbd85, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xd0, gbc.a());
        EXPECT(0x2f, gbc.b());
        EXPECT(0xb7, gbc.c());
        EXPECT(0x92, gbc.d());
        EXPECT(0xcc, gbc.e());
        EXPECT(0x2c, gbc.h());
        EXPECT(0x8, gbc.l());
        EXPECT(0xbd85, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0xb774));
        EXPECT(0x75, gbc.readMem(0xbd85));
        EXPECT(0xb7, gbc.readMem(0xbd86));
        // DF 02B8
        gbc.setState(0x5fd5, 0xa923, 0x950, 0x1f77, 0x2a39, 0x1cf4, 0x1, 0x0);
        gbc.writeMem(0x5fd5, { 0xdf });
        gbc.writeMem(0xa921, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x9, gbc.a());
        EXPECT(0x1f, gbc.b());
        EXPECT(0x77, gbc.c());
        EXPECT(0x2a, gbc.d());
        EXPECT(0x39, gbc.e());
        EXPECT(0x1c, gbc.h());
        EXPECT(0xf4, gbc.l());
        EXPECT(0xa921, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xd6, gbc.readMem(0xa921));
        EXPECT(0x5f, gbc.readMem(0xa922));
        // DF 02B9
        gbc.setState(0xb112, 0xdf8c, 0xe920, 0xe603, 0x9dea, 0x2bea, 0x0, 0x1);
        gbc.writeMem(0xb112, { 0xdf });
        gbc.writeMem(0xdf8a, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xe9, gbc.a());
        EXPECT(0xe6, gbc.b());
        EXPECT(0x3, gbc.c());
        EXPECT(0x9d, gbc.d());
        EXPECT(0xea, gbc.e());
        EXPECT(0x2b, gbc.h());
        EXPECT(0xea, gbc.l());
        EXPECT(0xdf8a, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0xb112));
        EXPECT(0x13, gbc.readMem(0xdf8a));
        EXPECT(0xb1, gbc.readMem(0xdf8b));
        // DF 02BA
        gbc.setState(0xec6b, 0x90bc, 0xaf10, 0x466d, 0x4267, 0xc376, 0x0, 0x1);
        gbc.writeMem(0x90ba, { 0x0, 0x0 });
        gbc.writeMem(0xec6b, { 0xdf });
        gbc.step();
        EXPECT(0xaf, gbc.a());
        EXPECT(0x46, gbc.b());
        EXPECT(0x6d, gbc.c());
        EXPECT(0x42, gbc.d());
        EXPECT(0x67, gbc.e());
        EXPECT(0xc3, gbc.h());
        EXPECT(0x76, gbc.l());
        EXPECT(0x90ba, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x6c, gbc.readMem(0x90ba));
        EXPECT(0xec, gbc.readMem(0x90bb));
        EXPECT(0xdf, gbc.readMem(0xec6b));
        // DF 02BC
        gbc.setState(0x7576, 0xc558, 0x4c10, 0xf64b, 0xfbe6, 0x566, 0x1, 0x0);
        gbc.writeMem(0x7576, { 0xdf });
        gbc.writeMem(0xc556, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x4c, gbc.a());
        EXPECT(0xf6, gbc.b());
        EXPECT(0x4b, gbc.c());
        EXPECT(0xfb, gbc.d());
        EXPECT(0xe6, gbc.e());
        EXPECT(0x5, gbc.h());
        EXPECT(0x66, gbc.l());
        EXPECT(0xc556, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x77, gbc.readMem(0xc556));
        EXPECT(0x75, gbc.readMem(0xc557));
        // DF 02C0
        gbc.setState(0xb17e, 0xf9d2, 0x2260, 0xe83, 0xf409, 0x30e3, 0x0, 0x1);
        gbc.writeMem(0xb17e, { 0xdf });
        gbc.writeMem(0xf9d0, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x22, gbc.a());
        EXPECT(0xe, gbc.b());
        EXPECT(0x83, gbc.c());
        EXPECT(0xf4, gbc.d());
        EXPECT(0x9, gbc.e());
        EXPECT(0x30, gbc.h());
        EXPECT(0xe3, gbc.l());
        EXPECT(0xf9d0, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0xb17e));
        EXPECT(0x7f, gbc.readMem(0xf9d0));
        EXPECT(0xb1, gbc.readMem(0xf9d1));
        // DF 02C1
        gbc.setState(0xced5, 0xc586, 0xad50, 0xee6f, 0xec64, 0x4154, 0x1, 0x1);
        gbc.writeMem(0xc584, { 0x0, 0x0 });
        gbc.writeMem(0xced5, { 0xdf });
        gbc.step();
        EXPECT(0xad, gbc.a());
        EXPECT(0xee, gbc.b());
        EXPECT(0x6f, gbc.c());
        EXPECT(0xec, gbc.d());
        EXPECT(0x64, gbc.e());
        EXPECT(0x41, gbc.h());
        EXPECT(0x54, gbc.l());
        EXPECT(0xc584, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xd6, gbc.readMem(0xc584));
        EXPECT(0xce, gbc.readMem(0xc585));
        EXPECT(0xdf, gbc.readMem(0xced5));
        // DF 02C4
        gbc.setState(0x71cf, 0x9a6c, 0xfc10, 0xcbd4, 0x7640, 0x1563, 0x0, 0x1);
        gbc.writeMem(0x71cf, { 0xdf });
        gbc.writeMem(0x9a6a, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xfc, gbc.a());
        EXPECT(0xcb, gbc.b());
        EXPECT(0xd4, gbc.c());
        EXPECT(0x76, gbc.d());
        EXPECT(0x40, gbc.e());
        EXPECT(0x15, gbc.h());
        EXPECT(0x63, gbc.l());
        EXPECT(0x9a6a, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xd0, gbc.readMem(0x9a6a));
        EXPECT(0x71, gbc.readMem(0x9a6b));
        // DF 02C5
        gbc.setState(0xd77f, 0x9da7, 0xa4c0, 0x113, 0x79d9, 0x6090, 0x1, 0x1);
        gbc.writeMem(0x9da5, { 0x0, 0x0 });
        gbc.writeMem(0xd77f, { 0xdf });
        gbc.step();
        EXPECT(0xa4, gbc.a());
        EXPECT(0x1, gbc.b());
        EXPECT(0x13, gbc.c());
        EXPECT(0x79, gbc.d());
        EXPECT(0xd9, gbc.e());
        EXPECT(0x60, gbc.h());
        EXPECT(0x90, gbc.l());
        EXPECT(0x9da5, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x80, gbc.readMem(0x9da5));
        EXPECT(0xd7, gbc.readMem(0x9da6));
        EXPECT(0xdf, gbc.readMem(0xd77f));
        // DF 02CB
        gbc.setState(0xbef1, 0x8e31, 0xe040, 0xab47, 0xe95c, 0x1556, 0x1, 0x0);
        gbc.writeMem(0x8e2f, { 0x0, 0x0 });
        gbc.writeMem(0xbef1, { 0xdf });
        gbc.step();
        EXPECT(0xe0, gbc.a());
        EXPECT(0xab, gbc.b());
        EXPECT(0x47, gbc.c());
        EXPECT(0xe9, gbc.d());
        EXPECT(0x5c, gbc.e());
        EXPECT(0x15, gbc.h());
        EXPECT(0x56, gbc.l());
        EXPECT(0x8e2f, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xf2, gbc.readMem(0x8e2f));
        EXPECT(0xbe, gbc.readMem(0x8e30));
        EXPECT(0xdf, gbc.readMem(0xbef1));
        // DF 02CC
        gbc.setState(0x5675, 0xa215, 0xd400, 0x13ec, 0xe1e4, 0xdc13, 0x1, 0x1);
        gbc.writeMem(0x5675, { 0xdf });
        gbc.writeMem(0xa213, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xd4, gbc.a());
        EXPECT(0x13, gbc.b());
        EXPECT(0xec, gbc.c());
        EXPECT(0xe1, gbc.d());
        EXPECT(0xe4, gbc.e());
        EXPECT(0xdc, gbc.h());
        EXPECT(0x13, gbc.l());
        EXPECT(0xa213, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x76, gbc.readMem(0xa213));
        EXPECT(0x56, gbc.readMem(0xa214));
        // DF 02CF
        gbc.setState(0x3392, 0x8744, 0x7200, 0x4dc4, 0x144d, 0x2e9e, 0x0, 0x0);
        gbc.writeMem(0x3392, { 0xdf });
        gbc.writeMem(0x8742, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x72, gbc.a());
        EXPECT(0x4d, gbc.b());
        EXPECT(0xc4, gbc.c());
        EXPECT(0x14, gbc.d());
        EXPECT(0x4d, gbc.e());
        EXPECT(0x2e, gbc.h());
        EXPECT(0x9e, gbc.l());
        EXPECT(0x8742, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x93, gbc.readMem(0x8742));
        EXPECT(0x33, gbc.readMem(0x8743));
        // DF 02D3
        gbc.setState(0xef61, 0x9d3e, 0x2480, 0xb81f, 0xdbe2, 0xb389, 0x1, 0x0);
        gbc.writeMem(0x9d3c, { 0x0, 0x0 });
        gbc.writeMem(0xef61, { 0xdf });
        gbc.step();
        EXPECT(0x24, gbc.a());
        EXPECT(0xb8, gbc.b());
        EXPECT(0x1f, gbc.c());
        EXPECT(0xdb, gbc.d());
        EXPECT(0xe2, gbc.e());
        EXPECT(0xb3, gbc.h());
        EXPECT(0x89, gbc.l());
        EXPECT(0x9d3c, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x62, gbc.readMem(0x9d3c));
        EXPECT(0xef, gbc.readMem(0x9d3d));
        EXPECT(0xdf, gbc.readMem(0xef61));
        // DF 02D5
        gbc.setState(0x2d73, 0xa838, 0x2250, 0x4878, 0x5bf2, 0x4839, 0x1, 0x0);
        gbc.writeMem(0x2d73, { 0xdf });
        gbc.writeMem(0xa836, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x22, gbc.a());
        EXPECT(0x48, gbc.b());
        EXPECT(0x78, gbc.c());
        EXPECT(0x5b, gbc.d());
        EXPECT(0xf2, gbc.e());
        EXPECT(0x48, gbc.h());
        EXPECT(0x39, gbc.l());
        EXPECT(0xa836, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x74, gbc.readMem(0xa836));
        EXPECT(0x2d, gbc.readMem(0xa837));
        // DF 02D6
        gbc.setState(0x431b, 0xa4c9, 0x7020, 0x1eb0, 0x1ef5, 0x3565, 0x0, 0x0);
        gbc.writeMem(0x431b, { 0xdf });
        gbc.writeMem(0xa4c7, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x70, gbc.a());
        EXPECT(0x1e, gbc.b());
        EXPECT(0xb0, gbc.c());
        EXPECT(0x1e, gbc.d());
        EXPECT(0xf5, gbc.e());
        EXPECT(0x35, gbc.h());
        EXPECT(0x65, gbc.l());
        EXPECT(0xa4c7, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x1c, gbc.readMem(0xa4c7));
        EXPECT(0x43, gbc.readMem(0xa4c8));
        // DF 02D7
        gbc.setState(0x4d5d, 0xbf19, 0x56c0, 0x8ee3, 0xfc01, 0x8424, 0x1, 0x1);
        gbc.writeMem(0x4d5d, { 0xdf });
        gbc.writeMem(0xbf17, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x56, gbc.a());
        EXPECT(0x8e, gbc.b());
        EXPECT(0xe3, gbc.c());
        EXPECT(0xfc, gbc.d());
        EXPECT(0x1, gbc.e());
        EXPECT(0x84, gbc.h());
        EXPECT(0x24, gbc.l());
        EXPECT(0xbf17, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x5e, gbc.readMem(0xbf17));
        EXPECT(0x4d, gbc.readMem(0xbf18));
        // DF 02D8
        gbc.setState(0xee5d, 0xad56, 0x99a0, 0x887f, 0x78bc, 0x32e, 0x0, 0x0);
        gbc.writeMem(0xad54, { 0x0, 0x0 });
        gbc.writeMem(0xee5d, { 0xdf });
        gbc.step();
        EXPECT(0x99, gbc.a());
        EXPECT(0x88, gbc.b());
        EXPECT(0x7f, gbc.c());
        EXPECT(0x78, gbc.d());
        EXPECT(0xbc, gbc.e());
        EXPECT(0x3, gbc.h());
        EXPECT(0x2e, gbc.l());
        EXPECT(0xad54, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x5e, gbc.readMem(0xad54));
        EXPECT(0xee, gbc.readMem(0xad55));
        EXPECT(0xdf, gbc.readMem(0xee5d));
        // DF 02DC
        gbc.setState(0x712b, 0xd09f, 0xfb30, 0xb457, 0xdf62, 0x3654, 0x0, 0x1);
        gbc.writeMem(0x712b, { 0xdf });
        gbc.writeMem(0xd09d, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xfb, gbc.a());
        EXPECT(0xb4, gbc.b());
        EXPECT(0x57, gbc.c());
        EXPECT(0xdf, gbc.d());
        EXPECT(0x62, gbc.e());
        EXPECT(0x36, gbc.h());
        EXPECT(0x54, gbc.l());
        EXPECT(0xd09d, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x2c, gbc.readMem(0xd09d));
        EXPECT(0x71, gbc.readMem(0xd09e));
        // DF 02DD
        gbc.setState(0xae0, 0xc02a, 0x27c0, 0xa509, 0x2148, 0x45e4, 0x1, 0x1);
        gbc.writeMem(0xae0, { 0xdf });
        gbc.writeMem(0xc028, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x27, gbc.a());
        EXPECT(0xa5, gbc.b());
        EXPECT(0x9, gbc.c());
        EXPECT(0x21, gbc.d());
        EXPECT(0x48, gbc.e());
        EXPECT(0x45, gbc.h());
        EXPECT(0xe4, gbc.l());
        EXPECT(0xc028, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xe1, gbc.readMem(0xc028));
        EXPECT(0xa, gbc.readMem(0xc029));
        // DF 02DE
        gbc.setState(0x4285, 0xdf8b, 0x8720, 0xa6c5, 0x57f1, 0x129b, 0x1, 0x0);
        gbc.writeMem(0x4285, { 0xdf });
        gbc.writeMem(0xdf89, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x87, gbc.a());
        EXPECT(0xa6, gbc.b());
        EXPECT(0xc5, gbc.c());
        EXPECT(0x57, gbc.d());
        EXPECT(0xf1, gbc.e());
        EXPECT(0x12, gbc.h());
        EXPECT(0x9b, gbc.l());
        EXPECT(0xdf89, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x86, gbc.readMem(0xdf89));
        EXPECT(0x42, gbc.readMem(0xdf8a));
        // DF 02E1
        gbc.setState(0x2f15, 0x8702, 0x24a0, 0x8369, 0xdd9b, 0x938e, 0x0, 0x0);
        gbc.writeMem(0x2f15, { 0xdf });
        gbc.writeMem(0x8700, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x24, gbc.a());
        EXPECT(0x83, gbc.b());
        EXPECT(0x69, gbc.c());
        EXPECT(0xdd, gbc.d());
        EXPECT(0x9b, gbc.e());
        EXPECT(0x93, gbc.h());
        EXPECT(0x8e, gbc.l());
        EXPECT(0x8700, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x16, gbc.readMem(0x8700));
        EXPECT(0x2f, gbc.readMem(0x8701));
        // DF 02E4
        gbc.setState(0x322b, 0x88db, 0x7620, 0xd72c, 0x21e1, 0x6110, 0x0, 0x1);
        gbc.writeMem(0x322b, { 0xdf });
        gbc.writeMem(0x88d9, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x76, gbc.a());
        EXPECT(0xd7, gbc.b());
        EXPECT(0x2c, gbc.c());
        EXPECT(0x21, gbc.d());
        EXPECT(0xe1, gbc.e());
        EXPECT(0x61, gbc.h());
        EXPECT(0x10, gbc.l());
        EXPECT(0x88d9, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x2c, gbc.readMem(0x88d9));
        EXPECT(0x32, gbc.readMem(0x88da));
        // DF 02E7
        gbc.setState(0xc7b, 0xf847, 0x6af0, 0x3b1c, 0x44df, 0xc955, 0x0, 0x1);
        gbc.writeMem(0xc7b, { 0xdf });
        gbc.writeMem(0xf845, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x6a, gbc.a());
        EXPECT(0x3b, gbc.b());
        EXPECT(0x1c, gbc.c());
        EXPECT(0x44, gbc.d());
        EXPECT(0xdf, gbc.e());
        EXPECT(0xc9, gbc.h());
        EXPECT(0x55, gbc.l());
        EXPECT(0xf845, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x7c, gbc.readMem(0xf845));
        EXPECT(0xc, gbc.readMem(0xf846));
        // DF 02E8
        gbc.setState(0x2a52, 0xd0a7, 0x2bb0, 0x8b59, 0xcb79, 0xc963, 0x0, 0x1);
        gbc.writeMem(0x2a52, { 0xdf });
        gbc.writeMem(0xd0a5, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x2b, gbc.a());
        EXPECT(0x8b, gbc.b());
        EXPECT(0x59, gbc.c());
        EXPECT(0xcb, gbc.d());
        EXPECT(0x79, gbc.e());
        EXPECT(0xc9, gbc.h());
        EXPECT(0x63, gbc.l());
        EXPECT(0xd0a5, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x53, gbc.readMem(0xd0a5));
        EXPECT(0x2a, gbc.readMem(0xd0a6));
        // DF 02E9
        gbc.setState(0xc3a0, 0xb7af, 0xf30, 0xd2eb, 0xf77a, 0x713a, 0x1, 0x0);
        gbc.writeMem(0xb7ad, { 0x0, 0x0 });
        gbc.writeMem(0xc3a0, { 0xdf });
        gbc.step();
        EXPECT(0xf, gbc.a());
        EXPECT(0xd2, gbc.b());
        EXPECT(0xeb, gbc.c());
        EXPECT(0xf7, gbc.d());
        EXPECT(0x7a, gbc.e());
        EXPECT(0x71, gbc.h());
        EXPECT(0x3a, gbc.l());
        EXPECT(0xb7ad, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xa1, gbc.readMem(0xb7ad));
        EXPECT(0xc3, gbc.readMem(0xb7ae));
        EXPECT(0xdf, gbc.readMem(0xc3a0));
        // DF 02EB
        gbc.setState(0xb1e0, 0xf53a, 0x1ce0, 0x510a, 0x500, 0xd2d4, 0x0, 0x0);
        gbc.writeMem(0xb1e0, { 0xdf });
        gbc.writeMem(0xf538, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x1c, gbc.a());
        EXPECT(0x51, gbc.b());
        EXPECT(0xa, gbc.c());
        EXPECT(0x5, gbc.d());
        EXPECT(0x0, gbc.e());
        EXPECT(0xd2, gbc.h());
        EXPECT(0xd4, gbc.l());
        EXPECT(0xf538, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0xb1e0));
        EXPECT(0xe1, gbc.readMem(0xf538));
        EXPECT(0xb1, gbc.readMem(0xf539));
        // DF 02EE
        gbc.setState(0x92fd, 0xf42f, 0xc2e0, 0xc9a9, 0xf4af, 0xdbe8, 0x1, 0x0);
        gbc.writeMem(0x92fd, { 0xdf });
        gbc.writeMem(0xf42d, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xc2, gbc.a());
        EXPECT(0xc9, gbc.b());
        EXPECT(0xa9, gbc.c());
        EXPECT(0xf4, gbc.d());
        EXPECT(0xaf, gbc.e());
        EXPECT(0xdb, gbc.h());
        EXPECT(0xe8, gbc.l());
        EXPECT(0xf42d, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0x92fd));
        EXPECT(0xfe, gbc.readMem(0xf42d));
        EXPECT(0x92, gbc.readMem(0xf42e));
        // DF 02F7
        gbc.setState(0xba7d, 0xfae4, 0xb7b0, 0x83ab, 0x6594, 0x46d0, 0x0, 0x1);
        gbc.writeMem(0xba7d, { 0xdf });
        gbc.writeMem(0xfae2, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xb7, gbc.a());
        EXPECT(0x83, gbc.b());
        EXPECT(0xab, gbc.c());
        EXPECT(0x65, gbc.d());
        EXPECT(0x94, gbc.e());
        EXPECT(0x46, gbc.h());
        EXPECT(0xd0, gbc.l());
        EXPECT(0xfae2, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0xba7d));
        EXPECT(0x7e, gbc.readMem(0xfae2));
        EXPECT(0xba, gbc.readMem(0xfae3));
        // DF 02F8
        gbc.setState(0xe7e6, 0x848b, 0xed00, 0xf6cf, 0xf266, 0x2c9, 0x0, 0x0);
        gbc.writeMem(0x8489, { 0x0, 0x0 });
        gbc.writeMem(0xe7e6, { 0xdf });
        gbc.step();
        EXPECT(0xed, gbc.a());
        EXPECT(0xf6, gbc.b());
        EXPECT(0xcf, gbc.c());
        EXPECT(0xf2, gbc.d());
        EXPECT(0x66, gbc.e());
        EXPECT(0x2, gbc.h());
        EXPECT(0xc9, gbc.l());
        EXPECT(0x8489, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xe7, gbc.readMem(0x8489));
        EXPECT(0xe7, gbc.readMem(0x848a));
        EXPECT(0xdf, gbc.readMem(0xe7e6));
        // DF 02FA
        gbc.setState(0xd226, 0xe218, 0xc860, 0x420, 0xaaf6, 0xa79c, 0x1, 0x1);
        gbc.writeMem(0xd226, { 0xdf });
        gbc.writeMem(0xe216, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xc8, gbc.a());
        EXPECT(0x4, gbc.b());
        EXPECT(0x20, gbc.c());
        EXPECT(0xaa, gbc.d());
        EXPECT(0xf6, gbc.e());
        EXPECT(0xa7, gbc.h());
        EXPECT(0x9c, gbc.l());
        EXPECT(0xe216, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0xd226));
        EXPECT(0x27, gbc.readMem(0xe216));
        EXPECT(0xd2, gbc.readMem(0xe217));
        // DF 02FC
        gbc.setState(0x8883, 0x95b1, 0x11f0, 0xb3ed, 0x702d, 0x9c7c, 0x1, 0x0);
        gbc.writeMem(0x8883, { 0xdf });
        gbc.writeMem(0x95af, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x11, gbc.a());
        EXPECT(0xb3, gbc.b());
        EXPECT(0xed, gbc.c());
        EXPECT(0x70, gbc.d());
        EXPECT(0x2d, gbc.e());
        EXPECT(0x9c, gbc.h());
        EXPECT(0x7c, gbc.l());
        EXPECT(0x95af, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0x8883));
        EXPECT(0x84, gbc.readMem(0x95af));
        EXPECT(0x88, gbc.readMem(0x95b0));
        // DF 02FD
        gbc.setState(0xb396, 0xb9bb, 0xa6a0, 0xe0dd, 0x571d, 0x4a1c, 0x1, 0x1);
        gbc.writeMem(0xb396, { 0xdf });
        gbc.writeMem(0xb9b9, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xa6, gbc.a());
        EXPECT(0xe0, gbc.b());
        EXPECT(0xdd, gbc.c());
        EXPECT(0x57, gbc.d());
        EXPECT(0x1d, gbc.e());
        EXPECT(0x4a, gbc.h());
        EXPECT(0x1c, gbc.l());
        EXPECT(0xb9b9, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0xb396));
        EXPECT(0x97, gbc.readMem(0xb9b9));
        EXPECT(0xb3, gbc.readMem(0xb9ba));
        // DF 02FE
        gbc.setState(0x7e80, 0xe28d, 0x5730, 0x4e98, 0x5110, 0x79c6, 0x0, 0x1);
        gbc.writeMem(0x7e80, { 0xdf });
        gbc.writeMem(0xe28b, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x57, gbc.a());
        EXPECT(0x4e, gbc.b());
        EXPECT(0x98, gbc.c());
        EXPECT(0x51, gbc.d());
        EXPECT(0x10, gbc.e());
        EXPECT(0x79, gbc.h());
        EXPECT(0xc6, gbc.l());
        EXPECT(0xe28b, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x81, gbc.readMem(0xe28b));
        EXPECT(0x7e, gbc.readMem(0xe28c));
        // DF 02FF
        gbc.setState(0xcb9a, 0xd460, 0x78c0, 0x151d, 0x3616, 0x5897, 0x0, 0x1);
        gbc.writeMem(0xcb9a, { 0xdf });
        gbc.writeMem(0xd45e, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x78, gbc.a());
        EXPECT(0x15, gbc.b());
        EXPECT(0x1d, gbc.c());
        EXPECT(0x36, gbc.d());
        EXPECT(0x16, gbc.e());
        EXPECT(0x58, gbc.h());
        EXPECT(0x97, gbc.l());
        EXPECT(0xd45e, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0xcb9a));
        EXPECT(0x9b, gbc.readMem(0xd45e));
        EXPECT(0xcb, gbc.readMem(0xd45f));
        // DF 0303
        gbc.setState(0x48f3, 0xd251, 0xf300, 0x7001, 0x7ea7, 0xe02e, 0x1, 0x1);
        gbc.writeMem(0x48f3, { 0xdf });
        gbc.writeMem(0xd24f, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xf3, gbc.a());
        EXPECT(0x70, gbc.b());
        EXPECT(0x1, gbc.c());
        EXPECT(0x7e, gbc.d());
        EXPECT(0xa7, gbc.e());
        EXPECT(0xe0, gbc.h());
        EXPECT(0x2e, gbc.l());
        EXPECT(0xd24f, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xf4, gbc.readMem(0xd24f));
        EXPECT(0x48, gbc.readMem(0xd250));
        // DF 0305
        gbc.setState(0x3671, 0xd2da, 0xfac0, 0x9274, 0x485a, 0xb9, 0x0, 0x1);
        gbc.writeMem(0x3671, { 0xdf });
        gbc.writeMem(0xd2d8, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xfa, gbc.a());
        EXPECT(0x92, gbc.b());
        EXPECT(0x74, gbc.c());
        EXPECT(0x48, gbc.d());
        EXPECT(0x5a, gbc.e());
        EXPECT(0x0, gbc.h());
        EXPECT(0xb9, gbc.l());
        EXPECT(0xd2d8, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x72, gbc.readMem(0xd2d8));
        EXPECT(0x36, gbc.readMem(0xd2d9));
        // DF 0306
        gbc.setState(0xde91, 0xa1cd, 0x4b60, 0x5f48, 0xc393, 0xc233, 0x0, 0x1);
        gbc.writeMem(0xa1cb, { 0x0, 0x0 });
        gbc.writeMem(0xde91, { 0xdf });
        gbc.step();
        EXPECT(0x4b, gbc.a());
        EXPECT(0x5f, gbc.b());
        EXPECT(0x48, gbc.c());
        EXPECT(0xc3, gbc.d());
        EXPECT(0x93, gbc.e());
        EXPECT(0xc2, gbc.h());
        EXPECT(0x33, gbc.l());
        EXPECT(0xa1cb, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x92, gbc.readMem(0xa1cb));
        EXPECT(0xde, gbc.readMem(0xa1cc));
        EXPECT(0xdf, gbc.readMem(0xde91));
        // DF 0307
        gbc.setState(0xc3d4, 0xd652, 0x1a00, 0x90c2, 0x755f, 0xa19a, 0x0, 0x0);
        gbc.writeMem(0xc3d4, { 0xdf });
        gbc.writeMem(0xd650, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x1a, gbc.a());
        EXPECT(0x90, gbc.b());
        EXPECT(0xc2, gbc.c());
        EXPECT(0x75, gbc.d());
        EXPECT(0x5f, gbc.e());
        EXPECT(0xa1, gbc.h());
        EXPECT(0x9a, gbc.l());
        EXPECT(0xd650, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0xc3d4));
        EXPECT(0xd5, gbc.readMem(0xd650));
        EXPECT(0xc3, gbc.readMem(0xd651));
        // DF 030B
        gbc.setState(0x2652, 0xb5eb, 0x3b00, 0x155c, 0x32f1, 0xb57a, 0x0, 0x0);
        gbc.writeMem(0x2652, { 0xdf });
        gbc.writeMem(0xb5e9, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x3b, gbc.a());
        EXPECT(0x15, gbc.b());
        EXPECT(0x5c, gbc.c());
        EXPECT(0x32, gbc.d());
        EXPECT(0xf1, gbc.e());
        EXPECT(0xb5, gbc.h());
        EXPECT(0x7a, gbc.l());
        EXPECT(0xb5e9, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x53, gbc.readMem(0xb5e9));
        EXPECT(0x26, gbc.readMem(0xb5ea));
        // DF 030C
        gbc.setState(0xd193, 0x83cc, 0xf720, 0xa275, 0x9854, 0xe25d, 0x1, 0x0);
        gbc.writeMem(0x83ca, { 0x0, 0x0 });
        gbc.writeMem(0xd193, { 0xdf });
        gbc.step();
        EXPECT(0xf7, gbc.a());
        EXPECT(0xa2, gbc.b());
        EXPECT(0x75, gbc.c());
        EXPECT(0x98, gbc.d());
        EXPECT(0x54, gbc.e());
        EXPECT(0xe2, gbc.h());
        EXPECT(0x5d, gbc.l());
        EXPECT(0x83ca, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x94, gbc.readMem(0x83ca));
        EXPECT(0xd1, gbc.readMem(0x83cb));
        EXPECT(0xdf, gbc.readMem(0xd193));
        // DF 030D
        gbc.setState(0x2ae, 0xf520, 0x9db0, 0x4082, 0x1378, 0x243d, 0x0, 0x1);
        gbc.writeMem(0x2ae, { 0xdf });
        gbc.writeMem(0xf51e, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x9d, gbc.a());
        EXPECT(0x40, gbc.b());
        EXPECT(0x82, gbc.c());
        EXPECT(0x13, gbc.d());
        EXPECT(0x78, gbc.e());
        EXPECT(0x24, gbc.h());
        EXPECT(0x3d, gbc.l());
        EXPECT(0xf51e, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xf51e));
        EXPECT(0x2, gbc.readMem(0xf51f));
        // DF 030E
        gbc.setState(0x4d2, 0x8e94, 0x7e70, 0x8d95, 0x3d4d, 0x3024, 0x0, 0x1);
        gbc.writeMem(0x4d2, { 0xdf });
        gbc.writeMem(0x8e92, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x7e, gbc.a());
        EXPECT(0x8d, gbc.b());
        EXPECT(0x95, gbc.c());
        EXPECT(0x3d, gbc.d());
        EXPECT(0x4d, gbc.e());
        EXPECT(0x30, gbc.h());
        EXPECT(0x24, gbc.l());
        EXPECT(0x8e92, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xd3, gbc.readMem(0x8e92));
        EXPECT(0x4, gbc.readMem(0x8e93));
        // DF 0311
        gbc.setState(0x54c3, 0xc818, 0xe1a0, 0x4799, 0x25cb, 0xa94, 0x0, 0x0);
        gbc.writeMem(0x54c3, { 0xdf });
        gbc.writeMem(0xc816, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xe1, gbc.a());
        EXPECT(0x47, gbc.b());
        EXPECT(0x99, gbc.c());
        EXPECT(0x25, gbc.d());
        EXPECT(0xcb, gbc.e());
        EXPECT(0xa, gbc.h());
        EXPECT(0x94, gbc.l());
        EXPECT(0xc816, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xc4, gbc.readMem(0xc816));
        EXPECT(0x54, gbc.readMem(0xc817));
        // DF 0312
        gbc.setState(0xeee6, 0x928a, 0xced0, 0xd99b, 0x9847, 0xb5df, 0x0, 0x0);
        gbc.writeMem(0x9288, { 0x0, 0x0 });
        gbc.writeMem(0xeee6, { 0xdf });
        gbc.step();
        EXPECT(0xce, gbc.a());
        EXPECT(0xd9, gbc.b());
        EXPECT(0x9b, gbc.c());
        EXPECT(0x98, gbc.d());
        EXPECT(0x47, gbc.e());
        EXPECT(0xb5, gbc.h());
        EXPECT(0xdf, gbc.l());
        EXPECT(0x9288, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xe7, gbc.readMem(0x9288));
        EXPECT(0xee, gbc.readMem(0x9289));
        EXPECT(0xdf, gbc.readMem(0xeee6));
        // DF 0315
        gbc.setState(0x6b95, 0xbef4, 0x3190, 0x8639, 0x9eb3, 0x36b6, 0x0, 0x0);
        gbc.writeMem(0x6b95, { 0xdf });
        gbc.writeMem(0xbef2, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x31, gbc.a());
        EXPECT(0x86, gbc.b());
        EXPECT(0x39, gbc.c());
        EXPECT(0x9e, gbc.d());
        EXPECT(0xb3, gbc.e());
        EXPECT(0x36, gbc.h());
        EXPECT(0xb6, gbc.l());
        EXPECT(0xbef2, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x96, gbc.readMem(0xbef2));
        EXPECT(0x6b, gbc.readMem(0xbef3));
        // DF 0317
        gbc.setState(0x6c5e, 0xa919, 0xa0b0, 0xd88c, 0x51c7, 0x1794, 0x0, 0x1);
        gbc.writeMem(0x6c5e, { 0xdf });
        gbc.writeMem(0xa917, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xa0, gbc.a());
        EXPECT(0xd8, gbc.b());
        EXPECT(0x8c, gbc.c());
        EXPECT(0x51, gbc.d());
        EXPECT(0xc7, gbc.e());
        EXPECT(0x17, gbc.h());
        EXPECT(0x94, gbc.l());
        EXPECT(0xa917, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x5f, gbc.readMem(0xa917));
        EXPECT(0x6c, gbc.readMem(0xa918));
        // DF 031A
        gbc.setState(0xe690, 0xa0f9, 0xa6c0, 0xf7a0, 0x953c, 0xf517, 0x0, 0x0);
        gbc.writeMem(0xa0f7, { 0x0, 0x0 });
        gbc.writeMem(0xe690, { 0xdf });
        gbc.step();
        EXPECT(0xa6, gbc.a());
        EXPECT(0xf7, gbc.b());
        EXPECT(0xa0, gbc.c());
        EXPECT(0x95, gbc.d());
        EXPECT(0x3c, gbc.e());
        EXPECT(0xf5, gbc.h());
        EXPECT(0x17, gbc.l());
        EXPECT(0xa0f7, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x91, gbc.readMem(0xa0f7));
        EXPECT(0xe6, gbc.readMem(0xa0f8));
        EXPECT(0xdf, gbc.readMem(0xe690));
        // DF 031B
        gbc.setState(0x45cb, 0xbe59, 0x98a0, 0xb435, 0xb46a, 0x857c, 0x0, 0x1);
        gbc.writeMem(0x45cb, { 0xdf });
        gbc.writeMem(0xbe57, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x98, gbc.a());
        EXPECT(0xb4, gbc.b());
        EXPECT(0x35, gbc.c());
        EXPECT(0xb4, gbc.d());
        EXPECT(0x6a, gbc.e());
        EXPECT(0x85, gbc.h());
        EXPECT(0x7c, gbc.l());
        EXPECT(0xbe57, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xbe57));
        EXPECT(0x45, gbc.readMem(0xbe58));
        // DF 031C
        gbc.setState(0x450, 0xfbc9, 0xa850, 0xd867, 0xa3, 0x95e6, 0x0, 0x0);
        gbc.writeMem(0x450, { 0xdf });
        gbc.writeMem(0xfbc7, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xa8, gbc.a());
        EXPECT(0xd8, gbc.b());
        EXPECT(0x67, gbc.c());
        EXPECT(0x0, gbc.d());
        EXPECT(0xa3, gbc.e());
        EXPECT(0x95, gbc.h());
        EXPECT(0xe6, gbc.l());
        EXPECT(0xfbc7, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x51, gbc.readMem(0xfbc7));
        EXPECT(0x4, gbc.readMem(0xfbc8));
        // DF 0320
        gbc.setState(0x5934, 0x938f, 0x42d0, 0xb90d, 0x246e, 0x944e, 0x1, 0x0);
        gbc.writeMem(0x5934, { 0xdf });
        gbc.writeMem(0x938d, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x42, gbc.a());
        EXPECT(0xb9, gbc.b());
        EXPECT(0xd, gbc.c());
        EXPECT(0x24, gbc.d());
        EXPECT(0x6e, gbc.e());
        EXPECT(0x94, gbc.h());
        EXPECT(0x4e, gbc.l());
        EXPECT(0x938d, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x35, gbc.readMem(0x938d));
        EXPECT(0x59, gbc.readMem(0x938e));
        // DF 0321
        gbc.setState(0x84f2, 0x9647, 0x9390, 0xf716, 0xa96a, 0xa21d, 0x0, 0x0);
        gbc.writeMem(0x84f2, { 0xdf });
        gbc.writeMem(0x9645, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x93, gbc.a());
        EXPECT(0xf7, gbc.b());
        EXPECT(0x16, gbc.c());
        EXPECT(0xa9, gbc.d());
        EXPECT(0x6a, gbc.e());
        EXPECT(0xa2, gbc.h());
        EXPECT(0x1d, gbc.l());
        EXPECT(0x9645, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0x84f2));
        EXPECT(0xf3, gbc.readMem(0x9645));
        EXPECT(0x84, gbc.readMem(0x9646));
        // DF 0322
        gbc.setState(0x56bb, 0xc6ea, 0xb480, 0x2c98, 0xddec, 0xf3b9, 0x1, 0x0);
        gbc.writeMem(0x56bb, { 0xdf });
        gbc.writeMem(0xc6e8, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xb4, gbc.a());
        EXPECT(0x2c, gbc.b());
        EXPECT(0x98, gbc.c());
        EXPECT(0xdd, gbc.d());
        EXPECT(0xec, gbc.e());
        EXPECT(0xf3, gbc.h());
        EXPECT(0xb9, gbc.l());
        EXPECT(0xc6e8, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xbc, gbc.readMem(0xc6e8));
        EXPECT(0x56, gbc.readMem(0xc6e9));
        // DF 0323
        gbc.setState(0x1e14, 0xab06, 0xb170, 0x6742, 0xb765, 0xb119, 0x0, 0x1);
        gbc.writeMem(0x1e14, { 0xdf });
        gbc.writeMem(0xab04, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xb1, gbc.a());
        EXPECT(0x67, gbc.b());
        EXPECT(0x42, gbc.c());
        EXPECT(0xb7, gbc.d());
        EXPECT(0x65, gbc.e());
        EXPECT(0xb1, gbc.h());
        EXPECT(0x19, gbc.l());
        EXPECT(0xab04, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x15, gbc.readMem(0xab04));
        EXPECT(0x1e, gbc.readMem(0xab05));
        // DF 0326
        gbc.setState(0xcbcc, 0xbc47, 0xd250, 0xcc63, 0x5b8b, 0xc967, 0x0, 0x1);
        gbc.writeMem(0xbc45, { 0x0, 0x0 });
        gbc.writeMem(0xcbcc, { 0xdf });
        gbc.step();
        EXPECT(0xd2, gbc.a());
        EXPECT(0xcc, gbc.b());
        EXPECT(0x63, gbc.c());
        EXPECT(0x5b, gbc.d());
        EXPECT(0x8b, gbc.e());
        EXPECT(0xc9, gbc.h());
        EXPECT(0x67, gbc.l());
        EXPECT(0xbc45, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0xbc45));
        EXPECT(0xcb, gbc.readMem(0xbc46));
        EXPECT(0xdf, gbc.readMem(0xcbcc));
        // DF 0329
        gbc.setState(0x208c, 0xb622, 0xd960, 0xb96e, 0x905d, 0xb22d, 0x1, 0x0);
        gbc.writeMem(0x208c, { 0xdf });
        gbc.writeMem(0xb620, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xd9, gbc.a());
        EXPECT(0xb9, gbc.b());
        EXPECT(0x6e, gbc.c());
        EXPECT(0x90, gbc.d());
        EXPECT(0x5d, gbc.e());
        EXPECT(0xb2, gbc.h());
        EXPECT(0x2d, gbc.l());
        EXPECT(0xb620, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x8d, gbc.readMem(0xb620));
        EXPECT(0x20, gbc.readMem(0xb621));
        // DF 032B
        gbc.setState(0x7e89, 0xda0b, 0x8d00, 0x1f0d, 0xb65e, 0x9987, 0x0, 0x0);
        gbc.writeMem(0x7e89, { 0xdf });
        gbc.writeMem(0xda09, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x8d, gbc.a());
        EXPECT(0x1f, gbc.b());
        EXPECT(0xd, gbc.c());
        EXPECT(0xb6, gbc.d());
        EXPECT(0x5e, gbc.e());
        EXPECT(0x99, gbc.h());
        EXPECT(0x87, gbc.l());
        EXPECT(0xda09, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x8a, gbc.readMem(0xda09));
        EXPECT(0x7e, gbc.readMem(0xda0a));
        // DF 032D
        gbc.setState(0x667b, 0x93e1, 0xcbc0, 0xf802, 0xa05, 0x32bc, 0x1, 0x0);
        gbc.writeMem(0x667b, { 0xdf });
        gbc.writeMem(0x93df, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xcb, gbc.a());
        EXPECT(0xf8, gbc.b());
        EXPECT(0x2, gbc.c());
        EXPECT(0xa, gbc.d());
        EXPECT(0x5, gbc.e());
        EXPECT(0x32, gbc.h());
        EXPECT(0xbc, gbc.l());
        EXPECT(0x93df, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x7c, gbc.readMem(0x93df));
        EXPECT(0x66, gbc.readMem(0x93e0));
        // DF 032E
        gbc.setState(0x74a, 0xdfe4, 0xbb80, 0x2c57, 0x170e, 0x616e, 0x1, 0x1);
        gbc.writeMem(0x74a, { 0xdf });
        gbc.writeMem(0xdfe2, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xbb, gbc.a());
        EXPECT(0x2c, gbc.b());
        EXPECT(0x57, gbc.c());
        EXPECT(0x17, gbc.d());
        EXPECT(0xe, gbc.e());
        EXPECT(0x61, gbc.h());
        EXPECT(0x6e, gbc.l());
        EXPECT(0xdfe2, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x4b, gbc.readMem(0xdfe2));
        EXPECT(0x7, gbc.readMem(0xdfe3));
        // DF 0333
        gbc.setState(0x20b5, 0x8bea, 0xc190, 0x47ae, 0x10e1, 0x12d0, 0x1, 0x1);
        gbc.writeMem(0x20b5, { 0xdf });
        gbc.writeMem(0x8be8, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xc1, gbc.a());
        EXPECT(0x47, gbc.b());
        EXPECT(0xae, gbc.c());
        EXPECT(0x10, gbc.d());
        EXPECT(0xe1, gbc.e());
        EXPECT(0x12, gbc.h());
        EXPECT(0xd0, gbc.l());
        EXPECT(0x8be8, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xb6, gbc.readMem(0x8be8));
        EXPECT(0x20, gbc.readMem(0x8be9));
        // DF 0335
        gbc.setState(0x6340, 0xf1ab, 0x5b90, 0x96d6, 0x4361, 0xbed, 0x1, 0x1);
        gbc.writeMem(0x6340, { 0xdf });
        gbc.writeMem(0xf1a9, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x5b, gbc.a());
        EXPECT(0x96, gbc.b());
        EXPECT(0xd6, gbc.c());
        EXPECT(0x43, gbc.d());
        EXPECT(0x61, gbc.e());
        EXPECT(0xb, gbc.h());
        EXPECT(0xed, gbc.l());
        EXPECT(0xf1a9, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x41, gbc.readMem(0xf1a9));
        EXPECT(0x63, gbc.readMem(0xf1aa));
        // DF 0336
        gbc.setState(0x3a95, 0xf114, 0x4b0, 0xd235, 0xa6be, 0x1d97, 0x0, 0x0);
        gbc.writeMem(0x3a95, { 0xdf });
        gbc.writeMem(0xf112, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x4, gbc.a());
        EXPECT(0xd2, gbc.b());
        EXPECT(0x35, gbc.c());
        EXPECT(0xa6, gbc.d());
        EXPECT(0xbe, gbc.e());
        EXPECT(0x1d, gbc.h());
        EXPECT(0x97, gbc.l());
        EXPECT(0xf112, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x96, gbc.readMem(0xf112));
        EXPECT(0x3a, gbc.readMem(0xf113));
        // DF 0337
        gbc.setState(0x2a8e, 0xbd67, 0x3f0, 0x5b18, 0xeceb, 0x1e02, 0x1, 0x0);
        gbc.writeMem(0x2a8e, { 0xdf });
        gbc.writeMem(0xbd65, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x3, gbc.a());
        EXPECT(0x5b, gbc.b());
        EXPECT(0x18, gbc.c());
        EXPECT(0xec, gbc.d());
        EXPECT(0xeb, gbc.e());
        EXPECT(0x1e, gbc.h());
        EXPECT(0x2, gbc.l());
        EXPECT(0xbd65, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x8f, gbc.readMem(0xbd65));
        EXPECT(0x2a, gbc.readMem(0xbd66));
        // DF 0339
        gbc.setState(0xcc2c, 0xc37e, 0xa870, 0x21a2, 0x6839, 0x74ae, 0x1, 0x0);
        gbc.writeMem(0xc37c, { 0x0, 0x0 });
        gbc.writeMem(0xcc2c, { 0xdf });
        gbc.step();
        EXPECT(0xa8, gbc.a());
        EXPECT(0x21, gbc.b());
        EXPECT(0xa2, gbc.c());
        EXPECT(0x68, gbc.d());
        EXPECT(0x39, gbc.e());
        EXPECT(0x74, gbc.h());
        EXPECT(0xae, gbc.l());
        EXPECT(0xc37c, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x2d, gbc.readMem(0xc37c));
        EXPECT(0xcc, gbc.readMem(0xc37d));
        EXPECT(0xdf, gbc.readMem(0xcc2c));
        // DF 033A
        gbc.setState(0xea6a, 0xaced, 0x5ad0, 0x902a, 0x7b86, 0xf9cf, 0x0, 0x0);
        gbc.writeMem(0xaceb, { 0x0, 0x0 });
        gbc.writeMem(0xea6a, { 0xdf });
        gbc.step();
        EXPECT(0x5a, gbc.a());
        EXPECT(0x90, gbc.b());
        EXPECT(0x2a, gbc.c());
        EXPECT(0x7b, gbc.d());
        EXPECT(0x86, gbc.e());
        EXPECT(0xf9, gbc.h());
        EXPECT(0xcf, gbc.l());
        EXPECT(0xaceb, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x6b, gbc.readMem(0xaceb));
        EXPECT(0xea, gbc.readMem(0xacec));
        EXPECT(0xdf, gbc.readMem(0xea6a));
        // DF 033B
        gbc.setState(0x7394, 0xe953, 0xc7e0, 0xcee, 0xf851, 0x57f6, 0x0, 0x0);
        gbc.writeMem(0x7394, { 0xdf });
        gbc.writeMem(0xe951, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xc7, gbc.a());
        EXPECT(0xc, gbc.b());
        EXPECT(0xee, gbc.c());
        EXPECT(0xf8, gbc.d());
        EXPECT(0x51, gbc.e());
        EXPECT(0x57, gbc.h());
        EXPECT(0xf6, gbc.l());
        EXPECT(0xe951, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x95, gbc.readMem(0xe951));
        EXPECT(0x73, gbc.readMem(0xe952));
        // DF 033C
        gbc.setState(0x914f, 0xdceb, 0xae60, 0x2ced, 0x1add, 0x263b, 0x1, 0x1);
        gbc.writeMem(0x914f, { 0xdf });
        gbc.writeMem(0xdce9, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xae, gbc.a());
        EXPECT(0x2c, gbc.b());
        EXPECT(0xed, gbc.c());
        EXPECT(0x1a, gbc.d());
        EXPECT(0xdd, gbc.e());
        EXPECT(0x26, gbc.h());
        EXPECT(0x3b, gbc.l());
        EXPECT(0xdce9, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0x914f));
        EXPECT(0x50, gbc.readMem(0xdce9));
        EXPECT(0x91, gbc.readMem(0xdcea));
        // DF 033D
        gbc.setState(0xc36b, 0xf95c, 0xdcc0, 0x50db, 0x8cb6, 0x127c, 0x1, 0x1);
        gbc.writeMem(0xc36b, { 0xdf });
        gbc.writeMem(0xf95a, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xdc, gbc.a());
        EXPECT(0x50, gbc.b());
        EXPECT(0xdb, gbc.c());
        EXPECT(0x8c, gbc.d());
        EXPECT(0xb6, gbc.e());
        EXPECT(0x12, gbc.h());
        EXPECT(0x7c, gbc.l());
        EXPECT(0xf95a, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0xc36b));
        EXPECT(0x6c, gbc.readMem(0xf95a));
        EXPECT(0xc3, gbc.readMem(0xf95b));
        // DF 033E
        gbc.setState(0xe4a7, 0xd87c, 0x54a0, 0x236f, 0xb3ee, 0x331e, 0x1, 0x0);
        gbc.writeMem(0xd87a, { 0x0, 0x0 });
        gbc.writeMem(0xe4a7, { 0xdf });
        gbc.step();
        EXPECT(0x54, gbc.a());
        EXPECT(0x23, gbc.b());
        EXPECT(0x6f, gbc.c());
        EXPECT(0xb3, gbc.d());
        EXPECT(0xee, gbc.e());
        EXPECT(0x33, gbc.h());
        EXPECT(0x1e, gbc.l());
        EXPECT(0xd87a, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xa8, gbc.readMem(0xd87a));
        EXPECT(0xe4, gbc.readMem(0xd87b));
        EXPECT(0xdf, gbc.readMem(0xe4a7));
        // DF 0341
        gbc.setState(0x2753, 0xbe88, 0x2590, 0x3f25, 0x3304, 0x541b, 0x1, 0x1);
        gbc.writeMem(0x2753, { 0xdf });
        gbc.writeMem(0xbe86, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x25, gbc.a());
        EXPECT(0x3f, gbc.b());
        EXPECT(0x25, gbc.c());
        EXPECT(0x33, gbc.d());
        EXPECT(0x4, gbc.e());
        EXPECT(0x54, gbc.h());
        EXPECT(0x1b, gbc.l());
        EXPECT(0xbe86, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x54, gbc.readMem(0xbe86));
        EXPECT(0x27, gbc.readMem(0xbe87));
        // DF 0344
        gbc.setState(0x547a, 0xcc1a, 0xd160, 0xb32a, 0xa867, 0xa5c2, 0x1, 0x1);
        gbc.writeMem(0x547a, { 0xdf });
        gbc.writeMem(0xcc18, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xd1, gbc.a());
        EXPECT(0xb3, gbc.b());
        EXPECT(0x2a, gbc.c());
        EXPECT(0xa8, gbc.d());
        EXPECT(0x67, gbc.e());
        EXPECT(0xa5, gbc.h());
        EXPECT(0xc2, gbc.l());
        EXPECT(0xcc18, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x7b, gbc.readMem(0xcc18));
        EXPECT(0x54, gbc.readMem(0xcc19));
        // DF 0347
        gbc.setState(0x3ff9, 0x9104, 0x3740, 0xd4de, 0x692b, 0x6515, 0x0, 0x0);
        gbc.writeMem(0x3ff9, { 0xdf });
        gbc.writeMem(0x9102, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x37, gbc.a());
        EXPECT(0xd4, gbc.b());
        EXPECT(0xde, gbc.c());
        EXPECT(0x69, gbc.d());
        EXPECT(0x2b, gbc.e());
        EXPECT(0x65, gbc.h());
        EXPECT(0x15, gbc.l());
        EXPECT(0x9102, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xfa, gbc.readMem(0x9102));
        EXPECT(0x3f, gbc.readMem(0x9103));
        // DF 0349
        gbc.setState(0xd860, 0xdb69, 0x34b0, 0xa477, 0xc3c7, 0x7560, 0x1, 0x0);
        gbc.writeMem(0xd860, { 0xdf });
        gbc.writeMem(0xdb67, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x34, gbc.a());
        EXPECT(0xa4, gbc.b());
        EXPECT(0x77, gbc.c());
        EXPECT(0xc3, gbc.d());
        EXPECT(0xc7, gbc.e());
        EXPECT(0x75, gbc.h());
        EXPECT(0x60, gbc.l());
        EXPECT(0xdb67, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0xd860));
        EXPECT(0x61, gbc.readMem(0xdb67));
        EXPECT(0xd8, gbc.readMem(0xdb68));
        // DF 034A
        gbc.setState(0xd899, 0xf2b4, 0x5960, 0xc7c2, 0x4a4e, 0x979, 0x1, 0x1);
        gbc.writeMem(0xd899, { 0xdf });
        gbc.writeMem(0xf2b2, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x59, gbc.a());
        EXPECT(0xc7, gbc.b());
        EXPECT(0xc2, gbc.c());
        EXPECT(0x4a, gbc.d());
        EXPECT(0x4e, gbc.e());
        EXPECT(0x9, gbc.h());
        EXPECT(0x79, gbc.l());
        EXPECT(0xf2b2, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0xd899));
        EXPECT(0x9a, gbc.readMem(0xf2b2));
        EXPECT(0xd8, gbc.readMem(0xf2b3));
        // DF 034C
        gbc.setState(0xac51, 0x8106, 0xde80, 0xdc04, 0xcd5f, 0xa18f, 0x0, 0x1);
        gbc.writeMem(0x8104, { 0x0, 0x0 });
        gbc.writeMem(0xac51, { 0xdf });
        gbc.step();
        EXPECT(0xde, gbc.a());
        EXPECT(0xdc, gbc.b());
        EXPECT(0x4, gbc.c());
        EXPECT(0xcd, gbc.d());
        EXPECT(0x5f, gbc.e());
        EXPECT(0xa1, gbc.h());
        EXPECT(0x8f, gbc.l());
        EXPECT(0x8104, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x52, gbc.readMem(0x8104));
        EXPECT(0xac, gbc.readMem(0x8105));
        EXPECT(0xdf, gbc.readMem(0xac51));
        // DF 034D
        gbc.setState(0x14e9, 0xe134, 0x27a0, 0x32b1, 0x8cde, 0xe27a, 0x0, 0x0);
        gbc.writeMem(0x14e9, { 0xdf });
        gbc.writeMem(0xe132, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x27, gbc.a());
        EXPECT(0x32, gbc.b());
        EXPECT(0xb1, gbc.c());
        EXPECT(0x8c, gbc.d());
        EXPECT(0xde, gbc.e());
        EXPECT(0xe2, gbc.h());
        EXPECT(0x7a, gbc.l());
        EXPECT(0xe132, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0xe132));
        EXPECT(0x14, gbc.readMem(0xe133));
        // DF 034E
        gbc.setState(0x438a, 0xad33, 0x9280, 0x4291, 0x4b65, 0xe7e7, 0x1, 0x1);
        gbc.writeMem(0x438a, { 0xdf });
        gbc.writeMem(0xad31, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x92, gbc.a());
        EXPECT(0x42, gbc.b());
        EXPECT(0x91, gbc.c());
        EXPECT(0x4b, gbc.d());
        EXPECT(0x65, gbc.e());
        EXPECT(0xe7, gbc.h());
        EXPECT(0xe7, gbc.l());
        EXPECT(0xad31, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x8b, gbc.readMem(0xad31));
        EXPECT(0x43, gbc.readMem(0xad32));
        // DF 0351
        gbc.setState(0x2804, 0x9fc0, 0xf860, 0x2845, 0x8873, 0xe22d, 0x0, 0x1);
        gbc.writeMem(0x2804, { 0xdf });
        gbc.writeMem(0x9fbe, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xf8, gbc.a());
        EXPECT(0x28, gbc.b());
        EXPECT(0x45, gbc.c());
        EXPECT(0x88, gbc.d());
        EXPECT(0x73, gbc.e());
        EXPECT(0xe2, gbc.h());
        EXPECT(0x2d, gbc.l());
        EXPECT(0x9fbe, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x5, gbc.readMem(0x9fbe));
        EXPECT(0x28, gbc.readMem(0x9fbf));
        // DF 0353
        gbc.setState(0x902e, 0xbdbe, 0xb410, 0xf802, 0xab7b, 0xe86b, 0x0, 0x0);
        gbc.writeMem(0x902e, { 0xdf });
        gbc.writeMem(0xbdbc, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xb4, gbc.a());
        EXPECT(0xf8, gbc.b());
        EXPECT(0x2, gbc.c());
        EXPECT(0xab, gbc.d());
        EXPECT(0x7b, gbc.e());
        EXPECT(0xe8, gbc.h());
        EXPECT(0x6b, gbc.l());
        EXPECT(0xbdbc, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0x902e));
        EXPECT(0x2f, gbc.readMem(0xbdbc));
        EXPECT(0x90, gbc.readMem(0xbdbd));
        // DF 0356
        gbc.setState(0xd51c, 0xb783, 0x79d0, 0x9e84, 0xddcc, 0x71f6, 0x1, 0x1);
        gbc.writeMem(0xb781, { 0x0, 0x0 });
        gbc.writeMem(0xd51c, { 0xdf });
        gbc.step();
        EXPECT(0x79, gbc.a());
        EXPECT(0x9e, gbc.b());
        EXPECT(0x84, gbc.c());
        EXPECT(0xdd, gbc.d());
        EXPECT(0xcc, gbc.e());
        EXPECT(0x71, gbc.h());
        EXPECT(0xf6, gbc.l());
        EXPECT(0xb781, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x1d, gbc.readMem(0xb781));
        EXPECT(0xd5, gbc.readMem(0xb782));
        EXPECT(0xdf, gbc.readMem(0xd51c));
        // DF 0357
        gbc.setState(0xc2b2, 0xc457, 0xf10, 0xf2c0, 0x6be7, 0x476b, 0x1, 0x0);
        gbc.writeMem(0xc2b2, { 0xdf });
        gbc.writeMem(0xc455, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xf, gbc.a());
        EXPECT(0xf2, gbc.b());
        EXPECT(0xc0, gbc.c());
        EXPECT(0x6b, gbc.d());
        EXPECT(0xe7, gbc.e());
        EXPECT(0x47, gbc.h());
        EXPECT(0x6b, gbc.l());
        EXPECT(0xc455, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0xc2b2));
        EXPECT(0xb3, gbc.readMem(0xc455));
        EXPECT(0xc2, gbc.readMem(0xc456));
        // DF 035B
        gbc.setState(0xac44, 0xf63f, 0xfd50, 0xd7b2, 0xf71a, 0x1635, 0x0, 0x1);
        gbc.writeMem(0xac44, { 0xdf });
        gbc.writeMem(0xf63d, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xfd, gbc.a());
        EXPECT(0xd7, gbc.b());
        EXPECT(0xb2, gbc.c());
        EXPECT(0xf7, gbc.d());
        EXPECT(0x1a, gbc.e());
        EXPECT(0x16, gbc.h());
        EXPECT(0x35, gbc.l());
        EXPECT(0xf63d, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0xac44));
        EXPECT(0x45, gbc.readMem(0xf63d));
        EXPECT(0xac, gbc.readMem(0xf63e));
        // DF 035F
        gbc.setState(0x83b4, 0xeef9, 0x26f0, 0x1f4, 0x64fa, 0xec07, 0x1, 0x1);
        gbc.writeMem(0x83b4, { 0xdf });
        gbc.writeMem(0xeef7, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x26, gbc.a());
        EXPECT(0x1, gbc.b());
        EXPECT(0xf4, gbc.c());
        EXPECT(0x64, gbc.d());
        EXPECT(0xfa, gbc.e());
        EXPECT(0xec, gbc.h());
        EXPECT(0x7, gbc.l());
        EXPECT(0xeef7, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0x83b4));
        EXPECT(0xb5, gbc.readMem(0xeef7));
        EXPECT(0x83, gbc.readMem(0xeef8));
        // DF 0362
        gbc.setState(0x95ba, 0xc06b, 0x7c20, 0x1768, 0x3c89, 0xb37, 0x0, 0x1);
        gbc.writeMem(0x95ba, { 0xdf });
        gbc.writeMem(0xc069, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x7c, gbc.a());
        EXPECT(0x17, gbc.b());
        EXPECT(0x68, gbc.c());
        EXPECT(0x3c, gbc.d());
        EXPECT(0x89, gbc.e());
        EXPECT(0xb, gbc.h());
        EXPECT(0x37, gbc.l());
        EXPECT(0xc069, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0x95ba));
        EXPECT(0xbb, gbc.readMem(0xc069));
        EXPECT(0x95, gbc.readMem(0xc06a));
        // DF 0368
        gbc.setState(0xa2ef, 0xc3ed, 0xdc0, 0xbe64, 0x45b1, 0x7f62, 0x0, 0x1);
        gbc.writeMem(0xa2ef, { 0xdf });
        gbc.writeMem(0xc3eb, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xd, gbc.a());
        EXPECT(0xbe, gbc.b());
        EXPECT(0x64, gbc.c());
        EXPECT(0x45, gbc.d());
        EXPECT(0xb1, gbc.e());
        EXPECT(0x7f, gbc.h());
        EXPECT(0x62, gbc.l());
        EXPECT(0xc3eb, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0xa2ef));
        EXPECT(0xf0, gbc.readMem(0xc3eb));
        EXPECT(0xa2, gbc.readMem(0xc3ec));
        // DF 0369
        gbc.setState(0xa0cd, 0x87ae, 0xf980, 0xf5a0, 0xb067, 0x294a, 0x1, 0x1);
        gbc.writeMem(0x87ac, { 0x0, 0x0 });
        gbc.writeMem(0xa0cd, { 0xdf });
        gbc.step();
        EXPECT(0xf9, gbc.a());
        EXPECT(0xf5, gbc.b());
        EXPECT(0xa0, gbc.c());
        EXPECT(0xb0, gbc.d());
        EXPECT(0x67, gbc.e());
        EXPECT(0x29, gbc.h());
        EXPECT(0x4a, gbc.l());
        EXPECT(0x87ac, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xce, gbc.readMem(0x87ac));
        EXPECT(0xa0, gbc.readMem(0x87ad));
        EXPECT(0xdf, gbc.readMem(0xa0cd));
        // DF 036B
        gbc.setState(0xb8ca, 0xacb2, 0xef60, 0x718a, 0xe156, 0x1e24, 0x0, 0x1);
        gbc.writeMem(0xacb0, { 0x0, 0x0 });
        gbc.writeMem(0xb8ca, { 0xdf });
        gbc.step();
        EXPECT(0xef, gbc.a());
        EXPECT(0x71, gbc.b());
        EXPECT(0x8a, gbc.c());
        EXPECT(0xe1, gbc.d());
        EXPECT(0x56, gbc.e());
        EXPECT(0x1e, gbc.h());
        EXPECT(0x24, gbc.l());
        EXPECT(0xacb0, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xacb0));
        EXPECT(0xb8, gbc.readMem(0xacb1));
        EXPECT(0xdf, gbc.readMem(0xb8ca));
        // DF 036C
        gbc.setState(0xdfc5, 0xcd01, 0xc970, 0x6e3, 0xe62c, 0x2659, 0x1, 0x0);
        gbc.writeMem(0xccff, { 0x0, 0x0 });
        gbc.writeMem(0xdfc5, { 0xdf });
        gbc.step();
        EXPECT(0xc9, gbc.a());
        EXPECT(0x6, gbc.b());
        EXPECT(0xe3, gbc.c());
        EXPECT(0xe6, gbc.d());
        EXPECT(0x2c, gbc.e());
        EXPECT(0x26, gbc.h());
        EXPECT(0x59, gbc.l());
        EXPECT(0xccff, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xc6, gbc.readMem(0xccff));
        EXPECT(0xdf, gbc.readMem(0xcd00));
        EXPECT(0xdf, gbc.readMem(0xdfc5));
        // DF 036D
        gbc.setState(0x14bd, 0x8d7c, 0x4940, 0xb1ef, 0x40a, 0xdc75, 0x0, 0x0);
        gbc.writeMem(0x14bd, { 0xdf });
        gbc.writeMem(0x8d7a, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x49, gbc.a());
        EXPECT(0xb1, gbc.b());
        EXPECT(0xef, gbc.c());
        EXPECT(0x4, gbc.d());
        EXPECT(0xa, gbc.e());
        EXPECT(0xdc, gbc.h());
        EXPECT(0x75, gbc.l());
        EXPECT(0x8d7a, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xbe, gbc.readMem(0x8d7a));
        EXPECT(0x14, gbc.readMem(0x8d7b));
        // DF 036E
        gbc.setState(0x63e3, 0xe56b, 0x15f0, 0xc99a, 0x33e8, 0x8ef3, 0x0, 0x0);
        gbc.writeMem(0x63e3, { 0xdf });
        gbc.writeMem(0xe569, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x15, gbc.a());
        EXPECT(0xc9, gbc.b());
        EXPECT(0x9a, gbc.c());
        EXPECT(0x33, gbc.d());
        EXPECT(0xe8, gbc.e());
        EXPECT(0x8e, gbc.h());
        EXPECT(0xf3, gbc.l());
        EXPECT(0xe569, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xe4, gbc.readMem(0xe569));
        EXPECT(0x63, gbc.readMem(0xe56a));
        // DF 0374
        gbc.setState(0x9610, 0xa9d0, 0x800, 0xc68c, 0xa615, 0x75a3, 0x0, 0x0);
        gbc.writeMem(0x9610, { 0xdf });
        gbc.writeMem(0xa9ce, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x8, gbc.a());
        EXPECT(0xc6, gbc.b());
        EXPECT(0x8c, gbc.c());
        EXPECT(0xa6, gbc.d());
        EXPECT(0x15, gbc.e());
        EXPECT(0x75, gbc.h());
        EXPECT(0xa3, gbc.l());
        EXPECT(0xa9ce, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0x9610));
        EXPECT(0x11, gbc.readMem(0xa9ce));
        EXPECT(0x96, gbc.readMem(0xa9cf));
        // DF 0379
        gbc.setState(0x4086, 0x8254, 0xf410, 0xc8d, 0x4a4f, 0x7c20, 0x1, 0x1);
        gbc.writeMem(0x4086, { 0xdf });
        gbc.writeMem(0x8252, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xf4, gbc.a());
        EXPECT(0xc, gbc.b());
        EXPECT(0x8d, gbc.c());
        EXPECT(0x4a, gbc.d());
        EXPECT(0x4f, gbc.e());
        EXPECT(0x7c, gbc.h());
        EXPECT(0x20, gbc.l());
        EXPECT(0x8252, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x87, gbc.readMem(0x8252));
        EXPECT(0x40, gbc.readMem(0x8253));
        // DF 037C
        gbc.setState(0xe5ba, 0xc23a, 0xa530, 0x399b, 0xb907, 0x2c5, 0x1, 0x1);
        gbc.writeMem(0xc238, { 0x0, 0x0 });
        gbc.writeMem(0xe5ba, { 0xdf });
        gbc.step();
        EXPECT(0xa5, gbc.a());
        EXPECT(0x39, gbc.b());
        EXPECT(0x9b, gbc.c());
        EXPECT(0xb9, gbc.d());
        EXPECT(0x7, gbc.e());
        EXPECT(0x2, gbc.h());
        EXPECT(0xc5, gbc.l());
        EXPECT(0xc238, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xbb, gbc.readMem(0xc238));
        EXPECT(0xe5, gbc.readMem(0xc239));
        EXPECT(0xdf, gbc.readMem(0xe5ba));
        // DF 037E
        gbc.setState(0x8e6b, 0xc524, 0x8230, 0x324e, 0xfe7a, 0xc77d, 0x1, 0x0);
        gbc.writeMem(0x8e6b, { 0xdf });
        gbc.writeMem(0xc522, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x82, gbc.a());
        EXPECT(0x32, gbc.b());
        EXPECT(0x4e, gbc.c());
        EXPECT(0xfe, gbc.d());
        EXPECT(0x7a, gbc.e());
        EXPECT(0xc7, gbc.h());
        EXPECT(0x7d, gbc.l());
        EXPECT(0xc522, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0x8e6b));
        EXPECT(0x6c, gbc.readMem(0xc522));
        EXPECT(0x8e, gbc.readMem(0xc523));
        // DF 037F
        gbc.setState(0x4caa, 0xdd19, 0x87f0, 0xde15, 0x5948, 0x307f, 0x1, 0x1);
        gbc.writeMem(0x4caa, { 0xdf });
        gbc.writeMem(0xdd17, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x87, gbc.a());
        EXPECT(0xde, gbc.b());
        EXPECT(0x15, gbc.c());
        EXPECT(0x59, gbc.d());
        EXPECT(0x48, gbc.e());
        EXPECT(0x30, gbc.h());
        EXPECT(0x7f, gbc.l());
        EXPECT(0xdd17, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xab, gbc.readMem(0xdd17));
        EXPECT(0x4c, gbc.readMem(0xdd18));
        // DF 0380
        gbc.setState(0x52b8, 0xef95, 0x8fd0, 0x3b06, 0x674d, 0xe9c9, 0x0, 0x0);
        gbc.writeMem(0x52b8, { 0xdf });
        gbc.writeMem(0xef93, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x8f, gbc.a());
        EXPECT(0x3b, gbc.b());
        EXPECT(0x6, gbc.c());
        EXPECT(0x67, gbc.d());
        EXPECT(0x4d, gbc.e());
        EXPECT(0xe9, gbc.h());
        EXPECT(0xc9, gbc.l());
        EXPECT(0xef93, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xb9, gbc.readMem(0xef93));
        EXPECT(0x52, gbc.readMem(0xef94));
        // DF 0384
        gbc.setState(0xba1f, 0x9bf0, 0x3e0, 0x4ca0, 0x8437, 0x71b, 0x1, 0x0);
        gbc.writeMem(0x9bee, { 0x0, 0x0 });
        gbc.writeMem(0xba1f, { 0xdf });
        gbc.step();
        EXPECT(0x3, gbc.a());
        EXPECT(0x4c, gbc.b());
        EXPECT(0xa0, gbc.c());
        EXPECT(0x84, gbc.d());
        EXPECT(0x37, gbc.e());
        EXPECT(0x7, gbc.h());
        EXPECT(0x1b, gbc.l());
        EXPECT(0x9bee, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x20, gbc.readMem(0x9bee));
        EXPECT(0xba, gbc.readMem(0x9bef));
        EXPECT(0xdf, gbc.readMem(0xba1f));
        // DF 038A
        gbc.setState(0x12cf, 0xc0bb, 0x8bb0, 0xca67, 0x9244, 0xc83d, 0x1, 0x0);
        gbc.writeMem(0x12cf, { 0xdf });
        gbc.writeMem(0xc0b9, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x8b, gbc.a());
        EXPECT(0xca, gbc.b());
        EXPECT(0x67, gbc.c());
        EXPECT(0x92, gbc.d());
        EXPECT(0x44, gbc.e());
        EXPECT(0xc8, gbc.h());
        EXPECT(0x3d, gbc.l());
        EXPECT(0xc0b9, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xd0, gbc.readMem(0xc0b9));
        EXPECT(0x12, gbc.readMem(0xc0ba));
        // DF 038C
        gbc.setState(0xbf6a, 0xfc22, 0x9fa0, 0x8e9e, 0x3430, 0xd934, 0x1, 0x0);
        gbc.writeMem(0xbf6a, { 0xdf });
        gbc.writeMem(0xfc20, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x9f, gbc.a());
        EXPECT(0x8e, gbc.b());
        EXPECT(0x9e, gbc.c());
        EXPECT(0x34, gbc.d());
        EXPECT(0x30, gbc.e());
        EXPECT(0xd9, gbc.h());
        EXPECT(0x34, gbc.l());
        EXPECT(0xfc20, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0xbf6a));
        EXPECT(0x6b, gbc.readMem(0xfc20));
        EXPECT(0xbf, gbc.readMem(0xfc21));
        // DF 038F
        gbc.setState(0xe3ec, 0xe6ee, 0xb930, 0xe52b, 0x91e, 0xef35, 0x1, 0x1);
        gbc.writeMem(0xe3ec, { 0xdf });
        gbc.writeMem(0xe6ec, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xb9, gbc.a());
        EXPECT(0xe5, gbc.b());
        EXPECT(0x2b, gbc.c());
        EXPECT(0x9, gbc.d());
        EXPECT(0x1e, gbc.e());
        EXPECT(0xef, gbc.h());
        EXPECT(0x35, gbc.l());
        EXPECT(0xe6ec, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0xe3ec));
        EXPECT(0xed, gbc.readMem(0xe6ec));
        EXPECT(0xe3, gbc.readMem(0xe6ed));
        // DF 0391
        gbc.setState(0x51d3, 0xaf86, 0x4ed0, 0xe81b, 0xb879, 0x2bb6, 0x1, 0x0);
        gbc.writeMem(0x51d3, { 0xdf });
        gbc.writeMem(0xaf84, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x4e, gbc.a());
        EXPECT(0xe8, gbc.b());
        EXPECT(0x1b, gbc.c());
        EXPECT(0xb8, gbc.d());
        EXPECT(0x79, gbc.e());
        EXPECT(0x2b, gbc.h());
        EXPECT(0xb6, gbc.l());
        EXPECT(0xaf84, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xd4, gbc.readMem(0xaf84));
        EXPECT(0x51, gbc.readMem(0xaf85));
        // DF 0393
        gbc.setState(0x5419, 0x8204, 0x2b50, 0xa1eb, 0xf136, 0xc1fe, 0x0, 0x1);
        gbc.writeMem(0x5419, { 0xdf });
        gbc.writeMem(0x8202, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x2b, gbc.a());
        EXPECT(0xa1, gbc.b());
        EXPECT(0xeb, gbc.c());
        EXPECT(0xf1, gbc.d());
        EXPECT(0x36, gbc.e());
        EXPECT(0xc1, gbc.h());
        EXPECT(0xfe, gbc.l());
        EXPECT(0x8202, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x1a, gbc.readMem(0x8202));
        EXPECT(0x54, gbc.readMem(0x8203));
        // DF 0395
        gbc.setState(0x59b, 0xfa3e, 0xfe20, 0x5a81, 0xf1dc, 0xc69b, 0x1, 0x0);
        gbc.writeMem(0x59b, { 0xdf });
        gbc.writeMem(0xfa3c, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xfe, gbc.a());
        EXPECT(0x5a, gbc.b());
        EXPECT(0x81, gbc.c());
        EXPECT(0xf1, gbc.d());
        EXPECT(0xdc, gbc.e());
        EXPECT(0xc6, gbc.h());
        EXPECT(0x9b, gbc.l());
        EXPECT(0xfa3c, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x9c, gbc.readMem(0xfa3c));
        EXPECT(0x5, gbc.readMem(0xfa3d));
        // DF 0397
        gbc.setState(0xe96c, 0x8eba, 0x16f0, 0x39ec, 0xd368, 0x792f, 0x0, 0x1);
        gbc.writeMem(0x8eb8, { 0x0, 0x0 });
        gbc.writeMem(0xe96c, { 0xdf });
        gbc.step();
        EXPECT(0x16, gbc.a());
        EXPECT(0x39, gbc.b());
        EXPECT(0xec, gbc.c());
        EXPECT(0xd3, gbc.d());
        EXPECT(0x68, gbc.e());
        EXPECT(0x79, gbc.h());
        EXPECT(0x2f, gbc.l());
        EXPECT(0x8eb8, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x6d, gbc.readMem(0x8eb8));
        EXPECT(0xe9, gbc.readMem(0x8eb9));
        EXPECT(0xdf, gbc.readMem(0xe96c));
        // DF 0398
        gbc.setState(0x9398, 0xd30c, 0xfc30, 0x3dd9, 0x81fc, 0x865f, 0x0, 0x0);
        gbc.writeMem(0x9398, { 0xdf });
        gbc.writeMem(0xd30a, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xfc, gbc.a());
        EXPECT(0x3d, gbc.b());
        EXPECT(0xd9, gbc.c());
        EXPECT(0x81, gbc.d());
        EXPECT(0xfc, gbc.e());
        EXPECT(0x86, gbc.h());
        EXPECT(0x5f, gbc.l());
        EXPECT(0xd30a, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0x9398));
        EXPECT(0x99, gbc.readMem(0xd30a));
        EXPECT(0x93, gbc.readMem(0xd30b));
        // DF 0399
        gbc.setState(0xced9, 0xef0f, 0x7b50, 0x5d74, 0x14e1, 0xc2ce, 0x1, 0x1);
        gbc.writeMem(0xced9, { 0xdf });
        gbc.writeMem(0xef0d, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x7b, gbc.a());
        EXPECT(0x5d, gbc.b());
        EXPECT(0x74, gbc.c());
        EXPECT(0x14, gbc.d());
        EXPECT(0xe1, gbc.e());
        EXPECT(0xc2, gbc.h());
        EXPECT(0xce, gbc.l());
        EXPECT(0xef0d, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0xced9));
        EXPECT(0xda, gbc.readMem(0xef0d));
        EXPECT(0xce, gbc.readMem(0xef0e));
        // DF 039B
        gbc.setState(0xd2a8, 0xd1de, 0x4e80, 0xf2c5, 0x6e4a, 0xfa6f, 0x1, 0x0);
        gbc.writeMem(0xd1dc, { 0x0, 0x0 });
        gbc.writeMem(0xd2a8, { 0xdf });
        gbc.step();
        EXPECT(0x4e, gbc.a());
        EXPECT(0xf2, gbc.b());
        EXPECT(0xc5, gbc.c());
        EXPECT(0x6e, gbc.d());
        EXPECT(0x4a, gbc.e());
        EXPECT(0xfa, gbc.h());
        EXPECT(0x6f, gbc.l());
        EXPECT(0xd1dc, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xa9, gbc.readMem(0xd1dc));
        EXPECT(0xd2, gbc.readMem(0xd1dd));
        EXPECT(0xdf, gbc.readMem(0xd2a8));
        // DF 039C
        gbc.setState(0xcc5c, 0xb16a, 0x6570, 0x219d, 0xf499, 0x5ebc, 0x1, 0x0);
        gbc.writeMem(0xb168, { 0x0, 0x0 });
        gbc.writeMem(0xcc5c, { 0xdf });
        gbc.step();
        EXPECT(0x65, gbc.a());
        EXPECT(0x21, gbc.b());
        EXPECT(0x9d, gbc.c());
        EXPECT(0xf4, gbc.d());
        EXPECT(0x99, gbc.e());
        EXPECT(0x5e, gbc.h());
        EXPECT(0xbc, gbc.l());
        EXPECT(0xb168, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x5d, gbc.readMem(0xb168));
        EXPECT(0xcc, gbc.readMem(0xb169));
        EXPECT(0xdf, gbc.readMem(0xcc5c));
        // DF 039D
        gbc.setState(0xcbbd, 0xa7b7, 0xc650, 0xe1d4, 0x1eb, 0xdc7, 0x0, 0x1);
        gbc.writeMem(0xa7b5, { 0x0, 0x0 });
        gbc.writeMem(0xcbbd, { 0xdf });
        gbc.step();
        EXPECT(0xc6, gbc.a());
        EXPECT(0xe1, gbc.b());
        EXPECT(0xd4, gbc.c());
        EXPECT(0x1, gbc.d());
        EXPECT(0xeb, gbc.e());
        EXPECT(0xd, gbc.h());
        EXPECT(0xc7, gbc.l());
        EXPECT(0xa7b5, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xbe, gbc.readMem(0xa7b5));
        EXPECT(0xcb, gbc.readMem(0xa7b6));
        EXPECT(0xdf, gbc.readMem(0xcbbd));
        // DF 03A2
        gbc.setState(0x4d7, 0xdb61, 0x5570, 0xcad0, 0x194d, 0x8178, 0x1, 0x1);
        gbc.writeMem(0x4d7, { 0xdf });
        gbc.writeMem(0xdb5f, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x55, gbc.a());
        EXPECT(0xca, gbc.b());
        EXPECT(0xd0, gbc.c());
        EXPECT(0x19, gbc.d());
        EXPECT(0x4d, gbc.e());
        EXPECT(0x81, gbc.h());
        EXPECT(0x78, gbc.l());
        EXPECT(0xdb5f, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xd8, gbc.readMem(0xdb5f));
        EXPECT(0x4, gbc.readMem(0xdb60));
        // DF 03A7
        gbc.setState(0xad94, 0xa9f8, 0xcbe0, 0xc27d, 0xeb58, 0x8f5c, 0x1, 0x1);
        gbc.writeMem(0xa9f6, { 0x0, 0x0 });
        gbc.writeMem(0xad94, { 0xdf });
        gbc.step();
        EXPECT(0xcb, gbc.a());
        EXPECT(0xc2, gbc.b());
        EXPECT(0x7d, gbc.c());
        EXPECT(0xeb, gbc.d());
        EXPECT(0x58, gbc.e());
        EXPECT(0x8f, gbc.h());
        EXPECT(0x5c, gbc.l());
        EXPECT(0xa9f6, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x95, gbc.readMem(0xa9f6));
        EXPECT(0xad, gbc.readMem(0xa9f7));
        EXPECT(0xdf, gbc.readMem(0xad94));
        // DF 03AA
        gbc.setState(0x15ae, 0x8522, 0xd460, 0xc304, 0xb534, 0x33db, 0x0, 0x1);
        gbc.writeMem(0x15ae, { 0xdf });
        gbc.writeMem(0x8520, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xd4, gbc.a());
        EXPECT(0xc3, gbc.b());
        EXPECT(0x4, gbc.c());
        EXPECT(0xb5, gbc.d());
        EXPECT(0x34, gbc.e());
        EXPECT(0x33, gbc.h());
        EXPECT(0xdb, gbc.l());
        EXPECT(0x8520, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x8520));
        EXPECT(0x15, gbc.readMem(0x8521));
        // DF 03AD
        gbc.setState(0x26eb, 0xb69b, 0xc420, 0x98e5, 0x1adb, 0xc911, 0x0, 0x0);
        gbc.writeMem(0x26eb, { 0xdf });
        gbc.writeMem(0xb699, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xc4, gbc.a());
        EXPECT(0x98, gbc.b());
        EXPECT(0xe5, gbc.c());
        EXPECT(0x1a, gbc.d());
        EXPECT(0xdb, gbc.e());
        EXPECT(0xc9, gbc.h());
        EXPECT(0x11, gbc.l());
        EXPECT(0xb699, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xec, gbc.readMem(0xb699));
        EXPECT(0x26, gbc.readMem(0xb69a));
        // DF 03B0
        gbc.setState(0x1eb5, 0xa996, 0x65a0, 0xfd8e, 0xaf09, 0x1f5a, 0x0, 0x1);
        gbc.writeMem(0x1eb5, { 0xdf });
        gbc.writeMem(0xa994, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x65, gbc.a());
        EXPECT(0xfd, gbc.b());
        EXPECT(0x8e, gbc.c());
        EXPECT(0xaf, gbc.d());
        EXPECT(0x9, gbc.e());
        EXPECT(0x1f, gbc.h());
        EXPECT(0x5a, gbc.l());
        EXPECT(0xa994, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xb6, gbc.readMem(0xa994));
        EXPECT(0x1e, gbc.readMem(0xa995));
        // DF 03B1
        gbc.setState(0x2f2c, 0xc1fa, 0x4780, 0x3d4e, 0x2f7c, 0x1602, 0x0, 0x0);
        gbc.writeMem(0x2f2c, { 0xdf });
        gbc.writeMem(0xc1f8, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x47, gbc.a());
        EXPECT(0x3d, gbc.b());
        EXPECT(0x4e, gbc.c());
        EXPECT(0x2f, gbc.d());
        EXPECT(0x7c, gbc.e());
        EXPECT(0x16, gbc.h());
        EXPECT(0x2, gbc.l());
        EXPECT(0xc1f8, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x2d, gbc.readMem(0xc1f8));
        EXPECT(0x2f, gbc.readMem(0xc1f9));
        // DF 03B3
        gbc.setState(0x885e, 0xe64f, 0xadb0, 0x6723, 0xee07, 0x98dc, 0x1, 0x1);
        gbc.writeMem(0x885e, { 0xdf });
        gbc.writeMem(0xe64d, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xad, gbc.a());
        EXPECT(0x67, gbc.b());
        EXPECT(0x23, gbc.c());
        EXPECT(0xee, gbc.d());
        EXPECT(0x7, gbc.e());
        EXPECT(0x98, gbc.h());
        EXPECT(0xdc, gbc.l());
        EXPECT(0xe64d, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0x885e));
        EXPECT(0x5f, gbc.readMem(0xe64d));
        EXPECT(0x88, gbc.readMem(0xe64e));
        // DF 03B8
        gbc.setState(0x7ef8, 0xd73d, 0x2e80, 0xd27b, 0x8730, 0x9ce5, 0x0, 0x1);
        gbc.writeMem(0x7ef8, { 0xdf });
        gbc.writeMem(0xd73b, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x2e, gbc.a());
        EXPECT(0xd2, gbc.b());
        EXPECT(0x7b, gbc.c());
        EXPECT(0x87, gbc.d());
        EXPECT(0x30, gbc.e());
        EXPECT(0x9c, gbc.h());
        EXPECT(0xe5, gbc.l());
        EXPECT(0xd73b, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xf9, gbc.readMem(0xd73b));
        EXPECT(0x7e, gbc.readMem(0xd73c));
        // DF 03B9
        gbc.setState(0x2f68, 0x89e4, 0x4730, 0x1f26, 0xf22c, 0xa4b7, 0x0, 0x1);
        gbc.writeMem(0x2f68, { 0xdf });
        gbc.writeMem(0x89e2, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x47, gbc.a());
        EXPECT(0x1f, gbc.b());
        EXPECT(0x26, gbc.c());
        EXPECT(0xf2, gbc.d());
        EXPECT(0x2c, gbc.e());
        EXPECT(0xa4, gbc.h());
        EXPECT(0xb7, gbc.l());
        EXPECT(0x89e2, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x69, gbc.readMem(0x89e2));
        EXPECT(0x2f, gbc.readMem(0x89e3));
        // DF 03BC
        gbc.setState(0xdb30, 0xfbf9, 0xe990, 0xf9cf, 0x4e0b, 0x2a6a, 0x1, 0x0);
        gbc.writeMem(0xdb30, { 0xdf });
        gbc.writeMem(0xfbf7, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xe9, gbc.a());
        EXPECT(0xf9, gbc.b());
        EXPECT(0xcf, gbc.c());
        EXPECT(0x4e, gbc.d());
        EXPECT(0xb, gbc.e());
        EXPECT(0x2a, gbc.h());
        EXPECT(0x6a, gbc.l());
        EXPECT(0xfbf7, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0xdb30));
        EXPECT(0x31, gbc.readMem(0xfbf7));
        EXPECT(0xdb, gbc.readMem(0xfbf8));
        // DF 03BE
        gbc.setState(0x2764, 0xad13, 0x1280, 0x98e0, 0xd727, 0x691e, 0x1, 0x1);
        gbc.writeMem(0x2764, { 0xdf });
        gbc.writeMem(0xad11, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x12, gbc.a());
        EXPECT(0x98, gbc.b());
        EXPECT(0xe0, gbc.c());
        EXPECT(0xd7, gbc.d());
        EXPECT(0x27, gbc.e());
        EXPECT(0x69, gbc.h());
        EXPECT(0x1e, gbc.l());
        EXPECT(0xad11, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x65, gbc.readMem(0xad11));
        EXPECT(0x27, gbc.readMem(0xad12));
        // DF 03C0
        gbc.setState(0x4f67, 0xffd0, 0xdb50, 0xae0d, 0xae79, 0xbc9a, 0x0, 0x0);
        gbc.writeMem(0x4f67, { 0xdf });
        gbc.writeMem(0xffce, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xdb, gbc.a());
        EXPECT(0xae, gbc.b());
        EXPECT(0xd, gbc.c());
        EXPECT(0xae, gbc.d());
        EXPECT(0x79, gbc.e());
        EXPECT(0xbc, gbc.h());
        EXPECT(0x9a, gbc.l());
        EXPECT(0xffce, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x68, gbc.readMem(0xffce));
        EXPECT(0x4f, gbc.readMem(0xffcf));
        // DF 03C1
        gbc.setState(0x5aa2, 0xf3ae, 0xc680, 0xf19a, 0xa026, 0xbe3d, 0x1, 0x0);
        gbc.writeMem(0x5aa2, { 0xdf });
        gbc.writeMem(0xf3ac, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xc6, gbc.a());
        EXPECT(0xf1, gbc.b());
        EXPECT(0x9a, gbc.c());
        EXPECT(0xa0, gbc.d());
        EXPECT(0x26, gbc.e());
        EXPECT(0xbe, gbc.h());
        EXPECT(0x3d, gbc.l());
        EXPECT(0xf3ac, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xa3, gbc.readMem(0xf3ac));
        EXPECT(0x5a, gbc.readMem(0xf3ad));
        // DF 03C2
        gbc.setState(0xe910, 0xb250, 0x8080, 0x4423, 0xf962, 0xbe64, 0x0, 0x0);
        gbc.writeMem(0xb24e, { 0x0, 0x0 });
        gbc.writeMem(0xe910, { 0xdf });
        gbc.step();
        EXPECT(0x80, gbc.a());
        EXPECT(0x44, gbc.b());
        EXPECT(0x23, gbc.c());
        EXPECT(0xf9, gbc.d());
        EXPECT(0x62, gbc.e());
        EXPECT(0xbe, gbc.h());
        EXPECT(0x64, gbc.l());
        EXPECT(0xb24e, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x11, gbc.readMem(0xb24e));
        EXPECT(0xe9, gbc.readMem(0xb24f));
        EXPECT(0xdf, gbc.readMem(0xe910));
        // DF 03C3
        gbc.setState(0xc084, 0xf5c5, 0x96e0, 0x815b, 0x3f4, 0x8918, 0x1, 0x1);
        gbc.writeMem(0xc084, { 0xdf });
        gbc.writeMem(0xf5c3, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x96, gbc.a());
        EXPECT(0x81, gbc.b());
        EXPECT(0x5b, gbc.c());
        EXPECT(0x3, gbc.d());
        EXPECT(0xf4, gbc.e());
        EXPECT(0x89, gbc.h());
        EXPECT(0x18, gbc.l());
        EXPECT(0xf5c3, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0xc084));
        EXPECT(0x85, gbc.readMem(0xf5c3));
        EXPECT(0xc0, gbc.readMem(0xf5c4));
        // DF 03C4
        gbc.setState(0x1b5, 0xaf1b, 0xd620, 0x8b95, 0x8d45, 0xbc42, 0x1, 0x0);
        gbc.writeMem(0x1b5, { 0xdf });
        gbc.writeMem(0xaf19, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xd6, gbc.a());
        EXPECT(0x8b, gbc.b());
        EXPECT(0x95, gbc.c());
        EXPECT(0x8d, gbc.d());
        EXPECT(0x45, gbc.e());
        EXPECT(0xbc, gbc.h());
        EXPECT(0x42, gbc.l());
        EXPECT(0xaf19, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xb6, gbc.readMem(0xaf19));
        EXPECT(0x1, gbc.readMem(0xaf1a));
        // DF 03C7
        gbc.setState(0x48be, 0x81fd, 0x4960, 0x60a9, 0x32f4, 0x6883, 0x1, 0x0);
        gbc.writeMem(0x48be, { 0xdf });
        gbc.writeMem(0x81fb, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x49, gbc.a());
        EXPECT(0x60, gbc.b());
        EXPECT(0xa9, gbc.c());
        EXPECT(0x32, gbc.d());
        EXPECT(0xf4, gbc.e());
        EXPECT(0x68, gbc.h());
        EXPECT(0x83, gbc.l());
        EXPECT(0x81fb, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xbf, gbc.readMem(0x81fb));
        EXPECT(0x48, gbc.readMem(0x81fc));
        // DF 03C8
        gbc.setState(0x9252, 0xacaa, 0x6da0, 0xc87, 0x76, 0x8109, 0x0, 0x0);
        gbc.writeMem(0x9252, { 0xdf });
        gbc.writeMem(0xaca8, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x6d, gbc.a());
        EXPECT(0xc, gbc.b());
        EXPECT(0x87, gbc.c());
        EXPECT(0x0, gbc.d());
        EXPECT(0x76, gbc.e());
        EXPECT(0x81, gbc.h());
        EXPECT(0x9, gbc.l());
        EXPECT(0xaca8, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0x9252));
        EXPECT(0x53, gbc.readMem(0xaca8));
        EXPECT(0x92, gbc.readMem(0xaca9));
        // DF 03C9
        gbc.setState(0xac4a, 0xb438, 0x7f30, 0x1f1a, 0x54b4, 0x4090, 0x0, 0x1);
        gbc.writeMem(0xac4a, { 0xdf });
        gbc.writeMem(0xb436, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x7f, gbc.a());
        EXPECT(0x1f, gbc.b());
        EXPECT(0x1a, gbc.c());
        EXPECT(0x54, gbc.d());
        EXPECT(0xb4, gbc.e());
        EXPECT(0x40, gbc.h());
        EXPECT(0x90, gbc.l());
        EXPECT(0xb436, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0xac4a));
        EXPECT(0x4b, gbc.readMem(0xb436));
        EXPECT(0xac, gbc.readMem(0xb437));
        // DF 03CD
        gbc.setState(0x6673, 0xc767, 0x91f0, 0x115b, 0x5069, 0xccda, 0x1, 0x0);
        gbc.writeMem(0x6673, { 0xdf });
        gbc.writeMem(0xc765, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x91, gbc.a());
        EXPECT(0x11, gbc.b());
        EXPECT(0x5b, gbc.c());
        EXPECT(0x50, gbc.d());
        EXPECT(0x69, gbc.e());
        EXPECT(0xcc, gbc.h());
        EXPECT(0xda, gbc.l());
        EXPECT(0xc765, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x74, gbc.readMem(0xc765));
        EXPECT(0x66, gbc.readMem(0xc766));
        // DF 03CF
        gbc.setState(0x6b2c, 0xd0bf, 0x4850, 0x9e55, 0x76, 0x166c, 0x0, 0x0);
        gbc.writeMem(0x6b2c, { 0xdf });
        gbc.writeMem(0xd0bd, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x48, gbc.a());
        EXPECT(0x9e, gbc.b());
        EXPECT(0x55, gbc.c());
        EXPECT(0x0, gbc.d());
        EXPECT(0x76, gbc.e());
        EXPECT(0x16, gbc.h());
        EXPECT(0x6c, gbc.l());
        EXPECT(0xd0bd, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x2d, gbc.readMem(0xd0bd));
        EXPECT(0x6b, gbc.readMem(0xd0be));
        // DF 03D3
        gbc.setState(0xd6d9, 0xca1f, 0x38a0, 0xaabd, 0x8c4a, 0xe237, 0x1, 0x0);
        gbc.writeMem(0xca1d, { 0x0, 0x0 });
        gbc.writeMem(0xd6d9, { 0xdf });
        gbc.step();
        EXPECT(0x38, gbc.a());
        EXPECT(0xaa, gbc.b());
        EXPECT(0xbd, gbc.c());
        EXPECT(0x8c, gbc.d());
        EXPECT(0x4a, gbc.e());
        EXPECT(0xe2, gbc.h());
        EXPECT(0x37, gbc.l());
        EXPECT(0xca1d, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xda, gbc.readMem(0xca1d));
        EXPECT(0xd6, gbc.readMem(0xca1e));
        EXPECT(0xdf, gbc.readMem(0xd6d9));
        // DF 03D5
        gbc.setState(0x5053, 0xf8e8, 0xa5a0, 0x5bba, 0x7b87, 0x904, 0x1, 0x0);
        gbc.writeMem(0x5053, { 0xdf });
        gbc.writeMem(0xf8e6, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xa5, gbc.a());
        EXPECT(0x5b, gbc.b());
        EXPECT(0xba, gbc.c());
        EXPECT(0x7b, gbc.d());
        EXPECT(0x87, gbc.e());
        EXPECT(0x9, gbc.h());
        EXPECT(0x4, gbc.l());
        EXPECT(0xf8e6, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x54, gbc.readMem(0xf8e6));
        EXPECT(0x50, gbc.readMem(0xf8e7));
        // DF 03D6
        gbc.setState(0x69c8, 0xe4c8, 0x760, 0x276c, 0x24b9, 0xbb17, 0x1, 0x0);
        gbc.writeMem(0x69c8, { 0xdf });
        gbc.writeMem(0xe4c6, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x7, gbc.a());
        EXPECT(0x27, gbc.b());
        EXPECT(0x6c, gbc.c());
        EXPECT(0x24, gbc.d());
        EXPECT(0xb9, gbc.e());
        EXPECT(0xbb, gbc.h());
        EXPECT(0x17, gbc.l());
        EXPECT(0xe4c6, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xc9, gbc.readMem(0xe4c6));
        EXPECT(0x69, gbc.readMem(0xe4c7));
        // DF 03D9
        gbc.setState(0x51de, 0xcc60, 0xf0f0, 0x5d0c, 0xeba6, 0x8e2a, 0x0, 0x1);
        gbc.writeMem(0x51de, { 0xdf });
        gbc.writeMem(0xcc5e, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xf0, gbc.a());
        EXPECT(0x5d, gbc.b());
        EXPECT(0xc, gbc.c());
        EXPECT(0xeb, gbc.d());
        EXPECT(0xa6, gbc.e());
        EXPECT(0x8e, gbc.h());
        EXPECT(0x2a, gbc.l());
        EXPECT(0xcc5e, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0xcc5e));
        EXPECT(0x51, gbc.readMem(0xcc5f));
        // DF 03DA
        gbc.setState(0x9188, 0xe637, 0x7300, 0x6262, 0xed82, 0x58f8, 0x0, 0x1);
        gbc.writeMem(0x9188, { 0xdf });
        gbc.writeMem(0xe635, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x73, gbc.a());
        EXPECT(0x62, gbc.b());
        EXPECT(0x62, gbc.c());
        EXPECT(0xed, gbc.d());
        EXPECT(0x82, gbc.e());
        EXPECT(0x58, gbc.h());
        EXPECT(0xf8, gbc.l());
        EXPECT(0xe635, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0x9188));
        EXPECT(0x89, gbc.readMem(0xe635));
        EXPECT(0x91, gbc.readMem(0xe636));
        // DF 03DB
        gbc.setState(0x209, 0x92dc, 0x9830, 0xd933, 0x436, 0xae2c, 0x0, 0x0);
        gbc.writeMem(0x209, { 0xdf });
        gbc.writeMem(0x92da, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x98, gbc.a());
        EXPECT(0xd9, gbc.b());
        EXPECT(0x33, gbc.c());
        EXPECT(0x4, gbc.d());
        EXPECT(0x36, gbc.e());
        EXPECT(0xae, gbc.h());
        EXPECT(0x2c, gbc.l());
        EXPECT(0x92da, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xa, gbc.readMem(0x92da));
        EXPECT(0x2, gbc.readMem(0x92db));
        // DF 03DC
        gbc.setState(0xc0ed, 0x86e9, 0x5af0, 0x6b12, 0x1ea7, 0xbdcb, 0x0, 0x1);
        gbc.writeMem(0x86e7, { 0x0, 0x0 });
        gbc.writeMem(0xc0ed, { 0xdf });
        gbc.step();
        EXPECT(0x5a, gbc.a());
        EXPECT(0x6b, gbc.b());
        EXPECT(0x12, gbc.c());
        EXPECT(0x1e, gbc.d());
        EXPECT(0xa7, gbc.e());
        EXPECT(0xbd, gbc.h());
        EXPECT(0xcb, gbc.l());
        EXPECT(0x86e7, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xee, gbc.readMem(0x86e7));
        EXPECT(0xc0, gbc.readMem(0x86e8));
        EXPECT(0xdf, gbc.readMem(0xc0ed));
        // DF 03DE
        gbc.setState(0xeadd, 0xc1e6, 0x8ee0, 0x670b, 0xbf0c, 0x906e, 0x0, 0x1);
        gbc.writeMem(0xc1e4, { 0x0, 0x0 });
        gbc.writeMem(0xeadd, { 0xdf });
        gbc.step();
        EXPECT(0x8e, gbc.a());
        EXPECT(0x67, gbc.b());
        EXPECT(0xb, gbc.c());
        EXPECT(0xbf, gbc.d());
        EXPECT(0xc, gbc.e());
        EXPECT(0x90, gbc.h());
        EXPECT(0x6e, gbc.l());
        EXPECT(0xc1e4, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xde, gbc.readMem(0xc1e4));
        EXPECT(0xea, gbc.readMem(0xc1e5));
        EXPECT(0xdf, gbc.readMem(0xeadd));
        // DF 03DF
        gbc.setState(0x82bb, 0xa6bc, 0x5dd0, 0xfccf, 0xe7e6, 0xc9a5, 0x1, 0x1);
        gbc.writeMem(0x82bb, { 0xdf });
        gbc.writeMem(0xa6ba, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x5d, gbc.a());
        EXPECT(0xfc, gbc.b());
        EXPECT(0xcf, gbc.c());
        EXPECT(0xe7, gbc.d());
        EXPECT(0xe6, gbc.e());
        EXPECT(0xc9, gbc.h());
        EXPECT(0xa5, gbc.l());
        EXPECT(0xa6ba, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0x82bb));
        EXPECT(0xbc, gbc.readMem(0xa6ba));
        EXPECT(0x82, gbc.readMem(0xa6bb));
        // DF 03E0
        gbc.setState(0xb6af, 0xddf6, 0x3560, 0xf327, 0x77d7, 0xcaf7, 0x1, 0x0);
        gbc.writeMem(0xb6af, { 0xdf });
        gbc.writeMem(0xddf4, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x35, gbc.a());
        EXPECT(0xf3, gbc.b());
        EXPECT(0x27, gbc.c());
        EXPECT(0x77, gbc.d());
        EXPECT(0xd7, gbc.e());
        EXPECT(0xca, gbc.h());
        EXPECT(0xf7, gbc.l());
        EXPECT(0xddf4, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0xb6af));
        EXPECT(0xb0, gbc.readMem(0xddf4));
        EXPECT(0xb6, gbc.readMem(0xddf5));
        // DF 03E1
        gbc.setState(0xebc8, 0x8373, 0x63f0, 0xc46e, 0x2a89, 0xc630, 0x1, 0x0);
        gbc.writeMem(0x8371, { 0x0, 0x0 });
        gbc.writeMem(0xebc8, { 0xdf });
        gbc.step();
        EXPECT(0x63, gbc.a());
        EXPECT(0xc4, gbc.b());
        EXPECT(0x6e, gbc.c());
        EXPECT(0x2a, gbc.d());
        EXPECT(0x89, gbc.e());
        EXPECT(0xc6, gbc.h());
        EXPECT(0x30, gbc.l());
        EXPECT(0x8371, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xc9, gbc.readMem(0x8371));
        EXPECT(0xeb, gbc.readMem(0x8372));
        EXPECT(0xdf, gbc.readMem(0xebc8));
        // DF 03E2
        gbc.setState(0x50da, 0xcf10, 0xdae0, 0xad0a, 0x13e, 0x4601, 0x0, 0x1);
        gbc.writeMem(0x50da, { 0xdf });
        gbc.writeMem(0xcf0e, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xda, gbc.a());
        EXPECT(0xad, gbc.b());
        EXPECT(0xa, gbc.c());
        EXPECT(0x1, gbc.d());
        EXPECT(0x3e, gbc.e());
        EXPECT(0x46, gbc.h());
        EXPECT(0x1, gbc.l());
        EXPECT(0xcf0e, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdb, gbc.readMem(0xcf0e));
        EXPECT(0x50, gbc.readMem(0xcf0f));
        // DF 03E5
        gbc.setState(0x7ac4, 0xc528, 0xb190, 0x8074, 0x7b0c, 0x8ec5, 0x1, 0x0);
        gbc.writeMem(0x7ac4, { 0xdf });
        gbc.writeMem(0xc526, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xb1, gbc.a());
        EXPECT(0x80, gbc.b());
        EXPECT(0x74, gbc.c());
        EXPECT(0x7b, gbc.d());
        EXPECT(0xc, gbc.e());
        EXPECT(0x8e, gbc.h());
        EXPECT(0xc5, gbc.l());
        EXPECT(0xc526, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xc5, gbc.readMem(0xc526));
        EXPECT(0x7a, gbc.readMem(0xc527));
        // DF 03E6
        gbc.setState(0xa08a, 0xaa9a, 0x88d0, 0x9070, 0xa19e, 0x9f01, 0x1, 0x0);
        gbc.writeMem(0xa08a, { 0xdf });
        gbc.writeMem(0xaa98, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x88, gbc.a());
        EXPECT(0x90, gbc.b());
        EXPECT(0x70, gbc.c());
        EXPECT(0xa1, gbc.d());
        EXPECT(0x9e, gbc.e());
        EXPECT(0x9f, gbc.h());
        EXPECT(0x1, gbc.l());
        EXPECT(0xaa98, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0xa08a));
        EXPECT(0x8b, gbc.readMem(0xaa98));
        EXPECT(0xa0, gbc.readMem(0xaa99));
        // DF 03E7
        gbc.setState(0x6f83, 0x93f1, 0x72c0, 0x297f, 0x90b8, 0xcc67, 0x0, 0x0);
        gbc.writeMem(0x6f83, { 0xdf });
        gbc.writeMem(0x93ef, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x72, gbc.a());
        EXPECT(0x29, gbc.b());
        EXPECT(0x7f, gbc.c());
        EXPECT(0x90, gbc.d());
        EXPECT(0xb8, gbc.e());
        EXPECT(0xcc, gbc.h());
        EXPECT(0x67, gbc.l());
        EXPECT(0x93ef, gbc.sp());
        EXPECT(0x18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x84, gbc.readMem(0x93ef));
        EXPECT(0x6f, gbc.readMem(0x93f0));
    }
