    TEST(gbcemu, opcode_cb_a8) {
        GBCEmu gbc{};
        uint8_t cartridge[0x8000];
        cartridge[0x149] = 0x02; // 8kb external RAM
        gbc.loadCartridge(new FlashGamePak(cartridge));
        // CB A8 0000
        gbc.setState(0x1361, 0xbbe2, 0x83a0, 0xdd50, 0x92ad, 0x5903, 0x0, 0x1);
        gbc.writeMem(0x1361, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x83, gbc.a());
        EXPECT(0xdd, gbc.b());
        EXPECT(0x50, gbc.c());
        EXPECT(0x92, gbc.d());
        EXPECT(0xad, gbc.e());
        EXPECT(0x59, gbc.h());
        EXPECT(0x3, gbc.l());
        EXPECT(0xbbe2, gbc.sp());
        EXPECT(0x1363, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 0001
        gbc.setState(0x6bb7, 0x4cf, 0x8d00, 0xfbaa, 0xab21, 0x2002, 0x0, 0x0);
        gbc.writeMem(0x6bb7, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x8d, gbc.a());
        EXPECT(0xdb, gbc.b());
        EXPECT(0xaa, gbc.c());
        EXPECT(0xab, gbc.d());
        EXPECT(0x21, gbc.e());
        EXPECT(0x20, gbc.h());
        EXPECT(0x2, gbc.l());
        EXPECT(0x4cf, gbc.sp());
        EXPECT(0x6bb9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 0002
        gbc.setState(0x426e, 0x4227, 0x8750, 0x84c9, 0x263a, 0xa755, 0x0, 0x0);
        gbc.writeMem(0x426e, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x87, gbc.a());
        EXPECT(0x84, gbc.b());
        EXPECT(0xc9, gbc.c());
        EXPECT(0x26, gbc.d());
        EXPECT(0x3a, gbc.e());
        EXPECT(0xa7, gbc.h());
        EXPECT(0x55, gbc.l());
        EXPECT(0x4227, gbc.sp());
        EXPECT(0x4270, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 0003
        gbc.setState(0x73cf, 0xd807, 0xdba0, 0x310, 0x555, 0x8e97, 0x1, 0x1);
        gbc.writeMem(0x73cf, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xdb, gbc.a());
        EXPECT(0x3, gbc.b());
        EXPECT(0x10, gbc.c());
        EXPECT(0x5, gbc.d());
        EXPECT(0x55, gbc.e());
        EXPECT(0x8e, gbc.h());
        EXPECT(0x97, gbc.l());
        EXPECT(0xd807, gbc.sp());
        EXPECT(0x73d1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 0004
        gbc.setState(0x5f39, 0xd0d7, 0xa30, 0xbdf8, 0x1aa4, 0x8e4f, 0x0, 0x1);
        gbc.writeMem(0x5f39, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xa, gbc.a());
        EXPECT(0x9d, gbc.b());
        EXPECT(0xf8, gbc.c());
        EXPECT(0x1a, gbc.d());
        EXPECT(0xa4, gbc.e());
        EXPECT(0x8e, gbc.h());
        EXPECT(0x4f, gbc.l());
        EXPECT(0xd0d7, gbc.sp());
        EXPECT(0x5f3b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 0005
        gbc.setState(0x8c58, 0x721f, 0x25c0, 0xaf9e, 0x976c, 0x4a91, 0x1, 0x0);
        gbc.writeMem(0x8c58, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x25, gbc.a());
        EXPECT(0x8f, gbc.b());
        EXPECT(0x9e, gbc.c());
        EXPECT(0x97, gbc.d());
        EXPECT(0x6c, gbc.e());
        EXPECT(0x4a, gbc.h());
        EXPECT(0x91, gbc.l());
        EXPECT(0x721f, gbc.sp());
        EXPECT(0x8c5a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8c58));
        EXPECT(0xa8, gbc.readMem(0x8c59));
        // CB A8 0006
        gbc.setState(0x6, 0x858e, 0x62c0, 0xd693, 0x2ee5, 0x53ba, 0x1, 0x1);
        gbc.writeMem(0x6, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x62, gbc.a());
        EXPECT(0xd6, gbc.b());
        EXPECT(0x93, gbc.c());
        EXPECT(0x2e, gbc.d());
        EXPECT(0xe5, gbc.e());
        EXPECT(0x53, gbc.h());
        EXPECT(0xba, gbc.l());
        EXPECT(0x858e, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 0007
        gbc.setState(0x45d4, 0x2e6e, 0x7480, 0x9162, 0xa57b, 0xa1d1, 0x0, 0x0);
        gbc.writeMem(0x45d4, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x74, gbc.a());
        EXPECT(0x91, gbc.b());
        EXPECT(0x62, gbc.c());
        EXPECT(0xa5, gbc.d());
        EXPECT(0x7b, gbc.e());
        EXPECT(0xa1, gbc.h());
        EXPECT(0xd1, gbc.l());
        EXPECT(0x2e6e, gbc.sp());
        EXPECT(0x45d6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 0008
        gbc.setState(0x68e1, 0x42fc, 0xab80, 0x6c84, 0x9435, 0x6a7c, 0x1, 0x0);
        gbc.writeMem(0x68e1, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xab, gbc.a());
        EXPECT(0x4c, gbc.b());
        EXPECT(0x84, gbc.c());
        EXPECT(0x94, gbc.d());
        EXPECT(0x35, gbc.e());
        EXPECT(0x6a, gbc.h());
        EXPECT(0x7c, gbc.l());
        EXPECT(0x42fc, gbc.sp());
        EXPECT(0x68e3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 0009
        gbc.setState(0x9af3, 0x4a10, 0x9610, 0xf1f9, 0x1e81, 0xb9d3, 0x0, 0x1);
        gbc.writeMem(0x9af3, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x96, gbc.a());
        EXPECT(0xd1, gbc.b());
        EXPECT(0xf9, gbc.c());
        EXPECT(0x1e, gbc.d());
        EXPECT(0x81, gbc.e());
        EXPECT(0xb9, gbc.h());
        EXPECT(0xd3, gbc.l());
        EXPECT(0x4a10, gbc.sp());
        EXPECT(0x9af5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9af3));
        EXPECT(0xa8, gbc.readMem(0x9af4));
        // CB A8 000A
        gbc.setState(0x25a8, 0xadcc, 0xb250, 0x3417, 0xe150, 0xebcb, 0x1, 0x0);
        gbc.writeMem(0x25a8, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xb2, gbc.a());
        EXPECT(0x14, gbc.b());
        EXPECT(0x17, gbc.c());
        EXPECT(0xe1, gbc.d());
        EXPECT(0x50, gbc.e());
        EXPECT(0xeb, gbc.h());
        EXPECT(0xcb, gbc.l());
        EXPECT(0xadcc, gbc.sp());
        EXPECT(0x25aa, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 000B
        gbc.setState(0x3e6e, 0xe34e, 0xc4d0, 0x2e53, 0xe3aa, 0x69f, 0x0, 0x0);
        gbc.writeMem(0x3e6e, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xc4, gbc.a());
        EXPECT(0xe, gbc.b());
        EXPECT(0x53, gbc.c());
        EXPECT(0xe3, gbc.d());
        EXPECT(0xaa, gbc.e());
        EXPECT(0x6, gbc.h());
        EXPECT(0x9f, gbc.l());
        EXPECT(0xe34e, gbc.sp());
        EXPECT(0x3e70, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 000C
        gbc.setState(0xc49b, 0x7ff2, 0xfe50, 0x3182, 0x4a88, 0x36d6, 0x0, 0x0);
        gbc.writeMem(0xc49b, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xfe, gbc.a());
        EXPECT(0x11, gbc.b());
        EXPECT(0x82, gbc.c());
        EXPECT(0x4a, gbc.d());
        EXPECT(0x88, gbc.e());
        EXPECT(0x36, gbc.h());
        EXPECT(0xd6, gbc.l());
        EXPECT(0x7ff2, gbc.sp());
        EXPECT(0xc49d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc49b));
        EXPECT(0xa8, gbc.readMem(0xc49c));
        // CB A8 000D
        gbc.setState(0x9ae1, 0x551e, 0x4790, 0x2c62, 0xcc21, 0xac78, 0x1, 0x1);
        gbc.writeMem(0x9ae1, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x47, gbc.a());
        EXPECT(0xc, gbc.b());
        EXPECT(0x62, gbc.c());
        EXPECT(0xcc, gbc.d());
        EXPECT(0x21, gbc.e());
        EXPECT(0xac, gbc.h());
        EXPECT(0x78, gbc.l());
        EXPECT(0x551e, gbc.sp());
        EXPECT(0x9ae3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9ae1));
        EXPECT(0xa8, gbc.readMem(0x9ae2));
        // CB A8 000E
        gbc.setState(0xee, 0x61c9, 0x560, 0xd4cf, 0x6113, 0x93e0, 0x1, 0x0);
        gbc.writeMem(0xee, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x5, gbc.a());
        EXPECT(0xd4, gbc.b());
        EXPECT(0xcf, gbc.c());
        EXPECT(0x61, gbc.d());
        EXPECT(0x13, gbc.e());
        EXPECT(0x93, gbc.h());
        EXPECT(0xe0, gbc.l());
        EXPECT(0x61c9, gbc.sp());
        EXPECT(0xf0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 000F
        gbc.setState(0x77e0, 0xd751, 0x5570, 0x30cf, 0x6597, 0xef3a, 0x0, 0x0);
        gbc.writeMem(0x77e0, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x55, gbc.a());
        EXPECT(0x10, gbc.b());
        EXPECT(0xcf, gbc.c());
        EXPECT(0x65, gbc.d());
        EXPECT(0x97, gbc.e());
        EXPECT(0xef, gbc.h());
        EXPECT(0x3a, gbc.l());
        EXPECT(0xd751, gbc.sp());
        EXPECT(0x77e2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 0010
        gbc.setState(0x2a40, 0x87e7, 0x5d40, 0xd42, 0xfc3b, 0xda41, 0x0, 0x1);
        gbc.writeMem(0x2a40, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x5d, gbc.a());
        EXPECT(0xd, gbc.b());
        EXPECT(0x42, gbc.c());
        EXPECT(0xfc, gbc.d());
        EXPECT(0x3b, gbc.e());
        EXPECT(0xda, gbc.h());
        EXPECT(0x41, gbc.l());
        EXPECT(0x87e7, gbc.sp());
        EXPECT(0x2a42, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 0011
        gbc.setState(0x403c, 0xd38a, 0x93d0, 0x47c2, 0x1d03, 0xf58d, 0x0, 0x1);
        gbc.writeMem(0x403c, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x93, gbc.a());
        EXPECT(0x47, gbc.b());
        EXPECT(0xc2, gbc.c());
        EXPECT(0x1d, gbc.d());
        EXPECT(0x3, gbc.e());
        EXPECT(0xf5, gbc.h());
        EXPECT(0x8d, gbc.l());
        EXPECT(0xd38a, gbc.sp());
        EXPECT(0x403e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 0012
        gbc.setState(0xb2af, 0xa238, 0x7510, 0x6f3f, 0xa6c7, 0x2a9, 0x1, 0x0);
        gbc.writeMem(0xb2af, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x75, gbc.a());
        EXPECT(0x4f, gbc.b());
        EXPECT(0x3f, gbc.c());
        EXPECT(0xa6, gbc.d());
        EXPECT(0xc7, gbc.e());
        EXPECT(0x2, gbc.h());
        EXPECT(0xa9, gbc.l());
        EXPECT(0xa238, gbc.sp());
        EXPECT(0xb2b1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb2af));
        EXPECT(0xa8, gbc.readMem(0xb2b0));
        // CB A8 0013
        gbc.setState(0x732a, 0x52d9, 0xc460, 0x6795, 0xd94f, 0xef45, 0x1, 0x1);
        gbc.writeMem(0x732a, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xc4, gbc.a());
        EXPECT(0x47, gbc.b());
        EXPECT(0x95, gbc.c());
        EXPECT(0xd9, gbc.d());
        EXPECT(0x4f, gbc.e());
        EXPECT(0xef, gbc.h());
        EXPECT(0x45, gbc.l());
        EXPECT(0x52d9, gbc.sp());
        EXPECT(0x732c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 0014
        gbc.setState(0xe9f8, 0xe58a, 0xdb80, 0x1000, 0x6360, 0xdf26, 0x1, 0x0);
        gbc.writeMem(0xe9f8, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xdb, gbc.a());
        EXPECT(0x10, gbc.b());
        EXPECT(0x0, gbc.c());
        EXPECT(0x63, gbc.d());
        EXPECT(0x60, gbc.e());
        EXPECT(0xdf, gbc.h());
        EXPECT(0x26, gbc.l());
        EXPECT(0xe58a, gbc.sp());
        EXPECT(0xe9fa, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe9f8));
        EXPECT(0xa8, gbc.readMem(0xe9f9));
        // CB A8 0015
        gbc.setState(0x3916, 0x481d, 0xb3b0, 0x4bb8, 0xc10e, 0x9c8e, 0x0, 0x1);
        gbc.writeMem(0x3916, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xb3, gbc.a());
        EXPECT(0x4b, gbc.b());
        EXPECT(0xb8, gbc.c());
        EXPECT(0xc1, gbc.d());
        EXPECT(0xe, gbc.e());
        EXPECT(0x9c, gbc.h());
        EXPECT(0x8e, gbc.l());
        EXPECT(0x481d, gbc.sp());
        EXPECT(0x3918, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 0016
        gbc.setState(0x619, 0xb860, 0xef90, 0x5f73, 0x1184, 0xe70b, 0x0, 0x1);
        gbc.writeMem(0x619, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xef, gbc.a());
        EXPECT(0x5f, gbc.b());
        EXPECT(0x73, gbc.c());
        EXPECT(0x11, gbc.d());
        EXPECT(0x84, gbc.e());
        EXPECT(0xe7, gbc.h());
        EXPECT(0xb, gbc.l());
        EXPECT(0xb860, gbc.sp());
        EXPECT(0x61b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 0017
        gbc.setState(0x9ae0, 0x642b, 0xe9f0, 0xf0c4, 0xed4, 0x7663, 0x1, 0x1);
        gbc.writeMem(0x9ae0, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xe9, gbc.a());
        EXPECT(0xd0, gbc.b());
        EXPECT(0xc4, gbc.c());
        EXPECT(0xe, gbc.d());
        EXPECT(0xd4, gbc.e());
        EXPECT(0x76, gbc.h());
        EXPECT(0x63, gbc.l());
        EXPECT(0x642b, gbc.sp());
        EXPECT(0x9ae2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9ae0));
        EXPECT(0xa8, gbc.readMem(0x9ae1));
        // CB A8 0018
        gbc.setState(0x61bb, 0x238c, 0x190, 0x5169, 0xd620, 0xd8c2, 0x1, 0x1);
        gbc.writeMem(0x61bb, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x1, gbc.a());
        EXPECT(0x51, gbc.b());
        EXPECT(0x69, gbc.c());
        EXPECT(0xd6, gbc.d());
        EXPECT(0x20, gbc.e());
        EXPECT(0xd8, gbc.h());
        EXPECT(0xc2, gbc.l());
        EXPECT(0x238c, gbc.sp());
        EXPECT(0x61bd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 0019
        gbc.setState(0x5c8e, 0xce79, 0x11c0, 0xf51c, 0xb5ad, 0x8821, 0x0, 0x0);
        gbc.writeMem(0x5c8e, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x11, gbc.a());
        EXPECT(0xd5, gbc.b());
        EXPECT(0x1c, gbc.c());
        EXPECT(0xb5, gbc.d());
        EXPECT(0xad, gbc.e());
        EXPECT(0x88, gbc.h());
        EXPECT(0x21, gbc.l());
        EXPECT(0xce79, gbc.sp());
        EXPECT(0x5c90, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 001A
        gbc.setState(0x2cf, 0xa1c6, 0xb6c0, 0xdc04, 0xa8eb, 0x5c94, 0x0, 0x0);
        gbc.writeMem(0x2cf, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xb6, gbc.a());
        EXPECT(0xdc, gbc.b());
        EXPECT(0x4, gbc.c());
        EXPECT(0xa8, gbc.d());
        EXPECT(0xeb, gbc.e());
        EXPECT(0x5c, gbc.h());
        EXPECT(0x94, gbc.l());
        EXPECT(0xa1c6, gbc.sp());
        EXPECT(0x2d1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 001B
        gbc.setState(0x99c, 0x709a, 0xef0, 0xa7c, 0xf031, 0x601b, 0x0, 0x0);
        gbc.writeMem(0x99c, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xe, gbc.a());
        EXPECT(0xa, gbc.b());
        EXPECT(0x7c, gbc.c());
        EXPECT(0xf0, gbc.d());
        EXPECT(0x31, gbc.e());
        EXPECT(0x60, gbc.h());
        EXPECT(0x1b, gbc.l());
        EXPECT(0x709a, gbc.sp());
        EXPECT(0x99e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 001C
        gbc.setState(0x4c35, 0xc9f4, 0x82a0, 0x360c, 0x35eb, 0x6d39, 0x1, 0x1);
        gbc.writeMem(0x4c35, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x82, gbc.a());
        EXPECT(0x16, gbc.b());
        EXPECT(0xc, gbc.c());
        EXPECT(0x35, gbc.d());
        EXPECT(0xeb, gbc.e());
        EXPECT(0x6d, gbc.h());
        EXPECT(0x39, gbc.l());
        EXPECT(0xc9f4, gbc.sp());
        EXPECT(0x4c37, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 001D
        gbc.setState(0x29e4, 0x3919, 0xac60, 0x1cec, 0x6182, 0x2162, 0x0, 0x1);
        gbc.writeMem(0x29e4, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xac, gbc.a());
        EXPECT(0x1c, gbc.b());
        EXPECT(0xec, gbc.c());
        EXPECT(0x61, gbc.d());
        EXPECT(0x82, gbc.e());
        EXPECT(0x21, gbc.h());
        EXPECT(0x62, gbc.l());
        EXPECT(0x3919, gbc.sp());
        EXPECT(0x29e6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 001E
        gbc.setState(0xc6a9, 0x749c, 0xe850, 0x764a, 0x42c, 0xcea2, 0x0, 0x0);
        gbc.writeMem(0xc6a9, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xe8, gbc.a());
        EXPECT(0x56, gbc.b());
        EXPECT(0x4a, gbc.c());
        EXPECT(0x4, gbc.d());
        EXPECT(0x2c, gbc.e());
        EXPECT(0xce, gbc.h());
        EXPECT(0xa2, gbc.l());
        EXPECT(0x749c, gbc.sp());
        EXPECT(0xc6ab, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc6a9));
        EXPECT(0xa8, gbc.readMem(0xc6aa));
        // CB A8 001F
        gbc.setState(0x399e, 0x6a06, 0xa530, 0x3c1c, 0xc91c, 0xac2a, 0x0, 0x0);
        gbc.writeMem(0x399e, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xa5, gbc.a());
        EXPECT(0x1c, gbc.b());
        EXPECT(0x1c, gbc.c());
        EXPECT(0xc9, gbc.d());
        EXPECT(0x1c, gbc.e());
        EXPECT(0xac, gbc.h());
        EXPECT(0x2a, gbc.l());
        EXPECT(0x6a06, gbc.sp());
        EXPECT(0x39a0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 0020
        gbc.setState(0x6a8d, 0xa44a, 0xfb80, 0x473e, 0x6b7a, 0x64fb, 0x1, 0x1);
        gbc.writeMem(0x6a8d, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xfb, gbc.a());
        EXPECT(0x47, gbc.b());
        EXPECT(0x3e, gbc.c());
        EXPECT(0x6b, gbc.d());
        EXPECT(0x7a, gbc.e());
        EXPECT(0x64, gbc.h());
        EXPECT(0xfb, gbc.l());
        EXPECT(0xa44a, gbc.sp());
        EXPECT(0x6a8f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 0021
        gbc.setState(0x6e8b, 0x4710, 0x80a0, 0x35ed, 0x8472, 0x3d2d, 0x0, 0x1);
        gbc.writeMem(0x6e8b, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x80, gbc.a());
        EXPECT(0x15, gbc.b());
        EXPECT(0xed, gbc.c());
        EXPECT(0x84, gbc.d());
        EXPECT(0x72, gbc.e());
        EXPECT(0x3d, gbc.h());
        EXPECT(0x2d, gbc.l());
        EXPECT(0x4710, gbc.sp());
        EXPECT(0x6e8d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 0022
        gbc.setState(0xa1c5, 0xb660, 0xb3d0, 0xd7cb, 0x6b63, 0x2a90, 0x0, 0x0);
        gbc.writeMem(0xa1c5, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xb3, gbc.a());
        EXPECT(0xd7, gbc.b());
        EXPECT(0xcb, gbc.c());
        EXPECT(0x6b, gbc.d());
        EXPECT(0x63, gbc.e());
        EXPECT(0x2a, gbc.h());
        EXPECT(0x90, gbc.l());
        EXPECT(0xb660, gbc.sp());
        EXPECT(0xa1c7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa1c5));
        EXPECT(0xa8, gbc.readMem(0xa1c6));
        // CB A8 0023
        gbc.setState(0x665, 0x1397, 0xff90, 0x13d0, 0xb8a6, 0x180e, 0x1, 0x1);
        gbc.writeMem(0x665, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xff, gbc.a());
        EXPECT(0x13, gbc.b());
        EXPECT(0xd0, gbc.c());
        EXPECT(0xb8, gbc.d());
        EXPECT(0xa6, gbc.e());
        EXPECT(0x18, gbc.h());
        EXPECT(0xe, gbc.l());
        EXPECT(0x1397, gbc.sp());
        EXPECT(0x667, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 0024
        gbc.setState(0xcc06, 0x5c3e, 0x1b60, 0x29b9, 0xd6be, 0xb51f, 0x0, 0x0);
        gbc.writeMem(0xcc06, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x1b, gbc.a());
        EXPECT(0x9, gbc.b());
        EXPECT(0xb9, gbc.c());
        EXPECT(0xd6, gbc.d());
        EXPECT(0xbe, gbc.e());
        EXPECT(0xb5, gbc.h());
        EXPECT(0x1f, gbc.l());
        EXPECT(0x5c3e, gbc.sp());
        EXPECT(0xcc08, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcc06));
        EXPECT(0xa8, gbc.readMem(0xcc07));
        // CB A8 0026
        gbc.setState(0x3fae, 0xd060, 0xa9c0, 0x7638, 0x69e7, 0x8907, 0x1, 0x1);
        gbc.writeMem(0x3fae, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xa9, gbc.a());
        EXPECT(0x56, gbc.b());
        EXPECT(0x38, gbc.c());
        EXPECT(0x69, gbc.d());
        EXPECT(0xe7, gbc.e());
        EXPECT(0x89, gbc.h());
        EXPECT(0x7, gbc.l());
        EXPECT(0xd060, gbc.sp());
        EXPECT(0x3fb0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 0027
        gbc.setState(0x14f8, 0xeaf, 0x9de0, 0x5653, 0x6bbc, 0x9f65, 0x0, 0x0);
        gbc.writeMem(0x14f8, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x9d, gbc.a());
        EXPECT(0x56, gbc.b());
        EXPECT(0x53, gbc.c());
        EXPECT(0x6b, gbc.d());
        EXPECT(0xbc, gbc.e());
        EXPECT(0x9f, gbc.h());
        EXPECT(0x65, gbc.l());
        EXPECT(0xeaf, gbc.sp());
        EXPECT(0x14fa, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 0028
        gbc.setState(0x1e54, 0xb7bb, 0xfbc0, 0x205a, 0x8257, 0x6ad4, 0x0, 0x0);
        gbc.writeMem(0x1e54, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xfb, gbc.a());
        EXPECT(0x0, gbc.b());
        EXPECT(0x5a, gbc.c());
        EXPECT(0x82, gbc.d());
        EXPECT(0x57, gbc.e());
        EXPECT(0x6a, gbc.h());
        EXPECT(0xd4, gbc.l());
        EXPECT(0xb7bb, gbc.sp());
        EXPECT(0x1e56, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 0029
        gbc.setState(0x35c2, 0x1efe, 0x5750, 0xa0e8, 0xcba7, 0xb289, 0x0, 0x0);
        gbc.writeMem(0x35c2, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x57, gbc.a());
        EXPECT(0x80, gbc.b());
        EXPECT(0xe8, gbc.c());
        EXPECT(0xcb, gbc.d());
        EXPECT(0xa7, gbc.e());
        EXPECT(0xb2, gbc.h());
        EXPECT(0x89, gbc.l());
        EXPECT(0x1efe, gbc.sp());
        EXPECT(0x35c4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 002A
        gbc.setState(0xd9ed, 0xadef, 0x38d0, 0x1d0b, 0x64b3, 0x26df, 0x0, 0x1);
        gbc.writeMem(0xd9ed, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x38, gbc.a());
        EXPECT(0x1d, gbc.b());
        EXPECT(0xb, gbc.c());
        EXPECT(0x64, gbc.d());
        EXPECT(0xb3, gbc.e());
        EXPECT(0x26, gbc.h());
        EXPECT(0xdf, gbc.l());
        EXPECT(0xadef, gbc.sp());
        EXPECT(0xd9ef, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd9ed));
        EXPECT(0xa8, gbc.readMem(0xd9ee));
        // CB A8 002B
        gbc.setState(0x1ebe, 0x573d, 0x5020, 0x37ef, 0x1753, 0xd5c8, 0x1, 0x0);
        gbc.writeMem(0x1ebe, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x50, gbc.a());
        EXPECT(0x17, gbc.b());
        EXPECT(0xef, gbc.c());
        EXPECT(0x17, gbc.d());
        EXPECT(0x53, gbc.e());
        EXPECT(0xd5, gbc.h());
        EXPECT(0xc8, gbc.l());
        EXPECT(0x573d, gbc.sp());
        EXPECT(0x1ec0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 002C
        gbc.setState(0xd41b, 0x9601, 0x5740, 0x4fd2, 0xf863, 0xc52d, 0x1, 0x1);
        gbc.writeMem(0xd41b, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x57, gbc.a());
        EXPECT(0x4f, gbc.b());
        EXPECT(0xd2, gbc.c());
        EXPECT(0xf8, gbc.d());
        EXPECT(0x63, gbc.e());
        EXPECT(0xc5, gbc.h());
        EXPECT(0x2d, gbc.l());
        EXPECT(0x9601, gbc.sp());
        EXPECT(0xd41d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd41b));
        EXPECT(0xa8, gbc.readMem(0xd41c));
        // CB A8 002D
        gbc.setState(0x4eff, 0xcc43, 0xbb10, 0x8342, 0xd97e, 0x5d49, 0x0, 0x0);
        gbc.writeMem(0x4eff, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xbb, gbc.a());
        EXPECT(0x83, gbc.b());
        EXPECT(0x42, gbc.c());
        EXPECT(0xd9, gbc.d());
        EXPECT(0x7e, gbc.e());
        EXPECT(0x5d, gbc.h());
        EXPECT(0x49, gbc.l());
        EXPECT(0xcc43, gbc.sp());
        EXPECT(0x4f01, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 002E
        gbc.setState(0xd2e5, 0xc851, 0x4a80, 0xd6a1, 0x3c2d, 0x6e97, 0x1, 0x0);
        gbc.writeMem(0xd2e5, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x4a, gbc.a());
        EXPECT(0xd6, gbc.b());
        EXPECT(0xa1, gbc.c());
        EXPECT(0x3c, gbc.d());
        EXPECT(0x2d, gbc.e());
        EXPECT(0x6e, gbc.h());
        EXPECT(0x97, gbc.l());
        EXPECT(0xc851, gbc.sp());
        EXPECT(0xd2e7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd2e5));
        EXPECT(0xa8, gbc.readMem(0xd2e6));
        // CB A8 002F
        gbc.setState(0xcd54, 0xa033, 0xb080, 0x9fd0, 0x828e, 0xef1e, 0x0, 0x1);
        gbc.writeMem(0xcd54, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xb0, gbc.a());
        EXPECT(0x9f, gbc.b());
        EXPECT(0xd0, gbc.c());
        EXPECT(0x82, gbc.d());
        EXPECT(0x8e, gbc.e());
        EXPECT(0xef, gbc.h());
        EXPECT(0x1e, gbc.l());
        EXPECT(0xa033, gbc.sp());
        EXPECT(0xcd56, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcd54));
        EXPECT(0xa8, gbc.readMem(0xcd55));
        // CB A8 0030
        gbc.setState(0x44b8, 0x2b39, 0xb290, 0x3938, 0x5f9c, 0x39c1, 0x0, 0x0);
        gbc.writeMem(0x44b8, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xb2, gbc.a());
        EXPECT(0x19, gbc.b());
        EXPECT(0x38, gbc.c());
        EXPECT(0x5f, gbc.d());
        EXPECT(0x9c, gbc.e());
        EXPECT(0x39, gbc.h());
        EXPECT(0xc1, gbc.l());
        EXPECT(0x2b39, gbc.sp());
        EXPECT(0x44ba, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 0031
        gbc.setState(0x8ea4, 0x29b6, 0xe6e0, 0x490d, 0xed99, 0x2e6a, 0x0, 0x0);
        gbc.writeMem(0x8ea4, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xe6, gbc.a());
        EXPECT(0x49, gbc.b());
        EXPECT(0xd, gbc.c());
        EXPECT(0xed, gbc.d());
        EXPECT(0x99, gbc.e());
        EXPECT(0x2e, gbc.h());
        EXPECT(0x6a, gbc.l());
        EXPECT(0x29b6, gbc.sp());
        EXPECT(0x8ea6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8ea4));
        EXPECT(0xa8, gbc.readMem(0x8ea5));
        // CB A8 0032
        gbc.setState(0x22c6, 0x391d, 0xe230, 0xf158, 0x9fb1, 0x9e1f, 0x0, 0x0);
        gbc.writeMem(0x22c6, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xe2, gbc.a());
        EXPECT(0xd1, gbc.b());
        EXPECT(0x58, gbc.c());
        EXPECT(0x9f, gbc.d());
        EXPECT(0xb1, gbc.e());
        EXPECT(0x9e, gbc.h());
        EXPECT(0x1f, gbc.l());
        EXPECT(0x391d, gbc.sp());
        EXPECT(0x22c8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 0033
        gbc.setState(0x32a5, 0x5bb8, 0x8030, 0xbc13, 0x5211, 0x35b0, 0x0, 0x1);
        gbc.writeMem(0x32a5, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x80, gbc.a());
        EXPECT(0x9c, gbc.b());
        EXPECT(0x13, gbc.c());
        EXPECT(0x52, gbc.d());
        EXPECT(0x11, gbc.e());
        EXPECT(0x35, gbc.h());
        EXPECT(0xb0, gbc.l());
        EXPECT(0x5bb8, gbc.sp());
        EXPECT(0x32a7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 0034
        gbc.setState(0x93c6, 0x3e25, 0x74b0, 0xbb63, 0x615d, 0xab1f, 0x1, 0x1);
        gbc.writeMem(0x93c6, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x74, gbc.a());
        EXPECT(0x9b, gbc.b());
        EXPECT(0x63, gbc.c());
        EXPECT(0x61, gbc.d());
        EXPECT(0x5d, gbc.e());
        EXPECT(0xab, gbc.h());
        EXPECT(0x1f, gbc.l());
        EXPECT(0x3e25, gbc.sp());
        EXPECT(0x93c8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x93c6));
        EXPECT(0xa8, gbc.readMem(0x93c7));
        // CB A8 0035
        gbc.setState(0x42c6, 0xb303, 0x2470, 0x89ce, 0xa5fb, 0x2c9f, 0x0, 0x0);
        gbc.writeMem(0x42c6, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x24, gbc.a());
        EXPECT(0x89, gbc.b());
        EXPECT(0xce, gbc.c());
        EXPECT(0xa5, gbc.d());
        EXPECT(0xfb, gbc.e());
        EXPECT(0x2c, gbc.h());
        EXPECT(0x9f, gbc.l());
        EXPECT(0xb303, gbc.sp());
        EXPECT(0x42c8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 0036
        gbc.setState(0x3f4d, 0x6c9e, 0x6b10, 0x3ac1, 0x4abe, 0xf595, 0x1, 0x1);
        gbc.writeMem(0x3f4d, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x6b, gbc.a());
        EXPECT(0x1a, gbc.b());
        EXPECT(0xc1, gbc.c());
        EXPECT(0x4a, gbc.d());
        EXPECT(0xbe, gbc.e());
        EXPECT(0xf5, gbc.h());
        EXPECT(0x95, gbc.l());
        EXPECT(0x6c9e, gbc.sp());
        EXPECT(0x3f4f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 0037
        gbc.setState(0x7702, 0x7260, 0xc240, 0xd48f, 0xb418, 0x2a8e, 0x1, 0x1);
        gbc.writeMem(0x7702, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xc2, gbc.a());
        EXPECT(0xd4, gbc.b());
        EXPECT(0x8f, gbc.c());
        EXPECT(0xb4, gbc.d());
        EXPECT(0x18, gbc.e());
        EXPECT(0x2a, gbc.h());
        EXPECT(0x8e, gbc.l());
        EXPECT(0x7260, gbc.sp());
        EXPECT(0x7704, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 0038
        gbc.setState(0x44cf, 0x3cd, 0xf100, 0xb60e, 0xcb66, 0xcb2c, 0x1, 0x0);
        gbc.writeMem(0x44cf, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xf1, gbc.a());
        EXPECT(0x96, gbc.b());
        EXPECT(0xe, gbc.c());
        EXPECT(0xcb, gbc.d());
        EXPECT(0x66, gbc.e());
        EXPECT(0xcb, gbc.h());
        EXPECT(0x2c, gbc.l());
        EXPECT(0x3cd, gbc.sp());
        EXPECT(0x44d1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 0039
        gbc.setState(0x808f, 0x2586, 0xfa0, 0x67e8, 0xbd6f, 0x4d71, 0x1, 0x1);
        gbc.writeMem(0x808f, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xf, gbc.a());
        EXPECT(0x47, gbc.b());
        EXPECT(0xe8, gbc.c());
        EXPECT(0xbd, gbc.d());
        EXPECT(0x6f, gbc.e());
        EXPECT(0x4d, gbc.h());
        EXPECT(0x71, gbc.l());
        EXPECT(0x2586, gbc.sp());
        EXPECT(0x8091, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x808f));
        EXPECT(0xa8, gbc.readMem(0x8090));
        // CB A8 003A
        gbc.setState(0x8458, 0xb1b9, 0xcbb0, 0x63a, 0x584a, 0x96b3, 0x0, 0x0);
        gbc.writeMem(0x8458, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xcb, gbc.a());
        EXPECT(0x6, gbc.b());
        EXPECT(0x3a, gbc.c());
        EXPECT(0x58, gbc.d());
        EXPECT(0x4a, gbc.e());
        EXPECT(0x96, gbc.h());
        EXPECT(0xb3, gbc.l());
        EXPECT(0xb1b9, gbc.sp());
        EXPECT(0x845a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8458));
        EXPECT(0xa8, gbc.readMem(0x8459));
        // CB A8 003B
        gbc.setState(0xcc94, 0xa7c0, 0xab0, 0x2374, 0xd843, 0x52ff, 0x1, 0x0);
        gbc.writeMem(0xcc94, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xa, gbc.a());
        EXPECT(0x3, gbc.b());
        EXPECT(0x74, gbc.c());
        EXPECT(0xd8, gbc.d());
        EXPECT(0x43, gbc.e());
        EXPECT(0x52, gbc.h());
        EXPECT(0xff, gbc.l());
        EXPECT(0xa7c0, gbc.sp());
        EXPECT(0xcc96, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcc94));
        EXPECT(0xa8, gbc.readMem(0xcc95));
        // CB A8 003C
        gbc.setState(0x875a, 0x2739, 0x9ad0, 0x35c3, 0x6f9a, 0xb693, 0x0, 0x1);
        gbc.writeMem(0x875a, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x9a, gbc.a());
        EXPECT(0x15, gbc.b());
        EXPECT(0xc3, gbc.c());
        EXPECT(0x6f, gbc.d());
        EXPECT(0x9a, gbc.e());
        EXPECT(0xb6, gbc.h());
        EXPECT(0x93, gbc.l());
        EXPECT(0x2739, gbc.sp());
        EXPECT(0x875c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x875a));
        EXPECT(0xa8, gbc.readMem(0x875b));
        // CB A8 003D
        gbc.setState(0x400b, 0x3a6a, 0xb570, 0xd49d, 0xc5c6, 0x235b, 0x1, 0x1);
        gbc.writeMem(0x400b, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xb5, gbc.a());
        EXPECT(0xd4, gbc.b());
        EXPECT(0x9d, gbc.c());
        EXPECT(0xc5, gbc.d());
        EXPECT(0xc6, gbc.e());
        EXPECT(0x23, gbc.h());
        EXPECT(0x5b, gbc.l());
        EXPECT(0x3a6a, gbc.sp());
        EXPECT(0x400d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 003F
        gbc.setState(0x31bd, 0x4f16, 0x3d60, 0xadd0, 0x77b6, 0xa959, 0x0, 0x0);
        gbc.writeMem(0x31bd, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x3d, gbc.a());
        EXPECT(0x8d, gbc.b());
        EXPECT(0xd0, gbc.c());
        EXPECT(0x77, gbc.d());
        EXPECT(0xb6, gbc.e());
        EXPECT(0xa9, gbc.h());
        EXPECT(0x59, gbc.l());
        EXPECT(0x4f16, gbc.sp());
        EXPECT(0x31bf, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 0041
        gbc.setState(0xa752, 0x2500, 0xa350, 0xb297, 0xd73e, 0x3af2, 0x1, 0x0);
        gbc.writeMem(0xa752, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xa3, gbc.a());
        EXPECT(0x92, gbc.b());
        EXPECT(0x97, gbc.c());
        EXPECT(0xd7, gbc.d());
        EXPECT(0x3e, gbc.e());
        EXPECT(0x3a, gbc.h());
        EXPECT(0xf2, gbc.l());
        EXPECT(0x2500, gbc.sp());
        EXPECT(0xa754, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa752));
        EXPECT(0xa8, gbc.readMem(0xa753));
        // CB A8 0042
        gbc.setState(0xc0d9, 0x3ad1, 0x910, 0x6aa2, 0x6e1e, 0x211d, 0x1, 0x1);
        gbc.writeMem(0xc0d9, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x9, gbc.a());
        EXPECT(0x4a, gbc.b());
        EXPECT(0xa2, gbc.c());
        EXPECT(0x6e, gbc.d());
        EXPECT(0x1e, gbc.e());
        EXPECT(0x21, gbc.h());
        EXPECT(0x1d, gbc.l());
        EXPECT(0x3ad1, gbc.sp());
        EXPECT(0xc0db, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc0d9));
        EXPECT(0xa8, gbc.readMem(0xc0da));
        // CB A8 0044
        gbc.setState(0x7864, 0x5474, 0x29a0, 0xc823, 0x1538, 0xe76b, 0x1, 0x0);
        gbc.writeMem(0x7864, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x29, gbc.a());
        EXPECT(0xc8, gbc.b());
        EXPECT(0x23, gbc.c());
        EXPECT(0x15, gbc.d());
        EXPECT(0x38, gbc.e());
        EXPECT(0xe7, gbc.h());
        EXPECT(0x6b, gbc.l());
        EXPECT(0x5474, gbc.sp());
        EXPECT(0x7866, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 0045
        gbc.setState(0x9e8a, 0x4a63, 0x5530, 0xddfc, 0x6a67, 0xb7fe, 0x1, 0x0);
        gbc.writeMem(0x9e8a, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x55, gbc.a());
        EXPECT(0xdd, gbc.b());
        EXPECT(0xfc, gbc.c());
        EXPECT(0x6a, gbc.d());
        EXPECT(0x67, gbc.e());
        EXPECT(0xb7, gbc.h());
        EXPECT(0xfe, gbc.l());
        EXPECT(0x4a63, gbc.sp());
        EXPECT(0x9e8c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9e8a));
        EXPECT(0xa8, gbc.readMem(0x9e8b));
        // CB A8 0046
        gbc.setState(0x3e5, 0xd166, 0x5500, 0x81e2, 0x85e6, 0xc1fe, 0x1, 0x1);
        gbc.writeMem(0x3e5, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x55, gbc.a());
        EXPECT(0x81, gbc.b());
        EXPECT(0xe2, gbc.c());
        EXPECT(0x85, gbc.d());
        EXPECT(0xe6, gbc.e());
        EXPECT(0xc1, gbc.h());
        EXPECT(0xfe, gbc.l());
        EXPECT(0xd166, gbc.sp());
        EXPECT(0x3e7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 0047
        gbc.setState(0x1ba3, 0x9f4c, 0x2a50, 0x5eb8, 0xc3ea, 0x194, 0x1, 0x0);
        gbc.writeMem(0x1ba3, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x2a, gbc.a());
        EXPECT(0x5e, gbc.b());
        EXPECT(0xb8, gbc.c());
        EXPECT(0xc3, gbc.d());
        EXPECT(0xea, gbc.e());
        EXPECT(0x1, gbc.h());
        EXPECT(0x94, gbc.l());
        EXPECT(0x9f4c, gbc.sp());
        EXPECT(0x1ba5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 0048
        gbc.setState(0xec7, 0xb674, 0x4cc0, 0x360a, 0x8974, 0xd784, 0x0, 0x1);
        gbc.writeMem(0xec7, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x4c, gbc.a());
        EXPECT(0x16, gbc.b());
        EXPECT(0xa, gbc.c());
        EXPECT(0x89, gbc.d());
        EXPECT(0x74, gbc.e());
        EXPECT(0xd7, gbc.h());
        EXPECT(0x84, gbc.l());
        EXPECT(0xb674, gbc.sp());
        EXPECT(0xec9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 0049
        gbc.setState(0x3815, 0x94c1, 0x1200, 0x18b2, 0xd065, 0x6aa8, 0x1, 0x1);
        gbc.writeMem(0x3815, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x12, gbc.a());
        EXPECT(0x18, gbc.b());
        EXPECT(0xb2, gbc.c());
        EXPECT(0xd0, gbc.d());
        EXPECT(0x65, gbc.e());
        EXPECT(0x6a, gbc.h());
        EXPECT(0xa8, gbc.l());
        EXPECT(0x94c1, gbc.sp());
        EXPECT(0x3817, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 004A
        gbc.setState(0x81eb, 0xdc33, 0xe710, 0x79ff, 0x2c97, 0x4d79, 0x1, 0x1);
        gbc.writeMem(0x81eb, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xe7, gbc.a());
        EXPECT(0x59, gbc.b());
        EXPECT(0xff, gbc.c());
        EXPECT(0x2c, gbc.d());
        EXPECT(0x97, gbc.e());
        EXPECT(0x4d, gbc.h());
        EXPECT(0x79, gbc.l());
        EXPECT(0xdc33, gbc.sp());
        EXPECT(0x81ed, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x81eb));
        EXPECT(0xa8, gbc.readMem(0x81ec));
        // CB A8 004B
        gbc.setState(0xccc0, 0xec82, 0x8cc0, 0xa86, 0x6008, 0xb957, 0x1, 0x0);
        gbc.writeMem(0xccc0, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x8c, gbc.a());
        EXPECT(0xa, gbc.b());
        EXPECT(0x86, gbc.c());
        EXPECT(0x60, gbc.d());
        EXPECT(0x8, gbc.e());
        EXPECT(0xb9, gbc.h());
        EXPECT(0x57, gbc.l());
        EXPECT(0xec82, gbc.sp());
        EXPECT(0xccc2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xccc0));
        EXPECT(0xa8, gbc.readMem(0xccc1));
        // CB A8 004C
        gbc.setState(0xaf9, 0x970f, 0x50b0, 0x1e46, 0x6d20, 0x6db7, 0x1, 0x1);
        gbc.writeMem(0xaf9, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x50, gbc.a());
        EXPECT(0x1e, gbc.b());
        EXPECT(0x46, gbc.c());
        EXPECT(0x6d, gbc.d());
        EXPECT(0x20, gbc.e());
        EXPECT(0x6d, gbc.h());
        EXPECT(0xb7, gbc.l());
        EXPECT(0x970f, gbc.sp());
        EXPECT(0xafb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 004D
        gbc.setState(0xa9ad, 0x35db, 0xa520, 0x4dea, 0xa716, 0x1d07, 0x1, 0x0);
        gbc.writeMem(0xa9ad, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xa5, gbc.a());
        EXPECT(0x4d, gbc.b());
        EXPECT(0xea, gbc.c());
        EXPECT(0xa7, gbc.d());
        EXPECT(0x16, gbc.e());
        EXPECT(0x1d, gbc.h());
        EXPECT(0x7, gbc.l());
        EXPECT(0x35db, gbc.sp());
        EXPECT(0xa9af, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa9ad));
        EXPECT(0xa8, gbc.readMem(0xa9ae));
        // CB A8 004E
        gbc.setState(0x6023, 0xc2f6, 0x4230, 0x6daa, 0x369c, 0xae29, 0x1, 0x1);
        gbc.writeMem(0x6023, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x42, gbc.a());
        EXPECT(0x4d, gbc.b());
        EXPECT(0xaa, gbc.c());
        EXPECT(0x36, gbc.d());
        EXPECT(0x9c, gbc.e());
        EXPECT(0xae, gbc.h());
        EXPECT(0x29, gbc.l());
        EXPECT(0xc2f6, gbc.sp());
        EXPECT(0x6025, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 004F
        gbc.setState(0xdbd0, 0xe301, 0xb8a0, 0x1881, 0x65e7, 0xb0a0, 0x1, 0x1);
        gbc.writeMem(0xdbd0, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xb8, gbc.a());
        EXPECT(0x18, gbc.b());
        EXPECT(0x81, gbc.c());
        EXPECT(0x65, gbc.d());
        EXPECT(0xe7, gbc.e());
        EXPECT(0xb0, gbc.h());
        EXPECT(0xa0, gbc.l());
        EXPECT(0xe301, gbc.sp());
        EXPECT(0xdbd2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdbd0));
        EXPECT(0xa8, gbc.readMem(0xdbd1));
        // CB A8 0050
        gbc.setState(0x40cd, 0x3e, 0x7b60, 0xe562, 0x6c03, 0x7b0c, 0x1, 0x0);
        gbc.writeMem(0x40cd, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x7b, gbc.a());
        EXPECT(0xc5, gbc.b());
        EXPECT(0x62, gbc.c());
        EXPECT(0x6c, gbc.d());
        EXPECT(0x3, gbc.e());
        EXPECT(0x7b, gbc.h());
        EXPECT(0xc, gbc.l());
        EXPECT(0x3e, gbc.sp());
        EXPECT(0x40cf, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 0051
        gbc.setState(0x49e7, 0x991c, 0xeac0, 0xe720, 0xf094, 0x3274, 0x0, 0x1);
        gbc.writeMem(0x49e7, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xea, gbc.a());
        EXPECT(0xc7, gbc.b());
        EXPECT(0x20, gbc.c());
        EXPECT(0xf0, gbc.d());
        EXPECT(0x94, gbc.e());
        EXPECT(0x32, gbc.h());
        EXPECT(0x74, gbc.l());
        EXPECT(0x991c, gbc.sp());
        EXPECT(0x49e9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 0052
        gbc.setState(0x1bb7, 0xa667, 0xf7f0, 0xe2ab, 0xba56, 0xd775, 0x0, 0x1);
        gbc.writeMem(0x1bb7, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xf7, gbc.a());
        EXPECT(0xc2, gbc.b());
        EXPECT(0xab, gbc.c());
        EXPECT(0xba, gbc.d());
        EXPECT(0x56, gbc.e());
        EXPECT(0xd7, gbc.h());
        EXPECT(0x75, gbc.l());
        EXPECT(0xa667, gbc.sp());
        EXPECT(0x1bb9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 0053
        gbc.setState(0x1c1f, 0xa5a4, 0x5390, 0xe397, 0x29f6, 0x2924, 0x1, 0x1);
        gbc.writeMem(0x1c1f, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x53, gbc.a());
        EXPECT(0xc3, gbc.b());
        EXPECT(0x97, gbc.c());
        EXPECT(0x29, gbc.d());
        EXPECT(0xf6, gbc.e());
        EXPECT(0x29, gbc.h());
        EXPECT(0x24, gbc.l());
        EXPECT(0xa5a4, gbc.sp());
        EXPECT(0x1c21, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 0054
        gbc.setState(0x85a5, 0x781b, 0x58d0, 0x6a30, 0x2f5d, 0xc6d8, 0x0, 0x0);
        gbc.writeMem(0x85a5, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x58, gbc.a());
        EXPECT(0x4a, gbc.b());
        EXPECT(0x30, gbc.c());
        EXPECT(0x2f, gbc.d());
        EXPECT(0x5d, gbc.e());
        EXPECT(0xc6, gbc.h());
        EXPECT(0xd8, gbc.l());
        EXPECT(0x781b, gbc.sp());
        EXPECT(0x85a7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x85a5));
        EXPECT(0xa8, gbc.readMem(0x85a6));
        // CB A8 0055
        gbc.setState(0xddba, 0x3c0d, 0xee70, 0x2d61, 0x2e76, 0xad58, 0x0, 0x0);
        gbc.writeMem(0xddba, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xee, gbc.a());
        EXPECT(0xd, gbc.b());
        EXPECT(0x61, gbc.c());
        EXPECT(0x2e, gbc.d());
        EXPECT(0x76, gbc.e());
        EXPECT(0xad, gbc.h());
        EXPECT(0x58, gbc.l());
        EXPECT(0x3c0d, gbc.sp());
        EXPECT(0xddbc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xddba));
        EXPECT(0xa8, gbc.readMem(0xddbb));
        // CB A8 0056
        gbc.setState(0x3f96, 0x21fb, 0x9dd0, 0x83ed, 0x114d, 0x823b, 0x0, 0x1);
        gbc.writeMem(0x3f96, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x9d, gbc.a());
        EXPECT(0x83, gbc.b());
        EXPECT(0xed, gbc.c());
        EXPECT(0x11, gbc.d());
        EXPECT(0x4d, gbc.e());
        EXPECT(0x82, gbc.h());
        EXPECT(0x3b, gbc.l());
        EXPECT(0x21fb, gbc.sp());
        EXPECT(0x3f98, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 0057
        gbc.setState(0x4e29, 0x685a, 0x8d50, 0xd2fd, 0xa51b, 0x5b26, 0x0, 0x0);
        gbc.writeMem(0x4e29, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x8d, gbc.a());
        EXPECT(0xd2, gbc.b());
        EXPECT(0xfd, gbc.c());
        EXPECT(0xa5, gbc.d());
        EXPECT(0x1b, gbc.e());
        EXPECT(0x5b, gbc.h());
        EXPECT(0x26, gbc.l());
        EXPECT(0x685a, gbc.sp());
        EXPECT(0x4e2b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 0058
        gbc.setState(0x7e64, 0xee75, 0xe9c0, 0x613f, 0x795, 0xa717, 0x1, 0x0);
        gbc.writeMem(0x7e64, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xe9, gbc.a());
        EXPECT(0x41, gbc.b());
        EXPECT(0x3f, gbc.c());
        EXPECT(0x7, gbc.d());
        EXPECT(0x95, gbc.e());
        EXPECT(0xa7, gbc.h());
        EXPECT(0x17, gbc.l());
        EXPECT(0xee75, gbc.sp());
        EXPECT(0x7e66, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 0059
        gbc.setState(0x7b18, 0xcae9, 0x77a0, 0x26c3, 0x2453, 0x7d0b, 0x1, 0x1);
        gbc.writeMem(0x7b18, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x77, gbc.a());
        EXPECT(0x6, gbc.b());
        EXPECT(0xc3, gbc.c());
        EXPECT(0x24, gbc.d());
        EXPECT(0x53, gbc.e());
        EXPECT(0x7d, gbc.h());
        EXPECT(0xb, gbc.l());
        EXPECT(0xcae9, gbc.sp());
        EXPECT(0x7b1a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 005A
        gbc.setState(0xc7bc, 0x1102, 0xf640, 0xa248, 0x1e0d, 0xc6b4, 0x1, 0x1);
        gbc.writeMem(0xc7bc, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xf6, gbc.a());
        EXPECT(0x82, gbc.b());
        EXPECT(0x48, gbc.c());
        EXPECT(0x1e, gbc.d());
        EXPECT(0xd, gbc.e());
        EXPECT(0xc6, gbc.h());
        EXPECT(0xb4, gbc.l());
        EXPECT(0x1102, gbc.sp());
        EXPECT(0xc7be, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc7bc));
        EXPECT(0xa8, gbc.readMem(0xc7bd));
        // CB A8 005B
        gbc.setState(0x3514, 0x2a7, 0xff80, 0x5f9b, 0x408e, 0x7c6d, 0x1, 0x0);
        gbc.writeMem(0x3514, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xff, gbc.a());
        EXPECT(0x5f, gbc.b());
        EXPECT(0x9b, gbc.c());
        EXPECT(0x40, gbc.d());
        EXPECT(0x8e, gbc.e());
        EXPECT(0x7c, gbc.h());
        EXPECT(0x6d, gbc.l());
        EXPECT(0x2a7, gbc.sp());
        EXPECT(0x3516, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 005D
        gbc.setState(0xe03b, 0xc309, 0x6b00, 0xc52f, 0x29a4, 0xfb8d, 0x1, 0x1);
        gbc.writeMem(0xe03b, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x6b, gbc.a());
        EXPECT(0xc5, gbc.b());
        EXPECT(0x2f, gbc.c());
        EXPECT(0x29, gbc.d());
        EXPECT(0xa4, gbc.e());
        EXPECT(0xfb, gbc.h());
        EXPECT(0x8d, gbc.l());
        EXPECT(0xc309, gbc.sp());
        EXPECT(0xe03d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe03b));
        EXPECT(0xa8, gbc.readMem(0xe03c));
        // CB A8 005E
        gbc.setState(0x13c, 0x8338, 0xb850, 0x32bf, 0x8dec, 0xf545, 0x0, 0x1);
        gbc.writeMem(0x13c, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xb8, gbc.a());
        EXPECT(0x12, gbc.b());
        EXPECT(0xbf, gbc.c());
        EXPECT(0x8d, gbc.d());
        EXPECT(0xec, gbc.e());
        EXPECT(0xf5, gbc.h());
        EXPECT(0x45, gbc.l());
        EXPECT(0x8338, gbc.sp());
        EXPECT(0x13e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 005F
        gbc.setState(0x603e, 0xdaa9, 0x2020, 0x2690, 0xddc, 0xf9a6, 0x0, 0x1);
        gbc.writeMem(0x603e, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x20, gbc.a());
        EXPECT(0x6, gbc.b());
        EXPECT(0x90, gbc.c());
        EXPECT(0xd, gbc.d());
        EXPECT(0xdc, gbc.e());
        EXPECT(0xf9, gbc.h());
        EXPECT(0xa6, gbc.l());
        EXPECT(0xdaa9, gbc.sp());
        EXPECT(0x6040, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 0060
        gbc.setState(0x4a9, 0x356f, 0x50f0, 0xd5c1, 0x5ffb, 0x1e58, 0x0, 0x0);
        gbc.writeMem(0x4a9, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x50, gbc.a());
        EXPECT(0xd5, gbc.b());
        EXPECT(0xc1, gbc.c());
        EXPECT(0x5f, gbc.d());
        EXPECT(0xfb, gbc.e());
        EXPECT(0x1e, gbc.h());
        EXPECT(0x58, gbc.l());
        EXPECT(0x356f, gbc.sp());
        EXPECT(0x4ab, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 0061
        gbc.setState(0x81c, 0x827f, 0x1d20, 0x19d8, 0x990, 0xf541, 0x1, 0x0);
        gbc.writeMem(0x81c, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x1d, gbc.a());
        EXPECT(0x19, gbc.b());
        EXPECT(0xd8, gbc.c());
        EXPECT(0x9, gbc.d());
        EXPECT(0x90, gbc.e());
        EXPECT(0xf5, gbc.h());
        EXPECT(0x41, gbc.l());
        EXPECT(0x827f, gbc.sp());
        EXPECT(0x81e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 0062
        gbc.setState(0x5ac0, 0xbc88, 0x3550, 0x1e04, 0xcc65, 0x54ce, 0x1, 0x1);
        gbc.writeMem(0x5ac0, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x35, gbc.a());
        EXPECT(0x1e, gbc.b());
        EXPECT(0x4, gbc.c());
        EXPECT(0xcc, gbc.d());
        EXPECT(0x65, gbc.e());
        EXPECT(0x54, gbc.h());
        EXPECT(0xce, gbc.l());
        EXPECT(0xbc88, gbc.sp());
        EXPECT(0x5ac2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 0063
        gbc.setState(0x9f8e, 0x104c, 0x87f0, 0x6deb, 0xb73c, 0x67cc, 0x1, 0x1);
        gbc.writeMem(0x9f8e, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x87, gbc.a());
        EXPECT(0x4d, gbc.b());
        EXPECT(0xeb, gbc.c());
        EXPECT(0xb7, gbc.d());
        EXPECT(0x3c, gbc.e());
        EXPECT(0x67, gbc.h());
        EXPECT(0xcc, gbc.l());
        EXPECT(0x104c, gbc.sp());
        EXPECT(0x9f90, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9f8e));
        EXPECT(0xa8, gbc.readMem(0x9f8f));
        // CB A8 0064
        gbc.setState(0x6b40, 0xcc78, 0x66b0, 0xa05c, 0x21ce, 0xc021, 0x1, 0x0);
        gbc.writeMem(0x6b40, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x66, gbc.a());
        EXPECT(0x80, gbc.b());
        EXPECT(0x5c, gbc.c());
        EXPECT(0x21, gbc.d());
        EXPECT(0xce, gbc.e());
        EXPECT(0xc0, gbc.h());
        EXPECT(0x21, gbc.l());
        EXPECT(0xcc78, gbc.sp());
        EXPECT(0x6b42, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 0065
        gbc.setState(0x7fce, 0xdab3, 0x2440, 0x8dfc, 0x34c1, 0xfaaa, 0x1, 0x1);
        gbc.writeMem(0x7fce, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x24, gbc.a());
        EXPECT(0x8d, gbc.b());
        EXPECT(0xfc, gbc.c());
        EXPECT(0x34, gbc.d());
        EXPECT(0xc1, gbc.e());
        EXPECT(0xfa, gbc.h());
        EXPECT(0xaa, gbc.l());
        EXPECT(0xdab3, gbc.sp());
        EXPECT(0x7fd0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 0066
        gbc.setState(0xe38e, 0x34e9, 0x7060, 0xf955, 0xf91a, 0xaf69, 0x1, 0x0);
        gbc.writeMem(0xe38e, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x70, gbc.a());
        EXPECT(0xd9, gbc.b());
        EXPECT(0x55, gbc.c());
        EXPECT(0xf9, gbc.d());
        EXPECT(0x1a, gbc.e());
        EXPECT(0xaf, gbc.h());
        EXPECT(0x69, gbc.l());
        EXPECT(0x34e9, gbc.sp());
        EXPECT(0xe390, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe38e));
        EXPECT(0xa8, gbc.readMem(0xe38f));
        // CB A8 0067
        gbc.setState(0x93fd, 0x3d93, 0x3fc0, 0x92fc, 0x974d, 0xb064, 0x1, 0x1);
        gbc.writeMem(0x93fd, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x3f, gbc.a());
        EXPECT(0x92, gbc.b());
        EXPECT(0xfc, gbc.c());
        EXPECT(0x97, gbc.d());
        EXPECT(0x4d, gbc.e());
        EXPECT(0xb0, gbc.h());
        EXPECT(0x64, gbc.l());
        EXPECT(0x3d93, gbc.sp());
        EXPECT(0x93ff, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x93fd));
        EXPECT(0xa8, gbc.readMem(0x93fe));
        // CB A8 0068
        gbc.setState(0x8bbc, 0xae9f, 0x5f50, 0x6c9f, 0xd12f, 0x8661, 0x1, 0x0);
        gbc.writeMem(0x8bbc, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x5f, gbc.a());
        EXPECT(0x4c, gbc.b());
        EXPECT(0x9f, gbc.c());
        EXPECT(0xd1, gbc.d());
        EXPECT(0x2f, gbc.e());
        EXPECT(0x86, gbc.h());
        EXPECT(0x61, gbc.l());
        EXPECT(0xae9f, gbc.sp());
        EXPECT(0x8bbe, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8bbc));
        EXPECT(0xa8, gbc.readMem(0x8bbd));
        // CB A8 0069
        gbc.setState(0xad10, 0xaae3, 0x94c0, 0x9688, 0x437c, 0x927b, 0x0, 0x0);
        gbc.writeMem(0xad10, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x94, gbc.a());
        EXPECT(0x96, gbc.b());
        EXPECT(0x88, gbc.c());
        EXPECT(0x43, gbc.d());
        EXPECT(0x7c, gbc.e());
        EXPECT(0x92, gbc.h());
        EXPECT(0x7b, gbc.l());
        EXPECT(0xaae3, gbc.sp());
        EXPECT(0xad12, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xad10));
        EXPECT(0xa8, gbc.readMem(0xad11));
        // CB A8 006A
        gbc.setState(0xc65a, 0x93e8, 0xc360, 0x73f4, 0xf8e2, 0x741d, 0x0, 0x0);
        gbc.writeMem(0xc65a, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xc3, gbc.a());
        EXPECT(0x53, gbc.b());
        EXPECT(0xf4, gbc.c());
        EXPECT(0xf8, gbc.d());
        EXPECT(0xe2, gbc.e());
        EXPECT(0x74, gbc.h());
        EXPECT(0x1d, gbc.l());
        EXPECT(0x93e8, gbc.sp());
        EXPECT(0xc65c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc65a));
        EXPECT(0xa8, gbc.readMem(0xc65b));
        // CB A8 006B
        gbc.setState(0x327f, 0x11c, 0x4550, 0x112d, 0x725e, 0x5a7, 0x0, 0x0);
        gbc.writeMem(0x327f, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x45, gbc.a());
        EXPECT(0x11, gbc.b());
        EXPECT(0x2d, gbc.c());
        EXPECT(0x72, gbc.d());
        EXPECT(0x5e, gbc.e());
        EXPECT(0x5, gbc.h());
        EXPECT(0xa7, gbc.l());
        EXPECT(0x11c, gbc.sp());
        EXPECT(0x3281, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 006C
        gbc.setState(0xc87c, 0x6864, 0x3e10, 0x895a, 0x41c6, 0x10ca, 0x1, 0x1);
        gbc.writeMem(0xc87c, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x3e, gbc.a());
        EXPECT(0x89, gbc.b());
        EXPECT(0x5a, gbc.c());
        EXPECT(0x41, gbc.d());
        EXPECT(0xc6, gbc.e());
        EXPECT(0x10, gbc.h());
        EXPECT(0xca, gbc.l());
        EXPECT(0x6864, gbc.sp());
        EXPECT(0xc87e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc87c));
        EXPECT(0xa8, gbc.readMem(0xc87d));
        // CB A8 006D
        gbc.setState(0xc5a2, 0xd6ca, 0x9f80, 0xeb75, 0xb2fe, 0xcc66, 0x1, 0x0);
        gbc.writeMem(0xc5a2, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x9f, gbc.a());
        EXPECT(0xcb, gbc.b());
        EXPECT(0x75, gbc.c());
        EXPECT(0xb2, gbc.d());
        EXPECT(0xfe, gbc.e());
        EXPECT(0xcc, gbc.h());
        EXPECT(0x66, gbc.l());
        EXPECT(0xd6ca, gbc.sp());
        EXPECT(0xc5a4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc5a2));
        EXPECT(0xa8, gbc.readMem(0xc5a3));
        // CB A8 006E
        gbc.setState(0x2e2c, 0xaff5, 0x11b0, 0xc617, 0xa9b3, 0x69f, 0x1, 0x1);
        gbc.writeMem(0x2e2c, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x11, gbc.a());
        EXPECT(0xc6, gbc.b());
        EXPECT(0x17, gbc.c());
        EXPECT(0xa9, gbc.d());
        EXPECT(0xb3, gbc.e());
        EXPECT(0x6, gbc.h());
        EXPECT(0x9f, gbc.l());
        EXPECT(0xaff5, gbc.sp());
        EXPECT(0x2e2e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 006F
        gbc.setState(0x6c01, 0x970c, 0x2460, 0x9565, 0x9938, 0xd57a, 0x1, 0x1);
        gbc.writeMem(0x6c01, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x24, gbc.a());
        EXPECT(0x95, gbc.b());
        EXPECT(0x65, gbc.c());
        EXPECT(0x99, gbc.d());
        EXPECT(0x38, gbc.e());
        EXPECT(0xd5, gbc.h());
        EXPECT(0x7a, gbc.l());
        EXPECT(0x970c, gbc.sp());
        EXPECT(0x6c03, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 0070
        gbc.setState(0x77d2, 0xb338, 0x70f0, 0x4db1, 0xbb2d, 0xfb55, 0x1, 0x1);
        gbc.writeMem(0x77d2, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x70, gbc.a());
        EXPECT(0x4d, gbc.b());
        EXPECT(0xb1, gbc.c());
        EXPECT(0xbb, gbc.d());
        EXPECT(0x2d, gbc.e());
        EXPECT(0xfb, gbc.h());
        EXPECT(0x55, gbc.l());
        EXPECT(0xb338, gbc.sp());
        EXPECT(0x77d4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 0071
        gbc.setState(0x1265, 0x2668, 0x4b70, 0x95b, 0x46e7, 0xa245, 0x0, 0x1);
        gbc.writeMem(0x1265, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x4b, gbc.a());
        EXPECT(0x9, gbc.b());
        EXPECT(0x5b, gbc.c());
        EXPECT(0x46, gbc.d());
        EXPECT(0xe7, gbc.e());
        EXPECT(0xa2, gbc.h());
        EXPECT(0x45, gbc.l());
        EXPECT(0x2668, gbc.sp());
        EXPECT(0x1267, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 0072
        gbc.setState(0x84dc, 0x64de, 0x5cc0, 0x46b5, 0x395b, 0x47cc, 0x1, 0x0);
        gbc.writeMem(0x84dc, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x5c, gbc.a());
        EXPECT(0x46, gbc.b());
        EXPECT(0xb5, gbc.c());
        EXPECT(0x39, gbc.d());
        EXPECT(0x5b, gbc.e());
        EXPECT(0x47, gbc.h());
        EXPECT(0xcc, gbc.l());
        EXPECT(0x64de, gbc.sp());
        EXPECT(0x84de, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x84dc));
        EXPECT(0xa8, gbc.readMem(0x84dd));
        // CB A8 0073
        gbc.setState(0x16e5, 0x3201, 0xbd50, 0xbe7f, 0x923e, 0xedd4, 0x1, 0x1);
        gbc.writeMem(0x16e5, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xbd, gbc.a());
        EXPECT(0x9e, gbc.b());
        EXPECT(0x7f, gbc.c());
        EXPECT(0x92, gbc.d());
        EXPECT(0x3e, gbc.e());
        EXPECT(0xed, gbc.h());
        EXPECT(0xd4, gbc.l());
        EXPECT(0x3201, gbc.sp());
        EXPECT(0x16e7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 0074
        gbc.setState(0xd4fa, 0x8a43, 0x94f0, 0xdef4, 0x2421, 0x7837, 0x0, 0x0);
        gbc.writeMem(0xd4fa, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x94, gbc.a());
        EXPECT(0xde, gbc.b());
        EXPECT(0xf4, gbc.c());
        EXPECT(0x24, gbc.d());
        EXPECT(0x21, gbc.e());
        EXPECT(0x78, gbc.h());
        EXPECT(0x37, gbc.l());
        EXPECT(0x8a43, gbc.sp());
        EXPECT(0xd4fc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd4fa));
        EXPECT(0xa8, gbc.readMem(0xd4fb));
        // CB A8 0075
        gbc.setState(0x35f7, 0x7b32, 0x46c0, 0x3df, 0xf7f, 0xe9b5, 0x0, 0x1);
        gbc.writeMem(0x35f7, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x46, gbc.a());
        EXPECT(0x3, gbc.b());
        EXPECT(0xdf, gbc.c());
        EXPECT(0xf, gbc.d());
        EXPECT(0x7f, gbc.e());
        EXPECT(0xe9, gbc.h());
        EXPECT(0xb5, gbc.l());
        EXPECT(0x7b32, gbc.sp());
        EXPECT(0x35f9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 0076
        gbc.setState(0x76e5, 0x98ca, 0x7de0, 0xd4a2, 0xec73, 0x5e39, 0x0, 0x1);
        gbc.writeMem(0x76e5, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x7d, gbc.a());
        EXPECT(0xd4, gbc.b());
        EXPECT(0xa2, gbc.c());
        EXPECT(0xec, gbc.d());
        EXPECT(0x73, gbc.e());
        EXPECT(0x5e, gbc.h());
        EXPECT(0x39, gbc.l());
        EXPECT(0x98ca, gbc.sp());
        EXPECT(0x76e7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 0077
        gbc.setState(0xb4bb, 0x1a9b, 0x9a30, 0x2b97, 0xa7ad, 0x79dc, 0x0, 0x1);
        gbc.writeMem(0xb4bb, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x9a, gbc.a());
        EXPECT(0xb, gbc.b());
        EXPECT(0x97, gbc.c());
        EXPECT(0xa7, gbc.d());
        EXPECT(0xad, gbc.e());
        EXPECT(0x79, gbc.h());
        EXPECT(0xdc, gbc.l());
        EXPECT(0x1a9b, gbc.sp());
        EXPECT(0xb4bd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb4bb));
        EXPECT(0xa8, gbc.readMem(0xb4bc));
        // CB A8 0078
        gbc.setState(0x76c2, 0xa9fd, 0x9740, 0x2d28, 0x6f8e, 0xcf45, 0x0, 0x0);
        gbc.writeMem(0x76c2, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x97, gbc.a());
        EXPECT(0xd, gbc.b());
        EXPECT(0x28, gbc.c());
        EXPECT(0x6f, gbc.d());
        EXPECT(0x8e, gbc.e());
        EXPECT(0xcf, gbc.h());
        EXPECT(0x45, gbc.l());
        EXPECT(0xa9fd, gbc.sp());
        EXPECT(0x76c4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 0079
        gbc.setState(0xc1b2, 0xd87f, 0x85a0, 0x27c4, 0x2d72, 0x349f, 0x0, 0x1);
        gbc.writeMem(0xc1b2, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x85, gbc.a());
        EXPECT(0x7, gbc.b());
        EXPECT(0xc4, gbc.c());
        EXPECT(0x2d, gbc.d());
        EXPECT(0x72, gbc.e());
        EXPECT(0x34, gbc.h());
        EXPECT(0x9f, gbc.l());
        EXPECT(0xd87f, gbc.sp());
        EXPECT(0xc1b4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc1b2));
        EXPECT(0xa8, gbc.readMem(0xc1b3));
        // CB A8 007A
        gbc.setState(0xca0a, 0xdbfb, 0x4730, 0xaff8, 0x3488, 0x3fa5, 0x1, 0x0);
        gbc.writeMem(0xca0a, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x47, gbc.a());
        EXPECT(0x8f, gbc.b());
        EXPECT(0xf8, gbc.c());
        EXPECT(0x34, gbc.d());
        EXPECT(0x88, gbc.e());
        EXPECT(0x3f, gbc.h());
        EXPECT(0xa5, gbc.l());
        EXPECT(0xdbfb, gbc.sp());
        EXPECT(0xca0c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xca0a));
        EXPECT(0xa8, gbc.readMem(0xca0b));
        // CB A8 007B
        gbc.setState(0x684e, 0x8492, 0x79d0, 0x6e84, 0x8e73, 0xb881, 0x1, 0x1);
        gbc.writeMem(0x684e, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x79, gbc.a());
        EXPECT(0x4e, gbc.b());
        EXPECT(0x84, gbc.c());
        EXPECT(0x8e, gbc.d());
        EXPECT(0x73, gbc.e());
        EXPECT(0xb8, gbc.h());
        EXPECT(0x81, gbc.l());
        EXPECT(0x8492, gbc.sp());
        EXPECT(0x6850, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 007C
        gbc.setState(0x46f4, 0xf2f6, 0x8640, 0x6727, 0x8e2a, 0x2088, 0x1, 0x0);
        gbc.writeMem(0x46f4, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x86, gbc.a());
        EXPECT(0x47, gbc.b());
        EXPECT(0x27, gbc.c());
        EXPECT(0x8e, gbc.d());
        EXPECT(0x2a, gbc.e());
        EXPECT(0x20, gbc.h());
        EXPECT(0x88, gbc.l());
        EXPECT(0xf2f6, gbc.sp());
        EXPECT(0x46f6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 007D
        gbc.setState(0x52f9, 0x9b4, 0xabb0, 0x50e7, 0x5c6, 0x272a, 0x1, 0x1);
        gbc.writeMem(0x52f9, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xab, gbc.a());
        EXPECT(0x50, gbc.b());
        EXPECT(0xe7, gbc.c());
        EXPECT(0x5, gbc.d());
        EXPECT(0xc6, gbc.e());
        EXPECT(0x27, gbc.h());
        EXPECT(0x2a, gbc.l());
        EXPECT(0x9b4, gbc.sp());
        EXPECT(0x52fb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 007E
        gbc.setState(0xf65, 0x4ed8, 0x180, 0xd822, 0x8874, 0xab4d, 0x1, 0x0);
        gbc.writeMem(0xf65, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x1, gbc.a());
        EXPECT(0xd8, gbc.b());
        EXPECT(0x22, gbc.c());
        EXPECT(0x88, gbc.d());
        EXPECT(0x74, gbc.e());
        EXPECT(0xab, gbc.h());
        EXPECT(0x4d, gbc.l());
        EXPECT(0x4ed8, gbc.sp());
        EXPECT(0xf67, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 007F
        gbc.setState(0x1b66, 0x877a, 0x3290, 0x8848, 0x6821, 0xe3af, 0x1, 0x0);
        gbc.writeMem(0x1b66, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x32, gbc.a());
        EXPECT(0x88, gbc.b());
        EXPECT(0x48, gbc.c());
        EXPECT(0x68, gbc.d());
        EXPECT(0x21, gbc.e());
        EXPECT(0xe3, gbc.h());
        EXPECT(0xaf, gbc.l());
        EXPECT(0x877a, gbc.sp());
        EXPECT(0x1b68, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 0080
        gbc.setState(0x7227, 0xaad8, 0x1a60, 0x32bc, 0x455e, 0x2ead, 0x0, 0x0);
        gbc.writeMem(0x7227, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x1a, gbc.a());
        EXPECT(0x12, gbc.b());
        EXPECT(0xbc, gbc.c());
        EXPECT(0x45, gbc.d());
        EXPECT(0x5e, gbc.e());
        EXPECT(0x2e, gbc.h());
        EXPECT(0xad, gbc.l());
        EXPECT(0xaad8, gbc.sp());
        EXPECT(0x7229, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 0081
        gbc.setState(0xa4c3, 0xf85e, 0x7d30, 0xd80a, 0xcfcf, 0x4a6f, 0x0, 0x0);
        gbc.writeMem(0xa4c3, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x7d, gbc.a());
        EXPECT(0xd8, gbc.b());
        EXPECT(0xa, gbc.c());
        EXPECT(0xcf, gbc.d());
        EXPECT(0xcf, gbc.e());
        EXPECT(0x4a, gbc.h());
        EXPECT(0x6f, gbc.l());
        EXPECT(0xf85e, gbc.sp());
        EXPECT(0xa4c5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa4c3));
        EXPECT(0xa8, gbc.readMem(0xa4c4));
        // CB A8 0082
        gbc.setState(0x8aa5, 0x830e, 0x21d0, 0x1b3d, 0xd1a1, 0x19a0, 0x1, 0x1);
        gbc.writeMem(0x8aa5, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x21, gbc.a());
        EXPECT(0x1b, gbc.b());
        EXPECT(0x3d, gbc.c());
        EXPECT(0xd1, gbc.d());
        EXPECT(0xa1, gbc.e());
        EXPECT(0x19, gbc.h());
        EXPECT(0xa0, gbc.l());
        EXPECT(0x830e, gbc.sp());
        EXPECT(0x8aa7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8aa5));
        EXPECT(0xa8, gbc.readMem(0x8aa6));
        // CB A8 0083
        gbc.setState(0xe679, 0x797e, 0xe3e0, 0x7db9, 0x3a55, 0xb542, 0x1, 0x0);
        gbc.writeMem(0xe679, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xe3, gbc.a());
        EXPECT(0x5d, gbc.b());
        EXPECT(0xb9, gbc.c());
        EXPECT(0x3a, gbc.d());
        EXPECT(0x55, gbc.e());
        EXPECT(0xb5, gbc.h());
        EXPECT(0x42, gbc.l());
        EXPECT(0x797e, gbc.sp());
        EXPECT(0xe67b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe679));
        EXPECT(0xa8, gbc.readMem(0xe67a));
        // CB A8 0084
        gbc.setState(0xa220, 0x6cba, 0xce30, 0x4f69, 0x7ff0, 0x455b, 0x1, 0x0);
        gbc.writeMem(0xa220, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xce, gbc.a());
        EXPECT(0x4f, gbc.b());
        EXPECT(0x69, gbc.c());
        EXPECT(0x7f, gbc.d());
        EXPECT(0xf0, gbc.e());
        EXPECT(0x45, gbc.h());
        EXPECT(0x5b, gbc.l());
        EXPECT(0x6cba, gbc.sp());
        EXPECT(0xa222, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa220));
        EXPECT(0xa8, gbc.readMem(0xa221));
        // CB A8 0085
        gbc.setState(0xadf0, 0x8ed1, 0x1900, 0x1b8c, 0x8667, 0x3ba5, 0x1, 0x1);
        gbc.writeMem(0xadf0, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x19, gbc.a());
        EXPECT(0x1b, gbc.b());
        EXPECT(0x8c, gbc.c());
        EXPECT(0x86, gbc.d());
        EXPECT(0x67, gbc.e());
        EXPECT(0x3b, gbc.h());
        EXPECT(0xa5, gbc.l());
        EXPECT(0x8ed1, gbc.sp());
        EXPECT(0xadf2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xadf0));
        EXPECT(0xa8, gbc.readMem(0xadf1));
        // CB A8 0086
        gbc.setState(0x876c, 0x1b58, 0xcf90, 0x26, 0xac31, 0x2947, 0x1, 0x0);
        gbc.writeMem(0x876c, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xcf, gbc.a());
        EXPECT(0x0, gbc.b());
        EXPECT(0x26, gbc.c());
        EXPECT(0xac, gbc.d());
        EXPECT(0x31, gbc.e());
        EXPECT(0x29, gbc.h());
        EXPECT(0x47, gbc.l());
        EXPECT(0x1b58, gbc.sp());
        EXPECT(0x876e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x876c));
        EXPECT(0xa8, gbc.readMem(0x876d));
        // CB A8 0087
        gbc.setState(0xdd8b, 0xc699, 0x7ad0, 0x1275, 0x13f5, 0x1973, 0x1, 0x0);
        gbc.writeMem(0xdd8b, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x7a, gbc.a());
        EXPECT(0x12, gbc.b());
        EXPECT(0x75, gbc.c());
        EXPECT(0x13, gbc.d());
        EXPECT(0xf5, gbc.e());
        EXPECT(0x19, gbc.h());
        EXPECT(0x73, gbc.l());
        EXPECT(0xc699, gbc.sp());
        EXPECT(0xdd8d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdd8b));
        EXPECT(0xa8, gbc.readMem(0xdd8c));
        // CB A8 0089
        gbc.setState(0x56e5, 0xfc4, 0x12e0, 0x579b, 0xee78, 0xff43, 0x0, 0x0);
        gbc.writeMem(0x56e5, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x12, gbc.a());
        EXPECT(0x57, gbc.b());
        EXPECT(0x9b, gbc.c());
        EXPECT(0xee, gbc.d());
        EXPECT(0x78, gbc.e());
        EXPECT(0xff, gbc.h());
        EXPECT(0x43, gbc.l());
        EXPECT(0xfc4, gbc.sp());
        EXPECT(0x56e7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 008A
        gbc.setState(0x82fd, 0x58dd, 0xbd30, 0x5b48, 0xf3a6, 0x80bc, 0x1, 0x0);
        gbc.writeMem(0x82fd, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xbd, gbc.a());
        EXPECT(0x5b, gbc.b());
        EXPECT(0x48, gbc.c());
        EXPECT(0xf3, gbc.d());
        EXPECT(0xa6, gbc.e());
        EXPECT(0x80, gbc.h());
        EXPECT(0xbc, gbc.l());
        EXPECT(0x58dd, gbc.sp());
        EXPECT(0x82ff, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x82fd));
        EXPECT(0xa8, gbc.readMem(0x82fe));
        // CB A8 008B
        gbc.setState(0xba54, 0xcd30, 0xbdc0, 0x5319, 0x5846, 0x6b79, 0x0, 0x0);
        gbc.writeMem(0xba54, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xbd, gbc.a());
        EXPECT(0x53, gbc.b());
        EXPECT(0x19, gbc.c());
        EXPECT(0x58, gbc.d());
        EXPECT(0x46, gbc.e());
        EXPECT(0x6b, gbc.h());
        EXPECT(0x79, gbc.l());
        EXPECT(0xcd30, gbc.sp());
        EXPECT(0xba56, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xba54));
        EXPECT(0xa8, gbc.readMem(0xba55));
        // CB A8 008C
        gbc.setState(0xc74e, 0xa49d, 0x8350, 0x1020, 0xb4e8, 0xf621, 0x0, 0x1);
        gbc.writeMem(0xc74e, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x83, gbc.a());
        EXPECT(0x10, gbc.b());
        EXPECT(0x20, gbc.c());
        EXPECT(0xb4, gbc.d());
        EXPECT(0xe8, gbc.e());
        EXPECT(0xf6, gbc.h());
        EXPECT(0x21, gbc.l());
        EXPECT(0xa49d, gbc.sp());
        EXPECT(0xc750, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc74e));
        EXPECT(0xa8, gbc.readMem(0xc74f));
        // CB A8 008D
        gbc.setState(0xe34a, 0xfd1, 0x9af0, 0x6834, 0x29b5, 0x8e64, 0x1, 0x1);
        gbc.writeMem(0xe34a, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x9a, gbc.a());
        EXPECT(0x48, gbc.b());
        EXPECT(0x34, gbc.c());
        EXPECT(0x29, gbc.d());
        EXPECT(0xb5, gbc.e());
        EXPECT(0x8e, gbc.h());
        EXPECT(0x64, gbc.l());
        EXPECT(0xfd1, gbc.sp());
        EXPECT(0xe34c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe34a));
        EXPECT(0xa8, gbc.readMem(0xe34b));
        // CB A8 008E
        gbc.setState(0xdf28, 0xcc02, 0x8e0, 0x5284, 0xf4c9, 0xf90f, 0x0, 0x0);
        gbc.writeMem(0xdf28, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x8, gbc.a());
        EXPECT(0x52, gbc.b());
        EXPECT(0x84, gbc.c());
        EXPECT(0xf4, gbc.d());
        EXPECT(0xc9, gbc.e());
        EXPECT(0xf9, gbc.h());
        EXPECT(0xf, gbc.l());
        EXPECT(0xcc02, gbc.sp());
        EXPECT(0xdf2a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdf28));
        EXPECT(0xa8, gbc.readMem(0xdf29));
        // CB A8 008F
        gbc.setState(0x3e3f, 0x8350, 0xc0b0, 0xbcb9, 0x5b0f, 0x606b, 0x0, 0x1);
        gbc.writeMem(0x3e3f, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xc0, gbc.a());
        EXPECT(0x9c, gbc.b());
        EXPECT(0xb9, gbc.c());
        EXPECT(0x5b, gbc.d());
        EXPECT(0xf, gbc.e());
        EXPECT(0x60, gbc.h());
        EXPECT(0x6b, gbc.l());
        EXPECT(0x8350, gbc.sp());
        EXPECT(0x3e41, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 0090
        gbc.setState(0xbdec, 0x190a, 0x6e50, 0xcac8, 0x35e8, 0xebe5, 0x1, 0x1);
        gbc.writeMem(0xbdec, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x6e, gbc.a());
        EXPECT(0xca, gbc.b());
        EXPECT(0xc8, gbc.c());
        EXPECT(0x35, gbc.d());
        EXPECT(0xe8, gbc.e());
        EXPECT(0xeb, gbc.h());
        EXPECT(0xe5, gbc.l());
        EXPECT(0x190a, gbc.sp());
        EXPECT(0xbdee, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbdec));
        EXPECT(0xa8, gbc.readMem(0xbded));
        // CB A8 0091
        gbc.setState(0xee24, 0x9595, 0x24b0, 0xb67, 0xc378, 0x2784, 0x0, 0x0);
        gbc.writeMem(0xee24, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x24, gbc.a());
        EXPECT(0xb, gbc.b());
        EXPECT(0x67, gbc.c());
        EXPECT(0xc3, gbc.d());
        EXPECT(0x78, gbc.e());
        EXPECT(0x27, gbc.h());
        EXPECT(0x84, gbc.l());
        EXPECT(0x9595, gbc.sp());
        EXPECT(0xee26, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xee24));
        EXPECT(0xa8, gbc.readMem(0xee25));
        // CB A8 0092
        gbc.setState(0x44de, 0xb4e8, 0x4fd0, 0xa908, 0xd681, 0x9a5a, 0x1, 0x0);
        gbc.writeMem(0x44de, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x4f, gbc.a());
        EXPECT(0x89, gbc.b());
        EXPECT(0x8, gbc.c());
        EXPECT(0xd6, gbc.d());
        EXPECT(0x81, gbc.e());
        EXPECT(0x9a, gbc.h());
        EXPECT(0x5a, gbc.l());
        EXPECT(0xb4e8, gbc.sp());
        EXPECT(0x44e0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 0093
        gbc.setState(0x951c, 0xbfe7, 0xd670, 0xa3, 0xbb9c, 0x9c7c, 0x1, 0x0);
        gbc.writeMem(0x951c, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xd6, gbc.a());
        EXPECT(0x0, gbc.b());
        EXPECT(0xa3, gbc.c());
        EXPECT(0xbb, gbc.d());
        EXPECT(0x9c, gbc.e());
        EXPECT(0x9c, gbc.h());
        EXPECT(0x7c, gbc.l());
        EXPECT(0xbfe7, gbc.sp());
        EXPECT(0x951e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x951c));
        EXPECT(0xa8, gbc.readMem(0x951d));
        // CB A8 0094
        gbc.setState(0x4a50, 0x7739, 0x95f0, 0x5cd8, 0xacde, 0x1599, 0x0, 0x1);
        gbc.writeMem(0x4a50, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x95, gbc.a());
        EXPECT(0x5c, gbc.b());
        EXPECT(0xd8, gbc.c());
        EXPECT(0xac, gbc.d());
        EXPECT(0xde, gbc.e());
        EXPECT(0x15, gbc.h());
        EXPECT(0x99, gbc.l());
        EXPECT(0x7739, gbc.sp());
        EXPECT(0x4a52, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 0095
        gbc.setState(0x8e3, 0x6c4d, 0x36c0, 0xad74, 0x6659, 0xf15e, 0x1, 0x1);
        gbc.writeMem(0x8e3, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x36, gbc.a());
        EXPECT(0x8d, gbc.b());
        EXPECT(0x74, gbc.c());
        EXPECT(0x66, gbc.d());
        EXPECT(0x59, gbc.e());
        EXPECT(0xf1, gbc.h());
        EXPECT(0x5e, gbc.l());
        EXPECT(0x6c4d, gbc.sp());
        EXPECT(0x8e5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 0096
        gbc.setState(0xd44f, 0x311b, 0x3c30, 0xad8a, 0x8d9e, 0x39fa, 0x0, 0x1);
        gbc.writeMem(0xd44f, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x3c, gbc.a());
        EXPECT(0x8d, gbc.b());
        EXPECT(0x8a, gbc.c());
        EXPECT(0x8d, gbc.d());
        EXPECT(0x9e, gbc.e());
        EXPECT(0x39, gbc.h());
        EXPECT(0xfa, gbc.l());
        EXPECT(0x311b, gbc.sp());
        EXPECT(0xd451, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd44f));
        EXPECT(0xa8, gbc.readMem(0xd450));
        // CB A8 0098
        gbc.setState(0xb947, 0xe1a7, 0xfa80, 0xc2a6, 0x5b39, 0xcf38, 0x0, 0x0);
        gbc.writeMem(0xb947, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xfa, gbc.a());
        EXPECT(0xc2, gbc.b());
        EXPECT(0xa6, gbc.c());
        EXPECT(0x5b, gbc.d());
        EXPECT(0x39, gbc.e());
        EXPECT(0xcf, gbc.h());
        EXPECT(0x38, gbc.l());
        EXPECT(0xe1a7, gbc.sp());
        EXPECT(0xb949, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb947));
        EXPECT(0xa8, gbc.readMem(0xb948));
        // CB A8 0099
        gbc.setState(0xb3f4, 0xa2fb, 0xb530, 0xa66, 0x5cae, 0xca2e, 0x1, 0x1);
        gbc.writeMem(0xb3f4, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xb5, gbc.a());
        EXPECT(0xa, gbc.b());
        EXPECT(0x66, gbc.c());
        EXPECT(0x5c, gbc.d());
        EXPECT(0xae, gbc.e());
        EXPECT(0xca, gbc.h());
        EXPECT(0x2e, gbc.l());
        EXPECT(0xa2fb, gbc.sp());
        EXPECT(0xb3f6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb3f4));
        EXPECT(0xa8, gbc.readMem(0xb3f5));
        // CB A8 009A
        gbc.setState(0xb20d, 0x9676, 0x53b0, 0xbb84, 0x68a3, 0xa74c, 0x0, 0x1);
        gbc.writeMem(0xb20d, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x53, gbc.a());
        EXPECT(0x9b, gbc.b());
        EXPECT(0x84, gbc.c());
        EXPECT(0x68, gbc.d());
        EXPECT(0xa3, gbc.e());
        EXPECT(0xa7, gbc.h());
        EXPECT(0x4c, gbc.l());
        EXPECT(0x9676, gbc.sp());
        EXPECT(0xb20f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb20d));
        EXPECT(0xa8, gbc.readMem(0xb20e));
        // CB A8 009B
        gbc.setState(0x183d, 0x208a, 0xe140, 0xc422, 0xf5c6, 0x5154, 0x0, 0x1);
        gbc.writeMem(0x183d, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xe1, gbc.a());
        EXPECT(0xc4, gbc.b());
        EXPECT(0x22, gbc.c());
        EXPECT(0xf5, gbc.d());
        EXPECT(0xc6, gbc.e());
        EXPECT(0x51, gbc.h());
        EXPECT(0x54, gbc.l());
        EXPECT(0x208a, gbc.sp());
        EXPECT(0x183f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 009C
        gbc.setState(0x445d, 0xeace, 0x880, 0xdb7e, 0x4f27, 0xc0d6, 0x0, 0x1);
        gbc.writeMem(0x445d, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x8, gbc.a());
        EXPECT(0xdb, gbc.b());
        EXPECT(0x7e, gbc.c());
        EXPECT(0x4f, gbc.d());
        EXPECT(0x27, gbc.e());
        EXPECT(0xc0, gbc.h());
        EXPECT(0xd6, gbc.l());
        EXPECT(0xeace, gbc.sp());
        EXPECT(0x445f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 009D
        gbc.setState(0xbc61, 0xc934, 0x36a0, 0x5d24, 0xe5f7, 0xd5d5, 0x1, 0x1);
        gbc.writeMem(0xbc61, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x36, gbc.a());
        EXPECT(0x5d, gbc.b());
        EXPECT(0x24, gbc.c());
        EXPECT(0xe5, gbc.d());
        EXPECT(0xf7, gbc.e());
        EXPECT(0xd5, gbc.h());
        EXPECT(0xd5, gbc.l());
        EXPECT(0xc934, gbc.sp());
        EXPECT(0xbc63, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbc61));
        EXPECT(0xa8, gbc.readMem(0xbc62));
        // CB A8 009E
        gbc.setState(0xc9d1, 0x34e0, 0x1650, 0x830e, 0x3030, 0x53ea, 0x0, 0x0);
        gbc.writeMem(0xc9d1, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x16, gbc.a());
        EXPECT(0x83, gbc.b());
        EXPECT(0xe, gbc.c());
        EXPECT(0x30, gbc.d());
        EXPECT(0x30, gbc.e());
        EXPECT(0x53, gbc.h());
        EXPECT(0xea, gbc.l());
        EXPECT(0x34e0, gbc.sp());
        EXPECT(0xc9d3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc9d1));
        EXPECT(0xa8, gbc.readMem(0xc9d2));
        // CB A8 009F
        gbc.setState(0xd4a7, 0xd018, 0xd0d0, 0x78f3, 0x7d9f, 0x3a94, 0x0, 0x0);
        gbc.writeMem(0xd4a7, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xd0, gbc.a());
        EXPECT(0x58, gbc.b());
        EXPECT(0xf3, gbc.c());
        EXPECT(0x7d, gbc.d());
        EXPECT(0x9f, gbc.e());
        EXPECT(0x3a, gbc.h());
        EXPECT(0x94, gbc.l());
        EXPECT(0xd018, gbc.sp());
        EXPECT(0xd4a9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd4a7));
        EXPECT(0xa8, gbc.readMem(0xd4a8));
        // CB A8 00A0
        gbc.setState(0xcf7, 0x6399, 0x9780, 0x9e04, 0xece7, 0xb298, 0x1, 0x0);
        gbc.writeMem(0xcf7, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x97, gbc.a());
        EXPECT(0x9e, gbc.b());
        EXPECT(0x4, gbc.c());
        EXPECT(0xec, gbc.d());
        EXPECT(0xe7, gbc.e());
        EXPECT(0xb2, gbc.h());
        EXPECT(0x98, gbc.l());
        EXPECT(0x6399, gbc.sp());
        EXPECT(0xcf9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 00A1
        gbc.setState(0x50b3, 0xb252, 0xf7f0, 0x53a7, 0x8931, 0x213f, 0x1, 0x1);
        gbc.writeMem(0x50b3, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xf7, gbc.a());
        EXPECT(0x53, gbc.b());
        EXPECT(0xa7, gbc.c());
        EXPECT(0x89, gbc.d());
        EXPECT(0x31, gbc.e());
        EXPECT(0x21, gbc.h());
        EXPECT(0x3f, gbc.l());
        EXPECT(0xb252, gbc.sp());
        EXPECT(0x50b5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 00A2
        gbc.setState(0x3b3d, 0xef1a, 0xcc20, 0xd818, 0x14a8, 0xe996, 0x0, 0x1);
        gbc.writeMem(0x3b3d, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xcc, gbc.a());
        EXPECT(0xd8, gbc.b());
        EXPECT(0x18, gbc.c());
        EXPECT(0x14, gbc.d());
        EXPECT(0xa8, gbc.e());
        EXPECT(0xe9, gbc.h());
        EXPECT(0x96, gbc.l());
        EXPECT(0xef1a, gbc.sp());
        EXPECT(0x3b3f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 00A3
        gbc.setState(0x8bba, 0xc4fe, 0xbe30, 0x93e3, 0x9ff7, 0xdbea, 0x1, 0x0);
        gbc.writeMem(0x8bba, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xbe, gbc.a());
        EXPECT(0x93, gbc.b());
        EXPECT(0xe3, gbc.c());
        EXPECT(0x9f, gbc.d());
        EXPECT(0xf7, gbc.e());
        EXPECT(0xdb, gbc.h());
        EXPECT(0xea, gbc.l());
        EXPECT(0xc4fe, gbc.sp());
        EXPECT(0x8bbc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8bba));
        EXPECT(0xa8, gbc.readMem(0x8bbb));
        // CB A8 00A4
        gbc.setState(0x7ccb, 0xbaa5, 0x13a0, 0xa393, 0xd69b, 0x256c, 0x0, 0x0);
        gbc.writeMem(0x7ccb, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x13, gbc.a());
        EXPECT(0x83, gbc.b());
        EXPECT(0x93, gbc.c());
        EXPECT(0xd6, gbc.d());
        EXPECT(0x9b, gbc.e());
        EXPECT(0x25, gbc.h());
        EXPECT(0x6c, gbc.l());
        EXPECT(0xbaa5, gbc.sp());
        EXPECT(0x7ccd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 00A5
        gbc.setState(0x6a74, 0xf8b0, 0xdb60, 0xa0e2, 0xf014, 0xd12e, 0x1, 0x0);
        gbc.writeMem(0x6a74, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xdb, gbc.a());
        EXPECT(0x80, gbc.b());
        EXPECT(0xe2, gbc.c());
        EXPECT(0xf0, gbc.d());
        EXPECT(0x14, gbc.e());
        EXPECT(0xd1, gbc.h());
        EXPECT(0x2e, gbc.l());
        EXPECT(0xf8b0, gbc.sp());
        EXPECT(0x6a76, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 00A6
        gbc.setState(0xe1e7, 0x9b3, 0x8b10, 0x163, 0x5aea, 0x3051, 0x1, 0x0);
        gbc.writeMem(0xe1e7, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x8b, gbc.a());
        EXPECT(0x1, gbc.b());
        EXPECT(0x63, gbc.c());
        EXPECT(0x5a, gbc.d());
        EXPECT(0xea, gbc.e());
        EXPECT(0x30, gbc.h());
        EXPECT(0x51, gbc.l());
        EXPECT(0x9b3, gbc.sp());
        EXPECT(0xe1e9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe1e7));
        EXPECT(0xa8, gbc.readMem(0xe1e8));
        // CB A8 00A7
        gbc.setState(0xd378, 0x97bf, 0xbd20, 0xfca, 0xaa15, 0xb3, 0x0, 0x0);
        gbc.writeMem(0xd378, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xbd, gbc.a());
        EXPECT(0xf, gbc.b());
        EXPECT(0xca, gbc.c());
        EXPECT(0xaa, gbc.d());
        EXPECT(0x15, gbc.e());
        EXPECT(0x0, gbc.h());
        EXPECT(0xb3, gbc.l());
        EXPECT(0x97bf, gbc.sp());
        EXPECT(0xd37a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd378));
        EXPECT(0xa8, gbc.readMem(0xd379));
        // CB A8 00A8
        gbc.setState(0xc05c, 0x83f2, 0x4e0, 0x1a9, 0x4a83, 0xf622, 0x0, 0x0);
        gbc.writeMem(0xc05c, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x4, gbc.a());
        EXPECT(0x1, gbc.b());
        EXPECT(0xa9, gbc.c());
        EXPECT(0x4a, gbc.d());
        EXPECT(0x83, gbc.e());
        EXPECT(0xf6, gbc.h());
        EXPECT(0x22, gbc.l());
        EXPECT(0x83f2, gbc.sp());
        EXPECT(0xc05e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc05c));
        EXPECT(0xa8, gbc.readMem(0xc05d));
        // CB A8 00A9
        gbc.setState(0xb9b3, 0xc756, 0xbd50, 0xca67, 0x2f80, 0x8d14, 0x0, 0x0);
        gbc.writeMem(0xb9b3, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xbd, gbc.a());
        EXPECT(0xca, gbc.b());
        EXPECT(0x67, gbc.c());
        EXPECT(0x2f, gbc.d());
        EXPECT(0x80, gbc.e());
        EXPECT(0x8d, gbc.h());
        EXPECT(0x14, gbc.l());
        EXPECT(0xc756, gbc.sp());
        EXPECT(0xb9b5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb9b3));
        EXPECT(0xa8, gbc.readMem(0xb9b4));
        // CB A8 00AB
        gbc.setState(0x4f10, 0xf74f, 0xcfe0, 0x9e8d, 0x2da2, 0x87eb, 0x1, 0x1);
        gbc.writeMem(0x4f10, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xcf, gbc.a());
        EXPECT(0x9e, gbc.b());
        EXPECT(0x8d, gbc.c());
        EXPECT(0x2d, gbc.d());
        EXPECT(0xa2, gbc.e());
        EXPECT(0x87, gbc.h());
        EXPECT(0xeb, gbc.l());
        EXPECT(0xf74f, gbc.sp());
        EXPECT(0x4f12, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 00AC
        gbc.setState(0xe341, 0xbcad, 0x2470, 0x51c, 0xbe12, 0x5707, 0x1, 0x0);
        gbc.writeMem(0xe341, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x24, gbc.a());
        EXPECT(0x5, gbc.b());
        EXPECT(0x1c, gbc.c());
        EXPECT(0xbe, gbc.d());
        EXPECT(0x12, gbc.e());
        EXPECT(0x57, gbc.h());
        EXPECT(0x7, gbc.l());
        EXPECT(0xbcad, gbc.sp());
        EXPECT(0xe343, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe341));
        EXPECT(0xa8, gbc.readMem(0xe342));
        // CB A8 00AD
        gbc.setState(0xdbee, 0xf302, 0x1100, 0x348, 0xd49d, 0x348b, 0x1, 0x1);
        gbc.writeMem(0xdbee, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x11, gbc.a());
        EXPECT(0x3, gbc.b());
        EXPECT(0x48, gbc.c());
        EXPECT(0xd4, gbc.d());
        EXPECT(0x9d, gbc.e());
        EXPECT(0x34, gbc.h());
        EXPECT(0x8b, gbc.l());
        EXPECT(0xf302, gbc.sp());
        EXPECT(0xdbf0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdbee));
        EXPECT(0xa8, gbc.readMem(0xdbef));
        // CB A8 00AE
        gbc.setState(0x8b2e, 0xfa5d, 0x9810, 0xd3ec, 0xeb45, 0x4100, 0x1, 0x1);
        gbc.writeMem(0x8b2e, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x98, gbc.a());
        EXPECT(0xd3, gbc.b());
        EXPECT(0xec, gbc.c());
        EXPECT(0xeb, gbc.d());
        EXPECT(0x45, gbc.e());
        EXPECT(0x41, gbc.h());
        EXPECT(0x0, gbc.l());
        EXPECT(0xfa5d, gbc.sp());
        EXPECT(0x8b30, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8b2e));
        EXPECT(0xa8, gbc.readMem(0x8b2f));
        // CB A8 00AF
        gbc.setState(0xee1b, 0x9be1, 0x8460, 0xd20e, 0x8b09, 0x2108, 0x1, 0x1);
        gbc.writeMem(0xee1b, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x84, gbc.a());
        EXPECT(0xd2, gbc.b());
        EXPECT(0xe, gbc.c());
        EXPECT(0x8b, gbc.d());
        EXPECT(0x9, gbc.e());
        EXPECT(0x21, gbc.h());
        EXPECT(0x8, gbc.l());
        EXPECT(0x9be1, gbc.sp());
        EXPECT(0xee1d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xee1b));
        EXPECT(0xa8, gbc.readMem(0xee1c));
        // CB A8 00B0
        gbc.setState(0x8be0, 0x382d, 0x8dc0, 0xb2c3, 0x95b7, 0x59ba, 0x0, 0x0);
        gbc.writeMem(0x8be0, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x8d, gbc.a());
        EXPECT(0x92, gbc.b());
        EXPECT(0xc3, gbc.c());
        EXPECT(0x95, gbc.d());
        EXPECT(0xb7, gbc.e());
        EXPECT(0x59, gbc.h());
        EXPECT(0xba, gbc.l());
        EXPECT(0x382d, gbc.sp());
        EXPECT(0x8be2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8be0));
        EXPECT(0xa8, gbc.readMem(0x8be1));
        // CB A8 00B1
        gbc.setState(0xea2e, 0x2879, 0x9d40, 0xa98a, 0xf5bc, 0xc41d, 0x0, 0x1);
        gbc.writeMem(0xea2e, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x9d, gbc.a());
        EXPECT(0x89, gbc.b());
        EXPECT(0x8a, gbc.c());
        EXPECT(0xf5, gbc.d());
        EXPECT(0xbc, gbc.e());
        EXPECT(0xc4, gbc.h());
        EXPECT(0x1d, gbc.l());
        EXPECT(0x2879, gbc.sp());
        EXPECT(0xea30, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xea2e));
        EXPECT(0xa8, gbc.readMem(0xea2f));
        // CB A8 00B2
        gbc.setState(0x6f4e, 0x385, 0x7640, 0x1ca6, 0xf981, 0x4f93, 0x0, 0x1);
        gbc.writeMem(0x6f4e, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x76, gbc.a());
        EXPECT(0x1c, gbc.b());
        EXPECT(0xa6, gbc.c());
        EXPECT(0xf9, gbc.d());
        EXPECT(0x81, gbc.e());
        EXPECT(0x4f, gbc.h());
        EXPECT(0x93, gbc.l());
        EXPECT(0x385, gbc.sp());
        EXPECT(0x6f50, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 00B3
        gbc.setState(0xdf3, 0xad1, 0xb7b0, 0xa8de, 0x5b55, 0xf21e, 0x1, 0x1);
        gbc.writeMem(0xdf3, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xb7, gbc.a());
        EXPECT(0x88, gbc.b());
        EXPECT(0xde, gbc.c());
        EXPECT(0x5b, gbc.d());
        EXPECT(0x55, gbc.e());
        EXPECT(0xf2, gbc.h());
        EXPECT(0x1e, gbc.l());
        EXPECT(0xad1, gbc.sp());
        EXPECT(0xdf5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 00B4
        gbc.setState(0xb2af, 0x2fbf, 0xe360, 0x2047, 0xf95f, 0xdc10, 0x0, 0x0);
        gbc.writeMem(0xb2af, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xe3, gbc.a());
        EXPECT(0x0, gbc.b());
        EXPECT(0x47, gbc.c());
        EXPECT(0xf9, gbc.d());
        EXPECT(0x5f, gbc.e());
        EXPECT(0xdc, gbc.h());
        EXPECT(0x10, gbc.l());
        EXPECT(0x2fbf, gbc.sp());
        EXPECT(0xb2b1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb2af));
        EXPECT(0xa8, gbc.readMem(0xb2b0));
        // CB A8 00B5
        gbc.setState(0x7601, 0x1911, 0x3600, 0x970b, 0x93f4, 0x1cd1, 0x0, 0x1);
        gbc.writeMem(0x7601, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x36, gbc.a());
        EXPECT(0x97, gbc.b());
        EXPECT(0xb, gbc.c());
        EXPECT(0x93, gbc.d());
        EXPECT(0xf4, gbc.e());
        EXPECT(0x1c, gbc.h());
        EXPECT(0xd1, gbc.l());
        EXPECT(0x1911, gbc.sp());
        EXPECT(0x7603, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 00B6
        gbc.setState(0x4afc, 0x6d53, 0x86d0, 0xd5e2, 0xe050, 0xa0ca, 0x1, 0x1);
        gbc.writeMem(0x4afc, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x86, gbc.a());
        EXPECT(0xd5, gbc.b());
        EXPECT(0xe2, gbc.c());
        EXPECT(0xe0, gbc.d());
        EXPECT(0x50, gbc.e());
        EXPECT(0xa0, gbc.h());
        EXPECT(0xca, gbc.l());
        EXPECT(0x6d53, gbc.sp());
        EXPECT(0x4afe, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 00B7
        gbc.setState(0x2da, 0xfa1, 0xca00, 0x8a17, 0xc892, 0xe0fe, 0x1, 0x1);
        gbc.writeMem(0x2da, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xca, gbc.a());
        EXPECT(0x8a, gbc.b());
        EXPECT(0x17, gbc.c());
        EXPECT(0xc8, gbc.d());
        EXPECT(0x92, gbc.e());
        EXPECT(0xe0, gbc.h());
        EXPECT(0xfe, gbc.l());
        EXPECT(0xfa1, gbc.sp());
        EXPECT(0x2dc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 00B8
        gbc.setState(0xebf6, 0x8652, 0xb6f0, 0x2216, 0x61c, 0xb030, 0x0, 0x0);
        gbc.writeMem(0xebf6, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xb6, gbc.a());
        EXPECT(0x2, gbc.b());
        EXPECT(0x16, gbc.c());
        EXPECT(0x6, gbc.d());
        EXPECT(0x1c, gbc.e());
        EXPECT(0xb0, gbc.h());
        EXPECT(0x30, gbc.l());
        EXPECT(0x8652, gbc.sp());
        EXPECT(0xebf8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xebf6));
        EXPECT(0xa8, gbc.readMem(0xebf7));
        // CB A8 00B9
        gbc.setState(0xb420, 0x6312, 0x8d0, 0x85e2, 0xd4aa, 0x42b, 0x0, 0x0);
        gbc.writeMem(0xb420, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x8, gbc.a());
        EXPECT(0x85, gbc.b());
        EXPECT(0xe2, gbc.c());
        EXPECT(0xd4, gbc.d());
        EXPECT(0xaa, gbc.e());
        EXPECT(0x4, gbc.h());
        EXPECT(0x2b, gbc.l());
        EXPECT(0x6312, gbc.sp());
        EXPECT(0xb422, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb420));
        EXPECT(0xa8, gbc.readMem(0xb421));
        // CB A8 00BA
        gbc.setState(0x485e, 0x125d, 0x2c0, 0x35bb, 0x7484, 0xe016, 0x0, 0x0);
        gbc.writeMem(0x485e, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x2, gbc.a());
        EXPECT(0x15, gbc.b());
        EXPECT(0xbb, gbc.c());
        EXPECT(0x74, gbc.d());
        EXPECT(0x84, gbc.e());
        EXPECT(0xe0, gbc.h());
        EXPECT(0x16, gbc.l());
        EXPECT(0x125d, gbc.sp());
        EXPECT(0x4860, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 00BB
        gbc.setState(0x55eb, 0x126, 0x3780, 0x20a6, 0x3b64, 0xcac9, 0x0, 0x1);
        gbc.writeMem(0x55eb, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x37, gbc.a());
        EXPECT(0x0, gbc.b());
        EXPECT(0xa6, gbc.c());
        EXPECT(0x3b, gbc.d());
        EXPECT(0x64, gbc.e());
        EXPECT(0xca, gbc.h());
        EXPECT(0xc9, gbc.l());
        EXPECT(0x126, gbc.sp());
        EXPECT(0x55ed, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 00BC
        gbc.setState(0xc602, 0xcfe3, 0xded0, 0x2066, 0xcd1d, 0x56fd, 0x0, 0x0);
        gbc.writeMem(0xc602, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xde, gbc.a());
        EXPECT(0x0, gbc.b());
        EXPECT(0x66, gbc.c());
        EXPECT(0xcd, gbc.d());
        EXPECT(0x1d, gbc.e());
        EXPECT(0x56, gbc.h());
        EXPECT(0xfd, gbc.l());
        EXPECT(0xcfe3, gbc.sp());
        EXPECT(0xc604, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc602));
        EXPECT(0xa8, gbc.readMem(0xc603));
        // CB A8 00BD
        gbc.setState(0xec0, 0xf222, 0x3100, 0xbf03, 0xe8, 0x2154, 0x1, 0x1);
        gbc.writeMem(0xec0, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x31, gbc.a());
        EXPECT(0x9f, gbc.b());
        EXPECT(0x3, gbc.c());
        EXPECT(0x0, gbc.d());
        EXPECT(0xe8, gbc.e());
        EXPECT(0x21, gbc.h());
        EXPECT(0x54, gbc.l());
        EXPECT(0xf222, gbc.sp());
        EXPECT(0xec2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 00BE
        gbc.setState(0x6e98, 0x6102, 0xc7c0, 0xa70e, 0x9d56, 0xe25f, 0x0, 0x0);
        gbc.writeMem(0x6e98, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xc7, gbc.a());
        EXPECT(0x87, gbc.b());
        EXPECT(0xe, gbc.c());
        EXPECT(0x9d, gbc.d());
        EXPECT(0x56, gbc.e());
        EXPECT(0xe2, gbc.h());
        EXPECT(0x5f, gbc.l());
        EXPECT(0x6102, gbc.sp());
        EXPECT(0x6e9a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 00BF
        gbc.setState(0x613, 0x1d36, 0x31b0, 0x6112, 0x6c61, 0x853f, 0x1, 0x0);
        gbc.writeMem(0x613, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x31, gbc.a());
        EXPECT(0x41, gbc.b());
        EXPECT(0x12, gbc.c());
        EXPECT(0x6c, gbc.d());
        EXPECT(0x61, gbc.e());
        EXPECT(0x85, gbc.h());
        EXPECT(0x3f, gbc.l());
        EXPECT(0x1d36, gbc.sp());
        EXPECT(0x615, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 00C0
        gbc.setState(0x5d0, 0x9753, 0xc0a0, 0x3d9b, 0x4974, 0xde05, 0x0, 0x1);
        gbc.writeMem(0x5d0, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xc0, gbc.a());
        EXPECT(0x1d, gbc.b());
        EXPECT(0x9b, gbc.c());
        EXPECT(0x49, gbc.d());
        EXPECT(0x74, gbc.e());
        EXPECT(0xde, gbc.h());
        EXPECT(0x5, gbc.l());
        EXPECT(0x9753, gbc.sp());
        EXPECT(0x5d2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 00C2
        gbc.setState(0x9804, 0xdd78, 0x3430, 0x1cd4, 0x2d7a, 0x2bfa, 0x1, 0x0);
        gbc.writeMem(0x9804, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x34, gbc.a());
        EXPECT(0x1c, gbc.b());
        EXPECT(0xd4, gbc.c());
        EXPECT(0x2d, gbc.d());
        EXPECT(0x7a, gbc.e());
        EXPECT(0x2b, gbc.h());
        EXPECT(0xfa, gbc.l());
        EXPECT(0xdd78, gbc.sp());
        EXPECT(0x9806, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9804));
        EXPECT(0xa8, gbc.readMem(0x9805));
        // CB A8 00C3
        gbc.setState(0xc96, 0xf33d, 0xdd30, 0x84a2, 0x294c, 0xd350, 0x1, 0x1);
        gbc.writeMem(0xc96, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xdd, gbc.a());
        EXPECT(0x84, gbc.b());
        EXPECT(0xa2, gbc.c());
        EXPECT(0x29, gbc.d());
        EXPECT(0x4c, gbc.e());
        EXPECT(0xd3, gbc.h());
        EXPECT(0x50, gbc.l());
        EXPECT(0xf33d, gbc.sp());
        EXPECT(0xc98, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 00C4
        gbc.setState(0xe5e, 0xedd9, 0xdc0, 0x604c, 0x48cc, 0x2a85, 0x1, 0x0);
        gbc.writeMem(0xe5e, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xd, gbc.a());
        EXPECT(0x40, gbc.b());
        EXPECT(0x4c, gbc.c());
        EXPECT(0x48, gbc.d());
        EXPECT(0xcc, gbc.e());
        EXPECT(0x2a, gbc.h());
        EXPECT(0x85, gbc.l());
        EXPECT(0xedd9, gbc.sp());
        EXPECT(0xe60, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 00C5
        gbc.setState(0x2a50, 0x18be, 0x14b0, 0x6707, 0x5284, 0x34d1, 0x0, 0x0);
        gbc.writeMem(0x2a50, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x14, gbc.a());
        EXPECT(0x47, gbc.b());
        EXPECT(0x7, gbc.c());
        EXPECT(0x52, gbc.d());
        EXPECT(0x84, gbc.e());
        EXPECT(0x34, gbc.h());
        EXPECT(0xd1, gbc.l());
        EXPECT(0x18be, gbc.sp());
        EXPECT(0x2a52, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 00C6
        gbc.setState(0xe6b4, 0x6769, 0xdb70, 0xf642, 0xfda5, 0xcfe, 0x0, 0x1);
        gbc.writeMem(0xe6b4, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xdb, gbc.a());
        EXPECT(0xd6, gbc.b());
        EXPECT(0x42, gbc.c());
        EXPECT(0xfd, gbc.d());
        EXPECT(0xa5, gbc.e());
        EXPECT(0xc, gbc.h());
        EXPECT(0xfe, gbc.l());
        EXPECT(0x6769, gbc.sp());
        EXPECT(0xe6b6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe6b4));
        EXPECT(0xa8, gbc.readMem(0xe6b5));
        // CB A8 00C7
        gbc.setState(0xdd95, 0x2cb7, 0xab50, 0xc3cb, 0x9395, 0xb93, 0x0, 0x1);
        gbc.writeMem(0xdd95, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xab, gbc.a());
        EXPECT(0xc3, gbc.b());
        EXPECT(0xcb, gbc.c());
        EXPECT(0x93, gbc.d());
        EXPECT(0x95, gbc.e());
        EXPECT(0xb, gbc.h());
        EXPECT(0x93, gbc.l());
        EXPECT(0x2cb7, gbc.sp());
        EXPECT(0xdd97, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdd95));
        EXPECT(0xa8, gbc.readMem(0xdd96));
        // CB A8 00C8
        gbc.setState(0x65f, 0x45b4, 0x2300, 0x990c, 0xe561, 0xf9f5, 0x1, 0x1);
        gbc.writeMem(0x65f, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x23, gbc.a());
        EXPECT(0x99, gbc.b());
        EXPECT(0xc, gbc.c());
        EXPECT(0xe5, gbc.d());
        EXPECT(0x61, gbc.e());
        EXPECT(0xf9, gbc.h());
        EXPECT(0xf5, gbc.l());
        EXPECT(0x45b4, gbc.sp());
        EXPECT(0x661, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 00C9
        gbc.setState(0xd782, 0x2e13, 0x330, 0xdf08, 0xf1d5, 0xf3a6, 0x0, 0x0);
        gbc.writeMem(0xd782, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x3, gbc.a());
        EXPECT(0xdf, gbc.b());
        EXPECT(0x8, gbc.c());
        EXPECT(0xf1, gbc.d());
        EXPECT(0xd5, gbc.e());
        EXPECT(0xf3, gbc.h());
        EXPECT(0xa6, gbc.l());
        EXPECT(0x2e13, gbc.sp());
        EXPECT(0xd784, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd782));
        EXPECT(0xa8, gbc.readMem(0xd783));
        // CB A8 00CA
        gbc.setState(0xbe2e, 0x3cfd, 0xeb80, 0xfc0a, 0xe886, 0xcdd, 0x1, 0x0);
        gbc.writeMem(0xbe2e, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xeb, gbc.a());
        EXPECT(0xdc, gbc.b());
        EXPECT(0xa, gbc.c());
        EXPECT(0xe8, gbc.d());
        EXPECT(0x86, gbc.e());
        EXPECT(0xc, gbc.h());
        EXPECT(0xdd, gbc.l());
        EXPECT(0x3cfd, gbc.sp());
        EXPECT(0xbe30, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbe2e));
        EXPECT(0xa8, gbc.readMem(0xbe2f));
        // CB A8 00CB
        gbc.setState(0x3882, 0x215a, 0x4d10, 0xbc23, 0xd935, 0x3512, 0x0, 0x1);
        gbc.writeMem(0x3882, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x4d, gbc.a());
        EXPECT(0x9c, gbc.b());
        EXPECT(0x23, gbc.c());
        EXPECT(0xd9, gbc.d());
        EXPECT(0x35, gbc.e());
        EXPECT(0x35, gbc.h());
        EXPECT(0x12, gbc.l());
        EXPECT(0x215a, gbc.sp());
        EXPECT(0x3884, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 00CC
        gbc.setState(0x94b4, 0x6263, 0x4a60, 0x5fb, 0x480a, 0x340c, 0x0, 0x0);
        gbc.writeMem(0x94b4, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x4a, gbc.a());
        EXPECT(0x5, gbc.b());
        EXPECT(0xfb, gbc.c());
        EXPECT(0x48, gbc.d());
        EXPECT(0xa, gbc.e());
        EXPECT(0x34, gbc.h());
        EXPECT(0xc, gbc.l());
        EXPECT(0x6263, gbc.sp());
        EXPECT(0x94b6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x94b4));
        EXPECT(0xa8, gbc.readMem(0x94b5));
        // CB A8 00CD
        gbc.setState(0x79a0, 0x6c7d, 0x7d50, 0x7d74, 0x31cd, 0x7f5f, 0x0, 0x0);
        gbc.writeMem(0x79a0, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x7d, gbc.a());
        EXPECT(0x5d, gbc.b());
        EXPECT(0x74, gbc.c());
        EXPECT(0x31, gbc.d());
        EXPECT(0xcd, gbc.e());
        EXPECT(0x7f, gbc.h());
        EXPECT(0x5f, gbc.l());
        EXPECT(0x6c7d, gbc.sp());
        EXPECT(0x79a2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 00CE
        gbc.setState(0x24d, 0x28b4, 0xb800, 0xd5a9, 0xa5d7, 0xdc85, 0x0, 0x0);
        gbc.writeMem(0x24d, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xb8, gbc.a());
        EXPECT(0xd5, gbc.b());
        EXPECT(0xa9, gbc.c());
        EXPECT(0xa5, gbc.d());
        EXPECT(0xd7, gbc.e());
        EXPECT(0xdc, gbc.h());
        EXPECT(0x85, gbc.l());
        EXPECT(0x28b4, gbc.sp());
        EXPECT(0x24f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 00CF
        gbc.setState(0x3811, 0xb5e6, 0x7670, 0xfa85, 0x7c29, 0xac03, 0x0, 0x1);
        gbc.writeMem(0x3811, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x76, gbc.a());
        EXPECT(0xda, gbc.b());
        EXPECT(0x85, gbc.c());
        EXPECT(0x7c, gbc.d());
        EXPECT(0x29, gbc.e());
        EXPECT(0xac, gbc.h());
        EXPECT(0x3, gbc.l());
        EXPECT(0xb5e6, gbc.sp());
        EXPECT(0x3813, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 00D0
        gbc.setState(0xd311, 0x4c4b, 0x3690, 0x8178, 0x2306, 0xb272, 0x1, 0x0);
        gbc.writeMem(0xd311, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x36, gbc.a());
        EXPECT(0x81, gbc.b());
        EXPECT(0x78, gbc.c());
        EXPECT(0x23, gbc.d());
        EXPECT(0x6, gbc.e());
        EXPECT(0xb2, gbc.h());
        EXPECT(0x72, gbc.l());
        EXPECT(0x4c4b, gbc.sp());
        EXPECT(0xd313, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd311));
        EXPECT(0xa8, gbc.readMem(0xd312));
        // CB A8 00D1
        gbc.setState(0x857a, 0xeb03, 0xa4e0, 0x8159, 0x582, 0xfd6c, 0x1, 0x0);
        gbc.writeMem(0x857a, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xa4, gbc.a());
        EXPECT(0x81, gbc.b());
        EXPECT(0x59, gbc.c());
        EXPECT(0x5, gbc.d());
        EXPECT(0x82, gbc.e());
        EXPECT(0xfd, gbc.h());
        EXPECT(0x6c, gbc.l());
        EXPECT(0xeb03, gbc.sp());
        EXPECT(0x857c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x857a));
        EXPECT(0xa8, gbc.readMem(0x857b));
        // CB A8 00D2
        gbc.setState(0x48e3, 0x7714, 0xc570, 0x3ec1, 0x1088, 0xf8f6, 0x1, 0x1);
        gbc.writeMem(0x48e3, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xc5, gbc.a());
        EXPECT(0x1e, gbc.b());
        EXPECT(0xc1, gbc.c());
        EXPECT(0x10, gbc.d());
        EXPECT(0x88, gbc.e());
        EXPECT(0xf8, gbc.h());
        EXPECT(0xf6, gbc.l());
        EXPECT(0x7714, gbc.sp());
        EXPECT(0x48e5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 00D3
        gbc.setState(0xe552, 0xde02, 0x8650, 0x1f4c, 0xe6e3, 0x11f3, 0x1, 0x1);
        gbc.writeMem(0xe552, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x86, gbc.a());
        EXPECT(0x1f, gbc.b());
        EXPECT(0x4c, gbc.c());
        EXPECT(0xe6, gbc.d());
        EXPECT(0xe3, gbc.e());
        EXPECT(0x11, gbc.h());
        EXPECT(0xf3, gbc.l());
        EXPECT(0xde02, gbc.sp());
        EXPECT(0xe554, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe552));
        EXPECT(0xa8, gbc.readMem(0xe553));
        // CB A8 00D4
        gbc.setState(0x700c, 0x75c5, 0x7890, 0x1b31, 0xaa81, 0xac57, 0x1, 0x1);
        gbc.writeMem(0x700c, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x78, gbc.a());
        EXPECT(0x1b, gbc.b());
        EXPECT(0x31, gbc.c());
        EXPECT(0xaa, gbc.d());
        EXPECT(0x81, gbc.e());
        EXPECT(0xac, gbc.h());
        EXPECT(0x57, gbc.l());
        EXPECT(0x75c5, gbc.sp());
        EXPECT(0x700e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 00D5
        gbc.setState(0x6b61, 0xdd9f, 0xb620, 0xde02, 0x937f, 0x4c85, 0x1, 0x0);
        gbc.writeMem(0x6b61, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xb6, gbc.a());
        EXPECT(0xde, gbc.b());
        EXPECT(0x2, gbc.c());
        EXPECT(0x93, gbc.d());
        EXPECT(0x7f, gbc.e());
        EXPECT(0x4c, gbc.h());
        EXPECT(0x85, gbc.l());
        EXPECT(0xdd9f, gbc.sp());
        EXPECT(0x6b63, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 00D6
        gbc.setState(0x38c1, 0xedb9, 0xb910, 0x15d, 0xf1ed, 0x8643, 0x1, 0x0);
        gbc.writeMem(0x38c1, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xb9, gbc.a());
        EXPECT(0x1, gbc.b());
        EXPECT(0x5d, gbc.c());
        EXPECT(0xf1, gbc.d());
        EXPECT(0xed, gbc.e());
        EXPECT(0x86, gbc.h());
        EXPECT(0x43, gbc.l());
        EXPECT(0xedb9, gbc.sp());
        EXPECT(0x38c3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 00D7
        gbc.setState(0x94c1, 0x95e6, 0xffa0, 0xbabe, 0xe351, 0x52e, 0x0, 0x0);
        gbc.writeMem(0x94c1, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xff, gbc.a());
        EXPECT(0x9a, gbc.b());
        EXPECT(0xbe, gbc.c());
        EXPECT(0xe3, gbc.d());
        EXPECT(0x51, gbc.e());
        EXPECT(0x5, gbc.h());
        EXPECT(0x2e, gbc.l());
        EXPECT(0x95e6, gbc.sp());
        EXPECT(0x94c3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x94c1));
        EXPECT(0xa8, gbc.readMem(0x94c2));
        // CB A8 00D8
        gbc.setState(0x4ce2, 0x66e1, 0x40c0, 0x23c4, 0xf29f, 0x7765, 0x1, 0x0);
        gbc.writeMem(0x4ce2, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x40, gbc.a());
        EXPECT(0x3, gbc.b());
        EXPECT(0xc4, gbc.c());
        EXPECT(0xf2, gbc.d());
        EXPECT(0x9f, gbc.e());
        EXPECT(0x77, gbc.h());
        EXPECT(0x65, gbc.l());
        EXPECT(0x66e1, gbc.sp());
        EXPECT(0x4ce4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 00D9
        gbc.setState(0x86f1, 0x7c28, 0x6ca0, 0x9167, 0xfdd3, 0x2998, 0x0, 0x1);
        gbc.writeMem(0x86f1, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x6c, gbc.a());
        EXPECT(0x91, gbc.b());
        EXPECT(0x67, gbc.c());
        EXPECT(0xfd, gbc.d());
        EXPECT(0xd3, gbc.e());
        EXPECT(0x29, gbc.h());
        EXPECT(0x98, gbc.l());
        EXPECT(0x7c28, gbc.sp());
        EXPECT(0x86f3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x86f1));
        EXPECT(0xa8, gbc.readMem(0x86f2));
        // CB A8 00DA
        gbc.setState(0x32c0, 0x1856, 0x4940, 0x11ca, 0x846, 0x8b43, 0x0, 0x1);
        gbc.writeMem(0x32c0, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x49, gbc.a());
        EXPECT(0x11, gbc.b());
        EXPECT(0xca, gbc.c());
        EXPECT(0x8, gbc.d());
        EXPECT(0x46, gbc.e());
        EXPECT(0x8b, gbc.h());
        EXPECT(0x43, gbc.l());
        EXPECT(0x1856, gbc.sp());
        EXPECT(0x32c2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 00DB
        gbc.setState(0xc3ab, 0x7c93, 0x1c40, 0xcc5b, 0xd41d, 0xc499, 0x1, 0x0);
        gbc.writeMem(0xc3ab, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x1c, gbc.a());
        EXPECT(0xcc, gbc.b());
        EXPECT(0x5b, gbc.c());
        EXPECT(0xd4, gbc.d());
        EXPECT(0x1d, gbc.e());
        EXPECT(0xc4, gbc.h());
        EXPECT(0x99, gbc.l());
        EXPECT(0x7c93, gbc.sp());
        EXPECT(0xc3ad, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc3ab));
        EXPECT(0xa8, gbc.readMem(0xc3ac));
        // CB A8 00DC
        gbc.setState(0xbe01, 0x2c68, 0x1820, 0x582e, 0x1129, 0xb97, 0x1, 0x1);
        gbc.writeMem(0xbe01, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x18, gbc.a());
        EXPECT(0x58, gbc.b());
        EXPECT(0x2e, gbc.c());
        EXPECT(0x11, gbc.d());
        EXPECT(0x29, gbc.e());
        EXPECT(0xb, gbc.h());
        EXPECT(0x97, gbc.l());
        EXPECT(0x2c68, gbc.sp());
        EXPECT(0xbe03, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbe01));
        EXPECT(0xa8, gbc.readMem(0xbe02));
        // CB A8 00DE
        gbc.setState(0xd89d, 0x4209, 0xaa50, 0x51f3, 0x8de5, 0x5f24, 0x1, 0x0);
        gbc.writeMem(0xd89d, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xaa, gbc.a());
        EXPECT(0x51, gbc.b());
        EXPECT(0xf3, gbc.c());
        EXPECT(0x8d, gbc.d());
        EXPECT(0xe5, gbc.e());
        EXPECT(0x5f, gbc.h());
        EXPECT(0x24, gbc.l());
        EXPECT(0x4209, gbc.sp());
        EXPECT(0xd89f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd89d));
        EXPECT(0xa8, gbc.readMem(0xd89e));
        // CB A8 00DF
        gbc.setState(0x5812, 0xbdb5, 0x8280, 0xd737, 0xf1e5, 0x8d8, 0x0, 0x1);
        gbc.writeMem(0x5812, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x82, gbc.a());
        EXPECT(0xd7, gbc.b());
        EXPECT(0x37, gbc.c());
        EXPECT(0xf1, gbc.d());
        EXPECT(0xe5, gbc.e());
        EXPECT(0x8, gbc.h());
        EXPECT(0xd8, gbc.l());
        EXPECT(0xbdb5, gbc.sp());
        EXPECT(0x5814, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 00E0
        gbc.setState(0x4780, 0x22f0, 0x4720, 0x8cc3, 0xc4c8, 0xde39, 0x1, 0x0);
        gbc.writeMem(0x4780, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x47, gbc.a());
        EXPECT(0x8c, gbc.b());
        EXPECT(0xc3, gbc.c());
        EXPECT(0xc4, gbc.d());
        EXPECT(0xc8, gbc.e());
        EXPECT(0xde, gbc.h());
        EXPECT(0x39, gbc.l());
        EXPECT(0x22f0, gbc.sp());
        EXPECT(0x4782, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 00E1
        gbc.setState(0x3efc, 0x8e29, 0xc630, 0x3b73, 0x7cd3, 0xeaf4, 0x1, 0x1);
        gbc.writeMem(0x3efc, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xc6, gbc.a());
        EXPECT(0x1b, gbc.b());
        EXPECT(0x73, gbc.c());
        EXPECT(0x7c, gbc.d());
        EXPECT(0xd3, gbc.e());
        EXPECT(0xea, gbc.h());
        EXPECT(0xf4, gbc.l());
        EXPECT(0x8e29, gbc.sp());
        EXPECT(0x3efe, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 00E2
        gbc.setState(0xe324, 0x7490, 0xa4e0, 0xe5a8, 0x3bbe, 0x9f67, 0x1, 0x0);
        gbc.writeMem(0xe324, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xa4, gbc.a());
        EXPECT(0xc5, gbc.b());
        EXPECT(0xa8, gbc.c());
        EXPECT(0x3b, gbc.d());
        EXPECT(0xbe, gbc.e());
        EXPECT(0x9f, gbc.h());
        EXPECT(0x67, gbc.l());
        EXPECT(0x7490, gbc.sp());
        EXPECT(0xe326, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe324));
        EXPECT(0xa8, gbc.readMem(0xe325));
        // CB A8 00E3
        gbc.setState(0x8822, 0xf01f, 0xa50, 0xfd9c, 0x1c8e, 0xa0d8, 0x1, 0x0);
        gbc.writeMem(0x8822, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xa, gbc.a());
        EXPECT(0xdd, gbc.b());
        EXPECT(0x9c, gbc.c());
        EXPECT(0x1c, gbc.d());
        EXPECT(0x8e, gbc.e());
        EXPECT(0xa0, gbc.h());
        EXPECT(0xd8, gbc.l());
        EXPECT(0xf01f, gbc.sp());
        EXPECT(0x8824, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8822));
        EXPECT(0xa8, gbc.readMem(0x8823));
        // CB A8 00E4
        gbc.setState(0xe094, 0x245d, 0xe1b0, 0x3036, 0x53ce, 0x16a8, 0x1, 0x1);
        gbc.writeMem(0xe094, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xe1, gbc.a());
        EXPECT(0x10, gbc.b());
        EXPECT(0x36, gbc.c());
        EXPECT(0x53, gbc.d());
        EXPECT(0xce, gbc.e());
        EXPECT(0x16, gbc.h());
        EXPECT(0xa8, gbc.l());
        EXPECT(0x245d, gbc.sp());
        EXPECT(0xe096, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe094));
        EXPECT(0xa8, gbc.readMem(0xe095));
        // CB A8 00E5
        gbc.setState(0x458, 0xaaab, 0xbe20, 0xfab5, 0x92d2, 0xebf3, 0x1, 0x1);
        gbc.writeMem(0x458, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xbe, gbc.a());
        EXPECT(0xda, gbc.b());
        EXPECT(0xb5, gbc.c());
        EXPECT(0x92, gbc.d());
        EXPECT(0xd2, gbc.e());
        EXPECT(0xeb, gbc.h());
        EXPECT(0xf3, gbc.l());
        EXPECT(0xaaab, gbc.sp());
        EXPECT(0x45a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 00E6
        gbc.setState(0x8bf1, 0xdb0, 0x18d0, 0x687f, 0x328, 0x47af, 0x0, 0x0);
        gbc.writeMem(0x8bf1, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x18, gbc.a());
        EXPECT(0x48, gbc.b());
        EXPECT(0x7f, gbc.c());
        EXPECT(0x3, gbc.d());
        EXPECT(0x28, gbc.e());
        EXPECT(0x47, gbc.h());
        EXPECT(0xaf, gbc.l());
        EXPECT(0xdb0, gbc.sp());
        EXPECT(0x8bf3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8bf1));
        EXPECT(0xa8, gbc.readMem(0x8bf2));
        // CB A8 00E8
        gbc.setState(0x9ba9, 0xa630, 0x5e50, 0xf01a, 0x6536, 0x5d4e, 0x1, 0x0);
        gbc.writeMem(0x9ba9, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x5e, gbc.a());
        EXPECT(0xd0, gbc.b());
        EXPECT(0x1a, gbc.c());
        EXPECT(0x65, gbc.d());
        EXPECT(0x36, gbc.e());
        EXPECT(0x5d, gbc.h());
        EXPECT(0x4e, gbc.l());
        EXPECT(0xa630, gbc.sp());
        EXPECT(0x9bab, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9ba9));
        EXPECT(0xa8, gbc.readMem(0x9baa));
        // CB A8 00E9
        gbc.setState(0x2fdf, 0x73fb, 0x35d0, 0xfb72, 0xddf8, 0x4591, 0x1, 0x1);
        gbc.writeMem(0x2fdf, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x35, gbc.a());
        EXPECT(0xdb, gbc.b());
        EXPECT(0x72, gbc.c());
        EXPECT(0xdd, gbc.d());
        EXPECT(0xf8, gbc.e());
        EXPECT(0x45, gbc.h());
        EXPECT(0x91, gbc.l());
        EXPECT(0x73fb, gbc.sp());
        EXPECT(0x2fe1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 00EA
        gbc.setState(0x81f0, 0x47d1, 0x21b0, 0x5b0b, 0xaf42, 0x8dd6, 0x0, 0x1);
        gbc.writeMem(0x81f0, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x21, gbc.a());
        EXPECT(0x5b, gbc.b());
        EXPECT(0xb, gbc.c());
        EXPECT(0xaf, gbc.d());
        EXPECT(0x42, gbc.e());
        EXPECT(0x8d, gbc.h());
        EXPECT(0xd6, gbc.l());
        EXPECT(0x47d1, gbc.sp());
        EXPECT(0x81f2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x81f0));
        EXPECT(0xa8, gbc.readMem(0x81f1));
        // CB A8 00EB
        gbc.setState(0xaeaf, 0x941e, 0x1d70, 0x90a7, 0xecf3, 0xdbfc, 0x0, 0x1);
        gbc.writeMem(0xaeaf, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x1d, gbc.a());
        EXPECT(0x90, gbc.b());
        EXPECT(0xa7, gbc.c());
        EXPECT(0xec, gbc.d());
        EXPECT(0xf3, gbc.e());
        EXPECT(0xdb, gbc.h());
        EXPECT(0xfc, gbc.l());
        EXPECT(0x941e, gbc.sp());
        EXPECT(0xaeb1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaeaf));
        EXPECT(0xa8, gbc.readMem(0xaeb0));
        // CB A8 00ED
        gbc.setState(0xa6c0, 0x4027, 0xd410, 0x8027, 0xaa8d, 0x4cc4, 0x0, 0x0);
        gbc.writeMem(0xa6c0, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xd4, gbc.a());
        EXPECT(0x80, gbc.b());
        EXPECT(0x27, gbc.c());
        EXPECT(0xaa, gbc.d());
        EXPECT(0x8d, gbc.e());
        EXPECT(0x4c, gbc.h());
        EXPECT(0xc4, gbc.l());
        EXPECT(0x4027, gbc.sp());
        EXPECT(0xa6c2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa6c0));
        EXPECT(0xa8, gbc.readMem(0xa6c1));
        // CB A8 00EE
        gbc.setState(0xcd01, 0x91c5, 0xf9a0, 0xbd82, 0xcbd, 0xc8b6, 0x0, 0x1);
        gbc.writeMem(0xcd01, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xf9, gbc.a());
        EXPECT(0x9d, gbc.b());
        EXPECT(0x82, gbc.c());
        EXPECT(0xc, gbc.d());
        EXPECT(0xbd, gbc.e());
        EXPECT(0xc8, gbc.h());
        EXPECT(0xb6, gbc.l());
        EXPECT(0x91c5, gbc.sp());
        EXPECT(0xcd03, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcd01));
        EXPECT(0xa8, gbc.readMem(0xcd02));
        // CB A8 00EF
        gbc.setState(0x2130, 0x2f75, 0x2bb0, 0xc969, 0x3df7, 0x61ff, 0x0, 0x0);
        gbc.writeMem(0x2130, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x2b, gbc.a());
        EXPECT(0xc9, gbc.b());
        EXPECT(0x69, gbc.c());
        EXPECT(0x3d, gbc.d());
        EXPECT(0xf7, gbc.e());
        EXPECT(0x61, gbc.h());
        EXPECT(0xff, gbc.l());
        EXPECT(0x2f75, gbc.sp());
        EXPECT(0x2132, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 00F0
        gbc.setState(0xabd, 0x93b0, 0x2f10, 0x2e0e, 0xd036, 0x3d24, 0x0, 0x0);
        gbc.writeMem(0xabd, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x2f, gbc.a());
        EXPECT(0xe, gbc.b());
        EXPECT(0xe, gbc.c());
        EXPECT(0xd0, gbc.d());
        EXPECT(0x36, gbc.e());
        EXPECT(0x3d, gbc.h());
        EXPECT(0x24, gbc.l());
        EXPECT(0x93b0, gbc.sp());
        EXPECT(0xabf, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 00F1
        gbc.setState(0xe9b1, 0xe209, 0x790, 0x8471, 0xa8e6, 0xa1b8, 0x1, 0x1);
        gbc.writeMem(0xe9b1, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x7, gbc.a());
        EXPECT(0x84, gbc.b());
        EXPECT(0x71, gbc.c());
        EXPECT(0xa8, gbc.d());
        EXPECT(0xe6, gbc.e());
        EXPECT(0xa1, gbc.h());
        EXPECT(0xb8, gbc.l());
        EXPECT(0xe209, gbc.sp());
        EXPECT(0xe9b3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe9b1));
        EXPECT(0xa8, gbc.readMem(0xe9b2));
        // CB A8 00F2
        gbc.setState(0x8397, 0xe07e, 0x3360, 0xcaae, 0x6f3e, 0x4841, 0x0, 0x0);
        gbc.writeMem(0x8397, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x33, gbc.a());
        EXPECT(0xca, gbc.b());
        EXPECT(0xae, gbc.c());
        EXPECT(0x6f, gbc.d());
        EXPECT(0x3e, gbc.e());
        EXPECT(0x48, gbc.h());
        EXPECT(0x41, gbc.l());
        EXPECT(0xe07e, gbc.sp());
        EXPECT(0x8399, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8397));
        EXPECT(0xa8, gbc.readMem(0x8398));
        // CB A8 00F3
        gbc.setState(0xc5c5, 0xbca2, 0x80a0, 0xa351, 0x4a68, 0x6c43, 0x0, 0x1);
        gbc.writeMem(0xc5c5, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x80, gbc.a());
        EXPECT(0x83, gbc.b());
        EXPECT(0x51, gbc.c());
        EXPECT(0x4a, gbc.d());
        EXPECT(0x68, gbc.e());
        EXPECT(0x6c, gbc.h());
        EXPECT(0x43, gbc.l());
        EXPECT(0xbca2, gbc.sp());
        EXPECT(0xc5c7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc5c5));
        EXPECT(0xa8, gbc.readMem(0xc5c6));
        // CB A8 00F4
        gbc.setState(0x3a1c, 0xbaae, 0x6420, 0x410c, 0x881, 0xc3a8, 0x0, 0x0);
        gbc.writeMem(0x3a1c, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x64, gbc.a());
        EXPECT(0x41, gbc.b());
        EXPECT(0xc, gbc.c());
        EXPECT(0x8, gbc.d());
        EXPECT(0x81, gbc.e());
        EXPECT(0xc3, gbc.h());
        EXPECT(0xa8, gbc.l());
        EXPECT(0xbaae, gbc.sp());
        EXPECT(0x3a1e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 00F5
        gbc.setState(0xbefe, 0x7c9, 0xe260, 0x57a5, 0xb48a, 0xb688, 0x0, 0x1);
        gbc.writeMem(0xbefe, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xe2, gbc.a());
        EXPECT(0x57, gbc.b());
        EXPECT(0xa5, gbc.c());
        EXPECT(0xb4, gbc.d());
        EXPECT(0x8a, gbc.e());
        EXPECT(0xb6, gbc.h());
        EXPECT(0x88, gbc.l());
        EXPECT(0x7c9, gbc.sp());
        EXPECT(0xbf00, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbefe));
        EXPECT(0xa8, gbc.readMem(0xbeff));
        // CB A8 00F6
        gbc.setState(0xd02a, 0x3ecf, 0xbe20, 0xb25d, 0x1e44, 0xf92a, 0x0, 0x0);
        gbc.writeMem(0xd02a, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xbe, gbc.a());
        EXPECT(0x92, gbc.b());
        EXPECT(0x5d, gbc.c());
        EXPECT(0x1e, gbc.d());
        EXPECT(0x44, gbc.e());
        EXPECT(0xf9, gbc.h());
        EXPECT(0x2a, gbc.l());
        EXPECT(0x3ecf, gbc.sp());
        EXPECT(0xd02c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd02a));
        EXPECT(0xa8, gbc.readMem(0xd02b));
        // CB A8 00F7
        gbc.setState(0x4270, 0xaf90, 0x6dd0, 0x8b61, 0xab9d, 0xb8c5, 0x0, 0x0);
        gbc.writeMem(0x4270, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x6d, gbc.a());
        EXPECT(0x8b, gbc.b());
        EXPECT(0x61, gbc.c());
        EXPECT(0xab, gbc.d());
        EXPECT(0x9d, gbc.e());
        EXPECT(0xb8, gbc.h());
        EXPECT(0xc5, gbc.l());
        EXPECT(0xaf90, gbc.sp());
        EXPECT(0x4272, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 00F8
        gbc.setState(0x71d4, 0xdbda, 0x3bb0, 0x9a88, 0x9a04, 0xa24e, 0x0, 0x1);
        gbc.writeMem(0x71d4, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x3b, gbc.a());
        EXPECT(0x9a, gbc.b());
        EXPECT(0x88, gbc.c());
        EXPECT(0x9a, gbc.d());
        EXPECT(0x4, gbc.e());
        EXPECT(0xa2, gbc.h());
        EXPECT(0x4e, gbc.l());
        EXPECT(0xdbda, gbc.sp());
        EXPECT(0x71d6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 00F9
        gbc.setState(0x71fb, 0xa6f3, 0xd960, 0xc6e9, 0x442a, 0x2e8, 0x1, 0x1);
        gbc.writeMem(0x71fb, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xd9, gbc.a());
        EXPECT(0xc6, gbc.b());
        EXPECT(0xe9, gbc.c());
        EXPECT(0x44, gbc.d());
        EXPECT(0x2a, gbc.e());
        EXPECT(0x2, gbc.h());
        EXPECT(0xe8, gbc.l());
        EXPECT(0xa6f3, gbc.sp());
        EXPECT(0x71fd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 00FA
        gbc.setState(0xd53e, 0x3445, 0xa180, 0x7f4, 0x86eb, 0x12b6, 0x1, 0x1);
        gbc.writeMem(0xd53e, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xa1, gbc.a());
        EXPECT(0x7, gbc.b());
        EXPECT(0xf4, gbc.c());
        EXPECT(0x86, gbc.d());
        EXPECT(0xeb, gbc.e());
        EXPECT(0x12, gbc.h());
        EXPECT(0xb6, gbc.l());
        EXPECT(0x3445, gbc.sp());
        EXPECT(0xd540, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd53e));
        EXPECT(0xa8, gbc.readMem(0xd53f));
        // CB A8 00FB
        gbc.setState(0xd73f, 0x4236, 0xc100, 0xae63, 0xc376, 0x8cd3, 0x1, 0x0);
        gbc.writeMem(0xd73f, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xc1, gbc.a());
        EXPECT(0x8e, gbc.b());
        EXPECT(0x63, gbc.c());
        EXPECT(0xc3, gbc.d());
        EXPECT(0x76, gbc.e());
        EXPECT(0x8c, gbc.h());
        EXPECT(0xd3, gbc.l());
        EXPECT(0x4236, gbc.sp());
        EXPECT(0xd741, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd73f));
        EXPECT(0xa8, gbc.readMem(0xd740));
        // CB A8 00FC
        gbc.setState(0xc5ee, 0xc4e9, 0xf570, 0x2031, 0x41d5, 0x88c4, 0x1, 0x0);
        gbc.writeMem(0xc5ee, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xf5, gbc.a());
        EXPECT(0x0, gbc.b());
        EXPECT(0x31, gbc.c());
        EXPECT(0x41, gbc.d());
        EXPECT(0xd5, gbc.e());
        EXPECT(0x88, gbc.h());
        EXPECT(0xc4, gbc.l());
        EXPECT(0xc4e9, gbc.sp());
        EXPECT(0xc5f0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc5ee));
        EXPECT(0xa8, gbc.readMem(0xc5ef));
        // CB A8 00FD
        gbc.setState(0xb632, 0xa566, 0x90c0, 0x97c7, 0x78d4, 0x46b0, 0x0, 0x0);
        gbc.writeMem(0xb632, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x90, gbc.a());
        EXPECT(0x97, gbc.b());
        EXPECT(0xc7, gbc.c());
        EXPECT(0x78, gbc.d());
        EXPECT(0xd4, gbc.e());
        EXPECT(0x46, gbc.h());
        EXPECT(0xb0, gbc.l());
        EXPECT(0xa566, gbc.sp());
        EXPECT(0xb634, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb632));
        EXPECT(0xa8, gbc.readMem(0xb633));
        // CB A8 00FE
        gbc.setState(0xcb8c, 0xfd24, 0x5320, 0x7cc3, 0xc1e3, 0xbca9, 0x1, 0x1);
        gbc.writeMem(0xcb8c, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x53, gbc.a());
        EXPECT(0x5c, gbc.b());
        EXPECT(0xc3, gbc.c());
        EXPECT(0xc1, gbc.d());
        EXPECT(0xe3, gbc.e());
        EXPECT(0xbc, gbc.h());
        EXPECT(0xa9, gbc.l());
        EXPECT(0xfd24, gbc.sp());
        EXPECT(0xcb8e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcb8c));
        EXPECT(0xa8, gbc.readMem(0xcb8d));
        // CB A8 00FF
        gbc.setState(0xeea9, 0x3573, 0xd860, 0xfd8e, 0xeef8, 0xc402, 0x0, 0x0);
        gbc.writeMem(0xeea9, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xd8, gbc.a());
        EXPECT(0xdd, gbc.b());
        EXPECT(0x8e, gbc.c());
        EXPECT(0xee, gbc.d());
        EXPECT(0xf8, gbc.e());
        EXPECT(0xc4, gbc.h());
        EXPECT(0x2, gbc.l());
        EXPECT(0x3573, gbc.sp());
        EXPECT(0xeeab, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xeea9));
        EXPECT(0xa8, gbc.readMem(0xeeaa));
        // CB A8 0100
        gbc.setState(0xeb2d, 0x3afd, 0x32d0, 0x44ea, 0x8524, 0xf708, 0x0, 0x1);
        gbc.writeMem(0xeb2d, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x32, gbc.a());
        EXPECT(0x44, gbc.b());
        EXPECT(0xea, gbc.c());
        EXPECT(0x85, gbc.d());
        EXPECT(0x24, gbc.e());
        EXPECT(0xf7, gbc.h());
        EXPECT(0x8, gbc.l());
        EXPECT(0x3afd, gbc.sp());
        EXPECT(0xeb2f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xeb2d));
        EXPECT(0xa8, gbc.readMem(0xeb2e));
        // CB A8 0101
        gbc.setState(0x3f15, 0x3236, 0xad20, 0xc6d6, 0xcba, 0x6113, 0x1, 0x1);
        gbc.writeMem(0x3f15, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xad, gbc.a());
        EXPECT(0xc6, gbc.b());
        EXPECT(0xd6, gbc.c());
        EXPECT(0xc, gbc.d());
        EXPECT(0xba, gbc.e());
        EXPECT(0x61, gbc.h());
        EXPECT(0x13, gbc.l());
        EXPECT(0x3236, gbc.sp());
        EXPECT(0x3f17, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 0102
        gbc.setState(0xd7bb, 0x9919, 0x6450, 0x3770, 0x4502, 0xc624, 0x0, 0x1);
        gbc.writeMem(0xd7bb, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x64, gbc.a());
        EXPECT(0x17, gbc.b());
        EXPECT(0x70, gbc.c());
        EXPECT(0x45, gbc.d());
        EXPECT(0x2, gbc.e());
        EXPECT(0xc6, gbc.h());
        EXPECT(0x24, gbc.l());
        EXPECT(0x9919, gbc.sp());
        EXPECT(0xd7bd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd7bb));
        EXPECT(0xa8, gbc.readMem(0xd7bc));
        // CB A8 0103
        gbc.setState(0x9afb, 0x8648, 0x33c0, 0xc45d, 0xa8e0, 0x8d2c, 0x0, 0x0);
        gbc.writeMem(0x9afb, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x33, gbc.a());
        EXPECT(0xc4, gbc.b());
        EXPECT(0x5d, gbc.c());
        EXPECT(0xa8, gbc.d());
        EXPECT(0xe0, gbc.e());
        EXPECT(0x8d, gbc.h());
        EXPECT(0x2c, gbc.l());
        EXPECT(0x8648, gbc.sp());
        EXPECT(0x9afd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9afb));
        EXPECT(0xa8, gbc.readMem(0x9afc));
        // CB A8 0104
        gbc.setState(0xbbd8, 0xef7c, 0x93f0, 0x3dbd, 0x9b34, 0x61e0, 0x0, 0x1);
        gbc.writeMem(0xbbd8, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x93, gbc.a());
        EXPECT(0x1d, gbc.b());
        EXPECT(0xbd, gbc.c());
        EXPECT(0x9b, gbc.d());
        EXPECT(0x34, gbc.e());
        EXPECT(0x61, gbc.h());
        EXPECT(0xe0, gbc.l());
        EXPECT(0xef7c, gbc.sp());
        EXPECT(0xbbda, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbbd8));
        EXPECT(0xa8, gbc.readMem(0xbbd9));
        // CB A8 0105
        gbc.setState(0xb64, 0xbf3d, 0xf810, 0x63e4, 0xdb9b, 0x8ce5, 0x0, 0x0);
        gbc.writeMem(0xb64, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xf8, gbc.a());
        EXPECT(0x43, gbc.b());
        EXPECT(0xe4, gbc.c());
        EXPECT(0xdb, gbc.d());
        EXPECT(0x9b, gbc.e());
        EXPECT(0x8c, gbc.h());
        EXPECT(0xe5, gbc.l());
        EXPECT(0xbf3d, gbc.sp());
        EXPECT(0xb66, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 0106
        gbc.setState(0x5486, 0xba13, 0x5010, 0x65cd, 0xc6b3, 0xde19, 0x1, 0x1);
        gbc.writeMem(0x5486, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x50, gbc.a());
        EXPECT(0x45, gbc.b());
        EXPECT(0xcd, gbc.c());
        EXPECT(0xc6, gbc.d());
        EXPECT(0xb3, gbc.e());
        EXPECT(0xde, gbc.h());
        EXPECT(0x19, gbc.l());
        EXPECT(0xba13, gbc.sp());
        EXPECT(0x5488, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 0107
        gbc.setState(0x9001, 0x2e26, 0xd370, 0x16b5, 0x4f63, 0x72ca, 0x0, 0x0);
        gbc.writeMem(0x9001, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xd3, gbc.a());
        EXPECT(0x16, gbc.b());
        EXPECT(0xb5, gbc.c());
        EXPECT(0x4f, gbc.d());
        EXPECT(0x63, gbc.e());
        EXPECT(0x72, gbc.h());
        EXPECT(0xca, gbc.l());
        EXPECT(0x2e26, gbc.sp());
        EXPECT(0x9003, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9001));
        EXPECT(0xa8, gbc.readMem(0x9002));
        // CB A8 0108
        gbc.setState(0x9ae3, 0x878f, 0x8ed0, 0x4c92, 0x12e4, 0x44bc, 0x1, 0x1);
        gbc.writeMem(0x9ae3, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x8e, gbc.a());
        EXPECT(0x4c, gbc.b());
        EXPECT(0x92, gbc.c());
        EXPECT(0x12, gbc.d());
        EXPECT(0xe4, gbc.e());
        EXPECT(0x44, gbc.h());
        EXPECT(0xbc, gbc.l());
        EXPECT(0x878f, gbc.sp());
        EXPECT(0x9ae5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9ae3));
        EXPECT(0xa8, gbc.readMem(0x9ae4));
        // CB A8 0109
        gbc.setState(0x2ba5, 0xdf44, 0x2220, 0x2570, 0x9e4f, 0xa5e6, 0x1, 0x0);
        gbc.writeMem(0x2ba5, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x22, gbc.a());
        EXPECT(0x5, gbc.b());
        EXPECT(0x70, gbc.c());
        EXPECT(0x9e, gbc.d());
        EXPECT(0x4f, gbc.e());
        EXPECT(0xa5, gbc.h());
        EXPECT(0xe6, gbc.l());
        EXPECT(0xdf44, gbc.sp());
        EXPECT(0x2ba7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 010A
        gbc.setState(0xbb0b, 0x5da6, 0x820, 0xa43c, 0xc688, 0xb90a, 0x1, 0x1);
        gbc.writeMem(0xbb0b, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x8, gbc.a());
        EXPECT(0x84, gbc.b());
        EXPECT(0x3c, gbc.c());
        EXPECT(0xc6, gbc.d());
        EXPECT(0x88, gbc.e());
        EXPECT(0xb9, gbc.h());
        EXPECT(0xa, gbc.l());
        EXPECT(0x5da6, gbc.sp());
        EXPECT(0xbb0d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbb0b));
        EXPECT(0xa8, gbc.readMem(0xbb0c));
        // CB A8 010B
        gbc.setState(0x2a64, 0x3125, 0xb410, 0x6a34, 0xd629, 0xb30c, 0x0, 0x1);
        gbc.writeMem(0x2a64, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xb4, gbc.a());
        EXPECT(0x4a, gbc.b());
        EXPECT(0x34, gbc.c());
        EXPECT(0xd6, gbc.d());
        EXPECT(0x29, gbc.e());
        EXPECT(0xb3, gbc.h());
        EXPECT(0xc, gbc.l());
        EXPECT(0x3125, gbc.sp());
        EXPECT(0x2a66, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 010C
        gbc.setState(0x714a, 0x2ca2, 0x5470, 0x5506, 0x110b, 0xa848, 0x0, 0x1);
        gbc.writeMem(0x714a, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x54, gbc.a());
        EXPECT(0x55, gbc.b());
        EXPECT(0x6, gbc.c());
        EXPECT(0x11, gbc.d());
        EXPECT(0xb, gbc.e());
        EXPECT(0xa8, gbc.h());
        EXPECT(0x48, gbc.l());
        EXPECT(0x2ca2, gbc.sp());
        EXPECT(0x714c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 010D
        gbc.setState(0xe7ad, 0xeec7, 0xf6d0, 0xa3c5, 0xc840, 0xa8ef, 0x1, 0x0);
        gbc.writeMem(0xe7ad, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xf6, gbc.a());
        EXPECT(0x83, gbc.b());
        EXPECT(0xc5, gbc.c());
        EXPECT(0xc8, gbc.d());
        EXPECT(0x40, gbc.e());
        EXPECT(0xa8, gbc.h());
        EXPECT(0xef, gbc.l());
        EXPECT(0xeec7, gbc.sp());
        EXPECT(0xe7af, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe7ad));
        EXPECT(0xa8, gbc.readMem(0xe7ae));
        // CB A8 010E
        gbc.setState(0xcaa4, 0x137, 0x1660, 0x46dd, 0x561b, 0xf890, 0x1, 0x1);
        gbc.writeMem(0xcaa4, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x16, gbc.a());
        EXPECT(0x46, gbc.b());
        EXPECT(0xdd, gbc.c());
        EXPECT(0x56, gbc.d());
        EXPECT(0x1b, gbc.e());
        EXPECT(0xf8, gbc.h());
        EXPECT(0x90, gbc.l());
        EXPECT(0x137, gbc.sp());
        EXPECT(0xcaa6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcaa4));
        EXPECT(0xa8, gbc.readMem(0xcaa5));
        // CB A8 010F
        gbc.setState(0x738c, 0xc352, 0x28c0, 0xdc2a, 0x2cee, 0xb3c6, 0x1, 0x0);
        gbc.writeMem(0x738c, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x28, gbc.a());
        EXPECT(0xdc, gbc.b());
        EXPECT(0x2a, gbc.c());
        EXPECT(0x2c, gbc.d());
        EXPECT(0xee, gbc.e());
        EXPECT(0xb3, gbc.h());
        EXPECT(0xc6, gbc.l());
        EXPECT(0xc352, gbc.sp());
        EXPECT(0x738e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 0110
        gbc.setState(0x283f, 0x6630, 0x1cd0, 0xd4c1, 0xdea8, 0xf576, 0x0, 0x0);
        gbc.writeMem(0x283f, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x1c, gbc.a());
        EXPECT(0xd4, gbc.b());
        EXPECT(0xc1, gbc.c());
        EXPECT(0xde, gbc.d());
        EXPECT(0xa8, gbc.e());
        EXPECT(0xf5, gbc.h());
        EXPECT(0x76, gbc.l());
        EXPECT(0x6630, gbc.sp());
        EXPECT(0x2841, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 0111
        gbc.setState(0x605b, 0x164f, 0xb820, 0x7aa, 0xb541, 0x4c19, 0x1, 0x1);
        gbc.writeMem(0x605b, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xb8, gbc.a());
        EXPECT(0x7, gbc.b());
        EXPECT(0xaa, gbc.c());
        EXPECT(0xb5, gbc.d());
        EXPECT(0x41, gbc.e());
        EXPECT(0x4c, gbc.h());
        EXPECT(0x19, gbc.l());
        EXPECT(0x164f, gbc.sp());
        EXPECT(0x605d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 0112
        gbc.setState(0xec8a, 0x1314, 0x5590, 0x84c0, 0x281c, 0xcdfb, 0x0, 0x1);
        gbc.writeMem(0xec8a, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x55, gbc.a());
        EXPECT(0x84, gbc.b());
        EXPECT(0xc0, gbc.c());
        EXPECT(0x28, gbc.d());
        EXPECT(0x1c, gbc.e());
        EXPECT(0xcd, gbc.h());
        EXPECT(0xfb, gbc.l());
        EXPECT(0x1314, gbc.sp());
        EXPECT(0xec8c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xec8a));
        EXPECT(0xa8, gbc.readMem(0xec8b));
        // CB A8 0113
        gbc.setState(0x8027, 0xa77e, 0x4c0, 0x14f8, 0x1ff6, 0x8d5b, 0x1, 0x1);
        gbc.writeMem(0x8027, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x4, gbc.a());
        EXPECT(0x14, gbc.b());
        EXPECT(0xf8, gbc.c());
        EXPECT(0x1f, gbc.d());
        EXPECT(0xf6, gbc.e());
        EXPECT(0x8d, gbc.h());
        EXPECT(0x5b, gbc.l());
        EXPECT(0xa77e, gbc.sp());
        EXPECT(0x8029, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8027));
        EXPECT(0xa8, gbc.readMem(0x8028));
        // CB A8 0114
        gbc.setState(0x3b6d, 0x3c6b, 0x98e0, 0xdb9b, 0x4c8c, 0xb2eb, 0x0, 0x1);
        gbc.writeMem(0x3b6d, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x98, gbc.a());
        EXPECT(0xdb, gbc.b());
        EXPECT(0x9b, gbc.c());
        EXPECT(0x4c, gbc.d());
        EXPECT(0x8c, gbc.e());
        EXPECT(0xb2, gbc.h());
        EXPECT(0xeb, gbc.l());
        EXPECT(0x3c6b, gbc.sp());
        EXPECT(0x3b6f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 0115
        gbc.setState(0x143b, 0xbe2e, 0xe590, 0xca5e, 0x28e2, 0xa699, 0x0, 0x0);
        gbc.writeMem(0x143b, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xe5, gbc.a());
        EXPECT(0xca, gbc.b());
        EXPECT(0x5e, gbc.c());
        EXPECT(0x28, gbc.d());
        EXPECT(0xe2, gbc.e());
        EXPECT(0xa6, gbc.h());
        EXPECT(0x99, gbc.l());
        EXPECT(0xbe2e, gbc.sp());
        EXPECT(0x143d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 0116
        gbc.setState(0x1d0e, 0x6215, 0xb360, 0x147e, 0x2ca6, 0xb5e2, 0x1, 0x1);
        gbc.writeMem(0x1d0e, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xb3, gbc.a());
        EXPECT(0x14, gbc.b());
        EXPECT(0x7e, gbc.c());
        EXPECT(0x2c, gbc.d());
        EXPECT(0xa6, gbc.e());
        EXPECT(0xb5, gbc.h());
        EXPECT(0xe2, gbc.l());
        EXPECT(0x6215, gbc.sp());
        EXPECT(0x1d10, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 0118
        gbc.setState(0x39ba, 0x506c, 0xbd00, 0x8ebf, 0x945e, 0x7c8, 0x1, 0x1);
        gbc.writeMem(0x39ba, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xbd, gbc.a());
        EXPECT(0x8e, gbc.b());
        EXPECT(0xbf, gbc.c());
        EXPECT(0x94, gbc.d());
        EXPECT(0x5e, gbc.e());
        EXPECT(0x7, gbc.h());
        EXPECT(0xc8, gbc.l());
        EXPECT(0x506c, gbc.sp());
        EXPECT(0x39bc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 0119
        gbc.setState(0x3cdc, 0xac2f, 0x3b10, 0xe0a0, 0xd4ac, 0x4b93, 0x1, 0x1);
        gbc.writeMem(0x3cdc, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x3b, gbc.a());
        EXPECT(0xc0, gbc.b());
        EXPECT(0xa0, gbc.c());
        EXPECT(0xd4, gbc.d());
        EXPECT(0xac, gbc.e());
        EXPECT(0x4b, gbc.h());
        EXPECT(0x93, gbc.l());
        EXPECT(0xac2f, gbc.sp());
        EXPECT(0x3cde, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 011A
        gbc.setState(0x47d, 0xde5f, 0x3e30, 0xc5c0, 0xa3d2, 0xe336, 0x0, 0x1);
        gbc.writeMem(0x47d, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x3e, gbc.a());
        EXPECT(0xc5, gbc.b());
        EXPECT(0xc0, gbc.c());
        EXPECT(0xa3, gbc.d());
        EXPECT(0xd2, gbc.e());
        EXPECT(0xe3, gbc.h());
        EXPECT(0x36, gbc.l());
        EXPECT(0xde5f, gbc.sp());
        EXPECT(0x47f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 011B
        gbc.setState(0xddf1, 0xa040, 0xa5e0, 0xbf50, 0x3db6, 0x1b1d, 0x0, 0x1);
        gbc.writeMem(0xddf1, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xa5, gbc.a());
        EXPECT(0x9f, gbc.b());
        EXPECT(0x50, gbc.c());
        EXPECT(0x3d, gbc.d());
        EXPECT(0xb6, gbc.e());
        EXPECT(0x1b, gbc.h());
        EXPECT(0x1d, gbc.l());
        EXPECT(0xa040, gbc.sp());
        EXPECT(0xddf3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xddf1));
        EXPECT(0xa8, gbc.readMem(0xddf2));
        // CB A8 011C
        gbc.setState(0xc676, 0xb16f, 0x3170, 0x6036, 0xac96, 0x3059, 0x0, 0x0);
        gbc.writeMem(0xc676, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x31, gbc.a());
        EXPECT(0x40, gbc.b());
        EXPECT(0x36, gbc.c());
        EXPECT(0xac, gbc.d());
        EXPECT(0x96, gbc.e());
        EXPECT(0x30, gbc.h());
        EXPECT(0x59, gbc.l());
        EXPECT(0xb16f, gbc.sp());
        EXPECT(0xc678, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc676));
        EXPECT(0xa8, gbc.readMem(0xc677));
        // CB A8 011D
        gbc.setState(0x4a5e, 0x3657, 0xd680, 0x8737, 0x7675, 0x4885, 0x1, 0x0);
        gbc.writeMem(0x4a5e, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xd6, gbc.a());
        EXPECT(0x87, gbc.b());
        EXPECT(0x37, gbc.c());
        EXPECT(0x76, gbc.d());
        EXPECT(0x75, gbc.e());
        EXPECT(0x48, gbc.h());
        EXPECT(0x85, gbc.l());
        EXPECT(0x3657, gbc.sp());
        EXPECT(0x4a60, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 011E
        gbc.setState(0xa17f, 0x1d02, 0xb380, 0x6c49, 0x1638, 0xc56, 0x0, 0x0);
        gbc.writeMem(0xa17f, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xb3, gbc.a());
        EXPECT(0x4c, gbc.b());
        EXPECT(0x49, gbc.c());
        EXPECT(0x16, gbc.d());
        EXPECT(0x38, gbc.e());
        EXPECT(0xc, gbc.h());
        EXPECT(0x56, gbc.l());
        EXPECT(0x1d02, gbc.sp());
        EXPECT(0xa181, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa17f));
        EXPECT(0xa8, gbc.readMem(0xa180));
        // CB A8 011F
        gbc.setState(0x50ce, 0xbea5, 0x8e60, 0x70d0, 0xbba9, 0xf3af, 0x1, 0x0);
        gbc.writeMem(0x50ce, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x8e, gbc.a());
        EXPECT(0x50, gbc.b());
        EXPECT(0xd0, gbc.c());
        EXPECT(0xbb, gbc.d());
        EXPECT(0xa9, gbc.e());
        EXPECT(0xf3, gbc.h());
        EXPECT(0xaf, gbc.l());
        EXPECT(0xbea5, gbc.sp());
        EXPECT(0x50d0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 0120
        gbc.setState(0x63ae, 0xdacf, 0x20e0, 0x6c00, 0x8638, 0x866d, 0x1, 0x0);
        gbc.writeMem(0x63ae, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x20, gbc.a());
        EXPECT(0x4c, gbc.b());
        EXPECT(0x0, gbc.c());
        EXPECT(0x86, gbc.d());
        EXPECT(0x38, gbc.e());
        EXPECT(0x86, gbc.h());
        EXPECT(0x6d, gbc.l());
        EXPECT(0xdacf, gbc.sp());
        EXPECT(0x63b0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 0121
        gbc.setState(0x752, 0x8b09, 0x7e60, 0x58e2, 0xe31c, 0xb3b9, 0x0, 0x0);
        gbc.writeMem(0x752, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x7e, gbc.a());
        EXPECT(0x58, gbc.b());
        EXPECT(0xe2, gbc.c());
        EXPECT(0xe3, gbc.d());
        EXPECT(0x1c, gbc.e());
        EXPECT(0xb3, gbc.h());
        EXPECT(0xb9, gbc.l());
        EXPECT(0x8b09, gbc.sp());
        EXPECT(0x754, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 0122
        gbc.setState(0xefa2, 0xd5bc, 0xc60, 0x29ce, 0xbe08, 0x78aa, 0x0, 0x0);
        gbc.writeMem(0xefa2, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xc, gbc.a());
        EXPECT(0x9, gbc.b());
        EXPECT(0xce, gbc.c());
        EXPECT(0xbe, gbc.d());
        EXPECT(0x8, gbc.e());
        EXPECT(0x78, gbc.h());
        EXPECT(0xaa, gbc.l());
        EXPECT(0xd5bc, gbc.sp());
        EXPECT(0xefa4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xefa2));
        EXPECT(0xa8, gbc.readMem(0xefa3));
        // CB A8 0124
        gbc.setState(0x3f34, 0xbddd, 0x19a0, 0xa613, 0x1ccd, 0x74ba, 0x0, 0x1);
        gbc.writeMem(0x3f34, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x19, gbc.a());
        EXPECT(0x86, gbc.b());
        EXPECT(0x13, gbc.c());
        EXPECT(0x1c, gbc.d());
        EXPECT(0xcd, gbc.e());
        EXPECT(0x74, gbc.h());
        EXPECT(0xba, gbc.l());
        EXPECT(0xbddd, gbc.sp());
        EXPECT(0x3f36, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 0125
        gbc.setState(0xf39, 0x59f9, 0x9c0, 0x9a03, 0x9540, 0x2b33, 0x0, 0x1);
        gbc.writeMem(0xf39, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x9, gbc.a());
        EXPECT(0x9a, gbc.b());
        EXPECT(0x3, gbc.c());
        EXPECT(0x95, gbc.d());
        EXPECT(0x40, gbc.e());
        EXPECT(0x2b, gbc.h());
        EXPECT(0x33, gbc.l());
        EXPECT(0x59f9, gbc.sp());
        EXPECT(0xf3b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 0126
        gbc.setState(0x8916, 0x632c, 0x1170, 0xe338, 0x6534, 0x32f0, 0x1, 0x0);
        gbc.writeMem(0x8916, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x11, gbc.a());
        EXPECT(0xc3, gbc.b());
        EXPECT(0x38, gbc.c());
        EXPECT(0x65, gbc.d());
        EXPECT(0x34, gbc.e());
        EXPECT(0x32, gbc.h());
        EXPECT(0xf0, gbc.l());
        EXPECT(0x632c, gbc.sp());
        EXPECT(0x8918, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8916));
        EXPECT(0xa8, gbc.readMem(0x8917));
        // CB A8 0127
        gbc.setState(0x194e, 0xd261, 0x3760, 0xb128, 0x8843, 0x8040, 0x1, 0x1);
        gbc.writeMem(0x194e, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x37, gbc.a());
        EXPECT(0x91, gbc.b());
        EXPECT(0x28, gbc.c());
        EXPECT(0x88, gbc.d());
        EXPECT(0x43, gbc.e());
        EXPECT(0x80, gbc.h());
        EXPECT(0x40, gbc.l());
        EXPECT(0xd261, gbc.sp());
        EXPECT(0x1950, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 0128
        gbc.setState(0xb776, 0x5723, 0x2f30, 0x6c4, 0x8f24, 0x9ab, 0x1, 0x1);
        gbc.writeMem(0xb776, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x2f, gbc.a());
        EXPECT(0x6, gbc.b());
        EXPECT(0xc4, gbc.c());
        EXPECT(0x8f, gbc.d());
        EXPECT(0x24, gbc.e());
        EXPECT(0x9, gbc.h());
        EXPECT(0xab, gbc.l());
        EXPECT(0x5723, gbc.sp());
        EXPECT(0xb778, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb776));
        EXPECT(0xa8, gbc.readMem(0xb777));
        // CB A8 0129
        gbc.setState(0x1a72, 0xc5e4, 0x1290, 0x9a8b, 0xa7fa, 0x3eb3, 0x0, 0x0);
        gbc.writeMem(0x1a72, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x12, gbc.a());
        EXPECT(0x9a, gbc.b());
        EXPECT(0x8b, gbc.c());
        EXPECT(0xa7, gbc.d());
        EXPECT(0xfa, gbc.e());
        EXPECT(0x3e, gbc.h());
        EXPECT(0xb3, gbc.l());
        EXPECT(0xc5e4, gbc.sp());
        EXPECT(0x1a74, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 012A
        gbc.setState(0x3016, 0x98be, 0x6240, 0x37fa, 0xd2e5, 0x4dfa, 0x1, 0x0);
        gbc.writeMem(0x3016, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x62, gbc.a());
        EXPECT(0x17, gbc.b());
        EXPECT(0xfa, gbc.c());
        EXPECT(0xd2, gbc.d());
        EXPECT(0xe5, gbc.e());
        EXPECT(0x4d, gbc.h());
        EXPECT(0xfa, gbc.l());
        EXPECT(0x98be, gbc.sp());
        EXPECT(0x3018, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 012B
        gbc.setState(0xd0d0, 0x5b1f, 0x8a30, 0xed29, 0x8b28, 0xa64e, 0x0, 0x1);
        gbc.writeMem(0xd0d0, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x8a, gbc.a());
        EXPECT(0xcd, gbc.b());
        EXPECT(0x29, gbc.c());
        EXPECT(0x8b, gbc.d());
        EXPECT(0x28, gbc.e());
        EXPECT(0xa6, gbc.h());
        EXPECT(0x4e, gbc.l());
        EXPECT(0x5b1f, gbc.sp());
        EXPECT(0xd0d2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd0d0));
        EXPECT(0xa8, gbc.readMem(0xd0d1));
        // CB A8 012C
        gbc.setState(0x6208, 0x58e2, 0xd9a0, 0x317b, 0x96ad, 0x70d3, 0x0, 0x0);
        gbc.writeMem(0x6208, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xd9, gbc.a());
        EXPECT(0x11, gbc.b());
        EXPECT(0x7b, gbc.c());
        EXPECT(0x96, gbc.d());
        EXPECT(0xad, gbc.e());
        EXPECT(0x70, gbc.h());
        EXPECT(0xd3, gbc.l());
        EXPECT(0x58e2, gbc.sp());
        EXPECT(0x620a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 012D
        gbc.setState(0x4970, 0x7bb7, 0x1620, 0xf8a4, 0x7f2, 0x1f68, 0x0, 0x1);
        gbc.writeMem(0x4970, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x16, gbc.a());
        EXPECT(0xd8, gbc.b());
        EXPECT(0xa4, gbc.c());
        EXPECT(0x7, gbc.d());
        EXPECT(0xf2, gbc.e());
        EXPECT(0x1f, gbc.h());
        EXPECT(0x68, gbc.l());
        EXPECT(0x7bb7, gbc.sp());
        EXPECT(0x4972, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 012E
        gbc.setState(0x16c9, 0x67d2, 0xca90, 0x2326, 0x1be4, 0x4828, 0x1, 0x1);
        gbc.writeMem(0x16c9, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xca, gbc.a());
        EXPECT(0x3, gbc.b());
        EXPECT(0x26, gbc.c());
        EXPECT(0x1b, gbc.d());
        EXPECT(0xe4, gbc.e());
        EXPECT(0x48, gbc.h());
        EXPECT(0x28, gbc.l());
        EXPECT(0x67d2, gbc.sp());
        EXPECT(0x16cb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 012F
        gbc.setState(0xb84a, 0xd03e, 0x3600, 0x774c, 0x4c98, 0xd98b, 0x0, 0x0);
        gbc.writeMem(0xb84a, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x36, gbc.a());
        EXPECT(0x57, gbc.b());
        EXPECT(0x4c, gbc.c());
        EXPECT(0x4c, gbc.d());
        EXPECT(0x98, gbc.e());
        EXPECT(0xd9, gbc.h());
        EXPECT(0x8b, gbc.l());
        EXPECT(0xd03e, gbc.sp());
        EXPECT(0xb84c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb84a));
        EXPECT(0xa8, gbc.readMem(0xb84b));
        // CB A8 0130
        gbc.setState(0xe27b, 0x2e06, 0xf870, 0xa6e4, 0xcfe9, 0x4573, 0x0, 0x1);
        gbc.writeMem(0xe27b, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xf8, gbc.a());
        EXPECT(0x86, gbc.b());
        EXPECT(0xe4, gbc.c());
        EXPECT(0xcf, gbc.d());
        EXPECT(0xe9, gbc.e());
        EXPECT(0x45, gbc.h());
        EXPECT(0x73, gbc.l());
        EXPECT(0x2e06, gbc.sp());
        EXPECT(0xe27d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe27b));
        EXPECT(0xa8, gbc.readMem(0xe27c));
        // CB A8 0131
        gbc.setState(0x3a5a, 0x31dd, 0x3cb0, 0xea0a, 0x85d4, 0x2ca7, 0x1, 0x0);
        gbc.writeMem(0x3a5a, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x3c, gbc.a());
        EXPECT(0xca, gbc.b());
        EXPECT(0xa, gbc.c());
        EXPECT(0x85, gbc.d());
        EXPECT(0xd4, gbc.e());
        EXPECT(0x2c, gbc.h());
        EXPECT(0xa7, gbc.l());
        EXPECT(0x31dd, gbc.sp());
        EXPECT(0x3a5c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 0132
        gbc.setState(0x10a, 0x6eb7, 0xb8e0, 0xad78, 0x348, 0x9f49, 0x0, 0x0);
        gbc.writeMem(0x10a, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xb8, gbc.a());
        EXPECT(0x8d, gbc.b());
        EXPECT(0x78, gbc.c());
        EXPECT(0x3, gbc.d());
        EXPECT(0x48, gbc.e());
        EXPECT(0x9f, gbc.h());
        EXPECT(0x49, gbc.l());
        EXPECT(0x6eb7, gbc.sp());
        EXPECT(0x10c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 0133
        gbc.setState(0xc3e9, 0x1bc9, 0x380, 0xf223, 0x2f3f, 0xdd19, 0x1, 0x0);
        gbc.writeMem(0xc3e9, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x3, gbc.a());
        EXPECT(0xd2, gbc.b());
        EXPECT(0x23, gbc.c());
        EXPECT(0x2f, gbc.d());
        EXPECT(0x3f, gbc.e());
        EXPECT(0xdd, gbc.h());
        EXPECT(0x19, gbc.l());
        EXPECT(0x1bc9, gbc.sp());
        EXPECT(0xc3eb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc3e9));
        EXPECT(0xa8, gbc.readMem(0xc3ea));
        // CB A8 0134
        gbc.setState(0x80e3, 0xe73b, 0x8330, 0xccae, 0xb0a4, 0x3ce3, 0x1, 0x1);
        gbc.writeMem(0x80e3, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x83, gbc.a());
        EXPECT(0xcc, gbc.b());
        EXPECT(0xae, gbc.c());
        EXPECT(0xb0, gbc.d());
        EXPECT(0xa4, gbc.e());
        EXPECT(0x3c, gbc.h());
        EXPECT(0xe3, gbc.l());
        EXPECT(0xe73b, gbc.sp());
        EXPECT(0x80e5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x80e3));
        EXPECT(0xa8, gbc.readMem(0x80e4));
        // CB A8 0135
        gbc.setState(0x5f83, 0x164, 0x1b90, 0x557b, 0x18c3, 0x9254, 0x0, 0x1);
        gbc.writeMem(0x5f83, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x1b, gbc.a());
        EXPECT(0x55, gbc.b());
        EXPECT(0x7b, gbc.c());
        EXPECT(0x18, gbc.d());
        EXPECT(0xc3, gbc.e());
        EXPECT(0x92, gbc.h());
        EXPECT(0x54, gbc.l());
        EXPECT(0x164, gbc.sp());
        EXPECT(0x5f85, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 0136
        gbc.setState(0x57e, 0x36ab, 0xc510, 0x3f95, 0x11f7, 0x36e9, 0x1, 0x1);
        gbc.writeMem(0x57e, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xc5, gbc.a());
        EXPECT(0x1f, gbc.b());
        EXPECT(0x95, gbc.c());
        EXPECT(0x11, gbc.d());
        EXPECT(0xf7, gbc.e());
        EXPECT(0x36, gbc.h());
        EXPECT(0xe9, gbc.l());
        EXPECT(0x36ab, gbc.sp());
        EXPECT(0x580, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 0137
        gbc.setState(0x34b0, 0xed85, 0x4d70, 0x839e, 0xacaa, 0xc012, 0x1, 0x1);
        gbc.writeMem(0x34b0, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x4d, gbc.a());
        EXPECT(0x83, gbc.b());
        EXPECT(0x9e, gbc.c());
        EXPECT(0xac, gbc.d());
        EXPECT(0xaa, gbc.e());
        EXPECT(0xc0, gbc.h());
        EXPECT(0x12, gbc.l());
        EXPECT(0xed85, gbc.sp());
        EXPECT(0x34b2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 0138
        gbc.setState(0x1f36, 0x87e8, 0xba00, 0xf4ce, 0xc504, 0xffdb, 0x0, 0x1);
        gbc.writeMem(0x1f36, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xba, gbc.a());
        EXPECT(0xd4, gbc.b());
        EXPECT(0xce, gbc.c());
        EXPECT(0xc5, gbc.d());
        EXPECT(0x4, gbc.e());
        EXPECT(0xff, gbc.h());
        EXPECT(0xdb, gbc.l());
        EXPECT(0x87e8, gbc.sp());
        EXPECT(0x1f38, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 0139
        gbc.setState(0x2880, 0x8f6d, 0x6c80, 0x8cb0, 0x9b02, 0xcfd6, 0x1, 0x1);
        gbc.writeMem(0x2880, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x6c, gbc.a());
        EXPECT(0x8c, gbc.b());
        EXPECT(0xb0, gbc.c());
        EXPECT(0x9b, gbc.d());
        EXPECT(0x2, gbc.e());
        EXPECT(0xcf, gbc.h());
        EXPECT(0xd6, gbc.l());
        EXPECT(0x8f6d, gbc.sp());
        EXPECT(0x2882, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 013A
        gbc.setState(0x3f04, 0xc7b7, 0x8530, 0x7920, 0x8c90, 0x3a43, 0x1, 0x1);
        gbc.writeMem(0x3f04, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x85, gbc.a());
        EXPECT(0x59, gbc.b());
        EXPECT(0x20, gbc.c());
        EXPECT(0x8c, gbc.d());
        EXPECT(0x90, gbc.e());
        EXPECT(0x3a, gbc.h());
        EXPECT(0x43, gbc.l());
        EXPECT(0xc7b7, gbc.sp());
        EXPECT(0x3f06, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 013B
        gbc.setState(0x31c8, 0x2631, 0x7070, 0x8396, 0x59f9, 0xe80f, 0x0, 0x0);
        gbc.writeMem(0x31c8, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x70, gbc.a());
        EXPECT(0x83, gbc.b());
        EXPECT(0x96, gbc.c());
        EXPECT(0x59, gbc.d());
        EXPECT(0xf9, gbc.e());
        EXPECT(0xe8, gbc.h());
        EXPECT(0xf, gbc.l());
        EXPECT(0x2631, gbc.sp());
        EXPECT(0x31ca, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 013C
        gbc.setState(0x1b6f, 0x608b, 0x2340, 0xccde, 0x5b68, 0x6ff5, 0x0, 0x1);
        gbc.writeMem(0x1b6f, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x23, gbc.a());
        EXPECT(0xcc, gbc.b());
        EXPECT(0xde, gbc.c());
        EXPECT(0x5b, gbc.d());
        EXPECT(0x68, gbc.e());
        EXPECT(0x6f, gbc.h());
        EXPECT(0xf5, gbc.l());
        EXPECT(0x608b, gbc.sp());
        EXPECT(0x1b71, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 013D
        gbc.setState(0xe189, 0x2be4, 0x6670, 0xa84c, 0xf402, 0x7a97, 0x0, 0x0);
        gbc.writeMem(0xe189, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x66, gbc.a());
        EXPECT(0x88, gbc.b());
        EXPECT(0x4c, gbc.c());
        EXPECT(0xf4, gbc.d());
        EXPECT(0x2, gbc.e());
        EXPECT(0x7a, gbc.h());
        EXPECT(0x97, gbc.l());
        EXPECT(0x2be4, gbc.sp());
        EXPECT(0xe18b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe189));
        EXPECT(0xa8, gbc.readMem(0xe18a));
        // CB A8 013E
        gbc.setState(0xad33, 0x2e4e, 0x1900, 0xafa3, 0xbaa8, 0x877f, 0x0, 0x0);
        gbc.writeMem(0xad33, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x19, gbc.a());
        EXPECT(0x8f, gbc.b());
        EXPECT(0xa3, gbc.c());
        EXPECT(0xba, gbc.d());
        EXPECT(0xa8, gbc.e());
        EXPECT(0x87, gbc.h());
        EXPECT(0x7f, gbc.l());
        EXPECT(0x2e4e, gbc.sp());
        EXPECT(0xad35, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xad33));
        EXPECT(0xa8, gbc.readMem(0xad34));
        // CB A8 013F
        gbc.setState(0x28c9, 0xabe4, 0x4bb0, 0xe23d, 0x3670, 0xa29f, 0x0, 0x0);
        gbc.writeMem(0x28c9, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x4b, gbc.a());
        EXPECT(0xc2, gbc.b());
        EXPECT(0x3d, gbc.c());
        EXPECT(0x36, gbc.d());
        EXPECT(0x70, gbc.e());
        EXPECT(0xa2, gbc.h());
        EXPECT(0x9f, gbc.l());
        EXPECT(0xabe4, gbc.sp());
        EXPECT(0x28cb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 0140
        gbc.setState(0x95ec, 0x18cb, 0x7140, 0x8e41, 0xc9ef, 0x4812, 0x0, 0x1);
        gbc.writeMem(0x95ec, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x71, gbc.a());
        EXPECT(0x8e, gbc.b());
        EXPECT(0x41, gbc.c());
        EXPECT(0xc9, gbc.d());
        EXPECT(0xef, gbc.e());
        EXPECT(0x48, gbc.h());
        EXPECT(0x12, gbc.l());
        EXPECT(0x18cb, gbc.sp());
        EXPECT(0x95ee, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x95ec));
        EXPECT(0xa8, gbc.readMem(0x95ed));
        // CB A8 0141
        gbc.setState(0xa5b0, 0x8e99, 0x2c60, 0x46bf, 0xdc8b, 0x5115, 0x0, 0x0);
        gbc.writeMem(0xa5b0, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x2c, gbc.a());
        EXPECT(0x46, gbc.b());
        EXPECT(0xbf, gbc.c());
        EXPECT(0xdc, gbc.d());
        EXPECT(0x8b, gbc.e());
        EXPECT(0x51, gbc.h());
        EXPECT(0x15, gbc.l());
        EXPECT(0x8e99, gbc.sp());
        EXPECT(0xa5b2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa5b0));
        EXPECT(0xa8, gbc.readMem(0xa5b1));
        // CB A8 0142
        gbc.setState(0xa7e7, 0x1551, 0x49e0, 0xeca7, 0xf454, 0xb9d0, 0x1, 0x1);
        gbc.writeMem(0xa7e7, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x49, gbc.a());
        EXPECT(0xcc, gbc.b());
        EXPECT(0xa7, gbc.c());
        EXPECT(0xf4, gbc.d());
        EXPECT(0x54, gbc.e());
        EXPECT(0xb9, gbc.h());
        EXPECT(0xd0, gbc.l());
        EXPECT(0x1551, gbc.sp());
        EXPECT(0xa7e9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa7e7));
        EXPECT(0xa8, gbc.readMem(0xa7e8));
        // CB A8 0143
        gbc.setState(0xa2f6, 0x56a5, 0xd0b0, 0x35ed, 0x4f91, 0xf270, 0x1, 0x1);
        gbc.writeMem(0xa2f6, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xd0, gbc.a());
        EXPECT(0x15, gbc.b());
        EXPECT(0xed, gbc.c());
        EXPECT(0x4f, gbc.d());
        EXPECT(0x91, gbc.e());
        EXPECT(0xf2, gbc.h());
        EXPECT(0x70, gbc.l());
        EXPECT(0x56a5, gbc.sp());
        EXPECT(0xa2f8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa2f6));
        EXPECT(0xa8, gbc.readMem(0xa2f7));
        // CB A8 0144
        gbc.setState(0x9e37, 0x8a38, 0x79f0, 0x4dcf, 0x86d2, 0x7093, 0x0, 0x1);
        gbc.writeMem(0x9e37, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x79, gbc.a());
        EXPECT(0x4d, gbc.b());
        EXPECT(0xcf, gbc.c());
        EXPECT(0x86, gbc.d());
        EXPECT(0xd2, gbc.e());
        EXPECT(0x70, gbc.h());
        EXPECT(0x93, gbc.l());
        EXPECT(0x8a38, gbc.sp());
        EXPECT(0x9e39, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9e37));
        EXPECT(0xa8, gbc.readMem(0x9e38));
        // CB A8 0145
        gbc.setState(0x94e3, 0x9b20, 0xcb10, 0x68c6, 0xfdad, 0xf642, 0x1, 0x1);
        gbc.writeMem(0x94e3, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xcb, gbc.a());
        EXPECT(0x48, gbc.b());
        EXPECT(0xc6, gbc.c());
        EXPECT(0xfd, gbc.d());
        EXPECT(0xad, gbc.e());
        EXPECT(0xf6, gbc.h());
        EXPECT(0x42, gbc.l());
        EXPECT(0x9b20, gbc.sp());
        EXPECT(0x94e5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x94e3));
        EXPECT(0xa8, gbc.readMem(0x94e4));
        // CB A8 0147
        gbc.setState(0x2124, 0x1472, 0x7130, 0xca86, 0xb313, 0xf3f9, 0x0, 0x1);
        gbc.writeMem(0x2124, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x71, gbc.a());
        EXPECT(0xca, gbc.b());
        EXPECT(0x86, gbc.c());
        EXPECT(0xb3, gbc.d());
        EXPECT(0x13, gbc.e());
        EXPECT(0xf3, gbc.h());
        EXPECT(0xf9, gbc.l());
        EXPECT(0x1472, gbc.sp());
        EXPECT(0x2126, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 0148
        gbc.setState(0x7bee, 0x5bc, 0x6c80, 0x4ae9, 0x1e78, 0xad7a, 0x0, 0x1);
        gbc.writeMem(0x7bee, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x6c, gbc.a());
        EXPECT(0x4a, gbc.b());
        EXPECT(0xe9, gbc.c());
        EXPECT(0x1e, gbc.d());
        EXPECT(0x78, gbc.e());
        EXPECT(0xad, gbc.h());
        EXPECT(0x7a, gbc.l());
        EXPECT(0x5bc, gbc.sp());
        EXPECT(0x7bf0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 0149
        gbc.setState(0x1ebf, 0xd533, 0x67a0, 0xb887, 0x9096, 0x21ab, 0x1, 0x0);
        gbc.writeMem(0x1ebf, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x67, gbc.a());
        EXPECT(0x98, gbc.b());
        EXPECT(0x87, gbc.c());
        EXPECT(0x90, gbc.d());
        EXPECT(0x96, gbc.e());
        EXPECT(0x21, gbc.h());
        EXPECT(0xab, gbc.l());
        EXPECT(0xd533, gbc.sp());
        EXPECT(0x1ec1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 014A
        gbc.setState(0x8e0c, 0x1958, 0x1cb0, 0xc94a, 0xde56, 0x8935, 0x0, 0x1);
        gbc.writeMem(0x8e0c, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x1c, gbc.a());
        EXPECT(0xc9, gbc.b());
        EXPECT(0x4a, gbc.c());
        EXPECT(0xde, gbc.d());
        EXPECT(0x56, gbc.e());
        EXPECT(0x89, gbc.h());
        EXPECT(0x35, gbc.l());
        EXPECT(0x1958, gbc.sp());
        EXPECT(0x8e0e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8e0c));
        EXPECT(0xa8, gbc.readMem(0x8e0d));
        // CB A8 014B
        gbc.setState(0x980, 0xb735, 0x7f40, 0xf17a, 0xb374, 0x9d69, 0x1, 0x1);
        gbc.writeMem(0x980, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x7f, gbc.a());
        EXPECT(0xd1, gbc.b());
        EXPECT(0x7a, gbc.c());
        EXPECT(0xb3, gbc.d());
        EXPECT(0x74, gbc.e());
        EXPECT(0x9d, gbc.h());
        EXPECT(0x69, gbc.l());
        EXPECT(0xb735, gbc.sp());
        EXPECT(0x982, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 014C
        gbc.setState(0x80b1, 0xfafe, 0x8840, 0x7043, 0xcd83, 0xacd, 0x0, 0x0);
        gbc.writeMem(0x80b1, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x88, gbc.a());
        EXPECT(0x50, gbc.b());
        EXPECT(0x43, gbc.c());
        EXPECT(0xcd, gbc.d());
        EXPECT(0x83, gbc.e());
        EXPECT(0xa, gbc.h());
        EXPECT(0xcd, gbc.l());
        EXPECT(0xfafe, gbc.sp());
        EXPECT(0x80b3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x80b1));
        EXPECT(0xa8, gbc.readMem(0x80b2));
        // CB A8 014D
        gbc.setState(0x4c19, 0x6739, 0xbcc0, 0xd94c, 0x8f7a, 0x2fa1, 0x0, 0x0);
        gbc.writeMem(0x4c19, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xbc, gbc.a());
        EXPECT(0xd9, gbc.b());
        EXPECT(0x4c, gbc.c());
        EXPECT(0x8f, gbc.d());
        EXPECT(0x7a, gbc.e());
        EXPECT(0x2f, gbc.h());
        EXPECT(0xa1, gbc.l());
        EXPECT(0x6739, gbc.sp());
        EXPECT(0x4c1b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 014E
        gbc.setState(0xe511, 0xfc46, 0xdff0, 0x5c24, 0x8973, 0xe319, 0x1, 0x0);
        gbc.writeMem(0xe511, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xdf, gbc.a());
        EXPECT(0x5c, gbc.b());
        EXPECT(0x24, gbc.c());
        EXPECT(0x89, gbc.d());
        EXPECT(0x73, gbc.e());
        EXPECT(0xe3, gbc.h());
        EXPECT(0x19, gbc.l());
        EXPECT(0xfc46, gbc.sp());
        EXPECT(0xe513, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe511));
        EXPECT(0xa8, gbc.readMem(0xe512));
        // CB A8 0150
        gbc.setState(0x99c8, 0xf8de, 0x9f10, 0xa3fb, 0x80b9, 0xbcf4, 0x0, 0x0);
        gbc.writeMem(0x99c8, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x9f, gbc.a());
        EXPECT(0x83, gbc.b());
        EXPECT(0xfb, gbc.c());
        EXPECT(0x80, gbc.d());
        EXPECT(0xb9, gbc.e());
        EXPECT(0xbc, gbc.h());
        EXPECT(0xf4, gbc.l());
        EXPECT(0xf8de, gbc.sp());
        EXPECT(0x99ca, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x99c8));
        EXPECT(0xa8, gbc.readMem(0x99c9));
        // CB A8 0151
        gbc.setState(0xe7be, 0x46a4, 0xb0d0, 0x57f6, 0x8813, 0x3a33, 0x1, 0x0);
        gbc.writeMem(0xe7be, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xb0, gbc.a());
        EXPECT(0x57, gbc.b());
        EXPECT(0xf6, gbc.c());
        EXPECT(0x88, gbc.d());
        EXPECT(0x13, gbc.e());
        EXPECT(0x3a, gbc.h());
        EXPECT(0x33, gbc.l());
        EXPECT(0x46a4, gbc.sp());
        EXPECT(0xe7c0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe7be));
        EXPECT(0xa8, gbc.readMem(0xe7bf));
        // CB A8 0152
        gbc.setState(0x606e, 0x14f7, 0xa910, 0xe671, 0xf7ad, 0x273f, 0x0, 0x0);
        gbc.writeMem(0x606e, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xa9, gbc.a());
        EXPECT(0xc6, gbc.b());
        EXPECT(0x71, gbc.c());
        EXPECT(0xf7, gbc.d());
        EXPECT(0xad, gbc.e());
        EXPECT(0x27, gbc.h());
        EXPECT(0x3f, gbc.l());
        EXPECT(0x14f7, gbc.sp());
        EXPECT(0x6070, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 0153
        gbc.setState(0xd4ba, 0x9c00, 0xb710, 0xf9d7, 0x4345, 0x4777, 0x1, 0x0);
        gbc.writeMem(0xd4ba, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xb7, gbc.a());
        EXPECT(0xd9, gbc.b());
        EXPECT(0xd7, gbc.c());
        EXPECT(0x43, gbc.d());
        EXPECT(0x45, gbc.e());
        EXPECT(0x47, gbc.h());
        EXPECT(0x77, gbc.l());
        EXPECT(0x9c00, gbc.sp());
        EXPECT(0xd4bc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd4ba));
        EXPECT(0xa8, gbc.readMem(0xd4bb));
        // CB A8 0154
        gbc.setState(0x9af2, 0xbd79, 0x73a0, 0xd966, 0x11d9, 0x2885, 0x1, 0x0);
        gbc.writeMem(0x9af2, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x73, gbc.a());
        EXPECT(0xd9, gbc.b());
        EXPECT(0x66, gbc.c());
        EXPECT(0x11, gbc.d());
        EXPECT(0xd9, gbc.e());
        EXPECT(0x28, gbc.h());
        EXPECT(0x85, gbc.l());
        EXPECT(0xbd79, gbc.sp());
        EXPECT(0x9af4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9af2));
        EXPECT(0xa8, gbc.readMem(0x9af3));
        // CB A8 0155
        gbc.setState(0x6d5a, 0x5d64, 0xa810, 0x9e19, 0xc15e, 0xa5c8, 0x1, 0x0);
        gbc.writeMem(0x6d5a, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xa8, gbc.a());
        EXPECT(0x9e, gbc.b());
        EXPECT(0x19, gbc.c());
        EXPECT(0xc1, gbc.d());
        EXPECT(0x5e, gbc.e());
        EXPECT(0xa5, gbc.h());
        EXPECT(0xc8, gbc.l());
        EXPECT(0x5d64, gbc.sp());
        EXPECT(0x6d5c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 0156
        gbc.setState(0x4d2b, 0xa02b, 0x9040, 0x9b06, 0x9d37, 0xc78d, 0x1, 0x1);
        gbc.writeMem(0x4d2b, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x90, gbc.a());
        EXPECT(0x9b, gbc.b());
        EXPECT(0x6, gbc.c());
        EXPECT(0x9d, gbc.d());
        EXPECT(0x37, gbc.e());
        EXPECT(0xc7, gbc.h());
        EXPECT(0x8d, gbc.l());
        EXPECT(0xa02b, gbc.sp());
        EXPECT(0x4d2d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 0158
        gbc.setState(0xca4a, 0xb5b9, 0xf270, 0x84be, 0x5273, 0x9a6f, 0x0, 0x0);
        gbc.writeMem(0xca4a, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xf2, gbc.a());
        EXPECT(0x84, gbc.b());
        EXPECT(0xbe, gbc.c());
        EXPECT(0x52, gbc.d());
        EXPECT(0x73, gbc.e());
        EXPECT(0x9a, gbc.h());
        EXPECT(0x6f, gbc.l());
        EXPECT(0xb5b9, gbc.sp());
        EXPECT(0xca4c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xca4a));
        EXPECT(0xa8, gbc.readMem(0xca4b));
        // CB A8 0159
        gbc.setState(0x8190, 0x5813, 0xc0d0, 0xd43, 0x87f1, 0x1ad3, 0x0, 0x1);
        gbc.writeMem(0x8190, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xc0, gbc.a());
        EXPECT(0xd, gbc.b());
        EXPECT(0x43, gbc.c());
        EXPECT(0x87, gbc.d());
        EXPECT(0xf1, gbc.e());
        EXPECT(0x1a, gbc.h());
        EXPECT(0xd3, gbc.l());
        EXPECT(0x5813, gbc.sp());
        EXPECT(0x8192, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8190));
        EXPECT(0xa8, gbc.readMem(0x8191));
        // CB A8 015B
        gbc.setState(0xa066, 0x3e96, 0x6520, 0x3ecc, 0xdcb1, 0x3e99, 0x0, 0x0);
        gbc.writeMem(0xa066, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x65, gbc.a());
        EXPECT(0x1e, gbc.b());
        EXPECT(0xcc, gbc.c());
        EXPECT(0xdc, gbc.d());
        EXPECT(0xb1, gbc.e());
        EXPECT(0x3e, gbc.h());
        EXPECT(0x99, gbc.l());
        EXPECT(0x3e96, gbc.sp());
        EXPECT(0xa068, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa066));
        EXPECT(0xa8, gbc.readMem(0xa067));
        // CB A8 015D
        gbc.setState(0x935f, 0x610d, 0x68e0, 0xc229, 0xe749, 0xfef9, 0x1, 0x1);
        gbc.writeMem(0x935f, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x68, gbc.a());
        EXPECT(0xc2, gbc.b());
        EXPECT(0x29, gbc.c());
        EXPECT(0xe7, gbc.d());
        EXPECT(0x49, gbc.e());
        EXPECT(0xfe, gbc.h());
        EXPECT(0xf9, gbc.l());
        EXPECT(0x610d, gbc.sp());
        EXPECT(0x9361, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x935f));
        EXPECT(0xa8, gbc.readMem(0x9360));
        // CB A8 015E
        gbc.setState(0x4b57, 0xd285, 0xa00, 0x45b1, 0x11e4, 0x5f6e, 0x1, 0x1);
        gbc.writeMem(0x4b57, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xa, gbc.a());
        EXPECT(0x45, gbc.b());
        EXPECT(0xb1, gbc.c());
        EXPECT(0x11, gbc.d());
        EXPECT(0xe4, gbc.e());
        EXPECT(0x5f, gbc.h());
        EXPECT(0x6e, gbc.l());
        EXPECT(0xd285, gbc.sp());
        EXPECT(0x4b59, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 015F
        gbc.setState(0xcb5c, 0xeaeb, 0x7190, 0x4c7c, 0xcd51, 0xf80f, 0x1, 0x1);
        gbc.writeMem(0xcb5c, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x71, gbc.a());
        EXPECT(0x4c, gbc.b());
        EXPECT(0x7c, gbc.c());
        EXPECT(0xcd, gbc.d());
        EXPECT(0x51, gbc.e());
        EXPECT(0xf8, gbc.h());
        EXPECT(0xf, gbc.l());
        EXPECT(0xeaeb, gbc.sp());
        EXPECT(0xcb5e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcb5c));
        EXPECT(0xa8, gbc.readMem(0xcb5d));
        // CB A8 0161
        gbc.setState(0x319b, 0x3784, 0xa400, 0x5575, 0xf095, 0xa0ec, 0x1, 0x0);
        gbc.writeMem(0x319b, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xa4, gbc.a());
        EXPECT(0x55, gbc.b());
        EXPECT(0x75, gbc.c());
        EXPECT(0xf0, gbc.d());
        EXPECT(0x95, gbc.e());
        EXPECT(0xa0, gbc.h());
        EXPECT(0xec, gbc.l());
        EXPECT(0x3784, gbc.sp());
        EXPECT(0x319d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 0162
        gbc.setState(0x41ed, 0x6c56, 0x5f0, 0xf88, 0x971c, 0x78ec, 0x1, 0x1);
        gbc.writeMem(0x41ed, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x5, gbc.a());
        EXPECT(0xf, gbc.b());
        EXPECT(0x88, gbc.c());
        EXPECT(0x97, gbc.d());
        EXPECT(0x1c, gbc.e());
        EXPECT(0x78, gbc.h());
        EXPECT(0xec, gbc.l());
        EXPECT(0x6c56, gbc.sp());
        EXPECT(0x41ef, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 0163
        gbc.setState(0x3068, 0x18a4, 0x9a80, 0x34f5, 0x3e88, 0x1d18, 0x1, 0x1);
        gbc.writeMem(0x3068, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x9a, gbc.a());
        EXPECT(0x14, gbc.b());
        EXPECT(0xf5, gbc.c());
        EXPECT(0x3e, gbc.d());
        EXPECT(0x88, gbc.e());
        EXPECT(0x1d, gbc.h());
        EXPECT(0x18, gbc.l());
        EXPECT(0x18a4, gbc.sp());
        EXPECT(0x306a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 0165
        gbc.setState(0xb7f7, 0x5c7, 0xa130, 0x808b, 0xdc98, 0xe058, 0x1, 0x0);
        gbc.writeMem(0xb7f7, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xa1, gbc.a());
        EXPECT(0x80, gbc.b());
        EXPECT(0x8b, gbc.c());
        EXPECT(0xdc, gbc.d());
        EXPECT(0x98, gbc.e());
        EXPECT(0xe0, gbc.h());
        EXPECT(0x58, gbc.l());
        EXPECT(0x5c7, gbc.sp());
        EXPECT(0xb7f9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb7f7));
        EXPECT(0xa8, gbc.readMem(0xb7f8));
        // CB A8 0166
        gbc.setState(0x46f3, 0x8604, 0x5f60, 0x17f3, 0xc8b5, 0x164f, 0x0, 0x1);
        gbc.writeMem(0x46f3, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x5f, gbc.a());
        EXPECT(0x17, gbc.b());
        EXPECT(0xf3, gbc.c());
        EXPECT(0xc8, gbc.d());
        EXPECT(0xb5, gbc.e());
        EXPECT(0x16, gbc.h());
        EXPECT(0x4f, gbc.l());
        EXPECT(0x8604, gbc.sp());
        EXPECT(0x46f5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 0167
        gbc.setState(0x42e6, 0x2cc1, 0x8d30, 0xbf30, 0x4cd9, 0xb6a, 0x0, 0x1);
        gbc.writeMem(0x42e6, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x8d, gbc.a());
        EXPECT(0x9f, gbc.b());
        EXPECT(0x30, gbc.c());
        EXPECT(0x4c, gbc.d());
        EXPECT(0xd9, gbc.e());
        EXPECT(0xb, gbc.h());
        EXPECT(0x6a, gbc.l());
        EXPECT(0x2cc1, gbc.sp());
        EXPECT(0x42e8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 0168
        gbc.setState(0xe10d, 0xfa20, 0x2850, 0x2786, 0x8ec7, 0xc5e6, 0x0, 0x1);
        gbc.writeMem(0xe10d, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x28, gbc.a());
        EXPECT(0x7, gbc.b());
        EXPECT(0x86, gbc.c());
        EXPECT(0x8e, gbc.d());
        EXPECT(0xc7, gbc.e());
        EXPECT(0xc5, gbc.h());
        EXPECT(0xe6, gbc.l());
        EXPECT(0xfa20, gbc.sp());
        EXPECT(0xe10f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe10d));
        EXPECT(0xa8, gbc.readMem(0xe10e));
        // CB A8 0169
        gbc.setState(0x57a2, 0x537d, 0x3cb0, 0x80d4, 0xe28, 0xf3ed, 0x1, 0x0);
        gbc.writeMem(0x57a2, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x3c, gbc.a());
        EXPECT(0x80, gbc.b());
        EXPECT(0xd4, gbc.c());
        EXPECT(0xe, gbc.d());
        EXPECT(0x28, gbc.e());
        EXPECT(0xf3, gbc.h());
        EXPECT(0xed, gbc.l());
        EXPECT(0x537d, gbc.sp());
        EXPECT(0x57a4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 016B
        gbc.setState(0xbc64, 0x631a, 0xfd60, 0x7e9a, 0xdd25, 0x4f8f, 0x0, 0x1);
        gbc.writeMem(0xbc64, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xfd, gbc.a());
        EXPECT(0x5e, gbc.b());
        EXPECT(0x9a, gbc.c());
        EXPECT(0xdd, gbc.d());
        EXPECT(0x25, gbc.e());
        EXPECT(0x4f, gbc.h());
        EXPECT(0x8f, gbc.l());
        EXPECT(0x631a, gbc.sp());
        EXPECT(0xbc66, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbc64));
        EXPECT(0xa8, gbc.readMem(0xbc65));
        // CB A8 016C
        gbc.setState(0x4278, 0x9cda, 0x7710, 0x23a0, 0xc03f, 0x1c95, 0x1, 0x0);
        gbc.writeMem(0x4278, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x77, gbc.a());
        EXPECT(0x3, gbc.b());
        EXPECT(0xa0, gbc.c());
        EXPECT(0xc0, gbc.d());
        EXPECT(0x3f, gbc.e());
        EXPECT(0x1c, gbc.h());
        EXPECT(0x95, gbc.l());
        EXPECT(0x9cda, gbc.sp());
        EXPECT(0x427a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 016E
        gbc.setState(0xad36, 0x85ac, 0xac90, 0xcf91, 0x23c8, 0xcdc6, 0x1, 0x0);
        gbc.writeMem(0xad36, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xac, gbc.a());
        EXPECT(0xcf, gbc.b());
        EXPECT(0x91, gbc.c());
        EXPECT(0x23, gbc.d());
        EXPECT(0xc8, gbc.e());
        EXPECT(0xcd, gbc.h());
        EXPECT(0xc6, gbc.l());
        EXPECT(0x85ac, gbc.sp());
        EXPECT(0xad38, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xad36));
        EXPECT(0xa8, gbc.readMem(0xad37));
        // CB A8 016F
        gbc.setState(0x4ae6, 0x87a0, 0xb210, 0xc28e, 0x3a2b, 0xbb31, 0x1, 0x1);
        gbc.writeMem(0x4ae6, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xb2, gbc.a());
        EXPECT(0xc2, gbc.b());
        EXPECT(0x8e, gbc.c());
        EXPECT(0x3a, gbc.d());
        EXPECT(0x2b, gbc.e());
        EXPECT(0xbb, gbc.h());
        EXPECT(0x31, gbc.l());
        EXPECT(0x87a0, gbc.sp());
        EXPECT(0x4ae8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 0170
        gbc.setState(0x2311, 0xb3c1, 0xb190, 0x9005, 0x6f4d, 0x48f0, 0x1, 0x1);
        gbc.writeMem(0x2311, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xb1, gbc.a());
        EXPECT(0x90, gbc.b());
        EXPECT(0x5, gbc.c());
        EXPECT(0x6f, gbc.d());
        EXPECT(0x4d, gbc.e());
        EXPECT(0x48, gbc.h());
        EXPECT(0xf0, gbc.l());
        EXPECT(0xb3c1, gbc.sp());
        EXPECT(0x2313, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 0171
        gbc.setState(0x3f66, 0x7a0c, 0x6eb0, 0x9132, 0xc1c9, 0xc8b5, 0x0, 0x0);
        gbc.writeMem(0x3f66, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x6e, gbc.a());
        EXPECT(0x91, gbc.b());
        EXPECT(0x32, gbc.c());
        EXPECT(0xc1, gbc.d());
        EXPECT(0xc9, gbc.e());
        EXPECT(0xc8, gbc.h());
        EXPECT(0xb5, gbc.l());
        EXPECT(0x7a0c, gbc.sp());
        EXPECT(0x3f68, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 0172
        gbc.setState(0x5641, 0x33e6, 0xec90, 0xb756, 0xdec6, 0x14ff, 0x0, 0x0);
        gbc.writeMem(0x5641, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xec, gbc.a());
        EXPECT(0x97, gbc.b());
        EXPECT(0x56, gbc.c());
        EXPECT(0xde, gbc.d());
        EXPECT(0xc6, gbc.e());
        EXPECT(0x14, gbc.h());
        EXPECT(0xff, gbc.l());
        EXPECT(0x33e6, gbc.sp());
        EXPECT(0x5643, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 0173
        gbc.setState(0x873f, 0x98dd, 0xb090, 0x83be, 0xcc38, 0xc9df, 0x1, 0x0);
        gbc.writeMem(0x873f, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xb0, gbc.a());
        EXPECT(0x83, gbc.b());
        EXPECT(0xbe, gbc.c());
        EXPECT(0xcc, gbc.d());
        EXPECT(0x38, gbc.e());
        EXPECT(0xc9, gbc.h());
        EXPECT(0xdf, gbc.l());
        EXPECT(0x98dd, gbc.sp());
        EXPECT(0x8741, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x873f));
        EXPECT(0xa8, gbc.readMem(0x8740));
        // CB A8 0174
        gbc.setState(0x5420, 0x5254, 0x9020, 0xa606, 0xd801, 0x19a2, 0x1, 0x1);
        gbc.writeMem(0x5420, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x90, gbc.a());
        EXPECT(0x86, gbc.b());
        EXPECT(0x6, gbc.c());
        EXPECT(0xd8, gbc.d());
        EXPECT(0x1, gbc.e());
        EXPECT(0x19, gbc.h());
        EXPECT(0xa2, gbc.l());
        EXPECT(0x5254, gbc.sp());
        EXPECT(0x5422, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 0175
        gbc.setState(0xb36b, 0x14ab, 0x1430, 0xaa29, 0xb062, 0xafca, 0x1, 0x0);
        gbc.writeMem(0xb36b, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x14, gbc.a());
        EXPECT(0x8a, gbc.b());
        EXPECT(0x29, gbc.c());
        EXPECT(0xb0, gbc.d());
        EXPECT(0x62, gbc.e());
        EXPECT(0xaf, gbc.h());
        EXPECT(0xca, gbc.l());
        EXPECT(0x14ab, gbc.sp());
        EXPECT(0xb36d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb36b));
        EXPECT(0xa8, gbc.readMem(0xb36c));
        // CB A8 0176
        gbc.setState(0x6e34, 0x4082, 0xaa20, 0xbaca, 0x7181, 0xbfc4, 0x1, 0x0);
        gbc.writeMem(0x6e34, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xaa, gbc.a());
        EXPECT(0x9a, gbc.b());
        EXPECT(0xca, gbc.c());
        EXPECT(0x71, gbc.d());
        EXPECT(0x81, gbc.e());
        EXPECT(0xbf, gbc.h());
        EXPECT(0xc4, gbc.l());
        EXPECT(0x4082, gbc.sp());
        EXPECT(0x6e36, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 0177
        gbc.setState(0x4bb0, 0x7412, 0x1890, 0x6a4a, 0x3d6d, 0xedd3, 0x0, 0x1);
        gbc.writeMem(0x4bb0, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x18, gbc.a());
        EXPECT(0x4a, gbc.b());
        EXPECT(0x4a, gbc.c());
        EXPECT(0x3d, gbc.d());
        EXPECT(0x6d, gbc.e());
        EXPECT(0xed, gbc.h());
        EXPECT(0xd3, gbc.l());
        EXPECT(0x7412, gbc.sp());
        EXPECT(0x4bb2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 0178
        gbc.setState(0x3421, 0xdb95, 0xb820, 0xbdf1, 0xee48, 0x97ee, 0x0, 0x1);
        gbc.writeMem(0x3421, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xb8, gbc.a());
        EXPECT(0x9d, gbc.b());
        EXPECT(0xf1, gbc.c());
        EXPECT(0xee, gbc.d());
        EXPECT(0x48, gbc.e());
        EXPECT(0x97, gbc.h());
        EXPECT(0xee, gbc.l());
        EXPECT(0xdb95, gbc.sp());
        EXPECT(0x3423, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 0179
        gbc.setState(0xd745, 0x7f3b, 0x6f50, 0x9790, 0x6ebe, 0xe8f, 0x1, 0x1);
        gbc.writeMem(0xd745, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x6f, gbc.a());
        EXPECT(0x97, gbc.b());
        EXPECT(0x90, gbc.c());
        EXPECT(0x6e, gbc.d());
        EXPECT(0xbe, gbc.e());
        EXPECT(0xe, gbc.h());
        EXPECT(0x8f, gbc.l());
        EXPECT(0x7f3b, gbc.sp());
        EXPECT(0xd747, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd745));
        EXPECT(0xa8, gbc.readMem(0xd746));
        // CB A8 017A
        gbc.setState(0xe5d0, 0x973c, 0x6ef0, 0x642a, 0x336d, 0x92a9, 0x1, 0x0);
        gbc.writeMem(0xe5d0, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x6e, gbc.a());
        EXPECT(0x44, gbc.b());
        EXPECT(0x2a, gbc.c());
        EXPECT(0x33, gbc.d());
        EXPECT(0x6d, gbc.e());
        EXPECT(0x92, gbc.h());
        EXPECT(0xa9, gbc.l());
        EXPECT(0x973c, gbc.sp());
        EXPECT(0xe5d2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe5d0));
        EXPECT(0xa8, gbc.readMem(0xe5d1));
        // CB A8 017B
        gbc.setState(0x7e41, 0xd0b3, 0xfd20, 0x7c6f, 0xed33, 0x35e9, 0x0, 0x1);
        gbc.writeMem(0x7e41, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xfd, gbc.a());
        EXPECT(0x5c, gbc.b());
        EXPECT(0x6f, gbc.c());
        EXPECT(0xed, gbc.d());
        EXPECT(0x33, gbc.e());
        EXPECT(0x35, gbc.h());
        EXPECT(0xe9, gbc.l());
        EXPECT(0xd0b3, gbc.sp());
        EXPECT(0x7e43, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 017C
        gbc.setState(0xcc96, 0x5642, 0x7960, 0x9e1c, 0x9fd1, 0x830e, 0x0, 0x1);
        gbc.writeMem(0xcc96, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x79, gbc.a());
        EXPECT(0x9e, gbc.b());
        EXPECT(0x1c, gbc.c());
        EXPECT(0x9f, gbc.d());
        EXPECT(0xd1, gbc.e());
        EXPECT(0x83, gbc.h());
        EXPECT(0xe, gbc.l());
        EXPECT(0x5642, gbc.sp());
        EXPECT(0xcc98, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcc96));
        EXPECT(0xa8, gbc.readMem(0xcc97));
        // CB A8 017D
        gbc.setState(0xbfb9, 0xdb6c, 0x40, 0x3434, 0xced3, 0x1afb, 0x0, 0x0);
        gbc.writeMem(0xbfb9, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x14, gbc.b());
        EXPECT(0x34, gbc.c());
        EXPECT(0xce, gbc.d());
        EXPECT(0xd3, gbc.e());
        EXPECT(0x1a, gbc.h());
        EXPECT(0xfb, gbc.l());
        EXPECT(0xdb6c, gbc.sp());
        EXPECT(0xbfbb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbfb9));
        EXPECT(0xa8, gbc.readMem(0xbfba));
        // CB A8 017E
        gbc.setState(0x1935, 0xede5, 0xad20, 0x99ea, 0x7566, 0xd278, 0x0, 0x1);
        gbc.writeMem(0x1935, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xad, gbc.a());
        EXPECT(0x99, gbc.b());
        EXPECT(0xea, gbc.c());
        EXPECT(0x75, gbc.d());
        EXPECT(0x66, gbc.e());
        EXPECT(0xd2, gbc.h());
        EXPECT(0x78, gbc.l());
        EXPECT(0xede5, gbc.sp());
        EXPECT(0x1937, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 017F
        gbc.setState(0x1782, 0x5e1a, 0xfcd0, 0x7fbb, 0x69af, 0x4b3c, 0x0, 0x1);
        gbc.writeMem(0x1782, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xfc, gbc.a());
        EXPECT(0x5f, gbc.b());
        EXPECT(0xbb, gbc.c());
        EXPECT(0x69, gbc.d());
        EXPECT(0xaf, gbc.e());
        EXPECT(0x4b, gbc.h());
        EXPECT(0x3c, gbc.l());
        EXPECT(0x5e1a, gbc.sp());
        EXPECT(0x1784, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 0180
        gbc.setState(0xd3be, 0x6f5, 0x8fe0, 0x75b7, 0x12ce, 0x453f, 0x0, 0x0);
        gbc.writeMem(0xd3be, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x8f, gbc.a());
        EXPECT(0x55, gbc.b());
        EXPECT(0xb7, gbc.c());
        EXPECT(0x12, gbc.d());
        EXPECT(0xce, gbc.e());
        EXPECT(0x45, gbc.h());
        EXPECT(0x3f, gbc.l());
        EXPECT(0x6f5, gbc.sp());
        EXPECT(0xd3c0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd3be));
        EXPECT(0xa8, gbc.readMem(0xd3bf));
        // CB A8 0181
        gbc.setState(0x1033, 0x9b1a, 0x7270, 0x6620, 0x8b2c, 0x168e, 0x1, 0x0);
        gbc.writeMem(0x1033, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x72, gbc.a());
        EXPECT(0x46, gbc.b());
        EXPECT(0x20, gbc.c());
        EXPECT(0x8b, gbc.d());
        EXPECT(0x2c, gbc.e());
        EXPECT(0x16, gbc.h());
        EXPECT(0x8e, gbc.l());
        EXPECT(0x9b1a, gbc.sp());
        EXPECT(0x1035, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 0182
        gbc.setState(0x1193, 0xcdff, 0xfa70, 0x493f, 0xbc1d, 0xa7f0, 0x0, 0x1);
        gbc.writeMem(0x1193, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xfa, gbc.a());
        EXPECT(0x49, gbc.b());
        EXPECT(0x3f, gbc.c());
        EXPECT(0xbc, gbc.d());
        EXPECT(0x1d, gbc.e());
        EXPECT(0xa7, gbc.h());
        EXPECT(0xf0, gbc.l());
        EXPECT(0xcdff, gbc.sp());
        EXPECT(0x1195, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 0183
        gbc.setState(0x5812, 0x8ff5, 0x78b0, 0xcc6c, 0x8bec, 0x2c1d, 0x0, 0x0);
        gbc.writeMem(0x5812, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x78, gbc.a());
        EXPECT(0xcc, gbc.b());
        EXPECT(0x6c, gbc.c());
        EXPECT(0x8b, gbc.d());
        EXPECT(0xec, gbc.e());
        EXPECT(0x2c, gbc.h());
        EXPECT(0x1d, gbc.l());
        EXPECT(0x8ff5, gbc.sp());
        EXPECT(0x5814, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 0184
        gbc.setState(0xe312, 0xf536, 0x63a0, 0x4f58, 0xeba9, 0x1815, 0x1, 0x0);
        gbc.writeMem(0xe312, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x63, gbc.a());
        EXPECT(0x4f, gbc.b());
        EXPECT(0x58, gbc.c());
        EXPECT(0xeb, gbc.d());
        EXPECT(0xa9, gbc.e());
        EXPECT(0x18, gbc.h());
        EXPECT(0x15, gbc.l());
        EXPECT(0xf536, gbc.sp());
        EXPECT(0xe314, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe312));
        EXPECT(0xa8, gbc.readMem(0xe313));
        // CB A8 0185
        gbc.setState(0xefa6, 0x9fbd, 0xa2c0, 0x674b, 0x9c46, 0x8e87, 0x0, 0x0);
        gbc.writeMem(0xefa6, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xa2, gbc.a());
        EXPECT(0x47, gbc.b());
        EXPECT(0x4b, gbc.c());
        EXPECT(0x9c, gbc.d());
        EXPECT(0x46, gbc.e());
        EXPECT(0x8e, gbc.h());
        EXPECT(0x87, gbc.l());
        EXPECT(0x9fbd, gbc.sp());
        EXPECT(0xefa8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xefa6));
        EXPECT(0xa8, gbc.readMem(0xefa7));
        // CB A8 0186
        gbc.setState(0x9a7c, 0x3a86, 0x8b80, 0xe666, 0xa589, 0x14ae, 0x1, 0x1);
        gbc.writeMem(0x9a7c, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x8b, gbc.a());
        EXPECT(0xc6, gbc.b());
        EXPECT(0x66, gbc.c());
        EXPECT(0xa5, gbc.d());
        EXPECT(0x89, gbc.e());
        EXPECT(0x14, gbc.h());
        EXPECT(0xae, gbc.l());
        EXPECT(0x3a86, gbc.sp());
        EXPECT(0x9a7e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9a7c));
        EXPECT(0xa8, gbc.readMem(0x9a7d));
        // CB A8 0187
        gbc.setState(0xc471, 0x5996, 0x8bb0, 0x95a3, 0x8240, 0x5ff0, 0x0, 0x0);
        gbc.writeMem(0xc471, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x8b, gbc.a());
        EXPECT(0x95, gbc.b());
        EXPECT(0xa3, gbc.c());
        EXPECT(0x82, gbc.d());
        EXPECT(0x40, gbc.e());
        EXPECT(0x5f, gbc.h());
        EXPECT(0xf0, gbc.l());
        EXPECT(0x5996, gbc.sp());
        EXPECT(0xc473, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc471));
        EXPECT(0xa8, gbc.readMem(0xc472));
        // CB A8 0188
        gbc.setState(0x880b, 0x7f3d, 0x3700, 0x9bee, 0x36e2, 0x9eb5, 0x0, 0x1);
        gbc.writeMem(0x880b, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x37, gbc.a());
        EXPECT(0x9b, gbc.b());
        EXPECT(0xee, gbc.c());
        EXPECT(0x36, gbc.d());
        EXPECT(0xe2, gbc.e());
        EXPECT(0x9e, gbc.h());
        EXPECT(0xb5, gbc.l());
        EXPECT(0x7f3d, gbc.sp());
        EXPECT(0x880d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x880b));
        EXPECT(0xa8, gbc.readMem(0x880c));
        // CB A8 0189
        gbc.setState(0x122d, 0x600c, 0x88d0, 0xb921, 0x83fc, 0x3221, 0x1, 0x0);
        gbc.writeMem(0x122d, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x88, gbc.a());
        EXPECT(0x99, gbc.b());
        EXPECT(0x21, gbc.c());
        EXPECT(0x83, gbc.d());
        EXPECT(0xfc, gbc.e());
        EXPECT(0x32, gbc.h());
        EXPECT(0x21, gbc.l());
        EXPECT(0x600c, gbc.sp());
        EXPECT(0x122f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 018A
        gbc.setState(0x405b, 0xd7db, 0x3110, 0xa336, 0x62c8, 0x2b72, 0x0, 0x0);
        gbc.writeMem(0x405b, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x31, gbc.a());
        EXPECT(0x83, gbc.b());
        EXPECT(0x36, gbc.c());
        EXPECT(0x62, gbc.d());
        EXPECT(0xc8, gbc.e());
        EXPECT(0x2b, gbc.h());
        EXPECT(0x72, gbc.l());
        EXPECT(0xd7db, gbc.sp());
        EXPECT(0x405d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 018B
        gbc.setState(0xefa6, 0xca94, 0x5a10, 0x579f, 0xa337, 0x23e5, 0x0, 0x1);
        gbc.writeMem(0xefa6, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x5a, gbc.a());
        EXPECT(0x57, gbc.b());
        EXPECT(0x9f, gbc.c());
        EXPECT(0xa3, gbc.d());
        EXPECT(0x37, gbc.e());
        EXPECT(0x23, gbc.h());
        EXPECT(0xe5, gbc.l());
        EXPECT(0xca94, gbc.sp());
        EXPECT(0xefa8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xefa6));
        EXPECT(0xa8, gbc.readMem(0xefa7));
        // CB A8 018C
        gbc.setState(0x647f, 0x36e7, 0xd10, 0xc279, 0xe354, 0x93fc, 0x1, 0x0);
        gbc.writeMem(0x647f, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xd, gbc.a());
        EXPECT(0xc2, gbc.b());
        EXPECT(0x79, gbc.c());
        EXPECT(0xe3, gbc.d());
        EXPECT(0x54, gbc.e());
        EXPECT(0x93, gbc.h());
        EXPECT(0xfc, gbc.l());
        EXPECT(0x36e7, gbc.sp());
        EXPECT(0x6481, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 018D
        gbc.setState(0xa45c, 0xfd79, 0xd9a0, 0xc69a, 0x8db0, 0x1b92, 0x0, 0x1);
        gbc.writeMem(0xa45c, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xd9, gbc.a());
        EXPECT(0xc6, gbc.b());
        EXPECT(0x9a, gbc.c());
        EXPECT(0x8d, gbc.d());
        EXPECT(0xb0, gbc.e());
        EXPECT(0x1b, gbc.h());
        EXPECT(0x92, gbc.l());
        EXPECT(0xfd79, gbc.sp());
        EXPECT(0xa45e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa45c));
        EXPECT(0xa8, gbc.readMem(0xa45d));
        // CB A8 018E
        gbc.setState(0x4649, 0xdb1e, 0xf5a0, 0xfade, 0xd03, 0x230f, 0x0, 0x1);
        gbc.writeMem(0x4649, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xf5, gbc.a());
        EXPECT(0xda, gbc.b());
        EXPECT(0xde, gbc.c());
        EXPECT(0xd, gbc.d());
        EXPECT(0x3, gbc.e());
        EXPECT(0x23, gbc.h());
        EXPECT(0xf, gbc.l());
        EXPECT(0xdb1e, gbc.sp());
        EXPECT(0x464b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 018F
        gbc.setState(0x34c6, 0x4c5e, 0x6bd0, 0xd697, 0xfc59, 0x6d18, 0x1, 0x0);
        gbc.writeMem(0x34c6, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x6b, gbc.a());
        EXPECT(0xd6, gbc.b());
        EXPECT(0x97, gbc.c());
        EXPECT(0xfc, gbc.d());
        EXPECT(0x59, gbc.e());
        EXPECT(0x6d, gbc.h());
        EXPECT(0x18, gbc.l());
        EXPECT(0x4c5e, gbc.sp());
        EXPECT(0x34c8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 0190
        gbc.setState(0x33a6, 0xaead, 0x0, 0x57fd, 0x9932, 0x9868, 0x1, 0x0);
        gbc.writeMem(0x33a6, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x57, gbc.b());
        EXPECT(0xfd, gbc.c());
        EXPECT(0x99, gbc.d());
        EXPECT(0x32, gbc.e());
        EXPECT(0x98, gbc.h());
        EXPECT(0x68, gbc.l());
        EXPECT(0xaead, gbc.sp());
        EXPECT(0x33a8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 0191
        gbc.setState(0x5a0e, 0x5dcc, 0xf750, 0x9f65, 0x12de, 0x7246, 0x0, 0x1);
        gbc.writeMem(0x5a0e, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xf7, gbc.a());
        EXPECT(0x9f, gbc.b());
        EXPECT(0x65, gbc.c());
        EXPECT(0x12, gbc.d());
        EXPECT(0xde, gbc.e());
        EXPECT(0x72, gbc.h());
        EXPECT(0x46, gbc.l());
        EXPECT(0x5dcc, gbc.sp());
        EXPECT(0x5a10, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 0192
        gbc.setState(0x749b, 0xd3f5, 0xd9b0, 0xd2e2, 0xc769, 0x7fbe, 0x0, 0x0);
        gbc.writeMem(0x749b, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xd9, gbc.a());
        EXPECT(0xd2, gbc.b());
        EXPECT(0xe2, gbc.c());
        EXPECT(0xc7, gbc.d());
        EXPECT(0x69, gbc.e());
        EXPECT(0x7f, gbc.h());
        EXPECT(0xbe, gbc.l());
        EXPECT(0xd3f5, gbc.sp());
        EXPECT(0x749d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 0193
        gbc.setState(0xd38e, 0xd683, 0x4220, 0x3b54, 0xfe08, 0x5a55, 0x0, 0x0);
        gbc.writeMem(0xd38e, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x42, gbc.a());
        EXPECT(0x1b, gbc.b());
        EXPECT(0x54, gbc.c());
        EXPECT(0xfe, gbc.d());
        EXPECT(0x8, gbc.e());
        EXPECT(0x5a, gbc.h());
        EXPECT(0x55, gbc.l());
        EXPECT(0xd683, gbc.sp());
        EXPECT(0xd390, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd38e));
        EXPECT(0xa8, gbc.readMem(0xd38f));
        // CB A8 0194
        gbc.setState(0xeb0a, 0xf7c1, 0x1a10, 0x5441, 0x1b97, 0x6145, 0x0, 0x1);
        gbc.writeMem(0xeb0a, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x1a, gbc.a());
        EXPECT(0x54, gbc.b());
        EXPECT(0x41, gbc.c());
        EXPECT(0x1b, gbc.d());
        EXPECT(0x97, gbc.e());
        EXPECT(0x61, gbc.h());
        EXPECT(0x45, gbc.l());
        EXPECT(0xf7c1, gbc.sp());
        EXPECT(0xeb0c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xeb0a));
        EXPECT(0xa8, gbc.readMem(0xeb0b));
        // CB A8 0195
        gbc.setState(0xe070, 0x5299, 0x11e0, 0xcd11, 0xad96, 0x5ec0, 0x0, 0x1);
        gbc.writeMem(0xe070, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x11, gbc.a());
        EXPECT(0xcd, gbc.b());
        EXPECT(0x11, gbc.c());
        EXPECT(0xad, gbc.d());
        EXPECT(0x96, gbc.e());
        EXPECT(0x5e, gbc.h());
        EXPECT(0xc0, gbc.l());
        EXPECT(0x5299, gbc.sp());
        EXPECT(0xe072, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe070));
        EXPECT(0xa8, gbc.readMem(0xe071));
        // CB A8 0196
        gbc.setState(0x56a1, 0x8370, 0x12e0, 0x791e, 0x74ac, 0x1a95, 0x1, 0x1);
        gbc.writeMem(0x56a1, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x12, gbc.a());
        EXPECT(0x59, gbc.b());
        EXPECT(0x1e, gbc.c());
        EXPECT(0x74, gbc.d());
        EXPECT(0xac, gbc.e());
        EXPECT(0x1a, gbc.h());
        EXPECT(0x95, gbc.l());
        EXPECT(0x8370, gbc.sp());
        EXPECT(0x56a3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 0197
        gbc.setState(0x68c6, 0xab52, 0x7bc0, 0xa92b, 0x6722, 0x1fe2, 0x1, 0x0);
        gbc.writeMem(0x68c6, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x7b, gbc.a());
        EXPECT(0x89, gbc.b());
        EXPECT(0x2b, gbc.c());
        EXPECT(0x67, gbc.d());
        EXPECT(0x22, gbc.e());
        EXPECT(0x1f, gbc.h());
        EXPECT(0xe2, gbc.l());
        EXPECT(0xab52, gbc.sp());
        EXPECT(0x68c8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 0198
        gbc.setState(0x27bc, 0x28f8, 0x18e0, 0x1b1d, 0x82f2, 0xf2da, 0x1, 0x1);
        gbc.writeMem(0x27bc, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x18, gbc.a());
        EXPECT(0x1b, gbc.b());
        EXPECT(0x1d, gbc.c());
        EXPECT(0x82, gbc.d());
        EXPECT(0xf2, gbc.e());
        EXPECT(0xf2, gbc.h());
        EXPECT(0xda, gbc.l());
        EXPECT(0x28f8, gbc.sp());
        EXPECT(0x27be, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 0199
        gbc.setState(0x69f, 0x6d81, 0x770, 0xfe1f, 0x61ea, 0x57dd, 0x0, 0x0);
        gbc.writeMem(0x69f, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x7, gbc.a());
        EXPECT(0xde, gbc.b());
        EXPECT(0x1f, gbc.c());
        EXPECT(0x61, gbc.d());
        EXPECT(0xea, gbc.e());
        EXPECT(0x57, gbc.h());
        EXPECT(0xdd, gbc.l());
        EXPECT(0x6d81, gbc.sp());
        EXPECT(0x6a1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 019A
        gbc.setState(0x4dbe, 0x2c13, 0x4730, 0x7b61, 0xf09, 0xdb7, 0x0, 0x1);
        gbc.writeMem(0x4dbe, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x47, gbc.a());
        EXPECT(0x5b, gbc.b());
        EXPECT(0x61, gbc.c());
        EXPECT(0xf, gbc.d());
        EXPECT(0x9, gbc.e());
        EXPECT(0xd, gbc.h());
        EXPECT(0xb7, gbc.l());
        EXPECT(0x2c13, gbc.sp());
        EXPECT(0x4dc0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 019B
        gbc.setState(0xa0fe, 0xe0b7, 0x99c0, 0x6b9b, 0x6400, 0x60ad, 0x1, 0x1);
        gbc.writeMem(0xa0fe, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x99, gbc.a());
        EXPECT(0x4b, gbc.b());
        EXPECT(0x9b, gbc.c());
        EXPECT(0x64, gbc.d());
        EXPECT(0x0, gbc.e());
        EXPECT(0x60, gbc.h());
        EXPECT(0xad, gbc.l());
        EXPECT(0xe0b7, gbc.sp());
        EXPECT(0xa100, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa0fe));
        EXPECT(0xa8, gbc.readMem(0xa0ff));
        // CB A8 019C
        gbc.setState(0xee35, 0x277d, 0xf290, 0x6b0d, 0x47d8, 0xe0fc, 0x1, 0x1);
        gbc.writeMem(0xee35, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xf2, gbc.a());
        EXPECT(0x4b, gbc.b());
        EXPECT(0xd, gbc.c());
        EXPECT(0x47, gbc.d());
        EXPECT(0xd8, gbc.e());
        EXPECT(0xe0, gbc.h());
        EXPECT(0xfc, gbc.l());
        EXPECT(0x277d, gbc.sp());
        EXPECT(0xee37, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xee35));
        EXPECT(0xa8, gbc.readMem(0xee36));
        // CB A8 019D
        gbc.setState(0x96ad, 0xf711, 0x1dc0, 0xbb33, 0x9e4e, 0xc652, 0x1, 0x0);
        gbc.writeMem(0x96ad, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x1d, gbc.a());
        EXPECT(0x9b, gbc.b());
        EXPECT(0x33, gbc.c());
        EXPECT(0x9e, gbc.d());
        EXPECT(0x4e, gbc.e());
        EXPECT(0xc6, gbc.h());
        EXPECT(0x52, gbc.l());
        EXPECT(0xf711, gbc.sp());
        EXPECT(0x96af, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x96ad));
        EXPECT(0xa8, gbc.readMem(0x96ae));
        // CB A8 019E
        gbc.setState(0xcc74, 0xcdd4, 0x2fb0, 0xe455, 0x40d9, 0x596c, 0x0, 0x1);
        gbc.writeMem(0xcc74, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x2f, gbc.a());
        EXPECT(0xc4, gbc.b());
        EXPECT(0x55, gbc.c());
        EXPECT(0x40, gbc.d());
        EXPECT(0xd9, gbc.e());
        EXPECT(0x59, gbc.h());
        EXPECT(0x6c, gbc.l());
        EXPECT(0xcdd4, gbc.sp());
        EXPECT(0xcc76, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcc74));
        EXPECT(0xa8, gbc.readMem(0xcc75));
        // CB A8 019F
        gbc.setState(0xd577, 0x5d6c, 0xeb90, 0xc6fa, 0xa707, 0x66f8, 0x1, 0x1);
        gbc.writeMem(0xd577, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xeb, gbc.a());
        EXPECT(0xc6, gbc.b());
        EXPECT(0xfa, gbc.c());
        EXPECT(0xa7, gbc.d());
        EXPECT(0x7, gbc.e());
        EXPECT(0x66, gbc.h());
        EXPECT(0xf8, gbc.l());
        EXPECT(0x5d6c, gbc.sp());
        EXPECT(0xd579, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd577));
        EXPECT(0xa8, gbc.readMem(0xd578));
        // CB A8 01A0
        gbc.setState(0x3ae5, 0x89a8, 0x9db0, 0xb42f, 0x3ec7, 0x868d, 0x0, 0x1);
        gbc.writeMem(0x3ae5, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x9d, gbc.a());
        EXPECT(0x94, gbc.b());
        EXPECT(0x2f, gbc.c());
        EXPECT(0x3e, gbc.d());
        EXPECT(0xc7, gbc.e());
        EXPECT(0x86, gbc.h());
        EXPECT(0x8d, gbc.l());
        EXPECT(0x89a8, gbc.sp());
        EXPECT(0x3ae7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 01A1
        gbc.setState(0x19ab, 0x714a, 0x2da0, 0x1181, 0x3654, 0xb72f, 0x0, 0x0);
        gbc.writeMem(0x19ab, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x2d, gbc.a());
        EXPECT(0x11, gbc.b());
        EXPECT(0x81, gbc.c());
        EXPECT(0x36, gbc.d());
        EXPECT(0x54, gbc.e());
        EXPECT(0xb7, gbc.h());
        EXPECT(0x2f, gbc.l());
        EXPECT(0x714a, gbc.sp());
        EXPECT(0x19ad, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 01A2
        gbc.setState(0x8969, 0xa099, 0x85f0, 0x6ea8, 0xa82e, 0x6e45, 0x0, 0x0);
        gbc.writeMem(0x8969, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x85, gbc.a());
        EXPECT(0x4e, gbc.b());
        EXPECT(0xa8, gbc.c());
        EXPECT(0xa8, gbc.d());
        EXPECT(0x2e, gbc.e());
        EXPECT(0x6e, gbc.h());
        EXPECT(0x45, gbc.l());
        EXPECT(0xa099, gbc.sp());
        EXPECT(0x896b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8969));
        EXPECT(0xa8, gbc.readMem(0x896a));
        // CB A8 01A3
        gbc.setState(0x7e6b, 0x37f3, 0xc8b0, 0x876a, 0x812c, 0x6190, 0x0, 0x0);
        gbc.writeMem(0x7e6b, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xc8, gbc.a());
        EXPECT(0x87, gbc.b());
        EXPECT(0x6a, gbc.c());
        EXPECT(0x81, gbc.d());
        EXPECT(0x2c, gbc.e());
        EXPECT(0x61, gbc.h());
        EXPECT(0x90, gbc.l());
        EXPECT(0x37f3, gbc.sp());
        EXPECT(0x7e6d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 01A4
        gbc.setState(0x87a6, 0x25e9, 0x1990, 0xd599, 0xcb32, 0x6335, 0x1, 0x1);
        gbc.writeMem(0x87a6, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x19, gbc.a());
        EXPECT(0xd5, gbc.b());
        EXPECT(0x99, gbc.c());
        EXPECT(0xcb, gbc.d());
        EXPECT(0x32, gbc.e());
        EXPECT(0x63, gbc.h());
        EXPECT(0x35, gbc.l());
        EXPECT(0x25e9, gbc.sp());
        EXPECT(0x87a8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x87a6));
        EXPECT(0xa8, gbc.readMem(0x87a7));
        // CB A8 01A5
        gbc.setState(0xd1f, 0x97eb, 0x29e0, 0xf61d, 0xfb83, 0xa6ef, 0x0, 0x1);
        gbc.writeMem(0xd1f, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x29, gbc.a());
        EXPECT(0xd6, gbc.b());
        EXPECT(0x1d, gbc.c());
        EXPECT(0xfb, gbc.d());
        EXPECT(0x83, gbc.e());
        EXPECT(0xa6, gbc.h());
        EXPECT(0xef, gbc.l());
        EXPECT(0x97eb, gbc.sp());
        EXPECT(0xd21, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 01A6
        gbc.setState(0x84d4, 0xa78b, 0xf3d0, 0x1adb, 0x4f9f, 0x2919, 0x1, 0x0);
        gbc.writeMem(0x84d4, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xf3, gbc.a());
        EXPECT(0x1a, gbc.b());
        EXPECT(0xdb, gbc.c());
        EXPECT(0x4f, gbc.d());
        EXPECT(0x9f, gbc.e());
        EXPECT(0x29, gbc.h());
        EXPECT(0x19, gbc.l());
        EXPECT(0xa78b, gbc.sp());
        EXPECT(0x84d6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x84d4));
        EXPECT(0xa8, gbc.readMem(0x84d5));
        // CB A8 01A7
        gbc.setState(0x6070, 0xf74d, 0x2380, 0xdd02, 0x3f4a, 0xe703, 0x0, 0x0);
        gbc.writeMem(0x6070, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x23, gbc.a());
        EXPECT(0xdd, gbc.b());
        EXPECT(0x2, gbc.c());
        EXPECT(0x3f, gbc.d());
        EXPECT(0x4a, gbc.e());
        EXPECT(0xe7, gbc.h());
        EXPECT(0x3, gbc.l());
        EXPECT(0xf74d, gbc.sp());
        EXPECT(0x6072, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 01A8
        gbc.setState(0xa2c0, 0x9ff0, 0xcf60, 0x19a8, 0xe302, 0xd58a, 0x1, 0x0);
        gbc.writeMem(0xa2c0, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xcf, gbc.a());
        EXPECT(0x19, gbc.b());
        EXPECT(0xa8, gbc.c());
        EXPECT(0xe3, gbc.d());
        EXPECT(0x2, gbc.e());
        EXPECT(0xd5, gbc.h());
        EXPECT(0x8a, gbc.l());
        EXPECT(0x9ff0, gbc.sp());
        EXPECT(0xa2c2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa2c0));
        EXPECT(0xa8, gbc.readMem(0xa2c1));
        // CB A8 01A9
        gbc.setState(0xe523, 0x5991, 0xd70, 0xb57e, 0x2b4b, 0x5d3e, 0x1, 0x1);
        gbc.writeMem(0xe523, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xd, gbc.a());
        EXPECT(0x95, gbc.b());
        EXPECT(0x7e, gbc.c());
        EXPECT(0x2b, gbc.d());
        EXPECT(0x4b, gbc.e());
        EXPECT(0x5d, gbc.h());
        EXPECT(0x3e, gbc.l());
        EXPECT(0x5991, gbc.sp());
        EXPECT(0xe525, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe523));
        EXPECT(0xa8, gbc.readMem(0xe524));
        // CB A8 01AA
        gbc.setState(0xc0b0, 0xd7c4, 0xba10, 0xd85c, 0xc1f8, 0x44c2, 0x0, 0x1);
        gbc.writeMem(0xc0b0, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xba, gbc.a());
        EXPECT(0xd8, gbc.b());
        EXPECT(0x5c, gbc.c());
        EXPECT(0xc1, gbc.d());
        EXPECT(0xf8, gbc.e());
        EXPECT(0x44, gbc.h());
        EXPECT(0xc2, gbc.l());
        EXPECT(0xd7c4, gbc.sp());
        EXPECT(0xc0b2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc0b0));
        EXPECT(0xa8, gbc.readMem(0xc0b1));
        // CB A8 01AB
        gbc.setState(0x9d3b, 0x8338, 0xe3b0, 0xad41, 0x6ccb, 0x82ea, 0x1, 0x1);
        gbc.writeMem(0x9d3b, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xe3, gbc.a());
        EXPECT(0x8d, gbc.b());
        EXPECT(0x41, gbc.c());
        EXPECT(0x6c, gbc.d());
        EXPECT(0xcb, gbc.e());
        EXPECT(0x82, gbc.h());
        EXPECT(0xea, gbc.l());
        EXPECT(0x8338, gbc.sp());
        EXPECT(0x9d3d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9d3b));
        EXPECT(0xa8, gbc.readMem(0x9d3c));
        // CB A8 01AC
        gbc.setState(0x4b4d, 0xfd66, 0xf040, 0x6eb0, 0xffa3, 0xe03c, 0x0, 0x0);
        gbc.writeMem(0x4b4d, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xf0, gbc.a());
        EXPECT(0x4e, gbc.b());
        EXPECT(0xb0, gbc.c());
        EXPECT(0xff, gbc.d());
        EXPECT(0xa3, gbc.e());
        EXPECT(0xe0, gbc.h());
        EXPECT(0x3c, gbc.l());
        EXPECT(0xfd66, gbc.sp());
        EXPECT(0x4b4f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 01AD
        gbc.setState(0x140a, 0x5411, 0x57c0, 0xae8a, 0x59ef, 0x9049, 0x0, 0x1);
        gbc.writeMem(0x140a, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x57, gbc.a());
        EXPECT(0x8e, gbc.b());
        EXPECT(0x8a, gbc.c());
        EXPECT(0x59, gbc.d());
        EXPECT(0xef, gbc.e());
        EXPECT(0x90, gbc.h());
        EXPECT(0x49, gbc.l());
        EXPECT(0x5411, gbc.sp());
        EXPECT(0x140c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 01AE
        gbc.setState(0x6aab, 0x1263, 0x4b40, 0xf7b2, 0x1685, 0xa3e3, 0x1, 0x0);
        gbc.writeMem(0x6aab, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x4b, gbc.a());
        EXPECT(0xd7, gbc.b());
        EXPECT(0xb2, gbc.c());
        EXPECT(0x16, gbc.d());
        EXPECT(0x85, gbc.e());
        EXPECT(0xa3, gbc.h());
        EXPECT(0xe3, gbc.l());
        EXPECT(0x1263, gbc.sp());
        EXPECT(0x6aad, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 01AF
        gbc.setState(0xab4d, 0x2ebc, 0x6890, 0xc83b, 0x9696, 0x81eb, 0x1, 0x1);
        gbc.writeMem(0xab4d, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x68, gbc.a());
        EXPECT(0xc8, gbc.b());
        EXPECT(0x3b, gbc.c());
        EXPECT(0x96, gbc.d());
        EXPECT(0x96, gbc.e());
        EXPECT(0x81, gbc.h());
        EXPECT(0xeb, gbc.l());
        EXPECT(0x2ebc, gbc.sp());
        EXPECT(0xab4f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xab4d));
        EXPECT(0xa8, gbc.readMem(0xab4e));
        // CB A8 01B0
        gbc.setState(0xd18b, 0xda17, 0x3440, 0x5c52, 0x3de7, 0xd8b8, 0x0, 0x0);
        gbc.writeMem(0xd18b, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x34, gbc.a());
        EXPECT(0x5c, gbc.b());
        EXPECT(0x52, gbc.c());
        EXPECT(0x3d, gbc.d());
        EXPECT(0xe7, gbc.e());
        EXPECT(0xd8, gbc.h());
        EXPECT(0xb8, gbc.l());
        EXPECT(0xda17, gbc.sp());
        EXPECT(0xd18d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd18b));
        EXPECT(0xa8, gbc.readMem(0xd18c));
        // CB A8 01B2
        gbc.setState(0xa8be, 0xdd3a, 0xf990, 0xb268, 0xcf76, 0xddd6, 0x0, 0x1);
        gbc.writeMem(0xa8be, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xf9, gbc.a());
        EXPECT(0x92, gbc.b());
        EXPECT(0x68, gbc.c());
        EXPECT(0xcf, gbc.d());
        EXPECT(0x76, gbc.e());
        EXPECT(0xdd, gbc.h());
        EXPECT(0xd6, gbc.l());
        EXPECT(0xdd3a, gbc.sp());
        EXPECT(0xa8c0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa8be));
        EXPECT(0xa8, gbc.readMem(0xa8bf));
        // CB A8 01B3
        gbc.setState(0x540c, 0x2999, 0xcac0, 0x410e, 0x414a, 0x34a0, 0x0, 0x1);
        gbc.writeMem(0x540c, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xca, gbc.a());
        EXPECT(0x41, gbc.b());
        EXPECT(0xe, gbc.c());
        EXPECT(0x41, gbc.d());
        EXPECT(0x4a, gbc.e());
        EXPECT(0x34, gbc.h());
        EXPECT(0xa0, gbc.l());
        EXPECT(0x2999, gbc.sp());
        EXPECT(0x540e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 01B4
        gbc.setState(0xdd38, 0xa9a1, 0x95f0, 0x7c36, 0x7041, 0xe18a, 0x0, 0x0);
        gbc.writeMem(0xdd38, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x95, gbc.a());
        EXPECT(0x5c, gbc.b());
        EXPECT(0x36, gbc.c());
        EXPECT(0x70, gbc.d());
        EXPECT(0x41, gbc.e());
        EXPECT(0xe1, gbc.h());
        EXPECT(0x8a, gbc.l());
        EXPECT(0xa9a1, gbc.sp());
        EXPECT(0xdd3a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdd38));
        EXPECT(0xa8, gbc.readMem(0xdd39));
        // CB A8 01B5
        gbc.setState(0x7213, 0xa18c, 0x5bc0, 0x519d, 0x9937, 0xf357, 0x1, 0x0);
        gbc.writeMem(0x7213, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x5b, gbc.a());
        EXPECT(0x51, gbc.b());
        EXPECT(0x9d, gbc.c());
        EXPECT(0x99, gbc.d());
        EXPECT(0x37, gbc.e());
        EXPECT(0xf3, gbc.h());
        EXPECT(0x57, gbc.l());
        EXPECT(0xa18c, gbc.sp());
        EXPECT(0x7215, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 01B6
        gbc.setState(0x236c, 0x731f, 0x3ad0, 0x6593, 0x3c67, 0x6fc, 0x0, 0x0);
        gbc.writeMem(0x236c, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x3a, gbc.a());
        EXPECT(0x45, gbc.b());
        EXPECT(0x93, gbc.c());
        EXPECT(0x3c, gbc.d());
        EXPECT(0x67, gbc.e());
        EXPECT(0x6, gbc.h());
        EXPECT(0xfc, gbc.l());
        EXPECT(0x731f, gbc.sp());
        EXPECT(0x236e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 01B7
        gbc.setState(0xab62, 0x2db, 0x9900, 0xe42a, 0x5725, 0xc41d, 0x1, 0x0);
        gbc.writeMem(0xab62, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x99, gbc.a());
        EXPECT(0xc4, gbc.b());
        EXPECT(0x2a, gbc.c());
        EXPECT(0x57, gbc.d());
        EXPECT(0x25, gbc.e());
        EXPECT(0xc4, gbc.h());
        EXPECT(0x1d, gbc.l());
        EXPECT(0x2db, gbc.sp());
        EXPECT(0xab64, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xab62));
        EXPECT(0xa8, gbc.readMem(0xab63));
        // CB A8 01B8
        gbc.setState(0x10aa, 0x565c, 0xc620, 0xd3c5, 0x2dd9, 0xffbd, 0x1, 0x0);
        gbc.writeMem(0x10aa, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xc6, gbc.a());
        EXPECT(0xd3, gbc.b());
        EXPECT(0xc5, gbc.c());
        EXPECT(0x2d, gbc.d());
        EXPECT(0xd9, gbc.e());
        EXPECT(0xff, gbc.h());
        EXPECT(0xbd, gbc.l());
        EXPECT(0x565c, gbc.sp());
        EXPECT(0x10ac, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 01B9
        gbc.setState(0xdf44, 0xf3cf, 0xf780, 0xee73, 0x6ad6, 0x8890, 0x0, 0x0);
        gbc.writeMem(0xdf44, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xf7, gbc.a());
        EXPECT(0xce, gbc.b());
        EXPECT(0x73, gbc.c());
        EXPECT(0x6a, gbc.d());
        EXPECT(0xd6, gbc.e());
        EXPECT(0x88, gbc.h());
        EXPECT(0x90, gbc.l());
        EXPECT(0xf3cf, gbc.sp());
        EXPECT(0xdf46, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdf44));
        EXPECT(0xa8, gbc.readMem(0xdf45));
        // CB A8 01BA
        gbc.setState(0x433f, 0x8b9b, 0x1300, 0xbb52, 0xc42e, 0xb274, 0x0, 0x0);
        gbc.writeMem(0x433f, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x13, gbc.a());
        EXPECT(0x9b, gbc.b());
        EXPECT(0x52, gbc.c());
        EXPECT(0xc4, gbc.d());
        EXPECT(0x2e, gbc.e());
        EXPECT(0xb2, gbc.h());
        EXPECT(0x74, gbc.l());
        EXPECT(0x8b9b, gbc.sp());
        EXPECT(0x4341, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 01BB
        gbc.setState(0x6262, 0xcffc, 0x44e0, 0x38bb, 0xab82, 0xd546, 0x0, 0x0);
        gbc.writeMem(0x6262, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x44, gbc.a());
        EXPECT(0x18, gbc.b());
        EXPECT(0xbb, gbc.c());
        EXPECT(0xab, gbc.d());
        EXPECT(0x82, gbc.e());
        EXPECT(0xd5, gbc.h());
        EXPECT(0x46, gbc.l());
        EXPECT(0xcffc, gbc.sp());
        EXPECT(0x6264, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 01BC
        gbc.setState(0x8e21, 0x2829, 0x46b0, 0x3006, 0xe61c, 0x5a06, 0x1, 0x1);
        gbc.writeMem(0x8e21, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x46, gbc.a());
        EXPECT(0x10, gbc.b());
        EXPECT(0x6, gbc.c());
        EXPECT(0xe6, gbc.d());
        EXPECT(0x1c, gbc.e());
        EXPECT(0x5a, gbc.h());
        EXPECT(0x6, gbc.l());
        EXPECT(0x2829, gbc.sp());
        EXPECT(0x8e23, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8e21));
        EXPECT(0xa8, gbc.readMem(0x8e22));
        // CB A8 01BD
        gbc.setState(0x8542, 0xd72a, 0x7ad0, 0xca, 0xf3ef, 0x50b8, 0x1, 0x1);
        gbc.writeMem(0x8542, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x7a, gbc.a());
        EXPECT(0x0, gbc.b());
        EXPECT(0xca, gbc.c());
        EXPECT(0xf3, gbc.d());
        EXPECT(0xef, gbc.e());
        EXPECT(0x50, gbc.h());
        EXPECT(0xb8, gbc.l());
        EXPECT(0xd72a, gbc.sp());
        EXPECT(0x8544, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8542));
        EXPECT(0xa8, gbc.readMem(0x8543));
        // CB A8 01BE
        gbc.setState(0x4d22, 0x99fe, 0xbbd0, 0xf71a, 0x3904, 0xb903, 0x1, 0x1);
        gbc.writeMem(0x4d22, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xbb, gbc.a());
        EXPECT(0xd7, gbc.b());
        EXPECT(0x1a, gbc.c());
        EXPECT(0x39, gbc.d());
        EXPECT(0x4, gbc.e());
        EXPECT(0xb9, gbc.h());
        EXPECT(0x3, gbc.l());
        EXPECT(0x99fe, gbc.sp());
        EXPECT(0x4d24, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 01BF
        gbc.setState(0xe202, 0xfb67, 0x5090, 0xbd36, 0x1de0, 0x7f9c, 0x1, 0x1);
        gbc.writeMem(0xe202, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x50, gbc.a());
        EXPECT(0x9d, gbc.b());
        EXPECT(0x36, gbc.c());
        EXPECT(0x1d, gbc.d());
        EXPECT(0xe0, gbc.e());
        EXPECT(0x7f, gbc.h());
        EXPECT(0x9c, gbc.l());
        EXPECT(0xfb67, gbc.sp());
        EXPECT(0xe204, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe202));
        EXPECT(0xa8, gbc.readMem(0xe203));
        // CB A8 01C0
        gbc.setState(0x566c, 0x3e89, 0x1d40, 0xb613, 0x129d, 0xe323, 0x1, 0x0);
        gbc.writeMem(0x566c, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x1d, gbc.a());
        EXPECT(0x96, gbc.b());
        EXPECT(0x13, gbc.c());
        EXPECT(0x12, gbc.d());
        EXPECT(0x9d, gbc.e());
        EXPECT(0xe3, gbc.h());
        EXPECT(0x23, gbc.l());
        EXPECT(0x3e89, gbc.sp());
        EXPECT(0x566e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 01C1
        gbc.setState(0xa08d, 0x2cd8, 0xa800, 0xcfe0, 0xc8c3, 0x331c, 0x0, 0x0);
        gbc.writeMem(0xa08d, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xa8, gbc.a());
        EXPECT(0xcf, gbc.b());
        EXPECT(0xe0, gbc.c());
        EXPECT(0xc8, gbc.d());
        EXPECT(0xc3, gbc.e());
        EXPECT(0x33, gbc.h());
        EXPECT(0x1c, gbc.l());
        EXPECT(0x2cd8, gbc.sp());
        EXPECT(0xa08f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa08d));
        EXPECT(0xa8, gbc.readMem(0xa08e));
        // CB A8 01C2
        gbc.setState(0x81a6, 0x9d43, 0xe1b0, 0x1342, 0x3cde, 0xe2b6, 0x0, 0x0);
        gbc.writeMem(0x81a6, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xe1, gbc.a());
        EXPECT(0x13, gbc.b());
        EXPECT(0x42, gbc.c());
        EXPECT(0x3c, gbc.d());
        EXPECT(0xde, gbc.e());
        EXPECT(0xe2, gbc.h());
        EXPECT(0xb6, gbc.l());
        EXPECT(0x9d43, gbc.sp());
        EXPECT(0x81a8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x81a6));
        EXPECT(0xa8, gbc.readMem(0x81a7));
        // CB A8 01C3
        gbc.setState(0xabfd, 0x7a13, 0xfdc0, 0x8ace, 0xd3e4, 0xc556, 0x0, 0x1);
        gbc.writeMem(0xabfd, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xfd, gbc.a());
        EXPECT(0x8a, gbc.b());
        EXPECT(0xce, gbc.c());
        EXPECT(0xd3, gbc.d());
        EXPECT(0xe4, gbc.e());
        EXPECT(0xc5, gbc.h());
        EXPECT(0x56, gbc.l());
        EXPECT(0x7a13, gbc.sp());
        EXPECT(0xabff, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xabfd));
        EXPECT(0xa8, gbc.readMem(0xabfe));
        // CB A8 01C4
        gbc.setState(0xdb8f, 0x642e, 0x3250, 0x1df9, 0x326, 0xa705, 0x1, 0x1);
        gbc.writeMem(0xdb8f, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x32, gbc.a());
        EXPECT(0x1d, gbc.b());
        EXPECT(0xf9, gbc.c());
        EXPECT(0x3, gbc.d());
        EXPECT(0x26, gbc.e());
        EXPECT(0xa7, gbc.h());
        EXPECT(0x5, gbc.l());
        EXPECT(0x642e, gbc.sp());
        EXPECT(0xdb91, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdb8f));
        EXPECT(0xa8, gbc.readMem(0xdb90));
        // CB A8 01C5
        gbc.setState(0x4934, 0xea55, 0x5d00, 0xc43b, 0x6b58, 0xe99c, 0x1, 0x0);
        gbc.writeMem(0x4934, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x5d, gbc.a());
        EXPECT(0xc4, gbc.b());
        EXPECT(0x3b, gbc.c());
        EXPECT(0x6b, gbc.d());
        EXPECT(0x58, gbc.e());
        EXPECT(0xe9, gbc.h());
        EXPECT(0x9c, gbc.l());
        EXPECT(0xea55, gbc.sp());
        EXPECT(0x4936, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 01C6
        gbc.setState(0xe295, 0x2149, 0xe8f0, 0x914, 0xe9ef, 0x4d25, 0x1, 0x0);
        gbc.writeMem(0xe295, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xe8, gbc.a());
        EXPECT(0x9, gbc.b());
        EXPECT(0x14, gbc.c());
        EXPECT(0xe9, gbc.d());
        EXPECT(0xef, gbc.e());
        EXPECT(0x4d, gbc.h());
        EXPECT(0x25, gbc.l());
        EXPECT(0x2149, gbc.sp());
        EXPECT(0xe297, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe295));
        EXPECT(0xa8, gbc.readMem(0xe296));
        // CB A8 01C7
        gbc.setState(0x6847, 0x6219, 0xcb70, 0x99ce, 0x6f08, 0x93f4, 0x0, 0x0);
        gbc.writeMem(0x6847, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xcb, gbc.a());
        EXPECT(0x99, gbc.b());
        EXPECT(0xce, gbc.c());
        EXPECT(0x6f, gbc.d());
        EXPECT(0x8, gbc.e());
        EXPECT(0x93, gbc.h());
        EXPECT(0xf4, gbc.l());
        EXPECT(0x6219, gbc.sp());
        EXPECT(0x6849, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 01C8
        gbc.setState(0xa82c, 0x7229, 0x6ec0, 0x4d66, 0x8ced, 0xe02d, 0x1, 0x0);
        gbc.writeMem(0xa82c, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x6e, gbc.a());
        EXPECT(0x4d, gbc.b());
        EXPECT(0x66, gbc.c());
        EXPECT(0x8c, gbc.d());
        EXPECT(0xed, gbc.e());
        EXPECT(0xe0, gbc.h());
        EXPECT(0x2d, gbc.l());
        EXPECT(0x7229, gbc.sp());
        EXPECT(0xa82e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa82c));
        EXPECT(0xa8, gbc.readMem(0xa82d));
        // CB A8 01C9
        gbc.setState(0xca7, 0x3639, 0xe950, 0xde69, 0xdea0, 0xc821, 0x0, 0x0);
        gbc.writeMem(0xca7, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xe9, gbc.a());
        EXPECT(0xde, gbc.b());
        EXPECT(0x69, gbc.c());
        EXPECT(0xde, gbc.d());
        EXPECT(0xa0, gbc.e());
        EXPECT(0xc8, gbc.h());
        EXPECT(0x21, gbc.l());
        EXPECT(0x3639, gbc.sp());
        EXPECT(0xca9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 01CA
        gbc.setState(0x5fa, 0xc8b5, 0x3520, 0xdfc5, 0xe57a, 0x2392, 0x0, 0x0);
        gbc.writeMem(0x5fa, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x35, gbc.a());
        EXPECT(0xdf, gbc.b());
        EXPECT(0xc5, gbc.c());
        EXPECT(0xe5, gbc.d());
        EXPECT(0x7a, gbc.e());
        EXPECT(0x23, gbc.h());
        EXPECT(0x92, gbc.l());
        EXPECT(0xc8b5, gbc.sp());
        EXPECT(0x5fc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 01CB
        gbc.setState(0x24a3, 0xbf5d, 0x5b40, 0x9224, 0x4f5, 0xfab8, 0x1, 0x1);
        gbc.writeMem(0x24a3, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x5b, gbc.a());
        EXPECT(0x92, gbc.b());
        EXPECT(0x24, gbc.c());
        EXPECT(0x4, gbc.d());
        EXPECT(0xf5, gbc.e());
        EXPECT(0xfa, gbc.h());
        EXPECT(0xb8, gbc.l());
        EXPECT(0xbf5d, gbc.sp());
        EXPECT(0x24a5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 01CC
        gbc.setState(0x64d5, 0x6bb4, 0xb70, 0xefd8, 0x1f86, 0x3523, 0x0, 0x1);
        gbc.writeMem(0x64d5, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xb, gbc.a());
        EXPECT(0xcf, gbc.b());
        EXPECT(0xd8, gbc.c());
        EXPECT(0x1f, gbc.d());
        EXPECT(0x86, gbc.e());
        EXPECT(0x35, gbc.h());
        EXPECT(0x23, gbc.l());
        EXPECT(0x6bb4, gbc.sp());
        EXPECT(0x64d7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 01CD
        gbc.setState(0x5d8e, 0x50c7, 0x4a00, 0x5e3b, 0xc669, 0x3aa6, 0x1, 0x0);
        gbc.writeMem(0x5d8e, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x4a, gbc.a());
        EXPECT(0x5e, gbc.b());
        EXPECT(0x3b, gbc.c());
        EXPECT(0xc6, gbc.d());
        EXPECT(0x69, gbc.e());
        EXPECT(0x3a, gbc.h());
        EXPECT(0xa6, gbc.l());
        EXPECT(0x50c7, gbc.sp());
        EXPECT(0x5d90, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 01CE
        gbc.setState(0x970d, 0x87c7, 0x35c0, 0xb2a4, 0x397e, 0x9c06, 0x1, 0x0);
        gbc.writeMem(0x970d, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x35, gbc.a());
        EXPECT(0x92, gbc.b());
        EXPECT(0xa4, gbc.c());
        EXPECT(0x39, gbc.d());
        EXPECT(0x7e, gbc.e());
        EXPECT(0x9c, gbc.h());
        EXPECT(0x6, gbc.l());
        EXPECT(0x87c7, gbc.sp());
        EXPECT(0x970f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x970d));
        EXPECT(0xa8, gbc.readMem(0x970e));
        // CB A8 01CF
        gbc.setState(0x2c72, 0x7011, 0xdb40, 0x3695, 0xad62, 0xfa3b, 0x1, 0x0);
        gbc.writeMem(0x2c72, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xdb, gbc.a());
        EXPECT(0x16, gbc.b());
        EXPECT(0x95, gbc.c());
        EXPECT(0xad, gbc.d());
        EXPECT(0x62, gbc.e());
        EXPECT(0xfa, gbc.h());
        EXPECT(0x3b, gbc.l());
        EXPECT(0x7011, gbc.sp());
        EXPECT(0x2c74, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 01D0
        gbc.setState(0x1e7b, 0x6ef6, 0xe190, 0x1c04, 0x4f84, 0x36ac, 0x0, 0x0);
        gbc.writeMem(0x1e7b, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xe1, gbc.a());
        EXPECT(0x1c, gbc.b());
        EXPECT(0x4, gbc.c());
        EXPECT(0x4f, gbc.d());
        EXPECT(0x84, gbc.e());
        EXPECT(0x36, gbc.h());
        EXPECT(0xac, gbc.l());
        EXPECT(0x6ef6, gbc.sp());
        EXPECT(0x1e7d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 01D1
        gbc.setState(0x69f7, 0x2f74, 0xa040, 0x5a1a, 0xcbc5, 0x762f, 0x0, 0x0);
        gbc.writeMem(0x69f7, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xa0, gbc.a());
        EXPECT(0x5a, gbc.b());
        EXPECT(0x1a, gbc.c());
        EXPECT(0xcb, gbc.d());
        EXPECT(0xc5, gbc.e());
        EXPECT(0x76, gbc.h());
        EXPECT(0x2f, gbc.l());
        EXPECT(0x2f74, gbc.sp());
        EXPECT(0x69f9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 01D2
        gbc.setState(0x4247, 0x9d54, 0xbdd0, 0x922d, 0x9681, 0x13da, 0x0, 0x0);
        gbc.writeMem(0x4247, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xbd, gbc.a());
        EXPECT(0x92, gbc.b());
        EXPECT(0x2d, gbc.c());
        EXPECT(0x96, gbc.d());
        EXPECT(0x81, gbc.e());
        EXPECT(0x13, gbc.h());
        EXPECT(0xda, gbc.l());
        EXPECT(0x9d54, gbc.sp());
        EXPECT(0x4249, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 01D3
        gbc.setState(0x6859, 0xe3b0, 0x8840, 0x8cba, 0x77fb, 0x4eff, 0x0, 0x1);
        gbc.writeMem(0x6859, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x88, gbc.a());
        EXPECT(0x8c, gbc.b());
        EXPECT(0xba, gbc.c());
        EXPECT(0x77, gbc.d());
        EXPECT(0xfb, gbc.e());
        EXPECT(0x4e, gbc.h());
        EXPECT(0xff, gbc.l());
        EXPECT(0xe3b0, gbc.sp());
        EXPECT(0x685b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 01D4
        gbc.setState(0xe29c, 0xad7d, 0x2360, 0x95ff, 0x5f9d, 0xa612, 0x1, 0x0);
        gbc.writeMem(0xe29c, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x23, gbc.a());
        EXPECT(0x95, gbc.b());
        EXPECT(0xff, gbc.c());
        EXPECT(0x5f, gbc.d());
        EXPECT(0x9d, gbc.e());
        EXPECT(0xa6, gbc.h());
        EXPECT(0x12, gbc.l());
        EXPECT(0xad7d, gbc.sp());
        EXPECT(0xe29e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe29c));
        EXPECT(0xa8, gbc.readMem(0xe29d));
        // CB A8 01D5
        gbc.setState(0xc4fa, 0x76c6, 0x14d0, 0x1bf3, 0x1bed, 0xd00f, 0x1, 0x1);
        gbc.writeMem(0xc4fa, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x14, gbc.a());
        EXPECT(0x1b, gbc.b());
        EXPECT(0xf3, gbc.c());
        EXPECT(0x1b, gbc.d());
        EXPECT(0xed, gbc.e());
        EXPECT(0xd0, gbc.h());
        EXPECT(0xf, gbc.l());
        EXPECT(0x76c6, gbc.sp());
        EXPECT(0xc4fc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc4fa));
        EXPECT(0xa8, gbc.readMem(0xc4fb));
        // CB A8 01D6
        gbc.setState(0xb6f0, 0xd6f1, 0xe440, 0x12ca, 0xb792, 0xdbdd, 0x0, 0x0);
        gbc.writeMem(0xb6f0, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xe4, gbc.a());
        EXPECT(0x12, gbc.b());
        EXPECT(0xca, gbc.c());
        EXPECT(0xb7, gbc.d());
        EXPECT(0x92, gbc.e());
        EXPECT(0xdb, gbc.h());
        EXPECT(0xdd, gbc.l());
        EXPECT(0xd6f1, gbc.sp());
        EXPECT(0xb6f2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb6f0));
        EXPECT(0xa8, gbc.readMem(0xb6f1));
        // CB A8 01D7
        gbc.setState(0x25fa, 0xe27b, 0xe720, 0x5ae9, 0xa889, 0x54bd, 0x0, 0x0);
        gbc.writeMem(0x25fa, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xe7, gbc.a());
        EXPECT(0x5a, gbc.b());
        EXPECT(0xe9, gbc.c());
        EXPECT(0xa8, gbc.d());
        EXPECT(0x89, gbc.e());
        EXPECT(0x54, gbc.h());
        EXPECT(0xbd, gbc.l());
        EXPECT(0xe27b, gbc.sp());
        EXPECT(0x25fc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 01D8
        gbc.setState(0xb1bf, 0x69f3, 0x5040, 0xdded, 0xc3f0, 0x47c, 0x0, 0x1);
        gbc.writeMem(0xb1bf, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x50, gbc.a());
        EXPECT(0xdd, gbc.b());
        EXPECT(0xed, gbc.c());
        EXPECT(0xc3, gbc.d());
        EXPECT(0xf0, gbc.e());
        EXPECT(0x4, gbc.h());
        EXPECT(0x7c, gbc.l());
        EXPECT(0x69f3, gbc.sp());
        EXPECT(0xb1c1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb1bf));
        EXPECT(0xa8, gbc.readMem(0xb1c0));
        // CB A8 01D9
        gbc.setState(0xf1b, 0x952b, 0xd7c0, 0xea1e, 0x977e, 0x5034, 0x0, 0x0);
        gbc.writeMem(0xf1b, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xd7, gbc.a());
        EXPECT(0xca, gbc.b());
        EXPECT(0x1e, gbc.c());
        EXPECT(0x97, gbc.d());
        EXPECT(0x7e, gbc.e());
        EXPECT(0x50, gbc.h());
        EXPECT(0x34, gbc.l());
        EXPECT(0x952b, gbc.sp());
        EXPECT(0xf1d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 01DA
        gbc.setState(0x116f, 0x124c, 0xe490, 0x93e6, 0xf558, 0x7eb6, 0x1, 0x0);
        gbc.writeMem(0x116f, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xe4, gbc.a());
        EXPECT(0x93, gbc.b());
        EXPECT(0xe6, gbc.c());
        EXPECT(0xf5, gbc.d());
        EXPECT(0x58, gbc.e());
        EXPECT(0x7e, gbc.h());
        EXPECT(0xb6, gbc.l());
        EXPECT(0x124c, gbc.sp());
        EXPECT(0x1171, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 01DB
        gbc.setState(0xd8d2, 0x943f, 0x6dd0, 0x4807, 0xdafc, 0x4c4e, 0x1, 0x1);
        gbc.writeMem(0xd8d2, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x6d, gbc.a());
        EXPECT(0x48, gbc.b());
        EXPECT(0x7, gbc.c());
        EXPECT(0xda, gbc.d());
        EXPECT(0xfc, gbc.e());
        EXPECT(0x4c, gbc.h());
        EXPECT(0x4e, gbc.l());
        EXPECT(0x943f, gbc.sp());
        EXPECT(0xd8d4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd8d2));
        EXPECT(0xa8, gbc.readMem(0xd8d3));
        // CB A8 01DC
        gbc.setState(0x2a0f, 0x9e3c, 0x9640, 0xf5a8, 0xd916, 0x52e0, 0x0, 0x0);
        gbc.writeMem(0x2a0f, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x96, gbc.a());
        EXPECT(0xd5, gbc.b());
        EXPECT(0xa8, gbc.c());
        EXPECT(0xd9, gbc.d());
        EXPECT(0x16, gbc.e());
        EXPECT(0x52, gbc.h());
        EXPECT(0xe0, gbc.l());
        EXPECT(0x9e3c, gbc.sp());
        EXPECT(0x2a11, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 01DD
        gbc.setState(0x8ae, 0x1d5c, 0x7e40, 0x3c06, 0x2cef, 0x5f74, 0x0, 0x1);
        gbc.writeMem(0x8ae, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x7e, gbc.a());
        EXPECT(0x1c, gbc.b());
        EXPECT(0x6, gbc.c());
        EXPECT(0x2c, gbc.d());
        EXPECT(0xef, gbc.e());
        EXPECT(0x5f, gbc.h());
        EXPECT(0x74, gbc.l());
        EXPECT(0x1d5c, gbc.sp());
        EXPECT(0x8b0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 01DE
        gbc.setState(0x5024, 0xec56, 0xeda0, 0xd77c, 0xe297, 0x1c92, 0x0, 0x1);
        gbc.writeMem(0x5024, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xed, gbc.a());
        EXPECT(0xd7, gbc.b());
        EXPECT(0x7c, gbc.c());
        EXPECT(0xe2, gbc.d());
        EXPECT(0x97, gbc.e());
        EXPECT(0x1c, gbc.h());
        EXPECT(0x92, gbc.l());
        EXPECT(0xec56, gbc.sp());
        EXPECT(0x5026, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 01DF
        gbc.setState(0x11ef, 0xfc93, 0x83a0, 0x176, 0xebdb, 0x4e92, 0x1, 0x0);
        gbc.writeMem(0x11ef, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x83, gbc.a());
        EXPECT(0x1, gbc.b());
        EXPECT(0x76, gbc.c());
        EXPECT(0xeb, gbc.d());
        EXPECT(0xdb, gbc.e());
        EXPECT(0x4e, gbc.h());
        EXPECT(0x92, gbc.l());
        EXPECT(0xfc93, gbc.sp());
        EXPECT(0x11f1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 01E0
        gbc.setState(0xb301, 0x3e30, 0x7220, 0x90fb, 0x6ef3, 0xeb39, 0x1, 0x1);
        gbc.writeMem(0xb301, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x72, gbc.a());
        EXPECT(0x90, gbc.b());
        EXPECT(0xfb, gbc.c());
        EXPECT(0x6e, gbc.d());
        EXPECT(0xf3, gbc.e());
        EXPECT(0xeb, gbc.h());
        EXPECT(0x39, gbc.l());
        EXPECT(0x3e30, gbc.sp());
        EXPECT(0xb303, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb301));
        EXPECT(0xa8, gbc.readMem(0xb302));
        // CB A8 01E1
        gbc.setState(0xc266, 0x8986, 0x88d0, 0x5c26, 0xd67d, 0x361a, 0x1, 0x1);
        gbc.writeMem(0xc266, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x88, gbc.a());
        EXPECT(0x5c, gbc.b());
        EXPECT(0x26, gbc.c());
        EXPECT(0xd6, gbc.d());
        EXPECT(0x7d, gbc.e());
        EXPECT(0x36, gbc.h());
        EXPECT(0x1a, gbc.l());
        EXPECT(0x8986, gbc.sp());
        EXPECT(0xc268, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc266));
        EXPECT(0xa8, gbc.readMem(0xc267));
        // CB A8 01E2
        gbc.setState(0x273, 0x9ff1, 0xb3c0, 0xa26c, 0x3b30, 0xd56f, 0x0, 0x1);
        gbc.writeMem(0x273, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xb3, gbc.a());
        EXPECT(0x82, gbc.b());
        EXPECT(0x6c, gbc.c());
        EXPECT(0x3b, gbc.d());
        EXPECT(0x30, gbc.e());
        EXPECT(0xd5, gbc.h());
        EXPECT(0x6f, gbc.l());
        EXPECT(0x9ff1, gbc.sp());
        EXPECT(0x275, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 01E3
        gbc.setState(0x8dc0, 0x1678, 0x9d90, 0xc0ae, 0x3005, 0x2618, 0x1, 0x1);
        gbc.writeMem(0x8dc0, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x9d, gbc.a());
        EXPECT(0xc0, gbc.b());
        EXPECT(0xae, gbc.c());
        EXPECT(0x30, gbc.d());
        EXPECT(0x5, gbc.e());
        EXPECT(0x26, gbc.h());
        EXPECT(0x18, gbc.l());
        EXPECT(0x1678, gbc.sp());
        EXPECT(0x8dc2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8dc0));
        EXPECT(0xa8, gbc.readMem(0x8dc1));
        // CB A8 01E4
        gbc.setState(0xe388, 0xa71d, 0x9890, 0xe257, 0x2fe7, 0x1d3c, 0x1, 0x1);
        gbc.writeMem(0xe388, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x98, gbc.a());
        EXPECT(0xc2, gbc.b());
        EXPECT(0x57, gbc.c());
        EXPECT(0x2f, gbc.d());
        EXPECT(0xe7, gbc.e());
        EXPECT(0x1d, gbc.h());
        EXPECT(0x3c, gbc.l());
        EXPECT(0xa71d, gbc.sp());
        EXPECT(0xe38a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe388));
        EXPECT(0xa8, gbc.readMem(0xe389));
        // CB A8 01E5
        gbc.setState(0x9163, 0xc750, 0xc080, 0x87a0, 0x6194, 0xe984, 0x0, 0x0);
        gbc.writeMem(0x9163, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xc0, gbc.a());
        EXPECT(0x87, gbc.b());
        EXPECT(0xa0, gbc.c());
        EXPECT(0x61, gbc.d());
        EXPECT(0x94, gbc.e());
        EXPECT(0xe9, gbc.h());
        EXPECT(0x84, gbc.l());
        EXPECT(0xc750, gbc.sp());
        EXPECT(0x9165, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9163));
        EXPECT(0xa8, gbc.readMem(0x9164));
        // CB A8 01E6
        gbc.setState(0x2aef, 0x882f, 0x710, 0xa4f1, 0xdfad, 0x66d4, 0x0, 0x1);
        gbc.writeMem(0x2aef, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x7, gbc.a());
        EXPECT(0x84, gbc.b());
        EXPECT(0xf1, gbc.c());
        EXPECT(0xdf, gbc.d());
        EXPECT(0xad, gbc.e());
        EXPECT(0x66, gbc.h());
        EXPECT(0xd4, gbc.l());
        EXPECT(0x882f, gbc.sp());
        EXPECT(0x2af1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 01E7
        gbc.setState(0x2441, 0x611a, 0x63f0, 0x69f, 0xa66e, 0x2be9, 0x1, 0x0);
        gbc.writeMem(0x2441, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x63, gbc.a());
        EXPECT(0x6, gbc.b());
        EXPECT(0x9f, gbc.c());
        EXPECT(0xa6, gbc.d());
        EXPECT(0x6e, gbc.e());
        EXPECT(0x2b, gbc.h());
        EXPECT(0xe9, gbc.l());
        EXPECT(0x611a, gbc.sp());
        EXPECT(0x2443, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 01E8
        gbc.setState(0xc4ae, 0x3fae, 0x6d30, 0x30c7, 0x243d, 0xf837, 0x0, 0x1);
        gbc.writeMem(0xc4ae, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x6d, gbc.a());
        EXPECT(0x10, gbc.b());
        EXPECT(0xc7, gbc.c());
        EXPECT(0x24, gbc.d());
        EXPECT(0x3d, gbc.e());
        EXPECT(0xf8, gbc.h());
        EXPECT(0x37, gbc.l());
        EXPECT(0x3fae, gbc.sp());
        EXPECT(0xc4b0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc4ae));
        EXPECT(0xa8, gbc.readMem(0xc4af));
        // CB A8 01E9
        gbc.setState(0x3a2, 0x9b94, 0xd9e0, 0xdaae, 0x637d, 0xbf3a, 0x0, 0x0);
        gbc.writeMem(0x3a2, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xd9, gbc.a());
        EXPECT(0xda, gbc.b());
        EXPECT(0xae, gbc.c());
        EXPECT(0x63, gbc.d());
        EXPECT(0x7d, gbc.e());
        EXPECT(0xbf, gbc.h());
        EXPECT(0x3a, gbc.l());
        EXPECT(0x9b94, gbc.sp());
        EXPECT(0x3a4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 01EA
        gbc.setState(0x9970, 0x7d4d, 0x4880, 0x4ea6, 0x4b08, 0x5aa, 0x1, 0x1);
        gbc.writeMem(0x9970, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x48, gbc.a());
        EXPECT(0x4e, gbc.b());
        EXPECT(0xa6, gbc.c());
        EXPECT(0x4b, gbc.d());
        EXPECT(0x8, gbc.e());
        EXPECT(0x5, gbc.h());
        EXPECT(0xaa, gbc.l());
        EXPECT(0x7d4d, gbc.sp());
        EXPECT(0x9972, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9970));
        EXPECT(0xa8, gbc.readMem(0x9971));
        // CB A8 01EB
        gbc.setState(0x40ca, 0x6629, 0xe20, 0x515b, 0xc925, 0xe65b, 0x1, 0x0);
        gbc.writeMem(0x40ca, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xe, gbc.a());
        EXPECT(0x51, gbc.b());
        EXPECT(0x5b, gbc.c());
        EXPECT(0xc9, gbc.d());
        EXPECT(0x25, gbc.e());
        EXPECT(0xe6, gbc.h());
        EXPECT(0x5b, gbc.l());
        EXPECT(0x6629, gbc.sp());
        EXPECT(0x40cc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 01EC
        gbc.setState(0x9799, 0x3671, 0x4730, 0xe587, 0x1b, 0xb142, 0x0, 0x1);
        gbc.writeMem(0x9799, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x47, gbc.a());
        EXPECT(0xc5, gbc.b());
        EXPECT(0x87, gbc.c());
        EXPECT(0x0, gbc.d());
        EXPECT(0x1b, gbc.e());
        EXPECT(0xb1, gbc.h());
        EXPECT(0x42, gbc.l());
        EXPECT(0x3671, gbc.sp());
        EXPECT(0x979b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9799));
        EXPECT(0xa8, gbc.readMem(0x979a));
        // CB A8 01ED
        gbc.setState(0x7a6, 0xe75, 0x6ea0, 0xa7e8, 0x158, 0xca43, 0x1, 0x0);
        gbc.writeMem(0x7a6, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x6e, gbc.a());
        EXPECT(0x87, gbc.b());
        EXPECT(0xe8, gbc.c());
        EXPECT(0x1, gbc.d());
        EXPECT(0x58, gbc.e());
        EXPECT(0xca, gbc.h());
        EXPECT(0x43, gbc.l());
        EXPECT(0xe75, gbc.sp());
        EXPECT(0x7a8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 01EE
        gbc.setState(0x2598, 0xdfe, 0x5860, 0xb5d7, 0xc549, 0x3495, 0x1, 0x0);
        gbc.writeMem(0x2598, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x58, gbc.a());
        EXPECT(0x95, gbc.b());
        EXPECT(0xd7, gbc.c());
        EXPECT(0xc5, gbc.d());
        EXPECT(0x49, gbc.e());
        EXPECT(0x34, gbc.h());
        EXPECT(0x95, gbc.l());
        EXPECT(0xdfe, gbc.sp());
        EXPECT(0x259a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 01F1
        gbc.setState(0xa608, 0x22b5, 0x99c0, 0xa6f4, 0x6a16, 0xe269, 0x0, 0x0);
        gbc.writeMem(0xa608, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x99, gbc.a());
        EXPECT(0x86, gbc.b());
        EXPECT(0xf4, gbc.c());
        EXPECT(0x6a, gbc.d());
        EXPECT(0x16, gbc.e());
        EXPECT(0xe2, gbc.h());
        EXPECT(0x69, gbc.l());
        EXPECT(0x22b5, gbc.sp());
        EXPECT(0xa60a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa608));
        EXPECT(0xa8, gbc.readMem(0xa609));
        // CB A8 01F2
        gbc.setState(0xcf3f, 0xd917, 0xc920, 0x8a68, 0xb844, 0x18e, 0x1, 0x1);
        gbc.writeMem(0xcf3f, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xc9, gbc.a());
        EXPECT(0x8a, gbc.b());
        EXPECT(0x68, gbc.c());
        EXPECT(0xb8, gbc.d());
        EXPECT(0x44, gbc.e());
        EXPECT(0x1, gbc.h());
        EXPECT(0x8e, gbc.l());
        EXPECT(0xd917, gbc.sp());
        EXPECT(0xcf41, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcf3f));
        EXPECT(0xa8, gbc.readMem(0xcf40));
        // CB A8 01F3
        gbc.setState(0xe9b6, 0xbfa4, 0x7880, 0xc112, 0xfb50, 0xc6bb, 0x1, 0x1);
        gbc.writeMem(0xe9b6, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x78, gbc.a());
        EXPECT(0xc1, gbc.b());
        EXPECT(0x12, gbc.c());
        EXPECT(0xfb, gbc.d());
        EXPECT(0x50, gbc.e());
        EXPECT(0xc6, gbc.h());
        EXPECT(0xbb, gbc.l());
        EXPECT(0xbfa4, gbc.sp());
        EXPECT(0xe9b8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe9b6));
        EXPECT(0xa8, gbc.readMem(0xe9b7));
        // CB A8 01F4
        gbc.setState(0x8814, 0x2625, 0xc830, 0x1c2, 0x1d86, 0x7450, 0x0, 0x0);
        gbc.writeMem(0x8814, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xc8, gbc.a());
        EXPECT(0x1, gbc.b());
        EXPECT(0xc2, gbc.c());
        EXPECT(0x1d, gbc.d());
        EXPECT(0x86, gbc.e());
        EXPECT(0x74, gbc.h());
        EXPECT(0x50, gbc.l());
        EXPECT(0x2625, gbc.sp());
        EXPECT(0x8816, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8814));
        EXPECT(0xa8, gbc.readMem(0x8815));
        // CB A8 01F5
        gbc.setState(0x89bd, 0x2d5a, 0xd360, 0x464, 0x1fb5, 0x8d5d, 0x1, 0x1);
        gbc.writeMem(0x89bd, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xd3, gbc.a());
        EXPECT(0x4, gbc.b());
        EXPECT(0x64, gbc.c());
        EXPECT(0x1f, gbc.d());
        EXPECT(0xb5, gbc.e());
        EXPECT(0x8d, gbc.h());
        EXPECT(0x5d, gbc.l());
        EXPECT(0x2d5a, gbc.sp());
        EXPECT(0x89bf, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x89bd));
        EXPECT(0xa8, gbc.readMem(0x89be));
        // CB A8 01F6
        gbc.setState(0x6b50, 0xbd00, 0x95a0, 0xa9e7, 0xaa6b, 0x33d9, 0x0, 0x1);
        gbc.writeMem(0x6b50, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x95, gbc.a());
        EXPECT(0x89, gbc.b());
        EXPECT(0xe7, gbc.c());
        EXPECT(0xaa, gbc.d());
        EXPECT(0x6b, gbc.e());
        EXPECT(0x33, gbc.h());
        EXPECT(0xd9, gbc.l());
        EXPECT(0xbd00, gbc.sp());
        EXPECT(0x6b52, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 01F7
        gbc.setState(0xaa82, 0xbd7, 0x940, 0x4686, 0x6b34, 0xd6de, 0x0, 0x0);
        gbc.writeMem(0xaa82, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x9, gbc.a());
        EXPECT(0x46, gbc.b());
        EXPECT(0x86, gbc.c());
        EXPECT(0x6b, gbc.d());
        EXPECT(0x34, gbc.e());
        EXPECT(0xd6, gbc.h());
        EXPECT(0xde, gbc.l());
        EXPECT(0xbd7, gbc.sp());
        EXPECT(0xaa84, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaa82));
        EXPECT(0xa8, gbc.readMem(0xaa83));
        // CB A8 01F8
        gbc.setState(0x51c3, 0x3786, 0x68a0, 0x5c16, 0x481d, 0xe74a, 0x1, 0x0);
        gbc.writeMem(0x51c3, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x68, gbc.a());
        EXPECT(0x5c, gbc.b());
        EXPECT(0x16, gbc.c());
        EXPECT(0x48, gbc.d());
        EXPECT(0x1d, gbc.e());
        EXPECT(0xe7, gbc.h());
        EXPECT(0x4a, gbc.l());
        EXPECT(0x3786, gbc.sp());
        EXPECT(0x51c5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 01F9
        gbc.setState(0x1110, 0x69a5, 0x3200, 0x10d6, 0x873b, 0x6162, 0x0, 0x1);
        gbc.writeMem(0x1110, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x32, gbc.a());
        EXPECT(0x10, gbc.b());
        EXPECT(0xd6, gbc.c());
        EXPECT(0x87, gbc.d());
        EXPECT(0x3b, gbc.e());
        EXPECT(0x61, gbc.h());
        EXPECT(0x62, gbc.l());
        EXPECT(0x69a5, gbc.sp());
        EXPECT(0x1112, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 01FA
        gbc.setState(0x7a0, 0x244c, 0xba20, 0x5f9d, 0x4e42, 0x7efd, 0x0, 0x0);
        gbc.writeMem(0x7a0, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xba, gbc.a());
        EXPECT(0x5f, gbc.b());
        EXPECT(0x9d, gbc.c());
        EXPECT(0x4e, gbc.d());
        EXPECT(0x42, gbc.e());
        EXPECT(0x7e, gbc.h());
        EXPECT(0xfd, gbc.l());
        EXPECT(0x244c, gbc.sp());
        EXPECT(0x7a2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 01FB
        gbc.setState(0xdcf, 0x7aa5, 0xf980, 0x62d2, 0xedb9, 0x20b2, 0x0, 0x1);
        gbc.writeMem(0xdcf, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xf9, gbc.a());
        EXPECT(0x42, gbc.b());
        EXPECT(0xd2, gbc.c());
        EXPECT(0xed, gbc.d());
        EXPECT(0xb9, gbc.e());
        EXPECT(0x20, gbc.h());
        EXPECT(0xb2, gbc.l());
        EXPECT(0x7aa5, gbc.sp());
        EXPECT(0xdd1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 01FC
        gbc.setState(0x6965, 0xd480, 0x3e50, 0x46b5, 0x386d, 0x71d3, 0x1, 0x0);
        gbc.writeMem(0x6965, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x3e, gbc.a());
        EXPECT(0x46, gbc.b());
        EXPECT(0xb5, gbc.c());
        EXPECT(0x38, gbc.d());
        EXPECT(0x6d, gbc.e());
        EXPECT(0x71, gbc.h());
        EXPECT(0xd3, gbc.l());
        EXPECT(0xd480, gbc.sp());
        EXPECT(0x6967, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 01FD
        gbc.setState(0x7879, 0x549b, 0x7d00, 0x502f, 0x6ae1, 0x8209, 0x0, 0x0);
        gbc.writeMem(0x7879, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x7d, gbc.a());
        EXPECT(0x50, gbc.b());
        EXPECT(0x2f, gbc.c());
        EXPECT(0x6a, gbc.d());
        EXPECT(0xe1, gbc.e());
        EXPECT(0x82, gbc.h());
        EXPECT(0x9, gbc.l());
        EXPECT(0x549b, gbc.sp());
        EXPECT(0x787b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 01FE
        gbc.setState(0xedb0, 0xa314, 0x62d0, 0x7a27, 0x2d27, 0x9b8, 0x1, 0x1);
        gbc.writeMem(0xedb0, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x62, gbc.a());
        EXPECT(0x5a, gbc.b());
        EXPECT(0x27, gbc.c());
        EXPECT(0x2d, gbc.d());
        EXPECT(0x27, gbc.e());
        EXPECT(0x9, gbc.h());
        EXPECT(0xb8, gbc.l());
        EXPECT(0xa314, gbc.sp());
        EXPECT(0xedb2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xedb0));
        EXPECT(0xa8, gbc.readMem(0xedb1));
        // CB A8 01FF
        gbc.setState(0x38f4, 0x751, 0xe5d0, 0x35b4, 0xd955, 0x6ec2, 0x0, 0x0);
        gbc.writeMem(0x38f4, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xe5, gbc.a());
        EXPECT(0x15, gbc.b());
        EXPECT(0xb4, gbc.c());
        EXPECT(0xd9, gbc.d());
        EXPECT(0x55, gbc.e());
        EXPECT(0x6e, gbc.h());
        EXPECT(0xc2, gbc.l());
        EXPECT(0x751, gbc.sp());
        EXPECT(0x38f6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 0200
        gbc.setState(0x6b02, 0x6cb6, 0xe650, 0x23b7, 0xcbb4, 0x42bd, 0x1, 0x0);
        gbc.writeMem(0x6b02, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xe6, gbc.a());
        EXPECT(0x3, gbc.b());
        EXPECT(0xb7, gbc.c());
        EXPECT(0xcb, gbc.d());
        EXPECT(0xb4, gbc.e());
        EXPECT(0x42, gbc.h());
        EXPECT(0xbd, gbc.l());
        EXPECT(0x6cb6, gbc.sp());
        EXPECT(0x6b04, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 0201
        gbc.setState(0x3e1b, 0xf198, 0xe000, 0xf905, 0x4afc, 0x4938, 0x1, 0x0);
        gbc.writeMem(0x3e1b, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xe0, gbc.a());
        EXPECT(0xd9, gbc.b());
        EXPECT(0x5, gbc.c());
        EXPECT(0x4a, gbc.d());
        EXPECT(0xfc, gbc.e());
        EXPECT(0x49, gbc.h());
        EXPECT(0x38, gbc.l());
        EXPECT(0xf198, gbc.sp());
        EXPECT(0x3e1d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 0202
        gbc.setState(0x3c4a, 0x9f9f, 0xf570, 0x2c9a, 0x1eb0, 0xae89, 0x0, 0x1);
        gbc.writeMem(0x3c4a, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xf5, gbc.a());
        EXPECT(0xc, gbc.b());
        EXPECT(0x9a, gbc.c());
        EXPECT(0x1e, gbc.d());
        EXPECT(0xb0, gbc.e());
        EXPECT(0xae, gbc.h());
        EXPECT(0x89, gbc.l());
        EXPECT(0x9f9f, gbc.sp());
        EXPECT(0x3c4c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 0203
        gbc.setState(0x1e6e, 0x9c8c, 0x8a0, 0x45b0, 0xfb3e, 0x5283, 0x0, 0x1);
        gbc.writeMem(0x1e6e, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x8, gbc.a());
        EXPECT(0x45, gbc.b());
        EXPECT(0xb0, gbc.c());
        EXPECT(0xfb, gbc.d());
        EXPECT(0x3e, gbc.e());
        EXPECT(0x52, gbc.h());
        EXPECT(0x83, gbc.l());
        EXPECT(0x9c8c, gbc.sp());
        EXPECT(0x1e70, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 0204
        gbc.setState(0x4a45, 0x44d1, 0xdb40, 0x3044, 0xc175, 0xb83, 0x1, 0x0);
        gbc.writeMem(0x4a45, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xdb, gbc.a());
        EXPECT(0x10, gbc.b());
        EXPECT(0x44, gbc.c());
        EXPECT(0xc1, gbc.d());
        EXPECT(0x75, gbc.e());
        EXPECT(0xb, gbc.h());
        EXPECT(0x83, gbc.l());
        EXPECT(0x44d1, gbc.sp());
        EXPECT(0x4a47, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 0205
        gbc.setState(0x55bd, 0x1477, 0x9e20, 0xa7fb, 0x648a, 0x8e0c, 0x1, 0x1);
        gbc.writeMem(0x55bd, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x9e, gbc.a());
        EXPECT(0x87, gbc.b());
        EXPECT(0xfb, gbc.c());
        EXPECT(0x64, gbc.d());
        EXPECT(0x8a, gbc.e());
        EXPECT(0x8e, gbc.h());
        EXPECT(0xc, gbc.l());
        EXPECT(0x1477, gbc.sp());
        EXPECT(0x55bf, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 0206
        gbc.setState(0x51f4, 0x2ea9, 0x5600, 0x714, 0xce9c, 0x4a8c, 0x0, 0x0);
        gbc.writeMem(0x51f4, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x56, gbc.a());
        EXPECT(0x7, gbc.b());
        EXPECT(0x14, gbc.c());
        EXPECT(0xce, gbc.d());
        EXPECT(0x9c, gbc.e());
        EXPECT(0x4a, gbc.h());
        EXPECT(0x8c, gbc.l());
        EXPECT(0x2ea9, gbc.sp());
        EXPECT(0x51f6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 0207
        gbc.setState(0xc5f7, 0x64a1, 0xb050, 0x4788, 0x8f4b, 0xe686, 0x1, 0x1);
        gbc.writeMem(0xc5f7, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xb0, gbc.a());
        EXPECT(0x47, gbc.b());
        EXPECT(0x88, gbc.c());
        EXPECT(0x8f, gbc.d());
        EXPECT(0x4b, gbc.e());
        EXPECT(0xe6, gbc.h());
        EXPECT(0x86, gbc.l());
        EXPECT(0x64a1, gbc.sp());
        EXPECT(0xc5f9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc5f7));
        EXPECT(0xa8, gbc.readMem(0xc5f8));
        // CB A8 0208
        gbc.setState(0xf7f, 0x73d3, 0x7c30, 0x5f72, 0xe24d, 0x9f9, 0x0, 0x1);
        gbc.writeMem(0xf7f, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x7c, gbc.a());
        EXPECT(0x5f, gbc.b());
        EXPECT(0x72, gbc.c());
        EXPECT(0xe2, gbc.d());
        EXPECT(0x4d, gbc.e());
        EXPECT(0x9, gbc.h());
        EXPECT(0xf9, gbc.l());
        EXPECT(0x73d3, gbc.sp());
        EXPECT(0xf81, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 0209
        gbc.setState(0x17a8, 0x1461, 0xe4e0, 0x412a, 0x7b45, 0x9475, 0x1, 0x0);
        gbc.writeMem(0x17a8, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xe4, gbc.a());
        EXPECT(0x41, gbc.b());
        EXPECT(0x2a, gbc.c());
        EXPECT(0x7b, gbc.d());
        EXPECT(0x45, gbc.e());
        EXPECT(0x94, gbc.h());
        EXPECT(0x75, gbc.l());
        EXPECT(0x1461, gbc.sp());
        EXPECT(0x17aa, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 020A
        gbc.setState(0xc90d, 0xf698, 0x2ff0, 0x430, 0x4e31, 0x6913, 0x0, 0x1);
        gbc.writeMem(0xc90d, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x2f, gbc.a());
        EXPECT(0x4, gbc.b());
        EXPECT(0x30, gbc.c());
        EXPECT(0x4e, gbc.d());
        EXPECT(0x31, gbc.e());
        EXPECT(0x69, gbc.h());
        EXPECT(0x13, gbc.l());
        EXPECT(0xf698, gbc.sp());
        EXPECT(0xc90f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc90d));
        EXPECT(0xa8, gbc.readMem(0xc90e));
        // CB A8 020B
        gbc.setState(0xda6, 0x3a5, 0xc740, 0xcd6, 0xf34f, 0xbf1, 0x0, 0x0);
        gbc.writeMem(0xda6, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xc7, gbc.a());
        EXPECT(0xc, gbc.b());
        EXPECT(0xd6, gbc.c());
        EXPECT(0xf3, gbc.d());
        EXPECT(0x4f, gbc.e());
        EXPECT(0xb, gbc.h());
        EXPECT(0xf1, gbc.l());
        EXPECT(0x3a5, gbc.sp());
        EXPECT(0xda8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 020C
        gbc.setState(0xbb4f, 0xc213, 0x27a0, 0x262d, 0x7562, 0xef4a, 0x1, 0x0);
        gbc.writeMem(0xbb4f, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x27, gbc.a());
        EXPECT(0x6, gbc.b());
        EXPECT(0x2d, gbc.c());
        EXPECT(0x75, gbc.d());
        EXPECT(0x62, gbc.e());
        EXPECT(0xef, gbc.h());
        EXPECT(0x4a, gbc.l());
        EXPECT(0xc213, gbc.sp());
        EXPECT(0xbb51, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbb4f));
        EXPECT(0xa8, gbc.readMem(0xbb50));
        // CB A8 020D
        gbc.setState(0xae9e, 0x212a, 0x2c20, 0x179b, 0xcc34, 0x9b17, 0x1, 0x0);
        gbc.writeMem(0xae9e, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x2c, gbc.a());
        EXPECT(0x17, gbc.b());
        EXPECT(0x9b, gbc.c());
        EXPECT(0xcc, gbc.d());
        EXPECT(0x34, gbc.e());
        EXPECT(0x9b, gbc.h());
        EXPECT(0x17, gbc.l());
        EXPECT(0x212a, gbc.sp());
        EXPECT(0xaea0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xae9e));
        EXPECT(0xa8, gbc.readMem(0xae9f));
        // CB A8 020E
        gbc.setState(0x121c, 0xc0c9, 0xcb20, 0x5b7d, 0xd616, 0x50d5, 0x1, 0x1);
        gbc.writeMem(0x121c, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xcb, gbc.a());
        EXPECT(0x5b, gbc.b());
        EXPECT(0x7d, gbc.c());
        EXPECT(0xd6, gbc.d());
        EXPECT(0x16, gbc.e());
        EXPECT(0x50, gbc.h());
        EXPECT(0xd5, gbc.l());
        EXPECT(0xc0c9, gbc.sp());
        EXPECT(0x121e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 020F
        gbc.setState(0x4fee, 0xd30b, 0xa2a0, 0x2f2, 0x4174, 0x398f, 0x0, 0x0);
        gbc.writeMem(0x4fee, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xa2, gbc.a());
        EXPECT(0x2, gbc.b());
        EXPECT(0xf2, gbc.c());
        EXPECT(0x41, gbc.d());
        EXPECT(0x74, gbc.e());
        EXPECT(0x39, gbc.h());
        EXPECT(0x8f, gbc.l());
        EXPECT(0xd30b, gbc.sp());
        EXPECT(0x4ff0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 0210
        gbc.setState(0x846a, 0x3ca, 0xe0c0, 0x4491, 0x228e, 0x9ce0, 0x0, 0x0);
        gbc.writeMem(0x846a, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xe0, gbc.a());
        EXPECT(0x44, gbc.b());
        EXPECT(0x91, gbc.c());
        EXPECT(0x22, gbc.d());
        EXPECT(0x8e, gbc.e());
        EXPECT(0x9c, gbc.h());
        EXPECT(0xe0, gbc.l());
        EXPECT(0x3ca, gbc.sp());
        EXPECT(0x846c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x846a));
        EXPECT(0xa8, gbc.readMem(0x846b));
        // CB A8 0212
        gbc.setState(0x6349, 0xaa0e, 0x7a80, 0xd21c, 0xead0, 0xa4bc, 0x1, 0x0);
        gbc.writeMem(0x6349, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x7a, gbc.a());
        EXPECT(0xd2, gbc.b());
        EXPECT(0x1c, gbc.c());
        EXPECT(0xea, gbc.d());
        EXPECT(0xd0, gbc.e());
        EXPECT(0xa4, gbc.h());
        EXPECT(0xbc, gbc.l());
        EXPECT(0xaa0e, gbc.sp());
        EXPECT(0x634b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 0213
        gbc.setState(0x242a, 0x650c, 0xf890, 0x79da, 0xfdbe, 0x3e72, 0x0, 0x0);
        gbc.writeMem(0x242a, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xf8, gbc.a());
        EXPECT(0x59, gbc.b());
        EXPECT(0xda, gbc.c());
        EXPECT(0xfd, gbc.d());
        EXPECT(0xbe, gbc.e());
        EXPECT(0x3e, gbc.h());
        EXPECT(0x72, gbc.l());
        EXPECT(0x650c, gbc.sp());
        EXPECT(0x242c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 0214
        gbc.setState(0xe4db, 0x29d4, 0x5950, 0x6a51, 0x9eff, 0x56ef, 0x1, 0x0);
        gbc.writeMem(0xe4db, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x59, gbc.a());
        EXPECT(0x4a, gbc.b());
        EXPECT(0x51, gbc.c());
        EXPECT(0x9e, gbc.d());
        EXPECT(0xff, gbc.e());
        EXPECT(0x56, gbc.h());
        EXPECT(0xef, gbc.l());
        EXPECT(0x29d4, gbc.sp());
        EXPECT(0xe4dd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe4db));
        EXPECT(0xa8, gbc.readMem(0xe4dc));
        // CB A8 0215
        gbc.setState(0x33dd, 0x7fd8, 0xb0c0, 0x4fa2, 0xe55c, 0x200b, 0x0, 0x0);
        gbc.writeMem(0x33dd, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xb0, gbc.a());
        EXPECT(0x4f, gbc.b());
        EXPECT(0xa2, gbc.c());
        EXPECT(0xe5, gbc.d());
        EXPECT(0x5c, gbc.e());
        EXPECT(0x20, gbc.h());
        EXPECT(0xb, gbc.l());
        EXPECT(0x7fd8, gbc.sp());
        EXPECT(0x33df, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 0216
        gbc.setState(0xd541, 0x93f, 0x4690, 0xec50, 0x24cd, 0xd8e9, 0x1, 0x0);
        gbc.writeMem(0xd541, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x46, gbc.a());
        EXPECT(0xcc, gbc.b());
        EXPECT(0x50, gbc.c());
        EXPECT(0x24, gbc.d());
        EXPECT(0xcd, gbc.e());
        EXPECT(0xd8, gbc.h());
        EXPECT(0xe9, gbc.l());
        EXPECT(0x93f, gbc.sp());
        EXPECT(0xd543, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd541));
        EXPECT(0xa8, gbc.readMem(0xd542));
        // CB A8 0217
        gbc.setState(0x990d, 0x29b1, 0x1770, 0x7293, 0x951b, 0xe1d8, 0x0, 0x1);
        gbc.writeMem(0x990d, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x17, gbc.a());
        EXPECT(0x52, gbc.b());
        EXPECT(0x93, gbc.c());
        EXPECT(0x95, gbc.d());
        EXPECT(0x1b, gbc.e());
        EXPECT(0xe1, gbc.h());
        EXPECT(0xd8, gbc.l());
        EXPECT(0x29b1, gbc.sp());
        EXPECT(0x990f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x990d));
        EXPECT(0xa8, gbc.readMem(0x990e));
        // CB A8 0218
        gbc.setState(0x76cc, 0xfefe, 0x3fa0, 0xba64, 0xf695, 0x5b8b, 0x0, 0x1);
        gbc.writeMem(0x76cc, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x3f, gbc.a());
        EXPECT(0x9a, gbc.b());
        EXPECT(0x64, gbc.c());
        EXPECT(0xf6, gbc.d());
        EXPECT(0x95, gbc.e());
        EXPECT(0x5b, gbc.h());
        EXPECT(0x8b, gbc.l());
        EXPECT(0xfefe, gbc.sp());
        EXPECT(0x76ce, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 0219
        gbc.setState(0x2398, 0xc0e, 0xb0c0, 0x3aa2, 0x81af, 0x87a4, 0x1, 0x0);
        gbc.writeMem(0x2398, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xb0, gbc.a());
        EXPECT(0x1a, gbc.b());
        EXPECT(0xa2, gbc.c());
        EXPECT(0x81, gbc.d());
        EXPECT(0xaf, gbc.e());
        EXPECT(0x87, gbc.h());
        EXPECT(0xa4, gbc.l());
        EXPECT(0xc0e, gbc.sp());
        EXPECT(0x239a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 021A
        gbc.setState(0x6936, 0x4a74, 0x19f0, 0x3f36, 0xdbb4, 0x68be, 0x0, 0x0);
        gbc.writeMem(0x6936, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x19, gbc.a());
        EXPECT(0x1f, gbc.b());
        EXPECT(0x36, gbc.c());
        EXPECT(0xdb, gbc.d());
        EXPECT(0xb4, gbc.e());
        EXPECT(0x68, gbc.h());
        EXPECT(0xbe, gbc.l());
        EXPECT(0x4a74, gbc.sp());
        EXPECT(0x6938, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 021B
        gbc.setState(0x7ed9, 0x4e1, 0x5fc0, 0x21d5, 0x2cae, 0xacc1, 0x0, 0x1);
        gbc.writeMem(0x7ed9, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x5f, gbc.a());
        EXPECT(0x1, gbc.b());
        EXPECT(0xd5, gbc.c());
        EXPECT(0x2c, gbc.d());
        EXPECT(0xae, gbc.e());
        EXPECT(0xac, gbc.h());
        EXPECT(0xc1, gbc.l());
        EXPECT(0x4e1, gbc.sp());
        EXPECT(0x7edb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 021C
        gbc.setState(0x694, 0xd79b, 0xa7d0, 0xbd19, 0x653a, 0x61e0, 0x0, 0x1);
        gbc.writeMem(0x694, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xa7, gbc.a());
        EXPECT(0x9d, gbc.b());
        EXPECT(0x19, gbc.c());
        EXPECT(0x65, gbc.d());
        EXPECT(0x3a, gbc.e());
        EXPECT(0x61, gbc.h());
        EXPECT(0xe0, gbc.l());
        EXPECT(0xd79b, gbc.sp());
        EXPECT(0x696, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 021D
        gbc.setState(0x8728, 0xe0d9, 0x66a0, 0xba19, 0xb246, 0xdd45, 0x1, 0x0);
        gbc.writeMem(0x8728, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x66, gbc.a());
        EXPECT(0x9a, gbc.b());
        EXPECT(0x19, gbc.c());
        EXPECT(0xb2, gbc.d());
        EXPECT(0x46, gbc.e());
        EXPECT(0xdd, gbc.h());
        EXPECT(0x45, gbc.l());
        EXPECT(0xe0d9, gbc.sp());
        EXPECT(0x872a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8728));
        EXPECT(0xa8, gbc.readMem(0x8729));
        // CB A8 021F
        gbc.setState(0x9468, 0xddec, 0x300, 0x2f48, 0x219d, 0x5ae7, 0x0, 0x1);
        gbc.writeMem(0x9468, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x3, gbc.a());
        EXPECT(0xf, gbc.b());
        EXPECT(0x48, gbc.c());
        EXPECT(0x21, gbc.d());
        EXPECT(0x9d, gbc.e());
        EXPECT(0x5a, gbc.h());
        EXPECT(0xe7, gbc.l());
        EXPECT(0xddec, gbc.sp());
        EXPECT(0x946a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9468));
        EXPECT(0xa8, gbc.readMem(0x9469));
        // CB A8 0220
        gbc.setState(0xef96, 0x9573, 0xacf0, 0x6f36, 0xc196, 0x2d5a, 0x1, 0x0);
        gbc.writeMem(0xef96, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xac, gbc.a());
        EXPECT(0x4f, gbc.b());
        EXPECT(0x36, gbc.c());
        EXPECT(0xc1, gbc.d());
        EXPECT(0x96, gbc.e());
        EXPECT(0x2d, gbc.h());
        EXPECT(0x5a, gbc.l());
        EXPECT(0x9573, gbc.sp());
        EXPECT(0xef98, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xef96));
        EXPECT(0xa8, gbc.readMem(0xef97));
        // CB A8 0221
        gbc.setState(0x71ef, 0x97cb, 0x37c0, 0x8246, 0x5de9, 0xc57d, 0x0, 0x0);
        gbc.writeMem(0x71ef, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x37, gbc.a());
        EXPECT(0x82, gbc.b());
        EXPECT(0x46, gbc.c());
        EXPECT(0x5d, gbc.d());
        EXPECT(0xe9, gbc.e());
        EXPECT(0xc5, gbc.h());
        EXPECT(0x7d, gbc.l());
        EXPECT(0x97cb, gbc.sp());
        EXPECT(0x71f1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 0222
        gbc.setState(0x3eb8, 0xe505, 0x7490, 0xe85d, 0x9de8, 0x56c4, 0x1, 0x1);
        gbc.writeMem(0x3eb8, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x74, gbc.a());
        EXPECT(0xc8, gbc.b());
        EXPECT(0x5d, gbc.c());
        EXPECT(0x9d, gbc.d());
        EXPECT(0xe8, gbc.e());
        EXPECT(0x56, gbc.h());
        EXPECT(0xc4, gbc.l());
        EXPECT(0xe505, gbc.sp());
        EXPECT(0x3eba, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 0223
        gbc.setState(0x2ee6, 0xb873, 0xfca0, 0xc6a7, 0xd426, 0x43e6, 0x1, 0x0);
        gbc.writeMem(0x2ee6, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xfc, gbc.a());
        EXPECT(0xc6, gbc.b());
        EXPECT(0xa7, gbc.c());
        EXPECT(0xd4, gbc.d());
        EXPECT(0x26, gbc.e());
        EXPECT(0x43, gbc.h());
        EXPECT(0xe6, gbc.l());
        EXPECT(0xb873, gbc.sp());
        EXPECT(0x2ee8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 0224
        gbc.setState(0x6451, 0x16b7, 0x8ee0, 0x1bdf, 0xa6b2, 0x155b, 0x0, 0x0);
        gbc.writeMem(0x6451, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x8e, gbc.a());
        EXPECT(0x1b, gbc.b());
        EXPECT(0xdf, gbc.c());
        EXPECT(0xa6, gbc.d());
        EXPECT(0xb2, gbc.e());
        EXPECT(0x15, gbc.h());
        EXPECT(0x5b, gbc.l());
        EXPECT(0x16b7, gbc.sp());
        EXPECT(0x6453, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 0225
        gbc.setState(0xc8a4, 0x73cc, 0xced0, 0x98aa, 0x8521, 0x2c7a, 0x0, 0x0);
        gbc.writeMem(0xc8a4, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xce, gbc.a());
        EXPECT(0x98, gbc.b());
        EXPECT(0xaa, gbc.c());
        EXPECT(0x85, gbc.d());
        EXPECT(0x21, gbc.e());
        EXPECT(0x2c, gbc.h());
        EXPECT(0x7a, gbc.l());
        EXPECT(0x73cc, gbc.sp());
        EXPECT(0xc8a6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc8a4));
        EXPECT(0xa8, gbc.readMem(0xc8a5));
        // CB A8 0226
        gbc.setState(0x4fcc, 0x38b7, 0x3cc0, 0x6c72, 0xe020, 0x2912, 0x0, 0x1);
        gbc.writeMem(0x4fcc, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x3c, gbc.a());
        EXPECT(0x4c, gbc.b());
        EXPECT(0x72, gbc.c());
        EXPECT(0xe0, gbc.d());
        EXPECT(0x20, gbc.e());
        EXPECT(0x29, gbc.h());
        EXPECT(0x12, gbc.l());
        EXPECT(0x38b7, gbc.sp());
        EXPECT(0x4fce, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 0227
        gbc.setState(0x6403, 0x8b4f, 0xd550, 0xec8b, 0x403b, 0x2b6, 0x0, 0x1);
        gbc.writeMem(0x6403, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xd5, gbc.a());
        EXPECT(0xcc, gbc.b());
        EXPECT(0x8b, gbc.c());
        EXPECT(0x40, gbc.d());
        EXPECT(0x3b, gbc.e());
        EXPECT(0x2, gbc.h());
        EXPECT(0xb6, gbc.l());
        EXPECT(0x8b4f, gbc.sp());
        EXPECT(0x6405, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 0228
        gbc.setState(0x244a, 0x766d, 0x16d0, 0x2110, 0x1bf0, 0x38b4, 0x0, 0x0);
        gbc.writeMem(0x244a, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x16, gbc.a());
        EXPECT(0x1, gbc.b());
        EXPECT(0x10, gbc.c());
        EXPECT(0x1b, gbc.d());
        EXPECT(0xf0, gbc.e());
        EXPECT(0x38, gbc.h());
        EXPECT(0xb4, gbc.l());
        EXPECT(0x766d, gbc.sp());
        EXPECT(0x244c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 0229
        gbc.setState(0x2313, 0xd056, 0x6790, 0x3da7, 0x63b1, 0xa16f, 0x0, 0x0);
        gbc.writeMem(0x2313, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x67, gbc.a());
        EXPECT(0x1d, gbc.b());
        EXPECT(0xa7, gbc.c());
        EXPECT(0x63, gbc.d());
        EXPECT(0xb1, gbc.e());
        EXPECT(0xa1, gbc.h());
        EXPECT(0x6f, gbc.l());
        EXPECT(0xd056, gbc.sp());
        EXPECT(0x2315, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 022A
        gbc.setState(0x775d, 0xcb26, 0x76e0, 0xfc69, 0x3cc6, 0x5287, 0x1, 0x0);
        gbc.writeMem(0x775d, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x76, gbc.a());
        EXPECT(0xdc, gbc.b());
        EXPECT(0x69, gbc.c());
        EXPECT(0x3c, gbc.d());
        EXPECT(0xc6, gbc.e());
        EXPECT(0x52, gbc.h());
        EXPECT(0x87, gbc.l());
        EXPECT(0xcb26, gbc.sp());
        EXPECT(0x775f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 022B
        gbc.setState(0x461e, 0xafff, 0xb4a0, 0xa4f3, 0x69ec, 0xf89b, 0x0, 0x0);
        gbc.writeMem(0x461e, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xb4, gbc.a());
        EXPECT(0x84, gbc.b());
        EXPECT(0xf3, gbc.c());
        EXPECT(0x69, gbc.d());
        EXPECT(0xec, gbc.e());
        EXPECT(0xf8, gbc.h());
        EXPECT(0x9b, gbc.l());
        EXPECT(0xafff, gbc.sp());
        EXPECT(0x4620, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 022C
        gbc.setState(0xce98, 0x9033, 0xfe60, 0x278f, 0xabe9, 0x1efb, 0x1, 0x1);
        gbc.writeMem(0xce98, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xfe, gbc.a());
        EXPECT(0x7, gbc.b());
        EXPECT(0x8f, gbc.c());
        EXPECT(0xab, gbc.d());
        EXPECT(0xe9, gbc.e());
        EXPECT(0x1e, gbc.h());
        EXPECT(0xfb, gbc.l());
        EXPECT(0x9033, gbc.sp());
        EXPECT(0xce9a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xce98));
        EXPECT(0xa8, gbc.readMem(0xce99));
        // CB A8 022D
        gbc.setState(0xd8b0, 0xd826, 0xbc70, 0xc8e2, 0x2523, 0x42da, 0x0, 0x0);
        gbc.writeMem(0xd8b0, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xbc, gbc.a());
        EXPECT(0xc8, gbc.b());
        EXPECT(0xe2, gbc.c());
        EXPECT(0x25, gbc.d());
        EXPECT(0x23, gbc.e());
        EXPECT(0x42, gbc.h());
        EXPECT(0xda, gbc.l());
        EXPECT(0xd826, gbc.sp());
        EXPECT(0xd8b2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd8b0));
        EXPECT(0xa8, gbc.readMem(0xd8b1));
        // CB A8 022E
        gbc.setState(0x24f3, 0x7109, 0x5e0, 0x10e8, 0xc0c6, 0x4aea, 0x0, 0x1);
        gbc.writeMem(0x24f3, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x5, gbc.a());
        EXPECT(0x10, gbc.b());
        EXPECT(0xe8, gbc.c());
        EXPECT(0xc0, gbc.d());
        EXPECT(0xc6, gbc.e());
        EXPECT(0x4a, gbc.h());
        EXPECT(0xea, gbc.l());
        EXPECT(0x7109, gbc.sp());
        EXPECT(0x24f5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 022F
        gbc.setState(0x30e8, 0x454, 0x3720, 0x426b, 0x7442, 0x6dbf, 0x1, 0x1);
        gbc.writeMem(0x30e8, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x37, gbc.a());
        EXPECT(0x42, gbc.b());
        EXPECT(0x6b, gbc.c());
        EXPECT(0x74, gbc.d());
        EXPECT(0x42, gbc.e());
        EXPECT(0x6d, gbc.h());
        EXPECT(0xbf, gbc.l());
        EXPECT(0x454, gbc.sp());
        EXPECT(0x30ea, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 0230
        gbc.setState(0xa66b, 0xaf77, 0x44a0, 0x5165, 0xb773, 0x81ed, 0x1, 0x0);
        gbc.writeMem(0xa66b, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x44, gbc.a());
        EXPECT(0x51, gbc.b());
        EXPECT(0x65, gbc.c());
        EXPECT(0xb7, gbc.d());
        EXPECT(0x73, gbc.e());
        EXPECT(0x81, gbc.h());
        EXPECT(0xed, gbc.l());
        EXPECT(0xaf77, gbc.sp());
        EXPECT(0xa66d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa66b));
        EXPECT(0xa8, gbc.readMem(0xa66c));
        // CB A8 0231
        gbc.setState(0x573, 0xb0ce, 0xc7c0, 0xfff, 0x195c, 0xe9cb, 0x1, 0x0);
        gbc.writeMem(0x573, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xc7, gbc.a());
        EXPECT(0xf, gbc.b());
        EXPECT(0xff, gbc.c());
        EXPECT(0x19, gbc.d());
        EXPECT(0x5c, gbc.e());
        EXPECT(0xe9, gbc.h());
        EXPECT(0xcb, gbc.l());
        EXPECT(0xb0ce, gbc.sp());
        EXPECT(0x575, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 0232
        gbc.setState(0x4e08, 0x952f, 0x1e40, 0x5b72, 0xc6d8, 0x5d14, 0x0, 0x0);
        gbc.writeMem(0x4e08, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x1e, gbc.a());
        EXPECT(0x5b, gbc.b());
        EXPECT(0x72, gbc.c());
        EXPECT(0xc6, gbc.d());
        EXPECT(0xd8, gbc.e());
        EXPECT(0x5d, gbc.h());
        EXPECT(0x14, gbc.l());
        EXPECT(0x952f, gbc.sp());
        EXPECT(0x4e0a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 0233
        gbc.setState(0x51df, 0x26ad, 0xfe10, 0x5057, 0x7e93, 0xee96, 0x0, 0x0);
        gbc.writeMem(0x51df, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xfe, gbc.a());
        EXPECT(0x50, gbc.b());
        EXPECT(0x57, gbc.c());
        EXPECT(0x7e, gbc.d());
        EXPECT(0x93, gbc.e());
        EXPECT(0xee, gbc.h());
        EXPECT(0x96, gbc.l());
        EXPECT(0x26ad, gbc.sp());
        EXPECT(0x51e1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 0234
        gbc.setState(0x985e, 0xf6ff, 0x27b0, 0x38db, 0x1483, 0x40f7, 0x0, 0x0);
        gbc.writeMem(0x985e, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x27, gbc.a());
        EXPECT(0x18, gbc.b());
        EXPECT(0xdb, gbc.c());
        EXPECT(0x14, gbc.d());
        EXPECT(0x83, gbc.e());
        EXPECT(0x40, gbc.h());
        EXPECT(0xf7, gbc.l());
        EXPECT(0xf6ff, gbc.sp());
        EXPECT(0x9860, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x985e));
        EXPECT(0xa8, gbc.readMem(0x985f));
        // CB A8 0235
        gbc.setState(0x6788, 0x3ffc, 0x3490, 0xb2b3, 0xd238, 0xa4a0, 0x1, 0x1);
        gbc.writeMem(0x6788, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x34, gbc.a());
        EXPECT(0x92, gbc.b());
        EXPECT(0xb3, gbc.c());
        EXPECT(0xd2, gbc.d());
        EXPECT(0x38, gbc.e());
        EXPECT(0xa4, gbc.h());
        EXPECT(0xa0, gbc.l());
        EXPECT(0x3ffc, gbc.sp());
        EXPECT(0x678a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 0236
        gbc.setState(0x5be, 0xcf32, 0xbcf0, 0xfa63, 0xb900, 0x6d6, 0x1, 0x0);
        gbc.writeMem(0x5be, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xbc, gbc.a());
        EXPECT(0xda, gbc.b());
        EXPECT(0x63, gbc.c());
        EXPECT(0xb9, gbc.d());
        EXPECT(0x0, gbc.e());
        EXPECT(0x6, gbc.h());
        EXPECT(0xd6, gbc.l());
        EXPECT(0xcf32, gbc.sp());
        EXPECT(0x5c0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 0237
        gbc.setState(0xd126, 0x95f8, 0x6a10, 0x353e, 0x6d79, 0xc0d, 0x1, 0x0);
        gbc.writeMem(0xd126, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x6a, gbc.a());
        EXPECT(0x15, gbc.b());
        EXPECT(0x3e, gbc.c());
        EXPECT(0x6d, gbc.d());
        EXPECT(0x79, gbc.e());
        EXPECT(0xc, gbc.h());
        EXPECT(0xd, gbc.l());
        EXPECT(0x95f8, gbc.sp());
        EXPECT(0xd128, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd126));
        EXPECT(0xa8, gbc.readMem(0xd127));
        // CB A8 0238
        gbc.setState(0xea14, 0xa340, 0x36b0, 0xc7a3, 0xa807, 0xae30, 0x1, 0x1);
        gbc.writeMem(0xea14, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x36, gbc.a());
        EXPECT(0xc7, gbc.b());
        EXPECT(0xa3, gbc.c());
        EXPECT(0xa8, gbc.d());
        EXPECT(0x7, gbc.e());
        EXPECT(0xae, gbc.h());
        EXPECT(0x30, gbc.l());
        EXPECT(0xa340, gbc.sp());
        EXPECT(0xea16, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xea14));
        EXPECT(0xa8, gbc.readMem(0xea15));
        // CB A8 0239
        gbc.setState(0x277d, 0x208d, 0x8380, 0xa210, 0x3c27, 0xed26, 0x1, 0x0);
        gbc.writeMem(0x277d, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x83, gbc.a());
        EXPECT(0x82, gbc.b());
        EXPECT(0x10, gbc.c());
        EXPECT(0x3c, gbc.d());
        EXPECT(0x27, gbc.e());
        EXPECT(0xed, gbc.h());
        EXPECT(0x26, gbc.l());
        EXPECT(0x208d, gbc.sp());
        EXPECT(0x277f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 023A
        gbc.setState(0x1c36, 0xb438, 0x5d80, 0x9fe5, 0x6a33, 0x1fd1, 0x1, 0x1);
        gbc.writeMem(0x1c36, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x5d, gbc.a());
        EXPECT(0x9f, gbc.b());
        EXPECT(0xe5, gbc.c());
        EXPECT(0x6a, gbc.d());
        EXPECT(0x33, gbc.e());
        EXPECT(0x1f, gbc.h());
        EXPECT(0xd1, gbc.l());
        EXPECT(0xb438, gbc.sp());
        EXPECT(0x1c38, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 023B
        gbc.setState(0xa7d5, 0x6d65, 0x4b40, 0x5314, 0x8b3f, 0x1fc9, 0x0, 0x1);
        gbc.writeMem(0xa7d5, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x4b, gbc.a());
        EXPECT(0x53, gbc.b());
        EXPECT(0x14, gbc.c());
        EXPECT(0x8b, gbc.d());
        EXPECT(0x3f, gbc.e());
        EXPECT(0x1f, gbc.h());
        EXPECT(0xc9, gbc.l());
        EXPECT(0x6d65, gbc.sp());
        EXPECT(0xa7d7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa7d5));
        EXPECT(0xa8, gbc.readMem(0xa7d6));
        // CB A8 023C
        gbc.setState(0xcaf7, 0x58f7, 0x4780, 0x3561, 0x1be, 0xc680, 0x0, 0x1);
        gbc.writeMem(0xcaf7, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x47, gbc.a());
        EXPECT(0x15, gbc.b());
        EXPECT(0x61, gbc.c());
        EXPECT(0x1, gbc.d());
        EXPECT(0xbe, gbc.e());
        EXPECT(0xc6, gbc.h());
        EXPECT(0x80, gbc.l());
        EXPECT(0x58f7, gbc.sp());
        EXPECT(0xcaf9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcaf7));
        EXPECT(0xa8, gbc.readMem(0xcaf8));
        // CB A8 023D
        gbc.setState(0x643a, 0x1fad, 0x73b0, 0x9e77, 0x27b5, 0x9568, 0x0, 0x0);
        gbc.writeMem(0x643a, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x73, gbc.a());
        EXPECT(0x9e, gbc.b());
        EXPECT(0x77, gbc.c());
        EXPECT(0x27, gbc.d());
        EXPECT(0xb5, gbc.e());
        EXPECT(0x95, gbc.h());
        EXPECT(0x68, gbc.l());
        EXPECT(0x1fad, gbc.sp());
        EXPECT(0x643c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 023E
        gbc.setState(0x1f5a, 0x10f3, 0x43e0, 0xaa2e, 0x6987, 0xc1cc, 0x1, 0x0);
        gbc.writeMem(0x1f5a, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x43, gbc.a());
        EXPECT(0x8a, gbc.b());
        EXPECT(0x2e, gbc.c());
        EXPECT(0x69, gbc.d());
        EXPECT(0x87, gbc.e());
        EXPECT(0xc1, gbc.h());
        EXPECT(0xcc, gbc.l());
        EXPECT(0x10f3, gbc.sp());
        EXPECT(0x1f5c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 023F
        gbc.setState(0x8a4, 0xa22a, 0xb9b0, 0x40e7, 0xf6f2, 0xbca6, 0x0, 0x1);
        gbc.writeMem(0x8a4, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xb9, gbc.a());
        EXPECT(0x40, gbc.b());
        EXPECT(0xe7, gbc.c());
        EXPECT(0xf6, gbc.d());
        EXPECT(0xf2, gbc.e());
        EXPECT(0xbc, gbc.h());
        EXPECT(0xa6, gbc.l());
        EXPECT(0xa22a, gbc.sp());
        EXPECT(0x8a6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 0240
        gbc.setState(0xdfe0, 0x481f, 0x4cb0, 0x4e5b, 0x5eab, 0xaadc, 0x0, 0x1);
        gbc.writeMem(0xdfe0, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x4c, gbc.a());
        EXPECT(0x4e, gbc.b());
        EXPECT(0x5b, gbc.c());
        EXPECT(0x5e, gbc.d());
        EXPECT(0xab, gbc.e());
        EXPECT(0xaa, gbc.h());
        EXPECT(0xdc, gbc.l());
        EXPECT(0x481f, gbc.sp());
        EXPECT(0xdfe2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdfe0));
        EXPECT(0xa8, gbc.readMem(0xdfe1));
        // CB A8 0241
        gbc.setState(0x65ee, 0xd47c, 0x57d0, 0xf351, 0x8a79, 0xec1c, 0x1, 0x1);
        gbc.writeMem(0x65ee, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x57, gbc.a());
        EXPECT(0xd3, gbc.b());
        EXPECT(0x51, gbc.c());
        EXPECT(0x8a, gbc.d());
        EXPECT(0x79, gbc.e());
        EXPECT(0xec, gbc.h());
        EXPECT(0x1c, gbc.l());
        EXPECT(0xd47c, gbc.sp());
        EXPECT(0x65f0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 0242
        gbc.setState(0xdff1, 0x25c5, 0x5210, 0x1333, 0xc597, 0x117a, 0x1, 0x1);
        gbc.writeMem(0xdff1, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x52, gbc.a());
        EXPECT(0x13, gbc.b());
        EXPECT(0x33, gbc.c());
        EXPECT(0xc5, gbc.d());
        EXPECT(0x97, gbc.e());
        EXPECT(0x11, gbc.h());
        EXPECT(0x7a, gbc.l());
        EXPECT(0x25c5, gbc.sp());
        EXPECT(0xdff3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdff1));
        EXPECT(0xa8, gbc.readMem(0xdff2));
        // CB A8 0243
        gbc.setState(0x380e, 0xbf23, 0x3bc0, 0x3f8f, 0x651c, 0xbc87, 0x0, 0x0);
        gbc.writeMem(0x380e, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x3b, gbc.a());
        EXPECT(0x1f, gbc.b());
        EXPECT(0x8f, gbc.c());
        EXPECT(0x65, gbc.d());
        EXPECT(0x1c, gbc.e());
        EXPECT(0xbc, gbc.h());
        EXPECT(0x87, gbc.l());
        EXPECT(0xbf23, gbc.sp());
        EXPECT(0x3810, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 0244
        gbc.setState(0xbae5, 0x35a5, 0xf20, 0x5a60, 0xa781, 0x5e1e, 0x1, 0x1);
        gbc.writeMem(0xbae5, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xf, gbc.a());
        EXPECT(0x5a, gbc.b());
        EXPECT(0x60, gbc.c());
        EXPECT(0xa7, gbc.d());
        EXPECT(0x81, gbc.e());
        EXPECT(0x5e, gbc.h());
        EXPECT(0x1e, gbc.l());
        EXPECT(0x35a5, gbc.sp());
        EXPECT(0xbae7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbae5));
        EXPECT(0xa8, gbc.readMem(0xbae6));
        // CB A8 0245
        gbc.setState(0xcc77, 0x8cda, 0x8800, 0xf030, 0xeb67, 0x3df9, 0x1, 0x1);
        gbc.writeMem(0xcc77, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x88, gbc.a());
        EXPECT(0xd0, gbc.b());
        EXPECT(0x30, gbc.c());
        EXPECT(0xeb, gbc.d());
        EXPECT(0x67, gbc.e());
        EXPECT(0x3d, gbc.h());
        EXPECT(0xf9, gbc.l());
        EXPECT(0x8cda, gbc.sp());
        EXPECT(0xcc79, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcc77));
        EXPECT(0xa8, gbc.readMem(0xcc78));
        // CB A8 0246
        gbc.setState(0xe078, 0x2386, 0x4230, 0xb3f, 0x95b8, 0x5b78, 0x0, 0x0);
        gbc.writeMem(0xe078, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x42, gbc.a());
        EXPECT(0xb, gbc.b());
        EXPECT(0x3f, gbc.c());
        EXPECT(0x95, gbc.d());
        EXPECT(0xb8, gbc.e());
        EXPECT(0x5b, gbc.h());
        EXPECT(0x78, gbc.l());
        EXPECT(0x2386, gbc.sp());
        EXPECT(0xe07a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe078));
        EXPECT(0xa8, gbc.readMem(0xe079));
        // CB A8 0247
        gbc.setState(0xedfd, 0x9bfd, 0x7aa0, 0x8494, 0x1d6, 0x4e65, 0x0, 0x1);
        gbc.writeMem(0xedfd, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x7a, gbc.a());
        EXPECT(0x84, gbc.b());
        EXPECT(0x94, gbc.c());
        EXPECT(0x1, gbc.d());
        EXPECT(0xd6, gbc.e());
        EXPECT(0x4e, gbc.h());
        EXPECT(0x65, gbc.l());
        EXPECT(0x9bfd, gbc.sp());
        EXPECT(0xedff, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xedfd));
        EXPECT(0xa8, gbc.readMem(0xedfe));
        // CB A8 0248
        gbc.setState(0xa5b9, 0xebf5, 0x75a0, 0x3152, 0x599d, 0xa043, 0x1, 0x1);
        gbc.writeMem(0xa5b9, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x75, gbc.a());
        EXPECT(0x11, gbc.b());
        EXPECT(0x52, gbc.c());
        EXPECT(0x59, gbc.d());
        EXPECT(0x9d, gbc.e());
        EXPECT(0xa0, gbc.h());
        EXPECT(0x43, gbc.l());
        EXPECT(0xebf5, gbc.sp());
        EXPECT(0xa5bb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa5b9));
        EXPECT(0xa8, gbc.readMem(0xa5ba));
        // CB A8 0249
        gbc.setState(0xb302, 0x57db, 0xd4b0, 0xb821, 0x10c7, 0xd9c6, 0x0, 0x1);
        gbc.writeMem(0xb302, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xd4, gbc.a());
        EXPECT(0x98, gbc.b());
        EXPECT(0x21, gbc.c());
        EXPECT(0x10, gbc.d());
        EXPECT(0xc7, gbc.e());
        EXPECT(0xd9, gbc.h());
        EXPECT(0xc6, gbc.l());
        EXPECT(0x57db, gbc.sp());
        EXPECT(0xb304, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb302));
        EXPECT(0xa8, gbc.readMem(0xb303));
        // CB A8 024B
        gbc.setState(0xba03, 0x9ce, 0x4a60, 0x835b, 0x43e1, 0xe338, 0x0, 0x0);
        gbc.writeMem(0xba03, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x4a, gbc.a());
        EXPECT(0x83, gbc.b());
        EXPECT(0x5b, gbc.c());
        EXPECT(0x43, gbc.d());
        EXPECT(0xe1, gbc.e());
        EXPECT(0xe3, gbc.h());
        EXPECT(0x38, gbc.l());
        EXPECT(0x9ce, gbc.sp());
        EXPECT(0xba05, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xba03));
        EXPECT(0xa8, gbc.readMem(0xba04));
        // CB A8 024C
        gbc.setState(0xd3a3, 0xc5cd, 0xe5e0, 0x995c, 0xb996, 0x22fa, 0x1, 0x1);
        gbc.writeMem(0xd3a3, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xe5, gbc.a());
        EXPECT(0x99, gbc.b());
        EXPECT(0x5c, gbc.c());
        EXPECT(0xb9, gbc.d());
        EXPECT(0x96, gbc.e());
        EXPECT(0x22, gbc.h());
        EXPECT(0xfa, gbc.l());
        EXPECT(0xc5cd, gbc.sp());
        EXPECT(0xd3a5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd3a3));
        EXPECT(0xa8, gbc.readMem(0xd3a4));
        // CB A8 024D
        gbc.setState(0x213e, 0x7165, 0xa850, 0xaed2, 0xd127, 0x9ac7, 0x1, 0x1);
        gbc.writeMem(0x213e, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xa8, gbc.a());
        EXPECT(0x8e, gbc.b());
        EXPECT(0xd2, gbc.c());
        EXPECT(0xd1, gbc.d());
        EXPECT(0x27, gbc.e());
        EXPECT(0x9a, gbc.h());
        EXPECT(0xc7, gbc.l());
        EXPECT(0x7165, gbc.sp());
        EXPECT(0x2140, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 024E
        gbc.setState(0x8550, 0xf34c, 0x4860, 0x1503, 0xe6e0, 0x32bb, 0x1, 0x1);
        gbc.writeMem(0x8550, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x48, gbc.a());
        EXPECT(0x15, gbc.b());
        EXPECT(0x3, gbc.c());
        EXPECT(0xe6, gbc.d());
        EXPECT(0xe0, gbc.e());
        EXPECT(0x32, gbc.h());
        EXPECT(0xbb, gbc.l());
        EXPECT(0xf34c, gbc.sp());
        EXPECT(0x8552, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8550));
        EXPECT(0xa8, gbc.readMem(0x8551));
        // CB A8 024F
        gbc.setState(0x9476, 0xd836, 0x7020, 0x459c, 0x3dc1, 0xb7fa, 0x0, 0x1);
        gbc.writeMem(0x9476, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x70, gbc.a());
        EXPECT(0x45, gbc.b());
        EXPECT(0x9c, gbc.c());
        EXPECT(0x3d, gbc.d());
        EXPECT(0xc1, gbc.e());
        EXPECT(0xb7, gbc.h());
        EXPECT(0xfa, gbc.l());
        EXPECT(0xd836, gbc.sp());
        EXPECT(0x9478, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9476));
        EXPECT(0xa8, gbc.readMem(0x9477));
        // CB A8 0250
        gbc.setState(0xd14f, 0x8496, 0x4570, 0x7845, 0xf37, 0xc4cb, 0x0, 0x1);
        gbc.writeMem(0xd14f, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x45, gbc.a());
        EXPECT(0x58, gbc.b());
        EXPECT(0x45, gbc.c());
        EXPECT(0xf, gbc.d());
        EXPECT(0x37, gbc.e());
        EXPECT(0xc4, gbc.h());
        EXPECT(0xcb, gbc.l());
        EXPECT(0x8496, gbc.sp());
        EXPECT(0xd151, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd14f));
        EXPECT(0xa8, gbc.readMem(0xd150));
        // CB A8 0251
        gbc.setState(0x7126, 0xb87f, 0x6320, 0x5660, 0x8cb3, 0xd5d7, 0x1, 0x1);
        gbc.writeMem(0x7126, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x63, gbc.a());
        EXPECT(0x56, gbc.b());
        EXPECT(0x60, gbc.c());
        EXPECT(0x8c, gbc.d());
        EXPECT(0xb3, gbc.e());
        EXPECT(0xd5, gbc.h());
        EXPECT(0xd7, gbc.l());
        EXPECT(0xb87f, gbc.sp());
        EXPECT(0x7128, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 0252
        gbc.setState(0xfeb, 0xf84c, 0xa210, 0x26f6, 0x37c7, 0xcddd, 0x1, 0x1);
        gbc.writeMem(0xfeb, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xa2, gbc.a());
        EXPECT(0x6, gbc.b());
        EXPECT(0xf6, gbc.c());
        EXPECT(0x37, gbc.d());
        EXPECT(0xc7, gbc.e());
        EXPECT(0xcd, gbc.h());
        EXPECT(0xdd, gbc.l());
        EXPECT(0xf84c, gbc.sp());
        EXPECT(0xfed, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 0253
        gbc.setState(0x9a14, 0x43c2, 0x9da0, 0xa37e, 0xbac5, 0xc894, 0x1, 0x1);
        gbc.writeMem(0x9a14, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x9d, gbc.a());
        EXPECT(0x83, gbc.b());
        EXPECT(0x7e, gbc.c());
        EXPECT(0xba, gbc.d());
        EXPECT(0xc5, gbc.e());
        EXPECT(0xc8, gbc.h());
        EXPECT(0x94, gbc.l());
        EXPECT(0x43c2, gbc.sp());
        EXPECT(0x9a16, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9a14));
        EXPECT(0xa8, gbc.readMem(0x9a15));
        // CB A8 0254
        gbc.setState(0xe0a7, 0xf302, 0xbc10, 0xb13c, 0x2cbf, 0x27e0, 0x0, 0x1);
        gbc.writeMem(0xe0a7, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xbc, gbc.a());
        EXPECT(0x91, gbc.b());
        EXPECT(0x3c, gbc.c());
        EXPECT(0x2c, gbc.d());
        EXPECT(0xbf, gbc.e());
        EXPECT(0x27, gbc.h());
        EXPECT(0xe0, gbc.l());
        EXPECT(0xf302, gbc.sp());
        EXPECT(0xe0a9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe0a7));
        EXPECT(0xa8, gbc.readMem(0xe0a8));
        // CB A8 0255
        gbc.setState(0xe0c7, 0x2aa6, 0x4250, 0xd08b, 0x8059, 0x3101, 0x1, 0x0);
        gbc.writeMem(0xe0c7, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x42, gbc.a());
        EXPECT(0xd0, gbc.b());
        EXPECT(0x8b, gbc.c());
        EXPECT(0x80, gbc.d());
        EXPECT(0x59, gbc.e());
        EXPECT(0x31, gbc.h());
        EXPECT(0x1, gbc.l());
        EXPECT(0x2aa6, gbc.sp());
        EXPECT(0xe0c9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe0c7));
        EXPECT(0xa8, gbc.readMem(0xe0c8));
        // CB A8 0256
        gbc.setState(0x8131, 0xe122, 0x25a0, 0x87db, 0x5cb2, 0xef1a, 0x1, 0x0);
        gbc.writeMem(0x8131, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x25, gbc.a());
        EXPECT(0x87, gbc.b());
        EXPECT(0xdb, gbc.c());
        EXPECT(0x5c, gbc.d());
        EXPECT(0xb2, gbc.e());
        EXPECT(0xef, gbc.h());
        EXPECT(0x1a, gbc.l());
        EXPECT(0xe122, gbc.sp());
        EXPECT(0x8133, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8131));
        EXPECT(0xa8, gbc.readMem(0x8132));
        // CB A8 0257
        gbc.setState(0xdd07, 0xcf1f, 0x9340, 0x7e66, 0xaebd, 0x3739, 0x0, 0x1);
        gbc.writeMem(0xdd07, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x93, gbc.a());
        EXPECT(0x5e, gbc.b());
        EXPECT(0x66, gbc.c());
        EXPECT(0xae, gbc.d());
        EXPECT(0xbd, gbc.e());
        EXPECT(0x37, gbc.h());
        EXPECT(0x39, gbc.l());
        EXPECT(0xcf1f, gbc.sp());
        EXPECT(0xdd09, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdd07));
        EXPECT(0xa8, gbc.readMem(0xdd08));
        // CB A8 0258
        gbc.setState(0x42e2, 0xaffb, 0xfb20, 0x8fba, 0x6a48, 0xe98b, 0x1, 0x1);
        gbc.writeMem(0x42e2, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xfb, gbc.a());
        EXPECT(0x8f, gbc.b());
        EXPECT(0xba, gbc.c());
        EXPECT(0x6a, gbc.d());
        EXPECT(0x48, gbc.e());
        EXPECT(0xe9, gbc.h());
        EXPECT(0x8b, gbc.l());
        EXPECT(0xaffb, gbc.sp());
        EXPECT(0x42e4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 0259
        gbc.setState(0x71ab, 0x38f1, 0x1e0, 0x9977, 0x734f, 0x7193, 0x1, 0x0);
        gbc.writeMem(0x71ab, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x1, gbc.a());
        EXPECT(0x99, gbc.b());
        EXPECT(0x77, gbc.c());
        EXPECT(0x73, gbc.d());
        EXPECT(0x4f, gbc.e());
        EXPECT(0x71, gbc.h());
        EXPECT(0x93, gbc.l());
        EXPECT(0x38f1, gbc.sp());
        EXPECT(0x71ad, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 025A
        gbc.setState(0x8a90, 0x57cb, 0x6740, 0x60be, 0x6780, 0xcc1a, 0x1, 0x1);
        gbc.writeMem(0x8a90, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x67, gbc.a());
        EXPECT(0x40, gbc.b());
        EXPECT(0xbe, gbc.c());
        EXPECT(0x67, gbc.d());
        EXPECT(0x80, gbc.e());
        EXPECT(0xcc, gbc.h());
        EXPECT(0x1a, gbc.l());
        EXPECT(0x57cb, gbc.sp());
        EXPECT(0x8a92, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8a90));
        EXPECT(0xa8, gbc.readMem(0x8a91));
        // CB A8 025C
        gbc.setState(0xd8dd, 0x5d3c, 0x5d50, 0x2d11, 0xbd60, 0xddea, 0x0, 0x1);
        gbc.writeMem(0xd8dd, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x5d, gbc.a());
        EXPECT(0xd, gbc.b());
        EXPECT(0x11, gbc.c());
        EXPECT(0xbd, gbc.d());
        EXPECT(0x60, gbc.e());
        EXPECT(0xdd, gbc.h());
        EXPECT(0xea, gbc.l());
        EXPECT(0x5d3c, gbc.sp());
        EXPECT(0xd8df, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd8dd));
        EXPECT(0xa8, gbc.readMem(0xd8de));
        // CB A8 025D
        gbc.setState(0x74b0, 0xe518, 0x7cd0, 0xa615, 0xb5c2, 0xd441, 0x0, 0x0);
        gbc.writeMem(0x74b0, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x7c, gbc.a());
        EXPECT(0x86, gbc.b());
        EXPECT(0x15, gbc.c());
        EXPECT(0xb5, gbc.d());
        EXPECT(0xc2, gbc.e());
        EXPECT(0xd4, gbc.h());
        EXPECT(0x41, gbc.l());
        EXPECT(0xe518, gbc.sp());
        EXPECT(0x74b2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 025E
        gbc.setState(0x8413, 0x5894, 0xbb40, 0x2fc2, 0x9890, 0x17dd, 0x0, 0x1);
        gbc.writeMem(0x8413, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xbb, gbc.a());
        EXPECT(0xf, gbc.b());
        EXPECT(0xc2, gbc.c());
        EXPECT(0x98, gbc.d());
        EXPECT(0x90, gbc.e());
        EXPECT(0x17, gbc.h());
        EXPECT(0xdd, gbc.l());
        EXPECT(0x5894, gbc.sp());
        EXPECT(0x8415, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8413));
        EXPECT(0xa8, gbc.readMem(0x8414));
        // CB A8 025F
        gbc.setState(0xbfe4, 0x6a3e, 0xbef0, 0x58f6, 0x4001, 0x9f87, 0x0, 0x1);
        gbc.writeMem(0xbfe4, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xbe, gbc.a());
        EXPECT(0x58, gbc.b());
        EXPECT(0xf6, gbc.c());
        EXPECT(0x40, gbc.d());
        EXPECT(0x1, gbc.e());
        EXPECT(0x9f, gbc.h());
        EXPECT(0x87, gbc.l());
        EXPECT(0x6a3e, gbc.sp());
        EXPECT(0xbfe6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbfe4));
        EXPECT(0xa8, gbc.readMem(0xbfe5));
        // CB A8 0260
        gbc.setState(0xb321, 0xfcb2, 0xbb00, 0x1693, 0x77d0, 0x6567, 0x0, 0x1);
        gbc.writeMem(0xb321, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xbb, gbc.a());
        EXPECT(0x16, gbc.b());
        EXPECT(0x93, gbc.c());
        EXPECT(0x77, gbc.d());
        EXPECT(0xd0, gbc.e());
        EXPECT(0x65, gbc.h());
        EXPECT(0x67, gbc.l());
        EXPECT(0xfcb2, gbc.sp());
        EXPECT(0xb323, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb321));
        EXPECT(0xa8, gbc.readMem(0xb322));
        // CB A8 0261
        gbc.setState(0xaaa4, 0x51f3, 0xd8e0, 0xa241, 0xa0e5, 0x1c05, 0x0, 0x1);
        gbc.writeMem(0xaaa4, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xd8, gbc.a());
        EXPECT(0x82, gbc.b());
        EXPECT(0x41, gbc.c());
        EXPECT(0xa0, gbc.d());
        EXPECT(0xe5, gbc.e());
        EXPECT(0x1c, gbc.h());
        EXPECT(0x5, gbc.l());
        EXPECT(0x51f3, gbc.sp());
        EXPECT(0xaaa6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaaa4));
        EXPECT(0xa8, gbc.readMem(0xaaa5));
        // CB A8 0262
        gbc.setState(0x856, 0x5925, 0x4620, 0xc429, 0xef48, 0x469c, 0x1, 0x0);
        gbc.writeMem(0x856, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x46, gbc.a());
        EXPECT(0xc4, gbc.b());
        EXPECT(0x29, gbc.c());
        EXPECT(0xef, gbc.d());
        EXPECT(0x48, gbc.e());
        EXPECT(0x46, gbc.h());
        EXPECT(0x9c, gbc.l());
        EXPECT(0x5925, gbc.sp());
        EXPECT(0x858, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 0263
        gbc.setState(0x9d9, 0x8de6, 0xbc20, 0x657d, 0xdc9, 0xead4, 0x0, 0x0);
        gbc.writeMem(0x9d9, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xbc, gbc.a());
        EXPECT(0x45, gbc.b());
        EXPECT(0x7d, gbc.c());
        EXPECT(0xd, gbc.d());
        EXPECT(0xc9, gbc.e());
        EXPECT(0xea, gbc.h());
        EXPECT(0xd4, gbc.l());
        EXPECT(0x8de6, gbc.sp());
        EXPECT(0x9db, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 0264
        gbc.setState(0x5589, 0x87bc, 0x86a0, 0xe00c, 0xfc67, 0x305d, 0x0, 0x1);
        gbc.writeMem(0x5589, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x86, gbc.a());
        EXPECT(0xc0, gbc.b());
        EXPECT(0xc, gbc.c());
        EXPECT(0xfc, gbc.d());
        EXPECT(0x67, gbc.e());
        EXPECT(0x30, gbc.h());
        EXPECT(0x5d, gbc.l());
        EXPECT(0x87bc, gbc.sp());
        EXPECT(0x558b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 0265
        gbc.setState(0xcbfe, 0x9a0c, 0x55e0, 0xccbf, 0x46b0, 0x598, 0x0, 0x0);
        gbc.writeMem(0xcbfe, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x55, gbc.a());
        EXPECT(0xcc, gbc.b());
        EXPECT(0xbf, gbc.c());
        EXPECT(0x46, gbc.d());
        EXPECT(0xb0, gbc.e());
        EXPECT(0x5, gbc.h());
        EXPECT(0x98, gbc.l());
        EXPECT(0x9a0c, gbc.sp());
        EXPECT(0xcc00, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcbfe));
        EXPECT(0xa8, gbc.readMem(0xcbff));
        // CB A8 0266
        gbc.setState(0x5da, 0xa666, 0x66b0, 0xefe7, 0xb722, 0xd98e, 0x1, 0x1);
        gbc.writeMem(0x5da, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x66, gbc.a());
        EXPECT(0xcf, gbc.b());
        EXPECT(0xe7, gbc.c());
        EXPECT(0xb7, gbc.d());
        EXPECT(0x22, gbc.e());
        EXPECT(0xd9, gbc.h());
        EXPECT(0x8e, gbc.l());
        EXPECT(0xa666, gbc.sp());
        EXPECT(0x5dc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 0267
        gbc.setState(0x938, 0x382, 0x6690, 0x1fd2, 0x508, 0x1fb3, 0x1, 0x0);
        gbc.writeMem(0x938, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x66, gbc.a());
        EXPECT(0x1f, gbc.b());
        EXPECT(0xd2, gbc.c());
        EXPECT(0x5, gbc.d());
        EXPECT(0x8, gbc.e());
        EXPECT(0x1f, gbc.h());
        EXPECT(0xb3, gbc.l());
        EXPECT(0x382, gbc.sp());
        EXPECT(0x93a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 0268
        gbc.setState(0xa7fc, 0x2e9b, 0xb250, 0x6f, 0xa748, 0x6757, 0x0, 0x1);
        gbc.writeMem(0xa7fc, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xb2, gbc.a());
        EXPECT(0x0, gbc.b());
        EXPECT(0x6f, gbc.c());
        EXPECT(0xa7, gbc.d());
        EXPECT(0x48, gbc.e());
        EXPECT(0x67, gbc.h());
        EXPECT(0x57, gbc.l());
        EXPECT(0x2e9b, gbc.sp());
        EXPECT(0xa7fe, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa7fc));
        EXPECT(0xa8, gbc.readMem(0xa7fd));
        // CB A8 0269
        gbc.setState(0x2ab1, 0xb0d5, 0x2dc0, 0x339a, 0x1e7f, 0x90a8, 0x1, 0x0);
        gbc.writeMem(0x2ab1, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x2d, gbc.a());
        EXPECT(0x13, gbc.b());
        EXPECT(0x9a, gbc.c());
        EXPECT(0x1e, gbc.d());
        EXPECT(0x7f, gbc.e());
        EXPECT(0x90, gbc.h());
        EXPECT(0xa8, gbc.l());
        EXPECT(0xb0d5, gbc.sp());
        EXPECT(0x2ab3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 026A
        gbc.setState(0x5258, 0xcfc4, 0x7540, 0x4ac6, 0xa514, 0xcd02, 0x0, 0x0);
        gbc.writeMem(0x5258, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x75, gbc.a());
        EXPECT(0x4a, gbc.b());
        EXPECT(0xc6, gbc.c());
        EXPECT(0xa5, gbc.d());
        EXPECT(0x14, gbc.e());
        EXPECT(0xcd, gbc.h());
        EXPECT(0x2, gbc.l());
        EXPECT(0xcfc4, gbc.sp());
        EXPECT(0x525a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 026B
        gbc.setState(0xb2bd, 0x62df, 0xb680, 0xd13, 0x9a57, 0x947d, 0x1, 0x1);
        gbc.writeMem(0xb2bd, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xb6, gbc.a());
        EXPECT(0xd, gbc.b());
        EXPECT(0x13, gbc.c());
        EXPECT(0x9a, gbc.d());
        EXPECT(0x57, gbc.e());
        EXPECT(0x94, gbc.h());
        EXPECT(0x7d, gbc.l());
        EXPECT(0x62df, gbc.sp());
        EXPECT(0xb2bf, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb2bd));
        EXPECT(0xa8, gbc.readMem(0xb2be));
        // CB A8 026D
        gbc.setState(0x7eb5, 0xb3ef, 0x5960, 0x7f7c, 0x4064, 0x4021, 0x0, 0x0);
        gbc.writeMem(0x7eb5, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x59, gbc.a());
        EXPECT(0x5f, gbc.b());
        EXPECT(0x7c, gbc.c());
        EXPECT(0x40, gbc.d());
        EXPECT(0x64, gbc.e());
        EXPECT(0x40, gbc.h());
        EXPECT(0x21, gbc.l());
        EXPECT(0xb3ef, gbc.sp());
        EXPECT(0x7eb7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 026E
        gbc.setState(0x1abe, 0xfb47, 0x4ff0, 0x10ec, 0x48c3, 0x2db6, 0x0, 0x0);
        gbc.writeMem(0x1abe, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x4f, gbc.a());
        EXPECT(0x10, gbc.b());
        EXPECT(0xec, gbc.c());
        EXPECT(0x48, gbc.d());
        EXPECT(0xc3, gbc.e());
        EXPECT(0x2d, gbc.h());
        EXPECT(0xb6, gbc.l());
        EXPECT(0xfb47, gbc.sp());
        EXPECT(0x1ac0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 026F
        gbc.setState(0x3d51, 0xffa2, 0xf110, 0xd925, 0x7b6b, 0x7aa3, 0x0, 0x0);
        gbc.writeMem(0x3d51, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xf1, gbc.a());
        EXPECT(0xd9, gbc.b());
        EXPECT(0x25, gbc.c());
        EXPECT(0x7b, gbc.d());
        EXPECT(0x6b, gbc.e());
        EXPECT(0x7a, gbc.h());
        EXPECT(0xa3, gbc.l());
        EXPECT(0xffa2, gbc.sp());
        EXPECT(0x3d53, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 0270
        gbc.setState(0x9d06, 0xbfb3, 0xcc70, 0x8ec0, 0x1076, 0x9a97, 0x1, 0x1);
        gbc.writeMem(0x9d06, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xcc, gbc.a());
        EXPECT(0x8e, gbc.b());
        EXPECT(0xc0, gbc.c());
        EXPECT(0x10, gbc.d());
        EXPECT(0x76, gbc.e());
        EXPECT(0x9a, gbc.h());
        EXPECT(0x97, gbc.l());
        EXPECT(0xbfb3, gbc.sp());
        EXPECT(0x9d08, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9d06));
        EXPECT(0xa8, gbc.readMem(0x9d07));
        // CB A8 0271
        gbc.setState(0x42b4, 0x182, 0x4c50, 0xa98c, 0x9558, 0xb176, 0x0, 0x1);
        gbc.writeMem(0x42b4, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x4c, gbc.a());
        EXPECT(0x89, gbc.b());
        EXPECT(0x8c, gbc.c());
        EXPECT(0x95, gbc.d());
        EXPECT(0x58, gbc.e());
        EXPECT(0xb1, gbc.h());
        EXPECT(0x76, gbc.l());
        EXPECT(0x182, gbc.sp());
        EXPECT(0x42b6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 0272
        gbc.setState(0x3c71, 0x321b, 0x18f0, 0x26e, 0x3ab0, 0x218d, 0x0, 0x0);
        gbc.writeMem(0x3c71, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x18, gbc.a());
        EXPECT(0x2, gbc.b());
        EXPECT(0x6e, gbc.c());
        EXPECT(0x3a, gbc.d());
        EXPECT(0xb0, gbc.e());
        EXPECT(0x21, gbc.h());
        EXPECT(0x8d, gbc.l());
        EXPECT(0x321b, gbc.sp());
        EXPECT(0x3c73, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 0273
        gbc.setState(0x44fb, 0xefdd, 0x4010, 0x89ef, 0xce80, 0xcf03, 0x1, 0x1);
        gbc.writeMem(0x44fb, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x40, gbc.a());
        EXPECT(0x89, gbc.b());
        EXPECT(0xef, gbc.c());
        EXPECT(0xce, gbc.d());
        EXPECT(0x80, gbc.e());
        EXPECT(0xcf, gbc.h());
        EXPECT(0x3, gbc.l());
        EXPECT(0xefdd, gbc.sp());
        EXPECT(0x44fd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 0274
        gbc.setState(0x7e8a, 0x3fd6, 0xccf0, 0xcd35, 0xac65, 0x6865, 0x0, 0x1);
        gbc.writeMem(0x7e8a, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xcc, gbc.a());
        EXPECT(0xcd, gbc.b());
        EXPECT(0x35, gbc.c());
        EXPECT(0xac, gbc.d());
        EXPECT(0x65, gbc.e());
        EXPECT(0x68, gbc.h());
        EXPECT(0x65, gbc.l());
        EXPECT(0x3fd6, gbc.sp());
        EXPECT(0x7e8c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 0276
        gbc.setState(0x4722, 0xb38f, 0xe8c0, 0xc57a, 0xde85, 0x2ee1, 0x1, 0x0);
        gbc.writeMem(0x4722, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xe8, gbc.a());
        EXPECT(0xc5, gbc.b());
        EXPECT(0x7a, gbc.c());
        EXPECT(0xde, gbc.d());
        EXPECT(0x85, gbc.e());
        EXPECT(0x2e, gbc.h());
        EXPECT(0xe1, gbc.l());
        EXPECT(0xb38f, gbc.sp());
        EXPECT(0x4724, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 0277
        gbc.setState(0x6738, 0x1be, 0xae00, 0xa7a0, 0xbe3e, 0xe02c, 0x1, 0x0);
        gbc.writeMem(0x6738, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xae, gbc.a());
        EXPECT(0x87, gbc.b());
        EXPECT(0xa0, gbc.c());
        EXPECT(0xbe, gbc.d());
        EXPECT(0x3e, gbc.e());
        EXPECT(0xe0, gbc.h());
        EXPECT(0x2c, gbc.l());
        EXPECT(0x1be, gbc.sp());
        EXPECT(0x673a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 0278
        gbc.setState(0x3425, 0xb563, 0xe50, 0x704f, 0xf968, 0xf76, 0x1, 0x0);
        gbc.writeMem(0x3425, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xe, gbc.a());
        EXPECT(0x50, gbc.b());
        EXPECT(0x4f, gbc.c());
        EXPECT(0xf9, gbc.d());
        EXPECT(0x68, gbc.e());
        EXPECT(0xf, gbc.h());
        EXPECT(0x76, gbc.l());
        EXPECT(0xb563, gbc.sp());
        EXPECT(0x3427, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 0279
        gbc.setState(0x28c8, 0xfcad, 0x6480, 0x464c, 0x69d, 0x30b2, 0x0, 0x1);
        gbc.writeMem(0x28c8, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x64, gbc.a());
        EXPECT(0x46, gbc.b());
        EXPECT(0x4c, gbc.c());
        EXPECT(0x6, gbc.d());
        EXPECT(0x9d, gbc.e());
        EXPECT(0x30, gbc.h());
        EXPECT(0xb2, gbc.l());
        EXPECT(0xfcad, gbc.sp());
        EXPECT(0x28ca, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 027A
        gbc.setState(0xbdf6, 0x3035, 0x8350, 0x6737, 0x4777, 0xc79, 0x0, 0x1);
        gbc.writeMem(0xbdf6, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x83, gbc.a());
        EXPECT(0x47, gbc.b());
        EXPECT(0x37, gbc.c());
        EXPECT(0x47, gbc.d());
        EXPECT(0x77, gbc.e());
        EXPECT(0xc, gbc.h());
        EXPECT(0x79, gbc.l());
        EXPECT(0x3035, gbc.sp());
        EXPECT(0xbdf8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbdf6));
        EXPECT(0xa8, gbc.readMem(0xbdf7));
        // CB A8 027B
        gbc.setState(0xefcd, 0x68e8, 0x7c40, 0x48f9, 0x8009, 0xc3f9, 0x0, 0x1);
        gbc.writeMem(0xefcd, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x7c, gbc.a());
        EXPECT(0x48, gbc.b());
        EXPECT(0xf9, gbc.c());
        EXPECT(0x80, gbc.d());
        EXPECT(0x9, gbc.e());
        EXPECT(0xc3, gbc.h());
        EXPECT(0xf9, gbc.l());
        EXPECT(0x68e8, gbc.sp());
        EXPECT(0xefcf, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xefcd));
        EXPECT(0xa8, gbc.readMem(0xefce));
        // CB A8 027C
        gbc.setState(0xe556, 0x940d, 0xbcd0, 0x772f, 0x8421, 0xf11b, 0x1, 0x1);
        gbc.writeMem(0xe556, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xbc, gbc.a());
        EXPECT(0x57, gbc.b());
        EXPECT(0x2f, gbc.c());
        EXPECT(0x84, gbc.d());
        EXPECT(0x21, gbc.e());
        EXPECT(0xf1, gbc.h());
        EXPECT(0x1b, gbc.l());
        EXPECT(0x940d, gbc.sp());
        EXPECT(0xe558, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe556));
        EXPECT(0xa8, gbc.readMem(0xe557));
        // CB A8 027D
        gbc.setState(0xa33d, 0x1716, 0x64f0, 0xae9f, 0x999, 0x6af9, 0x1, 0x0);
        gbc.writeMem(0xa33d, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x64, gbc.a());
        EXPECT(0x8e, gbc.b());
        EXPECT(0x9f, gbc.c());
        EXPECT(0x9, gbc.d());
        EXPECT(0x99, gbc.e());
        EXPECT(0x6a, gbc.h());
        EXPECT(0xf9, gbc.l());
        EXPECT(0x1716, gbc.sp());
        EXPECT(0xa33f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa33d));
        EXPECT(0xa8, gbc.readMem(0xa33e));
        // CB A8 027E
        gbc.setState(0x13d, 0xce50, 0xc3d0, 0xd3a1, 0x9d61, 0xf10, 0x0, 0x1);
        gbc.writeMem(0x13d, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xc3, gbc.a());
        EXPECT(0xd3, gbc.b());
        EXPECT(0xa1, gbc.c());
        EXPECT(0x9d, gbc.d());
        EXPECT(0x61, gbc.e());
        EXPECT(0xf, gbc.h());
        EXPECT(0x10, gbc.l());
        EXPECT(0xce50, gbc.sp());
        EXPECT(0x13f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 027F
        gbc.setState(0x6391, 0xcd0f, 0xf540, 0x266b, 0xabef, 0xb37a, 0x0, 0x0);
        gbc.writeMem(0x6391, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xf5, gbc.a());
        EXPECT(0x6, gbc.b());
        EXPECT(0x6b, gbc.c());
        EXPECT(0xab, gbc.d());
        EXPECT(0xef, gbc.e());
        EXPECT(0xb3, gbc.h());
        EXPECT(0x7a, gbc.l());
        EXPECT(0xcd0f, gbc.sp());
        EXPECT(0x6393, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 0280
        gbc.setState(0xc2ad, 0x4e5e, 0x89a0, 0x2ce9, 0xfecc, 0x1e2a, 0x0, 0x0);
        gbc.writeMem(0xc2ad, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x89, gbc.a());
        EXPECT(0xc, gbc.b());
        EXPECT(0xe9, gbc.c());
        EXPECT(0xfe, gbc.d());
        EXPECT(0xcc, gbc.e());
        EXPECT(0x1e, gbc.h());
        EXPECT(0x2a, gbc.l());
        EXPECT(0x4e5e, gbc.sp());
        EXPECT(0xc2af, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc2ad));
        EXPECT(0xa8, gbc.readMem(0xc2ae));
        // CB A8 0281
        gbc.setState(0xc5fc, 0x923c, 0x9940, 0xc226, 0x5a0a, 0x3f72, 0x0, 0x0);
        gbc.writeMem(0xc5fc, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x99, gbc.a());
        EXPECT(0xc2, gbc.b());
        EXPECT(0x26, gbc.c());
        EXPECT(0x5a, gbc.d());
        EXPECT(0xa, gbc.e());
        EXPECT(0x3f, gbc.h());
        EXPECT(0x72, gbc.l());
        EXPECT(0x923c, gbc.sp());
        EXPECT(0xc5fe, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc5fc));
        EXPECT(0xa8, gbc.readMem(0xc5fd));
        // CB A8 0282
        gbc.setState(0x50f7, 0x4b5b, 0x3140, 0x4b7, 0x27ba, 0x8b75, 0x0, 0x0);
        gbc.writeMem(0x50f7, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x31, gbc.a());
        EXPECT(0x4, gbc.b());
        EXPECT(0xb7, gbc.c());
        EXPECT(0x27, gbc.d());
        EXPECT(0xba, gbc.e());
        EXPECT(0x8b, gbc.h());
        EXPECT(0x75, gbc.l());
        EXPECT(0x4b5b, gbc.sp());
        EXPECT(0x50f9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 0283
        gbc.setState(0xd58c, 0xfb5f, 0x9740, 0x6e7a, 0x83c3, 0x26f2, 0x0, 0x0);
        gbc.writeMem(0xd58c, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x97, gbc.a());
        EXPECT(0x4e, gbc.b());
        EXPECT(0x7a, gbc.c());
        EXPECT(0x83, gbc.d());
        EXPECT(0xc3, gbc.e());
        EXPECT(0x26, gbc.h());
        EXPECT(0xf2, gbc.l());
        EXPECT(0xfb5f, gbc.sp());
        EXPECT(0xd58e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd58c));
        EXPECT(0xa8, gbc.readMem(0xd58d));
        // CB A8 0284
        gbc.setState(0x56e0, 0xbac, 0x62c0, 0xb9b2, 0x2f6a, 0x85db, 0x0, 0x0);
        gbc.writeMem(0x56e0, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x62, gbc.a());
        EXPECT(0x99, gbc.b());
        EXPECT(0xb2, gbc.c());
        EXPECT(0x2f, gbc.d());
        EXPECT(0x6a, gbc.e());
        EXPECT(0x85, gbc.h());
        EXPECT(0xdb, gbc.l());
        EXPECT(0xbac, gbc.sp());
        EXPECT(0x56e2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 0285
        gbc.setState(0xebe, 0x6e5f, 0x7490, 0xaddb, 0xef52, 0xbaf7, 0x0, 0x1);
        gbc.writeMem(0xebe, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x74, gbc.a());
        EXPECT(0x8d, gbc.b());
        EXPECT(0xdb, gbc.c());
        EXPECT(0xef, gbc.d());
        EXPECT(0x52, gbc.e());
        EXPECT(0xba, gbc.h());
        EXPECT(0xf7, gbc.l());
        EXPECT(0x6e5f, gbc.sp());
        EXPECT(0xec0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 0286
        gbc.setState(0x44c1, 0x94da, 0xc170, 0x3eb9, 0x4b2a, 0x26e7, 0x1, 0x1);
        gbc.writeMem(0x44c1, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xc1, gbc.a());
        EXPECT(0x1e, gbc.b());
        EXPECT(0xb9, gbc.c());
        EXPECT(0x4b, gbc.d());
        EXPECT(0x2a, gbc.e());
        EXPECT(0x26, gbc.h());
        EXPECT(0xe7, gbc.l());
        EXPECT(0x94da, gbc.sp());
        EXPECT(0x44c3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 0287
        gbc.setState(0x92dc, 0xf46d, 0xc740, 0xbd3, 0xac66, 0x44dd, 0x0, 0x1);
        gbc.writeMem(0x92dc, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xc7, gbc.a());
        EXPECT(0xb, gbc.b());
        EXPECT(0xd3, gbc.c());
        EXPECT(0xac, gbc.d());
        EXPECT(0x66, gbc.e());
        EXPECT(0x44, gbc.h());
        EXPECT(0xdd, gbc.l());
        EXPECT(0xf46d, gbc.sp());
        EXPECT(0x92de, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x92dc));
        EXPECT(0xa8, gbc.readMem(0x92dd));
        // CB A8 0289
        gbc.setState(0x9d25, 0x96c6, 0x8210, 0x3968, 0xd7e9, 0xa296, 0x1, 0x0);
        gbc.writeMem(0x9d25, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x82, gbc.a());
        EXPECT(0x19, gbc.b());
        EXPECT(0x68, gbc.c());
        EXPECT(0xd7, gbc.d());
        EXPECT(0xe9, gbc.e());
        EXPECT(0xa2, gbc.h());
        EXPECT(0x96, gbc.l());
        EXPECT(0x96c6, gbc.sp());
        EXPECT(0x9d27, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9d25));
        EXPECT(0xa8, gbc.readMem(0x9d26));
        // CB A8 028A
        gbc.setState(0xd1f7, 0xeed2, 0xa580, 0x8f37, 0x2f3, 0x607a, 0x0, 0x1);
        gbc.writeMem(0xd1f7, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xa5, gbc.a());
        EXPECT(0x8f, gbc.b());
        EXPECT(0x37, gbc.c());
        EXPECT(0x2, gbc.d());
        EXPECT(0xf3, gbc.e());
        EXPECT(0x60, gbc.h());
        EXPECT(0x7a, gbc.l());
        EXPECT(0xeed2, gbc.sp());
        EXPECT(0xd1f9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd1f7));
        EXPECT(0xa8, gbc.readMem(0xd1f8));
        // CB A8 028B
        gbc.setState(0x7b50, 0x1a2d, 0xf190, 0xe0b6, 0x8775, 0x2f7d, 0x1, 0x1);
        gbc.writeMem(0x7b50, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xf1, gbc.a());
        EXPECT(0xc0, gbc.b());
        EXPECT(0xb6, gbc.c());
        EXPECT(0x87, gbc.d());
        EXPECT(0x75, gbc.e());
        EXPECT(0x2f, gbc.h());
        EXPECT(0x7d, gbc.l());
        EXPECT(0x1a2d, gbc.sp());
        EXPECT(0x7b52, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 028C
        gbc.setState(0x6de8, 0xc37, 0x4690, 0xa16d, 0x37b4, 0xf273, 0x1, 0x0);
        gbc.writeMem(0x6de8, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x46, gbc.a());
        EXPECT(0x81, gbc.b());
        EXPECT(0x6d, gbc.c());
        EXPECT(0x37, gbc.d());
        EXPECT(0xb4, gbc.e());
        EXPECT(0xf2, gbc.h());
        EXPECT(0x73, gbc.l());
        EXPECT(0xc37, gbc.sp());
        EXPECT(0x6dea, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 028D
        gbc.setState(0x899c, 0x36f1, 0xf9b0, 0x9020, 0x7488, 0xe137, 0x0, 0x1);
        gbc.writeMem(0x899c, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xf9, gbc.a());
        EXPECT(0x90, gbc.b());
        EXPECT(0x20, gbc.c());
        EXPECT(0x74, gbc.d());
        EXPECT(0x88, gbc.e());
        EXPECT(0xe1, gbc.h());
        EXPECT(0x37, gbc.l());
        EXPECT(0x36f1, gbc.sp());
        EXPECT(0x899e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x899c));
        EXPECT(0xa8, gbc.readMem(0x899d));
        // CB A8 028E
        gbc.setState(0xb61a, 0x9ab5, 0xff20, 0xf2b4, 0x9272, 0xd426, 0x1, 0x0);
        gbc.writeMem(0xb61a, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xff, gbc.a());
        EXPECT(0xd2, gbc.b());
        EXPECT(0xb4, gbc.c());
        EXPECT(0x92, gbc.d());
        EXPECT(0x72, gbc.e());
        EXPECT(0xd4, gbc.h());
        EXPECT(0x26, gbc.l());
        EXPECT(0x9ab5, gbc.sp());
        EXPECT(0xb61c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb61a));
        EXPECT(0xa8, gbc.readMem(0xb61b));
        // CB A8 028F
        gbc.setState(0x721, 0xf9e2, 0x1c90, 0x758c, 0x8ab9, 0xdd20, 0x0, 0x1);
        gbc.writeMem(0x721, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x1c, gbc.a());
        EXPECT(0x55, gbc.b());
        EXPECT(0x8c, gbc.c());
        EXPECT(0x8a, gbc.d());
        EXPECT(0xb9, gbc.e());
        EXPECT(0xdd, gbc.h());
        EXPECT(0x20, gbc.l());
        EXPECT(0xf9e2, gbc.sp());
        EXPECT(0x723, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 0290
        gbc.setState(0x1135, 0x2ff4, 0x36c0, 0x9a5, 0xf63, 0x3e24, 0x1, 0x0);
        gbc.writeMem(0x1135, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x36, gbc.a());
        EXPECT(0x9, gbc.b());
        EXPECT(0xa5, gbc.c());
        EXPECT(0xf, gbc.d());
        EXPECT(0x63, gbc.e());
        EXPECT(0x3e, gbc.h());
        EXPECT(0x24, gbc.l());
        EXPECT(0x2ff4, gbc.sp());
        EXPECT(0x1137, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 0291
        gbc.setState(0x9786, 0x69e7, 0x5db0, 0x9b51, 0xf0aa, 0xf60e, 0x0, 0x0);
        gbc.writeMem(0x9786, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x5d, gbc.a());
        EXPECT(0x9b, gbc.b());
        EXPECT(0x51, gbc.c());
        EXPECT(0xf0, gbc.d());
        EXPECT(0xaa, gbc.e());
        EXPECT(0xf6, gbc.h());
        EXPECT(0xe, gbc.l());
        EXPECT(0x69e7, gbc.sp());
        EXPECT(0x9788, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9786));
        EXPECT(0xa8, gbc.readMem(0x9787));
        // CB A8 0292
        gbc.setState(0xcf13, 0x58eb, 0xf740, 0xa9a3, 0xa641, 0xdf9c, 0x0, 0x0);
        gbc.writeMem(0xcf13, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xf7, gbc.a());
        EXPECT(0x89, gbc.b());
        EXPECT(0xa3, gbc.c());
        EXPECT(0xa6, gbc.d());
        EXPECT(0x41, gbc.e());
        EXPECT(0xdf, gbc.h());
        EXPECT(0x9c, gbc.l());
        EXPECT(0x58eb, gbc.sp());
        EXPECT(0xcf15, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcf13));
        EXPECT(0xa8, gbc.readMem(0xcf14));
        // CB A8 0293
        gbc.setState(0xb80b, 0xe686, 0x2cd0, 0x7b6e, 0xf607, 0xb37e, 0x1, 0x1);
        gbc.writeMem(0xb80b, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x2c, gbc.a());
        EXPECT(0x5b, gbc.b());
        EXPECT(0x6e, gbc.c());
        EXPECT(0xf6, gbc.d());
        EXPECT(0x7, gbc.e());
        EXPECT(0xb3, gbc.h());
        EXPECT(0x7e, gbc.l());
        EXPECT(0xe686, gbc.sp());
        EXPECT(0xb80d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb80b));
        EXPECT(0xa8, gbc.readMem(0xb80c));
        // CB A8 0295
        gbc.setState(0xe209, 0xa954, 0x54d0, 0xd223, 0x4af9, 0xb1dd, 0x0, 0x0);
        gbc.writeMem(0xe209, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x54, gbc.a());
        EXPECT(0xd2, gbc.b());
        EXPECT(0x23, gbc.c());
        EXPECT(0x4a, gbc.d());
        EXPECT(0xf9, gbc.e());
        EXPECT(0xb1, gbc.h());
        EXPECT(0xdd, gbc.l());
        EXPECT(0xa954, gbc.sp());
        EXPECT(0xe20b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe209));
        EXPECT(0xa8, gbc.readMem(0xe20a));
        // CB A8 0296
        gbc.setState(0x1e7, 0xb714, 0x8ba0, 0xe4ec, 0x2820, 0x178, 0x0, 0x0);
        gbc.writeMem(0x1e7, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x8b, gbc.a());
        EXPECT(0xc4, gbc.b());
        EXPECT(0xec, gbc.c());
        EXPECT(0x28, gbc.d());
        EXPECT(0x20, gbc.e());
        EXPECT(0x1, gbc.h());
        EXPECT(0x78, gbc.l());
        EXPECT(0xb714, gbc.sp());
        EXPECT(0x1e9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 0297
        gbc.setState(0xa34a, 0x3db3, 0x5630, 0xc851, 0xd15d, 0x191b, 0x1, 0x1);
        gbc.writeMem(0xa34a, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x56, gbc.a());
        EXPECT(0xc8, gbc.b());
        EXPECT(0x51, gbc.c());
        EXPECT(0xd1, gbc.d());
        EXPECT(0x5d, gbc.e());
        EXPECT(0x19, gbc.h());
        EXPECT(0x1b, gbc.l());
        EXPECT(0x3db3, gbc.sp());
        EXPECT(0xa34c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa34a));
        EXPECT(0xa8, gbc.readMem(0xa34b));
        // CB A8 0298
        gbc.setState(0xeb31, 0x620d, 0x2b40, 0xe964, 0x5183, 0x4e51, 0x1, 0x0);
        gbc.writeMem(0xeb31, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x2b, gbc.a());
        EXPECT(0xc9, gbc.b());
        EXPECT(0x64, gbc.c());
        EXPECT(0x51, gbc.d());
        EXPECT(0x83, gbc.e());
        EXPECT(0x4e, gbc.h());
        EXPECT(0x51, gbc.l());
        EXPECT(0x620d, gbc.sp());
        EXPECT(0xeb33, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xeb31));
        EXPECT(0xa8, gbc.readMem(0xeb32));
        // CB A8 0299
        gbc.setState(0x9e1c, 0x8d56, 0xc1a0, 0x2aee, 0x9def, 0xd280, 0x1, 0x1);
        gbc.writeMem(0x9e1c, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xc1, gbc.a());
        EXPECT(0xa, gbc.b());
        EXPECT(0xee, gbc.c());
        EXPECT(0x9d, gbc.d());
        EXPECT(0xef, gbc.e());
        EXPECT(0xd2, gbc.h());
        EXPECT(0x80, gbc.l());
        EXPECT(0x8d56, gbc.sp());
        EXPECT(0x9e1e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9e1c));
        EXPECT(0xa8, gbc.readMem(0x9e1d));
        // CB A8 029A
        gbc.setState(0xedbe, 0x66d1, 0xed20, 0x3f6a, 0x9570, 0x7fdd, 0x1, 0x0);
        gbc.writeMem(0xedbe, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xed, gbc.a());
        EXPECT(0x1f, gbc.b());
        EXPECT(0x6a, gbc.c());
        EXPECT(0x95, gbc.d());
        EXPECT(0x70, gbc.e());
        EXPECT(0x7f, gbc.h());
        EXPECT(0xdd, gbc.l());
        EXPECT(0x66d1, gbc.sp());
        EXPECT(0xedc0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xedbe));
        EXPECT(0xa8, gbc.readMem(0xedbf));
        // CB A8 029B
        gbc.setState(0x9a9f, 0xb38a, 0x9470, 0x751b, 0x9c9a, 0xe4fd, 0x1, 0x1);
        gbc.writeMem(0x9a9f, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x94, gbc.a());
        EXPECT(0x55, gbc.b());
        EXPECT(0x1b, gbc.c());
        EXPECT(0x9c, gbc.d());
        EXPECT(0x9a, gbc.e());
        EXPECT(0xe4, gbc.h());
        EXPECT(0xfd, gbc.l());
        EXPECT(0xb38a, gbc.sp());
        EXPECT(0x9aa1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9a9f));
        EXPECT(0xa8, gbc.readMem(0x9aa0));
        // CB A8 029C
        gbc.setState(0x8f2f, 0x45de, 0x6410, 0x9466, 0xfd5, 0xce92, 0x1, 0x1);
        gbc.writeMem(0x8f2f, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x64, gbc.a());
        EXPECT(0x94, gbc.b());
        EXPECT(0x66, gbc.c());
        EXPECT(0xf, gbc.d());
        EXPECT(0xd5, gbc.e());
        EXPECT(0xce, gbc.h());
        EXPECT(0x92, gbc.l());
        EXPECT(0x45de, gbc.sp());
        EXPECT(0x8f31, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8f2f));
        EXPECT(0xa8, gbc.readMem(0x8f30));
        // CB A8 029D
        gbc.setState(0x6338, 0xf4cf, 0x7b0, 0xfadd, 0xa119, 0xc7d9, 0x0, 0x1);
        gbc.writeMem(0x6338, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x7, gbc.a());
        EXPECT(0xda, gbc.b());
        EXPECT(0xdd, gbc.c());
        EXPECT(0xa1, gbc.d());
        EXPECT(0x19, gbc.e());
        EXPECT(0xc7, gbc.h());
        EXPECT(0xd9, gbc.l());
        EXPECT(0xf4cf, gbc.sp());
        EXPECT(0x633a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 029E
        gbc.setState(0x6baf, 0x2aa3, 0xcc30, 0xdbf1, 0x8dc7, 0x63ac, 0x1, 0x0);
        gbc.writeMem(0x6baf, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xcc, gbc.a());
        EXPECT(0xdb, gbc.b());
        EXPECT(0xf1, gbc.c());
        EXPECT(0x8d, gbc.d());
        EXPECT(0xc7, gbc.e());
        EXPECT(0x63, gbc.h());
        EXPECT(0xac, gbc.l());
        EXPECT(0x2aa3, gbc.sp());
        EXPECT(0x6bb1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 029F
        gbc.setState(0x6fe9, 0x9905, 0xdfd0, 0x7ef5, 0xe941, 0xadfd, 0x0, 0x1);
        gbc.writeMem(0x6fe9, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xdf, gbc.a());
        EXPECT(0x5e, gbc.b());
        EXPECT(0xf5, gbc.c());
        EXPECT(0xe9, gbc.d());
        EXPECT(0x41, gbc.e());
        EXPECT(0xad, gbc.h());
        EXPECT(0xfd, gbc.l());
        EXPECT(0x9905, gbc.sp());
        EXPECT(0x6feb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 02A0
        gbc.setState(0xc6a0, 0xec68, 0x40a0, 0xbe2f, 0x2fad, 0xb8e0, 0x1, 0x0);
        gbc.writeMem(0xc6a0, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x40, gbc.a());
        EXPECT(0x9e, gbc.b());
        EXPECT(0x2f, gbc.c());
        EXPECT(0x2f, gbc.d());
        EXPECT(0xad, gbc.e());
        EXPECT(0xb8, gbc.h());
        EXPECT(0xe0, gbc.l());
        EXPECT(0xec68, gbc.sp());
        EXPECT(0xc6a2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc6a0));
        EXPECT(0xa8, gbc.readMem(0xc6a1));
        // CB A8 02A1
        gbc.setState(0x332a, 0xfd4f, 0x3580, 0x4683, 0x4f24, 0xc6b, 0x1, 0x1);
        gbc.writeMem(0x332a, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x35, gbc.a());
        EXPECT(0x46, gbc.b());
        EXPECT(0x83, gbc.c());
        EXPECT(0x4f, gbc.d());
        EXPECT(0x24, gbc.e());
        EXPECT(0xc, gbc.h());
        EXPECT(0x6b, gbc.l());
        EXPECT(0xfd4f, gbc.sp());
        EXPECT(0x332c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 02A2
        gbc.setState(0x7134, 0xcb09, 0x8880, 0x4546, 0xa6a, 0xa8ea, 0x0, 0x0);
        gbc.writeMem(0x7134, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x88, gbc.a());
        EXPECT(0x45, gbc.b());
        EXPECT(0x46, gbc.c());
        EXPECT(0xa, gbc.d());
        EXPECT(0x6a, gbc.e());
        EXPECT(0xa8, gbc.h());
        EXPECT(0xea, gbc.l());
        EXPECT(0xcb09, gbc.sp());
        EXPECT(0x7136, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 02A3
        gbc.setState(0x33f3, 0x1e45, 0x80c0, 0x29f2, 0xdc73, 0x346c, 0x0, 0x1);
        gbc.writeMem(0x33f3, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x80, gbc.a());
        EXPECT(0x9, gbc.b());
        EXPECT(0xf2, gbc.c());
        EXPECT(0xdc, gbc.d());
        EXPECT(0x73, gbc.e());
        EXPECT(0x34, gbc.h());
        EXPECT(0x6c, gbc.l());
        EXPECT(0x1e45, gbc.sp());
        EXPECT(0x33f5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 02A4
        gbc.setState(0x56bd, 0xcb53, 0xc580, 0xaf7, 0x5784, 0x5390, 0x0, 0x0);
        gbc.writeMem(0x56bd, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xc5, gbc.a());
        EXPECT(0xa, gbc.b());
        EXPECT(0xf7, gbc.c());
        EXPECT(0x57, gbc.d());
        EXPECT(0x84, gbc.e());
        EXPECT(0x53, gbc.h());
        EXPECT(0x90, gbc.l());
        EXPECT(0xcb53, gbc.sp());
        EXPECT(0x56bf, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 02A5
        gbc.setState(0x3a86, 0x3c48, 0x4cc0, 0xdca, 0x740f, 0xa8af, 0x0, 0x0);
        gbc.writeMem(0x3a86, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x4c, gbc.a());
        EXPECT(0xd, gbc.b());
        EXPECT(0xca, gbc.c());
        EXPECT(0x74, gbc.d());
        EXPECT(0xf, gbc.e());
        EXPECT(0xa8, gbc.h());
        EXPECT(0xaf, gbc.l());
        EXPECT(0x3c48, gbc.sp());
        EXPECT(0x3a88, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 02A6
        gbc.setState(0x61df, 0x19db, 0x7f90, 0xc7d3, 0xdc46, 0xadd, 0x1, 0x1);
        gbc.writeMem(0x61df, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x7f, gbc.a());
        EXPECT(0xc7, gbc.b());
        EXPECT(0xd3, gbc.c());
        EXPECT(0xdc, gbc.d());
        EXPECT(0x46, gbc.e());
        EXPECT(0xa, gbc.h());
        EXPECT(0xdd, gbc.l());
        EXPECT(0x19db, gbc.sp());
        EXPECT(0x61e1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 02A7
        gbc.setState(0x1a2f, 0xeb23, 0x9370, 0x769, 0x365d, 0xbb2c, 0x1, 0x0);
        gbc.writeMem(0x1a2f, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x93, gbc.a());
        EXPECT(0x7, gbc.b());
        EXPECT(0x69, gbc.c());
        EXPECT(0x36, gbc.d());
        EXPECT(0x5d, gbc.e());
        EXPECT(0xbb, gbc.h());
        EXPECT(0x2c, gbc.l());
        EXPECT(0xeb23, gbc.sp());
        EXPECT(0x1a31, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 02A8
        gbc.setState(0xd353, 0xa0bb, 0x46d0, 0xccb7, 0xa5d2, 0x4b9e, 0x1, 0x1);
        gbc.writeMem(0xd353, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x46, gbc.a());
        EXPECT(0xcc, gbc.b());
        EXPECT(0xb7, gbc.c());
        EXPECT(0xa5, gbc.d());
        EXPECT(0xd2, gbc.e());
        EXPECT(0x4b, gbc.h());
        EXPECT(0x9e, gbc.l());
        EXPECT(0xa0bb, gbc.sp());
        EXPECT(0xd355, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd353));
        EXPECT(0xa8, gbc.readMem(0xd354));
        // CB A8 02A9
        gbc.setState(0x5897, 0xd199, 0xfba0, 0xcb64, 0x9018, 0xe9b1, 0x1, 0x1);
        gbc.writeMem(0x5897, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xfb, gbc.a());
        EXPECT(0xcb, gbc.b());
        EXPECT(0x64, gbc.c());
        EXPECT(0x90, gbc.d());
        EXPECT(0x18, gbc.e());
        EXPECT(0xe9, gbc.h());
        EXPECT(0xb1, gbc.l());
        EXPECT(0xd199, gbc.sp());
        EXPECT(0x5899, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 02AA
        gbc.setState(0xdc1a, 0x7b91, 0x2120, 0x1957, 0x211e, 0x7bea, 0x0, 0x0);
        gbc.writeMem(0xdc1a, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x21, gbc.a());
        EXPECT(0x19, gbc.b());
        EXPECT(0x57, gbc.c());
        EXPECT(0x21, gbc.d());
        EXPECT(0x1e, gbc.e());
        EXPECT(0x7b, gbc.h());
        EXPECT(0xea, gbc.l());
        EXPECT(0x7b91, gbc.sp());
        EXPECT(0xdc1c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdc1a));
        EXPECT(0xa8, gbc.readMem(0xdc1b));
        // CB A8 02AB
        gbc.setState(0x2302, 0xdd6, 0xbe60, 0xcb0b, 0x8d5c, 0x1470, 0x0, 0x1);
        gbc.writeMem(0x2302, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xbe, gbc.a());
        EXPECT(0xcb, gbc.b());
        EXPECT(0xb, gbc.c());
        EXPECT(0x8d, gbc.d());
        EXPECT(0x5c, gbc.e());
        EXPECT(0x14, gbc.h());
        EXPECT(0x70, gbc.l());
        EXPECT(0xdd6, gbc.sp());
        EXPECT(0x2304, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 02AC
        gbc.setState(0xbcdf, 0x8ced, 0xa640, 0x1d5f, 0x2491, 0x4181, 0x0, 0x0);
        gbc.writeMem(0xbcdf, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xa6, gbc.a());
        EXPECT(0x1d, gbc.b());
        EXPECT(0x5f, gbc.c());
        EXPECT(0x24, gbc.d());
        EXPECT(0x91, gbc.e());
        EXPECT(0x41, gbc.h());
        EXPECT(0x81, gbc.l());
        EXPECT(0x8ced, gbc.sp());
        EXPECT(0xbce1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbcdf));
        EXPECT(0xa8, gbc.readMem(0xbce0));
        // CB A8 02AD
        gbc.setState(0x3ee1, 0x3601, 0x7830, 0xc094, 0x9fe9, 0x6c55, 0x0, 0x1);
        gbc.writeMem(0x3ee1, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x78, gbc.a());
        EXPECT(0xc0, gbc.b());
        EXPECT(0x94, gbc.c());
        EXPECT(0x9f, gbc.d());
        EXPECT(0xe9, gbc.e());
        EXPECT(0x6c, gbc.h());
        EXPECT(0x55, gbc.l());
        EXPECT(0x3601, gbc.sp());
        EXPECT(0x3ee3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 02AE
        gbc.setState(0x3d19, 0x3ed6, 0x6f90, 0x11ef, 0xd78c, 0xc74d, 0x1, 0x0);
        gbc.writeMem(0x3d19, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x6f, gbc.a());
        EXPECT(0x11, gbc.b());
        EXPECT(0xef, gbc.c());
        EXPECT(0xd7, gbc.d());
        EXPECT(0x8c, gbc.e());
        EXPECT(0xc7, gbc.h());
        EXPECT(0x4d, gbc.l());
        EXPECT(0x3ed6, gbc.sp());
        EXPECT(0x3d1b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 02B1
        gbc.setState(0xde, 0x5802, 0x8250, 0x6567, 0x26e4, 0xeb91, 0x0, 0x1);
        gbc.writeMem(0xde, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x82, gbc.a());
        EXPECT(0x45, gbc.b());
        EXPECT(0x67, gbc.c());
        EXPECT(0x26, gbc.d());
        EXPECT(0xe4, gbc.e());
        EXPECT(0xeb, gbc.h());
        EXPECT(0x91, gbc.l());
        EXPECT(0x5802, gbc.sp());
        EXPECT(0xe0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 02B2
        gbc.setState(0xc9b6, 0xa822, 0xcbf0, 0x4149, 0x4adc, 0xff6c, 0x0, 0x1);
        gbc.writeMem(0xc9b6, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xcb, gbc.a());
        EXPECT(0x41, gbc.b());
        EXPECT(0x49, gbc.c());
        EXPECT(0x4a, gbc.d());
        EXPECT(0xdc, gbc.e());
        EXPECT(0xff, gbc.h());
        EXPECT(0x6c, gbc.l());
        EXPECT(0xa822, gbc.sp());
        EXPECT(0xc9b8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc9b6));
        EXPECT(0xa8, gbc.readMem(0xc9b7));
        // CB A8 02B4
        gbc.setState(0x81c9, 0x1a3, 0x1a70, 0x381c, 0x6e79, 0xd2d4, 0x1, 0x0);
        gbc.writeMem(0x81c9, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x1a, gbc.a());
        EXPECT(0x18, gbc.b());
        EXPECT(0x1c, gbc.c());
        EXPECT(0x6e, gbc.d());
        EXPECT(0x79, gbc.e());
        EXPECT(0xd2, gbc.h());
        EXPECT(0xd4, gbc.l());
        EXPECT(0x1a3, gbc.sp());
        EXPECT(0x81cb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x81c9));
        EXPECT(0xa8, gbc.readMem(0x81ca));
        // CB A8 02B5
        gbc.setState(0x5e03, 0x7e0e, 0xe750, 0x7933, 0x643d, 0xd78a, 0x1, 0x0);
        gbc.writeMem(0x5e03, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xe7, gbc.a());
        EXPECT(0x59, gbc.b());
        EXPECT(0x33, gbc.c());
        EXPECT(0x64, gbc.d());
        EXPECT(0x3d, gbc.e());
        EXPECT(0xd7, gbc.h());
        EXPECT(0x8a, gbc.l());
        EXPECT(0x7e0e, gbc.sp());
        EXPECT(0x5e05, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 02B6
        gbc.setState(0xdfa1, 0x1ae, 0x65f0, 0x4252, 0xc4d6, 0xf984, 0x1, 0x1);
        gbc.writeMem(0xdfa1, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x65, gbc.a());
        EXPECT(0x42, gbc.b());
        EXPECT(0x52, gbc.c());
        EXPECT(0xc4, gbc.d());
        EXPECT(0xd6, gbc.e());
        EXPECT(0xf9, gbc.h());
        EXPECT(0x84, gbc.l());
        EXPECT(0x1ae, gbc.sp());
        EXPECT(0xdfa3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdfa1));
        EXPECT(0xa8, gbc.readMem(0xdfa2));
        // CB A8 02B8
        gbc.setState(0x2e7e, 0xd0f8, 0xacd0, 0x37a, 0xfe6, 0x9199, 0x0, 0x0);
        gbc.writeMem(0x2e7e, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xac, gbc.a());
        EXPECT(0x3, gbc.b());
        EXPECT(0x7a, gbc.c());
        EXPECT(0xf, gbc.d());
        EXPECT(0xe6, gbc.e());
        EXPECT(0x91, gbc.h());
        EXPECT(0x99, gbc.l());
        EXPECT(0xd0f8, gbc.sp());
        EXPECT(0x2e80, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 02B9
        gbc.setState(0xec37, 0xc47d, 0x3db0, 0x1ed1, 0x53de, 0xe99a, 0x0, 0x1);
        gbc.writeMem(0xec37, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x3d, gbc.a());
        EXPECT(0x1e, gbc.b());
        EXPECT(0xd1, gbc.c());
        EXPECT(0x53, gbc.d());
        EXPECT(0xde, gbc.e());
        EXPECT(0xe9, gbc.h());
        EXPECT(0x9a, gbc.l());
        EXPECT(0xc47d, gbc.sp());
        EXPECT(0xec39, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xec37));
        EXPECT(0xa8, gbc.readMem(0xec38));
        // CB A8 02BA
        gbc.setState(0xb0fe, 0x7e99, 0x4be0, 0x63f9, 0x790c, 0x4a1f, 0x1, 0x1);
        gbc.writeMem(0xb0fe, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x4b, gbc.a());
        EXPECT(0x43, gbc.b());
        EXPECT(0xf9, gbc.c());
        EXPECT(0x79, gbc.d());
        EXPECT(0xc, gbc.e());
        EXPECT(0x4a, gbc.h());
        EXPECT(0x1f, gbc.l());
        EXPECT(0x7e99, gbc.sp());
        EXPECT(0xb100, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb0fe));
        EXPECT(0xa8, gbc.readMem(0xb0ff));
        // CB A8 02BB
        gbc.setState(0xb727, 0x9c42, 0x2b10, 0x572f, 0xce69, 0x1f86, 0x1, 0x0);
        gbc.writeMem(0xb727, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x2b, gbc.a());
        EXPECT(0x57, gbc.b());
        EXPECT(0x2f, gbc.c());
        EXPECT(0xce, gbc.d());
        EXPECT(0x69, gbc.e());
        EXPECT(0x1f, gbc.h());
        EXPECT(0x86, gbc.l());
        EXPECT(0x9c42, gbc.sp());
        EXPECT(0xb729, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb727));
        EXPECT(0xa8, gbc.readMem(0xb728));
        // CB A8 02BC
        gbc.setState(0x6476, 0xe1b3, 0xf960, 0x6b84, 0x42e5, 0xe49c, 0x1, 0x1);
        gbc.writeMem(0x6476, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xf9, gbc.a());
        EXPECT(0x4b, gbc.b());
        EXPECT(0x84, gbc.c());
        EXPECT(0x42, gbc.d());
        EXPECT(0xe5, gbc.e());
        EXPECT(0xe4, gbc.h());
        EXPECT(0x9c, gbc.l());
        EXPECT(0xe1b3, gbc.sp());
        EXPECT(0x6478, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 02BD
        gbc.setState(0xcdee, 0xa172, 0x4370, 0xff58, 0xbbda, 0xcb44, 0x0, 0x0);
        gbc.writeMem(0xcdee, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x43, gbc.a());
        EXPECT(0xdf, gbc.b());
        EXPECT(0x58, gbc.c());
        EXPECT(0xbb, gbc.d());
        EXPECT(0xda, gbc.e());
        EXPECT(0xcb, gbc.h());
        EXPECT(0x44, gbc.l());
        EXPECT(0xa172, gbc.sp());
        EXPECT(0xcdf0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcdee));
        EXPECT(0xa8, gbc.readMem(0xcdef));
        // CB A8 02BE
        gbc.setState(0x4425, 0x61f4, 0xb8b0, 0x5ac4, 0x1aec, 0x710e, 0x0, 0x1);
        gbc.writeMem(0x4425, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xb8, gbc.a());
        EXPECT(0x5a, gbc.b());
        EXPECT(0xc4, gbc.c());
        EXPECT(0x1a, gbc.d());
        EXPECT(0xec, gbc.e());
        EXPECT(0x71, gbc.h());
        EXPECT(0xe, gbc.l());
        EXPECT(0x61f4, gbc.sp());
        EXPECT(0x4427, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 02C0
        gbc.setState(0x40e4, 0xdd62, 0x3df0, 0x394c, 0x76a, 0x1137, 0x1, 0x0);
        gbc.writeMem(0x40e4, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x3d, gbc.a());
        EXPECT(0x19, gbc.b());
        EXPECT(0x4c, gbc.c());
        EXPECT(0x7, gbc.d());
        EXPECT(0x6a, gbc.e());
        EXPECT(0x11, gbc.h());
        EXPECT(0x37, gbc.l());
        EXPECT(0xdd62, gbc.sp());
        EXPECT(0x40e6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 02C1
        gbc.setState(0x822e, 0x5690, 0x2b40, 0xe779, 0xcb3f, 0xab6b, 0x0, 0x0);
        gbc.writeMem(0x822e, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x2b, gbc.a());
        EXPECT(0xc7, gbc.b());
        EXPECT(0x79, gbc.c());
        EXPECT(0xcb, gbc.d());
        EXPECT(0x3f, gbc.e());
        EXPECT(0xab, gbc.h());
        EXPECT(0x6b, gbc.l());
        EXPECT(0x5690, gbc.sp());
        EXPECT(0x8230, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x822e));
        EXPECT(0xa8, gbc.readMem(0x822f));
        // CB A8 02C2
        gbc.setState(0x2675, 0x1615, 0x9110, 0xbe78, 0x88d6, 0xcba2, 0x1, 0x0);
        gbc.writeMem(0x2675, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x91, gbc.a());
        EXPECT(0x9e, gbc.b());
        EXPECT(0x78, gbc.c());
        EXPECT(0x88, gbc.d());
        EXPECT(0xd6, gbc.e());
        EXPECT(0xcb, gbc.h());
        EXPECT(0xa2, gbc.l());
        EXPECT(0x1615, gbc.sp());
        EXPECT(0x2677, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 02C3
        gbc.setState(0x590e, 0xd88, 0x2bc0, 0x1036, 0x9db4, 0x16fd, 0x0, 0x1);
        gbc.writeMem(0x590e, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x2b, gbc.a());
        EXPECT(0x10, gbc.b());
        EXPECT(0x36, gbc.c());
        EXPECT(0x9d, gbc.d());
        EXPECT(0xb4, gbc.e());
        EXPECT(0x16, gbc.h());
        EXPECT(0xfd, gbc.l());
        EXPECT(0xd88, gbc.sp());
        EXPECT(0x5910, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 02C4
        gbc.setState(0xb498, 0x7bf2, 0x7f60, 0x42fa, 0x2e65, 0xa0a4, 0x0, 0x0);
        gbc.writeMem(0xb498, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x7f, gbc.a());
        EXPECT(0x42, gbc.b());
        EXPECT(0xfa, gbc.c());
        EXPECT(0x2e, gbc.d());
        EXPECT(0x65, gbc.e());
        EXPECT(0xa0, gbc.h());
        EXPECT(0xa4, gbc.l());
        EXPECT(0x7bf2, gbc.sp());
        EXPECT(0xb49a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb498));
        EXPECT(0xa8, gbc.readMem(0xb499));
        // CB A8 02C5
        gbc.setState(0x8552, 0x7591, 0x8e70, 0xa6c9, 0x466a, 0x732c, 0x1, 0x1);
        gbc.writeMem(0x8552, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x8e, gbc.a());
        EXPECT(0x86, gbc.b());
        EXPECT(0xc9, gbc.c());
        EXPECT(0x46, gbc.d());
        EXPECT(0x6a, gbc.e());
        EXPECT(0x73, gbc.h());
        EXPECT(0x2c, gbc.l());
        EXPECT(0x7591, gbc.sp());
        EXPECT(0x8554, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8552));
        EXPECT(0xa8, gbc.readMem(0x8553));
        // CB A8 02C6
        gbc.setState(0xdda2, 0x3904, 0x3420, 0xef8c, 0x8807, 0x6078, 0x1, 0x0);
        gbc.writeMem(0xdda2, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x34, gbc.a());
        EXPECT(0xcf, gbc.b());
        EXPECT(0x8c, gbc.c());
        EXPECT(0x88, gbc.d());
        EXPECT(0x7, gbc.e());
        EXPECT(0x60, gbc.h());
        EXPECT(0x78, gbc.l());
        EXPECT(0x3904, gbc.sp());
        EXPECT(0xdda4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdda2));
        EXPECT(0xa8, gbc.readMem(0xdda3));
        // CB A8 02C7
        gbc.setState(0xc299, 0x17f2, 0x85e0, 0x4e58, 0x3941, 0x8459, 0x0, 0x0);
        gbc.writeMem(0xc299, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x85, gbc.a());
        EXPECT(0x4e, gbc.b());
        EXPECT(0x58, gbc.c());
        EXPECT(0x39, gbc.d());
        EXPECT(0x41, gbc.e());
        EXPECT(0x84, gbc.h());
        EXPECT(0x59, gbc.l());
        EXPECT(0x17f2, gbc.sp());
        EXPECT(0xc29b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc299));
        EXPECT(0xa8, gbc.readMem(0xc29a));
        // CB A8 02C8
        gbc.setState(0xec7a, 0x1b8d, 0xf2a0, 0x3758, 0x4867, 0x536f, 0x1, 0x0);
        gbc.writeMem(0xec7a, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xf2, gbc.a());
        EXPECT(0x17, gbc.b());
        EXPECT(0x58, gbc.c());
        EXPECT(0x48, gbc.d());
        EXPECT(0x67, gbc.e());
        EXPECT(0x53, gbc.h());
        EXPECT(0x6f, gbc.l());
        EXPECT(0x1b8d, gbc.sp());
        EXPECT(0xec7c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xec7a));
        EXPECT(0xa8, gbc.readMem(0xec7b));
        // CB A8 02C9
        gbc.setState(0x2b82, 0x450c, 0x210, 0xc88e, 0x434f, 0xdd0, 0x1, 0x0);
        gbc.writeMem(0x2b82, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x2, gbc.a());
        EXPECT(0xc8, gbc.b());
        EXPECT(0x8e, gbc.c());
        EXPECT(0x43, gbc.d());
        EXPECT(0x4f, gbc.e());
        EXPECT(0xd, gbc.h());
        EXPECT(0xd0, gbc.l());
        EXPECT(0x450c, gbc.sp());
        EXPECT(0x2b84, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 02CA
        gbc.setState(0x3e86, 0x7904, 0x80, 0x56ad, 0x5bc, 0x7e0, 0x0, 0x0);
        gbc.writeMem(0x3e86, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x56, gbc.b());
        EXPECT(0xad, gbc.c());
        EXPECT(0x5, gbc.d());
        EXPECT(0xbc, gbc.e());
        EXPECT(0x7, gbc.h());
        EXPECT(0xe0, gbc.l());
        EXPECT(0x7904, gbc.sp());
        EXPECT(0x3e88, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 02CC
        gbc.setState(0xb02d, 0xe7d9, 0x9570, 0xec58, 0x6a8, 0xae9e, 0x0, 0x1);
        gbc.writeMem(0xb02d, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x95, gbc.a());
        EXPECT(0xcc, gbc.b());
        EXPECT(0x58, gbc.c());
        EXPECT(0x6, gbc.d());
        EXPECT(0xa8, gbc.e());
        EXPECT(0xae, gbc.h());
        EXPECT(0x9e, gbc.l());
        EXPECT(0xe7d9, gbc.sp());
        EXPECT(0xb02f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb02d));
        EXPECT(0xa8, gbc.readMem(0xb02e));
        // CB A8 02CD
        gbc.setState(0xc335, 0x54a2, 0xe760, 0x90ee, 0x7e76, 0x397d, 0x1, 0x1);
        gbc.writeMem(0xc335, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xe7, gbc.a());
        EXPECT(0x90, gbc.b());
        EXPECT(0xee, gbc.c());
        EXPECT(0x7e, gbc.d());
        EXPECT(0x76, gbc.e());
        EXPECT(0x39, gbc.h());
        EXPECT(0x7d, gbc.l());
        EXPECT(0x54a2, gbc.sp());
        EXPECT(0xc337, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc335));
        EXPECT(0xa8, gbc.readMem(0xc336));
        // CB A8 02CE
        gbc.setState(0x4d4f, 0x87c7, 0x5b70, 0xd6e0, 0x7f66, 0x6ca1, 0x1, 0x0);
        gbc.writeMem(0x4d4f, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x5b, gbc.a());
        EXPECT(0xd6, gbc.b());
        EXPECT(0xe0, gbc.c());
        EXPECT(0x7f, gbc.d());
        EXPECT(0x66, gbc.e());
        EXPECT(0x6c, gbc.h());
        EXPECT(0xa1, gbc.l());
        EXPECT(0x87c7, gbc.sp());
        EXPECT(0x4d51, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 02CF
        gbc.setState(0xcb90, 0xd2da, 0xdd40, 0x1d54, 0xa335, 0x94c1, 0x1, 0x0);
        gbc.writeMem(0xcb90, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xdd, gbc.a());
        EXPECT(0x1d, gbc.b());
        EXPECT(0x54, gbc.c());
        EXPECT(0xa3, gbc.d());
        EXPECT(0x35, gbc.e());
        EXPECT(0x94, gbc.h());
        EXPECT(0xc1, gbc.l());
        EXPECT(0xd2da, gbc.sp());
        EXPECT(0xcb92, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcb90));
        EXPECT(0xa8, gbc.readMem(0xcb91));
        // CB A8 02D0
        gbc.setState(0x7c05, 0xf138, 0xe800, 0x9e9, 0xad2d, 0xa991, 0x1, 0x1);
        gbc.writeMem(0x7c05, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xe8, gbc.a());
        EXPECT(0x9, gbc.b());
        EXPECT(0xe9, gbc.c());
        EXPECT(0xad, gbc.d());
        EXPECT(0x2d, gbc.e());
        EXPECT(0xa9, gbc.h());
        EXPECT(0x91, gbc.l());
        EXPECT(0xf138, gbc.sp());
        EXPECT(0x7c07, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 02D1
        gbc.setState(0x1cc, 0xe7ce, 0xf6c0, 0x1af7, 0x27c3, 0x9b3b, 0x1, 0x0);
        gbc.writeMem(0x1cc, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xf6, gbc.a());
        EXPECT(0x1a, gbc.b());
        EXPECT(0xf7, gbc.c());
        EXPECT(0x27, gbc.d());
        EXPECT(0xc3, gbc.e());
        EXPECT(0x9b, gbc.h());
        EXPECT(0x3b, gbc.l());
        EXPECT(0xe7ce, gbc.sp());
        EXPECT(0x1ce, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 02D2
        gbc.setState(0xb84b, 0xeff2, 0xc120, 0x8cf, 0x427c, 0xd06f, 0x1, 0x0);
        gbc.writeMem(0xb84b, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xc1, gbc.a());
        EXPECT(0x8, gbc.b());
        EXPECT(0xcf, gbc.c());
        EXPECT(0x42, gbc.d());
        EXPECT(0x7c, gbc.e());
        EXPECT(0xd0, gbc.h());
        EXPECT(0x6f, gbc.l());
        EXPECT(0xeff2, gbc.sp());
        EXPECT(0xb84d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb84b));
        EXPECT(0xa8, gbc.readMem(0xb84c));
        // CB A8 02D3
        gbc.setState(0xaa48, 0x4b03, 0x64e0, 0xb70f, 0x2b93, 0x5df5, 0x1, 0x1);
        gbc.writeMem(0xaa48, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x64, gbc.a());
        EXPECT(0x97, gbc.b());
        EXPECT(0xf, gbc.c());
        EXPECT(0x2b, gbc.d());
        EXPECT(0x93, gbc.e());
        EXPECT(0x5d, gbc.h());
        EXPECT(0xf5, gbc.l());
        EXPECT(0x4b03, gbc.sp());
        EXPECT(0xaa4a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaa48));
        EXPECT(0xa8, gbc.readMem(0xaa49));
        // CB A8 02D4
        gbc.setState(0xb9b0, 0x6f79, 0x4ce0, 0xd64d, 0xf173, 0x2141, 0x0, 0x0);
        gbc.writeMem(0xb9b0, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x4c, gbc.a());
        EXPECT(0xd6, gbc.b());
        EXPECT(0x4d, gbc.c());
        EXPECT(0xf1, gbc.d());
        EXPECT(0x73, gbc.e());
        EXPECT(0x21, gbc.h());
        EXPECT(0x41, gbc.l());
        EXPECT(0x6f79, gbc.sp());
        EXPECT(0xb9b2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb9b0));
        EXPECT(0xa8, gbc.readMem(0xb9b1));
        // CB A8 02D5
        gbc.setState(0x58f2, 0x21ed, 0x8f20, 0xb5f4, 0x9eff, 0x9ffe, 0x1, 0x0);
        gbc.writeMem(0x58f2, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x8f, gbc.a());
        EXPECT(0x95, gbc.b());
        EXPECT(0xf4, gbc.c());
        EXPECT(0x9e, gbc.d());
        EXPECT(0xff, gbc.e());
        EXPECT(0x9f, gbc.h());
        EXPECT(0xfe, gbc.l());
        EXPECT(0x21ed, gbc.sp());
        EXPECT(0x58f4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 02D6
        gbc.setState(0xbefe, 0xae85, 0xc5a0, 0x267e, 0x9704, 0xfec5, 0x0, 0x0);
        gbc.writeMem(0xbefe, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xc5, gbc.a());
        EXPECT(0x6, gbc.b());
        EXPECT(0x7e, gbc.c());
        EXPECT(0x97, gbc.d());
        EXPECT(0x4, gbc.e());
        EXPECT(0xfe, gbc.h());
        EXPECT(0xc5, gbc.l());
        EXPECT(0xae85, gbc.sp());
        EXPECT(0xbf00, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbefe));
        EXPECT(0xa8, gbc.readMem(0xbeff));
        // CB A8 02D7
        gbc.setState(0x4a9a, 0x6f6d, 0x2d40, 0xc17a, 0x5bf3, 0x4466, 0x1, 0x0);
        gbc.writeMem(0x4a9a, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x2d, gbc.a());
        EXPECT(0xc1, gbc.b());
        EXPECT(0x7a, gbc.c());
        EXPECT(0x5b, gbc.d());
        EXPECT(0xf3, gbc.e());
        EXPECT(0x44, gbc.h());
        EXPECT(0x66, gbc.l());
        EXPECT(0x6f6d, gbc.sp());
        EXPECT(0x4a9c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 02D8
        gbc.setState(0xe5b1, 0xdd15, 0xb210, 0x215a, 0x8bbc, 0xb79d, 0x1, 0x0);
        gbc.writeMem(0xe5b1, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xb2, gbc.a());
        EXPECT(0x1, gbc.b());
        EXPECT(0x5a, gbc.c());
        EXPECT(0x8b, gbc.d());
        EXPECT(0xbc, gbc.e());
        EXPECT(0xb7, gbc.h());
        EXPECT(0x9d, gbc.l());
        EXPECT(0xdd15, gbc.sp());
        EXPECT(0xe5b3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe5b1));
        EXPECT(0xa8, gbc.readMem(0xe5b2));
        // CB A8 02D9
        gbc.setState(0xe6cf, 0x646f, 0xe8d0, 0xd3d0, 0x54ba, 0x48ce, 0x1, 0x0);
        gbc.writeMem(0xe6cf, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xe8, gbc.a());
        EXPECT(0xd3, gbc.b());
        EXPECT(0xd0, gbc.c());
        EXPECT(0x54, gbc.d());
        EXPECT(0xba, gbc.e());
        EXPECT(0x48, gbc.h());
        EXPECT(0xce, gbc.l());
        EXPECT(0x646f, gbc.sp());
        EXPECT(0xe6d1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe6cf));
        EXPECT(0xa8, gbc.readMem(0xe6d0));
        // CB A8 02DB
        gbc.setState(0xb665, 0x1877, 0x2b20, 0x4829, 0x6616, 0xdd24, 0x1, 0x1);
        gbc.writeMem(0xb665, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x2b, gbc.a());
        EXPECT(0x48, gbc.b());
        EXPECT(0x29, gbc.c());
        EXPECT(0x66, gbc.d());
        EXPECT(0x16, gbc.e());
        EXPECT(0xdd, gbc.h());
        EXPECT(0x24, gbc.l());
        EXPECT(0x1877, gbc.sp());
        EXPECT(0xb667, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb665));
        EXPECT(0xa8, gbc.readMem(0xb666));
        // CB A8 02DC
        gbc.setState(0x730c, 0xad37, 0x6d40, 0x636f, 0xd18b, 0xcd23, 0x1, 0x0);
        gbc.writeMem(0x730c, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x6d, gbc.a());
        EXPECT(0x43, gbc.b());
        EXPECT(0x6f, gbc.c());
        EXPECT(0xd1, gbc.d());
        EXPECT(0x8b, gbc.e());
        EXPECT(0xcd, gbc.h());
        EXPECT(0x23, gbc.l());
        EXPECT(0xad37, gbc.sp());
        EXPECT(0x730e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 02DD
        gbc.setState(0x4f1d, 0xa33f, 0xfc80, 0xe34, 0x174e, 0xf12, 0x0, 0x1);
        gbc.writeMem(0x4f1d, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xfc, gbc.a());
        EXPECT(0xe, gbc.b());
        EXPECT(0x34, gbc.c());
        EXPECT(0x17, gbc.d());
        EXPECT(0x4e, gbc.e());
        EXPECT(0xf, gbc.h());
        EXPECT(0x12, gbc.l());
        EXPECT(0xa33f, gbc.sp());
        EXPECT(0x4f1f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 02DE
        gbc.setState(0x2b8e, 0x4e59, 0x6260, 0xb791, 0x1393, 0x7be1, 0x0, 0x1);
        gbc.writeMem(0x2b8e, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x62, gbc.a());
        EXPECT(0x97, gbc.b());
        EXPECT(0x91, gbc.c());
        EXPECT(0x13, gbc.d());
        EXPECT(0x93, gbc.e());
        EXPECT(0x7b, gbc.h());
        EXPECT(0xe1, gbc.l());
        EXPECT(0x4e59, gbc.sp());
        EXPECT(0x2b90, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 02DF
        gbc.setState(0xd90c, 0x6444, 0x5c80, 0x8e75, 0x56dd, 0x82b6, 0x0, 0x0);
        gbc.writeMem(0xd90c, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x5c, gbc.a());
        EXPECT(0x8e, gbc.b());
        EXPECT(0x75, gbc.c());
        EXPECT(0x56, gbc.d());
        EXPECT(0xdd, gbc.e());
        EXPECT(0x82, gbc.h());
        EXPECT(0xb6, gbc.l());
        EXPECT(0x6444, gbc.sp());
        EXPECT(0xd90e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd90c));
        EXPECT(0xa8, gbc.readMem(0xd90d));
        // CB A8 02E0
        gbc.setState(0xccef, 0x28c4, 0x2fe0, 0x3480, 0x59f9, 0xd153, 0x0, 0x0);
        gbc.writeMem(0xccef, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x2f, gbc.a());
        EXPECT(0x14, gbc.b());
        EXPECT(0x80, gbc.c());
        EXPECT(0x59, gbc.d());
        EXPECT(0xf9, gbc.e());
        EXPECT(0xd1, gbc.h());
        EXPECT(0x53, gbc.l());
        EXPECT(0x28c4, gbc.sp());
        EXPECT(0xccf1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xccef));
        EXPECT(0xa8, gbc.readMem(0xccf0));
        // CB A8 02E1
        gbc.setState(0xe15, 0xb182, 0x8350, 0xacb7, 0x2281, 0x8720, 0x1, 0x0);
        gbc.writeMem(0xe15, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x83, gbc.a());
        EXPECT(0x8c, gbc.b());
        EXPECT(0xb7, gbc.c());
        EXPECT(0x22, gbc.d());
        EXPECT(0x81, gbc.e());
        EXPECT(0x87, gbc.h());
        EXPECT(0x20, gbc.l());
        EXPECT(0xb182, gbc.sp());
        EXPECT(0xe17, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 02E2
        gbc.setState(0xacb6, 0x7170, 0xef40, 0xb63d, 0x747c, 0x1101, 0x1, 0x1);
        gbc.writeMem(0xacb6, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xef, gbc.a());
        EXPECT(0x96, gbc.b());
        EXPECT(0x3d, gbc.c());
        EXPECT(0x74, gbc.d());
        EXPECT(0x7c, gbc.e());
        EXPECT(0x11, gbc.h());
        EXPECT(0x1, gbc.l());
        EXPECT(0x7170, gbc.sp());
        EXPECT(0xacb8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xacb6));
        EXPECT(0xa8, gbc.readMem(0xacb7));
        // CB A8 02E3
        gbc.setState(0xc5dc, 0x36db, 0x8c30, 0xdee, 0x6d4e, 0xd42a, 0x1, 0x0);
        gbc.writeMem(0xc5dc, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x8c, gbc.a());
        EXPECT(0xd, gbc.b());
        EXPECT(0xee, gbc.c());
        EXPECT(0x6d, gbc.d());
        EXPECT(0x4e, gbc.e());
        EXPECT(0xd4, gbc.h());
        EXPECT(0x2a, gbc.l());
        EXPECT(0x36db, gbc.sp());
        EXPECT(0xc5de, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc5dc));
        EXPECT(0xa8, gbc.readMem(0xc5dd));
        // CB A8 02E4
        gbc.setState(0x1208, 0xf6e1, 0x87a0, 0xa4ed, 0xb28e, 0x4cd3, 0x1, 0x0);
        gbc.writeMem(0x1208, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x87, gbc.a());
        EXPECT(0x84, gbc.b());
        EXPECT(0xed, gbc.c());
        EXPECT(0xb2, gbc.d());
        EXPECT(0x8e, gbc.e());
        EXPECT(0x4c, gbc.h());
        EXPECT(0xd3, gbc.l());
        EXPECT(0xf6e1, gbc.sp());
        EXPECT(0x120a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 02E5
        gbc.setState(0x3642, 0x1fd7, 0xe0c0, 0xc6a9, 0x1b75, 0xffe, 0x1, 0x0);
        gbc.writeMem(0x3642, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xe0, gbc.a());
        EXPECT(0xc6, gbc.b());
        EXPECT(0xa9, gbc.c());
        EXPECT(0x1b, gbc.d());
        EXPECT(0x75, gbc.e());
        EXPECT(0xf, gbc.h());
        EXPECT(0xfe, gbc.l());
        EXPECT(0x1fd7, gbc.sp());
        EXPECT(0x3644, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 02E6
        gbc.setState(0x9b29, 0x23db, 0xbd60, 0xb9fb, 0x71e8, 0xe5a5, 0x0, 0x1);
        gbc.writeMem(0x9b29, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xbd, gbc.a());
        EXPECT(0x99, gbc.b());
        EXPECT(0xfb, gbc.c());
        EXPECT(0x71, gbc.d());
        EXPECT(0xe8, gbc.e());
        EXPECT(0xe5, gbc.h());
        EXPECT(0xa5, gbc.l());
        EXPECT(0x23db, gbc.sp());
        EXPECT(0x9b2b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9b29));
        EXPECT(0xa8, gbc.readMem(0x9b2a));
        // CB A8 02E8
        gbc.setState(0x4d0a, 0x589b, 0x6770, 0xe7b8, 0x7be7, 0x692b, 0x1, 0x1);
        gbc.writeMem(0x4d0a, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x67, gbc.a());
        EXPECT(0xc7, gbc.b());
        EXPECT(0xb8, gbc.c());
        EXPECT(0x7b, gbc.d());
        EXPECT(0xe7, gbc.e());
        EXPECT(0x69, gbc.h());
        EXPECT(0x2b, gbc.l());
        EXPECT(0x589b, gbc.sp());
        EXPECT(0x4d0c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 02E9
        gbc.setState(0x6b0a, 0xef76, 0x340, 0xd006, 0x1a35, 0xba4b, 0x0, 0x1);
        gbc.writeMem(0x6b0a, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x3, gbc.a());
        EXPECT(0xd0, gbc.b());
        EXPECT(0x6, gbc.c());
        EXPECT(0x1a, gbc.d());
        EXPECT(0x35, gbc.e());
        EXPECT(0xba, gbc.h());
        EXPECT(0x4b, gbc.l());
        EXPECT(0xef76, gbc.sp());
        EXPECT(0x6b0c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 02EB
        gbc.setState(0xaa99, 0xd647, 0xded0, 0xb297, 0x7156, 0x6fc5, 0x0, 0x0);
        gbc.writeMem(0xaa99, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xde, gbc.a());
        EXPECT(0x92, gbc.b());
        EXPECT(0x97, gbc.c());
        EXPECT(0x71, gbc.d());
        EXPECT(0x56, gbc.e());
        EXPECT(0x6f, gbc.h());
        EXPECT(0xc5, gbc.l());
        EXPECT(0xd647, gbc.sp());
        EXPECT(0xaa9b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaa99));
        EXPECT(0xa8, gbc.readMem(0xaa9a));
        // CB A8 02EC
        gbc.setState(0xd549, 0x343d, 0xd4c0, 0xca47, 0x3f34, 0xc7f6, 0x1, 0x0);
        gbc.writeMem(0xd549, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xd4, gbc.a());
        EXPECT(0xca, gbc.b());
        EXPECT(0x47, gbc.c());
        EXPECT(0x3f, gbc.d());
        EXPECT(0x34, gbc.e());
        EXPECT(0xc7, gbc.h());
        EXPECT(0xf6, gbc.l());
        EXPECT(0x343d, gbc.sp());
        EXPECT(0xd54b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd549));
        EXPECT(0xa8, gbc.readMem(0xd54a));
        // CB A8 02ED
        gbc.setState(0xa54b, 0xe95f, 0xd4c0, 0xfcdc, 0x2749, 0x5b7e, 0x0, 0x0);
        gbc.writeMem(0xa54b, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xd4, gbc.a());
        EXPECT(0xdc, gbc.b());
        EXPECT(0xdc, gbc.c());
        EXPECT(0x27, gbc.d());
        EXPECT(0x49, gbc.e());
        EXPECT(0x5b, gbc.h());
        EXPECT(0x7e, gbc.l());
        EXPECT(0xe95f, gbc.sp());
        EXPECT(0xa54d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa54b));
        EXPECT(0xa8, gbc.readMem(0xa54c));
        // CB A8 02EE
        gbc.setState(0xb5ff, 0xbc8b, 0xbbd0, 0xfff5, 0xd52b, 0x8c13, 0x0, 0x0);
        gbc.writeMem(0xb5ff, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xbb, gbc.a());
        EXPECT(0xdf, gbc.b());
        EXPECT(0xf5, gbc.c());
        EXPECT(0xd5, gbc.d());
        EXPECT(0x2b, gbc.e());
        EXPECT(0x8c, gbc.h());
        EXPECT(0x13, gbc.l());
        EXPECT(0xbc8b, gbc.sp());
        EXPECT(0xb601, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb5ff));
        EXPECT(0xa8, gbc.readMem(0xb600));
        // CB A8 02EF
        gbc.setState(0x69d, 0x727e, 0xfdb0, 0xa0b5, 0x5ec8, 0xe527, 0x1, 0x1);
        gbc.writeMem(0x69d, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xfd, gbc.a());
        EXPECT(0x80, gbc.b());
        EXPECT(0xb5, gbc.c());
        EXPECT(0x5e, gbc.d());
        EXPECT(0xc8, gbc.e());
        EXPECT(0xe5, gbc.h());
        EXPECT(0x27, gbc.l());
        EXPECT(0x727e, gbc.sp());
        EXPECT(0x69f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 02F0
        gbc.setState(0x12, 0x3bed, 0xe290, 0x32dc, 0x8eb, 0xddf6, 0x1, 0x1);
        gbc.writeMem(0x12, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xe2, gbc.a());
        EXPECT(0x12, gbc.b());
        EXPECT(0xdc, gbc.c());
        EXPECT(0x8, gbc.d());
        EXPECT(0xeb, gbc.e());
        EXPECT(0xdd, gbc.h());
        EXPECT(0xf6, gbc.l());
        EXPECT(0x3bed, gbc.sp());
        EXPECT(0x14, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 02F1
        gbc.setState(0x7efb, 0xb1f3, 0x80e0, 0xf689, 0x8212, 0x5f76, 0x0, 0x1);
        gbc.writeMem(0x7efb, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x80, gbc.a());
        EXPECT(0xd6, gbc.b());
        EXPECT(0x89, gbc.c());
        EXPECT(0x82, gbc.d());
        EXPECT(0x12, gbc.e());
        EXPECT(0x5f, gbc.h());
        EXPECT(0x76, gbc.l());
        EXPECT(0xb1f3, gbc.sp());
        EXPECT(0x7efd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 02F2
        gbc.setState(0x5f7c, 0x6302, 0x9000, 0x6438, 0xcff4, 0xfce3, 0x0, 0x0);
        gbc.writeMem(0x5f7c, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x90, gbc.a());
        EXPECT(0x44, gbc.b());
        EXPECT(0x38, gbc.c());
        EXPECT(0xcf, gbc.d());
        EXPECT(0xf4, gbc.e());
        EXPECT(0xfc, gbc.h());
        EXPECT(0xe3, gbc.l());
        EXPECT(0x6302, gbc.sp());
        EXPECT(0x5f7e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 02F3
        gbc.setState(0x1d89, 0x8f4a, 0x3ee0, 0xc82f, 0x60c0, 0x27a4, 0x0, 0x1);
        gbc.writeMem(0x1d89, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x3e, gbc.a());
        EXPECT(0xc8, gbc.b());
        EXPECT(0x2f, gbc.c());
        EXPECT(0x60, gbc.d());
        EXPECT(0xc0, gbc.e());
        EXPECT(0x27, gbc.h());
        EXPECT(0xa4, gbc.l());
        EXPECT(0x8f4a, gbc.sp());
        EXPECT(0x1d8b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 02F4
        gbc.setState(0x2c39, 0x1e72, 0xef70, 0x40c, 0x9ba7, 0x6573, 0x0, 0x0);
        gbc.writeMem(0x2c39, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xef, gbc.a());
        EXPECT(0x4, gbc.b());
        EXPECT(0xc, gbc.c());
        EXPECT(0x9b, gbc.d());
        EXPECT(0xa7, gbc.e());
        EXPECT(0x65, gbc.h());
        EXPECT(0x73, gbc.l());
        EXPECT(0x1e72, gbc.sp());
        EXPECT(0x2c3b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 02F5
        gbc.setState(0x74f5, 0xdd7b, 0x76f0, 0xd5da, 0xf8f0, 0x7ba1, 0x0, 0x0);
        gbc.writeMem(0x74f5, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x76, gbc.a());
        EXPECT(0xd5, gbc.b());
        EXPECT(0xda, gbc.c());
        EXPECT(0xf8, gbc.d());
        EXPECT(0xf0, gbc.e());
        EXPECT(0x7b, gbc.h());
        EXPECT(0xa1, gbc.l());
        EXPECT(0xdd7b, gbc.sp());
        EXPECT(0x74f7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 02F6
        gbc.setState(0x3a9a, 0x2bae, 0x7ee0, 0x5139, 0xaa61, 0xe25e, 0x1, 0x1);
        gbc.writeMem(0x3a9a, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x7e, gbc.a());
        EXPECT(0x51, gbc.b());
        EXPECT(0x39, gbc.c());
        EXPECT(0xaa, gbc.d());
        EXPECT(0x61, gbc.e());
        EXPECT(0xe2, gbc.h());
        EXPECT(0x5e, gbc.l());
        EXPECT(0x2bae, gbc.sp());
        EXPECT(0x3a9c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 02F7
        gbc.setState(0x11f7, 0xf6d9, 0xa0, 0xc90a, 0xb1f7, 0xfd8b, 0x1, 0x1);
        gbc.writeMem(0x11f7, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xc9, gbc.b());
        EXPECT(0xa, gbc.c());
        EXPECT(0xb1, gbc.d());
        EXPECT(0xf7, gbc.e());
        EXPECT(0xfd, gbc.h());
        EXPECT(0x8b, gbc.l());
        EXPECT(0xf6d9, gbc.sp());
        EXPECT(0x11f9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 02F8
        gbc.setState(0x72c8, 0x263a, 0x16b0, 0x108f, 0xe583, 0x1013, 0x1, 0x1);
        gbc.writeMem(0x72c8, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x16, gbc.a());
        EXPECT(0x10, gbc.b());
        EXPECT(0x8f, gbc.c());
        EXPECT(0xe5, gbc.d());
        EXPECT(0x83, gbc.e());
        EXPECT(0x10, gbc.h());
        EXPECT(0x13, gbc.l());
        EXPECT(0x263a, gbc.sp());
        EXPECT(0x72ca, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 02F9
        gbc.setState(0x56e0, 0x5fdd, 0x81c0, 0x56d9, 0x80bd, 0xc8a9, 0x1, 0x0);
        gbc.writeMem(0x56e0, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x81, gbc.a());
        EXPECT(0x56, gbc.b());
        EXPECT(0xd9, gbc.c());
        EXPECT(0x80, gbc.d());
        EXPECT(0xbd, gbc.e());
        EXPECT(0xc8, gbc.h());
        EXPECT(0xa9, gbc.l());
        EXPECT(0x5fdd, gbc.sp());
        EXPECT(0x56e2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 02FA
        gbc.setState(0x43ae, 0x3ebe, 0xb9a0, 0x10a1, 0xf1a6, 0x85ba, 0x0, 0x0);
        gbc.writeMem(0x43ae, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xb9, gbc.a());
        EXPECT(0x10, gbc.b());
        EXPECT(0xa1, gbc.c());
        EXPECT(0xf1, gbc.d());
        EXPECT(0xa6, gbc.e());
        EXPECT(0x85, gbc.h());
        EXPECT(0xba, gbc.l());
        EXPECT(0x3ebe, gbc.sp());
        EXPECT(0x43b0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 02FB
        gbc.setState(0x2059, 0x8a34, 0x6880, 0xaa68, 0x98b5, 0xdc6a, 0x0, 0x1);
        gbc.writeMem(0x2059, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x68, gbc.a());
        EXPECT(0x8a, gbc.b());
        EXPECT(0x68, gbc.c());
        EXPECT(0x98, gbc.d());
        EXPECT(0xb5, gbc.e());
        EXPECT(0xdc, gbc.h());
        EXPECT(0x6a, gbc.l());
        EXPECT(0x8a34, gbc.sp());
        EXPECT(0x205b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 02FC
        gbc.setState(0x25e3, 0xb00c, 0xd00, 0xdbf8, 0x9981, 0x9674, 0x1, 0x1);
        gbc.writeMem(0x25e3, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xd, gbc.a());
        EXPECT(0xdb, gbc.b());
        EXPECT(0xf8, gbc.c());
        EXPECT(0x99, gbc.d());
        EXPECT(0x81, gbc.e());
        EXPECT(0x96, gbc.h());
        EXPECT(0x74, gbc.l());
        EXPECT(0xb00c, gbc.sp());
        EXPECT(0x25e5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 02FD
        gbc.setState(0x87e9, 0xc776, 0x7ee0, 0xccf4, 0x39c5, 0xc265, 0x1, 0x0);
        gbc.writeMem(0x87e9, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x7e, gbc.a());
        EXPECT(0xcc, gbc.b());
        EXPECT(0xf4, gbc.c());
        EXPECT(0x39, gbc.d());
        EXPECT(0xc5, gbc.e());
        EXPECT(0xc2, gbc.h());
        EXPECT(0x65, gbc.l());
        EXPECT(0xc776, gbc.sp());
        EXPECT(0x87eb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x87e9));
        EXPECT(0xa8, gbc.readMem(0x87ea));
        // CB A8 02FE
        gbc.setState(0x657a, 0x595, 0xa750, 0xd421, 0xd35c, 0xb92e, 0x0, 0x1);
        gbc.writeMem(0x657a, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xa7, gbc.a());
        EXPECT(0xd4, gbc.b());
        EXPECT(0x21, gbc.c());
        EXPECT(0xd3, gbc.d());
        EXPECT(0x5c, gbc.e());
        EXPECT(0xb9, gbc.h());
        EXPECT(0x2e, gbc.l());
        EXPECT(0x595, gbc.sp());
        EXPECT(0x657c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 02FF
        gbc.setState(0x7e5c, 0x7a5b, 0xfd80, 0x4013, 0x5e9c, 0x6b80, 0x0, 0x1);
        gbc.writeMem(0x7e5c, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xfd, gbc.a());
        EXPECT(0x40, gbc.b());
        EXPECT(0x13, gbc.c());
        EXPECT(0x5e, gbc.d());
        EXPECT(0x9c, gbc.e());
        EXPECT(0x6b, gbc.h());
        EXPECT(0x80, gbc.l());
        EXPECT(0x7a5b, gbc.sp());
        EXPECT(0x7e5e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 0300
        gbc.setState(0xe4aa, 0xa004, 0x5df0, 0x7558, 0xf9c7, 0x8026, 0x0, 0x1);
        gbc.writeMem(0xe4aa, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x5d, gbc.a());
        EXPECT(0x55, gbc.b());
        EXPECT(0x58, gbc.c());
        EXPECT(0xf9, gbc.d());
        EXPECT(0xc7, gbc.e());
        EXPECT(0x80, gbc.h());
        EXPECT(0x26, gbc.l());
        EXPECT(0xa004, gbc.sp());
        EXPECT(0xe4ac, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe4aa));
        EXPECT(0xa8, gbc.readMem(0xe4ab));
        // CB A8 0301
        gbc.setState(0x6af7, 0x78d9, 0x9970, 0x9de1, 0x3cd2, 0x7be1, 0x0, 0x0);
        gbc.writeMem(0x6af7, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x99, gbc.a());
        EXPECT(0x9d, gbc.b());
        EXPECT(0xe1, gbc.c());
        EXPECT(0x3c, gbc.d());
        EXPECT(0xd2, gbc.e());
        EXPECT(0x7b, gbc.h());
        EXPECT(0xe1, gbc.l());
        EXPECT(0x78d9, gbc.sp());
        EXPECT(0x6af9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 0302
        gbc.setState(0x9c88, 0xdcd2, 0x7ec0, 0xd7e7, 0x11d1, 0x2b58, 0x1, 0x1);
        gbc.writeMem(0x9c88, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x7e, gbc.a());
        EXPECT(0xd7, gbc.b());
        EXPECT(0xe7, gbc.c());
        EXPECT(0x11, gbc.d());
        EXPECT(0xd1, gbc.e());
        EXPECT(0x2b, gbc.h());
        EXPECT(0x58, gbc.l());
        EXPECT(0xdcd2, gbc.sp());
        EXPECT(0x9c8a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9c88));
        EXPECT(0xa8, gbc.readMem(0x9c89));
        // CB A8 0303
        gbc.setState(0x66af, 0x994d, 0xa4c0, 0xc4b4, 0x8a6a, 0x12f7, 0x1, 0x0);
        gbc.writeMem(0x66af, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xa4, gbc.a());
        EXPECT(0xc4, gbc.b());
        EXPECT(0xb4, gbc.c());
        EXPECT(0x8a, gbc.d());
        EXPECT(0x6a, gbc.e());
        EXPECT(0x12, gbc.h());
        EXPECT(0xf7, gbc.l());
        EXPECT(0x994d, gbc.sp());
        EXPECT(0x66b1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 0304
        gbc.setState(0xa18a, 0xfcf7, 0xee10, 0x8717, 0xb286, 0x521d, 0x1, 0x1);
        gbc.writeMem(0xa18a, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xee, gbc.a());
        EXPECT(0x87, gbc.b());
        EXPECT(0x17, gbc.c());
        EXPECT(0xb2, gbc.d());
        EXPECT(0x86, gbc.e());
        EXPECT(0x52, gbc.h());
        EXPECT(0x1d, gbc.l());
        EXPECT(0xfcf7, gbc.sp());
        EXPECT(0xa18c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa18a));
        EXPECT(0xa8, gbc.readMem(0xa18b));
        // CB A8 0305
        gbc.setState(0xcd18, 0x8926, 0x65a0, 0x7af2, 0xc8d8, 0x13c7, 0x1, 0x0);
        gbc.writeMem(0xcd18, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x65, gbc.a());
        EXPECT(0x5a, gbc.b());
        EXPECT(0xf2, gbc.c());
        EXPECT(0xc8, gbc.d());
        EXPECT(0xd8, gbc.e());
        EXPECT(0x13, gbc.h());
        EXPECT(0xc7, gbc.l());
        EXPECT(0x8926, gbc.sp());
        EXPECT(0xcd1a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcd18));
        EXPECT(0xa8, gbc.readMem(0xcd19));
        // CB A8 0306
        gbc.setState(0x1faf, 0xf38a, 0xadb0, 0xba24, 0x9ef2, 0x2e48, 0x0, 0x1);
        gbc.writeMem(0x1faf, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xad, gbc.a());
        EXPECT(0x9a, gbc.b());
        EXPECT(0x24, gbc.c());
        EXPECT(0x9e, gbc.d());
        EXPECT(0xf2, gbc.e());
        EXPECT(0x2e, gbc.h());
        EXPECT(0x48, gbc.l());
        EXPECT(0xf38a, gbc.sp());
        EXPECT(0x1fb1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 0307
        gbc.setState(0x6d07, 0x5f57, 0x4b90, 0x48b8, 0x69d6, 0x95c0, 0x0, 0x1);
        gbc.writeMem(0x6d07, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x4b, gbc.a());
        EXPECT(0x48, gbc.b());
        EXPECT(0xb8, gbc.c());
        EXPECT(0x69, gbc.d());
        EXPECT(0xd6, gbc.e());
        EXPECT(0x95, gbc.h());
        EXPECT(0xc0, gbc.l());
        EXPECT(0x5f57, gbc.sp());
        EXPECT(0x6d09, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 0308
        gbc.setState(0xd1ec, 0x4f18, 0x8660, 0x2dd8, 0x71c4, 0xa9d3, 0x0, 0x0);
        gbc.writeMem(0xd1ec, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x86, gbc.a());
        EXPECT(0xd, gbc.b());
        EXPECT(0xd8, gbc.c());
        EXPECT(0x71, gbc.d());
        EXPECT(0xc4, gbc.e());
        EXPECT(0xa9, gbc.h());
        EXPECT(0xd3, gbc.l());
        EXPECT(0x4f18, gbc.sp());
        EXPECT(0xd1ee, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd1ec));
        EXPECT(0xa8, gbc.readMem(0xd1ed));
        // CB A8 0309
        gbc.setState(0x22e2, 0xbe3d, 0xa830, 0x787, 0xfa1c, 0xa705, 0x1, 0x1);
        gbc.writeMem(0x22e2, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xa8, gbc.a());
        EXPECT(0x7, gbc.b());
        EXPECT(0x87, gbc.c());
        EXPECT(0xfa, gbc.d());
        EXPECT(0x1c, gbc.e());
        EXPECT(0xa7, gbc.h());
        EXPECT(0x5, gbc.l());
        EXPECT(0xbe3d, gbc.sp());
        EXPECT(0x22e4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 030A
        gbc.setState(0xb9d5, 0xe811, 0x200, 0x2b32, 0xb833, 0xec2b, 0x1, 0x1);
        gbc.writeMem(0xb9d5, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x2, gbc.a());
        EXPECT(0xb, gbc.b());
        EXPECT(0x32, gbc.c());
        EXPECT(0xb8, gbc.d());
        EXPECT(0x33, gbc.e());
        EXPECT(0xec, gbc.h());
        EXPECT(0x2b, gbc.l());
        EXPECT(0xe811, gbc.sp());
        EXPECT(0xb9d7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb9d5));
        EXPECT(0xa8, gbc.readMem(0xb9d6));
        // CB A8 030C
        gbc.setState(0x82b7, 0x56eb, 0x17a0, 0x3a5b, 0xaf66, 0xb2b9, 0x1, 0x0);
        gbc.writeMem(0x82b7, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x17, gbc.a());
        EXPECT(0x1a, gbc.b());
        EXPECT(0x5b, gbc.c());
        EXPECT(0xaf, gbc.d());
        EXPECT(0x66, gbc.e());
        EXPECT(0xb2, gbc.h());
        EXPECT(0xb9, gbc.l());
        EXPECT(0x56eb, gbc.sp());
        EXPECT(0x82b9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x82b7));
        EXPECT(0xa8, gbc.readMem(0x82b8));
        // CB A8 030D
        gbc.setState(0x5cb6, 0xe8dc, 0xbfc0, 0x25f8, 0x8dbb, 0x95a4, 0x0, 0x0);
        gbc.writeMem(0x5cb6, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xbf, gbc.a());
        EXPECT(0x5, gbc.b());
        EXPECT(0xf8, gbc.c());
        EXPECT(0x8d, gbc.d());
        EXPECT(0xbb, gbc.e());
        EXPECT(0x95, gbc.h());
        EXPECT(0xa4, gbc.l());
        EXPECT(0xe8dc, gbc.sp());
        EXPECT(0x5cb8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 030E
        gbc.setState(0xa9a4, 0x624e, 0x2ff0, 0xe721, 0xccd5, 0x2c53, 0x0, 0x1);
        gbc.writeMem(0xa9a4, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x2f, gbc.a());
        EXPECT(0xc7, gbc.b());
        EXPECT(0x21, gbc.c());
        EXPECT(0xcc, gbc.d());
        EXPECT(0xd5, gbc.e());
        EXPECT(0x2c, gbc.h());
        EXPECT(0x53, gbc.l());
        EXPECT(0x624e, gbc.sp());
        EXPECT(0xa9a6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa9a4));
        EXPECT(0xa8, gbc.readMem(0xa9a5));
        // CB A8 030F
        gbc.setState(0xa1ee, 0xf63a, 0xe2d0, 0xe1c0, 0x3653, 0x11db, 0x1, 0x0);
        gbc.writeMem(0xa1ee, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xe2, gbc.a());
        EXPECT(0xc1, gbc.b());
        EXPECT(0xc0, gbc.c());
        EXPECT(0x36, gbc.d());
        EXPECT(0x53, gbc.e());
        EXPECT(0x11, gbc.h());
        EXPECT(0xdb, gbc.l());
        EXPECT(0xf63a, gbc.sp());
        EXPECT(0xa1f0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa1ee));
        EXPECT(0xa8, gbc.readMem(0xa1ef));
        // CB A8 0310
        gbc.setState(0x2700, 0xdbb5, 0xbf60, 0x7223, 0xa8af, 0x5369, 0x1, 0x0);
        gbc.writeMem(0x2700, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xbf, gbc.a());
        EXPECT(0x52, gbc.b());
        EXPECT(0x23, gbc.c());
        EXPECT(0xa8, gbc.d());
        EXPECT(0xaf, gbc.e());
        EXPECT(0x53, gbc.h());
        EXPECT(0x69, gbc.l());
        EXPECT(0xdbb5, gbc.sp());
        EXPECT(0x2702, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 0311
        gbc.setState(0x60b7, 0xcb0e, 0x57d0, 0x758, 0x5045, 0x2ae2, 0x1, 0x1);
        gbc.writeMem(0x60b7, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x57, gbc.a());
        EXPECT(0x7, gbc.b());
        EXPECT(0x58, gbc.c());
        EXPECT(0x50, gbc.d());
        EXPECT(0x45, gbc.e());
        EXPECT(0x2a, gbc.h());
        EXPECT(0xe2, gbc.l());
        EXPECT(0xcb0e, gbc.sp());
        EXPECT(0x60b9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 0312
        gbc.setState(0x7490, 0x6031, 0x7c40, 0x9edd, 0x5c6d, 0x1c15, 0x0, 0x1);
        gbc.writeMem(0x7490, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x7c, gbc.a());
        EXPECT(0x9e, gbc.b());
        EXPECT(0xdd, gbc.c());
        EXPECT(0x5c, gbc.d());
        EXPECT(0x6d, gbc.e());
        EXPECT(0x1c, gbc.h());
        EXPECT(0x15, gbc.l());
        EXPECT(0x6031, gbc.sp());
        EXPECT(0x7492, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 0313
        gbc.setState(0x685c, 0xfd43, 0x47a0, 0xa125, 0xdb8c, 0x5925, 0x1, 0x0);
        gbc.writeMem(0x685c, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x47, gbc.a());
        EXPECT(0x81, gbc.b());
        EXPECT(0x25, gbc.c());
        EXPECT(0xdb, gbc.d());
        EXPECT(0x8c, gbc.e());
        EXPECT(0x59, gbc.h());
        EXPECT(0x25, gbc.l());
        EXPECT(0xfd43, gbc.sp());
        EXPECT(0x685e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 0314
        gbc.setState(0x9a94, 0x2314, 0x7d50, 0x73d0, 0x3a3a, 0x1e9, 0x0, 0x0);
        gbc.writeMem(0x9a94, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x7d, gbc.a());
        EXPECT(0x53, gbc.b());
        EXPECT(0xd0, gbc.c());
        EXPECT(0x3a, gbc.d());
        EXPECT(0x3a, gbc.e());
        EXPECT(0x1, gbc.h());
        EXPECT(0xe9, gbc.l());
        EXPECT(0x2314, gbc.sp());
        EXPECT(0x9a96, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9a94));
        EXPECT(0xa8, gbc.readMem(0x9a95));
        // CB A8 0315
        gbc.setState(0x1f95, 0xd0d7, 0xe0c0, 0x6569, 0x7a5a, 0x7e92, 0x0, 0x1);
        gbc.writeMem(0x1f95, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xe0, gbc.a());
        EXPECT(0x45, gbc.b());
        EXPECT(0x69, gbc.c());
        EXPECT(0x7a, gbc.d());
        EXPECT(0x5a, gbc.e());
        EXPECT(0x7e, gbc.h());
        EXPECT(0x92, gbc.l());
        EXPECT(0xd0d7, gbc.sp());
        EXPECT(0x1f97, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 0317
        gbc.setState(0x6249, 0x44f0, 0x7440, 0x5ef3, 0x17b3, 0x2f97, 0x0, 0x0);
        gbc.writeMem(0x6249, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x74, gbc.a());
        EXPECT(0x5e, gbc.b());
        EXPECT(0xf3, gbc.c());
        EXPECT(0x17, gbc.d());
        EXPECT(0xb3, gbc.e());
        EXPECT(0x2f, gbc.h());
        EXPECT(0x97, gbc.l());
        EXPECT(0x44f0, gbc.sp());
        EXPECT(0x624b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 0319
        gbc.setState(0xdb91, 0x7a18, 0x30, 0x258e, 0xa36f, 0x5bdb, 0x1, 0x0);
        gbc.writeMem(0xdb91, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x5, gbc.b());
        EXPECT(0x8e, gbc.c());
        EXPECT(0xa3, gbc.d());
        EXPECT(0x6f, gbc.e());
        EXPECT(0x5b, gbc.h());
        EXPECT(0xdb, gbc.l());
        EXPECT(0x7a18, gbc.sp());
        EXPECT(0xdb93, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdb91));
        EXPECT(0xa8, gbc.readMem(0xdb92));
        // CB A8 031A
        gbc.setState(0x2ebb, 0xff2e, 0x2ab0, 0x6f55, 0x400b, 0x1c1e, 0x0, 0x1);
        gbc.writeMem(0x2ebb, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x2a, gbc.a());
        EXPECT(0x4f, gbc.b());
        EXPECT(0x55, gbc.c());
        EXPECT(0x40, gbc.d());
        EXPECT(0xb, gbc.e());
        EXPECT(0x1c, gbc.h());
        EXPECT(0x1e, gbc.l());
        EXPECT(0xff2e, gbc.sp());
        EXPECT(0x2ebd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 031B
        gbc.setState(0x69e9, 0xef9a, 0x3be0, 0x83eb, 0xfc02, 0xa3d7, 0x0, 0x1);
        gbc.writeMem(0x69e9, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x3b, gbc.a());
        EXPECT(0x83, gbc.b());
        EXPECT(0xeb, gbc.c());
        EXPECT(0xfc, gbc.d());
        EXPECT(0x2, gbc.e());
        EXPECT(0xa3, gbc.h());
        EXPECT(0xd7, gbc.l());
        EXPECT(0xef9a, gbc.sp());
        EXPECT(0x69eb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 031C
        gbc.setState(0x36e3, 0x2424, 0x170, 0x413a, 0xe650, 0x6950, 0x0, 0x1);
        gbc.writeMem(0x36e3, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x1, gbc.a());
        EXPECT(0x41, gbc.b());
        EXPECT(0x3a, gbc.c());
        EXPECT(0xe6, gbc.d());
        EXPECT(0x50, gbc.e());
        EXPECT(0x69, gbc.h());
        EXPECT(0x50, gbc.l());
        EXPECT(0x2424, gbc.sp());
        EXPECT(0x36e5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 031D
        gbc.setState(0x3792, 0x5f10, 0xdd50, 0x2605, 0x2081, 0x55bf, 0x1, 0x1);
        gbc.writeMem(0x3792, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xdd, gbc.a());
        EXPECT(0x6, gbc.b());
        EXPECT(0x5, gbc.c());
        EXPECT(0x20, gbc.d());
        EXPECT(0x81, gbc.e());
        EXPECT(0x55, gbc.h());
        EXPECT(0xbf, gbc.l());
        EXPECT(0x5f10, gbc.sp());
        EXPECT(0x3794, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 031E
        gbc.setState(0xb2cd, 0x71ff, 0xea70, 0xe541, 0xa7cf, 0x76e7, 0x1, 0x1);
        gbc.writeMem(0xb2cd, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xea, gbc.a());
        EXPECT(0xc5, gbc.b());
        EXPECT(0x41, gbc.c());
        EXPECT(0xa7, gbc.d());
        EXPECT(0xcf, gbc.e());
        EXPECT(0x76, gbc.h());
        EXPECT(0xe7, gbc.l());
        EXPECT(0x71ff, gbc.sp());
        EXPECT(0xb2cf, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb2cd));
        EXPECT(0xa8, gbc.readMem(0xb2ce));
        // CB A8 031F
        gbc.setState(0xe2a9, 0x25f2, 0x40f0, 0xc74b, 0xbec3, 0x24e, 0x0, 0x0);
        gbc.writeMem(0xe2a9, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x40, gbc.a());
        EXPECT(0xc7, gbc.b());
        EXPECT(0x4b, gbc.c());
        EXPECT(0xbe, gbc.d());
        EXPECT(0xc3, gbc.e());
        EXPECT(0x2, gbc.h());
        EXPECT(0x4e, gbc.l());
        EXPECT(0x25f2, gbc.sp());
        EXPECT(0xe2ab, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe2a9));
        EXPECT(0xa8, gbc.readMem(0xe2aa));
        // CB A8 0320
        gbc.setState(0x31e8, 0x4fff, 0xe3b0, 0x9f68, 0xfd2c, 0x7d5f, 0x1, 0x0);
        gbc.writeMem(0x31e8, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xe3, gbc.a());
        EXPECT(0x9f, gbc.b());
        EXPECT(0x68, gbc.c());
        EXPECT(0xfd, gbc.d());
        EXPECT(0x2c, gbc.e());
        EXPECT(0x7d, gbc.h());
        EXPECT(0x5f, gbc.l());
        EXPECT(0x4fff, gbc.sp());
        EXPECT(0x31ea, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 0321
        gbc.setState(0x7223, 0x4c7b, 0x3630, 0x33a8, 0x66c4, 0xf151, 0x1, 0x1);
        gbc.writeMem(0x7223, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x36, gbc.a());
        EXPECT(0x13, gbc.b());
        EXPECT(0xa8, gbc.c());
        EXPECT(0x66, gbc.d());
        EXPECT(0xc4, gbc.e());
        EXPECT(0xf1, gbc.h());
        EXPECT(0x51, gbc.l());
        EXPECT(0x4c7b, gbc.sp());
        EXPECT(0x7225, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 0322
        gbc.setState(0x9df4, 0x6107, 0xc9b0, 0xa840, 0xe55, 0xde5d, 0x1, 0x1);
        gbc.writeMem(0x9df4, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xc9, gbc.a());
        EXPECT(0x88, gbc.b());
        EXPECT(0x40, gbc.c());
        EXPECT(0xe, gbc.d());
        EXPECT(0x55, gbc.e());
        EXPECT(0xde, gbc.h());
        EXPECT(0x5d, gbc.l());
        EXPECT(0x6107, gbc.sp());
        EXPECT(0x9df6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9df4));
        EXPECT(0xa8, gbc.readMem(0x9df5));
        // CB A8 0323
        gbc.setState(0x8753, 0xd401, 0x5cb0, 0x8eaa, 0x4dc3, 0x5930, 0x1, 0x0);
        gbc.writeMem(0x8753, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x5c, gbc.a());
        EXPECT(0x8e, gbc.b());
        EXPECT(0xaa, gbc.c());
        EXPECT(0x4d, gbc.d());
        EXPECT(0xc3, gbc.e());
        EXPECT(0x59, gbc.h());
        EXPECT(0x30, gbc.l());
        EXPECT(0xd401, gbc.sp());
        EXPECT(0x8755, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8753));
        EXPECT(0xa8, gbc.readMem(0x8754));
        // CB A8 0324
        gbc.setState(0x567e, 0xd631, 0x6000, 0x1c01, 0xcec4, 0xcb81, 0x1, 0x1);
        gbc.writeMem(0x567e, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x60, gbc.a());
        EXPECT(0x1c, gbc.b());
        EXPECT(0x1, gbc.c());
        EXPECT(0xce, gbc.d());
        EXPECT(0xc4, gbc.e());
        EXPECT(0xcb, gbc.h());
        EXPECT(0x81, gbc.l());
        EXPECT(0xd631, gbc.sp());
        EXPECT(0x5680, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 0325
        gbc.setState(0x9d9d, 0xb219, 0x56e0, 0xf218, 0x7c7a, 0x1615, 0x0, 0x0);
        gbc.writeMem(0x9d9d, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x56, gbc.a());
        EXPECT(0xd2, gbc.b());
        EXPECT(0x18, gbc.c());
        EXPECT(0x7c, gbc.d());
        EXPECT(0x7a, gbc.e());
        EXPECT(0x16, gbc.h());
        EXPECT(0x15, gbc.l());
        EXPECT(0xb219, gbc.sp());
        EXPECT(0x9d9f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9d9d));
        EXPECT(0xa8, gbc.readMem(0x9d9e));
        // CB A8 0326
        gbc.setState(0xcde7, 0xb205, 0xfe00, 0x9e49, 0xe9be, 0xd128, 0x0, 0x0);
        gbc.writeMem(0xcde7, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xfe, gbc.a());
        EXPECT(0x9e, gbc.b());
        EXPECT(0x49, gbc.c());
        EXPECT(0xe9, gbc.d());
        EXPECT(0xbe, gbc.e());
        EXPECT(0xd1, gbc.h());
        EXPECT(0x28, gbc.l());
        EXPECT(0xb205, gbc.sp());
        EXPECT(0xcde9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcde7));
        EXPECT(0xa8, gbc.readMem(0xcde8));
        // CB A8 0327
        gbc.setState(0x9c24, 0xe54b, 0xe590, 0xc0f1, 0x447a, 0x3023, 0x0, 0x0);
        gbc.writeMem(0x9c24, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xe5, gbc.a());
        EXPECT(0xc0, gbc.b());
        EXPECT(0xf1, gbc.c());
        EXPECT(0x44, gbc.d());
        EXPECT(0x7a, gbc.e());
        EXPECT(0x30, gbc.h());
        EXPECT(0x23, gbc.l());
        EXPECT(0xe54b, gbc.sp());
        EXPECT(0x9c26, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9c24));
        EXPECT(0xa8, gbc.readMem(0x9c25));
        // CB A8 0328
        gbc.setState(0x1d7a, 0x1c11, 0xc1e0, 0x4b8c, 0x3f3b, 0x58c8, 0x0, 0x0);
        gbc.writeMem(0x1d7a, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xc1, gbc.a());
        EXPECT(0x4b, gbc.b());
        EXPECT(0x8c, gbc.c());
        EXPECT(0x3f, gbc.d());
        EXPECT(0x3b, gbc.e());
        EXPECT(0x58, gbc.h());
        EXPECT(0xc8, gbc.l());
        EXPECT(0x1c11, gbc.sp());
        EXPECT(0x1d7c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 0329
        gbc.setState(0x6a50, 0x2a15, 0x6b60, 0xef63, 0xcb7e, 0xb33d, 0x0, 0x0);
        gbc.writeMem(0x6a50, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x6b, gbc.a());
        EXPECT(0xcf, gbc.b());
        EXPECT(0x63, gbc.c());
        EXPECT(0xcb, gbc.d());
        EXPECT(0x7e, gbc.e());
        EXPECT(0xb3, gbc.h());
        EXPECT(0x3d, gbc.l());
        EXPECT(0x2a15, gbc.sp());
        EXPECT(0x6a52, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 032A
        gbc.setState(0x6c48, 0x61cd, 0x1f30, 0x8084, 0xf7f1, 0xd8de, 0x1, 0x1);
        gbc.writeMem(0x6c48, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x1f, gbc.a());
        EXPECT(0x80, gbc.b());
        EXPECT(0x84, gbc.c());
        EXPECT(0xf7, gbc.d());
        EXPECT(0xf1, gbc.e());
        EXPECT(0xd8, gbc.h());
        EXPECT(0xde, gbc.l());
        EXPECT(0x61cd, gbc.sp());
        EXPECT(0x6c4a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 032B
        gbc.setState(0x11b6, 0xc2f4, 0xc980, 0x6540, 0xa82a, 0x5b17, 0x1, 0x1);
        gbc.writeMem(0x11b6, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xc9, gbc.a());
        EXPECT(0x45, gbc.b());
        EXPECT(0x40, gbc.c());
        EXPECT(0xa8, gbc.d());
        EXPECT(0x2a, gbc.e());
        EXPECT(0x5b, gbc.h());
        EXPECT(0x17, gbc.l());
        EXPECT(0xc2f4, gbc.sp());
        EXPECT(0x11b8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 032C
        gbc.setState(0x5a6, 0x6a35, 0x48d0, 0xf28d, 0x17bc, 0x7d7c, 0x0, 0x1);
        gbc.writeMem(0x5a6, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x48, gbc.a());
        EXPECT(0xd2, gbc.b());
        EXPECT(0x8d, gbc.c());
        EXPECT(0x17, gbc.d());
        EXPECT(0xbc, gbc.e());
        EXPECT(0x7d, gbc.h());
        EXPECT(0x7c, gbc.l());
        EXPECT(0x6a35, gbc.sp());
        EXPECT(0x5a8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 032E
        gbc.setState(0x1249, 0xb7c5, 0xb180, 0xe427, 0xafb3, 0x8192, 0x1, 0x0);
        gbc.writeMem(0x1249, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xb1, gbc.a());
        EXPECT(0xc4, gbc.b());
        EXPECT(0x27, gbc.c());
        EXPECT(0xaf, gbc.d());
        EXPECT(0xb3, gbc.e());
        EXPECT(0x81, gbc.h());
        EXPECT(0x92, gbc.l());
        EXPECT(0xb7c5, gbc.sp());
        EXPECT(0x124b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 032F
        gbc.setState(0xb9b3, 0xe0b, 0x4650, 0xe217, 0x4002, 0x4878, 0x0, 0x1);
        gbc.writeMem(0xb9b3, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x46, gbc.a());
        EXPECT(0xc2, gbc.b());
        EXPECT(0x17, gbc.c());
        EXPECT(0x40, gbc.d());
        EXPECT(0x2, gbc.e());
        EXPECT(0x48, gbc.h());
        EXPECT(0x78, gbc.l());
        EXPECT(0xe0b, gbc.sp());
        EXPECT(0xb9b5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb9b3));
        EXPECT(0xa8, gbc.readMem(0xb9b4));
        // CB A8 0330
        gbc.setState(0xbd73, 0xfad8, 0xb700, 0xc682, 0x2307, 0x4a4b, 0x0, 0x1);
        gbc.writeMem(0xbd73, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xb7, gbc.a());
        EXPECT(0xc6, gbc.b());
        EXPECT(0x82, gbc.c());
        EXPECT(0x23, gbc.d());
        EXPECT(0x7, gbc.e());
        EXPECT(0x4a, gbc.h());
        EXPECT(0x4b, gbc.l());
        EXPECT(0xfad8, gbc.sp());
        EXPECT(0xbd75, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbd73));
        EXPECT(0xa8, gbc.readMem(0xbd74));
        // CB A8 0331
        gbc.setState(0xee10, 0x3de6, 0xd0e0, 0xda90, 0x41af, 0x6d5c, 0x0, 0x1);
        gbc.writeMem(0xee10, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xd0, gbc.a());
        EXPECT(0xda, gbc.b());
        EXPECT(0x90, gbc.c());
        EXPECT(0x41, gbc.d());
        EXPECT(0xaf, gbc.e());
        EXPECT(0x6d, gbc.h());
        EXPECT(0x5c, gbc.l());
        EXPECT(0x3de6, gbc.sp());
        EXPECT(0xee12, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xee10));
        EXPECT(0xa8, gbc.readMem(0xee11));
        // CB A8 0332
        gbc.setState(0x9d9d, 0x5604, 0x73f0, 0xafc5, 0xe6ff, 0xaa3f, 0x1, 0x0);
        gbc.writeMem(0x9d9d, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x73, gbc.a());
        EXPECT(0x8f, gbc.b());
        EXPECT(0xc5, gbc.c());
        EXPECT(0xe6, gbc.d());
        EXPECT(0xff, gbc.e());
        EXPECT(0xaa, gbc.h());
        EXPECT(0x3f, gbc.l());
        EXPECT(0x5604, gbc.sp());
        EXPECT(0x9d9f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9d9d));
        EXPECT(0xa8, gbc.readMem(0x9d9e));
        // CB A8 0333
        gbc.setState(0xbbba, 0x3705, 0xed0, 0xebd1, 0x665c, 0xf550, 0x0, 0x1);
        gbc.writeMem(0xbbba, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xe, gbc.a());
        EXPECT(0xcb, gbc.b());
        EXPECT(0xd1, gbc.c());
        EXPECT(0x66, gbc.d());
        EXPECT(0x5c, gbc.e());
        EXPECT(0xf5, gbc.h());
        EXPECT(0x50, gbc.l());
        EXPECT(0x3705, gbc.sp());
        EXPECT(0xbbbc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbbba));
        EXPECT(0xa8, gbc.readMem(0xbbbb));
        // CB A8 0334
        gbc.setState(0x8ea7, 0xd8fa, 0x4290, 0xc9c3, 0x7325, 0xe9a3, 0x0, 0x0);
        gbc.writeMem(0x8ea7, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x42, gbc.a());
        EXPECT(0xc9, gbc.b());
        EXPECT(0xc3, gbc.c());
        EXPECT(0x73, gbc.d());
        EXPECT(0x25, gbc.e());
        EXPECT(0xe9, gbc.h());
        EXPECT(0xa3, gbc.l());
        EXPECT(0xd8fa, gbc.sp());
        EXPECT(0x8ea9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8ea7));
        EXPECT(0xa8, gbc.readMem(0x8ea8));
        // CB A8 0335
        gbc.setState(0xba90, 0x689d, 0x6740, 0x4d9c, 0x71bb, 0x938a, 0x1, 0x0);
        gbc.writeMem(0xba90, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x67, gbc.a());
        EXPECT(0x4d, gbc.b());
        EXPECT(0x9c, gbc.c());
        EXPECT(0x71, gbc.d());
        EXPECT(0xbb, gbc.e());
        EXPECT(0x93, gbc.h());
        EXPECT(0x8a, gbc.l());
        EXPECT(0x689d, gbc.sp());
        EXPECT(0xba92, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xba90));
        EXPECT(0xa8, gbc.readMem(0xba91));
        // CB A8 0336
        gbc.setState(0x9c7c, 0xcc42, 0x3e30, 0x5350, 0xbfdb, 0xb46b, 0x0, 0x1);
        gbc.writeMem(0x9c7c, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x3e, gbc.a());
        EXPECT(0x53, gbc.b());
        EXPECT(0x50, gbc.c());
        EXPECT(0xbf, gbc.d());
        EXPECT(0xdb, gbc.e());
        EXPECT(0xb4, gbc.h());
        EXPECT(0x6b, gbc.l());
        EXPECT(0xcc42, gbc.sp());
        EXPECT(0x9c7e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9c7c));
        EXPECT(0xa8, gbc.readMem(0x9c7d));
        // CB A8 0337
        gbc.setState(0x1ce3, 0x494b, 0xc2f0, 0x785c, 0x7e02, 0x8519, 0x0, 0x1);
        gbc.writeMem(0x1ce3, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xc2, gbc.a());
        EXPECT(0x58, gbc.b());
        EXPECT(0x5c, gbc.c());
        EXPECT(0x7e, gbc.d());
        EXPECT(0x2, gbc.e());
        EXPECT(0x85, gbc.h());
        EXPECT(0x19, gbc.l());
        EXPECT(0x494b, gbc.sp());
        EXPECT(0x1ce5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 0338
        gbc.setState(0xe531, 0x3b54, 0x1360, 0xf958, 0x4ba2, 0x801, 0x0, 0x1);
        gbc.writeMem(0xe531, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x13, gbc.a());
        EXPECT(0xd9, gbc.b());
        EXPECT(0x58, gbc.c());
        EXPECT(0x4b, gbc.d());
        EXPECT(0xa2, gbc.e());
        EXPECT(0x8, gbc.h());
        EXPECT(0x1, gbc.l());
        EXPECT(0x3b54, gbc.sp());
        EXPECT(0xe533, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe531));
        EXPECT(0xa8, gbc.readMem(0xe532));
        // CB A8 0339
        gbc.setState(0xed2f, 0x5c9b, 0x4970, 0x1c02, 0x691c, 0xa84f, 0x0, 0x0);
        gbc.writeMem(0xed2f, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x49, gbc.a());
        EXPECT(0x1c, gbc.b());
        EXPECT(0x2, gbc.c());
        EXPECT(0x69, gbc.d());
        EXPECT(0x1c, gbc.e());
        EXPECT(0xa8, gbc.h());
        EXPECT(0x4f, gbc.l());
        EXPECT(0x5c9b, gbc.sp());
        EXPECT(0xed31, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xed2f));
        EXPECT(0xa8, gbc.readMem(0xed30));
        // CB A8 033A
        gbc.setState(0xd6d3, 0x7a79, 0xa360, 0x24b5, 0xc38e, 0x419, 0x0, 0x1);
        gbc.writeMem(0xd6d3, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xa3, gbc.a());
        EXPECT(0x4, gbc.b());
        EXPECT(0xb5, gbc.c());
        EXPECT(0xc3, gbc.d());
        EXPECT(0x8e, gbc.e());
        EXPECT(0x4, gbc.h());
        EXPECT(0x19, gbc.l());
        EXPECT(0x7a79, gbc.sp());
        EXPECT(0xd6d5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd6d3));
        EXPECT(0xa8, gbc.readMem(0xd6d4));
        // CB A8 033B
        gbc.setState(0xd972, 0x7731, 0x10e0, 0xfc0d, 0x4236, 0x1527, 0x1, 0x0);
        gbc.writeMem(0xd972, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x10, gbc.a());
        EXPECT(0xdc, gbc.b());
        EXPECT(0xd, gbc.c());
        EXPECT(0x42, gbc.d());
        EXPECT(0x36, gbc.e());
        EXPECT(0x15, gbc.h());
        EXPECT(0x27, gbc.l());
        EXPECT(0x7731, gbc.sp());
        EXPECT(0xd974, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd972));
        EXPECT(0xa8, gbc.readMem(0xd973));
        // CB A8 033C
        gbc.setState(0x1716, 0xc8b9, 0xa050, 0xf8f5, 0x41f0, 0x2bb8, 0x1, 0x0);
        gbc.writeMem(0x1716, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xa0, gbc.a());
        EXPECT(0xd8, gbc.b());
        EXPECT(0xf5, gbc.c());
        EXPECT(0x41, gbc.d());
        EXPECT(0xf0, gbc.e());
        EXPECT(0x2b, gbc.h());
        EXPECT(0xb8, gbc.l());
        EXPECT(0xc8b9, gbc.sp());
        EXPECT(0x1718, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 033D
        gbc.setState(0x34ac, 0x63ad, 0x3720, 0x4efd, 0x64b3, 0x72cf, 0x1, 0x1);
        gbc.writeMem(0x34ac, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x37, gbc.a());
        EXPECT(0x4e, gbc.b());
        EXPECT(0xfd, gbc.c());
        EXPECT(0x64, gbc.d());
        EXPECT(0xb3, gbc.e());
        EXPECT(0x72, gbc.h());
        EXPECT(0xcf, gbc.l());
        EXPECT(0x63ad, gbc.sp());
        EXPECT(0x34ae, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 033E
        gbc.setState(0x3394, 0x12af, 0x1c70, 0x7be6, 0xb00e, 0xe165, 0x0, 0x1);
        gbc.writeMem(0x3394, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x1c, gbc.a());
        EXPECT(0x5b, gbc.b());
        EXPECT(0xe6, gbc.c());
        EXPECT(0xb0, gbc.d());
        EXPECT(0xe, gbc.e());
        EXPECT(0xe1, gbc.h());
        EXPECT(0x65, gbc.l());
        EXPECT(0x12af, gbc.sp());
        EXPECT(0x3396, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 033F
        gbc.setState(0xb4a4, 0x28eb, 0xba0, 0x2787, 0xf200, 0xa26a, 0x1, 0x0);
        gbc.writeMem(0xb4a4, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xb, gbc.a());
        EXPECT(0x7, gbc.b());
        EXPECT(0x87, gbc.c());
        EXPECT(0xf2, gbc.d());
        EXPECT(0x0, gbc.e());
        EXPECT(0xa2, gbc.h());
        EXPECT(0x6a, gbc.l());
        EXPECT(0x28eb, gbc.sp());
        EXPECT(0xb4a6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb4a4));
        EXPECT(0xa8, gbc.readMem(0xb4a5));
        // CB A8 0340
        gbc.setState(0x1dc, 0x50af, 0xce40, 0x4387, 0xa137, 0xca19, 0x0, 0x1);
        gbc.writeMem(0x1dc, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xce, gbc.a());
        EXPECT(0x43, gbc.b());
        EXPECT(0x87, gbc.c());
        EXPECT(0xa1, gbc.d());
        EXPECT(0x37, gbc.e());
        EXPECT(0xca, gbc.h());
        EXPECT(0x19, gbc.l());
        EXPECT(0x50af, gbc.sp());
        EXPECT(0x1de, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 0341
        gbc.setState(0x1257, 0xf1ba, 0x72f0, 0x12e5, 0xb8a4, 0x70b4, 0x0, 0x1);
        gbc.writeMem(0x1257, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x72, gbc.a());
        EXPECT(0x12, gbc.b());
        EXPECT(0xe5, gbc.c());
        EXPECT(0xb8, gbc.d());
        EXPECT(0xa4, gbc.e());
        EXPECT(0x70, gbc.h());
        EXPECT(0xb4, gbc.l());
        EXPECT(0xf1ba, gbc.sp());
        EXPECT(0x1259, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 0342
        gbc.setState(0x5503, 0x25a6, 0x7b30, 0x39c2, 0x372, 0xa6ae, 0x0, 0x1);
        gbc.writeMem(0x5503, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x7b, gbc.a());
        EXPECT(0x19, gbc.b());
        EXPECT(0xc2, gbc.c());
        EXPECT(0x3, gbc.d());
        EXPECT(0x72, gbc.e());
        EXPECT(0xa6, gbc.h());
        EXPECT(0xae, gbc.l());
        EXPECT(0x25a6, gbc.sp());
        EXPECT(0x5505, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 0343
        gbc.setState(0x9516, 0x30d5, 0xafd0, 0x6e95, 0xb97f, 0x5b32, 0x1, 0x1);
        gbc.writeMem(0x9516, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xaf, gbc.a());
        EXPECT(0x4e, gbc.b());
        EXPECT(0x95, gbc.c());
        EXPECT(0xb9, gbc.d());
        EXPECT(0x7f, gbc.e());
        EXPECT(0x5b, gbc.h());
        EXPECT(0x32, gbc.l());
        EXPECT(0x30d5, gbc.sp());
        EXPECT(0x9518, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9516));
        EXPECT(0xa8, gbc.readMem(0x9517));
        // CB A8 0344
        gbc.setState(0xcfa1, 0xbc74, 0x6e50, 0x4f71, 0x6c1d, 0xdcb2, 0x1, 0x1);
        gbc.writeMem(0xcfa1, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x6e, gbc.a());
        EXPECT(0x4f, gbc.b());
        EXPECT(0x71, gbc.c());
        EXPECT(0x6c, gbc.d());
        EXPECT(0x1d, gbc.e());
        EXPECT(0xdc, gbc.h());
        EXPECT(0xb2, gbc.l());
        EXPECT(0xbc74, gbc.sp());
        EXPECT(0xcfa3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcfa1));
        EXPECT(0xa8, gbc.readMem(0xcfa2));
        // CB A8 0345
        gbc.setState(0x5d68, 0x1b64, 0x8f70, 0x5cb, 0x472, 0x8c, 0x1, 0x1);
        gbc.writeMem(0x5d68, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x8f, gbc.a());
        EXPECT(0x5, gbc.b());
        EXPECT(0xcb, gbc.c());
        EXPECT(0x4, gbc.d());
        EXPECT(0x72, gbc.e());
        EXPECT(0x0, gbc.h());
        EXPECT(0x8c, gbc.l());
        EXPECT(0x1b64, gbc.sp());
        EXPECT(0x5d6a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 0346
        gbc.setState(0xf14, 0x5471, 0xb8a0, 0x1b86, 0xbd1a, 0x2cde, 0x0, 0x1);
        gbc.writeMem(0xf14, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xb8, gbc.a());
        EXPECT(0x1b, gbc.b());
        EXPECT(0x86, gbc.c());
        EXPECT(0xbd, gbc.d());
        EXPECT(0x1a, gbc.e());
        EXPECT(0x2c, gbc.h());
        EXPECT(0xde, gbc.l());
        EXPECT(0x5471, gbc.sp());
        EXPECT(0xf16, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 0347
        gbc.setState(0x1d94, 0xb3f, 0x19a0, 0x8346, 0xfcaf, 0x1c31, 0x1, 0x1);
        gbc.writeMem(0x1d94, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x19, gbc.a());
        EXPECT(0x83, gbc.b());
        EXPECT(0x46, gbc.c());
        EXPECT(0xfc, gbc.d());
        EXPECT(0xaf, gbc.e());
        EXPECT(0x1c, gbc.h());
        EXPECT(0x31, gbc.l());
        EXPECT(0xb3f, gbc.sp());
        EXPECT(0x1d96, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 0348
        gbc.setState(0x28cd, 0x7621, 0x95f0, 0x7a77, 0xeab, 0x72eb, 0x0, 0x0);
        gbc.writeMem(0x28cd, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x95, gbc.a());
        EXPECT(0x5a, gbc.b());
        EXPECT(0x77, gbc.c());
        EXPECT(0xe, gbc.d());
        EXPECT(0xab, gbc.e());
        EXPECT(0x72, gbc.h());
        EXPECT(0xeb, gbc.l());
        EXPECT(0x7621, gbc.sp());
        EXPECT(0x28cf, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 0349
        gbc.setState(0x76fb, 0x7f85, 0x6270, 0x88b, 0x1a4c, 0x6cc0, 0x1, 0x0);
        gbc.writeMem(0x76fb, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x62, gbc.a());
        EXPECT(0x8, gbc.b());
        EXPECT(0x8b, gbc.c());
        EXPECT(0x1a, gbc.d());
        EXPECT(0x4c, gbc.e());
        EXPECT(0x6c, gbc.h());
        EXPECT(0xc0, gbc.l());
        EXPECT(0x7f85, gbc.sp());
        EXPECT(0x76fd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 034A
        gbc.setState(0x8e85, 0x5d45, 0xee10, 0xa841, 0xe84, 0x5dad, 0x1, 0x1);
        gbc.writeMem(0x8e85, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xee, gbc.a());
        EXPECT(0x88, gbc.b());
        EXPECT(0x41, gbc.c());
        EXPECT(0xe, gbc.d());
        EXPECT(0x84, gbc.e());
        EXPECT(0x5d, gbc.h());
        EXPECT(0xad, gbc.l());
        EXPECT(0x5d45, gbc.sp());
        EXPECT(0x8e87, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8e85));
        EXPECT(0xa8, gbc.readMem(0x8e86));
        // CB A8 034B
        gbc.setState(0x273e, 0xe0fe, 0x9550, 0xf465, 0x9029, 0x64ee, 0x0, 0x0);
        gbc.writeMem(0x273e, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x95, gbc.a());
        EXPECT(0xd4, gbc.b());
        EXPECT(0x65, gbc.c());
        EXPECT(0x90, gbc.d());
        EXPECT(0x29, gbc.e());
        EXPECT(0x64, gbc.h());
        EXPECT(0xee, gbc.l());
        EXPECT(0xe0fe, gbc.sp());
        EXPECT(0x2740, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 034C
        gbc.setState(0x2add, 0xeb7e, 0xac0, 0x1ffd, 0xc695, 0x3939, 0x1, 0x0);
        gbc.writeMem(0x2add, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xa, gbc.a());
        EXPECT(0x1f, gbc.b());
        EXPECT(0xfd, gbc.c());
        EXPECT(0xc6, gbc.d());
        EXPECT(0x95, gbc.e());
        EXPECT(0x39, gbc.h());
        EXPECT(0x39, gbc.l());
        EXPECT(0xeb7e, gbc.sp());
        EXPECT(0x2adf, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 034D
        gbc.setState(0x322c, 0x3b01, 0x8c70, 0x52d4, 0x66c7, 0xe949, 0x0, 0x1);
        gbc.writeMem(0x322c, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x8c, gbc.a());
        EXPECT(0x52, gbc.b());
        EXPECT(0xd4, gbc.c());
        EXPECT(0x66, gbc.d());
        EXPECT(0xc7, gbc.e());
        EXPECT(0xe9, gbc.h());
        EXPECT(0x49, gbc.l());
        EXPECT(0x3b01, gbc.sp());
        EXPECT(0x322e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 034E
        gbc.setState(0x9dc5, 0x5f5d, 0x29b0, 0xf0b6, 0x1409, 0xef6d, 0x0, 0x1);
        gbc.writeMem(0x9dc5, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x29, gbc.a());
        EXPECT(0xd0, gbc.b());
        EXPECT(0xb6, gbc.c());
        EXPECT(0x14, gbc.d());
        EXPECT(0x9, gbc.e());
        EXPECT(0xef, gbc.h());
        EXPECT(0x6d, gbc.l());
        EXPECT(0x5f5d, gbc.sp());
        EXPECT(0x9dc7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9dc5));
        EXPECT(0xa8, gbc.readMem(0x9dc6));
        // CB A8 034F
        gbc.setState(0x79c8, 0xe559, 0x5e10, 0x472d, 0x7768, 0x9a8, 0x0, 0x1);
        gbc.writeMem(0x79c8, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x5e, gbc.a());
        EXPECT(0x47, gbc.b());
        EXPECT(0x2d, gbc.c());
        EXPECT(0x77, gbc.d());
        EXPECT(0x68, gbc.e());
        EXPECT(0x9, gbc.h());
        EXPECT(0xa8, gbc.l());
        EXPECT(0xe559, gbc.sp());
        EXPECT(0x79ca, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 0350
        gbc.setState(0xe651, 0x7bc8, 0xd3e0, 0x3795, 0xc1f5, 0xbb31, 0x0, 0x0);
        gbc.writeMem(0xe651, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xd3, gbc.a());
        EXPECT(0x17, gbc.b());
        EXPECT(0x95, gbc.c());
        EXPECT(0xc1, gbc.d());
        EXPECT(0xf5, gbc.e());
        EXPECT(0xbb, gbc.h());
        EXPECT(0x31, gbc.l());
        EXPECT(0x7bc8, gbc.sp());
        EXPECT(0xe653, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe651));
        EXPECT(0xa8, gbc.readMem(0xe652));
        // CB A8 0351
        gbc.setState(0xa8e1, 0xc4f6, 0x78e0, 0x765, 0x6f3d, 0x9391, 0x1, 0x0);
        gbc.writeMem(0xa8e1, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x78, gbc.a());
        EXPECT(0x7, gbc.b());
        EXPECT(0x65, gbc.c());
        EXPECT(0x6f, gbc.d());
        EXPECT(0x3d, gbc.e());
        EXPECT(0x93, gbc.h());
        EXPECT(0x91, gbc.l());
        EXPECT(0xc4f6, gbc.sp());
        EXPECT(0xa8e3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa8e1));
        EXPECT(0xa8, gbc.readMem(0xa8e2));
        // CB A8 0352
        gbc.setState(0x2c54, 0x908a, 0x2830, 0xdee5, 0xc0ac, 0xfb8e, 0x1, 0x0);
        gbc.writeMem(0x2c54, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x28, gbc.a());
        EXPECT(0xde, gbc.b());
        EXPECT(0xe5, gbc.c());
        EXPECT(0xc0, gbc.d());
        EXPECT(0xac, gbc.e());
        EXPECT(0xfb, gbc.h());
        EXPECT(0x8e, gbc.l());
        EXPECT(0x908a, gbc.sp());
        EXPECT(0x2c56, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 0353
        gbc.setState(0x204b, 0xaa68, 0x6370, 0xdb12, 0x8d04, 0x6595, 0x0, 0x0);
        gbc.writeMem(0x204b, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x63, gbc.a());
        EXPECT(0xdb, gbc.b());
        EXPECT(0x12, gbc.c());
        EXPECT(0x8d, gbc.d());
        EXPECT(0x4, gbc.e());
        EXPECT(0x65, gbc.h());
        EXPECT(0x95, gbc.l());
        EXPECT(0xaa68, gbc.sp());
        EXPECT(0x204d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 0354
        gbc.setState(0xad69, 0xb37, 0xea10, 0xa896, 0x1f57, 0xa5fb, 0x1, 0x1);
        gbc.writeMem(0xad69, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xea, gbc.a());
        EXPECT(0x88, gbc.b());
        EXPECT(0x96, gbc.c());
        EXPECT(0x1f, gbc.d());
        EXPECT(0x57, gbc.e());
        EXPECT(0xa5, gbc.h());
        EXPECT(0xfb, gbc.l());
        EXPECT(0xb37, gbc.sp());
        EXPECT(0xad6b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xad69));
        EXPECT(0xa8, gbc.readMem(0xad6a));
        // CB A8 0355
        gbc.setState(0x3520, 0x63a7, 0x6f30, 0x4b5b, 0xa45d, 0x3bf, 0x0, 0x1);
        gbc.writeMem(0x3520, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x6f, gbc.a());
        EXPECT(0x4b, gbc.b());
        EXPECT(0x5b, gbc.c());
        EXPECT(0xa4, gbc.d());
        EXPECT(0x5d, gbc.e());
        EXPECT(0x3, gbc.h());
        EXPECT(0xbf, gbc.l());
        EXPECT(0x63a7, gbc.sp());
        EXPECT(0x3522, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 0356
        gbc.setState(0x1b29, 0x480b, 0xf1b0, 0xa28e, 0x39d4, 0xeb70, 0x1, 0x1);
        gbc.writeMem(0x1b29, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xf1, gbc.a());
        EXPECT(0x82, gbc.b());
        EXPECT(0x8e, gbc.c());
        EXPECT(0x39, gbc.d());
        EXPECT(0xd4, gbc.e());
        EXPECT(0xeb, gbc.h());
        EXPECT(0x70, gbc.l());
        EXPECT(0x480b, gbc.sp());
        EXPECT(0x1b2b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 0357
        gbc.setState(0x49d5, 0x2826, 0x6420, 0xf08d, 0xc3a8, 0xb18a, 0x0, 0x1);
        gbc.writeMem(0x49d5, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x64, gbc.a());
        EXPECT(0xd0, gbc.b());
        EXPECT(0x8d, gbc.c());
        EXPECT(0xc3, gbc.d());
        EXPECT(0xa8, gbc.e());
        EXPECT(0xb1, gbc.h());
        EXPECT(0x8a, gbc.l());
        EXPECT(0x2826, gbc.sp());
        EXPECT(0x49d7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 0358
        gbc.setState(0x8410, 0x9ba3, 0x9310, 0x7a18, 0x5b66, 0xd385, 0x1, 0x0);
        gbc.writeMem(0x8410, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x93, gbc.a());
        EXPECT(0x5a, gbc.b());
        EXPECT(0x18, gbc.c());
        EXPECT(0x5b, gbc.d());
        EXPECT(0x66, gbc.e());
        EXPECT(0xd3, gbc.h());
        EXPECT(0x85, gbc.l());
        EXPECT(0x9ba3, gbc.sp());
        EXPECT(0x8412, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8410));
        EXPECT(0xa8, gbc.readMem(0x8411));
        // CB A8 0359
        gbc.setState(0xd99a, 0x9218, 0xd550, 0xa5a, 0x3203, 0xbc6, 0x1, 0x1);
        gbc.writeMem(0xd99a, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xd5, gbc.a());
        EXPECT(0xa, gbc.b());
        EXPECT(0x5a, gbc.c());
        EXPECT(0x32, gbc.d());
        EXPECT(0x3, gbc.e());
        EXPECT(0xb, gbc.h());
        EXPECT(0xc6, gbc.l());
        EXPECT(0x9218, gbc.sp());
        EXPECT(0xd99c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd99a));
        EXPECT(0xa8, gbc.readMem(0xd99b));
        // CB A8 035A
        gbc.setState(0x1cae, 0xacb1, 0x6930, 0xf09f, 0x530, 0xb682, 0x0, 0x0);
        gbc.writeMem(0x1cae, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x69, gbc.a());
        EXPECT(0xd0, gbc.b());
        EXPECT(0x9f, gbc.c());
        EXPECT(0x5, gbc.d());
        EXPECT(0x30, gbc.e());
        EXPECT(0xb6, gbc.h());
        EXPECT(0x82, gbc.l());
        EXPECT(0xacb1, gbc.sp());
        EXPECT(0x1cb0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 035B
        gbc.setState(0x37a2, 0xfd3d, 0x8b0, 0x5173, 0x3d58, 0xad1a, 0x1, 0x0);
        gbc.writeMem(0x37a2, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x8, gbc.a());
        EXPECT(0x51, gbc.b());
        EXPECT(0x73, gbc.c());
        EXPECT(0x3d, gbc.d());
        EXPECT(0x58, gbc.e());
        EXPECT(0xad, gbc.h());
        EXPECT(0x1a, gbc.l());
        EXPECT(0xfd3d, gbc.sp());
        EXPECT(0x37a4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 035C
        gbc.setState(0x2309, 0x51b3, 0x14d0, 0x3907, 0x4b7c, 0x8e9d, 0x0, 0x1);
        gbc.writeMem(0x2309, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x14, gbc.a());
        EXPECT(0x19, gbc.b());
        EXPECT(0x7, gbc.c());
        EXPECT(0x4b, gbc.d());
        EXPECT(0x7c, gbc.e());
        EXPECT(0x8e, gbc.h());
        EXPECT(0x9d, gbc.l());
        EXPECT(0x51b3, gbc.sp());
        EXPECT(0x230b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 035D
        gbc.setState(0x6015, 0x1c9c, 0x10f0, 0x7b9b, 0x429e, 0x82ec, 0x1, 0x1);
        gbc.writeMem(0x6015, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x10, gbc.a());
        EXPECT(0x5b, gbc.b());
        EXPECT(0x9b, gbc.c());
        EXPECT(0x42, gbc.d());
        EXPECT(0x9e, gbc.e());
        EXPECT(0x82, gbc.h());
        EXPECT(0xec, gbc.l());
        EXPECT(0x1c9c, gbc.sp());
        EXPECT(0x6017, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 035E
        gbc.setState(0x14b0, 0x620c, 0xe330, 0x50bf, 0xdd67, 0xa211, 0x0, 0x1);
        gbc.writeMem(0x14b0, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xe3, gbc.a());
        EXPECT(0x50, gbc.b());
        EXPECT(0xbf, gbc.c());
        EXPECT(0xdd, gbc.d());
        EXPECT(0x67, gbc.e());
        EXPECT(0xa2, gbc.h());
        EXPECT(0x11, gbc.l());
        EXPECT(0x620c, gbc.sp());
        EXPECT(0x14b2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 035F
        gbc.setState(0x64f3, 0xe8a3, 0x4ec0, 0xab2d, 0x5132, 0x18bd, 0x0, 0x1);
        gbc.writeMem(0x64f3, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x4e, gbc.a());
        EXPECT(0x8b, gbc.b());
        EXPECT(0x2d, gbc.c());
        EXPECT(0x51, gbc.d());
        EXPECT(0x32, gbc.e());
        EXPECT(0x18, gbc.h());
        EXPECT(0xbd, gbc.l());
        EXPECT(0xe8a3, gbc.sp());
        EXPECT(0x64f5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 0360
        gbc.setState(0xef49, 0x638c, 0x73a0, 0x10a8, 0x9f25, 0xe77, 0x1, 0x0);
        gbc.writeMem(0xef49, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x73, gbc.a());
        EXPECT(0x10, gbc.b());
        EXPECT(0xa8, gbc.c());
        EXPECT(0x9f, gbc.d());
        EXPECT(0x25, gbc.e());
        EXPECT(0xe, gbc.h());
        EXPECT(0x77, gbc.l());
        EXPECT(0x638c, gbc.sp());
        EXPECT(0xef4b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xef49));
        EXPECT(0xa8, gbc.readMem(0xef4a));
        // CB A8 0361
        gbc.setState(0x7fcf, 0xdde0, 0x760, 0x57db, 0x7a3, 0x57cd, 0x1, 0x1);
        gbc.writeMem(0x7fcf, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x7, gbc.a());
        EXPECT(0x57, gbc.b());
        EXPECT(0xdb, gbc.c());
        EXPECT(0x7, gbc.d());
        EXPECT(0xa3, gbc.e());
        EXPECT(0x57, gbc.h());
        EXPECT(0xcd, gbc.l());
        EXPECT(0xdde0, gbc.sp());
        EXPECT(0x7fd1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 0362
        gbc.setState(0x12cd, 0x9a61, 0x8e80, 0x3c89, 0x55c6, 0xf21a, 0x0, 0x0);
        gbc.writeMem(0x12cd, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x8e, gbc.a());
        EXPECT(0x1c, gbc.b());
        EXPECT(0x89, gbc.c());
        EXPECT(0x55, gbc.d());
        EXPECT(0xc6, gbc.e());
        EXPECT(0xf2, gbc.h());
        EXPECT(0x1a, gbc.l());
        EXPECT(0x9a61, gbc.sp());
        EXPECT(0x12cf, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 0363
        gbc.setState(0x82d, 0x4ecc, 0xdbc0, 0xf7f7, 0x6776, 0xbe6b, 0x0, 0x1);
        gbc.writeMem(0x82d, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xdb, gbc.a());
        EXPECT(0xd7, gbc.b());
        EXPECT(0xf7, gbc.c());
        EXPECT(0x67, gbc.d());
        EXPECT(0x76, gbc.e());
        EXPECT(0xbe, gbc.h());
        EXPECT(0x6b, gbc.l());
        EXPECT(0x4ecc, gbc.sp());
        EXPECT(0x82f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 0364
        gbc.setState(0x1c63, 0x32b9, 0x6270, 0xc98a, 0xaa28, 0xd053, 0x1, 0x0);
        gbc.writeMem(0x1c63, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x62, gbc.a());
        EXPECT(0xc9, gbc.b());
        EXPECT(0x8a, gbc.c());
        EXPECT(0xaa, gbc.d());
        EXPECT(0x28, gbc.e());
        EXPECT(0xd0, gbc.h());
        EXPECT(0x53, gbc.l());
        EXPECT(0x32b9, gbc.sp());
        EXPECT(0x1c65, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 0365
        gbc.setState(0x29fb, 0xe430, 0x3a30, 0x1194, 0x5043, 0xfb3b, 0x1, 0x1);
        gbc.writeMem(0x29fb, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x3a, gbc.a());
        EXPECT(0x11, gbc.b());
        EXPECT(0x94, gbc.c());
        EXPECT(0x50, gbc.d());
        EXPECT(0x43, gbc.e());
        EXPECT(0xfb, gbc.h());
        EXPECT(0x3b, gbc.l());
        EXPECT(0xe430, gbc.sp());
        EXPECT(0x29fd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 0366
        gbc.setState(0xe21c, 0xbf14, 0x76c0, 0xa125, 0x2389, 0x3ecc, 0x1, 0x1);
        gbc.writeMem(0xe21c, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x76, gbc.a());
        EXPECT(0x81, gbc.b());
        EXPECT(0x25, gbc.c());
        EXPECT(0x23, gbc.d());
        EXPECT(0x89, gbc.e());
        EXPECT(0x3e, gbc.h());
        EXPECT(0xcc, gbc.l());
        EXPECT(0xbf14, gbc.sp());
        EXPECT(0xe21e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe21c));
        EXPECT(0xa8, gbc.readMem(0xe21d));
        // CB A8 0367
        gbc.setState(0x4f71, 0x7083, 0x8f40, 0xfa23, 0x718e, 0x2e46, 0x1, 0x0);
        gbc.writeMem(0x4f71, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x8f, gbc.a());
        EXPECT(0xda, gbc.b());
        EXPECT(0x23, gbc.c());
        EXPECT(0x71, gbc.d());
        EXPECT(0x8e, gbc.e());
        EXPECT(0x2e, gbc.h());
        EXPECT(0x46, gbc.l());
        EXPECT(0x7083, gbc.sp());
        EXPECT(0x4f73, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 0368
        gbc.setState(0x1d5e, 0x7ee8, 0xfcb0, 0xae4c, 0xb8b2, 0xce61, 0x1, 0x1);
        gbc.writeMem(0x1d5e, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xfc, gbc.a());
        EXPECT(0x8e, gbc.b());
        EXPECT(0x4c, gbc.c());
        EXPECT(0xb8, gbc.d());
        EXPECT(0xb2, gbc.e());
        EXPECT(0xce, gbc.h());
        EXPECT(0x61, gbc.l());
        EXPECT(0x7ee8, gbc.sp());
        EXPECT(0x1d60, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 0369
        gbc.setState(0x3f62, 0xb97d, 0x9380, 0x33b7, 0x3e01, 0x15a, 0x0, 0x0);
        gbc.writeMem(0x3f62, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x93, gbc.a());
        EXPECT(0x13, gbc.b());
        EXPECT(0xb7, gbc.c());
        EXPECT(0x3e, gbc.d());
        EXPECT(0x1, gbc.e());
        EXPECT(0x1, gbc.h());
        EXPECT(0x5a, gbc.l());
        EXPECT(0xb97d, gbc.sp());
        EXPECT(0x3f64, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 036A
        gbc.setState(0xd599, 0x413a, 0x2570, 0x1585, 0x4bc, 0x6d0, 0x0, 0x0);
        gbc.writeMem(0xd599, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x25, gbc.a());
        EXPECT(0x15, gbc.b());
        EXPECT(0x85, gbc.c());
        EXPECT(0x4, gbc.d());
        EXPECT(0xbc, gbc.e());
        EXPECT(0x6, gbc.h());
        EXPECT(0xd0, gbc.l());
        EXPECT(0x413a, gbc.sp());
        EXPECT(0xd59b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd599));
        EXPECT(0xa8, gbc.readMem(0xd59a));
        // CB A8 036B
        gbc.setState(0xb7e1, 0x4748, 0x9010, 0xeaed, 0x84f5, 0x8f4f, 0x0, 0x1);
        gbc.writeMem(0xb7e1, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x90, gbc.a());
        EXPECT(0xca, gbc.b());
        EXPECT(0xed, gbc.c());
        EXPECT(0x84, gbc.d());
        EXPECT(0xf5, gbc.e());
        EXPECT(0x8f, gbc.h());
        EXPECT(0x4f, gbc.l());
        EXPECT(0x4748, gbc.sp());
        EXPECT(0xb7e3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb7e1));
        EXPECT(0xa8, gbc.readMem(0xb7e2));
        // CB A8 036C
        gbc.setState(0xa89e, 0xf172, 0x49d0, 0xa6bb, 0xea47, 0x4f12, 0x0, 0x0);
        gbc.writeMem(0xa89e, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x49, gbc.a());
        EXPECT(0x86, gbc.b());
        EXPECT(0xbb, gbc.c());
        EXPECT(0xea, gbc.d());
        EXPECT(0x47, gbc.e());
        EXPECT(0x4f, gbc.h());
        EXPECT(0x12, gbc.l());
        EXPECT(0xf172, gbc.sp());
        EXPECT(0xa8a0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa89e));
        EXPECT(0xa8, gbc.readMem(0xa89f));
        // CB A8 036D
        gbc.setState(0xc217, 0x5e14, 0x42d0, 0x627c, 0xaae7, 0x623c, 0x1, 0x0);
        gbc.writeMem(0xc217, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x42, gbc.a());
        EXPECT(0x42, gbc.b());
        EXPECT(0x7c, gbc.c());
        EXPECT(0xaa, gbc.d());
        EXPECT(0xe7, gbc.e());
        EXPECT(0x62, gbc.h());
        EXPECT(0x3c, gbc.l());
        EXPECT(0x5e14, gbc.sp());
        EXPECT(0xc219, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc217));
        EXPECT(0xa8, gbc.readMem(0xc218));
        // CB A8 036E
        gbc.setState(0x30b5, 0xe6d6, 0x72d0, 0xf24, 0xcce8, 0x90ac, 0x1, 0x1);
        gbc.writeMem(0x30b5, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x72, gbc.a());
        EXPECT(0xf, gbc.b());
        EXPECT(0x24, gbc.c());
        EXPECT(0xcc, gbc.d());
        EXPECT(0xe8, gbc.e());
        EXPECT(0x90, gbc.h());
        EXPECT(0xac, gbc.l());
        EXPECT(0xe6d6, gbc.sp());
        EXPECT(0x30b7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 036F
        gbc.setState(0x5603, 0xd19c, 0x16c0, 0x1553, 0x92b5, 0xece9, 0x0, 0x0);
        gbc.writeMem(0x5603, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x16, gbc.a());
        EXPECT(0x15, gbc.b());
        EXPECT(0x53, gbc.c());
        EXPECT(0x92, gbc.d());
        EXPECT(0xb5, gbc.e());
        EXPECT(0xec, gbc.h());
        EXPECT(0xe9, gbc.l());
        EXPECT(0xd19c, gbc.sp());
        EXPECT(0x5605, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 0370
        gbc.setState(0x18b5, 0xa517, 0xfce0, 0xcfd2, 0xf877, 0x52a9, 0x0, 0x0);
        gbc.writeMem(0x18b5, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xfc, gbc.a());
        EXPECT(0xcf, gbc.b());
        EXPECT(0xd2, gbc.c());
        EXPECT(0xf8, gbc.d());
        EXPECT(0x77, gbc.e());
        EXPECT(0x52, gbc.h());
        EXPECT(0xa9, gbc.l());
        EXPECT(0xa517, gbc.sp());
        EXPECT(0x18b7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 0372
        gbc.setState(0x1eb, 0x3f96, 0x9e00, 0x374c, 0x5bcc, 0xe852, 0x0, 0x1);
        gbc.writeMem(0x1eb, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x9e, gbc.a());
        EXPECT(0x17, gbc.b());
        EXPECT(0x4c, gbc.c());
        EXPECT(0x5b, gbc.d());
        EXPECT(0xcc, gbc.e());
        EXPECT(0xe8, gbc.h());
        EXPECT(0x52, gbc.l());
        EXPECT(0x3f96, gbc.sp());
        EXPECT(0x1ed, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 0373
        gbc.setState(0x3802, 0xbcc5, 0x89a0, 0xa3, 0xe980, 0xdd3e, 0x1, 0x0);
        gbc.writeMem(0x3802, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x89, gbc.a());
        EXPECT(0x0, gbc.b());
        EXPECT(0xa3, gbc.c());
        EXPECT(0xe9, gbc.d());
        EXPECT(0x80, gbc.e());
        EXPECT(0xdd, gbc.h());
        EXPECT(0x3e, gbc.l());
        EXPECT(0xbcc5, gbc.sp());
        EXPECT(0x3804, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 0375
        gbc.setState(0x91cb, 0x5430, 0xa30, 0xa16d, 0x7a3c, 0xbfae, 0x1, 0x0);
        gbc.writeMem(0x91cb, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xa, gbc.a());
        EXPECT(0x81, gbc.b());
        EXPECT(0x6d, gbc.c());
        EXPECT(0x7a, gbc.d());
        EXPECT(0x3c, gbc.e());
        EXPECT(0xbf, gbc.h());
        EXPECT(0xae, gbc.l());
        EXPECT(0x5430, gbc.sp());
        EXPECT(0x91cd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x91cb));
        EXPECT(0xa8, gbc.readMem(0x91cc));
        // CB A8 0376
        gbc.setState(0x88f, 0xa7a9, 0x9dd0, 0xf084, 0x3e0a, 0xaefe, 0x0, 0x1);
        gbc.writeMem(0x88f, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x9d, gbc.a());
        EXPECT(0xd0, gbc.b());
        EXPECT(0x84, gbc.c());
        EXPECT(0x3e, gbc.d());
        EXPECT(0xa, gbc.e());
        EXPECT(0xae, gbc.h());
        EXPECT(0xfe, gbc.l());
        EXPECT(0xa7a9, gbc.sp());
        EXPECT(0x891, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 0377
        gbc.setState(0x9e54, 0x7c17, 0x4aa0, 0x250e, 0x2c8f, 0x4af1, 0x1, 0x0);
        gbc.writeMem(0x9e54, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x4a, gbc.a());
        EXPECT(0x5, gbc.b());
        EXPECT(0xe, gbc.c());
        EXPECT(0x2c, gbc.d());
        EXPECT(0x8f, gbc.e());
        EXPECT(0x4a, gbc.h());
        EXPECT(0xf1, gbc.l());
        EXPECT(0x7c17, gbc.sp());
        EXPECT(0x9e56, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9e54));
        EXPECT(0xa8, gbc.readMem(0x9e55));
        // CB A8 0378
        gbc.setState(0xf44, 0x2963, 0x57f0, 0xc550, 0x1700, 0x265c, 0x0, 0x1);
        gbc.writeMem(0xf44, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x57, gbc.a());
        EXPECT(0xc5, gbc.b());
        EXPECT(0x50, gbc.c());
        EXPECT(0x17, gbc.d());
        EXPECT(0x0, gbc.e());
        EXPECT(0x26, gbc.h());
        EXPECT(0x5c, gbc.l());
        EXPECT(0x2963, gbc.sp());
        EXPECT(0xf46, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 0379
        gbc.setState(0xc56, 0x2b94, 0xa670, 0xc295, 0x802e, 0x3681, 0x1, 0x0);
        gbc.writeMem(0xc56, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xa6, gbc.a());
        EXPECT(0xc2, gbc.b());
        EXPECT(0x95, gbc.c());
        EXPECT(0x80, gbc.d());
        EXPECT(0x2e, gbc.e());
        EXPECT(0x36, gbc.h());
        EXPECT(0x81, gbc.l());
        EXPECT(0x2b94, gbc.sp());
        EXPECT(0xc58, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 037A
        gbc.setState(0x8f6c, 0xac31, 0x79a0, 0xb5c5, 0x7d0d, 0x6913, 0x1, 0x0);
        gbc.writeMem(0x8f6c, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x79, gbc.a());
        EXPECT(0x95, gbc.b());
        EXPECT(0xc5, gbc.c());
        EXPECT(0x7d, gbc.d());
        EXPECT(0xd, gbc.e());
        EXPECT(0x69, gbc.h());
        EXPECT(0x13, gbc.l());
        EXPECT(0xac31, gbc.sp());
        EXPECT(0x8f6e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8f6c));
        EXPECT(0xa8, gbc.readMem(0x8f6d));
        // CB A8 037B
        gbc.setState(0x802e, 0xc190, 0xf120, 0x2683, 0xf908, 0x3577, 0x1, 0x1);
        gbc.writeMem(0x802e, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xf1, gbc.a());
        EXPECT(0x6, gbc.b());
        EXPECT(0x83, gbc.c());
        EXPECT(0xf9, gbc.d());
        EXPECT(0x8, gbc.e());
        EXPECT(0x35, gbc.h());
        EXPECT(0x77, gbc.l());
        EXPECT(0xc190, gbc.sp());
        EXPECT(0x8030, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x802e));
        EXPECT(0xa8, gbc.readMem(0x802f));
        // CB A8 037D
        gbc.setState(0x375, 0xad29, 0xf30, 0x5bd3, 0x4df9, 0x1961, 0x0, 0x0);
        gbc.writeMem(0x375, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xf, gbc.a());
        EXPECT(0x5b, gbc.b());
        EXPECT(0xd3, gbc.c());
        EXPECT(0x4d, gbc.d());
        EXPECT(0xf9, gbc.e());
        EXPECT(0x19, gbc.h());
        EXPECT(0x61, gbc.l());
        EXPECT(0xad29, gbc.sp());
        EXPECT(0x377, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 037E
        gbc.setState(0x500e, 0xe8bf, 0x3440, 0xc5df, 0x2e27, 0x6aa6, 0x1, 0x0);
        gbc.writeMem(0x500e, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x34, gbc.a());
        EXPECT(0xc5, gbc.b());
        EXPECT(0xdf, gbc.c());
        EXPECT(0x2e, gbc.d());
        EXPECT(0x27, gbc.e());
        EXPECT(0x6a, gbc.h());
        EXPECT(0xa6, gbc.l());
        EXPECT(0xe8bf, gbc.sp());
        EXPECT(0x5010, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 037F
        gbc.setState(0x13e8, 0xac37, 0x3c70, 0x40f1, 0x6c3d, 0xf85f, 0x1, 0x1);
        gbc.writeMem(0x13e8, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x3c, gbc.a());
        EXPECT(0x40, gbc.b());
        EXPECT(0xf1, gbc.c());
        EXPECT(0x6c, gbc.d());
        EXPECT(0x3d, gbc.e());
        EXPECT(0xf8, gbc.h());
        EXPECT(0x5f, gbc.l());
        EXPECT(0xac37, gbc.sp());
        EXPECT(0x13ea, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 0380
        gbc.setState(0x5b7e, 0xb591, 0x3b30, 0x8448, 0xa33b, 0x855c, 0x1, 0x1);
        gbc.writeMem(0x5b7e, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x3b, gbc.a());
        EXPECT(0x84, gbc.b());
        EXPECT(0x48, gbc.c());
        EXPECT(0xa3, gbc.d());
        EXPECT(0x3b, gbc.e());
        EXPECT(0x85, gbc.h());
        EXPECT(0x5c, gbc.l());
        EXPECT(0xb591, gbc.sp());
        EXPECT(0x5b80, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 0381
        gbc.setState(0x99aa, 0x6f32, 0xbfe0, 0xc7, 0xfb, 0x59a, 0x1, 0x0);
        gbc.writeMem(0x99aa, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xbf, gbc.a());
        EXPECT(0x0, gbc.b());
        EXPECT(0xc7, gbc.c());
        EXPECT(0x0, gbc.d());
        EXPECT(0xfb, gbc.e());
        EXPECT(0x5, gbc.h());
        EXPECT(0x9a, gbc.l());
        EXPECT(0x6f32, gbc.sp());
        EXPECT(0x99ac, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x99aa));
        EXPECT(0xa8, gbc.readMem(0x99ab));
        // CB A8 0382
        gbc.setState(0x269a, 0x5181, 0xe470, 0x83b8, 0xb1a, 0xcb0, 0x0, 0x1);
        gbc.writeMem(0x269a, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xe4, gbc.a());
        EXPECT(0x83, gbc.b());
        EXPECT(0xb8, gbc.c());
        EXPECT(0xb, gbc.d());
        EXPECT(0x1a, gbc.e());
        EXPECT(0xc, gbc.h());
        EXPECT(0xb0, gbc.l());
        EXPECT(0x5181, gbc.sp());
        EXPECT(0x269c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 0383
        gbc.setState(0x4578, 0x7543, 0x59b0, 0xe7af, 0x8afe, 0x5d0d, 0x0, 0x0);
        gbc.writeMem(0x4578, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x59, gbc.a());
        EXPECT(0xc7, gbc.b());
        EXPECT(0xaf, gbc.c());
        EXPECT(0x8a, gbc.d());
        EXPECT(0xfe, gbc.e());
        EXPECT(0x5d, gbc.h());
        EXPECT(0xd, gbc.l());
        EXPECT(0x7543, gbc.sp());
        EXPECT(0x457a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 0384
        gbc.setState(0x7cf9, 0x458d, 0xd680, 0x816c, 0x589a, 0xacbc, 0x1, 0x1);
        gbc.writeMem(0x7cf9, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xd6, gbc.a());
        EXPECT(0x81, gbc.b());
        EXPECT(0x6c, gbc.c());
        EXPECT(0x58, gbc.d());
        EXPECT(0x9a, gbc.e());
        EXPECT(0xac, gbc.h());
        EXPECT(0xbc, gbc.l());
        EXPECT(0x458d, gbc.sp());
        EXPECT(0x7cfb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 0385
        gbc.setState(0x2a0b, 0x4f58, 0xaf90, 0x96c5, 0x65e1, 0xfc48, 0x1, 0x1);
        gbc.writeMem(0x2a0b, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xaf, gbc.a());
        EXPECT(0x96, gbc.b());
        EXPECT(0xc5, gbc.c());
        EXPECT(0x65, gbc.d());
        EXPECT(0xe1, gbc.e());
        EXPECT(0xfc, gbc.h());
        EXPECT(0x48, gbc.l());
        EXPECT(0x4f58, gbc.sp());
        EXPECT(0x2a0d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 0386
        gbc.setState(0x20cf, 0x335f, 0xf5c0, 0xfd5f, 0x9027, 0x49f0, 0x0, 0x1);
        gbc.writeMem(0x20cf, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xf5, gbc.a());
        EXPECT(0xdd, gbc.b());
        EXPECT(0x5f, gbc.c());
        EXPECT(0x90, gbc.d());
        EXPECT(0x27, gbc.e());
        EXPECT(0x49, gbc.h());
        EXPECT(0xf0, gbc.l());
        EXPECT(0x335f, gbc.sp());
        EXPECT(0x20d1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 0387
        gbc.setState(0xec62, 0xf025, 0x96c0, 0xb6, 0x85c, 0x80a7, 0x0, 0x0);
        gbc.writeMem(0xec62, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x96, gbc.a());
        EXPECT(0x0, gbc.b());
        EXPECT(0xb6, gbc.c());
        EXPECT(0x8, gbc.d());
        EXPECT(0x5c, gbc.e());
        EXPECT(0x80, gbc.h());
        EXPECT(0xa7, gbc.l());
        EXPECT(0xf025, gbc.sp());
        EXPECT(0xec64, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xec62));
        EXPECT(0xa8, gbc.readMem(0xec63));
        // CB A8 0388
        gbc.setState(0x9ad, 0x6c0b, 0xc590, 0x53a5, 0xa835, 0xfc85, 0x1, 0x1);
        gbc.writeMem(0x9ad, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xc5, gbc.a());
        EXPECT(0x53, gbc.b());
        EXPECT(0xa5, gbc.c());
        EXPECT(0xa8, gbc.d());
        EXPECT(0x35, gbc.e());
        EXPECT(0xfc, gbc.h());
        EXPECT(0x85, gbc.l());
        EXPECT(0x6c0b, gbc.sp());
        EXPECT(0x9af, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 0389
        gbc.setState(0x43ef, 0x63db, 0x6570, 0x14fd, 0xd781, 0x1cc5, 0x1, 0x1);
        gbc.writeMem(0x43ef, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x65, gbc.a());
        EXPECT(0x14, gbc.b());
        EXPECT(0xfd, gbc.c());
        EXPECT(0xd7, gbc.d());
        EXPECT(0x81, gbc.e());
        EXPECT(0x1c, gbc.h());
        EXPECT(0xc5, gbc.l());
        EXPECT(0x63db, gbc.sp());
        EXPECT(0x43f1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 038A
        gbc.setState(0xc07d, 0xa690, 0x730, 0x7827, 0xb8c9, 0x1fad, 0x1, 0x0);
        gbc.writeMem(0xc07d, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x7, gbc.a());
        EXPECT(0x58, gbc.b());
        EXPECT(0x27, gbc.c());
        EXPECT(0xb8, gbc.d());
        EXPECT(0xc9, gbc.e());
        EXPECT(0x1f, gbc.h());
        EXPECT(0xad, gbc.l());
        EXPECT(0xa690, gbc.sp());
        EXPECT(0xc07f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc07d));
        EXPECT(0xa8, gbc.readMem(0xc07e));
        // CB A8 038B
        gbc.setState(0x4594, 0xdfdd, 0xf4a0, 0x83b4, 0x7084, 0xc30a, 0x0, 0x1);
        gbc.writeMem(0x4594, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xf4, gbc.a());
        EXPECT(0x83, gbc.b());
        EXPECT(0xb4, gbc.c());
        EXPECT(0x70, gbc.d());
        EXPECT(0x84, gbc.e());
        EXPECT(0xc3, gbc.h());
        EXPECT(0xa, gbc.l());
        EXPECT(0xdfdd, gbc.sp());
        EXPECT(0x4596, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 038C
        gbc.setState(0xe60a, 0x33ae, 0xf940, 0x309a, 0xf510, 0x28a5, 0x1, 0x1);
        gbc.writeMem(0xe60a, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xf9, gbc.a());
        EXPECT(0x10, gbc.b());
        EXPECT(0x9a, gbc.c());
        EXPECT(0xf5, gbc.d());
        EXPECT(0x10, gbc.e());
        EXPECT(0x28, gbc.h());
        EXPECT(0xa5, gbc.l());
        EXPECT(0x33ae, gbc.sp());
        EXPECT(0xe60c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe60a));
        EXPECT(0xa8, gbc.readMem(0xe60b));
        // CB A8 038D
        gbc.setState(0xccc8, 0xdd3e, 0x6760, 0xf1c, 0xb034, 0x55a9, 0x0, 0x1);
        gbc.writeMem(0xccc8, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x67, gbc.a());
        EXPECT(0xf, gbc.b());
        EXPECT(0x1c, gbc.c());
        EXPECT(0xb0, gbc.d());
        EXPECT(0x34, gbc.e());
        EXPECT(0x55, gbc.h());
        EXPECT(0xa9, gbc.l());
        EXPECT(0xdd3e, gbc.sp());
        EXPECT(0xccca, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xccc8));
        EXPECT(0xa8, gbc.readMem(0xccc9));
        // CB A8 038E
        gbc.setState(0x491c, 0x4248, 0x9ff0, 0xcac6, 0x1222, 0x6892, 0x1, 0x1);
        gbc.writeMem(0x491c, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x9f, gbc.a());
        EXPECT(0xca, gbc.b());
        EXPECT(0xc6, gbc.c());
        EXPECT(0x12, gbc.d());
        EXPECT(0x22, gbc.e());
        EXPECT(0x68, gbc.h());
        EXPECT(0x92, gbc.l());
        EXPECT(0x4248, gbc.sp());
        EXPECT(0x491e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 038F
        gbc.setState(0x40fb, 0x51ad, 0xfc90, 0xfac2, 0xca2e, 0x5c58, 0x0, 0x1);
        gbc.writeMem(0x40fb, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xfc, gbc.a());
        EXPECT(0xda, gbc.b());
        EXPECT(0xc2, gbc.c());
        EXPECT(0xca, gbc.d());
        EXPECT(0x2e, gbc.e());
        EXPECT(0x5c, gbc.h());
        EXPECT(0x58, gbc.l());
        EXPECT(0x51ad, gbc.sp());
        EXPECT(0x40fd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 0390
        gbc.setState(0x4058, 0x107a, 0x7740, 0xbfad, 0x5fb8, 0x7756, 0x1, 0x1);
        gbc.writeMem(0x4058, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x77, gbc.a());
        EXPECT(0x9f, gbc.b());
        EXPECT(0xad, gbc.c());
        EXPECT(0x5f, gbc.d());
        EXPECT(0xb8, gbc.e());
        EXPECT(0x77, gbc.h());
        EXPECT(0x56, gbc.l());
        EXPECT(0x107a, gbc.sp());
        EXPECT(0x405a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 0391
        gbc.setState(0x27a3, 0xba5e, 0x8f60, 0xb8eb, 0x66d4, 0x897d, 0x1, 0x0);
        gbc.writeMem(0x27a3, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x8f, gbc.a());
        EXPECT(0x98, gbc.b());
        EXPECT(0xeb, gbc.c());
        EXPECT(0x66, gbc.d());
        EXPECT(0xd4, gbc.e());
        EXPECT(0x89, gbc.h());
        EXPECT(0x7d, gbc.l());
        EXPECT(0xba5e, gbc.sp());
        EXPECT(0x27a5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 0393
        gbc.setState(0x4d6e, 0x241a, 0x20c0, 0x6a8f, 0xb688, 0xae32, 0x0, 0x1);
        gbc.writeMem(0x4d6e, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x20, gbc.a());
        EXPECT(0x4a, gbc.b());
        EXPECT(0x8f, gbc.c());
        EXPECT(0xb6, gbc.d());
        EXPECT(0x88, gbc.e());
        EXPECT(0xae, gbc.h());
        EXPECT(0x32, gbc.l());
        EXPECT(0x241a, gbc.sp());
        EXPECT(0x4d70, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 0394
        gbc.setState(0x2383, 0xd28d, 0x3ec0, 0x9acf, 0x3b43, 0x9ddf, 0x1, 0x1);
        gbc.writeMem(0x2383, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x3e, gbc.a());
        EXPECT(0x9a, gbc.b());
        EXPECT(0xcf, gbc.c());
        EXPECT(0x3b, gbc.d());
        EXPECT(0x43, gbc.e());
        EXPECT(0x9d, gbc.h());
        EXPECT(0xdf, gbc.l());
        EXPECT(0xd28d, gbc.sp());
        EXPECT(0x2385, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 0395
        gbc.setState(0x3113, 0xc37f, 0x3280, 0x8eb6, 0x803b, 0x9a5c, 0x0, 0x0);
        gbc.writeMem(0x3113, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x32, gbc.a());
        EXPECT(0x8e, gbc.b());
        EXPECT(0xb6, gbc.c());
        EXPECT(0x80, gbc.d());
        EXPECT(0x3b, gbc.e());
        EXPECT(0x9a, gbc.h());
        EXPECT(0x5c, gbc.l());
        EXPECT(0xc37f, gbc.sp());
        EXPECT(0x3115, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 0396
        gbc.setState(0xa7a3, 0x66b2, 0x57f0, 0x7cc1, 0x6aca, 0x78b0, 0x1, 0x0);
        gbc.writeMem(0xa7a3, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x57, gbc.a());
        EXPECT(0x5c, gbc.b());
        EXPECT(0xc1, gbc.c());
        EXPECT(0x6a, gbc.d());
        EXPECT(0xca, gbc.e());
        EXPECT(0x78, gbc.h());
        EXPECT(0xb0, gbc.l());
        EXPECT(0x66b2, gbc.sp());
        EXPECT(0xa7a5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa7a3));
        EXPECT(0xa8, gbc.readMem(0xa7a4));
        // CB A8 0397
        gbc.setState(0xba83, 0x3b88, 0xc240, 0x6513, 0x96b2, 0xd2bf, 0x0, 0x1);
        gbc.writeMem(0xba83, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xc2, gbc.a());
        EXPECT(0x45, gbc.b());
        EXPECT(0x13, gbc.c());
        EXPECT(0x96, gbc.d());
        EXPECT(0xb2, gbc.e());
        EXPECT(0xd2, gbc.h());
        EXPECT(0xbf, gbc.l());
        EXPECT(0x3b88, gbc.sp());
        EXPECT(0xba85, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xba83));
        EXPECT(0xa8, gbc.readMem(0xba84));
        // CB A8 0399
        gbc.setState(0xda7a, 0xc, 0xecb0, 0x7cae, 0x5185, 0xe992, 0x0, 0x0);
        gbc.writeMem(0xda7a, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xec, gbc.a());
        EXPECT(0x5c, gbc.b());
        EXPECT(0xae, gbc.c());
        EXPECT(0x51, gbc.d());
        EXPECT(0x85, gbc.e());
        EXPECT(0xe9, gbc.h());
        EXPECT(0x92, gbc.l());
        EXPECT(0xc, gbc.sp());
        EXPECT(0xda7c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xda7a));
        EXPECT(0xa8, gbc.readMem(0xda7b));
        // CB A8 039A
        gbc.setState(0x4a45, 0xfa24, 0xece0, 0x1f62, 0xc02d, 0xe19f, 0x0, 0x0);
        gbc.writeMem(0x4a45, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xec, gbc.a());
        EXPECT(0x1f, gbc.b());
        EXPECT(0x62, gbc.c());
        EXPECT(0xc0, gbc.d());
        EXPECT(0x2d, gbc.e());
        EXPECT(0xe1, gbc.h());
        EXPECT(0x9f, gbc.l());
        EXPECT(0xfa24, gbc.sp());
        EXPECT(0x4a47, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 039B
        gbc.setState(0x958c, 0x5a75, 0xdd00, 0x9330, 0x8f64, 0x8006, 0x0, 0x1);
        gbc.writeMem(0x958c, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xdd, gbc.a());
        EXPECT(0x93, gbc.b());
        EXPECT(0x30, gbc.c());
        EXPECT(0x8f, gbc.d());
        EXPECT(0x64, gbc.e());
        EXPECT(0x80, gbc.h());
        EXPECT(0x6, gbc.l());
        EXPECT(0x5a75, gbc.sp());
        EXPECT(0x958e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x958c));
        EXPECT(0xa8, gbc.readMem(0x958d));
        // CB A8 039C
        gbc.setState(0xd6f1, 0x898d, 0xaa30, 0x48d0, 0x11e1, 0x9051, 0x0, 0x0);
        gbc.writeMem(0xd6f1, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xaa, gbc.a());
        EXPECT(0x48, gbc.b());
        EXPECT(0xd0, gbc.c());
        EXPECT(0x11, gbc.d());
        EXPECT(0xe1, gbc.e());
        EXPECT(0x90, gbc.h());
        EXPECT(0x51, gbc.l());
        EXPECT(0x898d, gbc.sp());
        EXPECT(0xd6f3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd6f1));
        EXPECT(0xa8, gbc.readMem(0xd6f2));
        // CB A8 039D
        gbc.setState(0x303f, 0xfd25, 0xbb30, 0x15a8, 0xf28e, 0xd54a, 0x1, 0x0);
        gbc.writeMem(0x303f, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xbb, gbc.a());
        EXPECT(0x15, gbc.b());
        EXPECT(0xa8, gbc.c());
        EXPECT(0xf2, gbc.d());
        EXPECT(0x8e, gbc.e());
        EXPECT(0xd5, gbc.h());
        EXPECT(0x4a, gbc.l());
        EXPECT(0xfd25, gbc.sp());
        EXPECT(0x3041, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 039E
        gbc.setState(0x106d, 0x701a, 0xcb60, 0xce3f, 0x2af1, 0x3d83, 0x0, 0x0);
        gbc.writeMem(0x106d, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xcb, gbc.a());
        EXPECT(0xce, gbc.b());
        EXPECT(0x3f, gbc.c());
        EXPECT(0x2a, gbc.d());
        EXPECT(0xf1, gbc.e());
        EXPECT(0x3d, gbc.h());
        EXPECT(0x83, gbc.l());
        EXPECT(0x701a, gbc.sp());
        EXPECT(0x106f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 039F
        gbc.setState(0x4233, 0xfdd4, 0xd6a0, 0x473b, 0x75b7, 0x5f52, 0x0, 0x1);
        gbc.writeMem(0x4233, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xd6, gbc.a());
        EXPECT(0x47, gbc.b());
        EXPECT(0x3b, gbc.c());
        EXPECT(0x75, gbc.d());
        EXPECT(0xb7, gbc.e());
        EXPECT(0x5f, gbc.h());
        EXPECT(0x52, gbc.l());
        EXPECT(0xfdd4, gbc.sp());
        EXPECT(0x4235, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 03A0
        gbc.setState(0xd3fc, 0x5537, 0xe870, 0x7848, 0x2fb, 0x5c82, 0x0, 0x1);
        gbc.writeMem(0xd3fc, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xe8, gbc.a());
        EXPECT(0x58, gbc.b());
        EXPECT(0x48, gbc.c());
        EXPECT(0x2, gbc.d());
        EXPECT(0xfb, gbc.e());
        EXPECT(0x5c, gbc.h());
        EXPECT(0x82, gbc.l());
        EXPECT(0x5537, gbc.sp());
        EXPECT(0xd3fe, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd3fc));
        EXPECT(0xa8, gbc.readMem(0xd3fd));
        // CB A8 03A1
        gbc.setState(0x884e, 0xcf1, 0x110, 0x9d5f, 0x4dea, 0x1b1d, 0x1, 0x1);
        gbc.writeMem(0x884e, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x1, gbc.a());
        EXPECT(0x9d, gbc.b());
        EXPECT(0x5f, gbc.c());
        EXPECT(0x4d, gbc.d());
        EXPECT(0xea, gbc.e());
        EXPECT(0x1b, gbc.h());
        EXPECT(0x1d, gbc.l());
        EXPECT(0xcf1, gbc.sp());
        EXPECT(0x8850, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x884e));
        EXPECT(0xa8, gbc.readMem(0x884f));
        // CB A8 03A2
        gbc.setState(0x33ce, 0xb4c2, 0x62a0, 0xa4a5, 0xea00, 0x25dd, 0x1, 0x1);
        gbc.writeMem(0x33ce, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x62, gbc.a());
        EXPECT(0x84, gbc.b());
        EXPECT(0xa5, gbc.c());
        EXPECT(0xea, gbc.d());
        EXPECT(0x0, gbc.e());
        EXPECT(0x25, gbc.h());
        EXPECT(0xdd, gbc.l());
        EXPECT(0xb4c2, gbc.sp());
        EXPECT(0x33d0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 03A3
        gbc.setState(0x5513, 0x787e, 0x9420, 0x175c, 0x2a84, 0x4b72, 0x1, 0x0);
        gbc.writeMem(0x5513, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x94, gbc.a());
        EXPECT(0x17, gbc.b());
        EXPECT(0x5c, gbc.c());
        EXPECT(0x2a, gbc.d());
        EXPECT(0x84, gbc.e());
        EXPECT(0x4b, gbc.h());
        EXPECT(0x72, gbc.l());
        EXPECT(0x787e, gbc.sp());
        EXPECT(0x5515, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 03A4
        gbc.setState(0x71b5, 0x292f, 0xdb50, 0xc3af, 0x29a, 0x26cf, 0x1, 0x0);
        gbc.writeMem(0x71b5, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xdb, gbc.a());
        EXPECT(0xc3, gbc.b());
        EXPECT(0xaf, gbc.c());
        EXPECT(0x2, gbc.d());
        EXPECT(0x9a, gbc.e());
        EXPECT(0x26, gbc.h());
        EXPECT(0xcf, gbc.l());
        EXPECT(0x292f, gbc.sp());
        EXPECT(0x71b7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 03A6
        gbc.setState(0xe2d2, 0x9373, 0xd790, 0x1236, 0x5f8a, 0x94bd, 0x0, 0x1);
        gbc.writeMem(0xe2d2, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xd7, gbc.a());
        EXPECT(0x12, gbc.b());
        EXPECT(0x36, gbc.c());
        EXPECT(0x5f, gbc.d());
        EXPECT(0x8a, gbc.e());
        EXPECT(0x94, gbc.h());
        EXPECT(0xbd, gbc.l());
        EXPECT(0x9373, gbc.sp());
        EXPECT(0xe2d4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe2d2));
        EXPECT(0xa8, gbc.readMem(0xe2d3));
        // CB A8 03A7
        gbc.setState(0x79f9, 0x750d, 0x26e0, 0x76b, 0xb1d9, 0x861d, 0x1, 0x0);
        gbc.writeMem(0x79f9, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x26, gbc.a());
        EXPECT(0x7, gbc.b());
        EXPECT(0x6b, gbc.c());
        EXPECT(0xb1, gbc.d());
        EXPECT(0xd9, gbc.e());
        EXPECT(0x86, gbc.h());
        EXPECT(0x1d, gbc.l());
        EXPECT(0x750d, gbc.sp());
        EXPECT(0x79fb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 03A8
        gbc.setState(0x6d1e, 0xf013, 0x4860, 0x1a8b, 0x697c, 0x6050, 0x1, 0x0);
        gbc.writeMem(0x6d1e, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x48, gbc.a());
        EXPECT(0x1a, gbc.b());
        EXPECT(0x8b, gbc.c());
        EXPECT(0x69, gbc.d());
        EXPECT(0x7c, gbc.e());
        EXPECT(0x60, gbc.h());
        EXPECT(0x50, gbc.l());
        EXPECT(0xf013, gbc.sp());
        EXPECT(0x6d20, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 03A9
        gbc.setState(0x214b, 0x5995, 0xee90, 0x195d, 0x3f63, 0x62f5, 0x0, 0x1);
        gbc.writeMem(0x214b, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xee, gbc.a());
        EXPECT(0x19, gbc.b());
        EXPECT(0x5d, gbc.c());
        EXPECT(0x3f, gbc.d());
        EXPECT(0x63, gbc.e());
        EXPECT(0x62, gbc.h());
        EXPECT(0xf5, gbc.l());
        EXPECT(0x5995, gbc.sp());
        EXPECT(0x214d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 03AA
        gbc.setState(0xd7fa, 0x74f0, 0xd7c0, 0xd240, 0x4a31, 0x2b50, 0x0, 0x0);
        gbc.writeMem(0xd7fa, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xd7, gbc.a());
        EXPECT(0xd2, gbc.b());
        EXPECT(0x40, gbc.c());
        EXPECT(0x4a, gbc.d());
        EXPECT(0x31, gbc.e());
        EXPECT(0x2b, gbc.h());
        EXPECT(0x50, gbc.l());
        EXPECT(0x74f0, gbc.sp());
        EXPECT(0xd7fc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd7fa));
        EXPECT(0xa8, gbc.readMem(0xd7fb));
        // CB A8 03AB
        gbc.setState(0x8ddd, 0x9a13, 0xc8f0, 0xd1a5, 0x1dea, 0x29fc, 0x0, 0x1);
        gbc.writeMem(0x8ddd, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xc8, gbc.a());
        EXPECT(0xd1, gbc.b());
        EXPECT(0xa5, gbc.c());
        EXPECT(0x1d, gbc.d());
        EXPECT(0xea, gbc.e());
        EXPECT(0x29, gbc.h());
        EXPECT(0xfc, gbc.l());
        EXPECT(0x9a13, gbc.sp());
        EXPECT(0x8ddf, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8ddd));
        EXPECT(0xa8, gbc.readMem(0x8dde));
        // CB A8 03AC
        gbc.setState(0x3dd1, 0x7eed, 0xaf40, 0xc94d, 0x350a, 0x3fa, 0x0, 0x1);
        gbc.writeMem(0x3dd1, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xaf, gbc.a());
        EXPECT(0xc9, gbc.b());
        EXPECT(0x4d, gbc.c());
        EXPECT(0x35, gbc.d());
        EXPECT(0xa, gbc.e());
        EXPECT(0x3, gbc.h());
        EXPECT(0xfa, gbc.l());
        EXPECT(0x7eed, gbc.sp());
        EXPECT(0x3dd3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 03AD
        gbc.setState(0xa496, 0xc1fa, 0xad40, 0xa98e, 0x555c, 0x8aea, 0x0, 0x0);
        gbc.writeMem(0xa496, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xad, gbc.a());
        EXPECT(0x89, gbc.b());
        EXPECT(0x8e, gbc.c());
        EXPECT(0x55, gbc.d());
        EXPECT(0x5c, gbc.e());
        EXPECT(0x8a, gbc.h());
        EXPECT(0xea, gbc.l());
        EXPECT(0xc1fa, gbc.sp());
        EXPECT(0xa498, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa496));
        EXPECT(0xa8, gbc.readMem(0xa497));
        // CB A8 03AE
        gbc.setState(0x3ec1, 0x167c, 0x4060, 0xc95, 0xa40d, 0x828c, 0x0, 0x1);
        gbc.writeMem(0x3ec1, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x40, gbc.a());
        EXPECT(0xc, gbc.b());
        EXPECT(0x95, gbc.c());
        EXPECT(0xa4, gbc.d());
        EXPECT(0xd, gbc.e());
        EXPECT(0x82, gbc.h());
        EXPECT(0x8c, gbc.l());
        EXPECT(0x167c, gbc.sp());
        EXPECT(0x3ec3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 03AF
        gbc.setState(0x81fd, 0xe9e8, 0xfdc0, 0xf684, 0x8aa6, 0x3c6a, 0x1, 0x0);
        gbc.writeMem(0x81fd, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xfd, gbc.a());
        EXPECT(0xd6, gbc.b());
        EXPECT(0x84, gbc.c());
        EXPECT(0x8a, gbc.d());
        EXPECT(0xa6, gbc.e());
        EXPECT(0x3c, gbc.h());
        EXPECT(0x6a, gbc.l());
        EXPECT(0xe9e8, gbc.sp());
        EXPECT(0x81ff, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x81fd));
        EXPECT(0xa8, gbc.readMem(0x81fe));
        // CB A8 03B0
        gbc.setState(0xf89, 0x67e1, 0x4160, 0x62a5, 0x8f3, 0x5cd2, 0x0, 0x0);
        gbc.writeMem(0xf89, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x41, gbc.a());
        EXPECT(0x42, gbc.b());
        EXPECT(0xa5, gbc.c());
        EXPECT(0x8, gbc.d());
        EXPECT(0xf3, gbc.e());
        EXPECT(0x5c, gbc.h());
        EXPECT(0xd2, gbc.l());
        EXPECT(0x67e1, gbc.sp());
        EXPECT(0xf8b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 03B1
        gbc.setState(0x6857, 0xa56a, 0xeeb0, 0xdf95, 0x718c, 0x360e, 0x0, 0x1);
        gbc.writeMem(0x6857, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xee, gbc.a());
        EXPECT(0xdf, gbc.b());
        EXPECT(0x95, gbc.c());
        EXPECT(0x71, gbc.d());
        EXPECT(0x8c, gbc.e());
        EXPECT(0x36, gbc.h());
        EXPECT(0xe, gbc.l());
        EXPECT(0xa56a, gbc.sp());
        EXPECT(0x6859, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 03B2
        gbc.setState(0x5a41, 0x88d4, 0x7550, 0xf631, 0x1838, 0x8f81, 0x1, 0x0);
        gbc.writeMem(0x5a41, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x75, gbc.a());
        EXPECT(0xd6, gbc.b());
        EXPECT(0x31, gbc.c());
        EXPECT(0x18, gbc.d());
        EXPECT(0x38, gbc.e());
        EXPECT(0x8f, gbc.h());
        EXPECT(0x81, gbc.l());
        EXPECT(0x88d4, gbc.sp());
        EXPECT(0x5a43, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 03B3
        gbc.setState(0x1dfe, 0xf50, 0xb720, 0x8e1c, 0xd723, 0xb996, 0x1, 0x1);
        gbc.writeMem(0x1dfe, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xb7, gbc.a());
        EXPECT(0x8e, gbc.b());
        EXPECT(0x1c, gbc.c());
        EXPECT(0xd7, gbc.d());
        EXPECT(0x23, gbc.e());
        EXPECT(0xb9, gbc.h());
        EXPECT(0x96, gbc.l());
        EXPECT(0xf50, gbc.sp());
        EXPECT(0x1e00, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 03B5
        gbc.setState(0x1b4b, 0x179f, 0x7260, 0xd45d, 0x9fcd, 0xf4ec, 0x0, 0x0);
        gbc.writeMem(0x1b4b, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x72, gbc.a());
        EXPECT(0xd4, gbc.b());
        EXPECT(0x5d, gbc.c());
        EXPECT(0x9f, gbc.d());
        EXPECT(0xcd, gbc.e());
        EXPECT(0xf4, gbc.h());
        EXPECT(0xec, gbc.l());
        EXPECT(0x179f, gbc.sp());
        EXPECT(0x1b4d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 03B6
        gbc.setState(0x46a8, 0x5aad, 0x6a60, 0x691b, 0x66d3, 0x5463, 0x0, 0x0);
        gbc.writeMem(0x46a8, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x6a, gbc.a());
        EXPECT(0x49, gbc.b());
        EXPECT(0x1b, gbc.c());
        EXPECT(0x66, gbc.d());
        EXPECT(0xd3, gbc.e());
        EXPECT(0x54, gbc.h());
        EXPECT(0x63, gbc.l());
        EXPECT(0x5aad, gbc.sp());
        EXPECT(0x46aa, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 03B7
        gbc.setState(0xdde4, 0xb766, 0x6950, 0xca2d, 0xf6a2, 0xf50, 0x1, 0x0);
        gbc.writeMem(0xdde4, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x69, gbc.a());
        EXPECT(0xca, gbc.b());
        EXPECT(0x2d, gbc.c());
        EXPECT(0xf6, gbc.d());
        EXPECT(0xa2, gbc.e());
        EXPECT(0xf, gbc.h());
        EXPECT(0x50, gbc.l());
        EXPECT(0xb766, gbc.sp());
        EXPECT(0xdde6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdde4));
        EXPECT(0xa8, gbc.readMem(0xdde5));
        // CB A8 03B8
        gbc.setState(0x5d54, 0x1624, 0x5670, 0x50c0, 0xe7fa, 0x11c9, 0x0, 0x1);
        gbc.writeMem(0x5d54, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x56, gbc.a());
        EXPECT(0x50, gbc.b());
        EXPECT(0xc0, gbc.c());
        EXPECT(0xe7, gbc.d());
        EXPECT(0xfa, gbc.e());
        EXPECT(0x11, gbc.h());
        EXPECT(0xc9, gbc.l());
        EXPECT(0x1624, gbc.sp());
        EXPECT(0x5d56, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 03B9
        gbc.setState(0x856f, 0x8245, 0xb3b0, 0xe93a, 0xf89b, 0x12e3, 0x0, 0x0);
        gbc.writeMem(0x856f, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xb3, gbc.a());
        EXPECT(0xc9, gbc.b());
        EXPECT(0x3a, gbc.c());
        EXPECT(0xf8, gbc.d());
        EXPECT(0x9b, gbc.e());
        EXPECT(0x12, gbc.h());
        EXPECT(0xe3, gbc.l());
        EXPECT(0x8245, gbc.sp());
        EXPECT(0x8571, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x856f));
        EXPECT(0xa8, gbc.readMem(0x8570));
        // CB A8 03BA
        gbc.setState(0x159, 0x1e6, 0xc6e0, 0xad41, 0x47bb, 0x9975, 0x0, 0x0);
        gbc.writeMem(0x159, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xc6, gbc.a());
        EXPECT(0x8d, gbc.b());
        EXPECT(0x41, gbc.c());
        EXPECT(0x47, gbc.d());
        EXPECT(0xbb, gbc.e());
        EXPECT(0x99, gbc.h());
        EXPECT(0x75, gbc.l());
        EXPECT(0x1e6, gbc.sp());
        EXPECT(0x15b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 03BB
        gbc.setState(0xacea, 0x1f6c, 0x9740, 0xb20f, 0x8dd2, 0xbba1, 0x1, 0x0);
        gbc.writeMem(0xacea, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x97, gbc.a());
        EXPECT(0x92, gbc.b());
        EXPECT(0xf, gbc.c());
        EXPECT(0x8d, gbc.d());
        EXPECT(0xd2, gbc.e());
        EXPECT(0xbb, gbc.h());
        EXPECT(0xa1, gbc.l());
        EXPECT(0x1f6c, gbc.sp());
        EXPECT(0xacec, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xacea));
        EXPECT(0xa8, gbc.readMem(0xaceb));
        // CB A8 03BC
        gbc.setState(0x2aa, 0xb1d9, 0xaca0, 0x66d3, 0x741e, 0x8cc1, 0x0, 0x0);
        gbc.writeMem(0x2aa, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xac, gbc.a());
        EXPECT(0x46, gbc.b());
        EXPECT(0xd3, gbc.c());
        EXPECT(0x74, gbc.d());
        EXPECT(0x1e, gbc.e());
        EXPECT(0x8c, gbc.h());
        EXPECT(0xc1, gbc.l());
        EXPECT(0xb1d9, gbc.sp());
        EXPECT(0x2ac, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 03BD
        gbc.setState(0x6f8e, 0x59eb, 0xbc0, 0x860a, 0xa37f, 0xea7e, 0x0, 0x1);
        gbc.writeMem(0x6f8e, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xb, gbc.a());
        EXPECT(0x86, gbc.b());
        EXPECT(0xa, gbc.c());
        EXPECT(0xa3, gbc.d());
        EXPECT(0x7f, gbc.e());
        EXPECT(0xea, gbc.h());
        EXPECT(0x7e, gbc.l());
        EXPECT(0x59eb, gbc.sp());
        EXPECT(0x6f90, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 03BE
        gbc.setState(0xcf0e, 0x614, 0x8610, 0x31a8, 0x2e92, 0xc97a, 0x1, 0x1);
        gbc.writeMem(0xcf0e, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x86, gbc.a());
        EXPECT(0x11, gbc.b());
        EXPECT(0xa8, gbc.c());
        EXPECT(0x2e, gbc.d());
        EXPECT(0x92, gbc.e());
        EXPECT(0xc9, gbc.h());
        EXPECT(0x7a, gbc.l());
        EXPECT(0x614, gbc.sp());
        EXPECT(0xcf10, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcf0e));
        EXPECT(0xa8, gbc.readMem(0xcf0f));
        // CB A8 03BF
        gbc.setState(0xcf70, 0x1aa1, 0xc3a0, 0x5703, 0xd852, 0x8699, 0x1, 0x1);
        gbc.writeMem(0xcf70, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xc3, gbc.a());
        EXPECT(0x57, gbc.b());
        EXPECT(0x3, gbc.c());
        EXPECT(0xd8, gbc.d());
        EXPECT(0x52, gbc.e());
        EXPECT(0x86, gbc.h());
        EXPECT(0x99, gbc.l());
        EXPECT(0x1aa1, gbc.sp());
        EXPECT(0xcf72, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcf70));
        EXPECT(0xa8, gbc.readMem(0xcf71));
        // CB A8 03C0
        gbc.setState(0xaee5, 0xb942, 0xe6f0, 0x58d2, 0x5d19, 0x81e7, 0x0, 0x1);
        gbc.writeMem(0xaee5, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xe6, gbc.a());
        EXPECT(0x58, gbc.b());
        EXPECT(0xd2, gbc.c());
        EXPECT(0x5d, gbc.d());
        EXPECT(0x19, gbc.e());
        EXPECT(0x81, gbc.h());
        EXPECT(0xe7, gbc.l());
        EXPECT(0xb942, gbc.sp());
        EXPECT(0xaee7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaee5));
        EXPECT(0xa8, gbc.readMem(0xaee6));
        // CB A8 03C1
        gbc.setState(0xc9f7, 0xbd34, 0x1010, 0x1544, 0x735b, 0xbfb9, 0x1, 0x1);
        gbc.writeMem(0xc9f7, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x10, gbc.a());
        EXPECT(0x15, gbc.b());
        EXPECT(0x44, gbc.c());
        EXPECT(0x73, gbc.d());
        EXPECT(0x5b, gbc.e());
        EXPECT(0xbf, gbc.h());
        EXPECT(0xb9, gbc.l());
        EXPECT(0xbd34, gbc.sp());
        EXPECT(0xc9f9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc9f7));
        EXPECT(0xa8, gbc.readMem(0xc9f8));
        // CB A8 03C2
        gbc.setState(0x16ee, 0xbf7c, 0xd170, 0x1005, 0x8684, 0x4eb6, 0x1, 0x1);
        gbc.writeMem(0x16ee, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xd1, gbc.a());
        EXPECT(0x10, gbc.b());
        EXPECT(0x5, gbc.c());
        EXPECT(0x86, gbc.d());
        EXPECT(0x84, gbc.e());
        EXPECT(0x4e, gbc.h());
        EXPECT(0xb6, gbc.l());
        EXPECT(0xbf7c, gbc.sp());
        EXPECT(0x16f0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 03C3
        gbc.setState(0x6918, 0x5f99, 0x1670, 0xe886, 0x96eb, 0x3fac, 0x0, 0x1);
        gbc.writeMem(0x6918, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x16, gbc.a());
        EXPECT(0xc8, gbc.b());
        EXPECT(0x86, gbc.c());
        EXPECT(0x96, gbc.d());
        EXPECT(0xeb, gbc.e());
        EXPECT(0x3f, gbc.h());
        EXPECT(0xac, gbc.l());
        EXPECT(0x5f99, gbc.sp());
        EXPECT(0x691a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 03C4
        gbc.setState(0x6dd2, 0x8056, 0x5630, 0x675, 0x1e90, 0x417f, 0x0, 0x0);
        gbc.writeMem(0x6dd2, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x56, gbc.a());
        EXPECT(0x6, gbc.b());
        EXPECT(0x75, gbc.c());
        EXPECT(0x1e, gbc.d());
        EXPECT(0x90, gbc.e());
        EXPECT(0x41, gbc.h());
        EXPECT(0x7f, gbc.l());
        EXPECT(0x8056, gbc.sp());
        EXPECT(0x6dd4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 03C5
        gbc.setState(0x5782, 0xc88, 0x99d0, 0xf2c1, 0xcce8, 0xa706, 0x1, 0x1);
        gbc.writeMem(0x5782, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x99, gbc.a());
        EXPECT(0xd2, gbc.b());
        EXPECT(0xc1, gbc.c());
        EXPECT(0xcc, gbc.d());
        EXPECT(0xe8, gbc.e());
        EXPECT(0xa7, gbc.h());
        EXPECT(0x6, gbc.l());
        EXPECT(0xc88, gbc.sp());
        EXPECT(0x5784, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 03C6
        gbc.setState(0x133e, 0xd8b8, 0xa700, 0xe439, 0x3a6e, 0xbf3f, 0x0, 0x1);
        gbc.writeMem(0x133e, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xa7, gbc.a());
        EXPECT(0xc4, gbc.b());
        EXPECT(0x39, gbc.c());
        EXPECT(0x3a, gbc.d());
        EXPECT(0x6e, gbc.e());
        EXPECT(0xbf, gbc.h());
        EXPECT(0x3f, gbc.l());
        EXPECT(0xd8b8, gbc.sp());
        EXPECT(0x1340, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 03C7
        gbc.setState(0xec82, 0x8d92, 0x6420, 0x3059, 0xfcf9, 0x7074, 0x0, 0x1);
        gbc.writeMem(0xec82, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x64, gbc.a());
        EXPECT(0x10, gbc.b());
        EXPECT(0x59, gbc.c());
        EXPECT(0xfc, gbc.d());
        EXPECT(0xf9, gbc.e());
        EXPECT(0x70, gbc.h());
        EXPECT(0x74, gbc.l());
        EXPECT(0x8d92, gbc.sp());
        EXPECT(0xec84, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xec82));
        EXPECT(0xa8, gbc.readMem(0xec83));
        // CB A8 03C8
        gbc.setState(0xbd48, 0x2f89, 0x59b0, 0xe6d1, 0x7f53, 0xcc9f, 0x0, 0x1);
        gbc.writeMem(0xbd48, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x59, gbc.a());
        EXPECT(0xc6, gbc.b());
        EXPECT(0xd1, gbc.c());
        EXPECT(0x7f, gbc.d());
        EXPECT(0x53, gbc.e());
        EXPECT(0xcc, gbc.h());
        EXPECT(0x9f, gbc.l());
        EXPECT(0x2f89, gbc.sp());
        EXPECT(0xbd4a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbd48));
        EXPECT(0xa8, gbc.readMem(0xbd49));
        // CB A8 03C9
        gbc.setState(0x7a15, 0xce9d, 0x6d80, 0xda1e, 0xa249, 0xb21a, 0x1, 0x1);
        gbc.writeMem(0x7a15, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x6d, gbc.a());
        EXPECT(0xda, gbc.b());
        EXPECT(0x1e, gbc.c());
        EXPECT(0xa2, gbc.d());
        EXPECT(0x49, gbc.e());
        EXPECT(0xb2, gbc.h());
        EXPECT(0x1a, gbc.l());
        EXPECT(0xce9d, gbc.sp());
        EXPECT(0x7a17, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 03CA
        gbc.setState(0x3ba, 0xb72e, 0x5990, 0x667d, 0xb35b, 0x26c4, 0x0, 0x1);
        gbc.writeMem(0x3ba, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x59, gbc.a());
        EXPECT(0x46, gbc.b());
        EXPECT(0x7d, gbc.c());
        EXPECT(0xb3, gbc.d());
        EXPECT(0x5b, gbc.e());
        EXPECT(0x26, gbc.h());
        EXPECT(0xc4, gbc.l());
        EXPECT(0xb72e, gbc.sp());
        EXPECT(0x3bc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 03CB
        gbc.setState(0x9362, 0x7ddb, 0x2db0, 0xb92b, 0xfad, 0x8fc5, 0x0, 0x0);
        gbc.writeMem(0x9362, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x2d, gbc.a());
        EXPECT(0x99, gbc.b());
        EXPECT(0x2b, gbc.c());
        EXPECT(0xf, gbc.d());
        EXPECT(0xad, gbc.e());
        EXPECT(0x8f, gbc.h());
        EXPECT(0xc5, gbc.l());
        EXPECT(0x7ddb, gbc.sp());
        EXPECT(0x9364, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9362));
        EXPECT(0xa8, gbc.readMem(0x9363));
        // CB A8 03CC
        gbc.setState(0x5d51, 0xbc7b, 0x60e0, 0x9fc0, 0x832c, 0xc418, 0x1, 0x0);
        gbc.writeMem(0x5d51, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x60, gbc.a());
        EXPECT(0x9f, gbc.b());
        EXPECT(0xc0, gbc.c());
        EXPECT(0x83, gbc.d());
        EXPECT(0x2c, gbc.e());
        EXPECT(0xc4, gbc.h());
        EXPECT(0x18, gbc.l());
        EXPECT(0xbc7b, gbc.sp());
        EXPECT(0x5d53, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 03CD
        gbc.setState(0x4088, 0x25ba, 0xdf20, 0x8d96, 0xfe9c, 0x8882, 0x0, 0x1);
        gbc.writeMem(0x4088, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xdf, gbc.a());
        EXPECT(0x8d, gbc.b());
        EXPECT(0x96, gbc.c());
        EXPECT(0xfe, gbc.d());
        EXPECT(0x9c, gbc.e());
        EXPECT(0x88, gbc.h());
        EXPECT(0x82, gbc.l());
        EXPECT(0x25ba, gbc.sp());
        EXPECT(0x408a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 03CE
        gbc.setState(0x1646, 0xa45e, 0x67e0, 0x1831, 0x9e1, 0xe687, 0x1, 0x0);
        gbc.writeMem(0x1646, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x67, gbc.a());
        EXPECT(0x18, gbc.b());
        EXPECT(0x31, gbc.c());
        EXPECT(0x9, gbc.d());
        EXPECT(0xe1, gbc.e());
        EXPECT(0xe6, gbc.h());
        EXPECT(0x87, gbc.l());
        EXPECT(0xa45e, gbc.sp());
        EXPECT(0x1648, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 03CF
        gbc.setState(0xe957, 0x36b4, 0x9b40, 0x66e, 0xcb33, 0x56d, 0x0, 0x0);
        gbc.writeMem(0xe957, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x9b, gbc.a());
        EXPECT(0x6, gbc.b());
        EXPECT(0x6e, gbc.c());
        EXPECT(0xcb, gbc.d());
        EXPECT(0x33, gbc.e());
        EXPECT(0x5, gbc.h());
        EXPECT(0x6d, gbc.l());
        EXPECT(0x36b4, gbc.sp());
        EXPECT(0xe959, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe957));
        EXPECT(0xa8, gbc.readMem(0xe958));
        // CB A8 03D0
        gbc.setState(0x2a30, 0xd6b4, 0x1520, 0x73d9, 0x1aa2, 0x7b26, 0x0, 0x0);
        gbc.writeMem(0x2a30, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x15, gbc.a());
        EXPECT(0x53, gbc.b());
        EXPECT(0xd9, gbc.c());
        EXPECT(0x1a, gbc.d());
        EXPECT(0xa2, gbc.e());
        EXPECT(0x7b, gbc.h());
        EXPECT(0x26, gbc.l());
        EXPECT(0xd6b4, gbc.sp());
        EXPECT(0x2a32, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 03D1
        gbc.setState(0xc3ba, 0x97d3, 0x5f60, 0xb46a, 0xaf3, 0xa730, 0x0, 0x0);
        gbc.writeMem(0xc3ba, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x5f, gbc.a());
        EXPECT(0x94, gbc.b());
        EXPECT(0x6a, gbc.c());
        EXPECT(0xa, gbc.d());
        EXPECT(0xf3, gbc.e());
        EXPECT(0xa7, gbc.h());
        EXPECT(0x30, gbc.l());
        EXPECT(0x97d3, gbc.sp());
        EXPECT(0xc3bc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc3ba));
        EXPECT(0xa8, gbc.readMem(0xc3bb));
        // CB A8 03D2
        gbc.setState(0x2a1, 0x457e, 0x1450, 0x59fc, 0x2e8f, 0xcf04, 0x0, 0x1);
        gbc.writeMem(0x2a1, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x14, gbc.a());
        EXPECT(0x59, gbc.b());
        EXPECT(0xfc, gbc.c());
        EXPECT(0x2e, gbc.d());
        EXPECT(0x8f, gbc.e());
        EXPECT(0xcf, gbc.h());
        EXPECT(0x4, gbc.l());
        EXPECT(0x457e, gbc.sp());
        EXPECT(0x2a3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 03D3
        gbc.setState(0xa7d1, 0x53b5, 0xad20, 0x50d5, 0xee3, 0xcebf, 0x0, 0x0);
        gbc.writeMem(0xa7d1, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xad, gbc.a());
        EXPECT(0x50, gbc.b());
        EXPECT(0xd5, gbc.c());
        EXPECT(0xe, gbc.d());
        EXPECT(0xe3, gbc.e());
        EXPECT(0xce, gbc.h());
        EXPECT(0xbf, gbc.l());
        EXPECT(0x53b5, gbc.sp());
        EXPECT(0xa7d3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa7d1));
        EXPECT(0xa8, gbc.readMem(0xa7d2));
        // CB A8 03D4
        gbc.setState(0x5cb6, 0xbadc, 0x1a80, 0x1a73, 0xd52c, 0x8e6e, 0x0, 0x0);
        gbc.writeMem(0x5cb6, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x1a, gbc.a());
        EXPECT(0x1a, gbc.b());
        EXPECT(0x73, gbc.c());
        EXPECT(0xd5, gbc.d());
        EXPECT(0x2c, gbc.e());
        EXPECT(0x8e, gbc.h());
        EXPECT(0x6e, gbc.l());
        EXPECT(0xbadc, gbc.sp());
        EXPECT(0x5cb8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 03D5
        gbc.setState(0x9fc7, 0x69ab, 0x7050, 0xb8a1, 0x738f, 0xe84a, 0x1, 0x1);
        gbc.writeMem(0x9fc7, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x70, gbc.a());
        EXPECT(0x98, gbc.b());
        EXPECT(0xa1, gbc.c());
        EXPECT(0x73, gbc.d());
        EXPECT(0x8f, gbc.e());
        EXPECT(0xe8, gbc.h());
        EXPECT(0x4a, gbc.l());
        EXPECT(0x69ab, gbc.sp());
        EXPECT(0x9fc9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9fc7));
        EXPECT(0xa8, gbc.readMem(0x9fc8));
        // CB A8 03D6
        gbc.setState(0xb867, 0xe440, 0x28f0, 0x39c2, 0xaf, 0xfef4, 0x0, 0x1);
        gbc.writeMem(0xb867, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x28, gbc.a());
        EXPECT(0x19, gbc.b());
        EXPECT(0xc2, gbc.c());
        EXPECT(0x0, gbc.d());
        EXPECT(0xaf, gbc.e());
        EXPECT(0xfe, gbc.h());
        EXPECT(0xf4, gbc.l());
        EXPECT(0xe440, gbc.sp());
        EXPECT(0xb869, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb867));
        EXPECT(0xa8, gbc.readMem(0xb868));
        // CB A8 03D7
        gbc.setState(0x657f, 0xd327, 0xce10, 0xe694, 0x43fc, 0xe870, 0x1, 0x0);
        gbc.writeMem(0x657f, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xce, gbc.a());
        EXPECT(0xc6, gbc.b());
        EXPECT(0x94, gbc.c());
        EXPECT(0x43, gbc.d());
        EXPECT(0xfc, gbc.e());
        EXPECT(0xe8, gbc.h());
        EXPECT(0x70, gbc.l());
        EXPECT(0xd327, gbc.sp());
        EXPECT(0x6581, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 03D8
        gbc.setState(0xd9a7, 0xebd8, 0xc820, 0x27f7, 0x2ae0, 0x6f09, 0x1, 0x0);
        gbc.writeMem(0xd9a7, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xc8, gbc.a());
        EXPECT(0x7, gbc.b());
        EXPECT(0xf7, gbc.c());
        EXPECT(0x2a, gbc.d());
        EXPECT(0xe0, gbc.e());
        EXPECT(0x6f, gbc.h());
        EXPECT(0x9, gbc.l());
        EXPECT(0xebd8, gbc.sp());
        EXPECT(0xd9a9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd9a7));
        EXPECT(0xa8, gbc.readMem(0xd9a8));
        // CB A8 03D9
        gbc.setState(0x57ea, 0x8e0a, 0xad0, 0xc179, 0xeee6, 0x128, 0x0, 0x0);
        gbc.writeMem(0x57ea, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xa, gbc.a());
        EXPECT(0xc1, gbc.b());
        EXPECT(0x79, gbc.c());
        EXPECT(0xee, gbc.d());
        EXPECT(0xe6, gbc.e());
        EXPECT(0x1, gbc.h());
        EXPECT(0x28, gbc.l());
        EXPECT(0x8e0a, gbc.sp());
        EXPECT(0x57ec, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 03DA
        gbc.setState(0x5bb4, 0x3fc4, 0xce50, 0xcb09, 0x593b, 0x7079, 0x1, 0x1);
        gbc.writeMem(0x5bb4, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xce, gbc.a());
        EXPECT(0xcb, gbc.b());
        EXPECT(0x9, gbc.c());
        EXPECT(0x59, gbc.d());
        EXPECT(0x3b, gbc.e());
        EXPECT(0x70, gbc.h());
        EXPECT(0x79, gbc.l());
        EXPECT(0x3fc4, gbc.sp());
        EXPECT(0x5bb6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 03DB
        gbc.setState(0xbcbc, 0xf90e, 0xecc0, 0xdacd, 0xb36b, 0x9a48, 0x0, 0x0);
        gbc.writeMem(0xbcbc, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xec, gbc.a());
        EXPECT(0xda, gbc.b());
        EXPECT(0xcd, gbc.c());
        EXPECT(0xb3, gbc.d());
        EXPECT(0x6b, gbc.e());
        EXPECT(0x9a, gbc.h());
        EXPECT(0x48, gbc.l());
        EXPECT(0xf90e, gbc.sp());
        EXPECT(0xbcbe, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbcbc));
        EXPECT(0xa8, gbc.readMem(0xbcbd));
        // CB A8 03DC
        gbc.setState(0x455a, 0xedd9, 0xc960, 0x5b43, 0x82c5, 0x979b, 0x0, 0x1);
        gbc.writeMem(0x455a, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xc9, gbc.a());
        EXPECT(0x5b, gbc.b());
        EXPECT(0x43, gbc.c());
        EXPECT(0x82, gbc.d());
        EXPECT(0xc5, gbc.e());
        EXPECT(0x97, gbc.h());
        EXPECT(0x9b, gbc.l());
        EXPECT(0xedd9, gbc.sp());
        EXPECT(0x455c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 03DD
        gbc.setState(0xe8f4, 0x9b6c, 0xe0d0, 0xdb42, 0xaa6e, 0x8c45, 0x0, 0x0);
        gbc.writeMem(0xe8f4, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xe0, gbc.a());
        EXPECT(0xdb, gbc.b());
        EXPECT(0x42, gbc.c());
        EXPECT(0xaa, gbc.d());
        EXPECT(0x6e, gbc.e());
        EXPECT(0x8c, gbc.h());
        EXPECT(0x45, gbc.l());
        EXPECT(0x9b6c, gbc.sp());
        EXPECT(0xe8f6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe8f4));
        EXPECT(0xa8, gbc.readMem(0xe8f5));
        // CB A8 03DE
        gbc.setState(0x17ab, 0x4abc, 0x90, 0x9c56, 0x6038, 0x40cf, 0x0, 0x0);
        gbc.writeMem(0x17ab, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x9c, gbc.b());
        EXPECT(0x56, gbc.c());
        EXPECT(0x60, gbc.d());
        EXPECT(0x38, gbc.e());
        EXPECT(0x40, gbc.h());
        EXPECT(0xcf, gbc.l());
        EXPECT(0x4abc, gbc.sp());
        EXPECT(0x17ad, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 03DF
        gbc.setState(0xa242, 0x97ee, 0x9b10, 0x2446, 0xcbfd, 0x3a9d, 0x0, 0x0);
        gbc.writeMem(0xa242, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x9b, gbc.a());
        EXPECT(0x4, gbc.b());
        EXPECT(0x46, gbc.c());
        EXPECT(0xcb, gbc.d());
        EXPECT(0xfd, gbc.e());
        EXPECT(0x3a, gbc.h());
        EXPECT(0x9d, gbc.l());
        EXPECT(0x97ee, gbc.sp());
        EXPECT(0xa244, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa242));
        EXPECT(0xa8, gbc.readMem(0xa243));
        // CB A8 03E1
        gbc.setState(0xa04, 0x8fd, 0x7d00, 0x6e07, 0x450d, 0x2ba8, 0x0, 0x1);
        gbc.writeMem(0xa04, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x7d, gbc.a());
        EXPECT(0x4e, gbc.b());
        EXPECT(0x7, gbc.c());
        EXPECT(0x45, gbc.d());
        EXPECT(0xd, gbc.e());
        EXPECT(0x2b, gbc.h());
        EXPECT(0xa8, gbc.l());
        EXPECT(0x8fd, gbc.sp());
        EXPECT(0xa06, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 03E2
        gbc.setState(0x8c93, 0xc4c5, 0xa80, 0x795a, 0xf665, 0xa67c, 0x1, 0x1);
        gbc.writeMem(0x8c93, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xa, gbc.a());
        EXPECT(0x59, gbc.b());
        EXPECT(0x5a, gbc.c());
        EXPECT(0xf6, gbc.d());
        EXPECT(0x65, gbc.e());
        EXPECT(0xa6, gbc.h());
        EXPECT(0x7c, gbc.l());
        EXPECT(0xc4c5, gbc.sp());
        EXPECT(0x8c95, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8c93));
        EXPECT(0xa8, gbc.readMem(0x8c94));
        // CB A8 03E3
        gbc.setState(0xc111, 0xc49c, 0x9020, 0xce74, 0xa078, 0x9841, 0x1, 0x0);
        gbc.writeMem(0xc111, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x90, gbc.a());
        EXPECT(0xce, gbc.b());
        EXPECT(0x74, gbc.c());
        EXPECT(0xa0, gbc.d());
        EXPECT(0x78, gbc.e());
        EXPECT(0x98, gbc.h());
        EXPECT(0x41, gbc.l());
        EXPECT(0xc49c, gbc.sp());
        EXPECT(0xc113, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc111));
        EXPECT(0xa8, gbc.readMem(0xc112));
        // CB A8 03E4
        gbc.setState(0x4bfe, 0x9e70, 0x32b0, 0x9fda, 0x88a1, 0x1025, 0x1, 0x0);
        gbc.writeMem(0x4bfe, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x32, gbc.a());
        EXPECT(0x9f, gbc.b());
        EXPECT(0xda, gbc.c());
        EXPECT(0x88, gbc.d());
        EXPECT(0xa1, gbc.e());
        EXPECT(0x10, gbc.h());
        EXPECT(0x25, gbc.l());
        EXPECT(0x9e70, gbc.sp());
        EXPECT(0x4c00, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB A8 03E5
        gbc.setState(0x1d5, 0x7b91, 0xeca0, 0x3e7, 0xd52e, 0x5763, 0x0, 0x1);
        gbc.writeMem(0x1d5, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xec, gbc.a());
        EXPECT(0x3, gbc.b());
        EXPECT(0xe7, gbc.c());
        EXPECT(0xd5, gbc.d());
        EXPECT(0x2e, gbc.e());
        EXPECT(0x57, gbc.h());
        EXPECT(0x63, gbc.l());
        EXPECT(0x7b91, gbc.sp());
        EXPECT(0x1d7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB A8 03E6
        gbc.setState(0xc1a9, 0xf1f3, 0xbba0, 0x4d0, 0xb8ae, 0x3a3e, 0x0, 0x0);
        gbc.writeMem(0xc1a9, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0xbb, gbc.a());
        EXPECT(0x4, gbc.b());
        EXPECT(0xd0, gbc.c());
        EXPECT(0xb8, gbc.d());
        EXPECT(0xae, gbc.e());
        EXPECT(0x3a, gbc.h());
        EXPECT(0x3e, gbc.l());
        EXPECT(0xf1f3, gbc.sp());
        EXPECT(0xc1ab, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc1a9));
        EXPECT(0xa8, gbc.readMem(0xc1aa));
        // CB A8 03E7
        gbc.setState(0x269e, 0xab4d, 0x9cd0, 0x9363, 0x5036, 0xa024, 0x1, 0x0);
        gbc.writeMem(0x269e, { 0xcb, 0xa8 });
        gbc.step();
        EXPECT(0x9c, gbc.a());
        EXPECT(0x93, gbc.b());
        EXPECT(0x63, gbc.c());
        EXPECT(0x50, gbc.d());
        EXPECT(0x36, gbc.e());
        EXPECT(0xa0, gbc.h());
        EXPECT(0x24, gbc.l());
        EXPECT(0xab4d, gbc.sp());
        EXPECT(0x26a0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
    }
