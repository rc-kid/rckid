    TEST(gbcemu, opcode_cf) {
        GBCEmu gbc{"", nullptr};
        uint8_t cartridge[0x8000];
        cartridge[0x149] = 0x02; // 8kb external RAM
        gbc.loadCartridge(new FlashGamePak(cartridge));
        // CF 0000
        gbc.setState(0x59dd, 0xec30, 0x3180, 0xf646, 0x2899, 0x9bef, 0x0, 0x0);
        gbc.writeMem(0x59dd, { 0xcf });
        gbc.writeMem(0xec2e, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x31, gbc.a());
        EXPECT(0xf6, gbc.b());
        EXPECT(0x46, gbc.c());
        EXPECT(0x28, gbc.d());
        EXPECT(0x99, gbc.e());
        EXPECT(0x9b, gbc.h());
        EXPECT(0xef, gbc.l());
        EXPECT(0xec2e, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xde, gbc.readMem(0xec2e));
        EXPECT(0x59, gbc.readMem(0xec2f));
        // CF 0002
        gbc.setState(0x12d0, 0xc295, 0x850, 0x883a, 0x46e3, 0xd80d, 0x1, 0x1);
        gbc.writeMem(0x12d0, { 0xcf });
        gbc.writeMem(0xc293, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x8, gbc.a());
        EXPECT(0x88, gbc.b());
        EXPECT(0x3a, gbc.c());
        EXPECT(0x46, gbc.d());
        EXPECT(0xe3, gbc.e());
        EXPECT(0xd8, gbc.h());
        EXPECT(0xd, gbc.l());
        EXPECT(0xc293, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xd1, gbc.readMem(0xc293));
        EXPECT(0x12, gbc.readMem(0xc294));
        // CF 0006
        gbc.setState(0x4338, 0xaee2, 0x5590, 0x9157, 0x71e0, 0x22a2, 0x0, 0x0);
        gbc.writeMem(0x4338, { 0xcf });
        gbc.writeMem(0xaee0, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x55, gbc.a());
        EXPECT(0x91, gbc.b());
        EXPECT(0x57, gbc.c());
        EXPECT(0x71, gbc.d());
        EXPECT(0xe0, gbc.e());
        EXPECT(0x22, gbc.h());
        EXPECT(0xa2, gbc.l());
        EXPECT(0xaee0, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x39, gbc.readMem(0xaee0));
        EXPECT(0x43, gbc.readMem(0xaee1));
        // CF 0007
        gbc.setState(0x414d, 0xa3ca, 0xb270, 0x3986, 0x10f5, 0x41e8, 0x1, 0x0);
        gbc.writeMem(0x414d, { 0xcf });
        gbc.writeMem(0xa3c8, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xb2, gbc.a());
        EXPECT(0x39, gbc.b());
        EXPECT(0x86, gbc.c());
        EXPECT(0x10, gbc.d());
        EXPECT(0xf5, gbc.e());
        EXPECT(0x41, gbc.h());
        EXPECT(0xe8, gbc.l());
        EXPECT(0xa3c8, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x4e, gbc.readMem(0xa3c8));
        EXPECT(0x41, gbc.readMem(0xa3c9));
        // CF 000B
        gbc.setState(0xaeec, 0xc824, 0xe120, 0xa2e3, 0xa218, 0x4ce3, 0x1, 0x1);
        gbc.writeMem(0xaeec, { 0xcf });
        gbc.writeMem(0xc822, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xe1, gbc.a());
        EXPECT(0xa2, gbc.b());
        EXPECT(0xe3, gbc.c());
        EXPECT(0xa2, gbc.d());
        EXPECT(0x18, gbc.e());
        EXPECT(0x4c, gbc.h());
        EXPECT(0xe3, gbc.l());
        EXPECT(0xc822, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0xaeec));
        EXPECT(0xed, gbc.readMem(0xc822));
        EXPECT(0xae, gbc.readMem(0xc823));
        // CF 000C
        gbc.setState(0xd553, 0xa69d, 0x9430, 0xffb5, 0x6464, 0x39d6, 0x0, 0x1);
        gbc.writeMem(0xa69b, { 0x0, 0x0 });
        gbc.writeMem(0xd553, { 0xcf });
        gbc.step();
        EXPECT(0x94, gbc.a());
        EXPECT(0xff, gbc.b());
        EXPECT(0xb5, gbc.c());
        EXPECT(0x64, gbc.d());
        EXPECT(0x64, gbc.e());
        EXPECT(0x39, gbc.h());
        EXPECT(0xd6, gbc.l());
        EXPECT(0xa69b, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x54, gbc.readMem(0xa69b));
        EXPECT(0xd5, gbc.readMem(0xa69c));
        EXPECT(0xcf, gbc.readMem(0xd553));
        // CF 0011
        gbc.setState(0x3cba, 0xacab, 0x4880, 0x2bd8, 0xd3da, 0x5343, 0x0, 0x1);
        gbc.writeMem(0x3cba, { 0xcf });
        gbc.writeMem(0xaca9, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x48, gbc.a());
        EXPECT(0x2b, gbc.b());
        EXPECT(0xd8, gbc.c());
        EXPECT(0xd3, gbc.d());
        EXPECT(0xda, gbc.e());
        EXPECT(0x53, gbc.h());
        EXPECT(0x43, gbc.l());
        EXPECT(0xaca9, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xbb, gbc.readMem(0xaca9));
        EXPECT(0x3c, gbc.readMem(0xacaa));
        // CF 0016
        gbc.setState(0xaf46, 0x9f20, 0xcfc0, 0x26eb, 0xa6c, 0x95f5, 0x0, 0x0);
        gbc.writeMem(0x9f1e, { 0x0, 0x0 });
        gbc.writeMem(0xaf46, { 0xcf });
        gbc.step();
        EXPECT(0xcf, gbc.a());
        EXPECT(0x26, gbc.b());
        EXPECT(0xeb, gbc.c());
        EXPECT(0xa, gbc.d());
        EXPECT(0x6c, gbc.e());
        EXPECT(0x95, gbc.h());
        EXPECT(0xf5, gbc.l());
        EXPECT(0x9f1e, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x47, gbc.readMem(0x9f1e));
        EXPECT(0xaf, gbc.readMem(0x9f1f));
        EXPECT(0xcf, gbc.readMem(0xaf46));
        // CF 0018
        gbc.setState(0xed48, 0x89af, 0x6300, 0x4295, 0xff75, 0x5e22, 0x1, 0x1);
        gbc.writeMem(0x89ad, { 0x0, 0x0 });
        gbc.writeMem(0xed48, { 0xcf });
        gbc.step();
        EXPECT(0x63, gbc.a());
        EXPECT(0x42, gbc.b());
        EXPECT(0x95, gbc.c());
        EXPECT(0xff, gbc.d());
        EXPECT(0x75, gbc.e());
        EXPECT(0x5e, gbc.h());
        EXPECT(0x22, gbc.l());
        EXPECT(0x89ad, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x49, gbc.readMem(0x89ad));
        EXPECT(0xed, gbc.readMem(0x89ae));
        EXPECT(0xcf, gbc.readMem(0xed48));
        // CF 001B
        gbc.setState(0x28c4, 0xd84d, 0x62f0, 0x30be, 0xed83, 0x884e, 0x1, 0x0);
        gbc.writeMem(0x28c4, { 0xcf });
        gbc.writeMem(0xd84b, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x62, gbc.a());
        EXPECT(0x30, gbc.b());
        EXPECT(0xbe, gbc.c());
        EXPECT(0xed, gbc.d());
        EXPECT(0x83, gbc.e());
        EXPECT(0x88, gbc.h());
        EXPECT(0x4e, gbc.l());
        EXPECT(0xd84b, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xc5, gbc.readMem(0xd84b));
        EXPECT(0x28, gbc.readMem(0xd84c));
        // CF 001C
        gbc.setState(0x3e1e, 0xc927, 0xd3c0, 0xab25, 0x48d7, 0xc2e3, 0x1, 0x1);
        gbc.writeMem(0x3e1e, { 0xcf });
        gbc.writeMem(0xc925, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xd3, gbc.a());
        EXPECT(0xab, gbc.b());
        EXPECT(0x25, gbc.c());
        EXPECT(0x48, gbc.d());
        EXPECT(0xd7, gbc.e());
        EXPECT(0xc2, gbc.h());
        EXPECT(0xe3, gbc.l());
        EXPECT(0xc925, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x1f, gbc.readMem(0xc925));
        EXPECT(0x3e, gbc.readMem(0xc926));
        // CF 001E
        gbc.setState(0x2930, 0xebe7, 0xc70, 0xe43a, 0x443a, 0xe8cf, 0x1, 0x1);
        gbc.writeMem(0x2930, { 0xcf });
        gbc.writeMem(0xebe5, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xc, gbc.a());
        EXPECT(0xe4, gbc.b());
        EXPECT(0x3a, gbc.c());
        EXPECT(0x44, gbc.d());
        EXPECT(0x3a, gbc.e());
        EXPECT(0xe8, gbc.h());
        EXPECT(0xcf, gbc.l());
        EXPECT(0xebe5, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x31, gbc.readMem(0xebe5));
        EXPECT(0x29, gbc.readMem(0xebe6));
        // CF 0025
        gbc.setState(0xd3b1, 0xf063, 0xa20, 0x5725, 0xfa77, 0x52bb, 0x0, 0x0);
        gbc.writeMem(0xd3b1, { 0xcf });
        gbc.writeMem(0xf061, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xa, gbc.a());
        EXPECT(0x57, gbc.b());
        EXPECT(0x25, gbc.c());
        EXPECT(0xfa, gbc.d());
        EXPECT(0x77, gbc.e());
        EXPECT(0x52, gbc.h());
        EXPECT(0xbb, gbc.l());
        EXPECT(0xf061, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0xd3b1));
        EXPECT(0xb2, gbc.readMem(0xf061));
        EXPECT(0xd3, gbc.readMem(0xf062));
        // CF 0026
        gbc.setState(0x9282, 0xdd2c, 0x7d50, 0xff6a, 0x37ea, 0xe983, 0x0, 0x0);
        gbc.writeMem(0x9282, { 0xcf });
        gbc.writeMem(0xdd2a, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x7d, gbc.a());
        EXPECT(0xff, gbc.b());
        EXPECT(0x6a, gbc.c());
        EXPECT(0x37, gbc.d());
        EXPECT(0xea, gbc.e());
        EXPECT(0xe9, gbc.h());
        EXPECT(0x83, gbc.l());
        EXPECT(0xdd2a, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0x9282));
        EXPECT(0x83, gbc.readMem(0xdd2a));
        EXPECT(0x92, gbc.readMem(0xdd2b));
        // CF 0027
        gbc.setState(0x95d4, 0xae1c, 0x1900, 0xd47f, 0x78ec, 0x7cee, 0x0, 0x1);
        gbc.writeMem(0x95d4, { 0xcf });
        gbc.writeMem(0xae1a, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x19, gbc.a());
        EXPECT(0xd4, gbc.b());
        EXPECT(0x7f, gbc.c());
        EXPECT(0x78, gbc.d());
        EXPECT(0xec, gbc.e());
        EXPECT(0x7c, gbc.h());
        EXPECT(0xee, gbc.l());
        EXPECT(0xae1a, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0x95d4));
        EXPECT(0xd5, gbc.readMem(0xae1a));
        EXPECT(0x95, gbc.readMem(0xae1b));
        // CF 0028
        gbc.setState(0x5ce1, 0x8e69, 0xb3e0, 0x2b39, 0xd102, 0xd628, 0x1, 0x1);
        gbc.writeMem(0x5ce1, { 0xcf });
        gbc.writeMem(0x8e67, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xb3, gbc.a());
        EXPECT(0x2b, gbc.b());
        EXPECT(0x39, gbc.c());
        EXPECT(0xd1, gbc.d());
        EXPECT(0x2, gbc.e());
        EXPECT(0xd6, gbc.h());
        EXPECT(0x28, gbc.l());
        EXPECT(0x8e67, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xe2, gbc.readMem(0x8e67));
        EXPECT(0x5c, gbc.readMem(0x8e68));
        // CF 0029
        gbc.setState(0x99f1, 0xe093, 0x5980, 0xf2b5, 0x58cd, 0xc3e5, 0x1, 0x0);
        gbc.writeMem(0x99f1, { 0xcf });
        gbc.writeMem(0xe091, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x59, gbc.a());
        EXPECT(0xf2, gbc.b());
        EXPECT(0xb5, gbc.c());
        EXPECT(0x58, gbc.d());
        EXPECT(0xcd, gbc.e());
        EXPECT(0xc3, gbc.h());
        EXPECT(0xe5, gbc.l());
        EXPECT(0xe091, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0x99f1));
        EXPECT(0xf2, gbc.readMem(0xe091));
        EXPECT(0x99, gbc.readMem(0xe092));
        // CF 002A
        gbc.setState(0xa4d8, 0x8729, 0x59b0, 0x92ec, 0xeb99, 0x9fbf, 0x0, 0x0);
        gbc.writeMem(0x8727, { 0x0, 0x0 });
        gbc.writeMem(0xa4d8, { 0xcf });
        gbc.step();
        EXPECT(0x59, gbc.a());
        EXPECT(0x92, gbc.b());
        EXPECT(0xec, gbc.c());
        EXPECT(0xeb, gbc.d());
        EXPECT(0x99, gbc.e());
        EXPECT(0x9f, gbc.h());
        EXPECT(0xbf, gbc.l());
        EXPECT(0x8727, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xd9, gbc.readMem(0x8727));
        EXPECT(0xa4, gbc.readMem(0x8728));
        EXPECT(0xcf, gbc.readMem(0xa4d8));
        // CF 002C
        gbc.setState(0x8f0e, 0xc036, 0x8db0, 0xc2ef, 0x480e, 0xb282, 0x1, 0x0);
        gbc.writeMem(0x8f0e, { 0xcf });
        gbc.writeMem(0xc034, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x8d, gbc.a());
        EXPECT(0xc2, gbc.b());
        EXPECT(0xef, gbc.c());
        EXPECT(0x48, gbc.d());
        EXPECT(0xe, gbc.e());
        EXPECT(0xb2, gbc.h());
        EXPECT(0x82, gbc.l());
        EXPECT(0xc034, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0x8f0e));
        EXPECT(0xf, gbc.readMem(0xc034));
        EXPECT(0x8f, gbc.readMem(0xc035));
        // CF 002E
        gbc.setState(0x25ad, 0xb966, 0xdcd0, 0x78db, 0x9570, 0x399e, 0x0, 0x1);
        gbc.writeMem(0x25ad, { 0xcf });
        gbc.writeMem(0xb964, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xdc, gbc.a());
        EXPECT(0x78, gbc.b());
        EXPECT(0xdb, gbc.c());
        EXPECT(0x95, gbc.d());
        EXPECT(0x70, gbc.e());
        EXPECT(0x39, gbc.h());
        EXPECT(0x9e, gbc.l());
        EXPECT(0xb964, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xae, gbc.readMem(0xb964));
        EXPECT(0x25, gbc.readMem(0xb965));
        // CF 002F
        gbc.setState(0xe572, 0xdd06, 0x9620, 0x8901, 0x48d4, 0x3d63, 0x1, 0x1);
        gbc.writeMem(0xdd04, { 0x0, 0x0 });
        gbc.writeMem(0xe572, { 0xcf });
        gbc.step();
        EXPECT(0x96, gbc.a());
        EXPECT(0x89, gbc.b());
        EXPECT(0x1, gbc.c());
        EXPECT(0x48, gbc.d());
        EXPECT(0xd4, gbc.e());
        EXPECT(0x3d, gbc.h());
        EXPECT(0x63, gbc.l());
        EXPECT(0xdd04, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x73, gbc.readMem(0xdd04));
        EXPECT(0xe5, gbc.readMem(0xdd05));
        EXPECT(0xcf, gbc.readMem(0xe572));
        // CF 0030
        gbc.setState(0x484b, 0xf1f4, 0x77b0, 0xee33, 0x2b7c, 0x2fcb, 0x0, 0x1);
        gbc.writeMem(0x484b, { 0xcf });
        gbc.writeMem(0xf1f2, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x77, gbc.a());
        EXPECT(0xee, gbc.b());
        EXPECT(0x33, gbc.c());
        EXPECT(0x2b, gbc.d());
        EXPECT(0x7c, gbc.e());
        EXPECT(0x2f, gbc.h());
        EXPECT(0xcb, gbc.l());
        EXPECT(0xf1f2, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x4c, gbc.readMem(0xf1f2));
        EXPECT(0x48, gbc.readMem(0xf1f3));
        // CF 0032
        gbc.setState(0x5518, 0xff7e, 0xeb30, 0x7a04, 0x32d9, 0xb7bb, 0x1, 0x1);
        gbc.writeMem(0x5518, { 0xcf });
        gbc.writeMem(0xff7c, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xeb, gbc.a());
        EXPECT(0x7a, gbc.b());
        EXPECT(0x4, gbc.c());
        EXPECT(0x32, gbc.d());
        EXPECT(0xd9, gbc.e());
        EXPECT(0xb7, gbc.h());
        EXPECT(0xbb, gbc.l());
        EXPECT(0xff7c, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x19, gbc.readMem(0xff7c));
        EXPECT(0x55, gbc.readMem(0xff7d));
        // CF 0034
        gbc.setState(0x192e, 0xbe08, 0x67a0, 0x3971, 0x31db, 0x482c, 0x0, 0x0);
        gbc.writeMem(0x192e, { 0xcf });
        gbc.writeMem(0xbe06, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x67, gbc.a());
        EXPECT(0x39, gbc.b());
        EXPECT(0x71, gbc.c());
        EXPECT(0x31, gbc.d());
        EXPECT(0xdb, gbc.e());
        EXPECT(0x48, gbc.h());
        EXPECT(0x2c, gbc.l());
        EXPECT(0xbe06, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x2f, gbc.readMem(0xbe06));
        EXPECT(0x19, gbc.readMem(0xbe07));
        // CF 0037
        gbc.setState(0x750c, 0xe8e0, 0xce70, 0x8eb5, 0x26c2, 0xb3f5, 0x1, 0x1);
        gbc.writeMem(0x750c, { 0xcf });
        gbc.writeMem(0xe8de, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xce, gbc.a());
        EXPECT(0x8e, gbc.b());
        EXPECT(0xb5, gbc.c());
        EXPECT(0x26, gbc.d());
        EXPECT(0xc2, gbc.e());
        EXPECT(0xb3, gbc.h());
        EXPECT(0xf5, gbc.l());
        EXPECT(0xe8de, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xd, gbc.readMem(0xe8de));
        EXPECT(0x75, gbc.readMem(0xe8df));
        // CF 003C
        gbc.setState(0x2c8c, 0xb023, 0x10f0, 0x4ba, 0x4c2a, 0x359c, 0x1, 0x1);
        gbc.writeMem(0x2c8c, { 0xcf });
        gbc.writeMem(0xb021, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x10, gbc.a());
        EXPECT(0x4, gbc.b());
        EXPECT(0xba, gbc.c());
        EXPECT(0x4c, gbc.d());
        EXPECT(0x2a, gbc.e());
        EXPECT(0x35, gbc.h());
        EXPECT(0x9c, gbc.l());
        EXPECT(0xb021, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x8d, gbc.readMem(0xb021));
        EXPECT(0x2c, gbc.readMem(0xb022));
        // CF 003D
        gbc.setState(0x4903, 0xfe8c, 0x10, 0x7845, 0xfad3, 0xdb11, 0x0, 0x0);
        gbc.writeMem(0x4903, { 0xcf });
        gbc.writeMem(0xfe8a, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x78, gbc.b());
        EXPECT(0x45, gbc.c());
        EXPECT(0xfa, gbc.d());
        EXPECT(0xd3, gbc.e());
        EXPECT(0xdb, gbc.h());
        EXPECT(0x11, gbc.l());
        EXPECT(0xfe8a, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x4, gbc.readMem(0xfe8a));
        EXPECT(0x49, gbc.readMem(0xfe8b));
        // CF 003E
        gbc.setState(0xc13, 0xfce8, 0x480, 0xd2b0, 0x8c90, 0xffac, 0x0, 0x0);
        gbc.writeMem(0xc13, { 0xcf });
        gbc.writeMem(0xfce6, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x4, gbc.a());
        EXPECT(0xd2, gbc.b());
        EXPECT(0xb0, gbc.c());
        EXPECT(0x8c, gbc.d());
        EXPECT(0x90, gbc.e());
        EXPECT(0xff, gbc.h());
        EXPECT(0xac, gbc.l());
        EXPECT(0xfce6, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x14, gbc.readMem(0xfce6));
        EXPECT(0xc, gbc.readMem(0xfce7));
        // CF 003F
        gbc.setState(0x77b3, 0xd5fa, 0x1350, 0x27a9, 0x25dd, 0x16bd, 0x0, 0x0);
        gbc.writeMem(0x77b3, { 0xcf });
        gbc.writeMem(0xd5f8, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x13, gbc.a());
        EXPECT(0x27, gbc.b());
        EXPECT(0xa9, gbc.c());
        EXPECT(0x25, gbc.d());
        EXPECT(0xdd, gbc.e());
        EXPECT(0x16, gbc.h());
        EXPECT(0xbd, gbc.l());
        EXPECT(0xd5f8, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xb4, gbc.readMem(0xd5f8));
        EXPECT(0x77, gbc.readMem(0xd5f9));
        // CF 0040
        gbc.setState(0x4e94, 0xd9d9, 0x25b0, 0xa03a, 0xa7b0, 0xdc19, 0x1, 0x1);
        gbc.writeMem(0x4e94, { 0xcf });
        gbc.writeMem(0xd9d7, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x25, gbc.a());
        EXPECT(0xa0, gbc.b());
        EXPECT(0x3a, gbc.c());
        EXPECT(0xa7, gbc.d());
        EXPECT(0xb0, gbc.e());
        EXPECT(0xdc, gbc.h());
        EXPECT(0x19, gbc.l());
        EXPECT(0xd9d7, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x95, gbc.readMem(0xd9d7));
        EXPECT(0x4e, gbc.readMem(0xd9d8));
        // CF 0041
        gbc.setState(0x3f37, 0x8eb9, 0xce60, 0x86ac, 0x6e5c, 0xf149, 0x0, 0x0);
        gbc.writeMem(0x3f37, { 0xcf });
        gbc.writeMem(0x8eb7, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xce, gbc.a());
        EXPECT(0x86, gbc.b());
        EXPECT(0xac, gbc.c());
        EXPECT(0x6e, gbc.d());
        EXPECT(0x5c, gbc.e());
        EXPECT(0xf1, gbc.h());
        EXPECT(0x49, gbc.l());
        EXPECT(0x8eb7, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x38, gbc.readMem(0x8eb7));
        EXPECT(0x3f, gbc.readMem(0x8eb8));
        // CF 0043
        gbc.setState(0x302, 0x82e2, 0x4d30, 0x546d, 0x956, 0xfb69, 0x1, 0x1);
        gbc.writeMem(0x302, { 0xcf });
        gbc.writeMem(0x82e0, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x4d, gbc.a());
        EXPECT(0x54, gbc.b());
        EXPECT(0x6d, gbc.c());
        EXPECT(0x9, gbc.d());
        EXPECT(0x56, gbc.e());
        EXPECT(0xfb, gbc.h());
        EXPECT(0x69, gbc.l());
        EXPECT(0x82e0, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x3, gbc.readMem(0x82e0));
        EXPECT(0x3, gbc.readMem(0x82e1));
        // CF 0044
        gbc.setState(0x8fa2, 0xe766, 0xb8f0, 0xcee3, 0xfd3c, 0x8bd7, 0x1, 0x0);
        gbc.writeMem(0x8fa2, { 0xcf });
        gbc.writeMem(0xe764, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xb8, gbc.a());
        EXPECT(0xce, gbc.b());
        EXPECT(0xe3, gbc.c());
        EXPECT(0xfd, gbc.d());
        EXPECT(0x3c, gbc.e());
        EXPECT(0x8b, gbc.h());
        EXPECT(0xd7, gbc.l());
        EXPECT(0xe764, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0x8fa2));
        EXPECT(0xa3, gbc.readMem(0xe764));
        EXPECT(0x8f, gbc.readMem(0xe765));
        // CF 0045
        gbc.setState(0x4c39, 0xb5cf, 0xd380, 0xc9d7, 0x4285, 0xdd72, 0x1, 0x0);
        gbc.writeMem(0x4c39, { 0xcf });
        gbc.writeMem(0xb5cd, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xd3, gbc.a());
        EXPECT(0xc9, gbc.b());
        EXPECT(0xd7, gbc.c());
        EXPECT(0x42, gbc.d());
        EXPECT(0x85, gbc.e());
        EXPECT(0xdd, gbc.h());
        EXPECT(0x72, gbc.l());
        EXPECT(0xb5cd, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x3a, gbc.readMem(0xb5cd));
        EXPECT(0x4c, gbc.readMem(0xb5ce));
        // CF 004A
        gbc.setState(0x5ad1, 0xd504, 0x8ee0, 0xce29, 0xb957, 0x7dcb, 0x1, 0x0);
        gbc.writeMem(0x5ad1, { 0xcf });
        gbc.writeMem(0xd502, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x8e, gbc.a());
        EXPECT(0xce, gbc.b());
        EXPECT(0x29, gbc.c());
        EXPECT(0xb9, gbc.d());
        EXPECT(0x57, gbc.e());
        EXPECT(0x7d, gbc.h());
        EXPECT(0xcb, gbc.l());
        EXPECT(0xd502, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xd2, gbc.readMem(0xd502));
        EXPECT(0x5a, gbc.readMem(0xd503));
        // CF 004B
        gbc.setState(0x96ea, 0x99a2, 0xf6c0, 0xad4a, 0x89c4, 0x66f0, 0x0, 0x0);
        gbc.writeMem(0x96ea, { 0xcf });
        gbc.writeMem(0x99a0, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xf6, gbc.a());
        EXPECT(0xad, gbc.b());
        EXPECT(0x4a, gbc.c());
        EXPECT(0x89, gbc.d());
        EXPECT(0xc4, gbc.e());
        EXPECT(0x66, gbc.h());
        EXPECT(0xf0, gbc.l());
        EXPECT(0x99a0, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0x96ea));
        EXPECT(0xeb, gbc.readMem(0x99a0));
        EXPECT(0x96, gbc.readMem(0x99a1));
        // CF 004C
        gbc.setState(0xbf9f, 0xe963, 0x4290, 0x23ca, 0x54b0, 0x7b57, 0x0, 0x1);
        gbc.writeMem(0xbf9f, { 0xcf });
        gbc.writeMem(0xe961, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x42, gbc.a());
        EXPECT(0x23, gbc.b());
        EXPECT(0xca, gbc.c());
        EXPECT(0x54, gbc.d());
        EXPECT(0xb0, gbc.e());
        EXPECT(0x7b, gbc.h());
        EXPECT(0x57, gbc.l());
        EXPECT(0xe961, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0xbf9f));
        EXPECT(0xa0, gbc.readMem(0xe961));
        EXPECT(0xbf, gbc.readMem(0xe962));
        // CF 0050
        gbc.setState(0xdf99, 0xee39, 0xd650, 0x233c, 0xb26, 0x9d2c, 0x0, 0x1);
        gbc.writeMem(0xdf99, { 0xcf });
        gbc.writeMem(0xee37, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xd6, gbc.a());
        EXPECT(0x23, gbc.b());
        EXPECT(0x3c, gbc.c());
        EXPECT(0xb, gbc.d());
        EXPECT(0x26, gbc.e());
        EXPECT(0x9d, gbc.h());
        EXPECT(0x2c, gbc.l());
        EXPECT(0xee37, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0xdf99));
        EXPECT(0x9a, gbc.readMem(0xee37));
        EXPECT(0xdf, gbc.readMem(0xee38));
        // CF 0053
        gbc.setState(0xafad, 0xdca5, 0xa9c0, 0xc9b7, 0x4512, 0x8dc0, 0x1, 0x0);
        gbc.writeMem(0xafad, { 0xcf });
        gbc.writeMem(0xdca3, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xa9, gbc.a());
        EXPECT(0xc9, gbc.b());
        EXPECT(0xb7, gbc.c());
        EXPECT(0x45, gbc.d());
        EXPECT(0x12, gbc.e());
        EXPECT(0x8d, gbc.h());
        EXPECT(0xc0, gbc.l());
        EXPECT(0xdca3, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0xafad));
        EXPECT(0xae, gbc.readMem(0xdca3));
        EXPECT(0xaf, gbc.readMem(0xdca4));
        // CF 0056
        gbc.setState(0x54cf, 0x99d1, 0x4980, 0x498c, 0x64af, 0xf97b, 0x1, 0x0);
        gbc.writeMem(0x54cf, { 0xcf });
        gbc.writeMem(0x99cf, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x49, gbc.a());
        EXPECT(0x49, gbc.b());
        EXPECT(0x8c, gbc.c());
        EXPECT(0x64, gbc.d());
        EXPECT(0xaf, gbc.e());
        EXPECT(0xf9, gbc.h());
        EXPECT(0x7b, gbc.l());
        EXPECT(0x99cf, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xd0, gbc.readMem(0x99cf));
        EXPECT(0x54, gbc.readMem(0x99d0));
        // CF 0057
        gbc.setState(0x1817, 0x9b5b, 0x4a0, 0xcba1, 0x571c, 0x190b, 0x0, 0x0);
        gbc.writeMem(0x1817, { 0xcf });
        gbc.writeMem(0x9b59, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x4, gbc.a());
        EXPECT(0xcb, gbc.b());
        EXPECT(0xa1, gbc.c());
        EXPECT(0x57, gbc.d());
        EXPECT(0x1c, gbc.e());
        EXPECT(0x19, gbc.h());
        EXPECT(0xb, gbc.l());
        EXPECT(0x9b59, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x18, gbc.readMem(0x9b59));
        EXPECT(0x18, gbc.readMem(0x9b5a));
        // CF 0058
        gbc.setState(0xdfa4, 0x8015, 0xdf90, 0xf3e4, 0x1f13, 0x3a98, 0x1, 0x1);
        gbc.writeMem(0x8013, { 0x0, 0x0 });
        gbc.writeMem(0xdfa4, { 0xcf });
        gbc.step();
        EXPECT(0xdf, gbc.a());
        EXPECT(0xf3, gbc.b());
        EXPECT(0xe4, gbc.c());
        EXPECT(0x1f, gbc.d());
        EXPECT(0x13, gbc.e());
        EXPECT(0x3a, gbc.h());
        EXPECT(0x98, gbc.l());
        EXPECT(0x8013, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xa5, gbc.readMem(0x8013));
        EXPECT(0xdf, gbc.readMem(0x8014));
        EXPECT(0xcf, gbc.readMem(0xdfa4));
        // CF 0059
        gbc.setState(0x80d1, 0xaa88, 0x5370, 0xfe7c, 0x3095, 0xda05, 0x1, 0x0);
        gbc.writeMem(0x80d1, { 0xcf });
        gbc.writeMem(0xaa86, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x53, gbc.a());
        EXPECT(0xfe, gbc.b());
        EXPECT(0x7c, gbc.c());
        EXPECT(0x30, gbc.d());
        EXPECT(0x95, gbc.e());
        EXPECT(0xda, gbc.h());
        EXPECT(0x5, gbc.l());
        EXPECT(0xaa86, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0x80d1));
        EXPECT(0xd2, gbc.readMem(0xaa86));
        EXPECT(0x80, gbc.readMem(0xaa87));
        // CF 005A
        gbc.setState(0x815b, 0x871a, 0xd130, 0x81a1, 0xfb69, 0x99e4, 0x0, 0x0);
        gbc.writeMem(0x815b, { 0xcf });
        gbc.writeMem(0x8718, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xd1, gbc.a());
        EXPECT(0x81, gbc.b());
        EXPECT(0xa1, gbc.c());
        EXPECT(0xfb, gbc.d());
        EXPECT(0x69, gbc.e());
        EXPECT(0x99, gbc.h());
        EXPECT(0xe4, gbc.l());
        EXPECT(0x8718, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0x815b));
        EXPECT(0x5c, gbc.readMem(0x8718));
        EXPECT(0x81, gbc.readMem(0x8719));
        // CF 005B
        gbc.setState(0xcbf0, 0xf315, 0xbcb0, 0x8192, 0x9c14, 0x5d2e, 0x1, 0x1);
        gbc.writeMem(0xcbf0, { 0xcf });
        gbc.writeMem(0xf313, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xbc, gbc.a());
        EXPECT(0x81, gbc.b());
        EXPECT(0x92, gbc.c());
        EXPECT(0x9c, gbc.d());
        EXPECT(0x14, gbc.e());
        EXPECT(0x5d, gbc.h());
        EXPECT(0x2e, gbc.l());
        EXPECT(0xf313, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0xcbf0));
        EXPECT(0xf1, gbc.readMem(0xf313));
        EXPECT(0xcb, gbc.readMem(0xf314));
        // CF 005C
        gbc.setState(0xeee6, 0x84c9, 0x6100, 0x98b, 0xa845, 0x934a, 0x1, 0x1);
        gbc.writeMem(0x84c7, { 0x0, 0x0 });
        gbc.writeMem(0xeee6, { 0xcf });
        gbc.step();
        EXPECT(0x61, gbc.a());
        EXPECT(0x9, gbc.b());
        EXPECT(0x8b, gbc.c());
        EXPECT(0xa8, gbc.d());
        EXPECT(0x45, gbc.e());
        EXPECT(0x93, gbc.h());
        EXPECT(0x4a, gbc.l());
        EXPECT(0x84c7, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xe7, gbc.readMem(0x84c7));
        EXPECT(0xee, gbc.readMem(0x84c8));
        EXPECT(0xcf, gbc.readMem(0xeee6));
        // CF 005D
        gbc.setState(0x804, 0x91f3, 0x3120, 0x16d1, 0xa8eb, 0xdd23, 0x1, 0x0);
        gbc.writeMem(0x804, { 0xcf });
        gbc.writeMem(0x91f1, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x31, gbc.a());
        EXPECT(0x16, gbc.b());
        EXPECT(0xd1, gbc.c());
        EXPECT(0xa8, gbc.d());
        EXPECT(0xeb, gbc.e());
        EXPECT(0xdd, gbc.h());
        EXPECT(0x23, gbc.l());
        EXPECT(0x91f1, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x5, gbc.readMem(0x91f1));
        EXPECT(0x8, gbc.readMem(0x91f2));
        // CF 005F
        gbc.setState(0xb36f, 0xbe62, 0x8dd0, 0x835b, 0xeb3d, 0x5b45, 0x1, 0x1);
        gbc.writeMem(0xb36f, { 0xcf });
        gbc.writeMem(0xbe60, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x8d, gbc.a());
        EXPECT(0x83, gbc.b());
        EXPECT(0x5b, gbc.c());
        EXPECT(0xeb, gbc.d());
        EXPECT(0x3d, gbc.e());
        EXPECT(0x5b, gbc.h());
        EXPECT(0x45, gbc.l());
        EXPECT(0xbe60, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0xb36f));
        EXPECT(0x70, gbc.readMem(0xbe60));
        EXPECT(0xb3, gbc.readMem(0xbe61));
        // CF 0061
        gbc.setState(0x73dc, 0xa8ed, 0xc210, 0x24d0, 0x8100, 0xed, 0x0, 0x1);
        gbc.writeMem(0x73dc, { 0xcf });
        gbc.writeMem(0xa8eb, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xc2, gbc.a());
        EXPECT(0x24, gbc.b());
        EXPECT(0xd0, gbc.c());
        EXPECT(0x81, gbc.d());
        EXPECT(0x0, gbc.e());
        EXPECT(0x0, gbc.h());
        EXPECT(0xed, gbc.l());
        EXPECT(0xa8eb, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdd, gbc.readMem(0xa8eb));
        EXPECT(0x73, gbc.readMem(0xa8ec));
        // CF 0063
        gbc.setState(0xa67b, 0xfa53, 0x87b0, 0xf734, 0x4cb0, 0x2d48, 0x1, 0x0);
        gbc.writeMem(0xa67b, { 0xcf });
        gbc.writeMem(0xfa51, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x87, gbc.a());
        EXPECT(0xf7, gbc.b());
        EXPECT(0x34, gbc.c());
        EXPECT(0x4c, gbc.d());
        EXPECT(0xb0, gbc.e());
        EXPECT(0x2d, gbc.h());
        EXPECT(0x48, gbc.l());
        EXPECT(0xfa51, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0xa67b));
        EXPECT(0x7c, gbc.readMem(0xfa51));
        EXPECT(0xa6, gbc.readMem(0xfa52));
        // CF 0066
        gbc.setState(0x7056, 0xb300, 0x7aa0, 0x33bf, 0xc878, 0x9037, 0x0, 0x1);
        gbc.writeMem(0x7056, { 0xcf });
        gbc.writeMem(0xb2fe, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x7a, gbc.a());
        EXPECT(0x33, gbc.b());
        EXPECT(0xbf, gbc.c());
        EXPECT(0xc8, gbc.d());
        EXPECT(0x78, gbc.e());
        EXPECT(0x90, gbc.h());
        EXPECT(0x37, gbc.l());
        EXPECT(0xb2fe, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x57, gbc.readMem(0xb2fe));
        EXPECT(0x70, gbc.readMem(0xb2ff));
        // CF 0068
        gbc.setState(0x356, 0x96fa, 0x9990, 0xb82c, 0x464e, 0x3e0c, 0x0, 0x1);
        gbc.writeMem(0x356, { 0xcf });
        gbc.writeMem(0x96f8, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x99, gbc.a());
        EXPECT(0xb8, gbc.b());
        EXPECT(0x2c, gbc.c());
        EXPECT(0x46, gbc.d());
        EXPECT(0x4e, gbc.e());
        EXPECT(0x3e, gbc.h());
        EXPECT(0xc, gbc.l());
        EXPECT(0x96f8, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x57, gbc.readMem(0x96f8));
        EXPECT(0x3, gbc.readMem(0x96f9));
        // CF 0069
        gbc.setState(0xc2b3, 0xe5a5, 0x2c70, 0xcb06, 0xbea5, 0x361d, 0x1, 0x0);
        gbc.writeMem(0xc2b3, { 0xcf });
        gbc.writeMem(0xe5a3, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x2c, gbc.a());
        EXPECT(0xcb, gbc.b());
        EXPECT(0x6, gbc.c());
        EXPECT(0xbe, gbc.d());
        EXPECT(0xa5, gbc.e());
        EXPECT(0x36, gbc.h());
        EXPECT(0x1d, gbc.l());
        EXPECT(0xe5a3, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0xc2b3));
        EXPECT(0xb4, gbc.readMem(0xe5a3));
        EXPECT(0xc2, gbc.readMem(0xe5a4));
        // CF 006A
        gbc.setState(0xc13e, 0xce98, 0x2fa0, 0xd813, 0x32b1, 0xf80e, 0x0, 0x1);
        gbc.writeMem(0xc13e, { 0xcf });
        gbc.writeMem(0xce96, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x2f, gbc.a());
        EXPECT(0xd8, gbc.b());
        EXPECT(0x13, gbc.c());
        EXPECT(0x32, gbc.d());
        EXPECT(0xb1, gbc.e());
        EXPECT(0xf8, gbc.h());
        EXPECT(0xe, gbc.l());
        EXPECT(0xce96, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0xc13e));
        EXPECT(0x3f, gbc.readMem(0xce96));
        EXPECT(0xc1, gbc.readMem(0xce97));
        // CF 006B
        gbc.setState(0x3503, 0xc492, 0x770, 0x866, 0xfef7, 0x72c6, 0x0, 0x1);
        gbc.writeMem(0x3503, { 0xcf });
        gbc.writeMem(0xc490, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x7, gbc.a());
        EXPECT(0x8, gbc.b());
        EXPECT(0x66, gbc.c());
        EXPECT(0xfe, gbc.d());
        EXPECT(0xf7, gbc.e());
        EXPECT(0x72, gbc.h());
        EXPECT(0xc6, gbc.l());
        EXPECT(0xc490, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x4, gbc.readMem(0xc490));
        EXPECT(0x35, gbc.readMem(0xc491));
        // CF 006C
        gbc.setState(0xabfb, 0xb67a, 0x8a50, 0xb320, 0x61f9, 0xecd0, 0x0, 0x1);
        gbc.writeMem(0xabfb, { 0xcf });
        gbc.writeMem(0xb678, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x8a, gbc.a());
        EXPECT(0xb3, gbc.b());
        EXPECT(0x20, gbc.c());
        EXPECT(0x61, gbc.d());
        EXPECT(0xf9, gbc.e());
        EXPECT(0xec, gbc.h());
        EXPECT(0xd0, gbc.l());
        EXPECT(0xb678, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0xabfb));
        EXPECT(0xfc, gbc.readMem(0xb678));
        EXPECT(0xab, gbc.readMem(0xb679));
        // CF 006D
        gbc.setState(0x781b, 0x9492, 0xee20, 0xc07a, 0x7a02, 0xf7b8, 0x0, 0x0);
        gbc.writeMem(0x781b, { 0xcf });
        gbc.writeMem(0x9490, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xee, gbc.a());
        EXPECT(0xc0, gbc.b());
        EXPECT(0x7a, gbc.c());
        EXPECT(0x7a, gbc.d());
        EXPECT(0x2, gbc.e());
        EXPECT(0xf7, gbc.h());
        EXPECT(0xb8, gbc.l());
        EXPECT(0x9490, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x1c, gbc.readMem(0x9490));
        EXPECT(0x78, gbc.readMem(0x9491));
        // CF 0075
        gbc.setState(0xe24b, 0xb3eb, 0x7f00, 0x1dd1, 0xea8b, 0x518d, 0x0, 0x0);
        gbc.writeMem(0xb3e9, { 0x0, 0x0 });
        gbc.writeMem(0xe24b, { 0xcf });
        gbc.step();
        EXPECT(0x7f, gbc.a());
        EXPECT(0x1d, gbc.b());
        EXPECT(0xd1, gbc.c());
        EXPECT(0xea, gbc.d());
        EXPECT(0x8b, gbc.e());
        EXPECT(0x51, gbc.h());
        EXPECT(0x8d, gbc.l());
        EXPECT(0xb3e9, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x4c, gbc.readMem(0xb3e9));
        EXPECT(0xe2, gbc.readMem(0xb3ea));
        EXPECT(0xcf, gbc.readMem(0xe24b));
        // CF 0076
        gbc.setState(0xb4a4, 0xf6b7, 0x9c90, 0xb81d, 0x6964, 0x3fd7, 0x1, 0x1);
        gbc.writeMem(0xb4a4, { 0xcf });
        gbc.writeMem(0xf6b5, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x9c, gbc.a());
        EXPECT(0xb8, gbc.b());
        EXPECT(0x1d, gbc.c());
        EXPECT(0x69, gbc.d());
        EXPECT(0x64, gbc.e());
        EXPECT(0x3f, gbc.h());
        EXPECT(0xd7, gbc.l());
        EXPECT(0xf6b5, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0xb4a4));
        EXPECT(0xa5, gbc.readMem(0xf6b5));
        EXPECT(0xb4, gbc.readMem(0xf6b6));
        // CF 0077
        gbc.setState(0xeb06, 0xc425, 0x8ac0, 0xc3ac, 0x7869, 0x7a3c, 0x1, 0x1);
        gbc.writeMem(0xc423, { 0x0, 0x0 });
        gbc.writeMem(0xeb06, { 0xcf });
        gbc.step();
        EXPECT(0x8a, gbc.a());
        EXPECT(0xc3, gbc.b());
        EXPECT(0xac, gbc.c());
        EXPECT(0x78, gbc.d());
        EXPECT(0x69, gbc.e());
        EXPECT(0x7a, gbc.h());
        EXPECT(0x3c, gbc.l());
        EXPECT(0xc423, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x7, gbc.readMem(0xc423));
        EXPECT(0xeb, gbc.readMem(0xc424));
        EXPECT(0xcf, gbc.readMem(0xeb06));
        // CF 007C
        gbc.setState(0x48d0, 0xfcfe, 0xe740, 0x1ec0, 0x5bad, 0x1937, 0x0, 0x0);
        gbc.writeMem(0x48d0, { 0xcf });
        gbc.writeMem(0xfcfc, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xe7, gbc.a());
        EXPECT(0x1e, gbc.b());
        EXPECT(0xc0, gbc.c());
        EXPECT(0x5b, gbc.d());
        EXPECT(0xad, gbc.e());
        EXPECT(0x19, gbc.h());
        EXPECT(0x37, gbc.l());
        EXPECT(0xfcfc, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xd1, gbc.readMem(0xfcfc));
        EXPECT(0x48, gbc.readMem(0xfcfd));
        // CF 007E
        gbc.setState(0x8d1c, 0x9253, 0x220, 0xb8da, 0xf230, 0x507, 0x1, 0x0);
        gbc.writeMem(0x8d1c, { 0xcf });
        gbc.writeMem(0x9251, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x2, gbc.a());
        EXPECT(0xb8, gbc.b());
        EXPECT(0xda, gbc.c());
        EXPECT(0xf2, gbc.d());
        EXPECT(0x30, gbc.e());
        EXPECT(0x5, gbc.h());
        EXPECT(0x7, gbc.l());
        EXPECT(0x9251, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0x8d1c));
        EXPECT(0x1d, gbc.readMem(0x9251));
        EXPECT(0x8d, gbc.readMem(0x9252));
        // CF 0084
        gbc.setState(0x7fe4, 0xfd9e, 0x6a20, 0x75a9, 0x8589, 0xbd58, 0x0, 0x1);
        gbc.writeMem(0x7fe4, { 0xcf });
        gbc.writeMem(0xfd9c, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x6a, gbc.a());
        EXPECT(0x75, gbc.b());
        EXPECT(0xa9, gbc.c());
        EXPECT(0x85, gbc.d());
        EXPECT(0x89, gbc.e());
        EXPECT(0xbd, gbc.h());
        EXPECT(0x58, gbc.l());
        EXPECT(0xfd9c, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xe5, gbc.readMem(0xfd9c));
        EXPECT(0x7f, gbc.readMem(0xfd9d));
        // CF 0085
        gbc.setState(0x102e, 0xf13b, 0xca60, 0x54e4, 0x4b89, 0xfbc4, 0x1, 0x1);
        gbc.writeMem(0x102e, { 0xcf });
        gbc.writeMem(0xf139, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xca, gbc.a());
        EXPECT(0x54, gbc.b());
        EXPECT(0xe4, gbc.c());
        EXPECT(0x4b, gbc.d());
        EXPECT(0x89, gbc.e());
        EXPECT(0xfb, gbc.h());
        EXPECT(0xc4, gbc.l());
        EXPECT(0xf139, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x2f, gbc.readMem(0xf139));
        EXPECT(0x10, gbc.readMem(0xf13a));
        // CF 0087
        gbc.setState(0xaef0, 0x9525, 0x4870, 0x59f2, 0xdcd6, 0x8991, 0x1, 0x1);
        gbc.writeMem(0x9523, { 0x0, 0x0 });
        gbc.writeMem(0xaef0, { 0xcf });
        gbc.step();
        EXPECT(0x48, gbc.a());
        EXPECT(0x59, gbc.b());
        EXPECT(0xf2, gbc.c());
        EXPECT(0xdc, gbc.d());
        EXPECT(0xd6, gbc.e());
        EXPECT(0x89, gbc.h());
        EXPECT(0x91, gbc.l());
        EXPECT(0x9523, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xf1, gbc.readMem(0x9523));
        EXPECT(0xae, gbc.readMem(0x9524));
        EXPECT(0xcf, gbc.readMem(0xaef0));
        // CF 0088
        gbc.setState(0xb91e, 0xfcf9, 0xb120, 0xdcaf, 0x1d97, 0x98ff, 0x1, 0x1);
        gbc.writeMem(0xb91e, { 0xcf });
        gbc.writeMem(0xfcf7, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xb1, gbc.a());
        EXPECT(0xdc, gbc.b());
        EXPECT(0xaf, gbc.c());
        EXPECT(0x1d, gbc.d());
        EXPECT(0x97, gbc.e());
        EXPECT(0x98, gbc.h());
        EXPECT(0xff, gbc.l());
        EXPECT(0xfcf7, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0xb91e));
        EXPECT(0x1f, gbc.readMem(0xfcf7));
        EXPECT(0xb9, gbc.readMem(0xfcf8));
        // CF 008B
        gbc.setState(0xcaad, 0xc5ed, 0x9250, 0xd30f, 0x122a, 0x9c0f, 0x0, 0x0);
        gbc.writeMem(0xc5eb, { 0x0, 0x0 });
        gbc.writeMem(0xcaad, { 0xcf });
        gbc.step();
        EXPECT(0x92, gbc.a());
        EXPECT(0xd3, gbc.b());
        EXPECT(0xf, gbc.c());
        EXPECT(0x12, gbc.d());
        EXPECT(0x2a, gbc.e());
        EXPECT(0x9c, gbc.h());
        EXPECT(0xf, gbc.l());
        EXPECT(0xc5eb, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xae, gbc.readMem(0xc5eb));
        EXPECT(0xca, gbc.readMem(0xc5ec));
        EXPECT(0xcf, gbc.readMem(0xcaad));
        // CF 008C
        gbc.setState(0x148a, 0x82f9, 0xdd00, 0xefc1, 0xe5d2, 0xb1d7, 0x0, 0x0);
        gbc.writeMem(0x148a, { 0xcf });
        gbc.writeMem(0x82f7, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xdd, gbc.a());
        EXPECT(0xef, gbc.b());
        EXPECT(0xc1, gbc.c());
        EXPECT(0xe5, gbc.d());
        EXPECT(0xd2, gbc.e());
        EXPECT(0xb1, gbc.h());
        EXPECT(0xd7, gbc.l());
        EXPECT(0x82f7, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x8b, gbc.readMem(0x82f7));
        EXPECT(0x14, gbc.readMem(0x82f8));
        // CF 0093
        gbc.setState(0x7b3d, 0xb9cb, 0x9df0, 0x7c2b, 0x9a84, 0x3450, 0x0, 0x1);
        gbc.writeMem(0x7b3d, { 0xcf });
        gbc.writeMem(0xb9c9, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x9d, gbc.a());
        EXPECT(0x7c, gbc.b());
        EXPECT(0x2b, gbc.c());
        EXPECT(0x9a, gbc.d());
        EXPECT(0x84, gbc.e());
        EXPECT(0x34, gbc.h());
        EXPECT(0x50, gbc.l());
        EXPECT(0xb9c9, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x3e, gbc.readMem(0xb9c9));
        EXPECT(0x7b, gbc.readMem(0xb9ca));
        // CF 0094
        gbc.setState(0xbadd, 0xb7a0, 0xd200, 0x6db3, 0xdf9e, 0x711d, 0x0, 0x1);
        gbc.writeMem(0xb79e, { 0x0, 0x0 });
        gbc.writeMem(0xbadd, { 0xcf });
        gbc.step();
        EXPECT(0xd2, gbc.a());
        EXPECT(0x6d, gbc.b());
        EXPECT(0xb3, gbc.c());
        EXPECT(0xdf, gbc.d());
        EXPECT(0x9e, gbc.e());
        EXPECT(0x71, gbc.h());
        EXPECT(0x1d, gbc.l());
        EXPECT(0xb79e, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xde, gbc.readMem(0xb79e));
        EXPECT(0xba, gbc.readMem(0xb79f));
        EXPECT(0xcf, gbc.readMem(0xbadd));
        // CF 0096
        gbc.setState(0x3330, 0xb372, 0x9090, 0xf7fd, 0xc4ec, 0xc6ab, 0x1, 0x1);
        gbc.writeMem(0x3330, { 0xcf });
        gbc.writeMem(0xb370, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x90, gbc.a());
        EXPECT(0xf7, gbc.b());
        EXPECT(0xfd, gbc.c());
        EXPECT(0xc4, gbc.d());
        EXPECT(0xec, gbc.e());
        EXPECT(0xc6, gbc.h());
        EXPECT(0xab, gbc.l());
        EXPECT(0xb370, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x31, gbc.readMem(0xb370));
        EXPECT(0x33, gbc.readMem(0xb371));
        // CF 0097
        gbc.setState(0xce9, 0xb7b2, 0x72f0, 0xc674, 0x5b9b, 0xd2c3, 0x1, 0x0);
        gbc.writeMem(0xce9, { 0xcf });
        gbc.writeMem(0xb7b0, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x72, gbc.a());
        EXPECT(0xc6, gbc.b());
        EXPECT(0x74, gbc.c());
        EXPECT(0x5b, gbc.d());
        EXPECT(0x9b, gbc.e());
        EXPECT(0xd2, gbc.h());
        EXPECT(0xc3, gbc.l());
        EXPECT(0xb7b0, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0xb7b0));
        EXPECT(0xc, gbc.readMem(0xb7b1));
        // CF 0098
        gbc.setState(0xdb1, 0x8b9a, 0x16b0, 0x8bf8, 0x6422, 0x8311, 0x1, 0x1);
        gbc.writeMem(0xdb1, { 0xcf });
        gbc.writeMem(0x8b98, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x16, gbc.a());
        EXPECT(0x8b, gbc.b());
        EXPECT(0xf8, gbc.c());
        EXPECT(0x64, gbc.d());
        EXPECT(0x22, gbc.e());
        EXPECT(0x83, gbc.h());
        EXPECT(0x11, gbc.l());
        EXPECT(0x8b98, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xb2, gbc.readMem(0x8b98));
        EXPECT(0xd, gbc.readMem(0x8b99));
        // CF 009C
        gbc.setState(0xea32, 0xb798, 0xa530, 0x1bbb, 0x65e6, 0xdf48, 0x1, 0x0);
        gbc.writeMem(0xb796, { 0x0, 0x0 });
        gbc.writeMem(0xea32, { 0xcf });
        gbc.step();
        EXPECT(0xa5, gbc.a());
        EXPECT(0x1b, gbc.b());
        EXPECT(0xbb, gbc.c());
        EXPECT(0x65, gbc.d());
        EXPECT(0xe6, gbc.e());
        EXPECT(0xdf, gbc.h());
        EXPECT(0x48, gbc.l());
        EXPECT(0xb796, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x33, gbc.readMem(0xb796));
        EXPECT(0xea, gbc.readMem(0xb797));
        EXPECT(0xcf, gbc.readMem(0xea32));
        // CF 009E
        gbc.setState(0x444b, 0x9882, 0x3f90, 0x9ac, 0x206f, 0x947d, 0x0, 0x1);
        gbc.writeMem(0x444b, { 0xcf });
        gbc.writeMem(0x9880, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x3f, gbc.a());
        EXPECT(0x9, gbc.b());
        EXPECT(0xac, gbc.c());
        EXPECT(0x20, gbc.d());
        EXPECT(0x6f, gbc.e());
        EXPECT(0x94, gbc.h());
        EXPECT(0x7d, gbc.l());
        EXPECT(0x9880, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x4c, gbc.readMem(0x9880));
        EXPECT(0x44, gbc.readMem(0x9881));
        // CF 00A0
        gbc.setState(0x9351, 0xc2d5, 0x8a90, 0x72a2, 0x745a, 0x98fb, 0x1, 0x1);
        gbc.writeMem(0x9351, { 0xcf });
        gbc.writeMem(0xc2d3, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x8a, gbc.a());
        EXPECT(0x72, gbc.b());
        EXPECT(0xa2, gbc.c());
        EXPECT(0x74, gbc.d());
        EXPECT(0x5a, gbc.e());
        EXPECT(0x98, gbc.h());
        EXPECT(0xfb, gbc.l());
        EXPECT(0xc2d3, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0x9351));
        EXPECT(0x52, gbc.readMem(0xc2d3));
        EXPECT(0x93, gbc.readMem(0xc2d4));
        // CF 00A1
        gbc.setState(0x6741, 0xd764, 0xdc40, 0x6741, 0x2c8b, 0x1efa, 0x0, 0x1);
        gbc.writeMem(0x6741, { 0xcf });
        gbc.writeMem(0xd762, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xdc, gbc.a());
        EXPECT(0x67, gbc.b());
        EXPECT(0x41, gbc.c());
        EXPECT(0x2c, gbc.d());
        EXPECT(0x8b, gbc.e());
        EXPECT(0x1e, gbc.h());
        EXPECT(0xfa, gbc.l());
        EXPECT(0xd762, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x42, gbc.readMem(0xd762));
        EXPECT(0x67, gbc.readMem(0xd763));
        // CF 00A2
        gbc.setState(0x5931, 0xa184, 0x9be0, 0xe8eb, 0x6b0f, 0xc9f2, 0x1, 0x0);
        gbc.writeMem(0x5931, { 0xcf });
        gbc.writeMem(0xa182, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x9b, gbc.a());
        EXPECT(0xe8, gbc.b());
        EXPECT(0xeb, gbc.c());
        EXPECT(0x6b, gbc.d());
        EXPECT(0xf, gbc.e());
        EXPECT(0xc9, gbc.h());
        EXPECT(0xf2, gbc.l());
        EXPECT(0xa182, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x32, gbc.readMem(0xa182));
        EXPECT(0x59, gbc.readMem(0xa183));
        // CF 00A4
        gbc.setState(0x27dd, 0xc654, 0x1a70, 0x3cf1, 0x7895, 0xa34c, 0x1, 0x0);
        gbc.writeMem(0x27dd, { 0xcf });
        gbc.writeMem(0xc652, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x1a, gbc.a());
        EXPECT(0x3c, gbc.b());
        EXPECT(0xf1, gbc.c());
        EXPECT(0x78, gbc.d());
        EXPECT(0x95, gbc.e());
        EXPECT(0xa3, gbc.h());
        EXPECT(0x4c, gbc.l());
        EXPECT(0xc652, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xde, gbc.readMem(0xc652));
        EXPECT(0x27, gbc.readMem(0xc653));
        // CF 00A6
        gbc.setState(0x20b2, 0xd96e, 0x7850, 0x229, 0x8f69, 0xe5f, 0x1, 0x1);
        gbc.writeMem(0x20b2, { 0xcf });
        gbc.writeMem(0xd96c, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x78, gbc.a());
        EXPECT(0x2, gbc.b());
        EXPECT(0x29, gbc.c());
        EXPECT(0x8f, gbc.d());
        EXPECT(0x69, gbc.e());
        EXPECT(0xe, gbc.h());
        EXPECT(0x5f, gbc.l());
        EXPECT(0xd96c, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xb3, gbc.readMem(0xd96c));
        EXPECT(0x20, gbc.readMem(0xd96d));
        // CF 00A8
        gbc.setState(0x9e24, 0xe75f, 0x1b80, 0x4334, 0x9d86, 0x403d, 0x0, 0x0);
        gbc.writeMem(0x9e24, { 0xcf });
        gbc.writeMem(0xe75d, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x1b, gbc.a());
        EXPECT(0x43, gbc.b());
        EXPECT(0x34, gbc.c());
        EXPECT(0x9d, gbc.d());
        EXPECT(0x86, gbc.e());
        EXPECT(0x40, gbc.h());
        EXPECT(0x3d, gbc.l());
        EXPECT(0xe75d, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0x9e24));
        EXPECT(0x25, gbc.readMem(0xe75d));
        EXPECT(0x9e, gbc.readMem(0xe75e));
        // CF 00A9
        gbc.setState(0xe6ea, 0xc16f, 0xe300, 0xe199, 0xffd5, 0xc5e9, 0x1, 0x1);
        gbc.writeMem(0xc16d, { 0x0, 0x0 });
        gbc.writeMem(0xe6ea, { 0xcf });
        gbc.step();
        EXPECT(0xe3, gbc.a());
        EXPECT(0xe1, gbc.b());
        EXPECT(0x99, gbc.c());
        EXPECT(0xff, gbc.d());
        EXPECT(0xd5, gbc.e());
        EXPECT(0xc5, gbc.h());
        EXPECT(0xe9, gbc.l());
        EXPECT(0xc16d, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xeb, gbc.readMem(0xc16d));
        EXPECT(0xe6, gbc.readMem(0xc16e));
        EXPECT(0xcf, gbc.readMem(0xe6ea));
        // CF 00AA
        gbc.setState(0x451, 0xd5fa, 0x5db0, 0xafab, 0xf19c, 0xeef7, 0x0, 0x0);
        gbc.writeMem(0x451, { 0xcf });
        gbc.writeMem(0xd5f8, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x5d, gbc.a());
        EXPECT(0xaf, gbc.b());
        EXPECT(0xab, gbc.c());
        EXPECT(0xf1, gbc.d());
        EXPECT(0x9c, gbc.e());
        EXPECT(0xee, gbc.h());
        EXPECT(0xf7, gbc.l());
        EXPECT(0xd5f8, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x52, gbc.readMem(0xd5f8));
        EXPECT(0x4, gbc.readMem(0xd5f9));
        // CF 00AB
        gbc.setState(0x7846, 0x89a3, 0xb640, 0x5899, 0x22b6, 0xa2c2, 0x0, 0x1);
        gbc.writeMem(0x7846, { 0xcf });
        gbc.writeMem(0x89a1, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xb6, gbc.a());
        EXPECT(0x58, gbc.b());
        EXPECT(0x99, gbc.c());
        EXPECT(0x22, gbc.d());
        EXPECT(0xb6, gbc.e());
        EXPECT(0xa2, gbc.h());
        EXPECT(0xc2, gbc.l());
        EXPECT(0x89a1, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x47, gbc.readMem(0x89a1));
        EXPECT(0x78, gbc.readMem(0x89a2));
        // CF 00AC
        gbc.setState(0xb606, 0x9eb9, 0x5730, 0xa646, 0xccdc, 0x8447, 0x1, 0x0);
        gbc.writeMem(0x9eb7, { 0x0, 0x0 });
        gbc.writeMem(0xb606, { 0xcf });
        gbc.step();
        EXPECT(0x57, gbc.a());
        EXPECT(0xa6, gbc.b());
        EXPECT(0x46, gbc.c());
        EXPECT(0xcc, gbc.d());
        EXPECT(0xdc, gbc.e());
        EXPECT(0x84, gbc.h());
        EXPECT(0x47, gbc.l());
        EXPECT(0x9eb7, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x7, gbc.readMem(0x9eb7));
        EXPECT(0xb6, gbc.readMem(0x9eb8));
        EXPECT(0xcf, gbc.readMem(0xb606));
        // CF 00AD
        gbc.setState(0x80a0, 0xbfbb, 0xee20, 0x8552, 0x76a3, 0xe310, 0x1, 0x0);
        gbc.writeMem(0x80a0, { 0xcf });
        gbc.writeMem(0xbfb9, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xee, gbc.a());
        EXPECT(0x85, gbc.b());
        EXPECT(0x52, gbc.c());
        EXPECT(0x76, gbc.d());
        EXPECT(0xa3, gbc.e());
        EXPECT(0xe3, gbc.h());
        EXPECT(0x10, gbc.l());
        EXPECT(0xbfb9, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0x80a0));
        EXPECT(0xa1, gbc.readMem(0xbfb9));
        EXPECT(0x80, gbc.readMem(0xbfba));
        // CF 00AE
        gbc.setState(0xa1b7, 0xcb95, 0x84f0, 0x8b39, 0xe0af, 0x26b0, 0x0, 0x0);
        gbc.writeMem(0xa1b7, { 0xcf });
        gbc.writeMem(0xcb93, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x84, gbc.a());
        EXPECT(0x8b, gbc.b());
        EXPECT(0x39, gbc.c());
        EXPECT(0xe0, gbc.d());
        EXPECT(0xaf, gbc.e());
        EXPECT(0x26, gbc.h());
        EXPECT(0xb0, gbc.l());
        EXPECT(0xcb93, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0xa1b7));
        EXPECT(0xb8, gbc.readMem(0xcb93));
        EXPECT(0xa1, gbc.readMem(0xcb94));
        // CF 00B0
        gbc.setState(0x5474, 0xc43f, 0xde0, 0x72e9, 0x1c7c, 0xe6e, 0x0, 0x1);
        gbc.writeMem(0x5474, { 0xcf });
        gbc.writeMem(0xc43d, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xd, gbc.a());
        EXPECT(0x72, gbc.b());
        EXPECT(0xe9, gbc.c());
        EXPECT(0x1c, gbc.d());
        EXPECT(0x7c, gbc.e());
        EXPECT(0xe, gbc.h());
        EXPECT(0x6e, gbc.l());
        EXPECT(0xc43d, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x75, gbc.readMem(0xc43d));
        EXPECT(0x54, gbc.readMem(0xc43e));
        // CF 00B1
        gbc.setState(0x671f, 0x9d3d, 0xf0a0, 0xf69e, 0xad9, 0x85aa, 0x1, 0x0);
        gbc.writeMem(0x671f, { 0xcf });
        gbc.writeMem(0x9d3b, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xf0, gbc.a());
        EXPECT(0xf6, gbc.b());
        EXPECT(0x9e, gbc.c());
        EXPECT(0xa, gbc.d());
        EXPECT(0xd9, gbc.e());
        EXPECT(0x85, gbc.h());
        EXPECT(0xaa, gbc.l());
        EXPECT(0x9d3b, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x20, gbc.readMem(0x9d3b));
        EXPECT(0x67, gbc.readMem(0x9d3c));
        // CF 00B2
        gbc.setState(0x14de, 0xe822, 0xc5d0, 0x1ab0, 0x6179, 0x3a76, 0x1, 0x0);
        gbc.writeMem(0x14de, { 0xcf });
        gbc.writeMem(0xe820, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xc5, gbc.a());
        EXPECT(0x1a, gbc.b());
        EXPECT(0xb0, gbc.c());
        EXPECT(0x61, gbc.d());
        EXPECT(0x79, gbc.e());
        EXPECT(0x3a, gbc.h());
        EXPECT(0x76, gbc.l());
        EXPECT(0xe820, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0xe820));
        EXPECT(0x14, gbc.readMem(0xe821));
        // CF 00B4
        gbc.setState(0x143f, 0x8c00, 0x43c0, 0x4267, 0xddb4, 0x1b09, 0x0, 0x1);
        gbc.writeMem(0x143f, { 0xcf });
        gbc.writeMem(0x8bfe, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x43, gbc.a());
        EXPECT(0x42, gbc.b());
        EXPECT(0x67, gbc.c());
        EXPECT(0xdd, gbc.d());
        EXPECT(0xb4, gbc.e());
        EXPECT(0x1b, gbc.h());
        EXPECT(0x9, gbc.l());
        EXPECT(0x8bfe, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x40, gbc.readMem(0x8bfe));
        EXPECT(0x14, gbc.readMem(0x8bff));
        // CF 00B5
        gbc.setState(0xc27c, 0x9b64, 0x9490, 0xe710, 0x1b7a, 0xcdb9, 0x1, 0x1);
        gbc.writeMem(0x9b62, { 0x0, 0x0 });
        gbc.writeMem(0xc27c, { 0xcf });
        gbc.step();
        EXPECT(0x94, gbc.a());
        EXPECT(0xe7, gbc.b());
        EXPECT(0x10, gbc.c());
        EXPECT(0x1b, gbc.d());
        EXPECT(0x7a, gbc.e());
        EXPECT(0xcd, gbc.h());
        EXPECT(0xb9, gbc.l());
        EXPECT(0x9b62, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x7d, gbc.readMem(0x9b62));
        EXPECT(0xc2, gbc.readMem(0x9b63));
        EXPECT(0xcf, gbc.readMem(0xc27c));
        // CF 00B6
        gbc.setState(0x5985, 0xeb3c, 0xe8f0, 0x3349, 0x60ee, 0x6c5, 0x0, 0x0);
        gbc.writeMem(0x5985, { 0xcf });
        gbc.writeMem(0xeb3a, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xe8, gbc.a());
        EXPECT(0x33, gbc.b());
        EXPECT(0x49, gbc.c());
        EXPECT(0x60, gbc.d());
        EXPECT(0xee, gbc.e());
        EXPECT(0x6, gbc.h());
        EXPECT(0xc5, gbc.l());
        EXPECT(0xeb3a, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x86, gbc.readMem(0xeb3a));
        EXPECT(0x59, gbc.readMem(0xeb3b));
        // CF 00B7
        gbc.setState(0x397c, 0x9d94, 0x3950, 0xbeea, 0x1516, 0x6fa3, 0x0, 0x1);
        gbc.writeMem(0x397c, { 0xcf });
        gbc.writeMem(0x9d92, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x39, gbc.a());
        EXPECT(0xbe, gbc.b());
        EXPECT(0xea, gbc.c());
        EXPECT(0x15, gbc.d());
        EXPECT(0x16, gbc.e());
        EXPECT(0x6f, gbc.h());
        EXPECT(0xa3, gbc.l());
        EXPECT(0x9d92, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x7d, gbc.readMem(0x9d92));
        EXPECT(0x39, gbc.readMem(0x9d93));
        // CF 00B9
        gbc.setState(0x1227, 0xd2c6, 0x8b40, 0x9cff, 0x6d79, 0x8f2, 0x1, 0x0);
        gbc.writeMem(0x1227, { 0xcf });
        gbc.writeMem(0xd2c4, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x8b, gbc.a());
        EXPECT(0x9c, gbc.b());
        EXPECT(0xff, gbc.c());
        EXPECT(0x6d, gbc.d());
        EXPECT(0x79, gbc.e());
        EXPECT(0x8, gbc.h());
        EXPECT(0xf2, gbc.l());
        EXPECT(0xd2c4, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x28, gbc.readMem(0xd2c4));
        EXPECT(0x12, gbc.readMem(0xd2c5));
        // CF 00BD
        gbc.setState(0xa157, 0x91f9, 0xf220, 0x2f41, 0x1e9f, 0xfbec, 0x1, 0x0);
        gbc.writeMem(0x91f7, { 0x0, 0x0 });
        gbc.writeMem(0xa157, { 0xcf });
        gbc.step();
        EXPECT(0xf2, gbc.a());
        EXPECT(0x2f, gbc.b());
        EXPECT(0x41, gbc.c());
        EXPECT(0x1e, gbc.d());
        EXPECT(0x9f, gbc.e());
        EXPECT(0xfb, gbc.h());
        EXPECT(0xec, gbc.l());
        EXPECT(0x91f7, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x58, gbc.readMem(0x91f7));
        EXPECT(0xa1, gbc.readMem(0x91f8));
        EXPECT(0xcf, gbc.readMem(0xa157));
        // CF 00BE
        gbc.setState(0xe84c, 0x9d3d, 0x5150, 0x28c9, 0xe028, 0x3669, 0x0, 0x0);
        gbc.writeMem(0x9d3b, { 0x0, 0x0 });
        gbc.writeMem(0xe84c, { 0xcf });
        gbc.step();
        EXPECT(0x51, gbc.a());
        EXPECT(0x28, gbc.b());
        EXPECT(0xc9, gbc.c());
        EXPECT(0xe0, gbc.d());
        EXPECT(0x28, gbc.e());
        EXPECT(0x36, gbc.h());
        EXPECT(0x69, gbc.l());
        EXPECT(0x9d3b, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x4d, gbc.readMem(0x9d3b));
        EXPECT(0xe8, gbc.readMem(0x9d3c));
        EXPECT(0xcf, gbc.readMem(0xe84c));
        // CF 00C0
        gbc.setState(0xc5e9, 0xe7c2, 0xb260, 0x7183, 0x83f8, 0x88aa, 0x1, 0x1);
        gbc.writeMem(0xc5e9, { 0xcf });
        gbc.writeMem(0xe7c0, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xb2, gbc.a());
        EXPECT(0x71, gbc.b());
        EXPECT(0x83, gbc.c());
        EXPECT(0x83, gbc.d());
        EXPECT(0xf8, gbc.e());
        EXPECT(0x88, gbc.h());
        EXPECT(0xaa, gbc.l());
        EXPECT(0xe7c0, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0xc5e9));
        EXPECT(0xea, gbc.readMem(0xe7c0));
        EXPECT(0xc5, gbc.readMem(0xe7c1));
        // CF 00C2
        gbc.setState(0xc553, 0x8f15, 0xd2b0, 0xb976, 0x6525, 0x5f35, 0x0, 0x0);
        gbc.writeMem(0x8f13, { 0x0, 0x0 });
        gbc.writeMem(0xc553, { 0xcf });
        gbc.step();
        EXPECT(0xd2, gbc.a());
        EXPECT(0xb9, gbc.b());
        EXPECT(0x76, gbc.c());
        EXPECT(0x65, gbc.d());
        EXPECT(0x25, gbc.e());
        EXPECT(0x5f, gbc.h());
        EXPECT(0x35, gbc.l());
        EXPECT(0x8f13, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x54, gbc.readMem(0x8f13));
        EXPECT(0xc5, gbc.readMem(0x8f14));
        EXPECT(0xcf, gbc.readMem(0xc553));
        // CF 00C4
        gbc.setState(0x4e4e, 0xe031, 0xb420, 0x8fde, 0x601d, 0x2742, 0x1, 0x1);
        gbc.writeMem(0x4e4e, { 0xcf });
        gbc.writeMem(0xe02f, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xb4, gbc.a());
        EXPECT(0x8f, gbc.b());
        EXPECT(0xde, gbc.c());
        EXPECT(0x60, gbc.d());
        EXPECT(0x1d, gbc.e());
        EXPECT(0x27, gbc.h());
        EXPECT(0x42, gbc.l());
        EXPECT(0xe02f, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x4f, gbc.readMem(0xe02f));
        EXPECT(0x4e, gbc.readMem(0xe030));
        // CF 00C5
        gbc.setState(0x2d9b, 0xc720, 0x90b0, 0x3bc6, 0x9fb9, 0xbaed, 0x1, 0x0);
        gbc.writeMem(0x2d9b, { 0xcf });
        gbc.writeMem(0xc71e, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x90, gbc.a());
        EXPECT(0x3b, gbc.b());
        EXPECT(0xc6, gbc.c());
        EXPECT(0x9f, gbc.d());
        EXPECT(0xb9, gbc.e());
        EXPECT(0xba, gbc.h());
        EXPECT(0xed, gbc.l());
        EXPECT(0xc71e, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x9c, gbc.readMem(0xc71e));
        EXPECT(0x2d, gbc.readMem(0xc71f));
        // CF 00C6
        gbc.setState(0xc23b, 0xf02c, 0xb770, 0xf819, 0xccf1, 0x328a, 0x0, 0x1);
        gbc.writeMem(0xc23b, { 0xcf });
        gbc.writeMem(0xf02a, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xb7, gbc.a());
        EXPECT(0xf8, gbc.b());
        EXPECT(0x19, gbc.c());
        EXPECT(0xcc, gbc.d());
        EXPECT(0xf1, gbc.e());
        EXPECT(0x32, gbc.h());
        EXPECT(0x8a, gbc.l());
        EXPECT(0xf02a, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0xc23b));
        EXPECT(0x3c, gbc.readMem(0xf02a));
        EXPECT(0xc2, gbc.readMem(0xf02b));
        // CF 00C7
        gbc.setState(0x7344, 0xb59f, 0x90a0, 0x18e5, 0x88ec, 0xab22, 0x1, 0x1);
        gbc.writeMem(0x7344, { 0xcf });
        gbc.writeMem(0xb59d, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x90, gbc.a());
        EXPECT(0x18, gbc.b());
        EXPECT(0xe5, gbc.c());
        EXPECT(0x88, gbc.d());
        EXPECT(0xec, gbc.e());
        EXPECT(0xab, gbc.h());
        EXPECT(0x22, gbc.l());
        EXPECT(0xb59d, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x45, gbc.readMem(0xb59d));
        EXPECT(0x73, gbc.readMem(0xb59e));
        // CF 00CA
        gbc.setState(0x2d13, 0xf9ce, 0xf60, 0x1922, 0x7b86, 0x3471, 0x0, 0x0);
        gbc.writeMem(0x2d13, { 0xcf });
        gbc.writeMem(0xf9cc, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xf, gbc.a());
        EXPECT(0x19, gbc.b());
        EXPECT(0x22, gbc.c());
        EXPECT(0x7b, gbc.d());
        EXPECT(0x86, gbc.e());
        EXPECT(0x34, gbc.h());
        EXPECT(0x71, gbc.l());
        EXPECT(0xf9cc, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x14, gbc.readMem(0xf9cc));
        EXPECT(0x2d, gbc.readMem(0xf9cd));
        // CF 00CB
        gbc.setState(0x34b0, 0xfc90, 0x31d0, 0xe08d, 0xe68d, 0x66df, 0x1, 0x1);
        gbc.writeMem(0x34b0, { 0xcf });
        gbc.writeMem(0xfc8e, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x31, gbc.a());
        EXPECT(0xe0, gbc.b());
        EXPECT(0x8d, gbc.c());
        EXPECT(0xe6, gbc.d());
        EXPECT(0x8d, gbc.e());
        EXPECT(0x66, gbc.h());
        EXPECT(0xdf, gbc.l());
        EXPECT(0xfc8e, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xb1, gbc.readMem(0xfc8e));
        EXPECT(0x34, gbc.readMem(0xfc8f));
        // CF 00CC
        gbc.setState(0xc912, 0xc34e, 0x20a0, 0x161, 0x6171, 0xb6f5, 0x1, 0x0);
        gbc.writeMem(0xc34c, { 0x0, 0x0 });
        gbc.writeMem(0xc912, { 0xcf });
        gbc.step();
        EXPECT(0x20, gbc.a());
        EXPECT(0x1, gbc.b());
        EXPECT(0x61, gbc.c());
        EXPECT(0x61, gbc.d());
        EXPECT(0x71, gbc.e());
        EXPECT(0xb6, gbc.h());
        EXPECT(0xf5, gbc.l());
        EXPECT(0xc34c, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x13, gbc.readMem(0xc34c));
        EXPECT(0xc9, gbc.readMem(0xc34d));
        EXPECT(0xcf, gbc.readMem(0xc912));
        // CF 00CE
        gbc.setState(0xb4b4, 0xc2f2, 0x7840, 0xeaa8, 0x9fed, 0x22ab, 0x0, 0x1);
        gbc.writeMem(0xb4b4, { 0xcf });
        gbc.writeMem(0xc2f0, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x78, gbc.a());
        EXPECT(0xea, gbc.b());
        EXPECT(0xa8, gbc.c());
        EXPECT(0x9f, gbc.d());
        EXPECT(0xed, gbc.e());
        EXPECT(0x22, gbc.h());
        EXPECT(0xab, gbc.l());
        EXPECT(0xc2f0, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0xb4b4));
        EXPECT(0xb5, gbc.readMem(0xc2f0));
        EXPECT(0xb4, gbc.readMem(0xc2f1));
        // CF 00D1
        gbc.setState(0x9f57, 0x9961, 0xd850, 0x2d3, 0x810a, 0xbbba, 0x0, 0x1);
        gbc.writeMem(0x995f, { 0x0, 0x0 });
        gbc.writeMem(0x9f57, { 0xcf });
        gbc.step();
        EXPECT(0xd8, gbc.a());
        EXPECT(0x2, gbc.b());
        EXPECT(0xd3, gbc.c());
        EXPECT(0x81, gbc.d());
        EXPECT(0xa, gbc.e());
        EXPECT(0xbb, gbc.h());
        EXPECT(0xba, gbc.l());
        EXPECT(0x995f, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x58, gbc.readMem(0x995f));
        EXPECT(0x9f, gbc.readMem(0x9960));
        EXPECT(0xcf, gbc.readMem(0x9f57));
        // CF 00D3
        gbc.setState(0x604, 0xf46f, 0x86a0, 0xc255, 0xefc2, 0xa0b6, 0x0, 0x1);
        gbc.writeMem(0x604, { 0xcf });
        gbc.writeMem(0xf46d, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x86, gbc.a());
        EXPECT(0xc2, gbc.b());
        EXPECT(0x55, gbc.c());
        EXPECT(0xef, gbc.d());
        EXPECT(0xc2, gbc.e());
        EXPECT(0xa0, gbc.h());
        EXPECT(0xb6, gbc.l());
        EXPECT(0xf46d, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x5, gbc.readMem(0xf46d));
        EXPECT(0x6, gbc.readMem(0xf46e));
        // CF 00D4
        gbc.setState(0xedad, 0x8fb0, 0x15f0, 0xa6c4, 0x58c8, 0xc982, 0x0, 0x0);
        gbc.writeMem(0x8fae, { 0x0, 0x0 });
        gbc.writeMem(0xedad, { 0xcf });
        gbc.step();
        EXPECT(0x15, gbc.a());
        EXPECT(0xa6, gbc.b());
        EXPECT(0xc4, gbc.c());
        EXPECT(0x58, gbc.d());
        EXPECT(0xc8, gbc.e());
        EXPECT(0xc9, gbc.h());
        EXPECT(0x82, gbc.l());
        EXPECT(0x8fae, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xae, gbc.readMem(0x8fae));
        EXPECT(0xed, gbc.readMem(0x8faf));
        EXPECT(0xcf, gbc.readMem(0xedad));
        // CF 00D6
        gbc.setState(0xd8d6, 0xb7c8, 0xae50, 0x209a, 0x7c69, 0x956f, 0x0, 0x0);
        gbc.writeMem(0xb7c6, { 0x0, 0x0 });
        gbc.writeMem(0xd8d6, { 0xcf });
        gbc.step();
        EXPECT(0xae, gbc.a());
        EXPECT(0x20, gbc.b());
        EXPECT(0x9a, gbc.c());
        EXPECT(0x7c, gbc.d());
        EXPECT(0x69, gbc.e());
        EXPECT(0x95, gbc.h());
        EXPECT(0x6f, gbc.l());
        EXPECT(0xb7c6, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xd7, gbc.readMem(0xb7c6));
        EXPECT(0xd8, gbc.readMem(0xb7c7));
        EXPECT(0xcf, gbc.readMem(0xd8d6));
        // CF 00D7
        gbc.setState(0x9e88, 0xc41c, 0x6bf0, 0x94c7, 0x3263, 0x2dcc, 0x1, 0x0);
        gbc.writeMem(0x9e88, { 0xcf });
        gbc.writeMem(0xc41a, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x6b, gbc.a());
        EXPECT(0x94, gbc.b());
        EXPECT(0xc7, gbc.c());
        EXPECT(0x32, gbc.d());
        EXPECT(0x63, gbc.e());
        EXPECT(0x2d, gbc.h());
        EXPECT(0xcc, gbc.l());
        EXPECT(0xc41a, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0x9e88));
        EXPECT(0x89, gbc.readMem(0xc41a));
        EXPECT(0x9e, gbc.readMem(0xc41b));
        // CF 00D9
        gbc.setState(0x5d39, 0xea60, 0x9990, 0x7e11, 0xb201, 0xa8fd, 0x1, 0x1);
        gbc.writeMem(0x5d39, { 0xcf });
        gbc.writeMem(0xea5e, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x99, gbc.a());
        EXPECT(0x7e, gbc.b());
        EXPECT(0x11, gbc.c());
        EXPECT(0xb2, gbc.d());
        EXPECT(0x1, gbc.e());
        EXPECT(0xa8, gbc.h());
        EXPECT(0xfd, gbc.l());
        EXPECT(0xea5e, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x3a, gbc.readMem(0xea5e));
        EXPECT(0x5d, gbc.readMem(0xea5f));
        // CF 00DA
        gbc.setState(0x22d9, 0xb01b, 0xa70, 0xfdb2, 0x6c7b, 0x622b, 0x1, 0x0);
        gbc.writeMem(0x22d9, { 0xcf });
        gbc.writeMem(0xb019, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xa, gbc.a());
        EXPECT(0xfd, gbc.b());
        EXPECT(0xb2, gbc.c());
        EXPECT(0x6c, gbc.d());
        EXPECT(0x7b, gbc.e());
        EXPECT(0x62, gbc.h());
        EXPECT(0x2b, gbc.l());
        EXPECT(0xb019, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xda, gbc.readMem(0xb019));
        EXPECT(0x22, gbc.readMem(0xb01a));
        // CF 00DB
        gbc.setState(0x9023, 0x8b60, 0x3eb0, 0x3b7a, 0xc7b9, 0x935b, 0x0, 0x0);
        gbc.writeMem(0x8b5e, { 0x0, 0x0 });
        gbc.writeMem(0x9023, { 0xcf });
        gbc.step();
        EXPECT(0x3e, gbc.a());
        EXPECT(0x3b, gbc.b());
        EXPECT(0x7a, gbc.c());
        EXPECT(0xc7, gbc.d());
        EXPECT(0xb9, gbc.e());
        EXPECT(0x93, gbc.h());
        EXPECT(0x5b, gbc.l());
        EXPECT(0x8b5e, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x24, gbc.readMem(0x8b5e));
        EXPECT(0x90, gbc.readMem(0x8b5f));
        EXPECT(0xcf, gbc.readMem(0x9023));
        // CF 00DC
        gbc.setState(0xe1b3, 0xc092, 0x7a00, 0x7f77, 0x7ec9, 0x768f, 0x0, 0x1);
        gbc.writeMem(0xc090, { 0x0, 0x0 });
        gbc.writeMem(0xe1b3, { 0xcf });
        gbc.step();
        EXPECT(0x7a, gbc.a());
        EXPECT(0x7f, gbc.b());
        EXPECT(0x77, gbc.c());
        EXPECT(0x7e, gbc.d());
        EXPECT(0xc9, gbc.e());
        EXPECT(0x76, gbc.h());
        EXPECT(0x8f, gbc.l());
        EXPECT(0xc090, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xb4, gbc.readMem(0xc090));
        EXPECT(0xe1, gbc.readMem(0xc091));
        EXPECT(0xcf, gbc.readMem(0xe1b3));
        // CF 00DD
        gbc.setState(0x1717, 0x8fe6, 0x1400, 0x47e9, 0x4594, 0xdfa3, 0x0, 0x0);
        gbc.writeMem(0x1717, { 0xcf });
        gbc.writeMem(0x8fe4, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x14, gbc.a());
        EXPECT(0x47, gbc.b());
        EXPECT(0xe9, gbc.c());
        EXPECT(0x45, gbc.d());
        EXPECT(0x94, gbc.e());
        EXPECT(0xdf, gbc.h());
        EXPECT(0xa3, gbc.l());
        EXPECT(0x8fe4, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x18, gbc.readMem(0x8fe4));
        EXPECT(0x17, gbc.readMem(0x8fe5));
        // CF 00DE
        gbc.setState(0x5bab, 0x979c, 0x1e10, 0x56b3, 0x24f3, 0x7834, 0x0, 0x1);
        gbc.writeMem(0x5bab, { 0xcf });
        gbc.writeMem(0x979a, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x1e, gbc.a());
        EXPECT(0x56, gbc.b());
        EXPECT(0xb3, gbc.c());
        EXPECT(0x24, gbc.d());
        EXPECT(0xf3, gbc.e());
        EXPECT(0x78, gbc.h());
        EXPECT(0x34, gbc.l());
        EXPECT(0x979a, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xac, gbc.readMem(0x979a));
        EXPECT(0x5b, gbc.readMem(0x979b));
        // CF 00E2
        gbc.setState(0xdf9e, 0xc98b, 0xc6c0, 0xd214, 0x42a5, 0xf435, 0x0, 0x1);
        gbc.writeMem(0xc989, { 0x0, 0x0 });
        gbc.writeMem(0xdf9e, { 0xcf });
        gbc.step();
        EXPECT(0xc6, gbc.a());
        EXPECT(0xd2, gbc.b());
        EXPECT(0x14, gbc.c());
        EXPECT(0x42, gbc.d());
        EXPECT(0xa5, gbc.e());
        EXPECT(0xf4, gbc.h());
        EXPECT(0x35, gbc.l());
        EXPECT(0xc989, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x9f, gbc.readMem(0xc989));
        EXPECT(0xdf, gbc.readMem(0xc98a));
        EXPECT(0xcf, gbc.readMem(0xdf9e));
        // CF 00E3
        gbc.setState(0x567d, 0x9e0e, 0xf6f0, 0x290d, 0x4851, 0x12a9, 0x0, 0x0);
        gbc.writeMem(0x567d, { 0xcf });
        gbc.writeMem(0x9e0c, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xf6, gbc.a());
        EXPECT(0x29, gbc.b());
        EXPECT(0xd, gbc.c());
        EXPECT(0x48, gbc.d());
        EXPECT(0x51, gbc.e());
        EXPECT(0x12, gbc.h());
        EXPECT(0xa9, gbc.l());
        EXPECT(0x9e0c, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x7e, gbc.readMem(0x9e0c));
        EXPECT(0x56, gbc.readMem(0x9e0d));
        // CF 00E7
        gbc.setState(0x5de4, 0xc711, 0x3280, 0xb544, 0x4c63, 0xef1, 0x1, 0x1);
        gbc.writeMem(0x5de4, { 0xcf });
        gbc.writeMem(0xc70f, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x32, gbc.a());
        EXPECT(0xb5, gbc.b());
        EXPECT(0x44, gbc.c());
        EXPECT(0x4c, gbc.d());
        EXPECT(0x63, gbc.e());
        EXPECT(0xe, gbc.h());
        EXPECT(0xf1, gbc.l());
        EXPECT(0xc70f, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xe5, gbc.readMem(0xc70f));
        EXPECT(0x5d, gbc.readMem(0xc710));
        // CF 00E8
        gbc.setState(0x84fd, 0xe086, 0x3c60, 0x77e6, 0x1a03, 0x547d, 0x1, 0x1);
        gbc.writeMem(0x84fd, { 0xcf });
        gbc.writeMem(0xe084, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x3c, gbc.a());
        EXPECT(0x77, gbc.b());
        EXPECT(0xe6, gbc.c());
        EXPECT(0x1a, gbc.d());
        EXPECT(0x3, gbc.e());
        EXPECT(0x54, gbc.h());
        EXPECT(0x7d, gbc.l());
        EXPECT(0xe084, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0x84fd));
        EXPECT(0xfe, gbc.readMem(0xe084));
        EXPECT(0x84, gbc.readMem(0xe085));
        // CF 00E9
        gbc.setState(0x7950, 0xa6a3, 0x55e0, 0xc08c, 0xe338, 0x9ccd, 0x1, 0x1);
        gbc.writeMem(0x7950, { 0xcf });
        gbc.writeMem(0xa6a1, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x55, gbc.a());
        EXPECT(0xc0, gbc.b());
        EXPECT(0x8c, gbc.c());
        EXPECT(0xe3, gbc.d());
        EXPECT(0x38, gbc.e());
        EXPECT(0x9c, gbc.h());
        EXPECT(0xcd, gbc.l());
        EXPECT(0xa6a1, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x51, gbc.readMem(0xa6a1));
        EXPECT(0x79, gbc.readMem(0xa6a2));
        // CF 00EB
        gbc.setState(0x6ea1, 0xb6a9, 0x2cd0, 0x7034, 0x1537, 0x8f1c, 0x0, 0x0);
        gbc.writeMem(0x6ea1, { 0xcf });
        gbc.writeMem(0xb6a7, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x2c, gbc.a());
        EXPECT(0x70, gbc.b());
        EXPECT(0x34, gbc.c());
        EXPECT(0x15, gbc.d());
        EXPECT(0x37, gbc.e());
        EXPECT(0x8f, gbc.h());
        EXPECT(0x1c, gbc.l());
        EXPECT(0xb6a7, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xa2, gbc.readMem(0xb6a7));
        EXPECT(0x6e, gbc.readMem(0xb6a8));
        // CF 00F2
        gbc.setState(0x6786, 0xe65a, 0xf460, 0x82b9, 0x5fa9, 0x3b82, 0x1, 0x1);
        gbc.writeMem(0x6786, { 0xcf });
        gbc.writeMem(0xe658, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xf4, gbc.a());
        EXPECT(0x82, gbc.b());
        EXPECT(0xb9, gbc.c());
        EXPECT(0x5f, gbc.d());
        EXPECT(0xa9, gbc.e());
        EXPECT(0x3b, gbc.h());
        EXPECT(0x82, gbc.l());
        EXPECT(0xe658, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x87, gbc.readMem(0xe658));
        EXPECT(0x67, gbc.readMem(0xe659));
        // CF 00F5
        gbc.setState(0xb689, 0xc257, 0x72f0, 0x1e78, 0xce26, 0xbdf4, 0x0, 0x0);
        gbc.writeMem(0xb689, { 0xcf });
        gbc.writeMem(0xc255, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x72, gbc.a());
        EXPECT(0x1e, gbc.b());
        EXPECT(0x78, gbc.c());
        EXPECT(0xce, gbc.d());
        EXPECT(0x26, gbc.e());
        EXPECT(0xbd, gbc.h());
        EXPECT(0xf4, gbc.l());
        EXPECT(0xc255, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0xb689));
        EXPECT(0x8a, gbc.readMem(0xc255));
        EXPECT(0xb6, gbc.readMem(0xc256));
        // CF 00F7
        gbc.setState(0xca26, 0xd5a6, 0xa610, 0xae48, 0xcc38, 0x4e3f, 0x1, 0x1);
        gbc.writeMem(0xca26, { 0xcf });
        gbc.writeMem(0xd5a4, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xa6, gbc.a());
        EXPECT(0xae, gbc.b());
        EXPECT(0x48, gbc.c());
        EXPECT(0xcc, gbc.d());
        EXPECT(0x38, gbc.e());
        EXPECT(0x4e, gbc.h());
        EXPECT(0x3f, gbc.l());
        EXPECT(0xd5a4, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0xca26));
        EXPECT(0x27, gbc.readMem(0xd5a4));
        EXPECT(0xca, gbc.readMem(0xd5a5));
        // CF 00F8
        gbc.setState(0xd253, 0x96c9, 0xf660, 0xf615, 0xb4f, 0xd025, 0x0, 0x1);
        gbc.writeMem(0x96c7, { 0x0, 0x0 });
        gbc.writeMem(0xd253, { 0xcf });
        gbc.step();
        EXPECT(0xf6, gbc.a());
        EXPECT(0xf6, gbc.b());
        EXPECT(0x15, gbc.c());
        EXPECT(0xb, gbc.d());
        EXPECT(0x4f, gbc.e());
        EXPECT(0xd0, gbc.h());
        EXPECT(0x25, gbc.l());
        EXPECT(0x96c7, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x54, gbc.readMem(0x96c7));
        EXPECT(0xd2, gbc.readMem(0x96c8));
        EXPECT(0xcf, gbc.readMem(0xd253));
        // CF 00F9
        gbc.setState(0x34a4, 0xfac4, 0xaf70, 0xe902, 0xb3d3, 0x76e5, 0x0, 0x0);
        gbc.writeMem(0x34a4, { 0xcf });
        gbc.writeMem(0xfac2, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xaf, gbc.a());
        EXPECT(0xe9, gbc.b());
        EXPECT(0x2, gbc.c());
        EXPECT(0xb3, gbc.d());
        EXPECT(0xd3, gbc.e());
        EXPECT(0x76, gbc.h());
        EXPECT(0xe5, gbc.l());
        EXPECT(0xfac2, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xa5, gbc.readMem(0xfac2));
        EXPECT(0x34, gbc.readMem(0xfac3));
        // CF 00FB
        gbc.setState(0x1cc, 0xeaac, 0xd6f0, 0x9bb5, 0x30ad, 0x594, 0x0, 0x1);
        gbc.writeMem(0x1cc, { 0xcf });
        gbc.writeMem(0xeaaa, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xd6, gbc.a());
        EXPECT(0x9b, gbc.b());
        EXPECT(0xb5, gbc.c());
        EXPECT(0x30, gbc.d());
        EXPECT(0xad, gbc.e());
        EXPECT(0x5, gbc.h());
        EXPECT(0x94, gbc.l());
        EXPECT(0xeaaa, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0xeaaa));
        EXPECT(0x1, gbc.readMem(0xeaab));
        // CF 0103
        gbc.setState(0xb7a1, 0xcee7, 0xb080, 0xdc88, 0x6541, 0x6c24, 0x1, 0x1);
        gbc.writeMem(0xb7a1, { 0xcf });
        gbc.writeMem(0xcee5, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xb0, gbc.a());
        EXPECT(0xdc, gbc.b());
        EXPECT(0x88, gbc.c());
        EXPECT(0x65, gbc.d());
        EXPECT(0x41, gbc.e());
        EXPECT(0x6c, gbc.h());
        EXPECT(0x24, gbc.l());
        EXPECT(0xcee5, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0xb7a1));
        EXPECT(0xa2, gbc.readMem(0xcee5));
        EXPECT(0xb7, gbc.readMem(0xcee6));
        // CF 0104
        gbc.setState(0x4d8d, 0xcc73, 0x3730, 0x85b1, 0x4ff8, 0xa05b, 0x1, 0x1);
        gbc.writeMem(0x4d8d, { 0xcf });
        gbc.writeMem(0xcc71, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x37, gbc.a());
        EXPECT(0x85, gbc.b());
        EXPECT(0xb1, gbc.c());
        EXPECT(0x4f, gbc.d());
        EXPECT(0xf8, gbc.e());
        EXPECT(0xa0, gbc.h());
        EXPECT(0x5b, gbc.l());
        EXPECT(0xcc71, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x8e, gbc.readMem(0xcc71));
        EXPECT(0x4d, gbc.readMem(0xcc72));
        // CF 0105
        gbc.setState(0x80f6, 0x86c1, 0x4be0, 0xbb81, 0xdc95, 0xd2c8, 0x0, 0x0);
        gbc.writeMem(0x80f6, { 0xcf });
        gbc.writeMem(0x86bf, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x4b, gbc.a());
        EXPECT(0xbb, gbc.b());
        EXPECT(0x81, gbc.c());
        EXPECT(0xdc, gbc.d());
        EXPECT(0x95, gbc.e());
        EXPECT(0xd2, gbc.h());
        EXPECT(0xc8, gbc.l());
        EXPECT(0x86bf, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0x80f6));
        EXPECT(0xf7, gbc.readMem(0x86bf));
        EXPECT(0x80, gbc.readMem(0x86c0));
        // CF 010A
        gbc.setState(0xea00, 0xd36b, 0x32c0, 0xa35e, 0x9bb4, 0x2a35, 0x0, 0x1);
        gbc.writeMem(0xd369, { 0x0, 0x0 });
        gbc.writeMem(0xea00, { 0xcf });
        gbc.step();
        EXPECT(0x32, gbc.a());
        EXPECT(0xa3, gbc.b());
        EXPECT(0x5e, gbc.c());
        EXPECT(0x9b, gbc.d());
        EXPECT(0xb4, gbc.e());
        EXPECT(0x2a, gbc.h());
        EXPECT(0x35, gbc.l());
        EXPECT(0xd369, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x1, gbc.readMem(0xd369));
        EXPECT(0xea, gbc.readMem(0xd36a));
        EXPECT(0xcf, gbc.readMem(0xea00));
        // CF 010C
        gbc.setState(0x3a1b, 0xd578, 0xee30, 0xcc84, 0xc191, 0xde94, 0x1, 0x1);
        gbc.writeMem(0x3a1b, { 0xcf });
        gbc.writeMem(0xd576, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xee, gbc.a());
        EXPECT(0xcc, gbc.b());
        EXPECT(0x84, gbc.c());
        EXPECT(0xc1, gbc.d());
        EXPECT(0x91, gbc.e());
        EXPECT(0xde, gbc.h());
        EXPECT(0x94, gbc.l());
        EXPECT(0xd576, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x1c, gbc.readMem(0xd576));
        EXPECT(0x3a, gbc.readMem(0xd577));
        // CF 010D
        gbc.setState(0x498c, 0x9c12, 0xa010, 0xc273, 0xa378, 0x5c47, 0x0, 0x0);
        gbc.writeMem(0x498c, { 0xcf });
        gbc.writeMem(0x9c10, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xa0, gbc.a());
        EXPECT(0xc2, gbc.b());
        EXPECT(0x73, gbc.c());
        EXPECT(0xa3, gbc.d());
        EXPECT(0x78, gbc.e());
        EXPECT(0x5c, gbc.h());
        EXPECT(0x47, gbc.l());
        EXPECT(0x9c10, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x8d, gbc.readMem(0x9c10));
        EXPECT(0x49, gbc.readMem(0x9c11));
        // CF 0113
        gbc.setState(0x4c88, 0xd3b1, 0x9130, 0x131f, 0x3a39, 0xcc2, 0x1, 0x0);
        gbc.writeMem(0x4c88, { 0xcf });
        gbc.writeMem(0xd3af, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x91, gbc.a());
        EXPECT(0x13, gbc.b());
        EXPECT(0x1f, gbc.c());
        EXPECT(0x3a, gbc.d());
        EXPECT(0x39, gbc.e());
        EXPECT(0xc, gbc.h());
        EXPECT(0xc2, gbc.l());
        EXPECT(0xd3af, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x89, gbc.readMem(0xd3af));
        EXPECT(0x4c, gbc.readMem(0xd3b0));
        // CF 0114
        gbc.setState(0xd97, 0xb6de, 0xbff0, 0xddfd, 0xbba3, 0x7ef0, 0x1, 0x1);
        gbc.writeMem(0xd97, { 0xcf });
        gbc.writeMem(0xb6dc, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xbf, gbc.a());
        EXPECT(0xdd, gbc.b());
        EXPECT(0xfd, gbc.c());
        EXPECT(0xbb, gbc.d());
        EXPECT(0xa3, gbc.e());
        EXPECT(0x7e, gbc.h());
        EXPECT(0xf0, gbc.l());
        EXPECT(0xb6dc, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x98, gbc.readMem(0xb6dc));
        EXPECT(0xd, gbc.readMem(0xb6dd));
        // CF 0116
        gbc.setState(0xde4b, 0xe9bd, 0xc7d0, 0x7a85, 0xfb35, 0x1a25, 0x0, 0x0);
        gbc.writeMem(0xde4b, { 0xcf });
        gbc.writeMem(0xe9bb, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xc7, gbc.a());
        EXPECT(0x7a, gbc.b());
        EXPECT(0x85, gbc.c());
        EXPECT(0xfb, gbc.d());
        EXPECT(0x35, gbc.e());
        EXPECT(0x1a, gbc.h());
        EXPECT(0x25, gbc.l());
        EXPECT(0xe9bb, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0xde4b));
        EXPECT(0x4c, gbc.readMem(0xe9bb));
        EXPECT(0xde, gbc.readMem(0xe9bc));
        // CF 0119
        gbc.setState(0xd5f6, 0xadbf, 0x79c0, 0x2701, 0x5d8e, 0x2adc, 0x0, 0x1);
        gbc.writeMem(0xadbd, { 0x0, 0x0 });
        gbc.writeMem(0xd5f6, { 0xcf });
        gbc.step();
        EXPECT(0x79, gbc.a());
        EXPECT(0x27, gbc.b());
        EXPECT(0x1, gbc.c());
        EXPECT(0x5d, gbc.d());
        EXPECT(0x8e, gbc.e());
        EXPECT(0x2a, gbc.h());
        EXPECT(0xdc, gbc.l());
        EXPECT(0xadbd, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xf7, gbc.readMem(0xadbd));
        EXPECT(0xd5, gbc.readMem(0xadbe));
        EXPECT(0xcf, gbc.readMem(0xd5f6));
        // CF 011C
        gbc.setState(0xb774, 0xc6c5, 0x9b70, 0xe802, 0xb830, 0x6686, 0x1, 0x0);
        gbc.writeMem(0xb774, { 0xcf });
        gbc.writeMem(0xc6c3, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x9b, gbc.a());
        EXPECT(0xe8, gbc.b());
        EXPECT(0x2, gbc.c());
        EXPECT(0xb8, gbc.d());
        EXPECT(0x30, gbc.e());
        EXPECT(0x66, gbc.h());
        EXPECT(0x86, gbc.l());
        EXPECT(0xc6c3, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0xb774));
        EXPECT(0x75, gbc.readMem(0xc6c3));
        EXPECT(0xb7, gbc.readMem(0xc6c4));
        // CF 011E
        gbc.setState(0x25fe, 0x9710, 0x29c0, 0xcc37, 0xe687, 0x106d, 0x0, 0x0);
        gbc.writeMem(0x25fe, { 0xcf });
        gbc.writeMem(0x970e, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x29, gbc.a());
        EXPECT(0xcc, gbc.b());
        EXPECT(0x37, gbc.c());
        EXPECT(0xe6, gbc.d());
        EXPECT(0x87, gbc.e());
        EXPECT(0x10, gbc.h());
        EXPECT(0x6d, gbc.l());
        EXPECT(0x970e, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xff, gbc.readMem(0x970e));
        EXPECT(0x25, gbc.readMem(0x970f));
        // CF 0120
        gbc.setState(0xab4b, 0x8b61, 0x42c0, 0x871, 0xf1f8, 0x3225, 0x1, 0x1);
        gbc.writeMem(0x8b5f, { 0x0, 0x0 });
        gbc.writeMem(0xab4b, { 0xcf });
        gbc.step();
        EXPECT(0x42, gbc.a());
        EXPECT(0x8, gbc.b());
        EXPECT(0x71, gbc.c());
        EXPECT(0xf1, gbc.d());
        EXPECT(0xf8, gbc.e());
        EXPECT(0x32, gbc.h());
        EXPECT(0x25, gbc.l());
        EXPECT(0x8b5f, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x4c, gbc.readMem(0x8b5f));
        EXPECT(0xab, gbc.readMem(0x8b60));
        EXPECT(0xcf, gbc.readMem(0xab4b));
        // CF 0126
        gbc.setState(0xe629, 0xf239, 0xfed0, 0x3346, 0x1cbd, 0x9844, 0x1, 0x1);
        gbc.writeMem(0xe629, { 0xcf });
        gbc.writeMem(0xf237, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xfe, gbc.a());
        EXPECT(0x33, gbc.b());
        EXPECT(0x46, gbc.c());
        EXPECT(0x1c, gbc.d());
        EXPECT(0xbd, gbc.e());
        EXPECT(0x98, gbc.h());
        EXPECT(0x44, gbc.l());
        EXPECT(0xf237, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0xe629));
        EXPECT(0x2a, gbc.readMem(0xf237));
        EXPECT(0xe6, gbc.readMem(0xf238));
        // CF 0128
        gbc.setState(0x137a, 0xdf75, 0xc8c0, 0x80c0, 0x86f5, 0x37c8, 0x1, 0x0);
        gbc.writeMem(0x137a, { 0xcf });
        gbc.writeMem(0xdf73, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xc8, gbc.a());
        EXPECT(0x80, gbc.b());
        EXPECT(0xc0, gbc.c());
        EXPECT(0x86, gbc.d());
        EXPECT(0xf5, gbc.e());
        EXPECT(0x37, gbc.h());
        EXPECT(0xc8, gbc.l());
        EXPECT(0xdf73, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x7b, gbc.readMem(0xdf73));
        EXPECT(0x13, gbc.readMem(0xdf74));
        // CF 012D
        gbc.setState(0xb433, 0x91ab, 0x78f0, 0x2417, 0x8759, 0xce49, 0x1, 0x1);
        gbc.writeMem(0x91a9, { 0x0, 0x0 });
        gbc.writeMem(0xb433, { 0xcf });
        gbc.step();
        EXPECT(0x78, gbc.a());
        EXPECT(0x24, gbc.b());
        EXPECT(0x17, gbc.c());
        EXPECT(0x87, gbc.d());
        EXPECT(0x59, gbc.e());
        EXPECT(0xce, gbc.h());
        EXPECT(0x49, gbc.l());
        EXPECT(0x91a9, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x34, gbc.readMem(0x91a9));
        EXPECT(0xb4, gbc.readMem(0x91aa));
        EXPECT(0xcf, gbc.readMem(0xb433));
        // CF 0131
        gbc.setState(0x93b3, 0xe7ec, 0x25f0, 0x2215, 0x12ac, 0xd633, 0x1, 0x0);
        gbc.writeMem(0x93b3, { 0xcf });
        gbc.writeMem(0xe7ea, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x25, gbc.a());
        EXPECT(0x22, gbc.b());
        EXPECT(0x15, gbc.c());
        EXPECT(0x12, gbc.d());
        EXPECT(0xac, gbc.e());
        EXPECT(0xd6, gbc.h());
        EXPECT(0x33, gbc.l());
        EXPECT(0xe7ea, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0x93b3));
        EXPECT(0xb4, gbc.readMem(0xe7ea));
        EXPECT(0x93, gbc.readMem(0xe7eb));
        // CF 0132
        gbc.setState(0x6c9, 0xc077, 0x3010, 0x85e9, 0xc1f9, 0x26ed, 0x1, 0x0);
        gbc.writeMem(0x6c9, { 0xcf });
        gbc.writeMem(0xc075, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x30, gbc.a());
        EXPECT(0x85, gbc.b());
        EXPECT(0xe9, gbc.c());
        EXPECT(0xc1, gbc.d());
        EXPECT(0xf9, gbc.e());
        EXPECT(0x26, gbc.h());
        EXPECT(0xed, gbc.l());
        EXPECT(0xc075, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xca, gbc.readMem(0xc075));
        EXPECT(0x6, gbc.readMem(0xc076));
        // CF 0133
        gbc.setState(0xc409, 0xfbc8, 0x7900, 0x1901, 0xf08c, 0x52c7, 0x1, 0x1);
        gbc.writeMem(0xc409, { 0xcf });
        gbc.writeMem(0xfbc6, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x79, gbc.a());
        EXPECT(0x19, gbc.b());
        EXPECT(0x1, gbc.c());
        EXPECT(0xf0, gbc.d());
        EXPECT(0x8c, gbc.e());
        EXPECT(0x52, gbc.h());
        EXPECT(0xc7, gbc.l());
        EXPECT(0xfbc6, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0xc409));
        EXPECT(0xa, gbc.readMem(0xfbc6));
        EXPECT(0xc4, gbc.readMem(0xfbc7));
        // CF 0134
        gbc.setState(0x94a1, 0x8469, 0x7500, 0xb2, 0x88e7, 0x27b5, 0x0, 0x0);
        gbc.writeMem(0x8467, { 0x0, 0x0 });
        gbc.writeMem(0x94a1, { 0xcf });
        gbc.step();
        EXPECT(0x75, gbc.a());
        EXPECT(0x0, gbc.b());
        EXPECT(0xb2, gbc.c());
        EXPECT(0x88, gbc.d());
        EXPECT(0xe7, gbc.e());
        EXPECT(0x27, gbc.h());
        EXPECT(0xb5, gbc.l());
        EXPECT(0x8467, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xa2, gbc.readMem(0x8467));
        EXPECT(0x94, gbc.readMem(0x8468));
        EXPECT(0xcf, gbc.readMem(0x94a1));
        // CF 0136
        gbc.setState(0xa494, 0xb066, 0xcd0, 0x137a, 0x8466, 0xea5a, 0x1, 0x1);
        gbc.writeMem(0xa494, { 0xcf });
        gbc.writeMem(0xb064, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xc, gbc.a());
        EXPECT(0x13, gbc.b());
        EXPECT(0x7a, gbc.c());
        EXPECT(0x84, gbc.d());
        EXPECT(0x66, gbc.e());
        EXPECT(0xea, gbc.h());
        EXPECT(0x5a, gbc.l());
        EXPECT(0xb064, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0xa494));
        EXPECT(0x95, gbc.readMem(0xb064));
        EXPECT(0xa4, gbc.readMem(0xb065));
        // CF 0138
        gbc.setState(0x376c, 0xdcc8, 0x4ba0, 0xe843, 0x5893, 0xe80b, 0x0, 0x0);
        gbc.writeMem(0x376c, { 0xcf });
        gbc.writeMem(0xdcc6, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x4b, gbc.a());
        EXPECT(0xe8, gbc.b());
        EXPECT(0x43, gbc.c());
        EXPECT(0x58, gbc.d());
        EXPECT(0x93, gbc.e());
        EXPECT(0xe8, gbc.h());
        EXPECT(0xb, gbc.l());
        EXPECT(0xdcc6, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x6d, gbc.readMem(0xdcc6));
        EXPECT(0x37, gbc.readMem(0xdcc7));
        // CF 013A
        gbc.setState(0x76e2, 0xf19a, 0xfa0, 0xc98f, 0xe57d, 0xa981, 0x0, 0x0);
        gbc.writeMem(0x76e2, { 0xcf });
        gbc.writeMem(0xf198, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xf, gbc.a());
        EXPECT(0xc9, gbc.b());
        EXPECT(0x8f, gbc.c());
        EXPECT(0xe5, gbc.d());
        EXPECT(0x7d, gbc.e());
        EXPECT(0xa9, gbc.h());
        EXPECT(0x81, gbc.l());
        EXPECT(0xf198, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xe3, gbc.readMem(0xf198));
        EXPECT(0x76, gbc.readMem(0xf199));
        // CF 013B
        gbc.setState(0xd250, 0x812f, 0x2e00, 0x3549, 0x13f5, 0x793b, 0x0, 0x1);
        gbc.writeMem(0x812d, { 0x0, 0x0 });
        gbc.writeMem(0xd250, { 0xcf });
        gbc.step();
        EXPECT(0x2e, gbc.a());
        EXPECT(0x35, gbc.b());
        EXPECT(0x49, gbc.c());
        EXPECT(0x13, gbc.d());
        EXPECT(0xf5, gbc.e());
        EXPECT(0x79, gbc.h());
        EXPECT(0x3b, gbc.l());
        EXPECT(0x812d, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x51, gbc.readMem(0x812d));
        EXPECT(0xd2, gbc.readMem(0x812e));
        EXPECT(0xcf, gbc.readMem(0xd250));
        // CF 013C
        gbc.setState(0x6791, 0xe54c, 0xdb0, 0x6e9f, 0x84b2, 0x21d5, 0x0, 0x0);
        gbc.writeMem(0x6791, { 0xcf });
        gbc.writeMem(0xe54a, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xd, gbc.a());
        EXPECT(0x6e, gbc.b());
        EXPECT(0x9f, gbc.c());
        EXPECT(0x84, gbc.d());
        EXPECT(0xb2, gbc.e());
        EXPECT(0x21, gbc.h());
        EXPECT(0xd5, gbc.l());
        EXPECT(0xe54a, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x92, gbc.readMem(0xe54a));
        EXPECT(0x67, gbc.readMem(0xe54b));
        // CF 013D
        gbc.setState(0x85a, 0xbf0d, 0x90c0, 0x4323, 0xf2e9, 0x78a8, 0x0, 0x1);
        gbc.writeMem(0x85a, { 0xcf });
        gbc.writeMem(0xbf0b, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x90, gbc.a());
        EXPECT(0x43, gbc.b());
        EXPECT(0x23, gbc.c());
        EXPECT(0xf2, gbc.d());
        EXPECT(0xe9, gbc.e());
        EXPECT(0x78, gbc.h());
        EXPECT(0xa8, gbc.l());
        EXPECT(0xbf0b, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x5b, gbc.readMem(0xbf0b));
        EXPECT(0x8, gbc.readMem(0xbf0c));
        // CF 013E
        gbc.setState(0x2bd8, 0xc960, 0xadf0, 0xa983, 0x17a5, 0xc29f, 0x0, 0x0);
        gbc.writeMem(0x2bd8, { 0xcf });
        gbc.writeMem(0xc95e, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xad, gbc.a());
        EXPECT(0xa9, gbc.b());
        EXPECT(0x83, gbc.c());
        EXPECT(0x17, gbc.d());
        EXPECT(0xa5, gbc.e());
        EXPECT(0xc2, gbc.h());
        EXPECT(0x9f, gbc.l());
        EXPECT(0xc95e, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xd9, gbc.readMem(0xc95e));
        EXPECT(0x2b, gbc.readMem(0xc95f));
        // CF 0142
        gbc.setState(0xcc33, 0x8507, 0x38b0, 0x8369, 0x5c72, 0x70bd, 0x0, 0x1);
        gbc.writeMem(0x8505, { 0x0, 0x0 });
        gbc.writeMem(0xcc33, { 0xcf });
        gbc.step();
        EXPECT(0x38, gbc.a());
        EXPECT(0x83, gbc.b());
        EXPECT(0x69, gbc.c());
        EXPECT(0x5c, gbc.d());
        EXPECT(0x72, gbc.e());
        EXPECT(0x70, gbc.h());
        EXPECT(0xbd, gbc.l());
        EXPECT(0x8505, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x34, gbc.readMem(0x8505));
        EXPECT(0xcc, gbc.readMem(0x8506));
        EXPECT(0xcf, gbc.readMem(0xcc33));
        // CF 0145
        gbc.setState(0x4403, 0xd69f, 0x7390, 0x4539, 0x17e8, 0xb43b, 0x0, 0x1);
        gbc.writeMem(0x4403, { 0xcf });
        gbc.writeMem(0xd69d, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x73, gbc.a());
        EXPECT(0x45, gbc.b());
        EXPECT(0x39, gbc.c());
        EXPECT(0x17, gbc.d());
        EXPECT(0xe8, gbc.e());
        EXPECT(0xb4, gbc.h());
        EXPECT(0x3b, gbc.l());
        EXPECT(0xd69d, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x4, gbc.readMem(0xd69d));
        EXPECT(0x44, gbc.readMem(0xd69e));
        // CF 014A
        gbc.setState(0xead1, 0xb844, 0x8710, 0x15b9, 0xc462, 0x8698, 0x1, 0x0);
        gbc.writeMem(0xb842, { 0x0, 0x0 });
        gbc.writeMem(0xead1, { 0xcf });
        gbc.step();
        EXPECT(0x87, gbc.a());
        EXPECT(0x15, gbc.b());
        EXPECT(0xb9, gbc.c());
        EXPECT(0xc4, gbc.d());
        EXPECT(0x62, gbc.e());
        EXPECT(0x86, gbc.h());
        EXPECT(0x98, gbc.l());
        EXPECT(0xb842, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xd2, gbc.readMem(0xb842));
        EXPECT(0xea, gbc.readMem(0xb843));
        EXPECT(0xcf, gbc.readMem(0xead1));
        // CF 014B
        gbc.setState(0x5797, 0xf3a3, 0x48e0, 0xd36a, 0xaa8d, 0x6c70, 0x1, 0x1);
        gbc.writeMem(0x5797, { 0xcf });
        gbc.writeMem(0xf3a1, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x48, gbc.a());
        EXPECT(0xd3, gbc.b());
        EXPECT(0x6a, gbc.c());
        EXPECT(0xaa, gbc.d());
        EXPECT(0x8d, gbc.e());
        EXPECT(0x6c, gbc.h());
        EXPECT(0x70, gbc.l());
        EXPECT(0xf3a1, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x98, gbc.readMem(0xf3a1));
        EXPECT(0x57, gbc.readMem(0xf3a2));
        // CF 0150
        gbc.setState(0x2cf1, 0xb86b, 0xf020, 0x8969, 0xe3a3, 0x4ad1, 0x1, 0x1);
        gbc.writeMem(0x2cf1, { 0xcf });
        gbc.writeMem(0xb869, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xf0, gbc.a());
        EXPECT(0x89, gbc.b());
        EXPECT(0x69, gbc.c());
        EXPECT(0xe3, gbc.d());
        EXPECT(0xa3, gbc.e());
        EXPECT(0x4a, gbc.h());
        EXPECT(0xd1, gbc.l());
        EXPECT(0xb869, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xf2, gbc.readMem(0xb869));
        EXPECT(0x2c, gbc.readMem(0xb86a));
        // CF 0151
        gbc.setState(0xc2fd, 0xfc78, 0x9230, 0x6f4d, 0xbb22, 0x595, 0x1, 0x0);
        gbc.writeMem(0xc2fd, { 0xcf });
        gbc.writeMem(0xfc76, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x92, gbc.a());
        EXPECT(0x6f, gbc.b());
        EXPECT(0x4d, gbc.c());
        EXPECT(0xbb, gbc.d());
        EXPECT(0x22, gbc.e());
        EXPECT(0x5, gbc.h());
        EXPECT(0x95, gbc.l());
        EXPECT(0xfc76, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0xc2fd));
        EXPECT(0xfe, gbc.readMem(0xfc76));
        EXPECT(0xc2, gbc.readMem(0xfc77));
        // CF 0152
        gbc.setState(0x24a2, 0xc464, 0xdd80, 0xd9bc, 0xdf8, 0xaf6e, 0x0, 0x1);
        gbc.writeMem(0x24a2, { 0xcf });
        gbc.writeMem(0xc462, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xdd, gbc.a());
        EXPECT(0xd9, gbc.b());
        EXPECT(0xbc, gbc.c());
        EXPECT(0xd, gbc.d());
        EXPECT(0xf8, gbc.e());
        EXPECT(0xaf, gbc.h());
        EXPECT(0x6e, gbc.l());
        EXPECT(0xc462, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xa3, gbc.readMem(0xc462));
        EXPECT(0x24, gbc.readMem(0xc463));
        // CF 0154
        gbc.setState(0x2d99, 0xd61b, 0xa500, 0xe51, 0x6e09, 0xb46b, 0x0, 0x1);
        gbc.writeMem(0x2d99, { 0xcf });
        gbc.writeMem(0xd619, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xa5, gbc.a());
        EXPECT(0xe, gbc.b());
        EXPECT(0x51, gbc.c());
        EXPECT(0x6e, gbc.d());
        EXPECT(0x9, gbc.e());
        EXPECT(0xb4, gbc.h());
        EXPECT(0x6b, gbc.l());
        EXPECT(0xd619, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x9a, gbc.readMem(0xd619));
        EXPECT(0x2d, gbc.readMem(0xd61a));
        // CF 0156
        gbc.setState(0xa1b2, 0xf57d, 0x2390, 0x9293, 0xe35d, 0x2feb, 0x1, 0x0);
        gbc.writeMem(0xa1b2, { 0xcf });
        gbc.writeMem(0xf57b, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x23, gbc.a());
        EXPECT(0x92, gbc.b());
        EXPECT(0x93, gbc.c());
        EXPECT(0xe3, gbc.d());
        EXPECT(0x5d, gbc.e());
        EXPECT(0x2f, gbc.h());
        EXPECT(0xeb, gbc.l());
        EXPECT(0xf57b, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0xa1b2));
        EXPECT(0xb3, gbc.readMem(0xf57b));
        EXPECT(0xa1, gbc.readMem(0xf57c));
        // CF 0157
        gbc.setState(0x8432, 0x8eab, 0xfe00, 0x7d73, 0x7524, 0xc712, 0x1, 0x0);
        gbc.writeMem(0x8432, { 0xcf });
        gbc.writeMem(0x8ea9, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xfe, gbc.a());
        EXPECT(0x7d, gbc.b());
        EXPECT(0x73, gbc.c());
        EXPECT(0x75, gbc.d());
        EXPECT(0x24, gbc.e());
        EXPECT(0xc7, gbc.h());
        EXPECT(0x12, gbc.l());
        EXPECT(0x8ea9, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0x8432));
        EXPECT(0x33, gbc.readMem(0x8ea9));
        EXPECT(0x84, gbc.readMem(0x8eaa));
        // CF 0158
        gbc.setState(0xf20, 0xe0a3, 0xc5c0, 0x2338, 0xe263, 0xd573, 0x0, 0x1);
        gbc.writeMem(0xf20, { 0xcf });
        gbc.writeMem(0xe0a1, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xc5, gbc.a());
        EXPECT(0x23, gbc.b());
        EXPECT(0x38, gbc.c());
        EXPECT(0xe2, gbc.d());
        EXPECT(0x63, gbc.e());
        EXPECT(0xd5, gbc.h());
        EXPECT(0x73, gbc.l());
        EXPECT(0xe0a1, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x21, gbc.readMem(0xe0a1));
        EXPECT(0xf, gbc.readMem(0xe0a2));
        // CF 0159
        gbc.setState(0x29ef, 0xbffc, 0x9d20, 0x97d3, 0x5f05, 0x610d, 0x0, 0x1);
        gbc.writeMem(0x29ef, { 0xcf });
        gbc.writeMem(0xbffa, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x9d, gbc.a());
        EXPECT(0x97, gbc.b());
        EXPECT(0xd3, gbc.c());
        EXPECT(0x5f, gbc.d());
        EXPECT(0x5, gbc.e());
        EXPECT(0x61, gbc.h());
        EXPECT(0xd, gbc.l());
        EXPECT(0xbffa, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xf0, gbc.readMem(0xbffa));
        EXPECT(0x29, gbc.readMem(0xbffb));
        // CF 015E
        gbc.setState(0x3b60, 0x8c00, 0xf100, 0xa8c1, 0xa7eb, 0xc948, 0x1, 0x0);
        gbc.writeMem(0x3b60, { 0xcf });
        gbc.writeMem(0x8bfe, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xf1, gbc.a());
        EXPECT(0xa8, gbc.b());
        EXPECT(0xc1, gbc.c());
        EXPECT(0xa7, gbc.d());
        EXPECT(0xeb, gbc.e());
        EXPECT(0xc9, gbc.h());
        EXPECT(0x48, gbc.l());
        EXPECT(0x8bfe, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x61, gbc.readMem(0x8bfe));
        EXPECT(0x3b, gbc.readMem(0x8bff));
        // CF 015F
        gbc.setState(0x402d, 0x9d89, 0xe470, 0x116f, 0x9d53, 0xf872, 0x1, 0x0);
        gbc.writeMem(0x402d, { 0xcf });
        gbc.writeMem(0x9d87, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xe4, gbc.a());
        EXPECT(0x11, gbc.b());
        EXPECT(0x6f, gbc.c());
        EXPECT(0x9d, gbc.d());
        EXPECT(0x53, gbc.e());
        EXPECT(0xf8, gbc.h());
        EXPECT(0x72, gbc.l());
        EXPECT(0x9d87, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x2e, gbc.readMem(0x9d87));
        EXPECT(0x40, gbc.readMem(0x9d88));
        // CF 0162
        gbc.setState(0x6e0b, 0xc707, 0x1990, 0x1958, 0x8c80, 0x424d, 0x0, 0x0);
        gbc.writeMem(0x6e0b, { 0xcf });
        gbc.writeMem(0xc705, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x19, gbc.a());
        EXPECT(0x19, gbc.b());
        EXPECT(0x58, gbc.c());
        EXPECT(0x8c, gbc.d());
        EXPECT(0x80, gbc.e());
        EXPECT(0x42, gbc.h());
        EXPECT(0x4d, gbc.l());
        EXPECT(0xc705, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xc, gbc.readMem(0xc705));
        EXPECT(0x6e, gbc.readMem(0xc706));
        // CF 0164
        gbc.setState(0x438, 0x93ee, 0xc390, 0xe47b, 0xc2c1, 0x77ef, 0x0, 0x0);
        gbc.writeMem(0x438, { 0xcf });
        gbc.writeMem(0x93ec, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xc3, gbc.a());
        EXPECT(0xe4, gbc.b());
        EXPECT(0x7b, gbc.c());
        EXPECT(0xc2, gbc.d());
        EXPECT(0xc1, gbc.e());
        EXPECT(0x77, gbc.h());
        EXPECT(0xef, gbc.l());
        EXPECT(0x93ec, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x39, gbc.readMem(0x93ec));
        EXPECT(0x4, gbc.readMem(0x93ed));
        // CF 0166
        gbc.setState(0x5c8, 0xc1ef, 0x32e0, 0x7116, 0xffc3, 0x9bbd, 0x0, 0x0);
        gbc.writeMem(0x5c8, { 0xcf });
        gbc.writeMem(0xc1ed, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x32, gbc.a());
        EXPECT(0x71, gbc.b());
        EXPECT(0x16, gbc.c());
        EXPECT(0xff, gbc.d());
        EXPECT(0xc3, gbc.e());
        EXPECT(0x9b, gbc.h());
        EXPECT(0xbd, gbc.l());
        EXPECT(0xc1ed, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xc9, gbc.readMem(0xc1ed));
        EXPECT(0x5, gbc.readMem(0xc1ee));
        // CF 0169
        gbc.setState(0xb1b6, 0xdea5, 0xc0, 0xa023, 0xfd84, 0x2ed4, 0x0, 0x0);
        gbc.writeMem(0xb1b6, { 0xcf });
        gbc.writeMem(0xdea3, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xa0, gbc.b());
        EXPECT(0x23, gbc.c());
        EXPECT(0xfd, gbc.d());
        EXPECT(0x84, gbc.e());
        EXPECT(0x2e, gbc.h());
        EXPECT(0xd4, gbc.l());
        EXPECT(0xdea3, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0xb1b6));
        EXPECT(0xb7, gbc.readMem(0xdea3));
        EXPECT(0xb1, gbc.readMem(0xdea4));
        // CF 016B
        gbc.setState(0x12b1, 0xe657, 0xe000, 0xb48e, 0x846d, 0x40b9, 0x0, 0x1);
        gbc.writeMem(0x12b1, { 0xcf });
        gbc.writeMem(0xe655, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xe0, gbc.a());
        EXPECT(0xb4, gbc.b());
        EXPECT(0x8e, gbc.c());
        EXPECT(0x84, gbc.d());
        EXPECT(0x6d, gbc.e());
        EXPECT(0x40, gbc.h());
        EXPECT(0xb9, gbc.l());
        EXPECT(0xe655, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xb2, gbc.readMem(0xe655));
        EXPECT(0x12, gbc.readMem(0xe656));
        // CF 016E
        gbc.setState(0x978b, 0xc03c, 0x51e0, 0xc98, 0x44a2, 0xc523, 0x1, 0x0);
        gbc.writeMem(0x978b, { 0xcf });
        gbc.writeMem(0xc03a, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x51, gbc.a());
        EXPECT(0xc, gbc.b());
        EXPECT(0x98, gbc.c());
        EXPECT(0x44, gbc.d());
        EXPECT(0xa2, gbc.e());
        EXPECT(0xc5, gbc.h());
        EXPECT(0x23, gbc.l());
        EXPECT(0xc03a, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0x978b));
        EXPECT(0x8c, gbc.readMem(0xc03a));
        EXPECT(0x97, gbc.readMem(0xc03b));
        // CF 0175
        gbc.setState(0xe149, 0x8341, 0x9840, 0x3d2c, 0xad7c, 0xb036, 0x1, 0x0);
        gbc.writeMem(0x833f, { 0x0, 0x0 });
        gbc.writeMem(0xe149, { 0xcf });
        gbc.step();
        EXPECT(0x98, gbc.a());
        EXPECT(0x3d, gbc.b());
        EXPECT(0x2c, gbc.c());
        EXPECT(0xad, gbc.d());
        EXPECT(0x7c, gbc.e());
        EXPECT(0xb0, gbc.h());
        EXPECT(0x36, gbc.l());
        EXPECT(0x833f, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x4a, gbc.readMem(0x833f));
        EXPECT(0xe1, gbc.readMem(0x8340));
        EXPECT(0xcf, gbc.readMem(0xe149));
        // CF 0178
        gbc.setState(0x69ac, 0xe8a7, 0x2db0, 0x2efb, 0x75be, 0x83c0, 0x0, 0x1);
        gbc.writeMem(0x69ac, { 0xcf });
        gbc.writeMem(0xe8a5, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x2d, gbc.a());
        EXPECT(0x2e, gbc.b());
        EXPECT(0xfb, gbc.c());
        EXPECT(0x75, gbc.d());
        EXPECT(0xbe, gbc.e());
        EXPECT(0x83, gbc.h());
        EXPECT(0xc0, gbc.l());
        EXPECT(0xe8a5, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xad, gbc.readMem(0xe8a5));
        EXPECT(0x69, gbc.readMem(0xe8a6));
        // CF 0179
        gbc.setState(0x2b30, 0xa49a, 0x650, 0xa9c8, 0xb16e, 0x1b1c, 0x0, 0x1);
        gbc.writeMem(0x2b30, { 0xcf });
        gbc.writeMem(0xa498, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x6, gbc.a());
        EXPECT(0xa9, gbc.b());
        EXPECT(0xc8, gbc.c());
        EXPECT(0xb1, gbc.d());
        EXPECT(0x6e, gbc.e());
        EXPECT(0x1b, gbc.h());
        EXPECT(0x1c, gbc.l());
        EXPECT(0xa498, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x31, gbc.readMem(0xa498));
        EXPECT(0x2b, gbc.readMem(0xa499));
        // CF 017A
        gbc.setState(0x9ab5, 0x9efd, 0x1100, 0xfe14, 0xe77e, 0x325, 0x1, 0x1);
        gbc.writeMem(0x9ab5, { 0xcf });
        gbc.writeMem(0x9efb, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x11, gbc.a());
        EXPECT(0xfe, gbc.b());
        EXPECT(0x14, gbc.c());
        EXPECT(0xe7, gbc.d());
        EXPECT(0x7e, gbc.e());
        EXPECT(0x3, gbc.h());
        EXPECT(0x25, gbc.l());
        EXPECT(0x9efb, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0x9ab5));
        EXPECT(0xb6, gbc.readMem(0x9efb));
        EXPECT(0x9a, gbc.readMem(0x9efc));
        // CF 017B
        gbc.setState(0xd75c, 0xea84, 0xf250, 0xf505, 0xf609, 0x13a6, 0x1, 0x1);
        gbc.writeMem(0xd75c, { 0xcf });
        gbc.writeMem(0xea82, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xf2, gbc.a());
        EXPECT(0xf5, gbc.b());
        EXPECT(0x5, gbc.c());
        EXPECT(0xf6, gbc.d());
        EXPECT(0x9, gbc.e());
        EXPECT(0x13, gbc.h());
        EXPECT(0xa6, gbc.l());
        EXPECT(0xea82, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0xd75c));
        EXPECT(0x5d, gbc.readMem(0xea82));
        EXPECT(0xd7, gbc.readMem(0xea83));
        // CF 017D
        gbc.setState(0xe379, 0xe2a1, 0x2c20, 0x9e54, 0x31ce, 0x1e1e, 0x1, 0x1);
        gbc.writeMem(0xe29f, { 0x0, 0x0 });
        gbc.writeMem(0xe379, { 0xcf });
        gbc.step();
        EXPECT(0x2c, gbc.a());
        EXPECT(0x9e, gbc.b());
        EXPECT(0x54, gbc.c());
        EXPECT(0x31, gbc.d());
        EXPECT(0xce, gbc.e());
        EXPECT(0x1e, gbc.h());
        EXPECT(0x1e, gbc.l());
        EXPECT(0xe29f, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x7a, gbc.readMem(0xe29f));
        EXPECT(0xe3, gbc.readMem(0xe2a0));
        EXPECT(0xcf, gbc.readMem(0xe379));
        // CF 017F
        gbc.setState(0xb497, 0xb3b7, 0xe110, 0xcc2a, 0x92e6, 0x7220, 0x0, 0x1);
        gbc.writeMem(0xb3b5, { 0x0, 0x0 });
        gbc.writeMem(0xb497, { 0xcf });
        gbc.step();
        EXPECT(0xe1, gbc.a());
        EXPECT(0xcc, gbc.b());
        EXPECT(0x2a, gbc.c());
        EXPECT(0x92, gbc.d());
        EXPECT(0xe6, gbc.e());
        EXPECT(0x72, gbc.h());
        EXPECT(0x20, gbc.l());
        EXPECT(0xb3b5, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x98, gbc.readMem(0xb3b5));
        EXPECT(0xb4, gbc.readMem(0xb3b6));
        EXPECT(0xcf, gbc.readMem(0xb497));
        // CF 0181
        gbc.setState(0x8e7b, 0x8474, 0x99e0, 0xd769, 0x5455, 0x795d, 0x1, 0x0);
        gbc.writeMem(0x8472, { 0x0, 0x0 });
        gbc.writeMem(0x8e7b, { 0xcf });
        gbc.step();
        EXPECT(0x99, gbc.a());
        EXPECT(0xd7, gbc.b());
        EXPECT(0x69, gbc.c());
        EXPECT(0x54, gbc.d());
        EXPECT(0x55, gbc.e());
        EXPECT(0x79, gbc.h());
        EXPECT(0x5d, gbc.l());
        EXPECT(0x8472, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x7c, gbc.readMem(0x8472));
        EXPECT(0x8e, gbc.readMem(0x8473));
        EXPECT(0xcf, gbc.readMem(0x8e7b));
        // CF 0182
        gbc.setState(0x2060, 0xa8af, 0xd500, 0x739a, 0xf63b, 0x967d, 0x1, 0x0);
        gbc.writeMem(0x2060, { 0xcf });
        gbc.writeMem(0xa8ad, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xd5, gbc.a());
        EXPECT(0x73, gbc.b());
        EXPECT(0x9a, gbc.c());
        EXPECT(0xf6, gbc.d());
        EXPECT(0x3b, gbc.e());
        EXPECT(0x96, gbc.h());
        EXPECT(0x7d, gbc.l());
        EXPECT(0xa8ad, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x61, gbc.readMem(0xa8ad));
        EXPECT(0x20, gbc.readMem(0xa8ae));
        // CF 0184
        gbc.setState(0x884a, 0xb1f4, 0x1f00, 0x133c, 0x9ce2, 0xfa01, 0x1, 0x1);
        gbc.writeMem(0x884a, { 0xcf });
        gbc.writeMem(0xb1f2, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x1f, gbc.a());
        EXPECT(0x13, gbc.b());
        EXPECT(0x3c, gbc.c());
        EXPECT(0x9c, gbc.d());
        EXPECT(0xe2, gbc.e());
        EXPECT(0xfa, gbc.h());
        EXPECT(0x1, gbc.l());
        EXPECT(0xb1f2, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0x884a));
        EXPECT(0x4b, gbc.readMem(0xb1f2));
        EXPECT(0x88, gbc.readMem(0xb1f3));
        // CF 0187
        gbc.setState(0x9b36, 0xc47f, 0x6530, 0x7237, 0xa380, 0x7116, 0x0, 0x0);
        gbc.writeMem(0x9b36, { 0xcf });
        gbc.writeMem(0xc47d, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x65, gbc.a());
        EXPECT(0x72, gbc.b());
        EXPECT(0x37, gbc.c());
        EXPECT(0xa3, gbc.d());
        EXPECT(0x80, gbc.e());
        EXPECT(0x71, gbc.h());
        EXPECT(0x16, gbc.l());
        EXPECT(0xc47d, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0x9b36));
        EXPECT(0x37, gbc.readMem(0xc47d));
        EXPECT(0x9b, gbc.readMem(0xc47e));
        // CF 0189
        gbc.setState(0x2c40, 0x9e0f, 0xcee0, 0xe716, 0xd502, 0x3f4b, 0x1, 0x1);
        gbc.writeMem(0x2c40, { 0xcf });
        gbc.writeMem(0x9e0d, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xce, gbc.a());
        EXPECT(0xe7, gbc.b());
        EXPECT(0x16, gbc.c());
        EXPECT(0xd5, gbc.d());
        EXPECT(0x2, gbc.e());
        EXPECT(0x3f, gbc.h());
        EXPECT(0x4b, gbc.l());
        EXPECT(0x9e0d, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x41, gbc.readMem(0x9e0d));
        EXPECT(0x2c, gbc.readMem(0x9e0e));
        // CF 018A
        gbc.setState(0x10fd, 0x9bb0, 0xc7e0, 0x1752, 0x2abe, 0xbfb6, 0x0, 0x0);
        gbc.writeMem(0x10fd, { 0xcf });
        gbc.writeMem(0x9bae, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xc7, gbc.a());
        EXPECT(0x17, gbc.b());
        EXPECT(0x52, gbc.c());
        EXPECT(0x2a, gbc.d());
        EXPECT(0xbe, gbc.e());
        EXPECT(0xbf, gbc.h());
        EXPECT(0xb6, gbc.l());
        EXPECT(0x9bae, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xfe, gbc.readMem(0x9bae));
        EXPECT(0x10, gbc.readMem(0x9baf));
        // CF 018E
        gbc.setState(0xad09, 0xcde8, 0x3530, 0x7bf1, 0xf24e, 0x4ee6, 0x1, 0x0);
        gbc.writeMem(0xad09, { 0xcf });
        gbc.writeMem(0xcde6, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x35, gbc.a());
        EXPECT(0x7b, gbc.b());
        EXPECT(0xf1, gbc.c());
        EXPECT(0xf2, gbc.d());
        EXPECT(0x4e, gbc.e());
        EXPECT(0x4e, gbc.h());
        EXPECT(0xe6, gbc.l());
        EXPECT(0xcde6, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0xad09));
        EXPECT(0xa, gbc.readMem(0xcde6));
        EXPECT(0xad, gbc.readMem(0xcde7));
        // CF 0190
        gbc.setState(0xa4b8, 0xb606, 0xa850, 0x8403, 0x1bb6, 0x338, 0x0, 0x0);
        gbc.writeMem(0xa4b8, { 0xcf });
        gbc.writeMem(0xb604, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xa8, gbc.a());
        EXPECT(0x84, gbc.b());
        EXPECT(0x3, gbc.c());
        EXPECT(0x1b, gbc.d());
        EXPECT(0xb6, gbc.e());
        EXPECT(0x3, gbc.h());
        EXPECT(0x38, gbc.l());
        EXPECT(0xb604, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0xa4b8));
        EXPECT(0xb9, gbc.readMem(0xb604));
        EXPECT(0xa4, gbc.readMem(0xb605));
        // CF 0191
        gbc.setState(0xe046, 0x9b6f, 0x3ef0, 0x2480, 0xaebc, 0x52f3, 0x1, 0x0);
        gbc.writeMem(0x9b6d, { 0x0, 0x0 });
        gbc.writeMem(0xe046, { 0xcf });
        gbc.step();
        EXPECT(0x3e, gbc.a());
        EXPECT(0x24, gbc.b());
        EXPECT(0x80, gbc.c());
        EXPECT(0xae, gbc.d());
        EXPECT(0xbc, gbc.e());
        EXPECT(0x52, gbc.h());
        EXPECT(0xf3, gbc.l());
        EXPECT(0x9b6d, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x47, gbc.readMem(0x9b6d));
        EXPECT(0xe0, gbc.readMem(0x9b6e));
        EXPECT(0xcf, gbc.readMem(0xe046));
        // CF 0192
        gbc.setState(0x81b7, 0xabe8, 0xed50, 0xfa3e, 0xa560, 0x9266, 0x0, 0x0);
        gbc.writeMem(0x81b7, { 0xcf });
        gbc.writeMem(0xabe6, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xed, gbc.a());
        EXPECT(0xfa, gbc.b());
        EXPECT(0x3e, gbc.c());
        EXPECT(0xa5, gbc.d());
        EXPECT(0x60, gbc.e());
        EXPECT(0x92, gbc.h());
        EXPECT(0x66, gbc.l());
        EXPECT(0xabe6, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0x81b7));
        EXPECT(0xb8, gbc.readMem(0xabe6));
        EXPECT(0x81, gbc.readMem(0xabe7));
        // CF 0194
        gbc.setState(0x6a0f, 0xaad4, 0x3c50, 0x9ab8, 0xa0b5, 0x9f01, 0x1, 0x1);
        gbc.writeMem(0x6a0f, { 0xcf });
        gbc.writeMem(0xaad2, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x3c, gbc.a());
        EXPECT(0x9a, gbc.b());
        EXPECT(0xb8, gbc.c());
        EXPECT(0xa0, gbc.d());
        EXPECT(0xb5, gbc.e());
        EXPECT(0x9f, gbc.h());
        EXPECT(0x1, gbc.l());
        EXPECT(0xaad2, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x10, gbc.readMem(0xaad2));
        EXPECT(0x6a, gbc.readMem(0xaad3));
        // CF 0195
        gbc.setState(0xe8f6, 0xd7ea, 0xe0d0, 0x105b, 0x25fe, 0xbc90, 0x1, 0x1);
        gbc.writeMem(0xd7e8, { 0x0, 0x0 });
        gbc.writeMem(0xe8f6, { 0xcf });
        gbc.step();
        EXPECT(0xe0, gbc.a());
        EXPECT(0x10, gbc.b());
        EXPECT(0x5b, gbc.c());
        EXPECT(0x25, gbc.d());
        EXPECT(0xfe, gbc.e());
        EXPECT(0xbc, gbc.h());
        EXPECT(0x90, gbc.l());
        EXPECT(0xd7e8, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xf7, gbc.readMem(0xd7e8));
        EXPECT(0xe8, gbc.readMem(0xd7e9));
        EXPECT(0xcf, gbc.readMem(0xe8f6));
        // CF 0196
        gbc.setState(0x7a50, 0xb17d, 0xb050, 0x2dfc, 0x6761, 0x1bbf, 0x1, 0x0);
        gbc.writeMem(0x7a50, { 0xcf });
        gbc.writeMem(0xb17b, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xb0, gbc.a());
        EXPECT(0x2d, gbc.b());
        EXPECT(0xfc, gbc.c());
        EXPECT(0x67, gbc.d());
        EXPECT(0x61, gbc.e());
        EXPECT(0x1b, gbc.h());
        EXPECT(0xbf, gbc.l());
        EXPECT(0xb17b, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x51, gbc.readMem(0xb17b));
        EXPECT(0x7a, gbc.readMem(0xb17c));
        // CF 0197
        gbc.setState(0x5333, 0xdb32, 0x5d30, 0xb528, 0xb931, 0xf7a3, 0x1, 0x0);
        gbc.writeMem(0x5333, { 0xcf });
        gbc.writeMem(0xdb30, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x5d, gbc.a());
        EXPECT(0xb5, gbc.b());
        EXPECT(0x28, gbc.c());
        EXPECT(0xb9, gbc.d());
        EXPECT(0x31, gbc.e());
        EXPECT(0xf7, gbc.h());
        EXPECT(0xa3, gbc.l());
        EXPECT(0xdb30, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x34, gbc.readMem(0xdb30));
        EXPECT(0x53, gbc.readMem(0xdb31));
        // CF 019C
        gbc.setState(0x516, 0xffbd, 0x39f0, 0x1615, 0x3996, 0x2026, 0x0, 0x0);
        gbc.writeMem(0x516, { 0xcf });
        gbc.writeMem(0xffbb, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x39, gbc.a());
        EXPECT(0x16, gbc.b());
        EXPECT(0x15, gbc.c());
        EXPECT(0x39, gbc.d());
        EXPECT(0x96, gbc.e());
        EXPECT(0x20, gbc.h());
        EXPECT(0x26, gbc.l());
        EXPECT(0xffbb, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x17, gbc.readMem(0xffbb));
        EXPECT(0x5, gbc.readMem(0xffbc));
        // CF 019D
        gbc.setState(0x59b5, 0x866e, 0x1750, 0xfd0, 0x7a53, 0x41f7, 0x0, 0x1);
        gbc.writeMem(0x59b5, { 0xcf });
        gbc.writeMem(0x866c, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x17, gbc.a());
        EXPECT(0xf, gbc.b());
        EXPECT(0xd0, gbc.c());
        EXPECT(0x7a, gbc.d());
        EXPECT(0x53, gbc.e());
        EXPECT(0x41, gbc.h());
        EXPECT(0xf7, gbc.l());
        EXPECT(0x866c, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xb6, gbc.readMem(0x866c));
        EXPECT(0x59, gbc.readMem(0x866d));
        // CF 01A2
        gbc.setState(0xef51, 0xf8a3, 0xb3d0, 0x7c37, 0x6d7d, 0x7a19, 0x0, 0x0);
        gbc.writeMem(0xef51, { 0xcf });
        gbc.writeMem(0xf8a1, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xb3, gbc.a());
        EXPECT(0x7c, gbc.b());
        EXPECT(0x37, gbc.c());
        EXPECT(0x6d, gbc.d());
        EXPECT(0x7d, gbc.e());
        EXPECT(0x7a, gbc.h());
        EXPECT(0x19, gbc.l());
        EXPECT(0xf8a1, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0xef51));
        EXPECT(0x52, gbc.readMem(0xf8a1));
        EXPECT(0xef, gbc.readMem(0xf8a2));
        // CF 01A4
        gbc.setState(0xc54e, 0x846a, 0xb90, 0x89bb, 0x730, 0x311a, 0x1, 0x1);
        gbc.writeMem(0x8468, { 0x0, 0x0 });
        gbc.writeMem(0xc54e, { 0xcf });
        gbc.step();
        EXPECT(0xb, gbc.a());
        EXPECT(0x89, gbc.b());
        EXPECT(0xbb, gbc.c());
        EXPECT(0x7, gbc.d());
        EXPECT(0x30, gbc.e());
        EXPECT(0x31, gbc.h());
        EXPECT(0x1a, gbc.l());
        EXPECT(0x8468, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x4f, gbc.readMem(0x8468));
        EXPECT(0xc5, gbc.readMem(0x8469));
        EXPECT(0xcf, gbc.readMem(0xc54e));
        // CF 01A6
        gbc.setState(0x6374, 0xff2e, 0x20c0, 0x8571, 0xf51d, 0x545e, 0x1, 0x1);
        gbc.writeMem(0x6374, { 0xcf });
        gbc.writeMem(0xff2c, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x20, gbc.a());
        EXPECT(0x85, gbc.b());
        EXPECT(0x71, gbc.c());
        EXPECT(0xf5, gbc.d());
        EXPECT(0x1d, gbc.e());
        EXPECT(0x54, gbc.h());
        EXPECT(0x5e, gbc.l());
        EXPECT(0xff2c, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x75, gbc.readMem(0xff2c));
        EXPECT(0x63, gbc.readMem(0xff2d));
        // CF 01AF
        gbc.setState(0xe729, 0x82fa, 0x1960, 0xce94, 0xbc2d, 0x4c7c, 0x1, 0x1);
        gbc.writeMem(0x82f8, { 0x0, 0x0 });
        gbc.writeMem(0xe729, { 0xcf });
        gbc.step();
        EXPECT(0x19, gbc.a());
        EXPECT(0xce, gbc.b());
        EXPECT(0x94, gbc.c());
        EXPECT(0xbc, gbc.d());
        EXPECT(0x2d, gbc.e());
        EXPECT(0x4c, gbc.h());
        EXPECT(0x7c, gbc.l());
        EXPECT(0x82f8, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x2a, gbc.readMem(0x82f8));
        EXPECT(0xe7, gbc.readMem(0x82f9));
        EXPECT(0xcf, gbc.readMem(0xe729));
        // CF 01B3
        gbc.setState(0xb820, 0x8572, 0x3570, 0xab28, 0xab0a, 0x154b, 0x0, 0x1);
        gbc.writeMem(0x8570, { 0x0, 0x0 });
        gbc.writeMem(0xb820, { 0xcf });
        gbc.step();
        EXPECT(0x35, gbc.a());
        EXPECT(0xab, gbc.b());
        EXPECT(0x28, gbc.c());
        EXPECT(0xab, gbc.d());
        EXPECT(0xa, gbc.e());
        EXPECT(0x15, gbc.h());
        EXPECT(0x4b, gbc.l());
        EXPECT(0x8570, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x21, gbc.readMem(0x8570));
        EXPECT(0xb8, gbc.readMem(0x8571));
        EXPECT(0xcf, gbc.readMem(0xb820));
        // CF 01B5
        gbc.setState(0x1e42, 0x8e93, 0x52c0, 0x22e7, 0x9ef5, 0xf9a5, 0x1, 0x0);
        gbc.writeMem(0x1e42, { 0xcf });
        gbc.writeMem(0x8e91, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x52, gbc.a());
        EXPECT(0x22, gbc.b());
        EXPECT(0xe7, gbc.c());
        EXPECT(0x9e, gbc.d());
        EXPECT(0xf5, gbc.e());
        EXPECT(0xf9, gbc.h());
        EXPECT(0xa5, gbc.l());
        EXPECT(0x8e91, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x43, gbc.readMem(0x8e91));
        EXPECT(0x1e, gbc.readMem(0x8e92));
        // CF 01B9
        gbc.setState(0xe305, 0x8fcf, 0x77f0, 0x409d, 0x6039, 0xb885, 0x1, 0x1);
        gbc.writeMem(0x8fcd, { 0x0, 0x0 });
        gbc.writeMem(0xe305, { 0xcf });
        gbc.step();
        EXPECT(0x77, gbc.a());
        EXPECT(0x40, gbc.b());
        EXPECT(0x9d, gbc.c());
        EXPECT(0x60, gbc.d());
        EXPECT(0x39, gbc.e());
        EXPECT(0xb8, gbc.h());
        EXPECT(0x85, gbc.l());
        EXPECT(0x8fcd, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x6, gbc.readMem(0x8fcd));
        EXPECT(0xe3, gbc.readMem(0x8fce));
        EXPECT(0xcf, gbc.readMem(0xe305));
        // CF 01BB
        gbc.setState(0x38ed, 0xe354, 0x8140, 0x316b, 0x7895, 0x4b41, 0x1, 0x0);
        gbc.writeMem(0x38ed, { 0xcf });
        gbc.writeMem(0xe352, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x81, gbc.a());
        EXPECT(0x31, gbc.b());
        EXPECT(0x6b, gbc.c());
        EXPECT(0x78, gbc.d());
        EXPECT(0x95, gbc.e());
        EXPECT(0x4b, gbc.h());
        EXPECT(0x41, gbc.l());
        EXPECT(0xe352, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xee, gbc.readMem(0xe352));
        EXPECT(0x38, gbc.readMem(0xe353));
        // CF 01BC
        gbc.setState(0xcfbe, 0xb688, 0xad90, 0xe745, 0xabe9, 0x6707, 0x0, 0x1);
        gbc.writeMem(0xb686, { 0x0, 0x0 });
        gbc.writeMem(0xcfbe, { 0xcf });
        gbc.step();
        EXPECT(0xad, gbc.a());
        EXPECT(0xe7, gbc.b());
        EXPECT(0x45, gbc.c());
        EXPECT(0xab, gbc.d());
        EXPECT(0xe9, gbc.e());
        EXPECT(0x67, gbc.h());
        EXPECT(0x7, gbc.l());
        EXPECT(0xb686, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xbf, gbc.readMem(0xb686));
        EXPECT(0xcf, gbc.readMem(0xb687));
        EXPECT(0xcf, gbc.readMem(0xcfbe));
        // CF 01BD
        gbc.setState(0xf84, 0xf928, 0x46d0, 0x207f, 0x7c15, 0x82f0, 0x1, 0x0);
        gbc.writeMem(0xf84, { 0xcf });
        gbc.writeMem(0xf926, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x46, gbc.a());
        EXPECT(0x20, gbc.b());
        EXPECT(0x7f, gbc.c());
        EXPECT(0x7c, gbc.d());
        EXPECT(0x15, gbc.e());
        EXPECT(0x82, gbc.h());
        EXPECT(0xf0, gbc.l());
        EXPECT(0xf926, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x85, gbc.readMem(0xf926));
        EXPECT(0xf, gbc.readMem(0xf927));
        // CF 01BE
        gbc.setState(0x8613, 0xb962, 0x6f30, 0x4d54, 0xe5b8, 0x1fe7, 0x1, 0x1);
        gbc.writeMem(0x8613, { 0xcf });
        gbc.writeMem(0xb960, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x6f, gbc.a());
        EXPECT(0x4d, gbc.b());
        EXPECT(0x54, gbc.c());
        EXPECT(0xe5, gbc.d());
        EXPECT(0xb8, gbc.e());
        EXPECT(0x1f, gbc.h());
        EXPECT(0xe7, gbc.l());
        EXPECT(0xb960, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0x8613));
        EXPECT(0x14, gbc.readMem(0xb960));
        EXPECT(0x86, gbc.readMem(0xb961));
        // CF 01BF
        gbc.setState(0x6ea6, 0x9f5e, 0xf120, 0x1aa1, 0xbc37, 0x2549, 0x0, 0x0);
        gbc.writeMem(0x6ea6, { 0xcf });
        gbc.writeMem(0x9f5c, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xf1, gbc.a());
        EXPECT(0x1a, gbc.b());
        EXPECT(0xa1, gbc.c());
        EXPECT(0xbc, gbc.d());
        EXPECT(0x37, gbc.e());
        EXPECT(0x25, gbc.h());
        EXPECT(0x49, gbc.l());
        EXPECT(0x9f5c, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xa7, gbc.readMem(0x9f5c));
        EXPECT(0x6e, gbc.readMem(0x9f5d));
        // CF 01C0
        gbc.setState(0x2452, 0xaa1c, 0x6130, 0x1e42, 0x3c, 0x7a98, 0x1, 0x1);
        gbc.writeMem(0x2452, { 0xcf });
        gbc.writeMem(0xaa1a, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x61, gbc.a());
        EXPECT(0x1e, gbc.b());
        EXPECT(0x42, gbc.c());
        EXPECT(0x0, gbc.d());
        EXPECT(0x3c, gbc.e());
        EXPECT(0x7a, gbc.h());
        EXPECT(0x98, gbc.l());
        EXPECT(0xaa1a, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x53, gbc.readMem(0xaa1a));
        EXPECT(0x24, gbc.readMem(0xaa1b));
        // CF 01C1
        gbc.setState(0x242, 0x845e, 0xfae0, 0x4a96, 0xdf59, 0x4e4c, 0x0, 0x0);
        gbc.writeMem(0x242, { 0xcf });
        gbc.writeMem(0x845c, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xfa, gbc.a());
        EXPECT(0x4a, gbc.b());
        EXPECT(0x96, gbc.c());
        EXPECT(0xdf, gbc.d());
        EXPECT(0x59, gbc.e());
        EXPECT(0x4e, gbc.h());
        EXPECT(0x4c, gbc.l());
        EXPECT(0x845c, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x43, gbc.readMem(0x845c));
        EXPECT(0x2, gbc.readMem(0x845d));
        // CF 01C2
        gbc.setState(0xcc9e, 0xd96f, 0xecb0, 0x33d3, 0xe893, 0x336d, 0x1, 0x0);
        gbc.writeMem(0xcc9e, { 0xcf });
        gbc.writeMem(0xd96d, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xec, gbc.a());
        EXPECT(0x33, gbc.b());
        EXPECT(0xd3, gbc.c());
        EXPECT(0xe8, gbc.d());
        EXPECT(0x93, gbc.e());
        EXPECT(0x33, gbc.h());
        EXPECT(0x6d, gbc.l());
        EXPECT(0xd96d, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0xcc9e));
        EXPECT(0x9f, gbc.readMem(0xd96d));
        EXPECT(0xcc, gbc.readMem(0xd96e));
        // CF 01C7
        gbc.setState(0x22ff, 0x89c4, 0xa1e0, 0xd3fd, 0x7b91, 0xe041, 0x0, 0x0);
        gbc.writeMem(0x22ff, { 0xcf });
        gbc.writeMem(0x89c2, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xa1, gbc.a());
        EXPECT(0xd3, gbc.b());
        EXPECT(0xfd, gbc.c());
        EXPECT(0x7b, gbc.d());
        EXPECT(0x91, gbc.e());
        EXPECT(0xe0, gbc.h());
        EXPECT(0x41, gbc.l());
        EXPECT(0x89c2, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x0, gbc.readMem(0x89c2));
        EXPECT(0x23, gbc.readMem(0x89c3));
        // CF 01CA
        gbc.setState(0xb3c8, 0xd985, 0x9c30, 0xed3e, 0x592f, 0xbe55, 0x1, 0x0);
        gbc.writeMem(0xb3c8, { 0xcf });
        gbc.writeMem(0xd983, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x9c, gbc.a());
        EXPECT(0xed, gbc.b());
        EXPECT(0x3e, gbc.c());
        EXPECT(0x59, gbc.d());
        EXPECT(0x2f, gbc.e());
        EXPECT(0xbe, gbc.h());
        EXPECT(0x55, gbc.l());
        EXPECT(0xd983, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0xb3c8));
        EXPECT(0xc9, gbc.readMem(0xd983));
        EXPECT(0xb3, gbc.readMem(0xd984));
        // CF 01CB
        gbc.setState(0x4652, 0xad73, 0xe4e0, 0x7723, 0x12d9, 0x2ed7, 0x0, 0x0);
        gbc.writeMem(0x4652, { 0xcf });
        gbc.writeMem(0xad71, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xe4, gbc.a());
        EXPECT(0x77, gbc.b());
        EXPECT(0x23, gbc.c());
        EXPECT(0x12, gbc.d());
        EXPECT(0xd9, gbc.e());
        EXPECT(0x2e, gbc.h());
        EXPECT(0xd7, gbc.l());
        EXPECT(0xad71, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x53, gbc.readMem(0xad71));
        EXPECT(0x46, gbc.readMem(0xad72));
        // CF 01CC
        gbc.setState(0x623f, 0x8516, 0x94d0, 0x923, 0x1005, 0x42ef, 0x1, 0x0);
        gbc.writeMem(0x623f, { 0xcf });
        gbc.writeMem(0x8514, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x94, gbc.a());
        EXPECT(0x9, gbc.b());
        EXPECT(0x23, gbc.c());
        EXPECT(0x10, gbc.d());
        EXPECT(0x5, gbc.e());
        EXPECT(0x42, gbc.h());
        EXPECT(0xef, gbc.l());
        EXPECT(0x8514, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x40, gbc.readMem(0x8514));
        EXPECT(0x62, gbc.readMem(0x8515));
        // CF 01CD
        gbc.setState(0xa860, 0x99c3, 0xf50, 0xf80, 0x656a, 0xdd3, 0x0, 0x1);
        gbc.writeMem(0x99c1, { 0x0, 0x0 });
        gbc.writeMem(0xa860, { 0xcf });
        gbc.step();
        EXPECT(0xf, gbc.a());
        EXPECT(0xf, gbc.b());
        EXPECT(0x80, gbc.c());
        EXPECT(0x65, gbc.d());
        EXPECT(0x6a, gbc.e());
        EXPECT(0xd, gbc.h());
        EXPECT(0xd3, gbc.l());
        EXPECT(0x99c1, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x61, gbc.readMem(0x99c1));
        EXPECT(0xa8, gbc.readMem(0x99c2));
        EXPECT(0xcf, gbc.readMem(0xa860));
        // CF 01CE
        gbc.setState(0x50be, 0xbe37, 0xffb0, 0xfec8, 0xd4cc, 0x4f4c, 0x0, 0x0);
        gbc.writeMem(0x50be, { 0xcf });
        gbc.writeMem(0xbe35, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xff, gbc.a());
        EXPECT(0xfe, gbc.b());
        EXPECT(0xc8, gbc.c());
        EXPECT(0xd4, gbc.d());
        EXPECT(0xcc, gbc.e());
        EXPECT(0x4f, gbc.h());
        EXPECT(0x4c, gbc.l());
        EXPECT(0xbe35, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xbf, gbc.readMem(0xbe35));
        EXPECT(0x50, gbc.readMem(0xbe36));
        // CF 01CF
        gbc.setState(0x49da, 0xaa79, 0x2ac0, 0x6186, 0x200, 0xb318, 0x0, 0x1);
        gbc.writeMem(0x49da, { 0xcf });
        gbc.writeMem(0xaa77, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x2a, gbc.a());
        EXPECT(0x61, gbc.b());
        EXPECT(0x86, gbc.c());
        EXPECT(0x2, gbc.d());
        EXPECT(0x0, gbc.e());
        EXPECT(0xb3, gbc.h());
        EXPECT(0x18, gbc.l());
        EXPECT(0xaa77, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdb, gbc.readMem(0xaa77));
        EXPECT(0x49, gbc.readMem(0xaa78));
        // CF 01D1
        gbc.setState(0x873, 0xfb7f, 0x7320, 0x6609, 0xfbd4, 0x2d27, 0x1, 0x1);
        gbc.writeMem(0x873, { 0xcf });
        gbc.writeMem(0xfb7d, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x73, gbc.a());
        EXPECT(0x66, gbc.b());
        EXPECT(0x9, gbc.c());
        EXPECT(0xfb, gbc.d());
        EXPECT(0xd4, gbc.e());
        EXPECT(0x2d, gbc.h());
        EXPECT(0x27, gbc.l());
        EXPECT(0xfb7d, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x74, gbc.readMem(0xfb7d));
        EXPECT(0x8, gbc.readMem(0xfb7e));
        // CF 01D2
        gbc.setState(0x3e9e, 0xffaa, 0x1bc0, 0x2017, 0xd95d, 0x5135, 0x0, 0x0);
        gbc.writeMem(0x3e9e, { 0xcf });
        gbc.writeMem(0xffa8, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x1b, gbc.a());
        EXPECT(0x20, gbc.b());
        EXPECT(0x17, gbc.c());
        EXPECT(0xd9, gbc.d());
        EXPECT(0x5d, gbc.e());
        EXPECT(0x51, gbc.h());
        EXPECT(0x35, gbc.l());
        EXPECT(0xffa8, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x9f, gbc.readMem(0xffa8));
        EXPECT(0x3e, gbc.readMem(0xffa9));
        // CF 01D3
        gbc.setState(0x9ba3, 0xa07a, 0x570, 0xc259, 0x187c, 0xa43e, 0x1, 0x1);
        gbc.writeMem(0x9ba3, { 0xcf });
        gbc.writeMem(0xa078, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x5, gbc.a());
        EXPECT(0xc2, gbc.b());
        EXPECT(0x59, gbc.c());
        EXPECT(0x18, gbc.d());
        EXPECT(0x7c, gbc.e());
        EXPECT(0xa4, gbc.h());
        EXPECT(0x3e, gbc.l());
        EXPECT(0xa078, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0x9ba3));
        EXPECT(0xa4, gbc.readMem(0xa078));
        EXPECT(0x9b, gbc.readMem(0xa079));
        // CF 01D4
        gbc.setState(0x7378, 0x8915, 0x51f0, 0x227c, 0x809a, 0x1a28, 0x0, 0x1);
        gbc.writeMem(0x7378, { 0xcf });
        gbc.writeMem(0x8913, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x51, gbc.a());
        EXPECT(0x22, gbc.b());
        EXPECT(0x7c, gbc.c());
        EXPECT(0x80, gbc.d());
        EXPECT(0x9a, gbc.e());
        EXPECT(0x1a, gbc.h());
        EXPECT(0x28, gbc.l());
        EXPECT(0x8913, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x79, gbc.readMem(0x8913));
        EXPECT(0x73, gbc.readMem(0x8914));
        // CF 01D5
        gbc.setState(0xd6c, 0xbbd6, 0xd660, 0x7c45, 0x453, 0x6974, 0x1, 0x0);
        gbc.writeMem(0xd6c, { 0xcf });
        gbc.writeMem(0xbbd4, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xd6, gbc.a());
        EXPECT(0x7c, gbc.b());
        EXPECT(0x45, gbc.c());
        EXPECT(0x4, gbc.d());
        EXPECT(0x53, gbc.e());
        EXPECT(0x69, gbc.h());
        EXPECT(0x74, gbc.l());
        EXPECT(0xbbd4, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x6d, gbc.readMem(0xbbd4));
        EXPECT(0xd, gbc.readMem(0xbbd5));
        // CF 01D9
        gbc.setState(0xe370, 0xe37c, 0x8dd0, 0xf183, 0x1a52, 0x9386, 0x1, 0x1);
        gbc.writeMem(0xe370, { 0xcf });
        gbc.writeMem(0xe37a, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x8d, gbc.a());
        EXPECT(0xf1, gbc.b());
        EXPECT(0x83, gbc.c());
        EXPECT(0x1a, gbc.d());
        EXPECT(0x52, gbc.e());
        EXPECT(0x93, gbc.h());
        EXPECT(0x86, gbc.l());
        EXPECT(0xe37a, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0xe370));
        EXPECT(0x71, gbc.readMem(0xe37a));
        EXPECT(0xe3, gbc.readMem(0xe37b));
        // CF 01DA
        gbc.setState(0x2848, 0xa1d3, 0xbe50, 0x4003, 0x9d96, 0x9a76, 0x1, 0x1);
        gbc.writeMem(0x2848, { 0xcf });
        gbc.writeMem(0xa1d1, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xbe, gbc.a());
        EXPECT(0x40, gbc.b());
        EXPECT(0x3, gbc.c());
        EXPECT(0x9d, gbc.d());
        EXPECT(0x96, gbc.e());
        EXPECT(0x9a, gbc.h());
        EXPECT(0x76, gbc.l());
        EXPECT(0xa1d1, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x49, gbc.readMem(0xa1d1));
        EXPECT(0x28, gbc.readMem(0xa1d2));
        // CF 01DB
        gbc.setState(0x5b25, 0xacc5, 0x7700, 0x5ea6, 0xfed4, 0xa2d0, 0x0, 0x0);
        gbc.writeMem(0x5b25, { 0xcf });
        gbc.writeMem(0xacc3, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x77, gbc.a());
        EXPECT(0x5e, gbc.b());
        EXPECT(0xa6, gbc.c());
        EXPECT(0xfe, gbc.d());
        EXPECT(0xd4, gbc.e());
        EXPECT(0xa2, gbc.h());
        EXPECT(0xd0, gbc.l());
        EXPECT(0xacc3, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x26, gbc.readMem(0xacc3));
        EXPECT(0x5b, gbc.readMem(0xacc4));
        // CF 01DC
        gbc.setState(0xc69f, 0x8c28, 0x9a30, 0x67e5, 0x9902, 0xd37b, 0x1, 0x1);
        gbc.writeMem(0x8c26, { 0x0, 0x0 });
        gbc.writeMem(0xc69f, { 0xcf });
        gbc.step();
        EXPECT(0x9a, gbc.a());
        EXPECT(0x67, gbc.b());
        EXPECT(0xe5, gbc.c());
        EXPECT(0x99, gbc.d());
        EXPECT(0x2, gbc.e());
        EXPECT(0xd3, gbc.h());
        EXPECT(0x7b, gbc.l());
        EXPECT(0x8c26, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xa0, gbc.readMem(0x8c26));
        EXPECT(0xc6, gbc.readMem(0x8c27));
        EXPECT(0xcf, gbc.readMem(0xc69f));
        // CF 01E5
        gbc.setState(0x752c, 0x9a10, 0x5480, 0x9c52, 0xcaae, 0x8141, 0x0, 0x0);
        gbc.writeMem(0x752c, { 0xcf });
        gbc.writeMem(0x9a0e, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x54, gbc.a());
        EXPECT(0x9c, gbc.b());
        EXPECT(0x52, gbc.c());
        EXPECT(0xca, gbc.d());
        EXPECT(0xae, gbc.e());
        EXPECT(0x81, gbc.h());
        EXPECT(0x41, gbc.l());
        EXPECT(0x9a0e, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x2d, gbc.readMem(0x9a0e));
        EXPECT(0x75, gbc.readMem(0x9a0f));
        // CF 01E6
        gbc.setState(0x2614, 0xca2b, 0x7180, 0x915a, 0xc649, 0x21ff, 0x1, 0x0);
        gbc.writeMem(0x2614, { 0xcf });
        gbc.writeMem(0xca29, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x71, gbc.a());
        EXPECT(0x91, gbc.b());
        EXPECT(0x5a, gbc.c());
        EXPECT(0xc6, gbc.d());
        EXPECT(0x49, gbc.e());
        EXPECT(0x21, gbc.h());
        EXPECT(0xff, gbc.l());
        EXPECT(0xca29, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x15, gbc.readMem(0xca29));
        EXPECT(0x26, gbc.readMem(0xca2a));
        // CF 01E9
        gbc.setState(0xd4a0, 0xcdef, 0xe970, 0x83e4, 0xd135, 0xe8e6, 0x0, 0x0);
        gbc.writeMem(0xcded, { 0x0, 0x0 });
        gbc.writeMem(0xd4a0, { 0xcf });
        gbc.step();
        EXPECT(0xe9, gbc.a());
        EXPECT(0x83, gbc.b());
        EXPECT(0xe4, gbc.c());
        EXPECT(0xd1, gbc.d());
        EXPECT(0x35, gbc.e());
        EXPECT(0xe8, gbc.h());
        EXPECT(0xe6, gbc.l());
        EXPECT(0xcded, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xa1, gbc.readMem(0xcded));
        EXPECT(0xd4, gbc.readMem(0xcdee));
        EXPECT(0xcf, gbc.readMem(0xd4a0));
        // CF 01EB
        gbc.setState(0xea5d, 0xf700, 0x25f0, 0x185d, 0xab30, 0x1f97, 0x1, 0x0);
        gbc.writeMem(0xea5d, { 0xcf });
        gbc.writeMem(0xf6fe, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x25, gbc.a());
        EXPECT(0x18, gbc.b());
        EXPECT(0x5d, gbc.c());
        EXPECT(0xab, gbc.d());
        EXPECT(0x30, gbc.e());
        EXPECT(0x1f, gbc.h());
        EXPECT(0x97, gbc.l());
        EXPECT(0xf6fe, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0xea5d));
        EXPECT(0x5e, gbc.readMem(0xf6fe));
        EXPECT(0xea, gbc.readMem(0xf6ff));
        // CF 01ED
        gbc.setState(0x73f, 0xe7e7, 0xf250, 0xac92, 0x7ebf, 0xb6f3, 0x1, 0x0);
        gbc.writeMem(0x73f, { 0xcf });
        gbc.writeMem(0xe7e5, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xf2, gbc.a());
        EXPECT(0xac, gbc.b());
        EXPECT(0x92, gbc.c());
        EXPECT(0x7e, gbc.d());
        EXPECT(0xbf, gbc.e());
        EXPECT(0xb6, gbc.h());
        EXPECT(0xf3, gbc.l());
        EXPECT(0xe7e5, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x40, gbc.readMem(0xe7e5));
        EXPECT(0x7, gbc.readMem(0xe7e6));
        // CF 01EE
        gbc.setState(0xccaa, 0xd121, 0xdd50, 0xfbd4, 0x61d6, 0x3a22, 0x0, 0x1);
        gbc.writeMem(0xccaa, { 0xcf });
        gbc.writeMem(0xd11f, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xdd, gbc.a());
        EXPECT(0xfb, gbc.b());
        EXPECT(0xd4, gbc.c());
        EXPECT(0x61, gbc.d());
        EXPECT(0xd6, gbc.e());
        EXPECT(0x3a, gbc.h());
        EXPECT(0x22, gbc.l());
        EXPECT(0xd11f, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0xccaa));
        EXPECT(0xab, gbc.readMem(0xd11f));
        EXPECT(0xcc, gbc.readMem(0xd120));
        // CF 01F1
        gbc.setState(0x6fbb, 0x9ede, 0x9760, 0x3d8a, 0x94e0, 0x34b7, 0x1, 0x1);
        gbc.writeMem(0x6fbb, { 0xcf });
        gbc.writeMem(0x9edc, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x97, gbc.a());
        EXPECT(0x3d, gbc.b());
        EXPECT(0x8a, gbc.c());
        EXPECT(0x94, gbc.d());
        EXPECT(0xe0, gbc.e());
        EXPECT(0x34, gbc.h());
        EXPECT(0xb7, gbc.l());
        EXPECT(0x9edc, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xbc, gbc.readMem(0x9edc));
        EXPECT(0x6f, gbc.readMem(0x9edd));
        // CF 01F6
        gbc.setState(0x710e, 0xd38a, 0xfdb0, 0xfd09, 0x7c00, 0xa476, 0x0, 0x0);
        gbc.writeMem(0x710e, { 0xcf });
        gbc.writeMem(0xd388, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xfd, gbc.a());
        EXPECT(0xfd, gbc.b());
        EXPECT(0x9, gbc.c());
        EXPECT(0x7c, gbc.d());
        EXPECT(0x0, gbc.e());
        EXPECT(0xa4, gbc.h());
        EXPECT(0x76, gbc.l());
        EXPECT(0xd388, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xf, gbc.readMem(0xd388));
        EXPECT(0x71, gbc.readMem(0xd389));
        // CF 01F7
        gbc.setState(0x6e21, 0xc7b7, 0x4310, 0x156d, 0x666d, 0x5a7f, 0x1, 0x1);
        gbc.writeMem(0x6e21, { 0xcf });
        gbc.writeMem(0xc7b5, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x43, gbc.a());
        EXPECT(0x15, gbc.b());
        EXPECT(0x6d, gbc.c());
        EXPECT(0x66, gbc.d());
        EXPECT(0x6d, gbc.e());
        EXPECT(0x5a, gbc.h());
        EXPECT(0x7f, gbc.l());
        EXPECT(0xc7b5, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x22, gbc.readMem(0xc7b5));
        EXPECT(0x6e, gbc.readMem(0xc7b6));
        // CF 01FB
        gbc.setState(0x799c, 0xbe39, 0x65b0, 0x4cd7, 0xea72, 0xe0a5, 0x1, 0x0);
        gbc.writeMem(0x799c, { 0xcf });
        gbc.writeMem(0xbe37, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x65, gbc.a());
        EXPECT(0x4c, gbc.b());
        EXPECT(0xd7, gbc.c());
        EXPECT(0xea, gbc.d());
        EXPECT(0x72, gbc.e());
        EXPECT(0xe0, gbc.h());
        EXPECT(0xa5, gbc.l());
        EXPECT(0xbe37, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x9d, gbc.readMem(0xbe37));
        EXPECT(0x79, gbc.readMem(0xbe38));
        // CF 01FC
        gbc.setState(0xabb2, 0xcd7b, 0x5f20, 0x65bc, 0xdf69, 0x369f, 0x0, 0x1);
        gbc.writeMem(0xabb2, { 0xcf });
        gbc.writeMem(0xcd79, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x5f, gbc.a());
        EXPECT(0x65, gbc.b());
        EXPECT(0xbc, gbc.c());
        EXPECT(0xdf, gbc.d());
        EXPECT(0x69, gbc.e());
        EXPECT(0x36, gbc.h());
        EXPECT(0x9f, gbc.l());
        EXPECT(0xcd79, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0xabb2));
        EXPECT(0xb3, gbc.readMem(0xcd79));
        EXPECT(0xab, gbc.readMem(0xcd7a));
        // CF 01FD
        gbc.setState(0xe2bf, 0x896c, 0xb000, 0x3740, 0xcabb, 0xc84d, 0x0, 0x1);
        gbc.writeMem(0x896a, { 0x0, 0x0 });
        gbc.writeMem(0xe2bf, { 0xcf });
        gbc.step();
        EXPECT(0xb0, gbc.a());
        EXPECT(0x37, gbc.b());
        EXPECT(0x40, gbc.c());
        EXPECT(0xca, gbc.d());
        EXPECT(0xbb, gbc.e());
        EXPECT(0xc8, gbc.h());
        EXPECT(0x4d, gbc.l());
        EXPECT(0x896a, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xc0, gbc.readMem(0x896a));
        EXPECT(0xe2, gbc.readMem(0x896b));
        EXPECT(0xcf, gbc.readMem(0xe2bf));
        // CF 01FE
        gbc.setState(0xc771, 0x92db, 0x4070, 0xc8c2, 0xc27f, 0xf924, 0x1, 0x1);
        gbc.writeMem(0x92d9, { 0x0, 0x0 });
        gbc.writeMem(0xc771, { 0xcf });
        gbc.step();
        EXPECT(0x40, gbc.a());
        EXPECT(0xc8, gbc.b());
        EXPECT(0xc2, gbc.c());
        EXPECT(0xc2, gbc.d());
        EXPECT(0x7f, gbc.e());
        EXPECT(0xf9, gbc.h());
        EXPECT(0x24, gbc.l());
        EXPECT(0x92d9, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x72, gbc.readMem(0x92d9));
        EXPECT(0xc7, gbc.readMem(0x92da));
        EXPECT(0xcf, gbc.readMem(0xc771));
        // CF 0201
        gbc.setState(0x538a, 0xfea4, 0xc5f0, 0x60ea, 0x6a57, 0x1615, 0x0, 0x1);
        gbc.writeMem(0x538a, { 0xcf });
        gbc.writeMem(0xfea2, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xc5, gbc.a());
        EXPECT(0x60, gbc.b());
        EXPECT(0xea, gbc.c());
        EXPECT(0x6a, gbc.d());
        EXPECT(0x57, gbc.e());
        EXPECT(0x16, gbc.h());
        EXPECT(0x15, gbc.l());
        EXPECT(0xfea2, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x8b, gbc.readMem(0xfea2));
        EXPECT(0x53, gbc.readMem(0xfea3));
        // CF 0202
        gbc.setState(0x1e03, 0xa3f8, 0xde20, 0x9595, 0x7b98, 0xbfde, 0x0, 0x1);
        gbc.writeMem(0x1e03, { 0xcf });
        gbc.writeMem(0xa3f6, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xde, gbc.a());
        EXPECT(0x95, gbc.b());
        EXPECT(0x95, gbc.c());
        EXPECT(0x7b, gbc.d());
        EXPECT(0x98, gbc.e());
        EXPECT(0xbf, gbc.h());
        EXPECT(0xde, gbc.l());
        EXPECT(0xa3f6, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x4, gbc.readMem(0xa3f6));
        EXPECT(0x1e, gbc.readMem(0xa3f7));
        // CF 0203
        gbc.setState(0x449a, 0xec06, 0x33b0, 0x2369, 0x185a, 0xd3ed, 0x1, 0x0);
        gbc.writeMem(0x449a, { 0xcf });
        gbc.writeMem(0xec04, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x33, gbc.a());
        EXPECT(0x23, gbc.b());
        EXPECT(0x69, gbc.c());
        EXPECT(0x18, gbc.d());
        EXPECT(0x5a, gbc.e());
        EXPECT(0xd3, gbc.h());
        EXPECT(0xed, gbc.l());
        EXPECT(0xec04, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x9b, gbc.readMem(0xec04));
        EXPECT(0x44, gbc.readMem(0xec05));
        // CF 0209
        gbc.setState(0x4d6f, 0x83cd, 0xad10, 0xf85d, 0x47fb, 0x6048, 0x1, 0x0);
        gbc.writeMem(0x4d6f, { 0xcf });
        gbc.writeMem(0x83cb, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xad, gbc.a());
        EXPECT(0xf8, gbc.b());
        EXPECT(0x5d, gbc.c());
        EXPECT(0x47, gbc.d());
        EXPECT(0xfb, gbc.e());
        EXPECT(0x60, gbc.h());
        EXPECT(0x48, gbc.l());
        EXPECT(0x83cb, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x70, gbc.readMem(0x83cb));
        EXPECT(0x4d, gbc.readMem(0x83cc));
        // CF 020C
        gbc.setState(0xef9b, 0xfca2, 0x2370, 0x9a31, 0x823d, 0xe313, 0x1, 0x1);
        gbc.writeMem(0xef9b, { 0xcf });
        gbc.writeMem(0xfca0, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x23, gbc.a());
        EXPECT(0x9a, gbc.b());
        EXPECT(0x31, gbc.c());
        EXPECT(0x82, gbc.d());
        EXPECT(0x3d, gbc.e());
        EXPECT(0xe3, gbc.h());
        EXPECT(0x13, gbc.l());
        EXPECT(0xfca0, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0xef9b));
        EXPECT(0x9c, gbc.readMem(0xfca0));
        EXPECT(0xef, gbc.readMem(0xfca1));
        // CF 020D
        gbc.setState(0x8dd4, 0xb432, 0x2160, 0x114d, 0xe5e0, 0x9e87, 0x1, 0x1);
        gbc.writeMem(0x8dd4, { 0xcf });
        gbc.writeMem(0xb430, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x21, gbc.a());
        EXPECT(0x11, gbc.b());
        EXPECT(0x4d, gbc.c());
        EXPECT(0xe5, gbc.d());
        EXPECT(0xe0, gbc.e());
        EXPECT(0x9e, gbc.h());
        EXPECT(0x87, gbc.l());
        EXPECT(0xb430, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0x8dd4));
        EXPECT(0xd5, gbc.readMem(0xb430));
        EXPECT(0x8d, gbc.readMem(0xb431));
        // CF 020E
        gbc.setState(0x2d26, 0x90c5, 0x3ac0, 0x318f, 0x9393, 0x8b5e, 0x1, 0x1);
        gbc.writeMem(0x2d26, { 0xcf });
        gbc.writeMem(0x90c3, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x3a, gbc.a());
        EXPECT(0x31, gbc.b());
        EXPECT(0x8f, gbc.c());
        EXPECT(0x93, gbc.d());
        EXPECT(0x93, gbc.e());
        EXPECT(0x8b, gbc.h());
        EXPECT(0x5e, gbc.l());
        EXPECT(0x90c3, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x27, gbc.readMem(0x90c3));
        EXPECT(0x2d, gbc.readMem(0x90c4));
        // CF 0210
        gbc.setState(0x8425, 0xec5e, 0xb680, 0x5361, 0x7e6c, 0x978f, 0x0, 0x1);
        gbc.writeMem(0x8425, { 0xcf });
        gbc.writeMem(0xec5c, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xb6, gbc.a());
        EXPECT(0x53, gbc.b());
        EXPECT(0x61, gbc.c());
        EXPECT(0x7e, gbc.d());
        EXPECT(0x6c, gbc.e());
        EXPECT(0x97, gbc.h());
        EXPECT(0x8f, gbc.l());
        EXPECT(0xec5c, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0x8425));
        EXPECT(0x26, gbc.readMem(0xec5c));
        EXPECT(0x84, gbc.readMem(0xec5d));
        // CF 0214
        gbc.setState(0xac16, 0xa636, 0x66d0, 0x3e29, 0x917f, 0x2731, 0x0, 0x0);
        gbc.writeMem(0xa634, { 0x0, 0x0 });
        gbc.writeMem(0xac16, { 0xcf });
        gbc.step();
        EXPECT(0x66, gbc.a());
        EXPECT(0x3e, gbc.b());
        EXPECT(0x29, gbc.c());
        EXPECT(0x91, gbc.d());
        EXPECT(0x7f, gbc.e());
        EXPECT(0x27, gbc.h());
        EXPECT(0x31, gbc.l());
        EXPECT(0xa634, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x17, gbc.readMem(0xa634));
        EXPECT(0xac, gbc.readMem(0xa635));
        EXPECT(0xcf, gbc.readMem(0xac16));
        // CF 0218
        gbc.setState(0x79a5, 0x8973, 0x1260, 0x9b63, 0x4f06, 0x828e, 0x0, 0x1);
        gbc.writeMem(0x79a5, { 0xcf });
        gbc.writeMem(0x8971, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x12, gbc.a());
        EXPECT(0x9b, gbc.b());
        EXPECT(0x63, gbc.c());
        EXPECT(0x4f, gbc.d());
        EXPECT(0x6, gbc.e());
        EXPECT(0x82, gbc.h());
        EXPECT(0x8e, gbc.l());
        EXPECT(0x8971, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xa6, gbc.readMem(0x8971));
        EXPECT(0x79, gbc.readMem(0x8972));
        // CF 021A
        gbc.setState(0xde49, 0xf153, 0x3af0, 0x2305, 0xaf15, 0x5f0, 0x0, 0x1);
        gbc.writeMem(0xde49, { 0xcf });
        gbc.writeMem(0xf151, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x3a, gbc.a());
        EXPECT(0x23, gbc.b());
        EXPECT(0x5, gbc.c());
        EXPECT(0xaf, gbc.d());
        EXPECT(0x15, gbc.e());
        EXPECT(0x5, gbc.h());
        EXPECT(0xf0, gbc.l());
        EXPECT(0xf151, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0xde49));
        EXPECT(0x4a, gbc.readMem(0xf151));
        EXPECT(0xde, gbc.readMem(0xf152));
        // CF 021B
        gbc.setState(0x9036, 0xc81b, 0x1cf0, 0x5aaa, 0x4349, 0xfde, 0x0, 0x0);
        gbc.writeMem(0x9036, { 0xcf });
        gbc.writeMem(0xc819, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x1c, gbc.a());
        EXPECT(0x5a, gbc.b());
        EXPECT(0xaa, gbc.c());
        EXPECT(0x43, gbc.d());
        EXPECT(0x49, gbc.e());
        EXPECT(0xf, gbc.h());
        EXPECT(0xde, gbc.l());
        EXPECT(0xc819, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0x9036));
        EXPECT(0x37, gbc.readMem(0xc819));
        EXPECT(0x90, gbc.readMem(0xc81a));
        // CF 021D
        gbc.setState(0xdf8b, 0xcaf8, 0x4580, 0x9c5c, 0x3f49, 0x1d9b, 0x1, 0x0);
        gbc.writeMem(0xcaf6, { 0x0, 0x0 });
        gbc.writeMem(0xdf8b, { 0xcf });
        gbc.step();
        EXPECT(0x45, gbc.a());
        EXPECT(0x9c, gbc.b());
        EXPECT(0x5c, gbc.c());
        EXPECT(0x3f, gbc.d());
        EXPECT(0x49, gbc.e());
        EXPECT(0x1d, gbc.h());
        EXPECT(0x9b, gbc.l());
        EXPECT(0xcaf6, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x8c, gbc.readMem(0xcaf6));
        EXPECT(0xdf, gbc.readMem(0xcaf7));
        EXPECT(0xcf, gbc.readMem(0xdf8b));
        // CF 021E
        gbc.setState(0x1115, 0xae8d, 0x2190, 0xc2f4, 0x17e3, 0x7995, 0x1, 0x0);
        gbc.writeMem(0x1115, { 0xcf });
        gbc.writeMem(0xae8b, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x21, gbc.a());
        EXPECT(0xc2, gbc.b());
        EXPECT(0xf4, gbc.c());
        EXPECT(0x17, gbc.d());
        EXPECT(0xe3, gbc.e());
        EXPECT(0x79, gbc.h());
        EXPECT(0x95, gbc.l());
        EXPECT(0xae8b, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x16, gbc.readMem(0xae8b));
        EXPECT(0x11, gbc.readMem(0xae8c));
        // CF 021F
        gbc.setState(0xb24f, 0xab65, 0x77f0, 0x2ff0, 0x6ea5, 0xff3c, 0x1, 0x0);
        gbc.writeMem(0xab63, { 0x0, 0x0 });
        gbc.writeMem(0xb24f, { 0xcf });
        gbc.step();
        EXPECT(0x77, gbc.a());
        EXPECT(0x2f, gbc.b());
        EXPECT(0xf0, gbc.c());
        EXPECT(0x6e, gbc.d());
        EXPECT(0xa5, gbc.e());
        EXPECT(0xff, gbc.h());
        EXPECT(0x3c, gbc.l());
        EXPECT(0xab63, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x50, gbc.readMem(0xab63));
        EXPECT(0xb2, gbc.readMem(0xab64));
        EXPECT(0xcf, gbc.readMem(0xb24f));
        // CF 0221
        gbc.setState(0x6b08, 0xddd6, 0x1e90, 0x2fd6, 0x89e1, 0xff40, 0x0, 0x1);
        gbc.writeMem(0x6b08, { 0xcf });
        gbc.writeMem(0xddd4, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x1e, gbc.a());
        EXPECT(0x2f, gbc.b());
        EXPECT(0xd6, gbc.c());
        EXPECT(0x89, gbc.d());
        EXPECT(0xe1, gbc.e());
        EXPECT(0xff, gbc.h());
        EXPECT(0x40, gbc.l());
        EXPECT(0xddd4, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x9, gbc.readMem(0xddd4));
        EXPECT(0x6b, gbc.readMem(0xddd5));
        // CF 0223
        gbc.setState(0xad5a, 0xedcd, 0x6fd0, 0x4d97, 0x1bdd, 0x80f9, 0x1, 0x1);
        gbc.writeMem(0xad5a, { 0xcf });
        gbc.writeMem(0xedcb, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x6f, gbc.a());
        EXPECT(0x4d, gbc.b());
        EXPECT(0x97, gbc.c());
        EXPECT(0x1b, gbc.d());
        EXPECT(0xdd, gbc.e());
        EXPECT(0x80, gbc.h());
        EXPECT(0xf9, gbc.l());
        EXPECT(0xedcb, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0xad5a));
        EXPECT(0x5b, gbc.readMem(0xedcb));
        EXPECT(0xad, gbc.readMem(0xedcc));
        // CF 0224
        gbc.setState(0xc2d8, 0xb692, 0xdc0, 0xd73d, 0xd1da, 0xbd48, 0x0, 0x0);
        gbc.writeMem(0xb690, { 0x0, 0x0 });
        gbc.writeMem(0xc2d8, { 0xcf });
        gbc.step();
        EXPECT(0xd, gbc.a());
        EXPECT(0xd7, gbc.b());
        EXPECT(0x3d, gbc.c());
        EXPECT(0xd1, gbc.d());
        EXPECT(0xda, gbc.e());
        EXPECT(0xbd, gbc.h());
        EXPECT(0x48, gbc.l());
        EXPECT(0xb690, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xd9, gbc.readMem(0xb690));
        EXPECT(0xc2, gbc.readMem(0xb691));
        EXPECT(0xcf, gbc.readMem(0xc2d8));
        // CF 0225
        gbc.setState(0x384b, 0xe682, 0x2310, 0x7d86, 0x1187, 0x229d, 0x0, 0x1);
        gbc.writeMem(0x384b, { 0xcf });
        gbc.writeMem(0xe680, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x23, gbc.a());
        EXPECT(0x7d, gbc.b());
        EXPECT(0x86, gbc.c());
        EXPECT(0x11, gbc.d());
        EXPECT(0x87, gbc.e());
        EXPECT(0x22, gbc.h());
        EXPECT(0x9d, gbc.l());
        EXPECT(0xe680, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x4c, gbc.readMem(0xe680));
        EXPECT(0x38, gbc.readMem(0xe681));
        // CF 0226
        gbc.setState(0x82e0, 0xd78e, 0xaea0, 0xef8d, 0x2a1d, 0xfbff, 0x0, 0x0);
        gbc.writeMem(0x82e0, { 0xcf });
        gbc.writeMem(0xd78c, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xae, gbc.a());
        EXPECT(0xef, gbc.b());
        EXPECT(0x8d, gbc.c());
        EXPECT(0x2a, gbc.d());
        EXPECT(0x1d, gbc.e());
        EXPECT(0xfb, gbc.h());
        EXPECT(0xff, gbc.l());
        EXPECT(0xd78c, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0x82e0));
        EXPECT(0xe1, gbc.readMem(0xd78c));
        EXPECT(0x82, gbc.readMem(0xd78d));
        // CF 0229
        gbc.setState(0x2a83, 0x951c, 0xe970, 0x631c, 0xf645, 0xdfda, 0x1, 0x0);
        gbc.writeMem(0x2a83, { 0xcf });
        gbc.writeMem(0x951a, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xe9, gbc.a());
        EXPECT(0x63, gbc.b());
        EXPECT(0x1c, gbc.c());
        EXPECT(0xf6, gbc.d());
        EXPECT(0x45, gbc.e());
        EXPECT(0xdf, gbc.h());
        EXPECT(0xda, gbc.l());
        EXPECT(0x951a, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x84, gbc.readMem(0x951a));
        EXPECT(0x2a, gbc.readMem(0x951b));
        // CF 022B
        gbc.setState(0x24b0, 0xeb8f, 0xb1d0, 0x76e3, 0x9139, 0x9d9e, 0x1, 0x1);
        gbc.writeMem(0x24b0, { 0xcf });
        gbc.writeMem(0xeb8d, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xb1, gbc.a());
        EXPECT(0x76, gbc.b());
        EXPECT(0xe3, gbc.c());
        EXPECT(0x91, gbc.d());
        EXPECT(0x39, gbc.e());
        EXPECT(0x9d, gbc.h());
        EXPECT(0x9e, gbc.l());
        EXPECT(0xeb8d, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xb1, gbc.readMem(0xeb8d));
        EXPECT(0x24, gbc.readMem(0xeb8e));
        // CF 022F
        gbc.setState(0xbae1, 0xda45, 0x6fd0, 0xee86, 0x9724, 0xac95, 0x1, 0x1);
        gbc.writeMem(0xbae1, { 0xcf });
        gbc.writeMem(0xda43, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x6f, gbc.a());
        EXPECT(0xee, gbc.b());
        EXPECT(0x86, gbc.c());
        EXPECT(0x97, gbc.d());
        EXPECT(0x24, gbc.e());
        EXPECT(0xac, gbc.h());
        EXPECT(0x95, gbc.l());
        EXPECT(0xda43, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0xbae1));
        EXPECT(0xe2, gbc.readMem(0xda43));
        EXPECT(0xba, gbc.readMem(0xda44));
        // CF 0230
        gbc.setState(0x678e, 0x843e, 0x7830, 0x317e, 0x6a9f, 0xe464, 0x1, 0x0);
        gbc.writeMem(0x678e, { 0xcf });
        gbc.writeMem(0x843c, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x78, gbc.a());
        EXPECT(0x31, gbc.b());
        EXPECT(0x7e, gbc.c());
        EXPECT(0x6a, gbc.d());
        EXPECT(0x9f, gbc.e());
        EXPECT(0xe4, gbc.h());
        EXPECT(0x64, gbc.l());
        EXPECT(0x843c, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x8f, gbc.readMem(0x843c));
        EXPECT(0x67, gbc.readMem(0x843d));
        // CF 0231
        gbc.setState(0x2842, 0xe13e, 0xe770, 0x749c, 0x77e2, 0xf2e3, 0x0, 0x1);
        gbc.writeMem(0x2842, { 0xcf });
        gbc.writeMem(0xe13c, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xe7, gbc.a());
        EXPECT(0x74, gbc.b());
        EXPECT(0x9c, gbc.c());
        EXPECT(0x77, gbc.d());
        EXPECT(0xe2, gbc.e());
        EXPECT(0xf2, gbc.h());
        EXPECT(0xe3, gbc.l());
        EXPECT(0xe13c, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x43, gbc.readMem(0xe13c));
        EXPECT(0x28, gbc.readMem(0xe13d));
        // CF 0233
        gbc.setState(0x41bc, 0xb2b7, 0xe0e0, 0x3c1f, 0x3e1f, 0x8e88, 0x0, 0x1);
        gbc.writeMem(0x41bc, { 0xcf });
        gbc.writeMem(0xb2b5, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xe0, gbc.a());
        EXPECT(0x3c, gbc.b());
        EXPECT(0x1f, gbc.c());
        EXPECT(0x3e, gbc.d());
        EXPECT(0x1f, gbc.e());
        EXPECT(0x8e, gbc.h());
        EXPECT(0x88, gbc.l());
        EXPECT(0xb2b5, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xbd, gbc.readMem(0xb2b5));
        EXPECT(0x41, gbc.readMem(0xb2b6));
        // CF 0234
        gbc.setState(0xc1dc, 0xd42d, 0x5730, 0xda1d, 0x98d, 0x87dd, 0x1, 0x1);
        gbc.writeMem(0xc1dc, { 0xcf });
        gbc.writeMem(0xd42b, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x57, gbc.a());
        EXPECT(0xda, gbc.b());
        EXPECT(0x1d, gbc.c());
        EXPECT(0x9, gbc.d());
        EXPECT(0x8d, gbc.e());
        EXPECT(0x87, gbc.h());
        EXPECT(0xdd, gbc.l());
        EXPECT(0xd42b, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0xc1dc));
        EXPECT(0xdd, gbc.readMem(0xd42b));
        EXPECT(0xc1, gbc.readMem(0xd42c));
        // CF 0237
        gbc.setState(0x1731, 0xbffd, 0xe740, 0xcf9a, 0x4980, 0xa6de, 0x0, 0x1);
        gbc.writeMem(0x1731, { 0xcf });
        gbc.writeMem(0xbffb, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xe7, gbc.a());
        EXPECT(0xcf, gbc.b());
        EXPECT(0x9a, gbc.c());
        EXPECT(0x49, gbc.d());
        EXPECT(0x80, gbc.e());
        EXPECT(0xa6, gbc.h());
        EXPECT(0xde, gbc.l());
        EXPECT(0xbffb, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x32, gbc.readMem(0xbffb));
        EXPECT(0x17, gbc.readMem(0xbffc));
        // CF 0239
        gbc.setState(0xe213, 0xe3bf, 0xe5e0, 0xb174, 0xd551, 0xc1e5, 0x1, 0x0);
        gbc.writeMem(0xe213, { 0xcf });
        gbc.writeMem(0xe3bd, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xe5, gbc.a());
        EXPECT(0xb1, gbc.b());
        EXPECT(0x74, gbc.c());
        EXPECT(0xd5, gbc.d());
        EXPECT(0x51, gbc.e());
        EXPECT(0xc1, gbc.h());
        EXPECT(0xe5, gbc.l());
        EXPECT(0xe3bd, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0xe213));
        EXPECT(0x14, gbc.readMem(0xe3bd));
        EXPECT(0xe2, gbc.readMem(0xe3be));
        // CF 023A
        gbc.setState(0x4aae, 0xa8a4, 0x44e0, 0xdfa7, 0x2407, 0xcb5b, 0x0, 0x0);
        gbc.writeMem(0x4aae, { 0xcf });
        gbc.writeMem(0xa8a2, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x44, gbc.a());
        EXPECT(0xdf, gbc.b());
        EXPECT(0xa7, gbc.c());
        EXPECT(0x24, gbc.d());
        EXPECT(0x7, gbc.e());
        EXPECT(0xcb, gbc.h());
        EXPECT(0x5b, gbc.l());
        EXPECT(0xa8a2, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xa8a2));
        EXPECT(0x4a, gbc.readMem(0xa8a3));
        // CF 023B
        gbc.setState(0xb107, 0xef13, 0x2dc0, 0x1cb3, 0x10bb, 0x594b, 0x1, 0x0);
        gbc.writeMem(0xb107, { 0xcf });
        gbc.writeMem(0xef11, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x2d, gbc.a());
        EXPECT(0x1c, gbc.b());
        EXPECT(0xb3, gbc.c());
        EXPECT(0x10, gbc.d());
        EXPECT(0xbb, gbc.e());
        EXPECT(0x59, gbc.h());
        EXPECT(0x4b, gbc.l());
        EXPECT(0xef11, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0xb107));
        EXPECT(0x8, gbc.readMem(0xef11));
        EXPECT(0xb1, gbc.readMem(0xef12));
        // CF 023C
        gbc.setState(0xb02, 0xab9c, 0xde20, 0xa185, 0xe2c7, 0xdc3f, 0x1, 0x0);
        gbc.writeMem(0xb02, { 0xcf });
        gbc.writeMem(0xab9a, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xde, gbc.a());
        EXPECT(0xa1, gbc.b());
        EXPECT(0x85, gbc.c());
        EXPECT(0xe2, gbc.d());
        EXPECT(0xc7, gbc.e());
        EXPECT(0xdc, gbc.h());
        EXPECT(0x3f, gbc.l());
        EXPECT(0xab9a, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x3, gbc.readMem(0xab9a));
        EXPECT(0xb, gbc.readMem(0xab9b));
        // CF 023E
        gbc.setState(0xda85, 0xafee, 0x1600, 0x81cd, 0xf7bb, 0x3840, 0x1, 0x1);
        gbc.writeMem(0xafec, { 0x0, 0x0 });
        gbc.writeMem(0xda85, { 0xcf });
        gbc.step();
        EXPECT(0x16, gbc.a());
        EXPECT(0x81, gbc.b());
        EXPECT(0xcd, gbc.c());
        EXPECT(0xf7, gbc.d());
        EXPECT(0xbb, gbc.e());
        EXPECT(0x38, gbc.h());
        EXPECT(0x40, gbc.l());
        EXPECT(0xafec, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x86, gbc.readMem(0xafec));
        EXPECT(0xda, gbc.readMem(0xafed));
        EXPECT(0xcf, gbc.readMem(0xda85));
        // CF 0242
        gbc.setState(0x2873, 0xa21c, 0x3590, 0xc324, 0xecc4, 0x6bfe, 0x0, 0x0);
        gbc.writeMem(0x2873, { 0xcf });
        gbc.writeMem(0xa21a, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x35, gbc.a());
        EXPECT(0xc3, gbc.b());
        EXPECT(0x24, gbc.c());
        EXPECT(0xec, gbc.d());
        EXPECT(0xc4, gbc.e());
        EXPECT(0x6b, gbc.h());
        EXPECT(0xfe, gbc.l());
        EXPECT(0xa21a, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x74, gbc.readMem(0xa21a));
        EXPECT(0x28, gbc.readMem(0xa21b));
        // CF 0248
        gbc.setState(0xc048, 0x82b4, 0xad20, 0x5c7f, 0x5090, 0x4ceb, 0x1, 0x0);
        gbc.writeMem(0x82b2, { 0x0, 0x0 });
        gbc.writeMem(0xc048, { 0xcf });
        gbc.step();
        EXPECT(0xad, gbc.a());
        EXPECT(0x5c, gbc.b());
        EXPECT(0x7f, gbc.c());
        EXPECT(0x50, gbc.d());
        EXPECT(0x90, gbc.e());
        EXPECT(0x4c, gbc.h());
        EXPECT(0xeb, gbc.l());
        EXPECT(0x82b2, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x49, gbc.readMem(0x82b2));
        EXPECT(0xc0, gbc.readMem(0x82b3));
        EXPECT(0xcf, gbc.readMem(0xc048));
        // CF 0249
        gbc.setState(0x5e67, 0xb7b7, 0x56d0, 0x8855, 0x3fea, 0xa80f, 0x1, 0x1);
        gbc.writeMem(0x5e67, { 0xcf });
        gbc.writeMem(0xb7b5, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x56, gbc.a());
        EXPECT(0x88, gbc.b());
        EXPECT(0x55, gbc.c());
        EXPECT(0x3f, gbc.d());
        EXPECT(0xea, gbc.e());
        EXPECT(0xa8, gbc.h());
        EXPECT(0xf, gbc.l());
        EXPECT(0xb7b5, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x68, gbc.readMem(0xb7b5));
        EXPECT(0x5e, gbc.readMem(0xb7b6));
        // CF 024E
        gbc.setState(0xc23a, 0xe0c8, 0x3470, 0xe7c, 0xabe3, 0x8b5c, 0x0, 0x0);
        gbc.writeMem(0xc23a, { 0xcf });
        gbc.writeMem(0xe0c6, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x34, gbc.a());
        EXPECT(0xe, gbc.b());
        EXPECT(0x7c, gbc.c());
        EXPECT(0xab, gbc.d());
        EXPECT(0xe3, gbc.e());
        EXPECT(0x8b, gbc.h());
        EXPECT(0x5c, gbc.l());
        EXPECT(0xe0c6, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0xc23a));
        EXPECT(0x3b, gbc.readMem(0xe0c6));
        EXPECT(0xc2, gbc.readMem(0xe0c7));
        // CF 0250
        gbc.setState(0x5822, 0xa190, 0xc950, 0x791c, 0xfa93, 0xcc7d, 0x0, 0x0);
        gbc.writeMem(0x5822, { 0xcf });
        gbc.writeMem(0xa18e, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xc9, gbc.a());
        EXPECT(0x79, gbc.b());
        EXPECT(0x1c, gbc.c());
        EXPECT(0xfa, gbc.d());
        EXPECT(0x93, gbc.e());
        EXPECT(0xcc, gbc.h());
        EXPECT(0x7d, gbc.l());
        EXPECT(0xa18e, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x23, gbc.readMem(0xa18e));
        EXPECT(0x58, gbc.readMem(0xa18f));
        // CF 0251
        gbc.setState(0x3431, 0xcf88, 0x5f20, 0xfe77, 0x58be, 0x5fd6, 0x1, 0x0);
        gbc.writeMem(0x3431, { 0xcf });
        gbc.writeMem(0xcf86, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x5f, gbc.a());
        EXPECT(0xfe, gbc.b());
        EXPECT(0x77, gbc.c());
        EXPECT(0x58, gbc.d());
        EXPECT(0xbe, gbc.e());
        EXPECT(0x5f, gbc.h());
        EXPECT(0xd6, gbc.l());
        EXPECT(0xcf86, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x32, gbc.readMem(0xcf86));
        EXPECT(0x34, gbc.readMem(0xcf87));
        // CF 0255
        gbc.setState(0x2342, 0xb2f8, 0x3b50, 0xa087, 0x5ddb, 0xfa1b, 0x1, 0x0);
        gbc.writeMem(0x2342, { 0xcf });
        gbc.writeMem(0xb2f6, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x3b, gbc.a());
        EXPECT(0xa0, gbc.b());
        EXPECT(0x87, gbc.c());
        EXPECT(0x5d, gbc.d());
        EXPECT(0xdb, gbc.e());
        EXPECT(0xfa, gbc.h());
        EXPECT(0x1b, gbc.l());
        EXPECT(0xb2f6, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x43, gbc.readMem(0xb2f6));
        EXPECT(0x23, gbc.readMem(0xb2f7));
        // CF 0258
        gbc.setState(0xcb49, 0xb9c3, 0xde90, 0x1f4b, 0x4478, 0xa895, 0x1, 0x0);
        gbc.writeMem(0xb9c1, { 0x0, 0x0 });
        gbc.writeMem(0xcb49, { 0xcf });
        gbc.step();
        EXPECT(0xde, gbc.a());
        EXPECT(0x1f, gbc.b());
        EXPECT(0x4b, gbc.c());
        EXPECT(0x44, gbc.d());
        EXPECT(0x78, gbc.e());
        EXPECT(0xa8, gbc.h());
        EXPECT(0x95, gbc.l());
        EXPECT(0xb9c1, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x4a, gbc.readMem(0xb9c1));
        EXPECT(0xcb, gbc.readMem(0xb9c2));
        EXPECT(0xcf, gbc.readMem(0xcb49));
        // CF 0259
        gbc.setState(0x5cd4, 0xa5f3, 0x1a80, 0xf76e, 0xaf36, 0x15ba, 0x1, 0x1);
        gbc.writeMem(0x5cd4, { 0xcf });
        gbc.writeMem(0xa5f1, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x1a, gbc.a());
        EXPECT(0xf7, gbc.b());
        EXPECT(0x6e, gbc.c());
        EXPECT(0xaf, gbc.d());
        EXPECT(0x36, gbc.e());
        EXPECT(0x15, gbc.h());
        EXPECT(0xba, gbc.l());
        EXPECT(0xa5f1, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xd5, gbc.readMem(0xa5f1));
        EXPECT(0x5c, gbc.readMem(0xa5f2));
        // CF 025A
        gbc.setState(0xa8ce, 0x850e, 0x540, 0xdf54, 0xb30a, 0xd96b, 0x1, 0x0);
        gbc.writeMem(0x850c, { 0x0, 0x0 });
        gbc.writeMem(0xa8ce, { 0xcf });
        gbc.step();
        EXPECT(0x5, gbc.a());
        EXPECT(0xdf, gbc.b());
        EXPECT(0x54, gbc.c());
        EXPECT(0xb3, gbc.d());
        EXPECT(0xa, gbc.e());
        EXPECT(0xd9, gbc.h());
        EXPECT(0x6b, gbc.l());
        EXPECT(0x850c, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0x850c));
        EXPECT(0xa8, gbc.readMem(0x850d));
        EXPECT(0xcf, gbc.readMem(0xa8ce));
        // CF 025B
        gbc.setState(0x64d0, 0xe706, 0xd2d0, 0x367f, 0x5865, 0x5274, 0x0, 0x1);
        gbc.writeMem(0x64d0, { 0xcf });
        gbc.writeMem(0xe704, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xd2, gbc.a());
        EXPECT(0x36, gbc.b());
        EXPECT(0x7f, gbc.c());
        EXPECT(0x58, gbc.d());
        EXPECT(0x65, gbc.e());
        EXPECT(0x52, gbc.h());
        EXPECT(0x74, gbc.l());
        EXPECT(0xe704, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xd1, gbc.readMem(0xe704));
        EXPECT(0x64, gbc.readMem(0xe705));
        // CF 025E
        gbc.setState(0xbf3c, 0xe75c, 0xb8f0, 0xb662, 0xc551, 0x71e4, 0x0, 0x0);
        gbc.writeMem(0xbf3c, { 0xcf });
        gbc.writeMem(0xe75a, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xb8, gbc.a());
        EXPECT(0xb6, gbc.b());
        EXPECT(0x62, gbc.c());
        EXPECT(0xc5, gbc.d());
        EXPECT(0x51, gbc.e());
        EXPECT(0x71, gbc.h());
        EXPECT(0xe4, gbc.l());
        EXPECT(0xe75a, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0xbf3c));
        EXPECT(0x3d, gbc.readMem(0xe75a));
        EXPECT(0xbf, gbc.readMem(0xe75b));
        // CF 025F
        gbc.setState(0x5c9f, 0xef5e, 0xd0d0, 0xc1e6, 0xf90, 0xee9b, 0x1, 0x1);
        gbc.writeMem(0x5c9f, { 0xcf });
        gbc.writeMem(0xef5c, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xd0, gbc.a());
        EXPECT(0xc1, gbc.b());
        EXPECT(0xe6, gbc.c());
        EXPECT(0xf, gbc.d());
        EXPECT(0x90, gbc.e());
        EXPECT(0xee, gbc.h());
        EXPECT(0x9b, gbc.l());
        EXPECT(0xef5c, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xa0, gbc.readMem(0xef5c));
        EXPECT(0x5c, gbc.readMem(0xef5d));
        // CF 0261
        gbc.setState(0x1615, 0xc0f9, 0xbc0, 0x8a67, 0xde0e, 0x4860, 0x1, 0x1);
        gbc.writeMem(0x1615, { 0xcf });
        gbc.writeMem(0xc0f7, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xb, gbc.a());
        EXPECT(0x8a, gbc.b());
        EXPECT(0x67, gbc.c());
        EXPECT(0xde, gbc.d());
        EXPECT(0xe, gbc.e());
        EXPECT(0x48, gbc.h());
        EXPECT(0x60, gbc.l());
        EXPECT(0xc0f7, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x16, gbc.readMem(0xc0f7));
        EXPECT(0x16, gbc.readMem(0xc0f8));
        // CF 0263
        gbc.setState(0x8685, 0xfdf2, 0x8800, 0x7989, 0x64d3, 0x9ee7, 0x1, 0x1);
        gbc.writeMem(0x8685, { 0xcf });
        gbc.writeMem(0xfdf0, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x88, gbc.a());
        EXPECT(0x79, gbc.b());
        EXPECT(0x89, gbc.c());
        EXPECT(0x64, gbc.d());
        EXPECT(0xd3, gbc.e());
        EXPECT(0x9e, gbc.h());
        EXPECT(0xe7, gbc.l());
        EXPECT(0xfdf0, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0x8685));
        EXPECT(0x86, gbc.readMem(0xfdf0));
        EXPECT(0x86, gbc.readMem(0xfdf1));
        // CF 0266
        gbc.setState(0x28aa, 0x8351, 0x1ae0, 0x3531, 0x4a6c, 0x3075, 0x0, 0x0);
        gbc.writeMem(0x28aa, { 0xcf });
        gbc.writeMem(0x834f, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x1a, gbc.a());
        EXPECT(0x35, gbc.b());
        EXPECT(0x31, gbc.c());
        EXPECT(0x4a, gbc.d());
        EXPECT(0x6c, gbc.e());
        EXPECT(0x30, gbc.h());
        EXPECT(0x75, gbc.l());
        EXPECT(0x834f, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xab, gbc.readMem(0x834f));
        EXPECT(0x28, gbc.readMem(0x8350));
        // CF 0267
        gbc.setState(0xd3b7, 0xf8e2, 0xc5b0, 0xa645, 0xc683, 0x8172, 0x1, 0x1);
        gbc.writeMem(0xd3b7, { 0xcf });
        gbc.writeMem(0xf8e0, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xc5, gbc.a());
        EXPECT(0xa6, gbc.b());
        EXPECT(0x45, gbc.c());
        EXPECT(0xc6, gbc.d());
        EXPECT(0x83, gbc.e());
        EXPECT(0x81, gbc.h());
        EXPECT(0x72, gbc.l());
        EXPECT(0xf8e0, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0xd3b7));
        EXPECT(0xb8, gbc.readMem(0xf8e0));
        EXPECT(0xd3, gbc.readMem(0xf8e1));
        // CF 0268
        gbc.setState(0x2da0, 0xb8b4, 0xcfc0, 0x77ab, 0x3269, 0xa849, 0x0, 0x0);
        gbc.writeMem(0x2da0, { 0xcf });
        gbc.writeMem(0xb8b2, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xcf, gbc.a());
        EXPECT(0x77, gbc.b());
        EXPECT(0xab, gbc.c());
        EXPECT(0x32, gbc.d());
        EXPECT(0x69, gbc.e());
        EXPECT(0xa8, gbc.h());
        EXPECT(0x49, gbc.l());
        EXPECT(0xb8b2, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xa1, gbc.readMem(0xb8b2));
        EXPECT(0x2d, gbc.readMem(0xb8b3));
        // CF 026C
        gbc.setState(0x67f2, 0xcedc, 0xc290, 0xa1d7, 0xc5f3, 0x1252, 0x1, 0x0);
        gbc.writeMem(0x67f2, { 0xcf });
        gbc.writeMem(0xceda, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xc2, gbc.a());
        EXPECT(0xa1, gbc.b());
        EXPECT(0xd7, gbc.c());
        EXPECT(0xc5, gbc.d());
        EXPECT(0xf3, gbc.e());
        EXPECT(0x12, gbc.h());
        EXPECT(0x52, gbc.l());
        EXPECT(0xceda, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xf3, gbc.readMem(0xceda));
        EXPECT(0x67, gbc.readMem(0xcedb));
        // CF 026D
        gbc.setState(0xc9e5, 0xd04b, 0x16b0, 0x68d2, 0x7362, 0x534c, 0x0, 0x0);
        gbc.writeMem(0xc9e5, { 0xcf });
        gbc.writeMem(0xd049, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x16, gbc.a());
        EXPECT(0x68, gbc.b());
        EXPECT(0xd2, gbc.c());
        EXPECT(0x73, gbc.d());
        EXPECT(0x62, gbc.e());
        EXPECT(0x53, gbc.h());
        EXPECT(0x4c, gbc.l());
        EXPECT(0xd049, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0xc9e5));
        EXPECT(0xe6, gbc.readMem(0xd049));
        EXPECT(0xc9, gbc.readMem(0xd04a));
        // CF 026E
        gbc.setState(0x7277, 0xa818, 0xdab0, 0x6f9a, 0x4c71, 0x45ed, 0x1, 0x1);
        gbc.writeMem(0x7277, { 0xcf });
        gbc.writeMem(0xa816, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xda, gbc.a());
        EXPECT(0x6f, gbc.b());
        EXPECT(0x9a, gbc.c());
        EXPECT(0x4c, gbc.d());
        EXPECT(0x71, gbc.e());
        EXPECT(0x45, gbc.h());
        EXPECT(0xed, gbc.l());
        EXPECT(0xa816, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x78, gbc.readMem(0xa816));
        EXPECT(0x72, gbc.readMem(0xa817));
        // CF 0271
        gbc.setState(0x7208, 0xa5c7, 0xcb90, 0x5897, 0x3aac, 0x2545, 0x0, 0x0);
        gbc.writeMem(0x7208, { 0xcf });
        gbc.writeMem(0xa5c5, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xcb, gbc.a());
        EXPECT(0x58, gbc.b());
        EXPECT(0x97, gbc.c());
        EXPECT(0x3a, gbc.d());
        EXPECT(0xac, gbc.e());
        EXPECT(0x25, gbc.h());
        EXPECT(0x45, gbc.l());
        EXPECT(0xa5c5, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x9, gbc.readMem(0xa5c5));
        EXPECT(0x72, gbc.readMem(0xa5c6));
        // CF 0276
        gbc.setState(0x4832, 0x856a, 0x5390, 0x527, 0x78fd, 0x5875, 0x0, 0x0);
        gbc.writeMem(0x4832, { 0xcf });
        gbc.writeMem(0x8568, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x53, gbc.a());
        EXPECT(0x5, gbc.b());
        EXPECT(0x27, gbc.c());
        EXPECT(0x78, gbc.d());
        EXPECT(0xfd, gbc.e());
        EXPECT(0x58, gbc.h());
        EXPECT(0x75, gbc.l());
        EXPECT(0x8568, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x33, gbc.readMem(0x8568));
        EXPECT(0x48, gbc.readMem(0x8569));
        // CF 027B
        gbc.setState(0x39bb, 0x92e3, 0xa6c0, 0x33b, 0x2522, 0x6ebc, 0x0, 0x1);
        gbc.writeMem(0x39bb, { 0xcf });
        gbc.writeMem(0x92e1, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xa6, gbc.a());
        EXPECT(0x3, gbc.b());
        EXPECT(0x3b, gbc.c());
        EXPECT(0x25, gbc.d());
        EXPECT(0x22, gbc.e());
        EXPECT(0x6e, gbc.h());
        EXPECT(0xbc, gbc.l());
        EXPECT(0x92e1, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xbc, gbc.readMem(0x92e1));
        EXPECT(0x39, gbc.readMem(0x92e2));
        // CF 027D
        gbc.setState(0x791a, 0x9813, 0xb250, 0xb073, 0x1f20, 0x6bb6, 0x0, 0x0);
        gbc.writeMem(0x791a, { 0xcf });
        gbc.writeMem(0x9811, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xb2, gbc.a());
        EXPECT(0xb0, gbc.b());
        EXPECT(0x73, gbc.c());
        EXPECT(0x1f, gbc.d());
        EXPECT(0x20, gbc.e());
        EXPECT(0x6b, gbc.h());
        EXPECT(0xb6, gbc.l());
        EXPECT(0x9811, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x1b, gbc.readMem(0x9811));
        EXPECT(0x79, gbc.readMem(0x9812));
        // CF 027E
        gbc.setState(0xa35a, 0xe4ce, 0x9fb0, 0x8fa1, 0x1f8e, 0xd127, 0x1, 0x1);
        gbc.writeMem(0xa35a, { 0xcf });
        gbc.writeMem(0xe4cc, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x9f, gbc.a());
        EXPECT(0x8f, gbc.b());
        EXPECT(0xa1, gbc.c());
        EXPECT(0x1f, gbc.d());
        EXPECT(0x8e, gbc.e());
        EXPECT(0xd1, gbc.h());
        EXPECT(0x27, gbc.l());
        EXPECT(0xe4cc, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0xa35a));
        EXPECT(0x5b, gbc.readMem(0xe4cc));
        EXPECT(0xa3, gbc.readMem(0xe4cd));
        // CF 0280
        gbc.setState(0x286a, 0xf24b, 0x590, 0x3bc1, 0x9c22, 0x45d9, 0x0, 0x1);
        gbc.writeMem(0x286a, { 0xcf });
        gbc.writeMem(0xf249, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x5, gbc.a());
        EXPECT(0x3b, gbc.b());
        EXPECT(0xc1, gbc.c());
        EXPECT(0x9c, gbc.d());
        EXPECT(0x22, gbc.e());
        EXPECT(0x45, gbc.h());
        EXPECT(0xd9, gbc.l());
        EXPECT(0xf249, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x6b, gbc.readMem(0xf249));
        EXPECT(0x28, gbc.readMem(0xf24a));
        // CF 0282
        gbc.setState(0x5182, 0xbd50, 0xe900, 0x7216, 0xbdea, 0xba10, 0x1, 0x0);
        gbc.writeMem(0x5182, { 0xcf });
        gbc.writeMem(0xbd4e, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xe9, gbc.a());
        EXPECT(0x72, gbc.b());
        EXPECT(0x16, gbc.c());
        EXPECT(0xbd, gbc.d());
        EXPECT(0xea, gbc.e());
        EXPECT(0xba, gbc.h());
        EXPECT(0x10, gbc.l());
        EXPECT(0xbd4e, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x83, gbc.readMem(0xbd4e));
        EXPECT(0x51, gbc.readMem(0xbd4f));
        // CF 0286
        gbc.setState(0x86b6, 0xfe08, 0x6fa0, 0x16da, 0xd976, 0xc8a3, 0x1, 0x1);
        gbc.writeMem(0x86b6, { 0xcf });
        gbc.writeMem(0xfe06, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x6f, gbc.a());
        EXPECT(0x16, gbc.b());
        EXPECT(0xda, gbc.c());
        EXPECT(0xd9, gbc.d());
        EXPECT(0x76, gbc.e());
        EXPECT(0xc8, gbc.h());
        EXPECT(0xa3, gbc.l());
        EXPECT(0xfe06, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0x86b6));
        EXPECT(0xb7, gbc.readMem(0xfe06));
        EXPECT(0x86, gbc.readMem(0xfe07));
        // CF 0287
        gbc.setState(0x4150, 0xd7a5, 0xde0, 0xe522, 0x76db, 0x46ed, 0x1, 0x1);
        gbc.writeMem(0x4150, { 0xcf });
        gbc.writeMem(0xd7a3, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xd, gbc.a());
        EXPECT(0xe5, gbc.b());
        EXPECT(0x22, gbc.c());
        EXPECT(0x76, gbc.d());
        EXPECT(0xdb, gbc.e());
        EXPECT(0x46, gbc.h());
        EXPECT(0xed, gbc.l());
        EXPECT(0xd7a3, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x51, gbc.readMem(0xd7a3));
        EXPECT(0x41, gbc.readMem(0xd7a4));
        // CF 028A
        gbc.setState(0xb6f2, 0xfc24, 0x3d0, 0x89f5, 0x2789, 0xf6d3, 0x1, 0x0);
        gbc.writeMem(0xb6f2, { 0xcf });
        gbc.writeMem(0xfc22, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x3, gbc.a());
        EXPECT(0x89, gbc.b());
        EXPECT(0xf5, gbc.c());
        EXPECT(0x27, gbc.d());
        EXPECT(0x89, gbc.e());
        EXPECT(0xf6, gbc.h());
        EXPECT(0xd3, gbc.l());
        EXPECT(0xfc22, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0xb6f2));
        EXPECT(0xf3, gbc.readMem(0xfc22));
        EXPECT(0xb6, gbc.readMem(0xfc23));
        // CF 028D
        gbc.setState(0x5231, 0xb082, 0xa5e0, 0xda13, 0x7f41, 0x2d87, 0x1, 0x1);
        gbc.writeMem(0x5231, { 0xcf });
        gbc.writeMem(0xb080, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xa5, gbc.a());
        EXPECT(0xda, gbc.b());
        EXPECT(0x13, gbc.c());
        EXPECT(0x7f, gbc.d());
        EXPECT(0x41, gbc.e());
        EXPECT(0x2d, gbc.h());
        EXPECT(0x87, gbc.l());
        EXPECT(0xb080, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x32, gbc.readMem(0xb080));
        EXPECT(0x52, gbc.readMem(0xb081));
        // CF 028E
        gbc.setState(0xa7be, 0xa63f, 0x6f70, 0x1aea, 0xc5e1, 0xe2e7, 0x1, 0x0);
        gbc.writeMem(0xa63d, { 0x0, 0x0 });
        gbc.writeMem(0xa7be, { 0xcf });
        gbc.step();
        EXPECT(0x6f, gbc.a());
        EXPECT(0x1a, gbc.b());
        EXPECT(0xea, gbc.c());
        EXPECT(0xc5, gbc.d());
        EXPECT(0xe1, gbc.e());
        EXPECT(0xe2, gbc.h());
        EXPECT(0xe7, gbc.l());
        EXPECT(0xa63d, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xbf, gbc.readMem(0xa63d));
        EXPECT(0xa7, gbc.readMem(0xa63e));
        EXPECT(0xcf, gbc.readMem(0xa7be));
        // CF 0290
        gbc.setState(0x8d0, 0xa6b6, 0x84f0, 0xa95b, 0xf59d, 0x5246, 0x0, 0x1);
        gbc.writeMem(0x8d0, { 0xcf });
        gbc.writeMem(0xa6b4, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x84, gbc.a());
        EXPECT(0xa9, gbc.b());
        EXPECT(0x5b, gbc.c());
        EXPECT(0xf5, gbc.d());
        EXPECT(0x9d, gbc.e());
        EXPECT(0x52, gbc.h());
        EXPECT(0x46, gbc.l());
        EXPECT(0xa6b4, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xd1, gbc.readMem(0xa6b4));
        EXPECT(0x8, gbc.readMem(0xa6b5));
        // CF 0291
        gbc.setState(0x6b08, 0xec85, 0xca10, 0x4b86, 0xfd22, 0x873d, 0x0, 0x0);
        gbc.writeMem(0x6b08, { 0xcf });
        gbc.writeMem(0xec83, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xca, gbc.a());
        EXPECT(0x4b, gbc.b());
        EXPECT(0x86, gbc.c());
        EXPECT(0xfd, gbc.d());
        EXPECT(0x22, gbc.e());
        EXPECT(0x87, gbc.h());
        EXPECT(0x3d, gbc.l());
        EXPECT(0xec83, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x9, gbc.readMem(0xec83));
        EXPECT(0x6b, gbc.readMem(0xec84));
        // CF 0292
        gbc.setState(0x3a86, 0x8fbf, 0xf680, 0x14cb, 0x2c93, 0xf45f, 0x0, 0x0);
        gbc.writeMem(0x3a86, { 0xcf });
        gbc.writeMem(0x8fbd, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xf6, gbc.a());
        EXPECT(0x14, gbc.b());
        EXPECT(0xcb, gbc.c());
        EXPECT(0x2c, gbc.d());
        EXPECT(0x93, gbc.e());
        EXPECT(0xf4, gbc.h());
        EXPECT(0x5f, gbc.l());
        EXPECT(0x8fbd, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x87, gbc.readMem(0x8fbd));
        EXPECT(0x3a, gbc.readMem(0x8fbe));
        // CF 0294
        gbc.setState(0xba11, 0x8c32, 0x9e90, 0x1da5, 0x9a6, 0xa219, 0x1, 0x0);
        gbc.writeMem(0x8c30, { 0x0, 0x0 });
        gbc.writeMem(0xba11, { 0xcf });
        gbc.step();
        EXPECT(0x9e, gbc.a());
        EXPECT(0x1d, gbc.b());
        EXPECT(0xa5, gbc.c());
        EXPECT(0x9, gbc.d());
        EXPECT(0xa6, gbc.e());
        EXPECT(0xa2, gbc.h());
        EXPECT(0x19, gbc.l());
        EXPECT(0x8c30, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x12, gbc.readMem(0x8c30));
        EXPECT(0xba, gbc.readMem(0x8c31));
        EXPECT(0xcf, gbc.readMem(0xba11));
        // CF 0295
        gbc.setState(0x87c2, 0xd1ee, 0x6eb0, 0x20da, 0x5c6, 0x732d, 0x0, 0x0);
        gbc.writeMem(0x87c2, { 0xcf });
        gbc.writeMem(0xd1ec, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x6e, gbc.a());
        EXPECT(0x20, gbc.b());
        EXPECT(0xda, gbc.c());
        EXPECT(0x5, gbc.d());
        EXPECT(0xc6, gbc.e());
        EXPECT(0x73, gbc.h());
        EXPECT(0x2d, gbc.l());
        EXPECT(0xd1ec, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0x87c2));
        EXPECT(0xc3, gbc.readMem(0xd1ec));
        EXPECT(0x87, gbc.readMem(0xd1ed));
        // CF 029A
        gbc.setState(0x3ef0, 0xbc69, 0xaa60, 0x8c67, 0x43f, 0xed9a, 0x1, 0x0);
        gbc.writeMem(0x3ef0, { 0xcf });
        gbc.writeMem(0xbc67, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xaa, gbc.a());
        EXPECT(0x8c, gbc.b());
        EXPECT(0x67, gbc.c());
        EXPECT(0x4, gbc.d());
        EXPECT(0x3f, gbc.e());
        EXPECT(0xed, gbc.h());
        EXPECT(0x9a, gbc.l());
        EXPECT(0xbc67, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xf1, gbc.readMem(0xbc67));
        EXPECT(0x3e, gbc.readMem(0xbc68));
        // CF 029F
        gbc.setState(0x6cf, 0xbc7c, 0x3db0, 0xcddc, 0xf92e, 0xcb29, 0x1, 0x1);
        gbc.writeMem(0x6cf, { 0xcf });
        gbc.writeMem(0xbc7a, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x3d, gbc.a());
        EXPECT(0xcd, gbc.b());
        EXPECT(0xdc, gbc.c());
        EXPECT(0xf9, gbc.d());
        EXPECT(0x2e, gbc.e());
        EXPECT(0xcb, gbc.h());
        EXPECT(0x29, gbc.l());
        EXPECT(0xbc7a, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xd0, gbc.readMem(0xbc7a));
        EXPECT(0x6, gbc.readMem(0xbc7b));
        // CF 02A2
        gbc.setState(0xeefd, 0x8051, 0xb510, 0xc758, 0x3158, 0xcc88, 0x1, 0x0);
        gbc.writeMem(0x804f, { 0x0, 0x0 });
        gbc.writeMem(0xeefd, { 0xcf });
        gbc.step();
        EXPECT(0xb5, gbc.a());
        EXPECT(0xc7, gbc.b());
        EXPECT(0x58, gbc.c());
        EXPECT(0x31, gbc.d());
        EXPECT(0x58, gbc.e());
        EXPECT(0xcc, gbc.h());
        EXPECT(0x88, gbc.l());
        EXPECT(0x804f, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xfe, gbc.readMem(0x804f));
        EXPECT(0xee, gbc.readMem(0x8050));
        EXPECT(0xcf, gbc.readMem(0xeefd));
        // CF 02A3
        gbc.setState(0x6cdf, 0xe7fa, 0x8200, 0xd1de, 0x9af1, 0x7dda, 0x0, 0x1);
        gbc.writeMem(0x6cdf, { 0xcf });
        gbc.writeMem(0xe7f8, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x82, gbc.a());
        EXPECT(0xd1, gbc.b());
        EXPECT(0xde, gbc.c());
        EXPECT(0x9a, gbc.d());
        EXPECT(0xf1, gbc.e());
        EXPECT(0x7d, gbc.h());
        EXPECT(0xda, gbc.l());
        EXPECT(0xe7f8, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xe0, gbc.readMem(0xe7f8));
        EXPECT(0x6c, gbc.readMem(0xe7f9));
        // CF 02A4
        gbc.setState(0x837b, 0xd89b, 0xab30, 0x5365, 0x6bac, 0x40c1, 0x1, 0x1);
        gbc.writeMem(0x837b, { 0xcf });
        gbc.writeMem(0xd899, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xab, gbc.a());
        EXPECT(0x53, gbc.b());
        EXPECT(0x65, gbc.c());
        EXPECT(0x6b, gbc.d());
        EXPECT(0xac, gbc.e());
        EXPECT(0x40, gbc.h());
        EXPECT(0xc1, gbc.l());
        EXPECT(0xd899, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0x837b));
        EXPECT(0x7c, gbc.readMem(0xd899));
        EXPECT(0x83, gbc.readMem(0xd89a));
        // CF 02A5
        gbc.setState(0x61f, 0xa4a6, 0x89b0, 0x18a3, 0x79ef, 0x49a0, 0x0, 0x1);
        gbc.writeMem(0x61f, { 0xcf });
        gbc.writeMem(0xa4a4, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x89, gbc.a());
        EXPECT(0x18, gbc.b());
        EXPECT(0xa3, gbc.c());
        EXPECT(0x79, gbc.d());
        EXPECT(0xef, gbc.e());
        EXPECT(0x49, gbc.h());
        EXPECT(0xa0, gbc.l());
        EXPECT(0xa4a4, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x20, gbc.readMem(0xa4a4));
        EXPECT(0x6, gbc.readMem(0xa4a5));
        // CF 02A6
        gbc.setState(0x4c20, 0xcc5b, 0xf310, 0x6b72, 0x8a6, 0xb292, 0x0, 0x1);
        gbc.writeMem(0x4c20, { 0xcf });
        gbc.writeMem(0xcc59, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xf3, gbc.a());
        EXPECT(0x6b, gbc.b());
        EXPECT(0x72, gbc.c());
        EXPECT(0x8, gbc.d());
        EXPECT(0xa6, gbc.e());
        EXPECT(0xb2, gbc.h());
        EXPECT(0x92, gbc.l());
        EXPECT(0xcc59, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x21, gbc.readMem(0xcc59));
        EXPECT(0x4c, gbc.readMem(0xcc5a));
        // CF 02A7
        gbc.setState(0xea80, 0x9390, 0xf960, 0xfb87, 0xdaa, 0xfd83, 0x1, 0x1);
        gbc.writeMem(0x938e, { 0x0, 0x0 });
        gbc.writeMem(0xea80, { 0xcf });
        gbc.step();
        EXPECT(0xf9, gbc.a());
        EXPECT(0xfb, gbc.b());
        EXPECT(0x87, gbc.c());
        EXPECT(0xd, gbc.d());
        EXPECT(0xaa, gbc.e());
        EXPECT(0xfd, gbc.h());
        EXPECT(0x83, gbc.l());
        EXPECT(0x938e, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x81, gbc.readMem(0x938e));
        EXPECT(0xea, gbc.readMem(0x938f));
        EXPECT(0xcf, gbc.readMem(0xea80));
        // CF 02A9
        gbc.setState(0x49b9, 0x844f, 0x3990, 0x9170, 0x1477, 0x1ceb, 0x0, 0x0);
        gbc.writeMem(0x49b9, { 0xcf });
        gbc.writeMem(0x844d, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x39, gbc.a());
        EXPECT(0x91, gbc.b());
        EXPECT(0x70, gbc.c());
        EXPECT(0x14, gbc.d());
        EXPECT(0x77, gbc.e());
        EXPECT(0x1c, gbc.h());
        EXPECT(0xeb, gbc.l());
        EXPECT(0x844d, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xba, gbc.readMem(0x844d));
        EXPECT(0x49, gbc.readMem(0x844e));
        // CF 02AA
        gbc.setState(0xce64, 0xd1e7, 0x530, 0x6a18, 0x96ab, 0x5f09, 0x0, 0x0);
        gbc.writeMem(0xce64, { 0xcf });
        gbc.writeMem(0xd1e5, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x5, gbc.a());
        EXPECT(0x6a, gbc.b());
        EXPECT(0x18, gbc.c());
        EXPECT(0x96, gbc.d());
        EXPECT(0xab, gbc.e());
        EXPECT(0x5f, gbc.h());
        EXPECT(0x9, gbc.l());
        EXPECT(0xd1e5, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0xce64));
        EXPECT(0x65, gbc.readMem(0xd1e5));
        EXPECT(0xce, gbc.readMem(0xd1e6));
        // CF 02AC
        gbc.setState(0xc294, 0xcf89, 0xc50, 0xc2e6, 0x2558, 0xe5cd, 0x1, 0x1);
        gbc.writeMem(0xc294, { 0xcf });
        gbc.writeMem(0xcf87, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xc, gbc.a());
        EXPECT(0xc2, gbc.b());
        EXPECT(0xe6, gbc.c());
        EXPECT(0x25, gbc.d());
        EXPECT(0x58, gbc.e());
        EXPECT(0xe5, gbc.h());
        EXPECT(0xcd, gbc.l());
        EXPECT(0xcf87, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0xc294));
        EXPECT(0x95, gbc.readMem(0xcf87));
        EXPECT(0xc2, gbc.readMem(0xcf88));
        // CF 02AE
        gbc.setState(0x5b3a, 0x8bc2, 0x5c00, 0x63ae, 0xb618, 0xb707, 0x0, 0x0);
        gbc.writeMem(0x5b3a, { 0xcf });
        gbc.writeMem(0x8bc0, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x5c, gbc.a());
        EXPECT(0x63, gbc.b());
        EXPECT(0xae, gbc.c());
        EXPECT(0xb6, gbc.d());
        EXPECT(0x18, gbc.e());
        EXPECT(0xb7, gbc.h());
        EXPECT(0x7, gbc.l());
        EXPECT(0x8bc0, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x3b, gbc.readMem(0x8bc0));
        EXPECT(0x5b, gbc.readMem(0x8bc1));
        // CF 02AF
        gbc.setState(0x620d, 0xea8d, 0x4b90, 0x6747, 0xde70, 0x89de, 0x1, 0x1);
        gbc.writeMem(0x620d, { 0xcf });
        gbc.writeMem(0xea8b, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x4b, gbc.a());
        EXPECT(0x67, gbc.b());
        EXPECT(0x47, gbc.c());
        EXPECT(0xde, gbc.d());
        EXPECT(0x70, gbc.e());
        EXPECT(0x89, gbc.h());
        EXPECT(0xde, gbc.l());
        EXPECT(0xea8b, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xe, gbc.readMem(0xea8b));
        EXPECT(0x62, gbc.readMem(0xea8c));
        // CF 02B1
        gbc.setState(0x87e9, 0xb1ec, 0x5a50, 0xa6d1, 0x707a, 0x10e0, 0x0, 0x0);
        gbc.writeMem(0x87e9, { 0xcf });
        gbc.writeMem(0xb1ea, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x5a, gbc.a());
        EXPECT(0xa6, gbc.b());
        EXPECT(0xd1, gbc.c());
        EXPECT(0x70, gbc.d());
        EXPECT(0x7a, gbc.e());
        EXPECT(0x10, gbc.h());
        EXPECT(0xe0, gbc.l());
        EXPECT(0xb1ea, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0x87e9));
        EXPECT(0xea, gbc.readMem(0xb1ea));
        EXPECT(0x87, gbc.readMem(0xb1eb));
        // CF 02B2
        gbc.setState(0xd5ae, 0xd500, 0xbf30, 0xefc, 0x24e4, 0xca45, 0x1, 0x0);
        gbc.writeMem(0xd4fe, { 0x0, 0x0 });
        gbc.writeMem(0xd5ae, { 0xcf });
        gbc.step();
        EXPECT(0xbf, gbc.a());
        EXPECT(0xe, gbc.b());
        EXPECT(0xfc, gbc.c());
        EXPECT(0x24, gbc.d());
        EXPECT(0xe4, gbc.e());
        EXPECT(0xca, gbc.h());
        EXPECT(0x45, gbc.l());
        EXPECT(0xd4fe, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xd4fe));
        EXPECT(0xd5, gbc.readMem(0xd4ff));
        EXPECT(0xcf, gbc.readMem(0xd5ae));
        // CF 02B5
        gbc.setState(0x1ec3, 0xee6d, 0x2460, 0x42dd, 0x1c4a, 0xb5d3, 0x0, 0x0);
        gbc.writeMem(0x1ec3, { 0xcf });
        gbc.writeMem(0xee6b, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x24, gbc.a());
        EXPECT(0x42, gbc.b());
        EXPECT(0xdd, gbc.c());
        EXPECT(0x1c, gbc.d());
        EXPECT(0x4a, gbc.e());
        EXPECT(0xb5, gbc.h());
        EXPECT(0xd3, gbc.l());
        EXPECT(0xee6b, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xc4, gbc.readMem(0xee6b));
        EXPECT(0x1e, gbc.readMem(0xee6c));
        // CF 02B8
        gbc.setState(0xa18d, 0xf81e, 0xff60, 0x60c3, 0xd313, 0xb235, 0x1, 0x0);
        gbc.writeMem(0xa18d, { 0xcf });
        gbc.writeMem(0xf81c, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xff, gbc.a());
        EXPECT(0x60, gbc.b());
        EXPECT(0xc3, gbc.c());
        EXPECT(0xd3, gbc.d());
        EXPECT(0x13, gbc.e());
        EXPECT(0xb2, gbc.h());
        EXPECT(0x35, gbc.l());
        EXPECT(0xf81c, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0xa18d));
        EXPECT(0x8e, gbc.readMem(0xf81c));
        EXPECT(0xa1, gbc.readMem(0xf81d));
        // CF 02BB
        gbc.setState(0xd88e, 0x8614, 0x41c0, 0x84e6, 0x748e, 0xec90, 0x1, 0x0);
        gbc.writeMem(0x8612, { 0x0, 0x0 });
        gbc.writeMem(0xd88e, { 0xcf });
        gbc.step();
        EXPECT(0x41, gbc.a());
        EXPECT(0x84, gbc.b());
        EXPECT(0xe6, gbc.c());
        EXPECT(0x74, gbc.d());
        EXPECT(0x8e, gbc.e());
        EXPECT(0xec, gbc.h());
        EXPECT(0x90, gbc.l());
        EXPECT(0x8612, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x8f, gbc.readMem(0x8612));
        EXPECT(0xd8, gbc.readMem(0x8613));
        EXPECT(0xcf, gbc.readMem(0xd88e));
        // CF 02BC
        gbc.setState(0x9e48, 0x9db7, 0x2f70, 0xa858, 0x9ddc, 0xfcf2, 0x0, 0x0);
        gbc.writeMem(0x9db5, { 0x0, 0x0 });
        gbc.writeMem(0x9e48, { 0xcf });
        gbc.step();
        EXPECT(0x2f, gbc.a());
        EXPECT(0xa8, gbc.b());
        EXPECT(0x58, gbc.c());
        EXPECT(0x9d, gbc.d());
        EXPECT(0xdc, gbc.e());
        EXPECT(0xfc, gbc.h());
        EXPECT(0xf2, gbc.l());
        EXPECT(0x9db5, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x49, gbc.readMem(0x9db5));
        EXPECT(0x9e, gbc.readMem(0x9db6));
        EXPECT(0xcf, gbc.readMem(0x9e48));
        // CF 02BD
        gbc.setState(0xca, 0xb744, 0xefc0, 0x43f1, 0x6228, 0x1f3b, 0x0, 0x0);
        gbc.writeMem(0xca, { 0xcf });
        gbc.writeMem(0xb742, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xef, gbc.a());
        EXPECT(0x43, gbc.b());
        EXPECT(0xf1, gbc.c());
        EXPECT(0x62, gbc.d());
        EXPECT(0x28, gbc.e());
        EXPECT(0x1f, gbc.h());
        EXPECT(0x3b, gbc.l());
        EXPECT(0xb742, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb742));
        EXPECT(0x0, gbc.readMem(0xb743));
        // CF 02BE
        gbc.setState(0x3369, 0xa379, 0xb660, 0x82d6, 0xbebc, 0x8534, 0x1, 0x0);
        gbc.writeMem(0x3369, { 0xcf });
        gbc.writeMem(0xa377, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xb6, gbc.a());
        EXPECT(0x82, gbc.b());
        EXPECT(0xd6, gbc.c());
        EXPECT(0xbe, gbc.d());
        EXPECT(0xbc, gbc.e());
        EXPECT(0x85, gbc.h());
        EXPECT(0x34, gbc.l());
        EXPECT(0xa377, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x6a, gbc.readMem(0xa377));
        EXPECT(0x33, gbc.readMem(0xa378));
        // CF 02BF
        gbc.setState(0x15eb, 0xa202, 0x2660, 0x28d6, 0xead, 0x3f62, 0x0, 0x0);
        gbc.writeMem(0x15eb, { 0xcf });
        gbc.writeMem(0xa200, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x26, gbc.a());
        EXPECT(0x28, gbc.b());
        EXPECT(0xd6, gbc.c());
        EXPECT(0xe, gbc.d());
        EXPECT(0xad, gbc.e());
        EXPECT(0x3f, gbc.h());
        EXPECT(0x62, gbc.l());
        EXPECT(0xa200, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xec, gbc.readMem(0xa200));
        EXPECT(0x15, gbc.readMem(0xa201));
        // CF 02C1
        gbc.setState(0x51f8, 0xfc49, 0x5600, 0xc0d3, 0x5680, 0x410d, 0x1, 0x0);
        gbc.writeMem(0x51f8, { 0xcf });
        gbc.writeMem(0xfc47, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x56, gbc.a());
        EXPECT(0xc0, gbc.b());
        EXPECT(0xd3, gbc.c());
        EXPECT(0x56, gbc.d());
        EXPECT(0x80, gbc.e());
        EXPECT(0x41, gbc.h());
        EXPECT(0xd, gbc.l());
        EXPECT(0xfc47, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xf9, gbc.readMem(0xfc47));
        EXPECT(0x51, gbc.readMem(0xfc48));
        // CF 02C2
        gbc.setState(0xc106, 0x93ae, 0x5850, 0x7c1f, 0xa096, 0x851b, 0x0, 0x1);
        gbc.writeMem(0x93ac, { 0x0, 0x0 });
        gbc.writeMem(0xc106, { 0xcf });
        gbc.step();
        EXPECT(0x58, gbc.a());
        EXPECT(0x7c, gbc.b());
        EXPECT(0x1f, gbc.c());
        EXPECT(0xa0, gbc.d());
        EXPECT(0x96, gbc.e());
        EXPECT(0x85, gbc.h());
        EXPECT(0x1b, gbc.l());
        EXPECT(0x93ac, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x7, gbc.readMem(0x93ac));
        EXPECT(0xc1, gbc.readMem(0x93ad));
        EXPECT(0xcf, gbc.readMem(0xc106));
        // CF 02C4
        gbc.setState(0xac19, 0xa29c, 0xf0a0, 0xd181, 0x29a3, 0x5a83, 0x1, 0x0);
        gbc.writeMem(0xa29a, { 0x0, 0x0 });
        gbc.writeMem(0xac19, { 0xcf });
        gbc.step();
        EXPECT(0xf0, gbc.a());
        EXPECT(0xd1, gbc.b());
        EXPECT(0x81, gbc.c());
        EXPECT(0x29, gbc.d());
        EXPECT(0xa3, gbc.e());
        EXPECT(0x5a, gbc.h());
        EXPECT(0x83, gbc.l());
        EXPECT(0xa29a, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x1a, gbc.readMem(0xa29a));
        EXPECT(0xac, gbc.readMem(0xa29b));
        EXPECT(0xcf, gbc.readMem(0xac19));
        // CF 02C5
        gbc.setState(0x55dd, 0xb556, 0x2070, 0x913a, 0xa004, 0x5f72, 0x0, 0x1);
        gbc.writeMem(0x55dd, { 0xcf });
        gbc.writeMem(0xb554, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x20, gbc.a());
        EXPECT(0x91, gbc.b());
        EXPECT(0x3a, gbc.c());
        EXPECT(0xa0, gbc.d());
        EXPECT(0x4, gbc.e());
        EXPECT(0x5f, gbc.h());
        EXPECT(0x72, gbc.l());
        EXPECT(0xb554, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xde, gbc.readMem(0xb554));
        EXPECT(0x55, gbc.readMem(0xb555));
        // CF 02C8
        gbc.setState(0x85b8, 0xf3a1, 0x89c0, 0x1e95, 0x72d7, 0x7b49, 0x0, 0x0);
        gbc.writeMem(0x85b8, { 0xcf });
        gbc.writeMem(0xf39f, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x89, gbc.a());
        EXPECT(0x1e, gbc.b());
        EXPECT(0x95, gbc.c());
        EXPECT(0x72, gbc.d());
        EXPECT(0xd7, gbc.e());
        EXPECT(0x7b, gbc.h());
        EXPECT(0x49, gbc.l());
        EXPECT(0xf39f, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0x85b8));
        EXPECT(0xb9, gbc.readMem(0xf39f));
        EXPECT(0x85, gbc.readMem(0xf3a0));
        // CF 02CA
        gbc.setState(0x14bd, 0x8032, 0x21b0, 0x1c55, 0x45ee, 0xe75b, 0x0, 0x0);
        gbc.writeMem(0x14bd, { 0xcf });
        gbc.writeMem(0x8030, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x21, gbc.a());
        EXPECT(0x1c, gbc.b());
        EXPECT(0x55, gbc.c());
        EXPECT(0x45, gbc.d());
        EXPECT(0xee, gbc.e());
        EXPECT(0xe7, gbc.h());
        EXPECT(0x5b, gbc.l());
        EXPECT(0x8030, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xbe, gbc.readMem(0x8030));
        EXPECT(0x14, gbc.readMem(0x8031));
        // CF 02CB
        gbc.setState(0x8c99, 0xeaeb, 0xdb80, 0xe1f4, 0x761c, 0x1790, 0x0, 0x1);
        gbc.writeMem(0x8c99, { 0xcf });
        gbc.writeMem(0xeae9, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xdb, gbc.a());
        EXPECT(0xe1, gbc.b());
        EXPECT(0xf4, gbc.c());
        EXPECT(0x76, gbc.d());
        EXPECT(0x1c, gbc.e());
        EXPECT(0x17, gbc.h());
        EXPECT(0x90, gbc.l());
        EXPECT(0xeae9, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0x8c99));
        EXPECT(0x9a, gbc.readMem(0xeae9));
        EXPECT(0x8c, gbc.readMem(0xeaea));
        // CF 02D0
        gbc.setState(0xd3fa, 0x9568, 0x3a00, 0x2f57, 0xa7e3, 0x2c4b, 0x1, 0x0);
        gbc.writeMem(0x9566, { 0x0, 0x0 });
        gbc.writeMem(0xd3fa, { 0xcf });
        gbc.step();
        EXPECT(0x3a, gbc.a());
        EXPECT(0x2f, gbc.b());
        EXPECT(0x57, gbc.c());
        EXPECT(0xa7, gbc.d());
        EXPECT(0xe3, gbc.e());
        EXPECT(0x2c, gbc.h());
        EXPECT(0x4b, gbc.l());
        EXPECT(0x9566, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xfb, gbc.readMem(0x9566));
        EXPECT(0xd3, gbc.readMem(0x9567));
        EXPECT(0xcf, gbc.readMem(0xd3fa));
        // CF 02D2
        gbc.setState(0x37a4, 0xd736, 0x89a0, 0x9834, 0xc02e, 0xd39c, 0x0, 0x1);
        gbc.writeMem(0x37a4, { 0xcf });
        gbc.writeMem(0xd734, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x89, gbc.a());
        EXPECT(0x98, gbc.b());
        EXPECT(0x34, gbc.c());
        EXPECT(0xc0, gbc.d());
        EXPECT(0x2e, gbc.e());
        EXPECT(0xd3, gbc.h());
        EXPECT(0x9c, gbc.l());
        EXPECT(0xd734, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xa5, gbc.readMem(0xd734));
        EXPECT(0x37, gbc.readMem(0xd735));
        // CF 02D4
        gbc.setState(0x642d, 0xa670, 0xac00, 0xc0fb, 0x243d, 0x4614, 0x0, 0x1);
        gbc.writeMem(0x642d, { 0xcf });
        gbc.writeMem(0xa66e, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xac, gbc.a());
        EXPECT(0xc0, gbc.b());
        EXPECT(0xfb, gbc.c());
        EXPECT(0x24, gbc.d());
        EXPECT(0x3d, gbc.e());
        EXPECT(0x46, gbc.h());
        EXPECT(0x14, gbc.l());
        EXPECT(0xa66e, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x2e, gbc.readMem(0xa66e));
        EXPECT(0x64, gbc.readMem(0xa66f));
        // CF 02D6
        gbc.setState(0x65a9, 0x807b, 0xed0, 0x28c3, 0xe309, 0x3c77, 0x0, 0x1);
        gbc.writeMem(0x65a9, { 0xcf });
        gbc.writeMem(0x8079, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xe, gbc.a());
        EXPECT(0x28, gbc.b());
        EXPECT(0xc3, gbc.c());
        EXPECT(0xe3, gbc.d());
        EXPECT(0x9, gbc.e());
        EXPECT(0x3c, gbc.h());
        EXPECT(0x77, gbc.l());
        EXPECT(0x8079, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xaa, gbc.readMem(0x8079));
        EXPECT(0x65, gbc.readMem(0x807a));
        // CF 02D7
        gbc.setState(0xb1db, 0xdfa5, 0x8960, 0x44b4, 0x5f4b, 0xf3a8, 0x1, 0x0);
        gbc.writeMem(0xb1db, { 0xcf });
        gbc.writeMem(0xdfa3, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x89, gbc.a());
        EXPECT(0x44, gbc.b());
        EXPECT(0xb4, gbc.c());
        EXPECT(0x5f, gbc.d());
        EXPECT(0x4b, gbc.e());
        EXPECT(0xf3, gbc.h());
        EXPECT(0xa8, gbc.l());
        EXPECT(0xdfa3, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0xb1db));
        EXPECT(0xdc, gbc.readMem(0xdfa3));
        EXPECT(0xb1, gbc.readMem(0xdfa4));
        // CF 02DB
        gbc.setState(0x869f, 0xe44f, 0x3d80, 0xdeaa, 0x32e5, 0x4c77, 0x1, 0x0);
        gbc.writeMem(0x869f, { 0xcf });
        gbc.writeMem(0xe44d, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x3d, gbc.a());
        EXPECT(0xde, gbc.b());
        EXPECT(0xaa, gbc.c());
        EXPECT(0x32, gbc.d());
        EXPECT(0xe5, gbc.e());
        EXPECT(0x4c, gbc.h());
        EXPECT(0x77, gbc.l());
        EXPECT(0xe44d, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0x869f));
        EXPECT(0xa0, gbc.readMem(0xe44d));
        EXPECT(0x86, gbc.readMem(0xe44e));
        // CF 02DF
        gbc.setState(0xb18c, 0xc966, 0x1830, 0xde50, 0x8ff8, 0x40ce, 0x1, 0x0);
        gbc.writeMem(0xb18c, { 0xcf });
        gbc.writeMem(0xc964, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x18, gbc.a());
        EXPECT(0xde, gbc.b());
        EXPECT(0x50, gbc.c());
        EXPECT(0x8f, gbc.d());
        EXPECT(0xf8, gbc.e());
        EXPECT(0x40, gbc.h());
        EXPECT(0xce, gbc.l());
        EXPECT(0xc964, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0xb18c));
        EXPECT(0x8d, gbc.readMem(0xc964));
        EXPECT(0xb1, gbc.readMem(0xc965));
        // CF 02E3
        gbc.setState(0x6af6, 0xe81e, 0xa80, 0xd8e3, 0x92ea, 0xa8b1, 0x1, 0x1);
        gbc.writeMem(0x6af6, { 0xcf });
        gbc.writeMem(0xe81c, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xa, gbc.a());
        EXPECT(0xd8, gbc.b());
        EXPECT(0xe3, gbc.c());
        EXPECT(0x92, gbc.d());
        EXPECT(0xea, gbc.e());
        EXPECT(0xa8, gbc.h());
        EXPECT(0xb1, gbc.l());
        EXPECT(0xe81c, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xf7, gbc.readMem(0xe81c));
        EXPECT(0x6a, gbc.readMem(0xe81d));
        // CF 02E6
        gbc.setState(0x61ca, 0x9a4f, 0x3140, 0xd48c, 0x537e, 0x1904, 0x1, 0x0);
        gbc.writeMem(0x61ca, { 0xcf });
        gbc.writeMem(0x9a4d, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x31, gbc.a());
        EXPECT(0xd4, gbc.b());
        EXPECT(0x8c, gbc.c());
        EXPECT(0x53, gbc.d());
        EXPECT(0x7e, gbc.e());
        EXPECT(0x19, gbc.h());
        EXPECT(0x4, gbc.l());
        EXPECT(0x9a4d, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9a4d));
        EXPECT(0x61, gbc.readMem(0x9a4e));
        // CF 02E7
        gbc.setState(0x9744, 0xb5e3, 0x2ad0, 0xb2d5, 0xdde0, 0xcde1, 0x0, 0x1);
        gbc.writeMem(0x9744, { 0xcf });
        gbc.writeMem(0xb5e1, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x2a, gbc.a());
        EXPECT(0xb2, gbc.b());
        EXPECT(0xd5, gbc.c());
        EXPECT(0xdd, gbc.d());
        EXPECT(0xe0, gbc.e());
        EXPECT(0xcd, gbc.h());
        EXPECT(0xe1, gbc.l());
        EXPECT(0xb5e1, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0x9744));
        EXPECT(0x45, gbc.readMem(0xb5e1));
        EXPECT(0x97, gbc.readMem(0xb5e2));
        // CF 02E9
        gbc.setState(0x581a, 0xe08a, 0xc350, 0xcdc3, 0x21d6, 0x6d1a, 0x1, 0x0);
        gbc.writeMem(0x581a, { 0xcf });
        gbc.writeMem(0xe088, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xc3, gbc.a());
        EXPECT(0xcd, gbc.b());
        EXPECT(0xc3, gbc.c());
        EXPECT(0x21, gbc.d());
        EXPECT(0xd6, gbc.e());
        EXPECT(0x6d, gbc.h());
        EXPECT(0x1a, gbc.l());
        EXPECT(0xe088, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x1b, gbc.readMem(0xe088));
        EXPECT(0x58, gbc.readMem(0xe089));
        // CF 02EA
        gbc.setState(0xa69, 0x8908, 0x240, 0x41ea, 0x6467, 0x34b5, 0x1, 0x1);
        gbc.writeMem(0xa69, { 0xcf });
        gbc.writeMem(0x8906, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x2, gbc.a());
        EXPECT(0x41, gbc.b());
        EXPECT(0xea, gbc.c());
        EXPECT(0x64, gbc.d());
        EXPECT(0x67, gbc.e());
        EXPECT(0x34, gbc.h());
        EXPECT(0xb5, gbc.l());
        EXPECT(0x8906, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x6a, gbc.readMem(0x8906));
        EXPECT(0xa, gbc.readMem(0x8907));
        // CF 02EC
        gbc.setState(0x5f42, 0x8558, 0x6fc0, 0x58e9, 0xd46, 0x6574, 0x1, 0x0);
        gbc.writeMem(0x5f42, { 0xcf });
        gbc.writeMem(0x8556, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x6f, gbc.a());
        EXPECT(0x58, gbc.b());
        EXPECT(0xe9, gbc.c());
        EXPECT(0xd, gbc.d());
        EXPECT(0x46, gbc.e());
        EXPECT(0x65, gbc.h());
        EXPECT(0x74, gbc.l());
        EXPECT(0x8556, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x43, gbc.readMem(0x8556));
        EXPECT(0x5f, gbc.readMem(0x8557));
        // CF 02ED
        gbc.setState(0x3171, 0xf246, 0xa990, 0x29fe, 0xd406, 0xec68, 0x0, 0x0);
        gbc.writeMem(0x3171, { 0xcf });
        gbc.writeMem(0xf244, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xa9, gbc.a());
        EXPECT(0x29, gbc.b());
        EXPECT(0xfe, gbc.c());
        EXPECT(0xd4, gbc.d());
        EXPECT(0x6, gbc.e());
        EXPECT(0xec, gbc.h());
        EXPECT(0x68, gbc.l());
        EXPECT(0xf244, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x72, gbc.readMem(0xf244));
        EXPECT(0x31, gbc.readMem(0xf245));
        // CF 02EE
        gbc.setState(0x9b26, 0x9cc4, 0xf3b0, 0xa3aa, 0x4e89, 0x70cb, 0x1, 0x0);
        gbc.writeMem(0x9b26, { 0xcf });
        gbc.writeMem(0x9cc2, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xf3, gbc.a());
        EXPECT(0xa3, gbc.b());
        EXPECT(0xaa, gbc.c());
        EXPECT(0x4e, gbc.d());
        EXPECT(0x89, gbc.e());
        EXPECT(0x70, gbc.h());
        EXPECT(0xcb, gbc.l());
        EXPECT(0x9cc2, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0x9b26));
        EXPECT(0x27, gbc.readMem(0x9cc2));
        EXPECT(0x9b, gbc.readMem(0x9cc3));
        // CF 02F0
        gbc.setState(0xa0b, 0xda9c, 0x2320, 0x620e, 0xa958, 0xe03e, 0x0, 0x0);
        gbc.writeMem(0xa0b, { 0xcf });
        gbc.writeMem(0xda9a, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x23, gbc.a());
        EXPECT(0x62, gbc.b());
        EXPECT(0xe, gbc.c());
        EXPECT(0xa9, gbc.d());
        EXPECT(0x58, gbc.e());
        EXPECT(0xe0, gbc.h());
        EXPECT(0x3e, gbc.l());
        EXPECT(0xda9a, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xc, gbc.readMem(0xda9a));
        EXPECT(0xa, gbc.readMem(0xda9b));
        // CF 02F3
        gbc.setState(0x9c34, 0xbdd6, 0x5760, 0x20e, 0x3124, 0xc241, 0x0, 0x0);
        gbc.writeMem(0x9c34, { 0xcf });
        gbc.writeMem(0xbdd4, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x57, gbc.a());
        EXPECT(0x2, gbc.b());
        EXPECT(0xe, gbc.c());
        EXPECT(0x31, gbc.d());
        EXPECT(0x24, gbc.e());
        EXPECT(0xc2, gbc.h());
        EXPECT(0x41, gbc.l());
        EXPECT(0xbdd4, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0x9c34));
        EXPECT(0x35, gbc.readMem(0xbdd4));
        EXPECT(0x9c, gbc.readMem(0xbdd5));
        // CF 02F4
        gbc.setState(0xe507, 0xc0e1, 0x1e40, 0x5009, 0x6193, 0xe6f5, 0x0, 0x0);
        gbc.writeMem(0xc0df, { 0x0, 0x0 });
        gbc.writeMem(0xe507, { 0xcf });
        gbc.step();
        EXPECT(0x1e, gbc.a());
        EXPECT(0x50, gbc.b());
        EXPECT(0x9, gbc.c());
        EXPECT(0x61, gbc.d());
        EXPECT(0x93, gbc.e());
        EXPECT(0xe6, gbc.h());
        EXPECT(0xf5, gbc.l());
        EXPECT(0xc0df, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x8, gbc.readMem(0xc0df));
        EXPECT(0xe5, gbc.readMem(0xc0e0));
        EXPECT(0xcf, gbc.readMem(0xe507));
        // CF 02F6
        gbc.setState(0xe2a5, 0xa5a6, 0x1b00, 0xf1cc, 0x9c4, 0xb26f, 0x1, 0x0);
        gbc.writeMem(0xa5a4, { 0x0, 0x0 });
        gbc.writeMem(0xe2a5, { 0xcf });
        gbc.step();
        EXPECT(0x1b, gbc.a());
        EXPECT(0xf1, gbc.b());
        EXPECT(0xcc, gbc.c());
        EXPECT(0x9, gbc.d());
        EXPECT(0xc4, gbc.e());
        EXPECT(0xb2, gbc.h());
        EXPECT(0x6f, gbc.l());
        EXPECT(0xa5a4, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xa6, gbc.readMem(0xa5a4));
        EXPECT(0xe2, gbc.readMem(0xa5a5));
        EXPECT(0xcf, gbc.readMem(0xe2a5));
        // CF 02F8
        gbc.setState(0xe9ab, 0x91bd, 0x57e0, 0x883e, 0xd61f, 0xf10f, 0x1, 0x1);
        gbc.writeMem(0x91bb, { 0x0, 0x0 });
        gbc.writeMem(0xe9ab, { 0xcf });
        gbc.step();
        EXPECT(0x57, gbc.a());
        EXPECT(0x88, gbc.b());
        EXPECT(0x3e, gbc.c());
        EXPECT(0xd6, gbc.d());
        EXPECT(0x1f, gbc.e());
        EXPECT(0xf1, gbc.h());
        EXPECT(0xf, gbc.l());
        EXPECT(0x91bb, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xac, gbc.readMem(0x91bb));
        EXPECT(0xe9, gbc.readMem(0x91bc));
        EXPECT(0xcf, gbc.readMem(0xe9ab));
        // CF 02F9
        gbc.setState(0xcf3c, 0xfb16, 0xffb0, 0x9307, 0x7953, 0xdf7b, 0x1, 0x0);
        gbc.writeMem(0xcf3c, { 0xcf });
        gbc.writeMem(0xfb14, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xff, gbc.a());
        EXPECT(0x93, gbc.b());
        EXPECT(0x7, gbc.c());
        EXPECT(0x79, gbc.d());
        EXPECT(0x53, gbc.e());
        EXPECT(0xdf, gbc.h());
        EXPECT(0x7b, gbc.l());
        EXPECT(0xfb14, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0xcf3c));
        EXPECT(0x3d, gbc.readMem(0xfb14));
        EXPECT(0xcf, gbc.readMem(0xfb15));
        // CF 02FA
        gbc.setState(0x7fa, 0xbeca, 0xa930, 0x848a, 0x41be, 0x3563, 0x0, 0x1);
        gbc.writeMem(0x7fa, { 0xcf });
        gbc.writeMem(0xbec8, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xa9, gbc.a());
        EXPECT(0x84, gbc.b());
        EXPECT(0x8a, gbc.c());
        EXPECT(0x41, gbc.d());
        EXPECT(0xbe, gbc.e());
        EXPECT(0x35, gbc.h());
        EXPECT(0x63, gbc.l());
        EXPECT(0xbec8, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xfb, gbc.readMem(0xbec8));
        EXPECT(0x7, gbc.readMem(0xbec9));
        // CF 0301
        gbc.setState(0xd436, 0xb54d, 0xb1c0, 0x3515, 0x3ba9, 0x665b, 0x1, 0x0);
        gbc.writeMem(0xb54b, { 0x0, 0x0 });
        gbc.writeMem(0xd436, { 0xcf });
        gbc.step();
        EXPECT(0xb1, gbc.a());
        EXPECT(0x35, gbc.b());
        EXPECT(0x15, gbc.c());
        EXPECT(0x3b, gbc.d());
        EXPECT(0xa9, gbc.e());
        EXPECT(0x66, gbc.h());
        EXPECT(0x5b, gbc.l());
        EXPECT(0xb54b, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x37, gbc.readMem(0xb54b));
        EXPECT(0xd4, gbc.readMem(0xb54c));
        EXPECT(0xcf, gbc.readMem(0xd436));
        // CF 0302
        gbc.setState(0xce98, 0xf63b, 0x1d40, 0x5b5f, 0x4fbb, 0xd197, 0x1, 0x0);
        gbc.writeMem(0xce98, { 0xcf });
        gbc.writeMem(0xf639, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x1d, gbc.a());
        EXPECT(0x5b, gbc.b());
        EXPECT(0x5f, gbc.c());
        EXPECT(0x4f, gbc.d());
        EXPECT(0xbb, gbc.e());
        EXPECT(0xd1, gbc.h());
        EXPECT(0x97, gbc.l());
        EXPECT(0xf639, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0xce98));
        EXPECT(0x99, gbc.readMem(0xf639));
        EXPECT(0xce, gbc.readMem(0xf63a));
        // CF 0304
        gbc.setState(0x13b2, 0xcee8, 0x3440, 0x5408, 0x9012, 0xe2ac, 0x0, 0x0);
        gbc.writeMem(0x13b2, { 0xcf });
        gbc.writeMem(0xcee6, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x34, gbc.a());
        EXPECT(0x54, gbc.b());
        EXPECT(0x8, gbc.c());
        EXPECT(0x90, gbc.d());
        EXPECT(0x12, gbc.e());
        EXPECT(0xe2, gbc.h());
        EXPECT(0xac, gbc.l());
        EXPECT(0xcee6, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xb3, gbc.readMem(0xcee6));
        EXPECT(0x13, gbc.readMem(0xcee7));
        // CF 0305
        gbc.setState(0x128f, 0xa944, 0x81b0, 0xbb9b, 0x69c3, 0x8b25, 0x1, 0x0);
        gbc.writeMem(0x128f, { 0xcf });
        gbc.writeMem(0xa942, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x81, gbc.a());
        EXPECT(0xbb, gbc.b());
        EXPECT(0x9b, gbc.c());
        EXPECT(0x69, gbc.d());
        EXPECT(0xc3, gbc.e());
        EXPECT(0x8b, gbc.h());
        EXPECT(0x25, gbc.l());
        EXPECT(0xa942, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x90, gbc.readMem(0xa942));
        EXPECT(0x12, gbc.readMem(0xa943));
        // CF 0309
        gbc.setState(0xe54d, 0xa73e, 0x6810, 0xb2c8, 0x3495, 0x303b, 0x0, 0x0);
        gbc.writeMem(0xa73c, { 0x0, 0x0 });
        gbc.writeMem(0xe54d, { 0xcf });
        gbc.step();
        EXPECT(0x68, gbc.a());
        EXPECT(0xb2, gbc.b());
        EXPECT(0xc8, gbc.c());
        EXPECT(0x34, gbc.d());
        EXPECT(0x95, gbc.e());
        EXPECT(0x30, gbc.h());
        EXPECT(0x3b, gbc.l());
        EXPECT(0xa73c, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x4e, gbc.readMem(0xa73c));
        EXPECT(0xe5, gbc.readMem(0xa73d));
        EXPECT(0xcf, gbc.readMem(0xe54d));
        // CF 030A
        gbc.setState(0x78c2, 0xe5a6, 0x91b0, 0xee99, 0x31db, 0xd801, 0x1, 0x1);
        gbc.writeMem(0x78c2, { 0xcf });
        gbc.writeMem(0xe5a4, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x91, gbc.a());
        EXPECT(0xee, gbc.b());
        EXPECT(0x99, gbc.c());
        EXPECT(0x31, gbc.d());
        EXPECT(0xdb, gbc.e());
        EXPECT(0xd8, gbc.h());
        EXPECT(0x1, gbc.l());
        EXPECT(0xe5a4, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xc3, gbc.readMem(0xe5a4));
        EXPECT(0x78, gbc.readMem(0xe5a5));
        // CF 030E
        gbc.setState(0x42eb, 0xaa8c, 0xdcd0, 0x165a, 0x9a3c, 0x3c2a, 0x1, 0x1);
        gbc.writeMem(0x42eb, { 0xcf });
        gbc.writeMem(0xaa8a, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xdc, gbc.a());
        EXPECT(0x16, gbc.b());
        EXPECT(0x5a, gbc.c());
        EXPECT(0x9a, gbc.d());
        EXPECT(0x3c, gbc.e());
        EXPECT(0x3c, gbc.h());
        EXPECT(0x2a, gbc.l());
        EXPECT(0xaa8a, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xec, gbc.readMem(0xaa8a));
        EXPECT(0x42, gbc.readMem(0xaa8b));
        // CF 030F
        gbc.setState(0x5677, 0xd433, 0x35c0, 0x654e, 0xde06, 0x8ee7, 0x1, 0x1);
        gbc.writeMem(0x5677, { 0xcf });
        gbc.writeMem(0xd431, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x35, gbc.a());
        EXPECT(0x65, gbc.b());
        EXPECT(0x4e, gbc.c());
        EXPECT(0xde, gbc.d());
        EXPECT(0x6, gbc.e());
        EXPECT(0x8e, gbc.h());
        EXPECT(0xe7, gbc.l());
        EXPECT(0xd431, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x78, gbc.readMem(0xd431));
        EXPECT(0x56, gbc.readMem(0xd432));
        // CF 0310
        gbc.setState(0x6b4f, 0xc5b6, 0x60f0, 0x42b2, 0xf51, 0xd56d, 0x1, 0x1);
        gbc.writeMem(0x6b4f, { 0xcf });
        gbc.writeMem(0xc5b4, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x60, gbc.a());
        EXPECT(0x42, gbc.b());
        EXPECT(0xb2, gbc.c());
        EXPECT(0xf, gbc.d());
        EXPECT(0x51, gbc.e());
        EXPECT(0xd5, gbc.h());
        EXPECT(0x6d, gbc.l());
        EXPECT(0xc5b4, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x50, gbc.readMem(0xc5b4));
        EXPECT(0x6b, gbc.readMem(0xc5b5));
        // CF 0311
        gbc.setState(0x53c4, 0xe6d1, 0xa950, 0x7dff, 0x4b67, 0x6c42, 0x1, 0x0);
        gbc.writeMem(0x53c4, { 0xcf });
        gbc.writeMem(0xe6cf, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xa9, gbc.a());
        EXPECT(0x7d, gbc.b());
        EXPECT(0xff, gbc.c());
        EXPECT(0x4b, gbc.d());
        EXPECT(0x67, gbc.e());
        EXPECT(0x6c, gbc.h());
        EXPECT(0x42, gbc.l());
        EXPECT(0xe6cf, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xc5, gbc.readMem(0xe6cf));
        EXPECT(0x53, gbc.readMem(0xe6d0));
        // CF 0314
        gbc.setState(0xed2f, 0x8470, 0x4680, 0x8aae, 0x9a9c, 0xdaef, 0x0, 0x1);
        gbc.writeMem(0x846e, { 0x0, 0x0 });
        gbc.writeMem(0xed2f, { 0xcf });
        gbc.step();
        EXPECT(0x46, gbc.a());
        EXPECT(0x8a, gbc.b());
        EXPECT(0xae, gbc.c());
        EXPECT(0x9a, gbc.d());
        EXPECT(0x9c, gbc.e());
        EXPECT(0xda, gbc.h());
        EXPECT(0xef, gbc.l());
        EXPECT(0x846e, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x30, gbc.readMem(0x846e));
        EXPECT(0xed, gbc.readMem(0x846f));
        EXPECT(0xcf, gbc.readMem(0xed2f));
        // CF 0316
        gbc.setState(0x56b5, 0xbe5d, 0xba30, 0x1ce8, 0x4749, 0xcc95, 0x1, 0x0);
        gbc.writeMem(0x56b5, { 0xcf });
        gbc.writeMem(0xbe5b, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xba, gbc.a());
        EXPECT(0x1c, gbc.b());
        EXPECT(0xe8, gbc.c());
        EXPECT(0x47, gbc.d());
        EXPECT(0x49, gbc.e());
        EXPECT(0xcc, gbc.h());
        EXPECT(0x95, gbc.l());
        EXPECT(0xbe5b, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xb6, gbc.readMem(0xbe5b));
        EXPECT(0x56, gbc.readMem(0xbe5c));
        // CF 0318
        gbc.setState(0x329, 0x9713, 0x3770, 0x5d54, 0x861, 0x25db, 0x0, 0x0);
        gbc.writeMem(0x329, { 0xcf });
        gbc.writeMem(0x9711, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x37, gbc.a());
        EXPECT(0x5d, gbc.b());
        EXPECT(0x54, gbc.c());
        EXPECT(0x8, gbc.d());
        EXPECT(0x61, gbc.e());
        EXPECT(0x25, gbc.h());
        EXPECT(0xdb, gbc.l());
        EXPECT(0x9711, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x2a, gbc.readMem(0x9711));
        EXPECT(0x3, gbc.readMem(0x9712));
        // CF 031B
        gbc.setState(0xb7e5, 0xfb09, 0xdf10, 0xcd0a, 0x7ab0, 0x9d39, 0x1, 0x1);
        gbc.writeMem(0xb7e5, { 0xcf });
        gbc.writeMem(0xfb07, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xdf, gbc.a());
        EXPECT(0xcd, gbc.b());
        EXPECT(0xa, gbc.c());
        EXPECT(0x7a, gbc.d());
        EXPECT(0xb0, gbc.e());
        EXPECT(0x9d, gbc.h());
        EXPECT(0x39, gbc.l());
        EXPECT(0xfb07, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0xb7e5));
        EXPECT(0xe6, gbc.readMem(0xfb07));
        EXPECT(0xb7, gbc.readMem(0xfb08));
        // CF 031C
        gbc.setState(0x92da, 0xaf35, 0x950, 0x8647, 0x3101, 0x2c82, 0x0, 0x1);
        gbc.writeMem(0x92da, { 0xcf });
        gbc.writeMem(0xaf33, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x9, gbc.a());
        EXPECT(0x86, gbc.b());
        EXPECT(0x47, gbc.c());
        EXPECT(0x31, gbc.d());
        EXPECT(0x1, gbc.e());
        EXPECT(0x2c, gbc.h());
        EXPECT(0x82, gbc.l());
        EXPECT(0xaf33, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0x92da));
        EXPECT(0xdb, gbc.readMem(0xaf33));
        EXPECT(0x92, gbc.readMem(0xaf34));
        // CF 031D
        gbc.setState(0x7ca5, 0xf7da, 0xff80, 0x4c1a, 0x27a9, 0x3a7, 0x1, 0x0);
        gbc.writeMem(0x7ca5, { 0xcf });
        gbc.writeMem(0xf7d8, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xff, gbc.a());
        EXPECT(0x4c, gbc.b());
        EXPECT(0x1a, gbc.c());
        EXPECT(0x27, gbc.d());
        EXPECT(0xa9, gbc.e());
        EXPECT(0x3, gbc.h());
        EXPECT(0xa7, gbc.l());
        EXPECT(0xf7d8, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xa6, gbc.readMem(0xf7d8));
        EXPECT(0x7c, gbc.readMem(0xf7d9));
        // CF 0320
        gbc.setState(0xdc15, 0x8a93, 0xafd0, 0x62dc, 0x6ba9, 0x5ad9, 0x1, 0x0);
        gbc.writeMem(0x8a91, { 0x0, 0x0 });
        gbc.writeMem(0xdc15, { 0xcf });
        gbc.step();
        EXPECT(0xaf, gbc.a());
        EXPECT(0x62, gbc.b());
        EXPECT(0xdc, gbc.c());
        EXPECT(0x6b, gbc.d());
        EXPECT(0xa9, gbc.e());
        EXPECT(0x5a, gbc.h());
        EXPECT(0xd9, gbc.l());
        EXPECT(0x8a91, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x16, gbc.readMem(0x8a91));
        EXPECT(0xdc, gbc.readMem(0x8a92));
        EXPECT(0xcf, gbc.readMem(0xdc15));
        // CF 0324
        gbc.setState(0xa11c, 0x9ffe, 0xa580, 0xf46f, 0x5d36, 0x9dbe, 0x1, 0x0);
        gbc.writeMem(0x9ffc, { 0x0, 0x0 });
        gbc.writeMem(0xa11c, { 0xcf });
        gbc.step();
        EXPECT(0xa5, gbc.a());
        EXPECT(0xf4, gbc.b());
        EXPECT(0x6f, gbc.c());
        EXPECT(0x5d, gbc.d());
        EXPECT(0x36, gbc.e());
        EXPECT(0x9d, gbc.h());
        EXPECT(0xbe, gbc.l());
        EXPECT(0x9ffc, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x1d, gbc.readMem(0x9ffc));
        EXPECT(0xa1, gbc.readMem(0x9ffd));
        EXPECT(0xcf, gbc.readMem(0xa11c));
        // CF 0325
        gbc.setState(0x185c, 0x862e, 0x4c0, 0x233b, 0x15da, 0x30cf, 0x1, 0x1);
        gbc.writeMem(0x185c, { 0xcf });
        gbc.writeMem(0x862c, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x4, gbc.a());
        EXPECT(0x23, gbc.b());
        EXPECT(0x3b, gbc.c());
        EXPECT(0x15, gbc.d());
        EXPECT(0xda, gbc.e());
        EXPECT(0x30, gbc.h());
        EXPECT(0xcf, gbc.l());
        EXPECT(0x862c, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x5d, gbc.readMem(0x862c));
        EXPECT(0x18, gbc.readMem(0x862d));
        // CF 0326
        gbc.setState(0xc2d8, 0xa8c3, 0x1d0, 0x79b9, 0x8127, 0xbc6d, 0x0, 0x1);
        gbc.writeMem(0xa8c1, { 0x0, 0x0 });
        gbc.writeMem(0xc2d8, { 0xcf });
        gbc.step();
        EXPECT(0x1, gbc.a());
        EXPECT(0x79, gbc.b());
        EXPECT(0xb9, gbc.c());
        EXPECT(0x81, gbc.d());
        EXPECT(0x27, gbc.e());
        EXPECT(0xbc, gbc.h());
        EXPECT(0x6d, gbc.l());
        EXPECT(0xa8c1, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xd9, gbc.readMem(0xa8c1));
        EXPECT(0xc2, gbc.readMem(0xa8c2));
        EXPECT(0xcf, gbc.readMem(0xc2d8));
        // CF 0327
        gbc.setState(0x4259, 0x8c3e, 0xd110, 0xd808, 0x1232, 0xe287, 0x0, 0x1);
        gbc.writeMem(0x4259, { 0xcf });
        gbc.writeMem(0x8c3c, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xd1, gbc.a());
        EXPECT(0xd8, gbc.b());
        EXPECT(0x8, gbc.c());
        EXPECT(0x12, gbc.d());
        EXPECT(0x32, gbc.e());
        EXPECT(0xe2, gbc.h());
        EXPECT(0x87, gbc.l());
        EXPECT(0x8c3c, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x5a, gbc.readMem(0x8c3c));
        EXPECT(0x42, gbc.readMem(0x8c3d));
        // CF 032A
        gbc.setState(0x66cc, 0xacb5, 0xfb50, 0x175e, 0x444d, 0x55c2, 0x1, 0x1);
        gbc.writeMem(0x66cc, { 0xcf });
        gbc.writeMem(0xacb3, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xfb, gbc.a());
        EXPECT(0x17, gbc.b());
        EXPECT(0x5e, gbc.c());
        EXPECT(0x44, gbc.d());
        EXPECT(0x4d, gbc.e());
        EXPECT(0x55, gbc.h());
        EXPECT(0xc2, gbc.l());
        EXPECT(0xacb3, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0xacb3));
        EXPECT(0x66, gbc.readMem(0xacb4));
        // CF 0332
        gbc.setState(0x2de1, 0xb5fd, 0x53a0, 0x110e, 0x45b4, 0xdd01, 0x0, 0x0);
        gbc.writeMem(0x2de1, { 0xcf });
        gbc.writeMem(0xb5fb, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x53, gbc.a());
        EXPECT(0x11, gbc.b());
        EXPECT(0xe, gbc.c());
        EXPECT(0x45, gbc.d());
        EXPECT(0xb4, gbc.e());
        EXPECT(0xdd, gbc.h());
        EXPECT(0x1, gbc.l());
        EXPECT(0xb5fb, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xe2, gbc.readMem(0xb5fb));
        EXPECT(0x2d, gbc.readMem(0xb5fc));
        // CF 0333
        gbc.setState(0x756a, 0x824b, 0x3df0, 0x66f5, 0x97c6, 0xf4c2, 0x0, 0x0);
        gbc.writeMem(0x756a, { 0xcf });
        gbc.writeMem(0x8249, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x3d, gbc.a());
        EXPECT(0x66, gbc.b());
        EXPECT(0xf5, gbc.c());
        EXPECT(0x97, gbc.d());
        EXPECT(0xc6, gbc.e());
        EXPECT(0xf4, gbc.h());
        EXPECT(0xc2, gbc.l());
        EXPECT(0x8249, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x6b, gbc.readMem(0x8249));
        EXPECT(0x75, gbc.readMem(0x824a));
        // CF 0336
        gbc.setState(0x5265, 0xde12, 0x1e0, 0xf6da, 0x9d34, 0x1d7f, 0x0, 0x0);
        gbc.writeMem(0x5265, { 0xcf });
        gbc.writeMem(0xde10, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x1, gbc.a());
        EXPECT(0xf6, gbc.b());
        EXPECT(0xda, gbc.c());
        EXPECT(0x9d, gbc.d());
        EXPECT(0x34, gbc.e());
        EXPECT(0x1d, gbc.h());
        EXPECT(0x7f, gbc.l());
        EXPECT(0xde10, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x66, gbc.readMem(0xde10));
        EXPECT(0x52, gbc.readMem(0xde11));
        // CF 0338
        gbc.setState(0x2e83, 0xd96f, 0x2cb0, 0x2029, 0x7ad8, 0x4d08, 0x1, 0x1);
        gbc.writeMem(0x2e83, { 0xcf });
        gbc.writeMem(0xd96d, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x2c, gbc.a());
        EXPECT(0x20, gbc.b());
        EXPECT(0x29, gbc.c());
        EXPECT(0x7a, gbc.d());
        EXPECT(0xd8, gbc.e());
        EXPECT(0x4d, gbc.h());
        EXPECT(0x8, gbc.l());
        EXPECT(0xd96d, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x84, gbc.readMem(0xd96d));
        EXPECT(0x2e, gbc.readMem(0xd96e));
        // CF 0339
        gbc.setState(0x3356, 0xf4b4, 0xfba0, 0xbb01, 0xe4d5, 0x82cd, 0x1, 0x0);
        gbc.writeMem(0x3356, { 0xcf });
        gbc.writeMem(0xf4b2, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xfb, gbc.a());
        EXPECT(0xbb, gbc.b());
        EXPECT(0x1, gbc.c());
        EXPECT(0xe4, gbc.d());
        EXPECT(0xd5, gbc.e());
        EXPECT(0x82, gbc.h());
        EXPECT(0xcd, gbc.l());
        EXPECT(0xf4b2, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x57, gbc.readMem(0xf4b2));
        EXPECT(0x33, gbc.readMem(0xf4b3));
        // CF 033A
        gbc.setState(0xca59, 0xba00, 0xcef0, 0xeadb, 0x5944, 0x7ba7, 0x1, 0x0);
        gbc.writeMem(0xb9fe, { 0x0, 0x0 });
        gbc.writeMem(0xca59, { 0xcf });
        gbc.step();
        EXPECT(0xce, gbc.a());
        EXPECT(0xea, gbc.b());
        EXPECT(0xdb, gbc.c());
        EXPECT(0x59, gbc.d());
        EXPECT(0x44, gbc.e());
        EXPECT(0x7b, gbc.h());
        EXPECT(0xa7, gbc.l());
        EXPECT(0xb9fe, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x5a, gbc.readMem(0xb9fe));
        EXPECT(0xca, gbc.readMem(0xb9ff));
        EXPECT(0xcf, gbc.readMem(0xca59));
        // CF 033C
        gbc.setState(0xc697, 0xf754, 0xd590, 0x50fd, 0xdc19, 0xb6b4, 0x1, 0x1);
        gbc.writeMem(0xc697, { 0xcf });
        gbc.writeMem(0xf752, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xd5, gbc.a());
        EXPECT(0x50, gbc.b());
        EXPECT(0xfd, gbc.c());
        EXPECT(0xdc, gbc.d());
        EXPECT(0x19, gbc.e());
        EXPECT(0xb6, gbc.h());
        EXPECT(0xb4, gbc.l());
        EXPECT(0xf752, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0xc697));
        EXPECT(0x98, gbc.readMem(0xf752));
        EXPECT(0xc6, gbc.readMem(0xf753));
        // CF 033D
        gbc.setState(0x516, 0xe061, 0xe090, 0x7546, 0x1111, 0x63a0, 0x1, 0x1);
        gbc.writeMem(0x516, { 0xcf });
        gbc.writeMem(0xe05f, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xe0, gbc.a());
        EXPECT(0x75, gbc.b());
        EXPECT(0x46, gbc.c());
        EXPECT(0x11, gbc.d());
        EXPECT(0x11, gbc.e());
        EXPECT(0x63, gbc.h());
        EXPECT(0xa0, gbc.l());
        EXPECT(0xe05f, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x17, gbc.readMem(0xe05f));
        EXPECT(0x5, gbc.readMem(0xe060));
        // CF 033E
        gbc.setState(0xee20, 0xf1af, 0xdd50, 0x72b4, 0xddd7, 0xad3, 0x1, 0x0);
        gbc.writeMem(0xee20, { 0xcf });
        gbc.writeMem(0xf1ad, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xdd, gbc.a());
        EXPECT(0x72, gbc.b());
        EXPECT(0xb4, gbc.c());
        EXPECT(0xdd, gbc.d());
        EXPECT(0xd7, gbc.e());
        EXPECT(0xa, gbc.h());
        EXPECT(0xd3, gbc.l());
        EXPECT(0xf1ad, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0xee20));
        EXPECT(0x21, gbc.readMem(0xf1ad));
        EXPECT(0xee, gbc.readMem(0xf1ae));
        // CF 0341
        gbc.setState(0xde69, 0xbd0a, 0xca50, 0x2731, 0xf99d, 0x563e, 0x1, 0x1);
        gbc.writeMem(0xbd08, { 0x0, 0x0 });
        gbc.writeMem(0xde69, { 0xcf });
        gbc.step();
        EXPECT(0xca, gbc.a());
        EXPECT(0x27, gbc.b());
        EXPECT(0x31, gbc.c());
        EXPECT(0xf9, gbc.d());
        EXPECT(0x9d, gbc.e());
        EXPECT(0x56, gbc.h());
        EXPECT(0x3e, gbc.l());
        EXPECT(0xbd08, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x6a, gbc.readMem(0xbd08));
        EXPECT(0xde, gbc.readMem(0xbd09));
        EXPECT(0xcf, gbc.readMem(0xde69));
        // CF 0342
        gbc.setState(0x411c, 0x8400, 0xedd0, 0x6bc1, 0xfead, 0xbb9c, 0x1, 0x1);
        gbc.writeMem(0x411c, { 0xcf });
        gbc.writeMem(0x83fe, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xed, gbc.a());
        EXPECT(0x6b, gbc.b());
        EXPECT(0xc1, gbc.c());
        EXPECT(0xfe, gbc.d());
        EXPECT(0xad, gbc.e());
        EXPECT(0xbb, gbc.h());
        EXPECT(0x9c, gbc.l());
        EXPECT(0x83fe, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x1d, gbc.readMem(0x83fe));
        EXPECT(0x41, gbc.readMem(0x83ff));
        // CF 034D
        gbc.setState(0x8ef5, 0xe913, 0x5b60, 0xc61, 0x862d, 0x8700, 0x0, 0x1);
        gbc.writeMem(0x8ef5, { 0xcf });
        gbc.writeMem(0xe911, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x5b, gbc.a());
        EXPECT(0xc, gbc.b());
        EXPECT(0x61, gbc.c());
        EXPECT(0x86, gbc.d());
        EXPECT(0x2d, gbc.e());
        EXPECT(0x87, gbc.h());
        EXPECT(0x0, gbc.l());
        EXPECT(0xe911, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0x8ef5));
        EXPECT(0xf6, gbc.readMem(0xe911));
        EXPECT(0x8e, gbc.readMem(0xe912));
        // CF 0350
        gbc.setState(0x1f0f, 0x95f5, 0xc820, 0xcdb, 0x4f75, 0x8d2d, 0x1, 0x0);
        gbc.writeMem(0x1f0f, { 0xcf });
        gbc.writeMem(0x95f3, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xc8, gbc.a());
        EXPECT(0xc, gbc.b());
        EXPECT(0xdb, gbc.c());
        EXPECT(0x4f, gbc.d());
        EXPECT(0x75, gbc.e());
        EXPECT(0x8d, gbc.h());
        EXPECT(0x2d, gbc.l());
        EXPECT(0x95f3, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x10, gbc.readMem(0x95f3));
        EXPECT(0x1f, gbc.readMem(0x95f4));
        // CF 0352
        gbc.setState(0x1a65, 0xe412, 0x87f0, 0xff04, 0x424f, 0xfdf2, 0x1, 0x0);
        gbc.writeMem(0x1a65, { 0xcf });
        gbc.writeMem(0xe410, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x87, gbc.a());
        EXPECT(0xff, gbc.b());
        EXPECT(0x4, gbc.c());
        EXPECT(0x42, gbc.d());
        EXPECT(0x4f, gbc.e());
        EXPECT(0xfd, gbc.h());
        EXPECT(0xf2, gbc.l());
        EXPECT(0xe410, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x66, gbc.readMem(0xe410));
        EXPECT(0x1a, gbc.readMem(0xe411));
        // CF 0353
        gbc.setState(0x437b, 0xcfce, 0x9b10, 0xa1b6, 0xcef6, 0x88f7, 0x1, 0x1);
        gbc.writeMem(0x437b, { 0xcf });
        gbc.writeMem(0xcfcc, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x9b, gbc.a());
        EXPECT(0xa1, gbc.b());
        EXPECT(0xb6, gbc.c());
        EXPECT(0xce, gbc.d());
        EXPECT(0xf6, gbc.e());
        EXPECT(0x88, gbc.h());
        EXPECT(0xf7, gbc.l());
        EXPECT(0xcfcc, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x7c, gbc.readMem(0xcfcc));
        EXPECT(0x43, gbc.readMem(0xcfcd));
        // CF 0354
        gbc.setState(0x58e3, 0xb9f8, 0xfd60, 0x3213, 0x8e7b, 0x97d, 0x0, 0x0);
        gbc.writeMem(0x58e3, { 0xcf });
        gbc.writeMem(0xb9f6, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xfd, gbc.a());
        EXPECT(0x32, gbc.b());
        EXPECT(0x13, gbc.c());
        EXPECT(0x8e, gbc.d());
        EXPECT(0x7b, gbc.e());
        EXPECT(0x9, gbc.h());
        EXPECT(0x7d, gbc.l());
        EXPECT(0xb9f6, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xe4, gbc.readMem(0xb9f6));
        EXPECT(0x58, gbc.readMem(0xb9f7));
        // CF 035A
        gbc.setState(0xab65, 0x8255, 0x7c00, 0xcfdb, 0xce7c, 0xafc4, 0x0, 0x1);
        gbc.writeMem(0x8253, { 0x0, 0x0 });
        gbc.writeMem(0xab65, { 0xcf });
        gbc.step();
        EXPECT(0x7c, gbc.a());
        EXPECT(0xcf, gbc.b());
        EXPECT(0xdb, gbc.c());
        EXPECT(0xce, gbc.d());
        EXPECT(0x7c, gbc.e());
        EXPECT(0xaf, gbc.h());
        EXPECT(0xc4, gbc.l());
        EXPECT(0x8253, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x66, gbc.readMem(0x8253));
        EXPECT(0xab, gbc.readMem(0x8254));
        EXPECT(0xcf, gbc.readMem(0xab65));
        // CF 035B
        gbc.setState(0x122f, 0xe37d, 0xdc60, 0x473, 0x1ce, 0x8622, 0x0, 0x1);
        gbc.writeMem(0x122f, { 0xcf });
        gbc.writeMem(0xe37b, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xdc, gbc.a());
        EXPECT(0x4, gbc.b());
        EXPECT(0x73, gbc.c());
        EXPECT(0x1, gbc.d());
        EXPECT(0xce, gbc.e());
        EXPECT(0x86, gbc.h());
        EXPECT(0x22, gbc.l());
        EXPECT(0xe37b, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x30, gbc.readMem(0xe37b));
        EXPECT(0x12, gbc.readMem(0xe37c));
        // CF 035C
        gbc.setState(0x3a29, 0x90b3, 0xcbf0, 0xe0c0, 0xb654, 0x4602, 0x0, 0x0);
        gbc.writeMem(0x3a29, { 0xcf });
        gbc.writeMem(0x90b1, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xcb, gbc.a());
        EXPECT(0xe0, gbc.b());
        EXPECT(0xc0, gbc.c());
        EXPECT(0xb6, gbc.d());
        EXPECT(0x54, gbc.e());
        EXPECT(0x46, gbc.h());
        EXPECT(0x2, gbc.l());
        EXPECT(0x90b1, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x2a, gbc.readMem(0x90b1));
        EXPECT(0x3a, gbc.readMem(0x90b2));
        // CF 035E
        gbc.setState(0xb306, 0xe21a, 0xcc80, 0xdb13, 0x924f, 0xeec3, 0x1, 0x0);
        gbc.writeMem(0xb306, { 0xcf });
        gbc.writeMem(0xe218, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xcc, gbc.a());
        EXPECT(0xdb, gbc.b());
        EXPECT(0x13, gbc.c());
        EXPECT(0x92, gbc.d());
        EXPECT(0x4f, gbc.e());
        EXPECT(0xee, gbc.h());
        EXPECT(0xc3, gbc.l());
        EXPECT(0xe218, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0xb306));
        EXPECT(0x7, gbc.readMem(0xe218));
        EXPECT(0xb3, gbc.readMem(0xe219));
        // CF 035F
        gbc.setState(0xc435, 0xc0b1, 0x4e20, 0xd37, 0x9b89, 0x51e4, 0x1, 0x0);
        gbc.writeMem(0xc0af, { 0x0, 0x0 });
        gbc.writeMem(0xc435, { 0xcf });
        gbc.step();
        EXPECT(0x4e, gbc.a());
        EXPECT(0xd, gbc.b());
        EXPECT(0x37, gbc.c());
        EXPECT(0x9b, gbc.d());
        EXPECT(0x89, gbc.e());
        EXPECT(0x51, gbc.h());
        EXPECT(0xe4, gbc.l());
        EXPECT(0xc0af, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x36, gbc.readMem(0xc0af));
        EXPECT(0xc4, gbc.readMem(0xc0b0));
        EXPECT(0xcf, gbc.readMem(0xc435));
        // CF 0362
        gbc.setState(0x4ace, 0xfe01, 0xfeb0, 0x79a8, 0xf60b, 0x83e5, 0x0, 0x0);
        gbc.writeMem(0x4ace, { 0xcf });
        gbc.writeMem(0xfdff, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xfe, gbc.a());
        EXPECT(0x79, gbc.b());
        EXPECT(0xa8, gbc.c());
        EXPECT(0xf6, gbc.d());
        EXPECT(0xb, gbc.e());
        EXPECT(0x83, gbc.h());
        EXPECT(0xe5, gbc.l());
        EXPECT(0xfdff, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0xfdff));
        EXPECT(0x4a, gbc.readMem(0xfe00));
        // CF 0365
        gbc.setState(0xc5fb, 0xab36, 0xf490, 0x1848, 0xd3be, 0x79e4, 0x1, 0x1);
        gbc.writeMem(0xab34, { 0x0, 0x0 });
        gbc.writeMem(0xc5fb, { 0xcf });
        gbc.step();
        EXPECT(0xf4, gbc.a());
        EXPECT(0x18, gbc.b());
        EXPECT(0x48, gbc.c());
        EXPECT(0xd3, gbc.d());
        EXPECT(0xbe, gbc.e());
        EXPECT(0x79, gbc.h());
        EXPECT(0xe4, gbc.l());
        EXPECT(0xab34, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xfc, gbc.readMem(0xab34));
        EXPECT(0xc5, gbc.readMem(0xab35));
        EXPECT(0xcf, gbc.readMem(0xc5fb));
        // CF 0368
        gbc.setState(0x5f35, 0xd936, 0xb500, 0x636d, 0xdfb1, 0x2cd1, 0x0, 0x1);
        gbc.writeMem(0x5f35, { 0xcf });
        gbc.writeMem(0xd934, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xb5, gbc.a());
        EXPECT(0x63, gbc.b());
        EXPECT(0x6d, gbc.c());
        EXPECT(0xdf, gbc.d());
        EXPECT(0xb1, gbc.e());
        EXPECT(0x2c, gbc.h());
        EXPECT(0xd1, gbc.l());
        EXPECT(0xd934, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x36, gbc.readMem(0xd934));
        EXPECT(0x5f, gbc.readMem(0xd935));
        // CF 0369
        gbc.setState(0xb4f, 0xed80, 0x5380, 0xff, 0xb0c9, 0xa658, 0x1, 0x0);
        gbc.writeMem(0xb4f, { 0xcf });
        gbc.writeMem(0xed7e, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x53, gbc.a());
        EXPECT(0x0, gbc.b());
        EXPECT(0xff, gbc.c());
        EXPECT(0xb0, gbc.d());
        EXPECT(0xc9, gbc.e());
        EXPECT(0xa6, gbc.h());
        EXPECT(0x58, gbc.l());
        EXPECT(0xed7e, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x50, gbc.readMem(0xed7e));
        EXPECT(0xb, gbc.readMem(0xed7f));
        // CF 036B
        gbc.setState(0xb37a, 0x90a0, 0x3460, 0x9e40, 0xe9c, 0x599f, 0x1, 0x1);
        gbc.writeMem(0x909e, { 0x0, 0x0 });
        gbc.writeMem(0xb37a, { 0xcf });
        gbc.step();
        EXPECT(0x34, gbc.a());
        EXPECT(0x9e, gbc.b());
        EXPECT(0x40, gbc.c());
        EXPECT(0xe, gbc.d());
        EXPECT(0x9c, gbc.e());
        EXPECT(0x59, gbc.h());
        EXPECT(0x9f, gbc.l());
        EXPECT(0x909e, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x7b, gbc.readMem(0x909e));
        EXPECT(0xb3, gbc.readMem(0x909f));
        EXPECT(0xcf, gbc.readMem(0xb37a));
        // CF 036C
        gbc.setState(0x6516, 0xe4c3, 0x5490, 0xdfa9, 0xaa50, 0xb735, 0x0, 0x0);
        gbc.writeMem(0x6516, { 0xcf });
        gbc.writeMem(0xe4c1, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x54, gbc.a());
        EXPECT(0xdf, gbc.b());
        EXPECT(0xa9, gbc.c());
        EXPECT(0xaa, gbc.d());
        EXPECT(0x50, gbc.e());
        EXPECT(0xb7, gbc.h());
        EXPECT(0x35, gbc.l());
        EXPECT(0xe4c1, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x17, gbc.readMem(0xe4c1));
        EXPECT(0x65, gbc.readMem(0xe4c2));
        // CF 036E
        gbc.setState(0x76c7, 0xb6df, 0xfdc0, 0xfd37, 0xca8b, 0xe447, 0x1, 0x1);
        gbc.writeMem(0x76c7, { 0xcf });
        gbc.writeMem(0xb6dd, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xfd, gbc.a());
        EXPECT(0xfd, gbc.b());
        EXPECT(0x37, gbc.c());
        EXPECT(0xca, gbc.d());
        EXPECT(0x8b, gbc.e());
        EXPECT(0xe4, gbc.h());
        EXPECT(0x47, gbc.l());
        EXPECT(0xb6dd, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xc8, gbc.readMem(0xb6dd));
        EXPECT(0x76, gbc.readMem(0xb6de));
        // CF 036F
        gbc.setState(0x90b1, 0xcc61, 0x52b0, 0xc134, 0x8031, 0x5814, 0x0, 0x0);
        gbc.writeMem(0x90b1, { 0xcf });
        gbc.writeMem(0xcc5f, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x52, gbc.a());
        EXPECT(0xc1, gbc.b());
        EXPECT(0x34, gbc.c());
        EXPECT(0x80, gbc.d());
        EXPECT(0x31, gbc.e());
        EXPECT(0x58, gbc.h());
        EXPECT(0x14, gbc.l());
        EXPECT(0xcc5f, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0x90b1));
        EXPECT(0xb2, gbc.readMem(0xcc5f));
        EXPECT(0x90, gbc.readMem(0xcc60));
        // CF 0371
        gbc.setState(0x1a14, 0x8561, 0x2580, 0x7a5c, 0x1aa7, 0xe5bd, 0x1, 0x0);
        gbc.writeMem(0x1a14, { 0xcf });
        gbc.writeMem(0x855f, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x25, gbc.a());
        EXPECT(0x7a, gbc.b());
        EXPECT(0x5c, gbc.c());
        EXPECT(0x1a, gbc.d());
        EXPECT(0xa7, gbc.e());
        EXPECT(0xe5, gbc.h());
        EXPECT(0xbd, gbc.l());
        EXPECT(0x855f, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x15, gbc.readMem(0x855f));
        EXPECT(0x1a, gbc.readMem(0x8560));
        // CF 0374
        gbc.setState(0x9b84, 0xa516, 0xfdf0, 0x7d88, 0x3380, 0x71d2, 0x0, 0x0);
        gbc.writeMem(0x9b84, { 0xcf });
        gbc.writeMem(0xa514, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xfd, gbc.a());
        EXPECT(0x7d, gbc.b());
        EXPECT(0x88, gbc.c());
        EXPECT(0x33, gbc.d());
        EXPECT(0x80, gbc.e());
        EXPECT(0x71, gbc.h());
        EXPECT(0xd2, gbc.l());
        EXPECT(0xa514, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0x9b84));
        EXPECT(0x85, gbc.readMem(0xa514));
        EXPECT(0x9b, gbc.readMem(0xa515));
        // CF 0376
        gbc.setState(0x139, 0xaeb2, 0xf060, 0xe6e8, 0xb6de, 0x5067, 0x0, 0x1);
        gbc.writeMem(0x139, { 0xcf });
        gbc.writeMem(0xaeb0, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xf0, gbc.a());
        EXPECT(0xe6, gbc.b());
        EXPECT(0xe8, gbc.c());
        EXPECT(0xb6, gbc.d());
        EXPECT(0xde, gbc.e());
        EXPECT(0x50, gbc.h());
        EXPECT(0x67, gbc.l());
        EXPECT(0xaeb0, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x3a, gbc.readMem(0xaeb0));
        EXPECT(0x1, gbc.readMem(0xaeb1));
        // CF 0378
        gbc.setState(0x1c27, 0x94fd, 0xb370, 0x8bd7, 0x5cfe, 0xdcb2, 0x0, 0x0);
        gbc.writeMem(0x1c27, { 0xcf });
        gbc.writeMem(0x94fb, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xb3, gbc.a());
        EXPECT(0x8b, gbc.b());
        EXPECT(0xd7, gbc.c());
        EXPECT(0x5c, gbc.d());
        EXPECT(0xfe, gbc.e());
        EXPECT(0xdc, gbc.h());
        EXPECT(0xb2, gbc.l());
        EXPECT(0x94fb, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x28, gbc.readMem(0x94fb));
        EXPECT(0x1c, gbc.readMem(0x94fc));
        // CF 037B
        gbc.setState(0x65ae, 0xa7f3, 0x4ca0, 0x3227, 0x3ae7, 0x543, 0x0, 0x1);
        gbc.writeMem(0x65ae, { 0xcf });
        gbc.writeMem(0xa7f1, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x4c, gbc.a());
        EXPECT(0x32, gbc.b());
        EXPECT(0x27, gbc.c());
        EXPECT(0x3a, gbc.d());
        EXPECT(0xe7, gbc.e());
        EXPECT(0x5, gbc.h());
        EXPECT(0x43, gbc.l());
        EXPECT(0xa7f1, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xa7f1));
        EXPECT(0x65, gbc.readMem(0xa7f2));
        // CF 037E
        gbc.setState(0xe705, 0xee3b, 0x28e0, 0x6ecd, 0xc504, 0xfc06, 0x1, 0x1);
        gbc.writeMem(0xe705, { 0xcf });
        gbc.writeMem(0xee39, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x28, gbc.a());
        EXPECT(0x6e, gbc.b());
        EXPECT(0xcd, gbc.c());
        EXPECT(0xc5, gbc.d());
        EXPECT(0x4, gbc.e());
        EXPECT(0xfc, gbc.h());
        EXPECT(0x6, gbc.l());
        EXPECT(0xee39, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0xe705));
        EXPECT(0x6, gbc.readMem(0xee39));
        EXPECT(0xe7, gbc.readMem(0xee3a));
        // CF 0381
        gbc.setState(0x96a7, 0xfa05, 0xdf0, 0xbc55, 0x2c01, 0x51c3, 0x1, 0x0);
        gbc.writeMem(0x96a7, { 0xcf });
        gbc.writeMem(0xfa03, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xd, gbc.a());
        EXPECT(0xbc, gbc.b());
        EXPECT(0x55, gbc.c());
        EXPECT(0x2c, gbc.d());
        EXPECT(0x1, gbc.e());
        EXPECT(0x51, gbc.h());
        EXPECT(0xc3, gbc.l());
        EXPECT(0xfa03, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0x96a7));
        EXPECT(0xa8, gbc.readMem(0xfa03));
        EXPECT(0x96, gbc.readMem(0xfa04));
        // CF 0382
        gbc.setState(0x1993, 0xa6b0, 0xbbb0, 0x959d, 0x3d47, 0x965a, 0x1, 0x0);
        gbc.writeMem(0x1993, { 0xcf });
        gbc.writeMem(0xa6ae, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xbb, gbc.a());
        EXPECT(0x95, gbc.b());
        EXPECT(0x9d, gbc.c());
        EXPECT(0x3d, gbc.d());
        EXPECT(0x47, gbc.e());
        EXPECT(0x96, gbc.h());
        EXPECT(0x5a, gbc.l());
        EXPECT(0xa6ae, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x94, gbc.readMem(0xa6ae));
        EXPECT(0x19, gbc.readMem(0xa6af));
        // CF 0384
        gbc.setState(0x3a32, 0x90ed, 0x4240, 0x5c77, 0x861e, 0xc121, 0x1, 0x1);
        gbc.writeMem(0x3a32, { 0xcf });
        gbc.writeMem(0x90eb, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x42, gbc.a());
        EXPECT(0x5c, gbc.b());
        EXPECT(0x77, gbc.c());
        EXPECT(0x86, gbc.d());
        EXPECT(0x1e, gbc.e());
        EXPECT(0xc1, gbc.h());
        EXPECT(0x21, gbc.l());
        EXPECT(0x90eb, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x33, gbc.readMem(0x90eb));
        EXPECT(0x3a, gbc.readMem(0x90ec));
        // CF 0389
        gbc.setState(0xbb6e, 0xe6da, 0x9a20, 0x547e, 0xd330, 0xf6da, 0x1, 0x0);
        gbc.writeMem(0xbb6e, { 0xcf });
        gbc.writeMem(0xe6d8, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x9a, gbc.a());
        EXPECT(0x54, gbc.b());
        EXPECT(0x7e, gbc.c());
        EXPECT(0xd3, gbc.d());
        EXPECT(0x30, gbc.e());
        EXPECT(0xf6, gbc.h());
        EXPECT(0xda, gbc.l());
        EXPECT(0xe6d8, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0xbb6e));
        EXPECT(0x6f, gbc.readMem(0xe6d8));
        EXPECT(0xbb, gbc.readMem(0xe6d9));
        // CF 038A
        gbc.setState(0x6894, 0x9360, 0x9c30, 0xb489, 0xe57e, 0xaaea, 0x1, 0x1);
        gbc.writeMem(0x6894, { 0xcf });
        gbc.writeMem(0x935e, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x9c, gbc.a());
        EXPECT(0xb4, gbc.b());
        EXPECT(0x89, gbc.c());
        EXPECT(0xe5, gbc.d());
        EXPECT(0x7e, gbc.e());
        EXPECT(0xaa, gbc.h());
        EXPECT(0xea, gbc.l());
        EXPECT(0x935e, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x95, gbc.readMem(0x935e));
        EXPECT(0x68, gbc.readMem(0x935f));
        // CF 038C
        gbc.setState(0xabe9, 0xdde5, 0xef50, 0x7306, 0x3828, 0xa438, 0x0, 0x1);
        gbc.writeMem(0xabe9, { 0xcf });
        gbc.writeMem(0xdde3, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xef, gbc.a());
        EXPECT(0x73, gbc.b());
        EXPECT(0x6, gbc.c());
        EXPECT(0x38, gbc.d());
        EXPECT(0x28, gbc.e());
        EXPECT(0xa4, gbc.h());
        EXPECT(0x38, gbc.l());
        EXPECT(0xdde3, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0xabe9));
        EXPECT(0xea, gbc.readMem(0xdde3));
        EXPECT(0xab, gbc.readMem(0xdde4));
        // CF 0391
        gbc.setState(0x3203, 0xd95b, 0xeda0, 0xa814, 0x22c1, 0xa486, 0x0, 0x1);
        gbc.writeMem(0x3203, { 0xcf });
        gbc.writeMem(0xd959, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xed, gbc.a());
        EXPECT(0xa8, gbc.b());
        EXPECT(0x14, gbc.c());
        EXPECT(0x22, gbc.d());
        EXPECT(0xc1, gbc.e());
        EXPECT(0xa4, gbc.h());
        EXPECT(0x86, gbc.l());
        EXPECT(0xd959, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x4, gbc.readMem(0xd959));
        EXPECT(0x32, gbc.readMem(0xd95a));
        // CF 0392
        gbc.setState(0x7c57, 0xc8a4, 0x3b60, 0x5fcd, 0x1df, 0x52ff, 0x1, 0x1);
        gbc.writeMem(0x7c57, { 0xcf });
        gbc.writeMem(0xc8a2, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x3b, gbc.a());
        EXPECT(0x5f, gbc.b());
        EXPECT(0xcd, gbc.c());
        EXPECT(0x1, gbc.d());
        EXPECT(0xdf, gbc.e());
        EXPECT(0x52, gbc.h());
        EXPECT(0xff, gbc.l());
        EXPECT(0xc8a2, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x58, gbc.readMem(0xc8a2));
        EXPECT(0x7c, gbc.readMem(0xc8a3));
        // CF 0394
        gbc.setState(0x37f5, 0xcda3, 0xb250, 0x61ce, 0xff5c, 0x2426, 0x1, 0x1);
        gbc.writeMem(0x37f5, { 0xcf });
        gbc.writeMem(0xcda1, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xb2, gbc.a());
        EXPECT(0x61, gbc.b());
        EXPECT(0xce, gbc.c());
        EXPECT(0xff, gbc.d());
        EXPECT(0x5c, gbc.e());
        EXPECT(0x24, gbc.h());
        EXPECT(0x26, gbc.l());
        EXPECT(0xcda1, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xf6, gbc.readMem(0xcda1));
        EXPECT(0x37, gbc.readMem(0xcda2));
        // CF 0396
        gbc.setState(0x2f4a, 0xf2ca, 0x8c70, 0x18c6, 0x21b9, 0x4abe, 0x0, 0x0);
        gbc.writeMem(0x2f4a, { 0xcf });
        gbc.writeMem(0xf2c8, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x8c, gbc.a());
        EXPECT(0x18, gbc.b());
        EXPECT(0xc6, gbc.c());
        EXPECT(0x21, gbc.d());
        EXPECT(0xb9, gbc.e());
        EXPECT(0x4a, gbc.h());
        EXPECT(0xbe, gbc.l());
        EXPECT(0xf2c8, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x4b, gbc.readMem(0xf2c8));
        EXPECT(0x2f, gbc.readMem(0xf2c9));
        // CF 0398
        gbc.setState(0xd225, 0xeb62, 0x6250, 0x96f2, 0x7c18, 0x82b6, 0x1, 0x1);
        gbc.writeMem(0xd225, { 0xcf });
        gbc.writeMem(0xeb60, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x62, gbc.a());
        EXPECT(0x96, gbc.b());
        EXPECT(0xf2, gbc.c());
        EXPECT(0x7c, gbc.d());
        EXPECT(0x18, gbc.e());
        EXPECT(0x82, gbc.h());
        EXPECT(0xb6, gbc.l());
        EXPECT(0xeb60, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0xd225));
        EXPECT(0x26, gbc.readMem(0xeb60));
        EXPECT(0xd2, gbc.readMem(0xeb61));
        // CF 0399
        gbc.setState(0xaf04, 0xde33, 0xf990, 0xeae5, 0x90e0, 0x631e, 0x1, 0x0);
        gbc.writeMem(0xaf04, { 0xcf });
        gbc.writeMem(0xde31, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xf9, gbc.a());
        EXPECT(0xea, gbc.b());
        EXPECT(0xe5, gbc.c());
        EXPECT(0x90, gbc.d());
        EXPECT(0xe0, gbc.e());
        EXPECT(0x63, gbc.h());
        EXPECT(0x1e, gbc.l());
        EXPECT(0xde31, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0xaf04));
        EXPECT(0x5, gbc.readMem(0xde31));
        EXPECT(0xaf, gbc.readMem(0xde32));
        // CF 039D
        gbc.setState(0x7105, 0xcec9, 0xc4e0, 0x29b7, 0x23be, 0xdff3, 0x0, 0x0);
        gbc.writeMem(0x7105, { 0xcf });
        gbc.writeMem(0xcec7, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xc4, gbc.a());
        EXPECT(0x29, gbc.b());
        EXPECT(0xb7, gbc.c());
        EXPECT(0x23, gbc.d());
        EXPECT(0xbe, gbc.e());
        EXPECT(0xdf, gbc.h());
        EXPECT(0xf3, gbc.l());
        EXPECT(0xcec7, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x6, gbc.readMem(0xcec7));
        EXPECT(0x71, gbc.readMem(0xcec8));
        // CF 039E
        gbc.setState(0x5f8e, 0xe755, 0xe060, 0x3a97, 0xe454, 0x7f94, 0x1, 0x0);
        gbc.writeMem(0x5f8e, { 0xcf });
        gbc.writeMem(0xe753, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xe0, gbc.a());
        EXPECT(0x3a, gbc.b());
        EXPECT(0x97, gbc.c());
        EXPECT(0xe4, gbc.d());
        EXPECT(0x54, gbc.e());
        EXPECT(0x7f, gbc.h());
        EXPECT(0x94, gbc.l());
        EXPECT(0xe753, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x8f, gbc.readMem(0xe753));
        EXPECT(0x5f, gbc.readMem(0xe754));
        // CF 03A0
        gbc.setState(0x40a1, 0xf36e, 0xf6d0, 0x6094, 0xd5c1, 0xf333, 0x1, 0x1);
        gbc.writeMem(0x40a1, { 0xcf });
        gbc.writeMem(0xf36c, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xf6, gbc.a());
        EXPECT(0x60, gbc.b());
        EXPECT(0x94, gbc.c());
        EXPECT(0xd5, gbc.d());
        EXPECT(0xc1, gbc.e());
        EXPECT(0xf3, gbc.h());
        EXPECT(0x33, gbc.l());
        EXPECT(0xf36c, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xa2, gbc.readMem(0xf36c));
        EXPECT(0x40, gbc.readMem(0xf36d));
        // CF 03A2
        gbc.setState(0xb96f, 0x8d9d, 0xe480, 0x60a6, 0x9edc, 0x5739, 0x1, 0x1);
        gbc.writeMem(0x8d9b, { 0x0, 0x0 });
        gbc.writeMem(0xb96f, { 0xcf });
        gbc.step();
        EXPECT(0xe4, gbc.a());
        EXPECT(0x60, gbc.b());
        EXPECT(0xa6, gbc.c());
        EXPECT(0x9e, gbc.d());
        EXPECT(0xdc, gbc.e());
        EXPECT(0x57, gbc.h());
        EXPECT(0x39, gbc.l());
        EXPECT(0x8d9b, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x70, gbc.readMem(0x8d9b));
        EXPECT(0xb9, gbc.readMem(0x8d9c));
        EXPECT(0xcf, gbc.readMem(0xb96f));
        // CF 03A3
        gbc.setState(0x227b, 0xb7b1, 0x60, 0x7ec0, 0xc347, 0x96eb, 0x0, 0x0);
        gbc.writeMem(0x227b, { 0xcf });
        gbc.writeMem(0xb7af, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x7e, gbc.b());
        EXPECT(0xc0, gbc.c());
        EXPECT(0xc3, gbc.d());
        EXPECT(0x47, gbc.e());
        EXPECT(0x96, gbc.h());
        EXPECT(0xeb, gbc.l());
        EXPECT(0xb7af, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x7c, gbc.readMem(0xb7af));
        EXPECT(0x22, gbc.readMem(0xb7b0));
        // CF 03A4
        gbc.setState(0xa5b1, 0xa057, 0xb240, 0x3187, 0x5781, 0x6861, 0x1, 0x0);
        gbc.writeMem(0xa055, { 0x0, 0x0 });
        gbc.writeMem(0xa5b1, { 0xcf });
        gbc.step();
        EXPECT(0xb2, gbc.a());
        EXPECT(0x31, gbc.b());
        EXPECT(0x87, gbc.c());
        EXPECT(0x57, gbc.d());
        EXPECT(0x81, gbc.e());
        EXPECT(0x68, gbc.h());
        EXPECT(0x61, gbc.l());
        EXPECT(0xa055, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xb2, gbc.readMem(0xa055));
        EXPECT(0xa5, gbc.readMem(0xa056));
        EXPECT(0xcf, gbc.readMem(0xa5b1));
        // CF 03A5
        gbc.setState(0xe8b6, 0x92d9, 0xa040, 0xaa63, 0xf6e4, 0xe2f0, 0x0, 0x0);
        gbc.writeMem(0x92d7, { 0x0, 0x0 });
        gbc.writeMem(0xe8b6, { 0xcf });
        gbc.step();
        EXPECT(0xa0, gbc.a());
        EXPECT(0xaa, gbc.b());
        EXPECT(0x63, gbc.c());
        EXPECT(0xf6, gbc.d());
        EXPECT(0xe4, gbc.e());
        EXPECT(0xe2, gbc.h());
        EXPECT(0xf0, gbc.l());
        EXPECT(0x92d7, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xb7, gbc.readMem(0x92d7));
        EXPECT(0xe8, gbc.readMem(0x92d8));
        EXPECT(0xcf, gbc.readMem(0xe8b6));
        // CF 03A7
        gbc.setState(0xd82e, 0xa727, 0xe170, 0x929a, 0xaec7, 0x69d7, 0x1, 0x1);
        gbc.writeMem(0xa725, { 0x0, 0x0 });
        gbc.writeMem(0xd82e, { 0xcf });
        gbc.step();
        EXPECT(0xe1, gbc.a());
        EXPECT(0x92, gbc.b());
        EXPECT(0x9a, gbc.c());
        EXPECT(0xae, gbc.d());
        EXPECT(0xc7, gbc.e());
        EXPECT(0x69, gbc.h());
        EXPECT(0xd7, gbc.l());
        EXPECT(0xa725, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x2f, gbc.readMem(0xa725));
        EXPECT(0xd8, gbc.readMem(0xa726));
        EXPECT(0xcf, gbc.readMem(0xd82e));
        // CF 03A9
        gbc.setState(0x8785, 0xd7cb, 0x31a0, 0x59ec, 0x1e7f, 0xbc58, 0x1, 0x0);
        gbc.writeMem(0x8785, { 0xcf });
        gbc.writeMem(0xd7c9, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x31, gbc.a());
        EXPECT(0x59, gbc.b());
        EXPECT(0xec, gbc.c());
        EXPECT(0x1e, gbc.d());
        EXPECT(0x7f, gbc.e());
        EXPECT(0xbc, gbc.h());
        EXPECT(0x58, gbc.l());
        EXPECT(0xd7c9, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0x8785));
        EXPECT(0x86, gbc.readMem(0xd7c9));
        EXPECT(0x87, gbc.readMem(0xd7ca));
        // CF 03AF
        gbc.setState(0xbcf8, 0xed61, 0x6080, 0xa672, 0xde50, 0x762f, 0x1, 0x0);
        gbc.writeMem(0xbcf8, { 0xcf });
        gbc.writeMem(0xed5f, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x60, gbc.a());
        EXPECT(0xa6, gbc.b());
        EXPECT(0x72, gbc.c());
        EXPECT(0xde, gbc.d());
        EXPECT(0x50, gbc.e());
        EXPECT(0x76, gbc.h());
        EXPECT(0x2f, gbc.l());
        EXPECT(0xed5f, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0xbcf8));
        EXPECT(0xf9, gbc.readMem(0xed5f));
        EXPECT(0xbc, gbc.readMem(0xed60));
        // CF 03B0
        gbc.setState(0x7478, 0xc3a9, 0x99f0, 0xc951, 0xf037, 0x4ac8, 0x1, 0x1);
        gbc.writeMem(0x7478, { 0xcf });
        gbc.writeMem(0xc3a7, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x99, gbc.a());
        EXPECT(0xc9, gbc.b());
        EXPECT(0x51, gbc.c());
        EXPECT(0xf0, gbc.d());
        EXPECT(0x37, gbc.e());
        EXPECT(0x4a, gbc.h());
        EXPECT(0xc8, gbc.l());
        EXPECT(0xc3a7, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x79, gbc.readMem(0xc3a7));
        EXPECT(0x74, gbc.readMem(0xc3a8));
        // CF 03B1
        gbc.setState(0xc2d9, 0xfcdc, 0xfba0, 0x1bf9, 0x6189, 0x83dc, 0x1, 0x1);
        gbc.writeMem(0xc2d9, { 0xcf });
        gbc.writeMem(0xfcda, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xfb, gbc.a());
        EXPECT(0x1b, gbc.b());
        EXPECT(0xf9, gbc.c());
        EXPECT(0x61, gbc.d());
        EXPECT(0x89, gbc.e());
        EXPECT(0x83, gbc.h());
        EXPECT(0xdc, gbc.l());
        EXPECT(0xfcda, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0xc2d9));
        EXPECT(0xda, gbc.readMem(0xfcda));
        EXPECT(0xc2, gbc.readMem(0xfcdb));
        // CF 03B2
        gbc.setState(0xd004, 0xfba2, 0x6540, 0x5f94, 0x3011, 0x4653, 0x0, 0x0);
        gbc.writeMem(0xd004, { 0xcf });
        gbc.writeMem(0xfba0, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x65, gbc.a());
        EXPECT(0x5f, gbc.b());
        EXPECT(0x94, gbc.c());
        EXPECT(0x30, gbc.d());
        EXPECT(0x11, gbc.e());
        EXPECT(0x46, gbc.h());
        EXPECT(0x53, gbc.l());
        EXPECT(0xfba0, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0xd004));
        EXPECT(0x5, gbc.readMem(0xfba0));
        EXPECT(0xd0, gbc.readMem(0xfba1));
        // CF 03B3
        gbc.setState(0x5df1, 0x992a, 0x67f0, 0x931c, 0x332, 0xddf8, 0x1, 0x0);
        gbc.writeMem(0x5df1, { 0xcf });
        gbc.writeMem(0x9928, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x67, gbc.a());
        EXPECT(0x93, gbc.b());
        EXPECT(0x1c, gbc.c());
        EXPECT(0x3, gbc.d());
        EXPECT(0x32, gbc.e());
        EXPECT(0xdd, gbc.h());
        EXPECT(0xf8, gbc.l());
        EXPECT(0x9928, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xf2, gbc.readMem(0x9928));
        EXPECT(0x5d, gbc.readMem(0x9929));
        // CF 03B5
        gbc.setState(0x4cb1, 0xbcfd, 0x8b20, 0xfde, 0x9efa, 0xb1d0, 0x0, 0x1);
        gbc.writeMem(0x4cb1, { 0xcf });
        gbc.writeMem(0xbcfb, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x8b, gbc.a());
        EXPECT(0xf, gbc.b());
        EXPECT(0xde, gbc.c());
        EXPECT(0x9e, gbc.d());
        EXPECT(0xfa, gbc.e());
        EXPECT(0xb1, gbc.h());
        EXPECT(0xd0, gbc.l());
        EXPECT(0xbcfb, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xb2, gbc.readMem(0xbcfb));
        EXPECT(0x4c, gbc.readMem(0xbcfc));
        // CF 03B9
        gbc.setState(0x692a, 0xc71b, 0x470, 0xb9d6, 0xaa10, 0xec3, 0x1, 0x1);
        gbc.writeMem(0x692a, { 0xcf });
        gbc.writeMem(0xc719, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x4, gbc.a());
        EXPECT(0xb9, gbc.b());
        EXPECT(0xd6, gbc.c());
        EXPECT(0xaa, gbc.d());
        EXPECT(0x10, gbc.e());
        EXPECT(0xe, gbc.h());
        EXPECT(0xc3, gbc.l());
        EXPECT(0xc719, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x2b, gbc.readMem(0xc719));
        EXPECT(0x69, gbc.readMem(0xc71a));
        // CF 03C1
        gbc.setState(0x642a, 0xdd62, 0x1d70, 0xaa94, 0xe7c4, 0x9661, 0x0, 0x0);
        gbc.writeMem(0x642a, { 0xcf });
        gbc.writeMem(0xdd60, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x1d, gbc.a());
        EXPECT(0xaa, gbc.b());
        EXPECT(0x94, gbc.c());
        EXPECT(0xe7, gbc.d());
        EXPECT(0xc4, gbc.e());
        EXPECT(0x96, gbc.h());
        EXPECT(0x61, gbc.l());
        EXPECT(0xdd60, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x2b, gbc.readMem(0xdd60));
        EXPECT(0x64, gbc.readMem(0xdd61));
        // CF 03C5
        gbc.setState(0xba66, 0xf14f, 0xd840, 0x7d32, 0x83f1, 0x8d2f, 0x1, 0x1);
        gbc.writeMem(0xba66, { 0xcf });
        gbc.writeMem(0xf14d, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xd8, gbc.a());
        EXPECT(0x7d, gbc.b());
        EXPECT(0x32, gbc.c());
        EXPECT(0x83, gbc.d());
        EXPECT(0xf1, gbc.e());
        EXPECT(0x8d, gbc.h());
        EXPECT(0x2f, gbc.l());
        EXPECT(0xf14d, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0xba66));
        EXPECT(0x67, gbc.readMem(0xf14d));
        EXPECT(0xba, gbc.readMem(0xf14e));
        // CF 03C6
        gbc.setState(0x1ed4, 0xdd85, 0x1750, 0xff0e, 0x579e, 0x5dfa, 0x1, 0x0);
        gbc.writeMem(0x1ed4, { 0xcf });
        gbc.writeMem(0xdd83, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x17, gbc.a());
        EXPECT(0xff, gbc.b());
        EXPECT(0xe, gbc.c());
        EXPECT(0x57, gbc.d());
        EXPECT(0x9e, gbc.e());
        EXPECT(0x5d, gbc.h());
        EXPECT(0xfa, gbc.l());
        EXPECT(0xdd83, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xd5, gbc.readMem(0xdd83));
        EXPECT(0x1e, gbc.readMem(0xdd84));
        // CF 03C8
        gbc.setState(0xac0b, 0xdcad, 0xc40, 0x368a, 0x1ba, 0xdd78, 0x0, 0x0);
        gbc.writeMem(0xac0b, { 0xcf });
        gbc.writeMem(0xdcab, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xc, gbc.a());
        EXPECT(0x36, gbc.b());
        EXPECT(0x8a, gbc.c());
        EXPECT(0x1, gbc.d());
        EXPECT(0xba, gbc.e());
        EXPECT(0xdd, gbc.h());
        EXPECT(0x78, gbc.l());
        EXPECT(0xdcab, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0xac0b));
        EXPECT(0xc, gbc.readMem(0xdcab));
        EXPECT(0xac, gbc.readMem(0xdcac));
        // CF 03C9
        gbc.setState(0xaf3f, 0xd323, 0x8cc0, 0x30ee, 0xdfab, 0xea7c, 0x1, 0x1);
        gbc.writeMem(0xaf3f, { 0xcf });
        gbc.writeMem(0xd321, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x8c, gbc.a());
        EXPECT(0x30, gbc.b());
        EXPECT(0xee, gbc.c());
        EXPECT(0xdf, gbc.d());
        EXPECT(0xab, gbc.e());
        EXPECT(0xea, gbc.h());
        EXPECT(0x7c, gbc.l());
        EXPECT(0xd321, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0xaf3f));
        EXPECT(0x40, gbc.readMem(0xd321));
        EXPECT(0xaf, gbc.readMem(0xd322));
        // CF 03CA
        gbc.setState(0xae19, 0xa5f2, 0xb930, 0x693, 0xd22a, 0xd875, 0x1, 0x1);
        gbc.writeMem(0xa5f0, { 0x0, 0x0 });
        gbc.writeMem(0xae19, { 0xcf });
        gbc.step();
        EXPECT(0xb9, gbc.a());
        EXPECT(0x6, gbc.b());
        EXPECT(0x93, gbc.c());
        EXPECT(0xd2, gbc.d());
        EXPECT(0x2a, gbc.e());
        EXPECT(0xd8, gbc.h());
        EXPECT(0x75, gbc.l());
        EXPECT(0xa5f0, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x1a, gbc.readMem(0xa5f0));
        EXPECT(0xae, gbc.readMem(0xa5f1));
        EXPECT(0xcf, gbc.readMem(0xae19));
        // CF 03CF
        gbc.setState(0x402, 0xac7a, 0x5ca0, 0x6834, 0x5593, 0xd4ca, 0x0, 0x0);
        gbc.writeMem(0x402, { 0xcf });
        gbc.writeMem(0xac78, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x5c, gbc.a());
        EXPECT(0x68, gbc.b());
        EXPECT(0x34, gbc.c());
        EXPECT(0x55, gbc.d());
        EXPECT(0x93, gbc.e());
        EXPECT(0xd4, gbc.h());
        EXPECT(0xca, gbc.l());
        EXPECT(0xac78, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x3, gbc.readMem(0xac78));
        EXPECT(0x4, gbc.readMem(0xac79));
        // CF 03D6
        gbc.setState(0x3eb2, 0xbd85, 0x6ff0, 0x1b0, 0x75b, 0xdd02, 0x1, 0x1);
        gbc.writeMem(0x3eb2, { 0xcf });
        gbc.writeMem(0xbd83, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x6f, gbc.a());
        EXPECT(0x1, gbc.b());
        EXPECT(0xb0, gbc.c());
        EXPECT(0x7, gbc.d());
        EXPECT(0x5b, gbc.e());
        EXPECT(0xdd, gbc.h());
        EXPECT(0x2, gbc.l());
        EXPECT(0xbd83, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xb3, gbc.readMem(0xbd83));
        EXPECT(0x3e, gbc.readMem(0xbd84));
        // CF 03D9
        gbc.setState(0xbaf6, 0xf28b, 0x5540, 0x3741, 0x2e0c, 0xd949, 0x0, 0x1);
        gbc.writeMem(0xbaf6, { 0xcf });
        gbc.writeMem(0xf289, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x55, gbc.a());
        EXPECT(0x37, gbc.b());
        EXPECT(0x41, gbc.c());
        EXPECT(0x2e, gbc.d());
        EXPECT(0xc, gbc.e());
        EXPECT(0xd9, gbc.h());
        EXPECT(0x49, gbc.l());
        EXPECT(0xf289, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0xbaf6));
        EXPECT(0xf7, gbc.readMem(0xf289));
        EXPECT(0xba, gbc.readMem(0xf28a));
        // CF 03DB
        gbc.setState(0xcea1, 0xa808, 0x35b0, 0x4ced, 0x9875, 0xcff8, 0x0, 0x0);
        gbc.writeMem(0xa806, { 0x0, 0x0 });
        gbc.writeMem(0xcea1, { 0xcf });
        gbc.step();
        EXPECT(0x35, gbc.a());
        EXPECT(0x4c, gbc.b());
        EXPECT(0xed, gbc.c());
        EXPECT(0x98, gbc.d());
        EXPECT(0x75, gbc.e());
        EXPECT(0xcf, gbc.h());
        EXPECT(0xf8, gbc.l());
        EXPECT(0xa806, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xa2, gbc.readMem(0xa806));
        EXPECT(0xce, gbc.readMem(0xa807));
        EXPECT(0xcf, gbc.readMem(0xcea1));
        // CF 03DC
        gbc.setState(0x3d2a, 0x99e8, 0x56d0, 0xce33, 0xa52d, 0x2be7, 0x1, 0x0);
        gbc.writeMem(0x3d2a, { 0xcf });
        gbc.writeMem(0x99e6, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x56, gbc.a());
        EXPECT(0xce, gbc.b());
        EXPECT(0x33, gbc.c());
        EXPECT(0xa5, gbc.d());
        EXPECT(0x2d, gbc.e());
        EXPECT(0x2b, gbc.h());
        EXPECT(0xe7, gbc.l());
        EXPECT(0x99e6, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x2b, gbc.readMem(0x99e6));
        EXPECT(0x3d, gbc.readMem(0x99e7));
        // CF 03DE
        gbc.setState(0x65d9, 0x93b8, 0x5020, 0xaf2, 0xfb58, 0x2b07, 0x0, 0x1);
        gbc.writeMem(0x65d9, { 0xcf });
        gbc.writeMem(0x93b6, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x50, gbc.a());
        EXPECT(0xa, gbc.b());
        EXPECT(0xf2, gbc.c());
        EXPECT(0xfb, gbc.d());
        EXPECT(0x58, gbc.e());
        EXPECT(0x2b, gbc.h());
        EXPECT(0x7, gbc.l());
        EXPECT(0x93b6, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xda, gbc.readMem(0x93b6));
        EXPECT(0x65, gbc.readMem(0x93b7));
        // CF 03E2
        gbc.setState(0x7bc3, 0xa4d0, 0x8ea0, 0x6a2b, 0x5e8d, 0x2d3b, 0x0, 0x0);
        gbc.writeMem(0x7bc3, { 0xcf });
        gbc.writeMem(0xa4ce, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x8e, gbc.a());
        EXPECT(0x6a, gbc.b());
        EXPECT(0x2b, gbc.c());
        EXPECT(0x5e, gbc.d());
        EXPECT(0x8d, gbc.e());
        EXPECT(0x2d, gbc.h());
        EXPECT(0x3b, gbc.l());
        EXPECT(0xa4ce, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xc4, gbc.readMem(0xa4ce));
        EXPECT(0x7b, gbc.readMem(0xa4cf));
        // CF 03E4
        gbc.setState(0x988, 0xb1f1, 0x3d30, 0x670b, 0x7f86, 0x88fe, 0x0, 0x1);
        gbc.writeMem(0x988, { 0xcf });
        gbc.writeMem(0xb1ef, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x3d, gbc.a());
        EXPECT(0x67, gbc.b());
        EXPECT(0xb, gbc.c());
        EXPECT(0x7f, gbc.d());
        EXPECT(0x86, gbc.e());
        EXPECT(0x88, gbc.h());
        EXPECT(0xfe, gbc.l());
        EXPECT(0xb1ef, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x89, gbc.readMem(0xb1ef));
        EXPECT(0x9, gbc.readMem(0xb1f0));
        // CF 03E5
        gbc.setState(0xe105, 0xb637, 0xfc90, 0xe195, 0xa1c9, 0x12c4, 0x1, 0x1);
        gbc.writeMem(0xb635, { 0x0, 0x0 });
        gbc.writeMem(0xe105, { 0xcf });
        gbc.step();
        EXPECT(0xfc, gbc.a());
        EXPECT(0xe1, gbc.b());
        EXPECT(0x95, gbc.c());
        EXPECT(0xa1, gbc.d());
        EXPECT(0xc9, gbc.e());
        EXPECT(0x12, gbc.h());
        EXPECT(0xc4, gbc.l());
        EXPECT(0xb635, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x6, gbc.readMem(0xb635));
        EXPECT(0xe1, gbc.readMem(0xb636));
        EXPECT(0xcf, gbc.readMem(0xe105));
        // CF 03E7
        gbc.setState(0x81aa, 0x92f8, 0xaa0, 0xecda, 0xbcb3, 0xe478, 0x0, 0x1);
        gbc.writeMem(0x81aa, { 0xcf });
        gbc.writeMem(0x92f6, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xa, gbc.a());
        EXPECT(0xec, gbc.b());
        EXPECT(0xda, gbc.c());
        EXPECT(0xbc, gbc.d());
        EXPECT(0xb3, gbc.e());
        EXPECT(0xe4, gbc.h());
        EXPECT(0x78, gbc.l());
        EXPECT(0x92f6, gbc.sp());
        EXPECT(0x8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0x81aa));
        EXPECT(0xab, gbc.readMem(0x92f6));
        EXPECT(0x81, gbc.readMem(0x92f7));
    }
