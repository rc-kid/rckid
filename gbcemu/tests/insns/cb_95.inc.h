    TEST(gbcemu, opcode_cb_95) {
        GBCEmu gbc{"", nullptr};
        uint8_t cartridge[0x8000];
        cartridge[0x149] = 0x02; // 8kb external RAM
        gbc.loadCartridge(new FlashGamePak(cartridge));
        // CB 95 0000
        gbc.setState(0x25ec, 0xc456, 0x6870, 0xca6e, 0x7b30, 0xc619, 0x0, 0x1);
        gbc.writeMem(0x25ec, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x68, gbc.a());
        EXPECT(0xca, gbc.b());
        EXPECT(0x6e, gbc.c());
        EXPECT(0x7b, gbc.d());
        EXPECT(0x30, gbc.e());
        EXPECT(0xc6, gbc.h());
        EXPECT(0x19, gbc.l());
        EXPECT(0xc456, gbc.sp());
        EXPECT(0x25ee, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 0001
        gbc.setState(0x3278, 0x40e1, 0xf590, 0x51b8, 0x7b62, 0xe0ff, 0x1, 0x1);
        gbc.writeMem(0x3278, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xf5, gbc.a());
        EXPECT(0x51, gbc.b());
        EXPECT(0xb8, gbc.c());
        EXPECT(0x7b, gbc.d());
        EXPECT(0x62, gbc.e());
        EXPECT(0xe0, gbc.h());
        EXPECT(0xfb, gbc.l());
        EXPECT(0x40e1, gbc.sp());
        EXPECT(0x327a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 0002
        gbc.setState(0xe35f, 0xbe8b, 0xe470, 0x59cc, 0xcfac, 0x4b98, 0x0, 0x0);
        gbc.writeMem(0xe35f, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xe4, gbc.a());
        EXPECT(0x59, gbc.b());
        EXPECT(0xcc, gbc.c());
        EXPECT(0xcf, gbc.d());
        EXPECT(0xac, gbc.e());
        EXPECT(0x4b, gbc.h());
        EXPECT(0x98, gbc.l());
        EXPECT(0xbe8b, gbc.sp());
        EXPECT(0xe361, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe35f));
        EXPECT(0x95, gbc.readMem(0xe360));
        // CB 95 0004
        gbc.setState(0xaf3b, 0x1bb, 0x9580, 0x6eeb, 0x17d, 0x330f, 0x1, 0x1);
        gbc.writeMem(0xaf3b, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x95, gbc.a());
        EXPECT(0x6e, gbc.b());
        EXPECT(0xeb, gbc.c());
        EXPECT(0x1, gbc.d());
        EXPECT(0x7d, gbc.e());
        EXPECT(0x33, gbc.h());
        EXPECT(0xb, gbc.l());
        EXPECT(0x1bb, gbc.sp());
        EXPECT(0xaf3d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaf3b));
        EXPECT(0x95, gbc.readMem(0xaf3c));
        // CB 95 0005
        gbc.setState(0xca90, 0xec11, 0x7210, 0x7adb, 0xcbcb, 0xff6e, 0x1, 0x1);
        gbc.writeMem(0xca90, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x72, gbc.a());
        EXPECT(0x7a, gbc.b());
        EXPECT(0xdb, gbc.c());
        EXPECT(0xcb, gbc.d());
        EXPECT(0xcb, gbc.e());
        EXPECT(0xff, gbc.h());
        EXPECT(0x6a, gbc.l());
        EXPECT(0xec11, gbc.sp());
        EXPECT(0xca92, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xca90));
        EXPECT(0x95, gbc.readMem(0xca91));
        // CB 95 0006
        gbc.setState(0x6468, 0x681e, 0x71f0, 0x213b, 0x68e1, 0x886e, 0x1, 0x1);
        gbc.writeMem(0x6468, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x71, gbc.a());
        EXPECT(0x21, gbc.b());
        EXPECT(0x3b, gbc.c());
        EXPECT(0x68, gbc.d());
        EXPECT(0xe1, gbc.e());
        EXPECT(0x88, gbc.h());
        EXPECT(0x6a, gbc.l());
        EXPECT(0x681e, gbc.sp());
        EXPECT(0x646a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 0007
        gbc.setState(0xc435, 0x18be, 0x2f50, 0x48d9, 0xced4, 0xf22c, 0x0, 0x0);
        gbc.writeMem(0xc435, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x2f, gbc.a());
        EXPECT(0x48, gbc.b());
        EXPECT(0xd9, gbc.c());
        EXPECT(0xce, gbc.d());
        EXPECT(0xd4, gbc.e());
        EXPECT(0xf2, gbc.h());
        EXPECT(0x28, gbc.l());
        EXPECT(0x18be, gbc.sp());
        EXPECT(0xc437, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc435));
        EXPECT(0x95, gbc.readMem(0xc436));
        // CB 95 0008
        gbc.setState(0x4829, 0x347, 0xd620, 0xb056, 0xe2d9, 0x5846, 0x1, 0x1);
        gbc.writeMem(0x4829, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xd6, gbc.a());
        EXPECT(0xb0, gbc.b());
        EXPECT(0x56, gbc.c());
        EXPECT(0xe2, gbc.d());
        EXPECT(0xd9, gbc.e());
        EXPECT(0x58, gbc.h());
        EXPECT(0x42, gbc.l());
        EXPECT(0x347, gbc.sp());
        EXPECT(0x482b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 0009
        gbc.setState(0xcc35, 0xff23, 0x54b0, 0xf93c, 0xb90, 0xb45b, 0x0, 0x1);
        gbc.writeMem(0xcc35, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x54, gbc.a());
        EXPECT(0xf9, gbc.b());
        EXPECT(0x3c, gbc.c());
        EXPECT(0xb, gbc.d());
        EXPECT(0x90, gbc.e());
        EXPECT(0xb4, gbc.h());
        EXPECT(0x5b, gbc.l());
        EXPECT(0xff23, gbc.sp());
        EXPECT(0xcc37, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcc35));
        EXPECT(0x95, gbc.readMem(0xcc36));
        // CB 95 000A
        gbc.setState(0x7bff, 0xea3c, 0xca20, 0xa499, 0x6d40, 0x3d2f, 0x0, 0x0);
        gbc.writeMem(0x7bff, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xca, gbc.a());
        EXPECT(0xa4, gbc.b());
        EXPECT(0x99, gbc.c());
        EXPECT(0x6d, gbc.d());
        EXPECT(0x40, gbc.e());
        EXPECT(0x3d, gbc.h());
        EXPECT(0x2b, gbc.l());
        EXPECT(0xea3c, gbc.sp());
        EXPECT(0x7c01, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 000B
        gbc.setState(0xc0f6, 0x8931, 0xac90, 0x79d9, 0x6345, 0x70b, 0x0, 0x0);
        gbc.writeMem(0xc0f6, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xac, gbc.a());
        EXPECT(0x79, gbc.b());
        EXPECT(0xd9, gbc.c());
        EXPECT(0x63, gbc.d());
        EXPECT(0x45, gbc.e());
        EXPECT(0x7, gbc.h());
        EXPECT(0xb, gbc.l());
        EXPECT(0x8931, gbc.sp());
        EXPECT(0xc0f8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc0f6));
        EXPECT(0x95, gbc.readMem(0xc0f7));
        // CB 95 000C
        gbc.setState(0xcc3f, 0x5d71, 0x5650, 0xdab9, 0xdea7, 0x8855, 0x1, 0x0);
        gbc.writeMem(0xcc3f, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x56, gbc.a());
        EXPECT(0xda, gbc.b());
        EXPECT(0xb9, gbc.c());
        EXPECT(0xde, gbc.d());
        EXPECT(0xa7, gbc.e());
        EXPECT(0x88, gbc.h());
        EXPECT(0x51, gbc.l());
        EXPECT(0x5d71, gbc.sp());
        EXPECT(0xcc41, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcc3f));
        EXPECT(0x95, gbc.readMem(0xcc40));
        // CB 95 000D
        gbc.setState(0x4a6f, 0x44e8, 0xd4e0, 0x6643, 0xffa5, 0x81f7, 0x0, 0x0);
        gbc.writeMem(0x4a6f, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xd4, gbc.a());
        EXPECT(0x66, gbc.b());
        EXPECT(0x43, gbc.c());
        EXPECT(0xff, gbc.d());
        EXPECT(0xa5, gbc.e());
        EXPECT(0x81, gbc.h());
        EXPECT(0xf3, gbc.l());
        EXPECT(0x44e8, gbc.sp());
        EXPECT(0x4a71, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 000E
        gbc.setState(0xdd04, 0xeab, 0x8420, 0x5437, 0x8eb3, 0xa2ad, 0x0, 0x1);
        gbc.writeMem(0xdd04, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x84, gbc.a());
        EXPECT(0x54, gbc.b());
        EXPECT(0x37, gbc.c());
        EXPECT(0x8e, gbc.d());
        EXPECT(0xb3, gbc.e());
        EXPECT(0xa2, gbc.h());
        EXPECT(0xa9, gbc.l());
        EXPECT(0xeab, gbc.sp());
        EXPECT(0xdd06, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdd04));
        EXPECT(0x95, gbc.readMem(0xdd05));
        // CB 95 000F
        gbc.setState(0xb7c3, 0x521d, 0xd650, 0x2bfc, 0x4e04, 0x6be7, 0x0, 0x0);
        gbc.writeMem(0xb7c3, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xd6, gbc.a());
        EXPECT(0x2b, gbc.b());
        EXPECT(0xfc, gbc.c());
        EXPECT(0x4e, gbc.d());
        EXPECT(0x4, gbc.e());
        EXPECT(0x6b, gbc.h());
        EXPECT(0xe3, gbc.l());
        EXPECT(0x521d, gbc.sp());
        EXPECT(0xb7c5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb7c3));
        EXPECT(0x95, gbc.readMem(0xb7c4));
        // CB 95 0010
        gbc.setState(0xbee7, 0x8580, 0xbb30, 0xe47f, 0x24a9, 0x3889, 0x0, 0x1);
        gbc.writeMem(0xbee7, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xbb, gbc.a());
        EXPECT(0xe4, gbc.b());
        EXPECT(0x7f, gbc.c());
        EXPECT(0x24, gbc.d());
        EXPECT(0xa9, gbc.e());
        EXPECT(0x38, gbc.h());
        EXPECT(0x89, gbc.l());
        EXPECT(0x8580, gbc.sp());
        EXPECT(0xbee9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbee7));
        EXPECT(0x95, gbc.readMem(0xbee8));
        // CB 95 0011
        gbc.setState(0xe66a, 0xa888, 0xe2e0, 0xa4a0, 0xbd77, 0xa6a9, 0x0, 0x0);
        gbc.writeMem(0xe66a, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xe2, gbc.a());
        EXPECT(0xa4, gbc.b());
        EXPECT(0xa0, gbc.c());
        EXPECT(0xbd, gbc.d());
        EXPECT(0x77, gbc.e());
        EXPECT(0xa6, gbc.h());
        EXPECT(0xa9, gbc.l());
        EXPECT(0xa888, gbc.sp());
        EXPECT(0xe66c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe66a));
        EXPECT(0x95, gbc.readMem(0xe66b));
        // CB 95 0012
        gbc.setState(0x4aa8, 0xd80d, 0x8ee0, 0x6ad5, 0x4790, 0x3f03, 0x0, 0x1);
        gbc.writeMem(0x4aa8, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x8e, gbc.a());
        EXPECT(0x6a, gbc.b());
        EXPECT(0xd5, gbc.c());
        EXPECT(0x47, gbc.d());
        EXPECT(0x90, gbc.e());
        EXPECT(0x3f, gbc.h());
        EXPECT(0x3, gbc.l());
        EXPECT(0xd80d, gbc.sp());
        EXPECT(0x4aaa, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 0013
        gbc.setState(0xb276, 0xa57a, 0x8850, 0xf664, 0x1a94, 0x4ad2, 0x1, 0x0);
        gbc.writeMem(0xb276, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x88, gbc.a());
        EXPECT(0xf6, gbc.b());
        EXPECT(0x64, gbc.c());
        EXPECT(0x1a, gbc.d());
        EXPECT(0x94, gbc.e());
        EXPECT(0x4a, gbc.h());
        EXPECT(0xd2, gbc.l());
        EXPECT(0xa57a, gbc.sp());
        EXPECT(0xb278, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb276));
        EXPECT(0x95, gbc.readMem(0xb277));
        // CB 95 0014
        gbc.setState(0xad3c, 0x2625, 0xf7b0, 0x3530, 0xe6d2, 0x1697, 0x0, 0x1);
        gbc.writeMem(0xad3c, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xf7, gbc.a());
        EXPECT(0x35, gbc.b());
        EXPECT(0x30, gbc.c());
        EXPECT(0xe6, gbc.d());
        EXPECT(0xd2, gbc.e());
        EXPECT(0x16, gbc.h());
        EXPECT(0x93, gbc.l());
        EXPECT(0x2625, gbc.sp());
        EXPECT(0xad3e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xad3c));
        EXPECT(0x95, gbc.readMem(0xad3d));
        // CB 95 0015
        gbc.setState(0xeb69, 0xe6b8, 0xfcc0, 0x4132, 0x148c, 0x3894, 0x1, 0x1);
        gbc.writeMem(0xeb69, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xfc, gbc.a());
        EXPECT(0x41, gbc.b());
        EXPECT(0x32, gbc.c());
        EXPECT(0x14, gbc.d());
        EXPECT(0x8c, gbc.e());
        EXPECT(0x38, gbc.h());
        EXPECT(0x90, gbc.l());
        EXPECT(0xe6b8, gbc.sp());
        EXPECT(0xeb6b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xeb69));
        EXPECT(0x95, gbc.readMem(0xeb6a));
        // CB 95 0016
        gbc.setState(0xdb43, 0xdaed, 0x8040, 0x1e51, 0xfac6, 0xd536, 0x1, 0x0);
        gbc.writeMem(0xdb43, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x80, gbc.a());
        EXPECT(0x1e, gbc.b());
        EXPECT(0x51, gbc.c());
        EXPECT(0xfa, gbc.d());
        EXPECT(0xc6, gbc.e());
        EXPECT(0xd5, gbc.h());
        EXPECT(0x32, gbc.l());
        EXPECT(0xdaed, gbc.sp());
        EXPECT(0xdb45, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdb43));
        EXPECT(0x95, gbc.readMem(0xdb44));
        // CB 95 0017
        gbc.setState(0x920c, 0xb62a, 0x8420, 0x51db, 0x6b56, 0x1869, 0x1, 0x0);
        gbc.writeMem(0x920c, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x84, gbc.a());
        EXPECT(0x51, gbc.b());
        EXPECT(0xdb, gbc.c());
        EXPECT(0x6b, gbc.d());
        EXPECT(0x56, gbc.e());
        EXPECT(0x18, gbc.h());
        EXPECT(0x69, gbc.l());
        EXPECT(0xb62a, gbc.sp());
        EXPECT(0x920e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x920c));
        EXPECT(0x95, gbc.readMem(0x920d));
        // CB 95 0018
        gbc.setState(0x5810, 0x1579, 0xf490, 0xd04e, 0xa969, 0x6d19, 0x0, 0x0);
        gbc.writeMem(0x5810, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xf4, gbc.a());
        EXPECT(0xd0, gbc.b());
        EXPECT(0x4e, gbc.c());
        EXPECT(0xa9, gbc.d());
        EXPECT(0x69, gbc.e());
        EXPECT(0x6d, gbc.h());
        EXPECT(0x19, gbc.l());
        EXPECT(0x1579, gbc.sp());
        EXPECT(0x5812, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 0019
        gbc.setState(0x7f53, 0x553b, 0x9c60, 0x53de, 0x522b, 0x64c7, 0x1, 0x1);
        gbc.writeMem(0x7f53, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x9c, gbc.a());
        EXPECT(0x53, gbc.b());
        EXPECT(0xde, gbc.c());
        EXPECT(0x52, gbc.d());
        EXPECT(0x2b, gbc.e());
        EXPECT(0x64, gbc.h());
        EXPECT(0xc3, gbc.l());
        EXPECT(0x553b, gbc.sp());
        EXPECT(0x7f55, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 001A
        gbc.setState(0x4ec4, 0xa73b, 0x7690, 0x88e3, 0x89c7, 0xbe2c, 0x1, 0x1);
        gbc.writeMem(0x4ec4, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x76, gbc.a());
        EXPECT(0x88, gbc.b());
        EXPECT(0xe3, gbc.c());
        EXPECT(0x89, gbc.d());
        EXPECT(0xc7, gbc.e());
        EXPECT(0xbe, gbc.h());
        EXPECT(0x28, gbc.l());
        EXPECT(0xa73b, gbc.sp());
        EXPECT(0x4ec6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 001B
        gbc.setState(0x6d28, 0x8ea, 0xc90, 0x7a3e, 0xf4b5, 0x2898, 0x1, 0x0);
        gbc.writeMem(0x6d28, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xc, gbc.a());
        EXPECT(0x7a, gbc.b());
        EXPECT(0x3e, gbc.c());
        EXPECT(0xf4, gbc.d());
        EXPECT(0xb5, gbc.e());
        EXPECT(0x28, gbc.h());
        EXPECT(0x98, gbc.l());
        EXPECT(0x8ea, gbc.sp());
        EXPECT(0x6d2a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 001D
        gbc.setState(0x20a0, 0xac1c, 0xa190, 0xaa68, 0x1801, 0xa905, 0x1, 0x0);
        gbc.writeMem(0x20a0, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xa1, gbc.a());
        EXPECT(0xaa, gbc.b());
        EXPECT(0x68, gbc.c());
        EXPECT(0x18, gbc.d());
        EXPECT(0x1, gbc.e());
        EXPECT(0xa9, gbc.h());
        EXPECT(0x1, gbc.l());
        EXPECT(0xac1c, gbc.sp());
        EXPECT(0x20a2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 001E
        gbc.setState(0x2539, 0x4718, 0x9e70, 0xd7a2, 0x8b30, 0xece, 0x0, 0x0);
        gbc.writeMem(0x2539, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x9e, gbc.a());
        EXPECT(0xd7, gbc.b());
        EXPECT(0xa2, gbc.c());
        EXPECT(0x8b, gbc.d());
        EXPECT(0x30, gbc.e());
        EXPECT(0xe, gbc.h());
        EXPECT(0xca, gbc.l());
        EXPECT(0x4718, gbc.sp());
        EXPECT(0x253b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 001F
        gbc.setState(0x340a, 0xeef6, 0xec30, 0xf64f, 0x97f8, 0xdae5, 0x0, 0x1);
        gbc.writeMem(0x340a, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xec, gbc.a());
        EXPECT(0xf6, gbc.b());
        EXPECT(0x4f, gbc.c());
        EXPECT(0x97, gbc.d());
        EXPECT(0xf8, gbc.e());
        EXPECT(0xda, gbc.h());
        EXPECT(0xe1, gbc.l());
        EXPECT(0xeef6, gbc.sp());
        EXPECT(0x340c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 0020
        gbc.setState(0x5503, 0xc109, 0xf880, 0x7bd8, 0xcf01, 0xcbd2, 0x0, 0x1);
        gbc.writeMem(0x5503, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xf8, gbc.a());
        EXPECT(0x7b, gbc.b());
        EXPECT(0xd8, gbc.c());
        EXPECT(0xcf, gbc.d());
        EXPECT(0x1, gbc.e());
        EXPECT(0xcb, gbc.h());
        EXPECT(0xd2, gbc.l());
        EXPECT(0xc109, gbc.sp());
        EXPECT(0x5505, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 0021
        gbc.setState(0x4c68, 0x1430, 0x4d0, 0xc579, 0x8763, 0xd8e8, 0x0, 0x0);
        gbc.writeMem(0x4c68, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x4, gbc.a());
        EXPECT(0xc5, gbc.b());
        EXPECT(0x79, gbc.c());
        EXPECT(0x87, gbc.d());
        EXPECT(0x63, gbc.e());
        EXPECT(0xd8, gbc.h());
        EXPECT(0xe8, gbc.l());
        EXPECT(0x1430, gbc.sp());
        EXPECT(0x4c6a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 0022
        gbc.setState(0xce17, 0xeaf9, 0xe330, 0x45e7, 0x708a, 0xceb4, 0x0, 0x1);
        gbc.writeMem(0xce17, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xe3, gbc.a());
        EXPECT(0x45, gbc.b());
        EXPECT(0xe7, gbc.c());
        EXPECT(0x70, gbc.d());
        EXPECT(0x8a, gbc.e());
        EXPECT(0xce, gbc.h());
        EXPECT(0xb0, gbc.l());
        EXPECT(0xeaf9, gbc.sp());
        EXPECT(0xce19, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xce17));
        EXPECT(0x95, gbc.readMem(0xce18));
        // CB 95 0023
        gbc.setState(0x206d, 0x5c8c, 0x92d0, 0xd986, 0xa69e, 0x3572, 0x0, 0x0);
        gbc.writeMem(0x206d, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x92, gbc.a());
        EXPECT(0xd9, gbc.b());
        EXPECT(0x86, gbc.c());
        EXPECT(0xa6, gbc.d());
        EXPECT(0x9e, gbc.e());
        EXPECT(0x35, gbc.h());
        EXPECT(0x72, gbc.l());
        EXPECT(0x5c8c, gbc.sp());
        EXPECT(0x206f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 0024
        gbc.setState(0x7486, 0x2edd, 0xbfa0, 0x80bb, 0x505b, 0xe9eb, 0x0, 0x1);
        gbc.writeMem(0x7486, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xbf, gbc.a());
        EXPECT(0x80, gbc.b());
        EXPECT(0xbb, gbc.c());
        EXPECT(0x50, gbc.d());
        EXPECT(0x5b, gbc.e());
        EXPECT(0xe9, gbc.h());
        EXPECT(0xeb, gbc.l());
        EXPECT(0x2edd, gbc.sp());
        EXPECT(0x7488, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 0025
        gbc.setState(0x23c7, 0x52e, 0xccd0, 0xa1f7, 0x6ca0, 0xd05c, 0x0, 0x0);
        gbc.writeMem(0x23c7, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xcc, gbc.a());
        EXPECT(0xa1, gbc.b());
        EXPECT(0xf7, gbc.c());
        EXPECT(0x6c, gbc.d());
        EXPECT(0xa0, gbc.e());
        EXPECT(0xd0, gbc.h());
        EXPECT(0x58, gbc.l());
        EXPECT(0x52e, gbc.sp());
        EXPECT(0x23c9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 0026
        gbc.setState(0xce71, 0x1c5b, 0xad40, 0xbedf, 0xeceb, 0x347a, 0x0, 0x1);
        gbc.writeMem(0xce71, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xad, gbc.a());
        EXPECT(0xbe, gbc.b());
        EXPECT(0xdf, gbc.c());
        EXPECT(0xec, gbc.d());
        EXPECT(0xeb, gbc.e());
        EXPECT(0x34, gbc.h());
        EXPECT(0x7a, gbc.l());
        EXPECT(0x1c5b, gbc.sp());
        EXPECT(0xce73, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xce71));
        EXPECT(0x95, gbc.readMem(0xce72));
        // CB 95 0027
        gbc.setState(0xcd00, 0x8625, 0x0, 0x887c, 0xf1a6, 0x1c1a, 0x1, 0x0);
        gbc.writeMem(0xcd00, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x88, gbc.b());
        EXPECT(0x7c, gbc.c());
        EXPECT(0xf1, gbc.d());
        EXPECT(0xa6, gbc.e());
        EXPECT(0x1c, gbc.h());
        EXPECT(0x1a, gbc.l());
        EXPECT(0x8625, gbc.sp());
        EXPECT(0xcd02, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcd00));
        EXPECT(0x95, gbc.readMem(0xcd01));
        // CB 95 0028
        gbc.setState(0xae32, 0x11c1, 0x74f0, 0xde01, 0xfcb4, 0xe2e8, 0x1, 0x1);
        gbc.writeMem(0xae32, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x74, gbc.a());
        EXPECT(0xde, gbc.b());
        EXPECT(0x1, gbc.c());
        EXPECT(0xfc, gbc.d());
        EXPECT(0xb4, gbc.e());
        EXPECT(0xe2, gbc.h());
        EXPECT(0xe8, gbc.l());
        EXPECT(0x11c1, gbc.sp());
        EXPECT(0xae34, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xae32));
        EXPECT(0x95, gbc.readMem(0xae33));
        // CB 95 0029
        gbc.setState(0x6691, 0x48c8, 0x94a0, 0x6ccb, 0x7ec3, 0x8c45, 0x0, 0x0);
        gbc.writeMem(0x6691, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x94, gbc.a());
        EXPECT(0x6c, gbc.b());
        EXPECT(0xcb, gbc.c());
        EXPECT(0x7e, gbc.d());
        EXPECT(0xc3, gbc.e());
        EXPECT(0x8c, gbc.h());
        EXPECT(0x41, gbc.l());
        EXPECT(0x48c8, gbc.sp());
        EXPECT(0x6693, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 002A
        gbc.setState(0xb67a, 0x51b2, 0xf3f0, 0xcfe3, 0xe031, 0x5395, 0x1, 0x0);
        gbc.writeMem(0xb67a, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xf3, gbc.a());
        EXPECT(0xcf, gbc.b());
        EXPECT(0xe3, gbc.c());
        EXPECT(0xe0, gbc.d());
        EXPECT(0x31, gbc.e());
        EXPECT(0x53, gbc.h());
        EXPECT(0x91, gbc.l());
        EXPECT(0x51b2, gbc.sp());
        EXPECT(0xb67c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb67a));
        EXPECT(0x95, gbc.readMem(0xb67b));
        // CB 95 002B
        gbc.setState(0x7b0, 0x3e37, 0x5750, 0xb2a3, 0x72ef, 0x98ba, 0x0, 0x0);
        gbc.writeMem(0x7b0, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x57, gbc.a());
        EXPECT(0xb2, gbc.b());
        EXPECT(0xa3, gbc.c());
        EXPECT(0x72, gbc.d());
        EXPECT(0xef, gbc.e());
        EXPECT(0x98, gbc.h());
        EXPECT(0xba, gbc.l());
        EXPECT(0x3e37, gbc.sp());
        EXPECT(0x7b2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 002C
        gbc.setState(0x4769, 0x88fd, 0x1800, 0x2328, 0x485b, 0xb621, 0x0, 0x1);
        gbc.writeMem(0x4769, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x18, gbc.a());
        EXPECT(0x23, gbc.b());
        EXPECT(0x28, gbc.c());
        EXPECT(0x48, gbc.d());
        EXPECT(0x5b, gbc.e());
        EXPECT(0xb6, gbc.h());
        EXPECT(0x21, gbc.l());
        EXPECT(0x88fd, gbc.sp());
        EXPECT(0x476b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 002D
        gbc.setState(0x90ab, 0xdc6c, 0x8330, 0x6dc, 0x2cd9, 0x7767, 0x1, 0x1);
        gbc.writeMem(0x90ab, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x83, gbc.a());
        EXPECT(0x6, gbc.b());
        EXPECT(0xdc, gbc.c());
        EXPECT(0x2c, gbc.d());
        EXPECT(0xd9, gbc.e());
        EXPECT(0x77, gbc.h());
        EXPECT(0x63, gbc.l());
        EXPECT(0xdc6c, gbc.sp());
        EXPECT(0x90ad, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x90ab));
        EXPECT(0x95, gbc.readMem(0x90ac));
        // CB 95 002E
        gbc.setState(0x298c, 0x359a, 0x2b60, 0x4366, 0x87b6, 0x943, 0x0, 0x1);
        gbc.writeMem(0x298c, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x2b, gbc.a());
        EXPECT(0x43, gbc.b());
        EXPECT(0x66, gbc.c());
        EXPECT(0x87, gbc.d());
        EXPECT(0xb6, gbc.e());
        EXPECT(0x9, gbc.h());
        EXPECT(0x43, gbc.l());
        EXPECT(0x359a, gbc.sp());
        EXPECT(0x298e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 002F
        gbc.setState(0x3e42, 0x5d0a, 0x5630, 0xffcd, 0x5db6, 0x6f5d, 0x0, 0x1);
        gbc.writeMem(0x3e42, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x56, gbc.a());
        EXPECT(0xff, gbc.b());
        EXPECT(0xcd, gbc.c());
        EXPECT(0x5d, gbc.d());
        EXPECT(0xb6, gbc.e());
        EXPECT(0x6f, gbc.h());
        EXPECT(0x59, gbc.l());
        EXPECT(0x5d0a, gbc.sp());
        EXPECT(0x3e44, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 0030
        gbc.setState(0x9421, 0x57, 0xe800, 0x3148, 0x1c8b, 0x83f5, 0x0, 0x1);
        gbc.writeMem(0x9421, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xe8, gbc.a());
        EXPECT(0x31, gbc.b());
        EXPECT(0x48, gbc.c());
        EXPECT(0x1c, gbc.d());
        EXPECT(0x8b, gbc.e());
        EXPECT(0x83, gbc.h());
        EXPECT(0xf1, gbc.l());
        EXPECT(0x57, gbc.sp());
        EXPECT(0x9423, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9421));
        EXPECT(0x95, gbc.readMem(0x9422));
        // CB 95 0031
        gbc.setState(0xe78c, 0x5a9a, 0x3290, 0x6740, 0x449f, 0x5fec, 0x1, 0x0);
        gbc.writeMem(0xe78c, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x32, gbc.a());
        EXPECT(0x67, gbc.b());
        EXPECT(0x40, gbc.c());
        EXPECT(0x44, gbc.d());
        EXPECT(0x9f, gbc.e());
        EXPECT(0x5f, gbc.h());
        EXPECT(0xe8, gbc.l());
        EXPECT(0x5a9a, gbc.sp());
        EXPECT(0xe78e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe78c));
        EXPECT(0x95, gbc.readMem(0xe78d));
        // CB 95 0032
        gbc.setState(0xda22, 0x63ab, 0xfec0, 0x725b, 0x87b3, 0xc34b, 0x0, 0x1);
        gbc.writeMem(0xda22, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xfe, gbc.a());
        EXPECT(0x72, gbc.b());
        EXPECT(0x5b, gbc.c());
        EXPECT(0x87, gbc.d());
        EXPECT(0xb3, gbc.e());
        EXPECT(0xc3, gbc.h());
        EXPECT(0x4b, gbc.l());
        EXPECT(0x63ab, gbc.sp());
        EXPECT(0xda24, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xda22));
        EXPECT(0x95, gbc.readMem(0xda23));
        // CB 95 0033
        gbc.setState(0x3c4, 0x3c96, 0xe2d0, 0xf2c6, 0xfc00, 0x8bb9, 0x1, 0x0);
        gbc.writeMem(0x3c4, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xe2, gbc.a());
        EXPECT(0xf2, gbc.b());
        EXPECT(0xc6, gbc.c());
        EXPECT(0xfc, gbc.d());
        EXPECT(0x0, gbc.e());
        EXPECT(0x8b, gbc.h());
        EXPECT(0xb9, gbc.l());
        EXPECT(0x3c96, gbc.sp());
        EXPECT(0x3c6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 0034
        gbc.setState(0x6667, 0x1ebf, 0x66d0, 0x6b0c, 0x50a5, 0x144e, 0x1, 0x1);
        gbc.writeMem(0x6667, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x66, gbc.a());
        EXPECT(0x6b, gbc.b());
        EXPECT(0xc, gbc.c());
        EXPECT(0x50, gbc.d());
        EXPECT(0xa5, gbc.e());
        EXPECT(0x14, gbc.h());
        EXPECT(0x4a, gbc.l());
        EXPECT(0x1ebf, gbc.sp());
        EXPECT(0x6669, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 0035
        gbc.setState(0xbe29, 0x298d, 0xd540, 0x3486, 0x5c39, 0xf7eb, 0x0, 0x1);
        gbc.writeMem(0xbe29, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xd5, gbc.a());
        EXPECT(0x34, gbc.b());
        EXPECT(0x86, gbc.c());
        EXPECT(0x5c, gbc.d());
        EXPECT(0x39, gbc.e());
        EXPECT(0xf7, gbc.h());
        EXPECT(0xeb, gbc.l());
        EXPECT(0x298d, gbc.sp());
        EXPECT(0xbe2b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbe29));
        EXPECT(0x95, gbc.readMem(0xbe2a));
        // CB 95 0036
        gbc.setState(0x2976, 0x92a8, 0x5640, 0x892a, 0x9326, 0x53d7, 0x0, 0x0);
        gbc.writeMem(0x2976, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x56, gbc.a());
        EXPECT(0x89, gbc.b());
        EXPECT(0x2a, gbc.c());
        EXPECT(0x93, gbc.d());
        EXPECT(0x26, gbc.e());
        EXPECT(0x53, gbc.h());
        EXPECT(0xd3, gbc.l());
        EXPECT(0x92a8, gbc.sp());
        EXPECT(0x2978, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 0037
        gbc.setState(0x6ee, 0xfc4c, 0xed0, 0xc665, 0x4d64, 0x510d, 0x0, 0x1);
        gbc.writeMem(0x6ee, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xe, gbc.a());
        EXPECT(0xc6, gbc.b());
        EXPECT(0x65, gbc.c());
        EXPECT(0x4d, gbc.d());
        EXPECT(0x64, gbc.e());
        EXPECT(0x51, gbc.h());
        EXPECT(0x9, gbc.l());
        EXPECT(0xfc4c, gbc.sp());
        EXPECT(0x6f0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 0038
        gbc.setState(0x8967, 0xb2ec, 0x66d0, 0x6ff0, 0x882e, 0xa5f, 0x0, 0x0);
        gbc.writeMem(0x8967, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x66, gbc.a());
        EXPECT(0x6f, gbc.b());
        EXPECT(0xf0, gbc.c());
        EXPECT(0x88, gbc.d());
        EXPECT(0x2e, gbc.e());
        EXPECT(0xa, gbc.h());
        EXPECT(0x5b, gbc.l());
        EXPECT(0xb2ec, gbc.sp());
        EXPECT(0x8969, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8967));
        EXPECT(0x95, gbc.readMem(0x8968));
        // CB 95 0039
        gbc.setState(0xc89e, 0xe896, 0x3ce0, 0x146a, 0xd11d, 0x3a39, 0x0, 0x0);
        gbc.writeMem(0xc89e, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x3c, gbc.a());
        EXPECT(0x14, gbc.b());
        EXPECT(0x6a, gbc.c());
        EXPECT(0xd1, gbc.d());
        EXPECT(0x1d, gbc.e());
        EXPECT(0x3a, gbc.h());
        EXPECT(0x39, gbc.l());
        EXPECT(0xe896, gbc.sp());
        EXPECT(0xc8a0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc89e));
        EXPECT(0x95, gbc.readMem(0xc89f));
        // CB 95 003A
        gbc.setState(0xa355, 0x64ed, 0x3450, 0x40ff, 0x9756, 0x74c, 0x1, 0x1);
        gbc.writeMem(0xa355, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x34, gbc.a());
        EXPECT(0x40, gbc.b());
        EXPECT(0xff, gbc.c());
        EXPECT(0x97, gbc.d());
        EXPECT(0x56, gbc.e());
        EXPECT(0x7, gbc.h());
        EXPECT(0x48, gbc.l());
        EXPECT(0x64ed, gbc.sp());
        EXPECT(0xa357, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa355));
        EXPECT(0x95, gbc.readMem(0xa356));
        // CB 95 003B
        gbc.setState(0x4284, 0x32f4, 0xdd70, 0xa04e, 0x892d, 0x3885, 0x0, 0x0);
        gbc.writeMem(0x4284, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xdd, gbc.a());
        EXPECT(0xa0, gbc.b());
        EXPECT(0x4e, gbc.c());
        EXPECT(0x89, gbc.d());
        EXPECT(0x2d, gbc.e());
        EXPECT(0x38, gbc.h());
        EXPECT(0x81, gbc.l());
        EXPECT(0x32f4, gbc.sp());
        EXPECT(0x4286, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 003C
        gbc.setState(0x6161, 0x74cd, 0x6f70, 0x4ca3, 0x6738, 0xe6bc, 0x0, 0x0);
        gbc.writeMem(0x6161, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x6f, gbc.a());
        EXPECT(0x4c, gbc.b());
        EXPECT(0xa3, gbc.c());
        EXPECT(0x67, gbc.d());
        EXPECT(0x38, gbc.e());
        EXPECT(0xe6, gbc.h());
        EXPECT(0xb8, gbc.l());
        EXPECT(0x74cd, gbc.sp());
        EXPECT(0x6163, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 003D
        gbc.setState(0xe7fc, 0x20c7, 0xe0b0, 0x1d56, 0x9116, 0xc8e3, 0x0, 0x1);
        gbc.writeMem(0xe7fc, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xe0, gbc.a());
        EXPECT(0x1d, gbc.b());
        EXPECT(0x56, gbc.c());
        EXPECT(0x91, gbc.d());
        EXPECT(0x16, gbc.e());
        EXPECT(0xc8, gbc.h());
        EXPECT(0xe3, gbc.l());
        EXPECT(0x20c7, gbc.sp());
        EXPECT(0xe7fe, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe7fc));
        EXPECT(0x95, gbc.readMem(0xe7fd));
        // CB 95 003E
        gbc.setState(0x7820, 0x50, 0x35f0, 0x72b2, 0xe9d2, 0x9f7, 0x0, 0x1);
        gbc.writeMem(0x7820, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x35, gbc.a());
        EXPECT(0x72, gbc.b());
        EXPECT(0xb2, gbc.c());
        EXPECT(0xe9, gbc.d());
        EXPECT(0xd2, gbc.e());
        EXPECT(0x9, gbc.h());
        EXPECT(0xf3, gbc.l());
        EXPECT(0x50, gbc.sp());
        EXPECT(0x7822, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 003F
        gbc.setState(0x9b1d, 0x5b6b, 0x41d0, 0xb80, 0xabca, 0xbffc, 0x0, 0x1);
        gbc.writeMem(0x9b1d, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x41, gbc.a());
        EXPECT(0xb, gbc.b());
        EXPECT(0x80, gbc.c());
        EXPECT(0xab, gbc.d());
        EXPECT(0xca, gbc.e());
        EXPECT(0xbf, gbc.h());
        EXPECT(0xf8, gbc.l());
        EXPECT(0x5b6b, gbc.sp());
        EXPECT(0x9b1f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9b1d));
        EXPECT(0x95, gbc.readMem(0x9b1e));
        // CB 95 0040
        gbc.setState(0xca53, 0x35dc, 0x7f0, 0xbcd3, 0xa642, 0xdab4, 0x0, 0x1);
        gbc.writeMem(0xca53, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x7, gbc.a());
        EXPECT(0xbc, gbc.b());
        EXPECT(0xd3, gbc.c());
        EXPECT(0xa6, gbc.d());
        EXPECT(0x42, gbc.e());
        EXPECT(0xda, gbc.h());
        EXPECT(0xb0, gbc.l());
        EXPECT(0x35dc, gbc.sp());
        EXPECT(0xca55, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xca53));
        EXPECT(0x95, gbc.readMem(0xca54));
        // CB 95 0041
        gbc.setState(0x77a9, 0xcde9, 0xd8c0, 0x60f7, 0x8a93, 0xd5bc, 0x1, 0x0);
        gbc.writeMem(0x77a9, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xd8, gbc.a());
        EXPECT(0x60, gbc.b());
        EXPECT(0xf7, gbc.c());
        EXPECT(0x8a, gbc.d());
        EXPECT(0x93, gbc.e());
        EXPECT(0xd5, gbc.h());
        EXPECT(0xb8, gbc.l());
        EXPECT(0xcde9, gbc.sp());
        EXPECT(0x77ab, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 0042
        gbc.setState(0x1a51, 0xa59a, 0xb7e0, 0x3d78, 0xad23, 0xdcc9, 0x1, 0x1);
        gbc.writeMem(0x1a51, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xb7, gbc.a());
        EXPECT(0x3d, gbc.b());
        EXPECT(0x78, gbc.c());
        EXPECT(0xad, gbc.d());
        EXPECT(0x23, gbc.e());
        EXPECT(0xdc, gbc.h());
        EXPECT(0xc9, gbc.l());
        EXPECT(0xa59a, gbc.sp());
        EXPECT(0x1a53, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 0043
        gbc.setState(0xd165, 0xf0b4, 0x2940, 0xce76, 0x2ab, 0xb607, 0x1, 0x0);
        gbc.writeMem(0xd165, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x29, gbc.a());
        EXPECT(0xce, gbc.b());
        EXPECT(0x76, gbc.c());
        EXPECT(0x2, gbc.d());
        EXPECT(0xab, gbc.e());
        EXPECT(0xb6, gbc.h());
        EXPECT(0x3, gbc.l());
        EXPECT(0xf0b4, gbc.sp());
        EXPECT(0xd167, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd165));
        EXPECT(0x95, gbc.readMem(0xd166));
        // CB 95 0044
        gbc.setState(0xc91b, 0x22bf, 0xb7e0, 0x437e, 0x64df, 0x2549, 0x1, 0x1);
        gbc.writeMem(0xc91b, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xb7, gbc.a());
        EXPECT(0x43, gbc.b());
        EXPECT(0x7e, gbc.c());
        EXPECT(0x64, gbc.d());
        EXPECT(0xdf, gbc.e());
        EXPECT(0x25, gbc.h());
        EXPECT(0x49, gbc.l());
        EXPECT(0x22bf, gbc.sp());
        EXPECT(0xc91d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc91b));
        EXPECT(0x95, gbc.readMem(0xc91c));
        // CB 95 0045
        gbc.setState(0x5c3a, 0x56b, 0x4d30, 0xe5cf, 0x4d1d, 0x5788, 0x0, 0x0);
        gbc.writeMem(0x5c3a, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x4d, gbc.a());
        EXPECT(0xe5, gbc.b());
        EXPECT(0xcf, gbc.c());
        EXPECT(0x4d, gbc.d());
        EXPECT(0x1d, gbc.e());
        EXPECT(0x57, gbc.h());
        EXPECT(0x88, gbc.l());
        EXPECT(0x56b, gbc.sp());
        EXPECT(0x5c3c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 0046
        gbc.setState(0x34b9, 0xf236, 0xddd0, 0xf9e1, 0xe4da, 0xae14, 0x1, 0x0);
        gbc.writeMem(0x34b9, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xdd, gbc.a());
        EXPECT(0xf9, gbc.b());
        EXPECT(0xe1, gbc.c());
        EXPECT(0xe4, gbc.d());
        EXPECT(0xda, gbc.e());
        EXPECT(0xae, gbc.h());
        EXPECT(0x10, gbc.l());
        EXPECT(0xf236, gbc.sp());
        EXPECT(0x34bb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 0047
        gbc.setState(0xada1, 0xd05d, 0x60f0, 0x248, 0x1e12, 0x8bf4, 0x0, 0x0);
        gbc.writeMem(0xada1, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x60, gbc.a());
        EXPECT(0x2, gbc.b());
        EXPECT(0x48, gbc.c());
        EXPECT(0x1e, gbc.d());
        EXPECT(0x12, gbc.e());
        EXPECT(0x8b, gbc.h());
        EXPECT(0xf0, gbc.l());
        EXPECT(0xd05d, gbc.sp());
        EXPECT(0xada3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xada1));
        EXPECT(0x95, gbc.readMem(0xada2));
        // CB 95 0049
        gbc.setState(0x58b9, 0x6f48, 0x8f90, 0xf3cd, 0xd5d7, 0x3fc4, 0x0, 0x1);
        gbc.writeMem(0x58b9, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x8f, gbc.a());
        EXPECT(0xf3, gbc.b());
        EXPECT(0xcd, gbc.c());
        EXPECT(0xd5, gbc.d());
        EXPECT(0xd7, gbc.e());
        EXPECT(0x3f, gbc.h());
        EXPECT(0xc0, gbc.l());
        EXPECT(0x6f48, gbc.sp());
        EXPECT(0x58bb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 004A
        gbc.setState(0x4b3d, 0xfca3, 0x4530, 0x2f5a, 0xea2e, 0xf30, 0x1, 0x1);
        gbc.writeMem(0x4b3d, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x45, gbc.a());
        EXPECT(0x2f, gbc.b());
        EXPECT(0x5a, gbc.c());
        EXPECT(0xea, gbc.d());
        EXPECT(0x2e, gbc.e());
        EXPECT(0xf, gbc.h());
        EXPECT(0x30, gbc.l());
        EXPECT(0xfca3, gbc.sp());
        EXPECT(0x4b3f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 004B
        gbc.setState(0x65e9, 0x92f2, 0xfa20, 0x6c54, 0x146d, 0xed1c, 0x1, 0x0);
        gbc.writeMem(0x65e9, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xfa, gbc.a());
        EXPECT(0x6c, gbc.b());
        EXPECT(0x54, gbc.c());
        EXPECT(0x14, gbc.d());
        EXPECT(0x6d, gbc.e());
        EXPECT(0xed, gbc.h());
        EXPECT(0x18, gbc.l());
        EXPECT(0x92f2, gbc.sp());
        EXPECT(0x65eb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 004C
        gbc.setState(0xce22, 0x4f1f, 0xc5a0, 0xe1f6, 0xa33, 0xe4a6, 0x0, 0x0);
        gbc.writeMem(0xce22, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xc5, gbc.a());
        EXPECT(0xe1, gbc.b());
        EXPECT(0xf6, gbc.c());
        EXPECT(0xa, gbc.d());
        EXPECT(0x33, gbc.e());
        EXPECT(0xe4, gbc.h());
        EXPECT(0xa2, gbc.l());
        EXPECT(0x4f1f, gbc.sp());
        EXPECT(0xce24, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xce22));
        EXPECT(0x95, gbc.readMem(0xce23));
        // CB 95 004D
        gbc.setState(0x90e0, 0x9c4b, 0xf5e0, 0xcb61, 0xa3c5, 0x52c9, 0x0, 0x1);
        gbc.writeMem(0x90e0, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xf5, gbc.a());
        EXPECT(0xcb, gbc.b());
        EXPECT(0x61, gbc.c());
        EXPECT(0xa3, gbc.d());
        EXPECT(0xc5, gbc.e());
        EXPECT(0x52, gbc.h());
        EXPECT(0xc9, gbc.l());
        EXPECT(0x9c4b, gbc.sp());
        EXPECT(0x90e2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x90e0));
        EXPECT(0x95, gbc.readMem(0x90e1));
        // CB 95 004E
        gbc.setState(0xa373, 0x3467, 0xe4f0, 0x12e4, 0x1c46, 0xdf96, 0x0, 0x1);
        gbc.writeMem(0xa373, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xe4, gbc.a());
        EXPECT(0x12, gbc.b());
        EXPECT(0xe4, gbc.c());
        EXPECT(0x1c, gbc.d());
        EXPECT(0x46, gbc.e());
        EXPECT(0xdf, gbc.h());
        EXPECT(0x92, gbc.l());
        EXPECT(0x3467, gbc.sp());
        EXPECT(0xa375, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa373));
        EXPECT(0x95, gbc.readMem(0xa374));
        // CB 95 0050
        gbc.setState(0xb39b, 0xaa9b, 0x7310, 0x7245, 0xef3c, 0x51ca, 0x1, 0x0);
        gbc.writeMem(0xb39b, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x73, gbc.a());
        EXPECT(0x72, gbc.b());
        EXPECT(0x45, gbc.c());
        EXPECT(0xef, gbc.d());
        EXPECT(0x3c, gbc.e());
        EXPECT(0x51, gbc.h());
        EXPECT(0xca, gbc.l());
        EXPECT(0xaa9b, gbc.sp());
        EXPECT(0xb39d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb39b));
        EXPECT(0x95, gbc.readMem(0xb39c));
        // CB 95 0051
        gbc.setState(0xa661, 0x78f, 0xafd0, 0xa968, 0xbc19, 0xfb54, 0x1, 0x0);
        gbc.writeMem(0xa661, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xaf, gbc.a());
        EXPECT(0xa9, gbc.b());
        EXPECT(0x68, gbc.c());
        EXPECT(0xbc, gbc.d());
        EXPECT(0x19, gbc.e());
        EXPECT(0xfb, gbc.h());
        EXPECT(0x50, gbc.l());
        EXPECT(0x78f, gbc.sp());
        EXPECT(0xa663, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa661));
        EXPECT(0x95, gbc.readMem(0xa662));
        // CB 95 0052
        gbc.setState(0xe14e, 0x5032, 0xa440, 0xb892, 0x29a4, 0x4b46, 0x0, 0x0);
        gbc.writeMem(0xe14e, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xa4, gbc.a());
        EXPECT(0xb8, gbc.b());
        EXPECT(0x92, gbc.c());
        EXPECT(0x29, gbc.d());
        EXPECT(0xa4, gbc.e());
        EXPECT(0x4b, gbc.h());
        EXPECT(0x42, gbc.l());
        EXPECT(0x5032, gbc.sp());
        EXPECT(0xe150, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe14e));
        EXPECT(0x95, gbc.readMem(0xe14f));
        // CB 95 0053
        gbc.setState(0xbf43, 0x9b16, 0xeae0, 0x728c, 0x2816, 0xb324, 0x1, 0x1);
        gbc.writeMem(0xbf43, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xea, gbc.a());
        EXPECT(0x72, gbc.b());
        EXPECT(0x8c, gbc.c());
        EXPECT(0x28, gbc.d());
        EXPECT(0x16, gbc.e());
        EXPECT(0xb3, gbc.h());
        EXPECT(0x20, gbc.l());
        EXPECT(0x9b16, gbc.sp());
        EXPECT(0xbf45, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbf43));
        EXPECT(0x95, gbc.readMem(0xbf44));
        // CB 95 0054
        gbc.setState(0x15c9, 0x1a33, 0x4f40, 0xf97d, 0x1dad, 0xe86a, 0x0, 0x0);
        gbc.writeMem(0x15c9, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x4f, gbc.a());
        EXPECT(0xf9, gbc.b());
        EXPECT(0x7d, gbc.c());
        EXPECT(0x1d, gbc.d());
        EXPECT(0xad, gbc.e());
        EXPECT(0xe8, gbc.h());
        EXPECT(0x6a, gbc.l());
        EXPECT(0x1a33, gbc.sp());
        EXPECT(0x15cb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 0055
        gbc.setState(0x399a, 0x3528, 0x9280, 0x4c8d, 0x7220, 0x1bad, 0x0, 0x1);
        gbc.writeMem(0x399a, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x92, gbc.a());
        EXPECT(0x4c, gbc.b());
        EXPECT(0x8d, gbc.c());
        EXPECT(0x72, gbc.d());
        EXPECT(0x20, gbc.e());
        EXPECT(0x1b, gbc.h());
        EXPECT(0xa9, gbc.l());
        EXPECT(0x3528, gbc.sp());
        EXPECT(0x399c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 0056
        gbc.setState(0x1aec, 0xab0d, 0x9120, 0x93c, 0x369f, 0x61e8, 0x1, 0x0);
        gbc.writeMem(0x1aec, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x91, gbc.a());
        EXPECT(0x9, gbc.b());
        EXPECT(0x3c, gbc.c());
        EXPECT(0x36, gbc.d());
        EXPECT(0x9f, gbc.e());
        EXPECT(0x61, gbc.h());
        EXPECT(0xe8, gbc.l());
        EXPECT(0xab0d, gbc.sp());
        EXPECT(0x1aee, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 0057
        gbc.setState(0x934b, 0xe2f1, 0x7890, 0x77ff, 0xe3ac, 0xba7d, 0x0, 0x1);
        gbc.writeMem(0x934b, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x78, gbc.a());
        EXPECT(0x77, gbc.b());
        EXPECT(0xff, gbc.c());
        EXPECT(0xe3, gbc.d());
        EXPECT(0xac, gbc.e());
        EXPECT(0xba, gbc.h());
        EXPECT(0x79, gbc.l());
        EXPECT(0xe2f1, gbc.sp());
        EXPECT(0x934d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x934b));
        EXPECT(0x95, gbc.readMem(0x934c));
        // CB 95 0058
        gbc.setState(0x54d8, 0x1ff1, 0xfec0, 0xaa67, 0x5203, 0x60c2, 0x1, 0x1);
        gbc.writeMem(0x54d8, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xfe, gbc.a());
        EXPECT(0xaa, gbc.b());
        EXPECT(0x67, gbc.c());
        EXPECT(0x52, gbc.d());
        EXPECT(0x3, gbc.e());
        EXPECT(0x60, gbc.h());
        EXPECT(0xc2, gbc.l());
        EXPECT(0x1ff1, gbc.sp());
        EXPECT(0x54da, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 0059
        gbc.setState(0x2527, 0x528, 0x8d20, 0x3d00, 0x65d4, 0xc3e, 0x0, 0x0);
        gbc.writeMem(0x2527, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x8d, gbc.a());
        EXPECT(0x3d, gbc.b());
        EXPECT(0x0, gbc.c());
        EXPECT(0x65, gbc.d());
        EXPECT(0xd4, gbc.e());
        EXPECT(0xc, gbc.h());
        EXPECT(0x3a, gbc.l());
        EXPECT(0x528, gbc.sp());
        EXPECT(0x2529, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 005A
        gbc.setState(0x8f9d, 0xfa60, 0xaee0, 0x5d43, 0x5a5a, 0x416d, 0x0, 0x1);
        gbc.writeMem(0x8f9d, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xae, gbc.a());
        EXPECT(0x5d, gbc.b());
        EXPECT(0x43, gbc.c());
        EXPECT(0x5a, gbc.d());
        EXPECT(0x5a, gbc.e());
        EXPECT(0x41, gbc.h());
        EXPECT(0x69, gbc.l());
        EXPECT(0xfa60, gbc.sp());
        EXPECT(0x8f9f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8f9d));
        EXPECT(0x95, gbc.readMem(0x8f9e));
        // CB 95 005B
        gbc.setState(0x1bb, 0x8ffd, 0x5140, 0xa38e, 0xb9ab, 0x9156, 0x1, 0x0);
        gbc.writeMem(0x1bb, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x51, gbc.a());
        EXPECT(0xa3, gbc.b());
        EXPECT(0x8e, gbc.c());
        EXPECT(0xb9, gbc.d());
        EXPECT(0xab, gbc.e());
        EXPECT(0x91, gbc.h());
        EXPECT(0x52, gbc.l());
        EXPECT(0x8ffd, gbc.sp());
        EXPECT(0x1bd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 005C
        gbc.setState(0xd72e, 0xda89, 0x450, 0x1284, 0x6725, 0xac35, 0x1, 0x1);
        gbc.writeMem(0xd72e, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x4, gbc.a());
        EXPECT(0x12, gbc.b());
        EXPECT(0x84, gbc.c());
        EXPECT(0x67, gbc.d());
        EXPECT(0x25, gbc.e());
        EXPECT(0xac, gbc.h());
        EXPECT(0x31, gbc.l());
        EXPECT(0xda89, gbc.sp());
        EXPECT(0xd730, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd72e));
        EXPECT(0x95, gbc.readMem(0xd72f));
        // CB 95 005D
        gbc.setState(0x13cc, 0x6295, 0x9400, 0x8b2e, 0xa167, 0x854a, 0x1, 0x1);
        gbc.writeMem(0x13cc, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x94, gbc.a());
        EXPECT(0x8b, gbc.b());
        EXPECT(0x2e, gbc.c());
        EXPECT(0xa1, gbc.d());
        EXPECT(0x67, gbc.e());
        EXPECT(0x85, gbc.h());
        EXPECT(0x4a, gbc.l());
        EXPECT(0x6295, gbc.sp());
        EXPECT(0x13ce, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 005E
        gbc.setState(0x8842, 0xa41f, 0x1bb0, 0x3e76, 0xeff8, 0x1fad, 0x0, 0x1);
        gbc.writeMem(0x8842, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x1b, gbc.a());
        EXPECT(0x3e, gbc.b());
        EXPECT(0x76, gbc.c());
        EXPECT(0xef, gbc.d());
        EXPECT(0xf8, gbc.e());
        EXPECT(0x1f, gbc.h());
        EXPECT(0xa9, gbc.l());
        EXPECT(0xa41f, gbc.sp());
        EXPECT(0x8844, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8842));
        EXPECT(0x95, gbc.readMem(0x8843));
        // CB 95 0060
        gbc.setState(0x5e39, 0xfd4, 0x6bc0, 0xcbdb, 0x3ce6, 0x161e, 0x1, 0x1);
        gbc.writeMem(0x5e39, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x6b, gbc.a());
        EXPECT(0xcb, gbc.b());
        EXPECT(0xdb, gbc.c());
        EXPECT(0x3c, gbc.d());
        EXPECT(0xe6, gbc.e());
        EXPECT(0x16, gbc.h());
        EXPECT(0x1a, gbc.l());
        EXPECT(0xfd4, gbc.sp());
        EXPECT(0x5e3b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 0061
        gbc.setState(0x98dc, 0xe711, 0x21b0, 0xd8a6, 0x6441, 0x63e8, 0x0, 0x1);
        gbc.writeMem(0x98dc, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x21, gbc.a());
        EXPECT(0xd8, gbc.b());
        EXPECT(0xa6, gbc.c());
        EXPECT(0x64, gbc.d());
        EXPECT(0x41, gbc.e());
        EXPECT(0x63, gbc.h());
        EXPECT(0xe8, gbc.l());
        EXPECT(0xe711, gbc.sp());
        EXPECT(0x98de, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x98dc));
        EXPECT(0x95, gbc.readMem(0x98dd));
        // CB 95 0062
        gbc.setState(0x4ca1, 0x4f10, 0x9eb0, 0x9750, 0x8b7a, 0x3f3f, 0x0, 0x1);
        gbc.writeMem(0x4ca1, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x9e, gbc.a());
        EXPECT(0x97, gbc.b());
        EXPECT(0x50, gbc.c());
        EXPECT(0x8b, gbc.d());
        EXPECT(0x7a, gbc.e());
        EXPECT(0x3f, gbc.h());
        EXPECT(0x3b, gbc.l());
        EXPECT(0x4f10, gbc.sp());
        EXPECT(0x4ca3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 0063
        gbc.setState(0x7a18, 0x3a1d, 0x2e50, 0x21b7, 0x65cb, 0x93df, 0x1, 0x0);
        gbc.writeMem(0x7a18, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x2e, gbc.a());
        EXPECT(0x21, gbc.b());
        EXPECT(0xb7, gbc.c());
        EXPECT(0x65, gbc.d());
        EXPECT(0xcb, gbc.e());
        EXPECT(0x93, gbc.h());
        EXPECT(0xdb, gbc.l());
        EXPECT(0x3a1d, gbc.sp());
        EXPECT(0x7a1a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 0064
        gbc.setState(0x6fa2, 0x5caf, 0xf440, 0x68f2, 0xdd52, 0x259d, 0x0, 0x1);
        gbc.writeMem(0x6fa2, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xf4, gbc.a());
        EXPECT(0x68, gbc.b());
        EXPECT(0xf2, gbc.c());
        EXPECT(0xdd, gbc.d());
        EXPECT(0x52, gbc.e());
        EXPECT(0x25, gbc.h());
        EXPECT(0x99, gbc.l());
        EXPECT(0x5caf, gbc.sp());
        EXPECT(0x6fa4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 0065
        gbc.setState(0x7041, 0x7e57, 0xa460, 0x9b7a, 0xe41e, 0xf1a9, 0x1, 0x0);
        gbc.writeMem(0x7041, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xa4, gbc.a());
        EXPECT(0x9b, gbc.b());
        EXPECT(0x7a, gbc.c());
        EXPECT(0xe4, gbc.d());
        EXPECT(0x1e, gbc.e());
        EXPECT(0xf1, gbc.h());
        EXPECT(0xa9, gbc.l());
        EXPECT(0x7e57, gbc.sp());
        EXPECT(0x7043, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 0066
        gbc.setState(0x1d09, 0x8195, 0x1510, 0x75a3, 0xe7e1, 0x96b0, 0x0, 0x0);
        gbc.writeMem(0x1d09, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x15, gbc.a());
        EXPECT(0x75, gbc.b());
        EXPECT(0xa3, gbc.c());
        EXPECT(0xe7, gbc.d());
        EXPECT(0xe1, gbc.e());
        EXPECT(0x96, gbc.h());
        EXPECT(0xb0, gbc.l());
        EXPECT(0x8195, gbc.sp());
        EXPECT(0x1d0b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 0067
        gbc.setState(0xb1cd, 0xd6b7, 0xa730, 0x5bcb, 0x29ac, 0xc5b, 0x0, 0x0);
        gbc.writeMem(0xb1cd, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xa7, gbc.a());
        EXPECT(0x5b, gbc.b());
        EXPECT(0xcb, gbc.c());
        EXPECT(0x29, gbc.d());
        EXPECT(0xac, gbc.e());
        EXPECT(0xc, gbc.h());
        EXPECT(0x5b, gbc.l());
        EXPECT(0xd6b7, gbc.sp());
        EXPECT(0xb1cf, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb1cd));
        EXPECT(0x95, gbc.readMem(0xb1ce));
        // CB 95 0068
        gbc.setState(0x73d1, 0xd5a9, 0xfcf0, 0x71d3, 0x16e8, 0x9672, 0x0, 0x0);
        gbc.writeMem(0x73d1, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xfc, gbc.a());
        EXPECT(0x71, gbc.b());
        EXPECT(0xd3, gbc.c());
        EXPECT(0x16, gbc.d());
        EXPECT(0xe8, gbc.e());
        EXPECT(0x96, gbc.h());
        EXPECT(0x72, gbc.l());
        EXPECT(0xd5a9, gbc.sp());
        EXPECT(0x73d3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 0069
        gbc.setState(0x6450, 0x2c85, 0x6350, 0x1397, 0xf8a3, 0xf21f, 0x1, 0x0);
        gbc.writeMem(0x6450, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x63, gbc.a());
        EXPECT(0x13, gbc.b());
        EXPECT(0x97, gbc.c());
        EXPECT(0xf8, gbc.d());
        EXPECT(0xa3, gbc.e());
        EXPECT(0xf2, gbc.h());
        EXPECT(0x1b, gbc.l());
        EXPECT(0x2c85, gbc.sp());
        EXPECT(0x6452, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 006A
        gbc.setState(0x5671, 0x89e7, 0x6a40, 0x1591, 0xb5d1, 0xc0f4, 0x0, 0x0);
        gbc.writeMem(0x5671, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x6a, gbc.a());
        EXPECT(0x15, gbc.b());
        EXPECT(0x91, gbc.c());
        EXPECT(0xb5, gbc.d());
        EXPECT(0xd1, gbc.e());
        EXPECT(0xc0, gbc.h());
        EXPECT(0xf0, gbc.l());
        EXPECT(0x89e7, gbc.sp());
        EXPECT(0x5673, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 006B
        gbc.setState(0x92c5, 0x970e, 0x3b70, 0x8a40, 0xf149, 0xd4d3, 0x0, 0x1);
        gbc.writeMem(0x92c5, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x3b, gbc.a());
        EXPECT(0x8a, gbc.b());
        EXPECT(0x40, gbc.c());
        EXPECT(0xf1, gbc.d());
        EXPECT(0x49, gbc.e());
        EXPECT(0xd4, gbc.h());
        EXPECT(0xd3, gbc.l());
        EXPECT(0x970e, gbc.sp());
        EXPECT(0x92c7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x92c5));
        EXPECT(0x95, gbc.readMem(0x92c6));
        // CB 95 006C
        gbc.setState(0x4b25, 0xfd9f, 0x6e70, 0xa135, 0xd092, 0xa221, 0x1, 0x0);
        gbc.writeMem(0x4b25, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x6e, gbc.a());
        EXPECT(0xa1, gbc.b());
        EXPECT(0x35, gbc.c());
        EXPECT(0xd0, gbc.d());
        EXPECT(0x92, gbc.e());
        EXPECT(0xa2, gbc.h());
        EXPECT(0x21, gbc.l());
        EXPECT(0xfd9f, gbc.sp());
        EXPECT(0x4b27, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 006D
        gbc.setState(0x7c8b, 0xee4b, 0xea40, 0xdaf1, 0x5038, 0x9ef, 0x0, 0x1);
        gbc.writeMem(0x7c8b, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xea, gbc.a());
        EXPECT(0xda, gbc.b());
        EXPECT(0xf1, gbc.c());
        EXPECT(0x50, gbc.d());
        EXPECT(0x38, gbc.e());
        EXPECT(0x9, gbc.h());
        EXPECT(0xeb, gbc.l());
        EXPECT(0xee4b, gbc.sp());
        EXPECT(0x7c8d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 006E
        gbc.setState(0x3c3c, 0x90b7, 0xb3b0, 0x20f4, 0x27a7, 0xfe2e, 0x1, 0x1);
        gbc.writeMem(0x3c3c, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xb3, gbc.a());
        EXPECT(0x20, gbc.b());
        EXPECT(0xf4, gbc.c());
        EXPECT(0x27, gbc.d());
        EXPECT(0xa7, gbc.e());
        EXPECT(0xfe, gbc.h());
        EXPECT(0x2a, gbc.l());
        EXPECT(0x90b7, gbc.sp());
        EXPECT(0x3c3e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 006F
        gbc.setState(0xbb3, 0xc08e, 0x2000, 0xc5e, 0x82b0, 0x9043, 0x0, 0x1);
        gbc.writeMem(0xbb3, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x20, gbc.a());
        EXPECT(0xc, gbc.b());
        EXPECT(0x5e, gbc.c());
        EXPECT(0x82, gbc.d());
        EXPECT(0xb0, gbc.e());
        EXPECT(0x90, gbc.h());
        EXPECT(0x43, gbc.l());
        EXPECT(0xc08e, gbc.sp());
        EXPECT(0xbb5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 0070
        gbc.setState(0x6225, 0xb343, 0xf580, 0x6819, 0x1e48, 0x535d, 0x1, 0x0);
        gbc.writeMem(0x6225, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xf5, gbc.a());
        EXPECT(0x68, gbc.b());
        EXPECT(0x19, gbc.c());
        EXPECT(0x1e, gbc.d());
        EXPECT(0x48, gbc.e());
        EXPECT(0x53, gbc.h());
        EXPECT(0x59, gbc.l());
        EXPECT(0xb343, gbc.sp());
        EXPECT(0x6227, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 0071
        gbc.setState(0x75b9, 0x6d83, 0x44e0, 0xde19, 0xa21, 0x3ed3, 0x0, 0x0);
        gbc.writeMem(0x75b9, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x44, gbc.a());
        EXPECT(0xde, gbc.b());
        EXPECT(0x19, gbc.c());
        EXPECT(0xa, gbc.d());
        EXPECT(0x21, gbc.e());
        EXPECT(0x3e, gbc.h());
        EXPECT(0xd3, gbc.l());
        EXPECT(0x6d83, gbc.sp());
        EXPECT(0x75bb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 0072
        gbc.setState(0x4b89, 0x6661, 0xd240, 0xd499, 0xb73e, 0x7e6, 0x0, 0x1);
        gbc.writeMem(0x4b89, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xd2, gbc.a());
        EXPECT(0xd4, gbc.b());
        EXPECT(0x99, gbc.c());
        EXPECT(0xb7, gbc.d());
        EXPECT(0x3e, gbc.e());
        EXPECT(0x7, gbc.h());
        EXPECT(0xe2, gbc.l());
        EXPECT(0x6661, gbc.sp());
        EXPECT(0x4b8b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 0073
        gbc.setState(0xecc1, 0xb1be, 0xb5d0, 0x6a34, 0xd900, 0x7642, 0x1, 0x1);
        gbc.writeMem(0xecc1, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xb5, gbc.a());
        EXPECT(0x6a, gbc.b());
        EXPECT(0x34, gbc.c());
        EXPECT(0xd9, gbc.d());
        EXPECT(0x0, gbc.e());
        EXPECT(0x76, gbc.h());
        EXPECT(0x42, gbc.l());
        EXPECT(0xb1be, gbc.sp());
        EXPECT(0xecc3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xecc1));
        EXPECT(0x95, gbc.readMem(0xecc2));
        // CB 95 0074
        gbc.setState(0x6e9, 0x83ab, 0x7240, 0xd21d, 0xb9ce, 0x5d5c, 0x1, 0x0);
        gbc.writeMem(0x6e9, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x72, gbc.a());
        EXPECT(0xd2, gbc.b());
        EXPECT(0x1d, gbc.c());
        EXPECT(0xb9, gbc.d());
        EXPECT(0xce, gbc.e());
        EXPECT(0x5d, gbc.h());
        EXPECT(0x58, gbc.l());
        EXPECT(0x83ab, gbc.sp());
        EXPECT(0x6eb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 0075
        gbc.setState(0x3d2a, 0x2c5b, 0x2190, 0xaded, 0x6fe9, 0xec86, 0x1, 0x1);
        gbc.writeMem(0x3d2a, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x21, gbc.a());
        EXPECT(0xad, gbc.b());
        EXPECT(0xed, gbc.c());
        EXPECT(0x6f, gbc.d());
        EXPECT(0xe9, gbc.e());
        EXPECT(0xec, gbc.h());
        EXPECT(0x82, gbc.l());
        EXPECT(0x2c5b, gbc.sp());
        EXPECT(0x3d2c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 0076
        gbc.setState(0x8a5a, 0x6689, 0x1db0, 0x7f1d, 0x63d, 0x51d5, 0x1, 0x1);
        gbc.writeMem(0x8a5a, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x1d, gbc.a());
        EXPECT(0x7f, gbc.b());
        EXPECT(0x1d, gbc.c());
        EXPECT(0x6, gbc.d());
        EXPECT(0x3d, gbc.e());
        EXPECT(0x51, gbc.h());
        EXPECT(0xd1, gbc.l());
        EXPECT(0x6689, gbc.sp());
        EXPECT(0x8a5c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8a5a));
        EXPECT(0x95, gbc.readMem(0x8a5b));
        // CB 95 0077
        gbc.setState(0x61d4, 0x52b4, 0x2c40, 0xab07, 0x9738, 0x5d6c, 0x0, 0x0);
        gbc.writeMem(0x61d4, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x2c, gbc.a());
        EXPECT(0xab, gbc.b());
        EXPECT(0x7, gbc.c());
        EXPECT(0x97, gbc.d());
        EXPECT(0x38, gbc.e());
        EXPECT(0x5d, gbc.h());
        EXPECT(0x68, gbc.l());
        EXPECT(0x52b4, gbc.sp());
        EXPECT(0x61d6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 0078
        gbc.setState(0x3218, 0xcc46, 0xc640, 0xd37f, 0x19e4, 0x742c, 0x0, 0x1);
        gbc.writeMem(0x3218, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xc6, gbc.a());
        EXPECT(0xd3, gbc.b());
        EXPECT(0x7f, gbc.c());
        EXPECT(0x19, gbc.d());
        EXPECT(0xe4, gbc.e());
        EXPECT(0x74, gbc.h());
        EXPECT(0x28, gbc.l());
        EXPECT(0xcc46, gbc.sp());
        EXPECT(0x321a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 0079
        gbc.setState(0x2cad, 0xb06f, 0x2650, 0x4717, 0xc0d8, 0xc532, 0x0, 0x0);
        gbc.writeMem(0x2cad, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x26, gbc.a());
        EXPECT(0x47, gbc.b());
        EXPECT(0x17, gbc.c());
        EXPECT(0xc0, gbc.d());
        EXPECT(0xd8, gbc.e());
        EXPECT(0xc5, gbc.h());
        EXPECT(0x32, gbc.l());
        EXPECT(0xb06f, gbc.sp());
        EXPECT(0x2caf, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 007A
        gbc.setState(0x2048, 0x55b1, 0x2d40, 0x9ee1, 0xa17, 0xa507, 0x0, 0x1);
        gbc.writeMem(0x2048, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x2d, gbc.a());
        EXPECT(0x9e, gbc.b());
        EXPECT(0xe1, gbc.c());
        EXPECT(0xa, gbc.d());
        EXPECT(0x17, gbc.e());
        EXPECT(0xa5, gbc.h());
        EXPECT(0x3, gbc.l());
        EXPECT(0x55b1, gbc.sp());
        EXPECT(0x204a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 007B
        gbc.setState(0x313d, 0x96a3, 0xc5e0, 0x1ab6, 0x72fb, 0xc627, 0x1, 0x0);
        gbc.writeMem(0x313d, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xc5, gbc.a());
        EXPECT(0x1a, gbc.b());
        EXPECT(0xb6, gbc.c());
        EXPECT(0x72, gbc.d());
        EXPECT(0xfb, gbc.e());
        EXPECT(0xc6, gbc.h());
        EXPECT(0x23, gbc.l());
        EXPECT(0x96a3, gbc.sp());
        EXPECT(0x313f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 007C
        gbc.setState(0x2ca8, 0x317a, 0x21e0, 0x7481, 0x65ef, 0x20c0, 0x0, 0x1);
        gbc.writeMem(0x2ca8, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x21, gbc.a());
        EXPECT(0x74, gbc.b());
        EXPECT(0x81, gbc.c());
        EXPECT(0x65, gbc.d());
        EXPECT(0xef, gbc.e());
        EXPECT(0x20, gbc.h());
        EXPECT(0xc0, gbc.l());
        EXPECT(0x317a, gbc.sp());
        EXPECT(0x2caa, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 007D
        gbc.setState(0x27c4, 0x9dbb, 0x60c0, 0xc4ac, 0xf453, 0xc2a, 0x0, 0x1);
        gbc.writeMem(0x27c4, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x60, gbc.a());
        EXPECT(0xc4, gbc.b());
        EXPECT(0xac, gbc.c());
        EXPECT(0xf4, gbc.d());
        EXPECT(0x53, gbc.e());
        EXPECT(0xc, gbc.h());
        EXPECT(0x2a, gbc.l());
        EXPECT(0x9dbb, gbc.sp());
        EXPECT(0x27c6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 007E
        gbc.setState(0xe87c, 0xe40e, 0xd130, 0x4b34, 0xf26b, 0x5377, 0x1, 0x0);
        gbc.writeMem(0xe87c, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xd1, gbc.a());
        EXPECT(0x4b, gbc.b());
        EXPECT(0x34, gbc.c());
        EXPECT(0xf2, gbc.d());
        EXPECT(0x6b, gbc.e());
        EXPECT(0x53, gbc.h());
        EXPECT(0x73, gbc.l());
        EXPECT(0xe40e, gbc.sp());
        EXPECT(0xe87e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe87c));
        EXPECT(0x95, gbc.readMem(0xe87d));
        // CB 95 0080
        gbc.setState(0x8537, 0xca5e, 0xddf0, 0x1aed, 0xee46, 0x83ed, 0x1, 0x1);
        gbc.writeMem(0x8537, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xdd, gbc.a());
        EXPECT(0x1a, gbc.b());
        EXPECT(0xed, gbc.c());
        EXPECT(0xee, gbc.d());
        EXPECT(0x46, gbc.e());
        EXPECT(0x83, gbc.h());
        EXPECT(0xe9, gbc.l());
        EXPECT(0xca5e, gbc.sp());
        EXPECT(0x8539, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8537));
        EXPECT(0x95, gbc.readMem(0x8538));
        // CB 95 0081
        gbc.setState(0x360f, 0x273f, 0x970, 0x6d29, 0xb7e2, 0xc467, 0x0, 0x0);
        gbc.writeMem(0x360f, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x9, gbc.a());
        EXPECT(0x6d, gbc.b());
        EXPECT(0x29, gbc.c());
        EXPECT(0xb7, gbc.d());
        EXPECT(0xe2, gbc.e());
        EXPECT(0xc4, gbc.h());
        EXPECT(0x63, gbc.l());
        EXPECT(0x273f, gbc.sp());
        EXPECT(0x3611, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 0082
        gbc.setState(0x4033, 0xae10, 0x16c0, 0x88e9, 0xea07, 0xd670, 0x1, 0x0);
        gbc.writeMem(0x4033, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x16, gbc.a());
        EXPECT(0x88, gbc.b());
        EXPECT(0xe9, gbc.c());
        EXPECT(0xea, gbc.d());
        EXPECT(0x7, gbc.e());
        EXPECT(0xd6, gbc.h());
        EXPECT(0x70, gbc.l());
        EXPECT(0xae10, gbc.sp());
        EXPECT(0x4035, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 0083
        gbc.setState(0x82bb, 0x7623, 0xc1d0, 0xcbe6, 0x5cfa, 0x85a9, 0x0, 0x0);
        gbc.writeMem(0x82bb, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xc1, gbc.a());
        EXPECT(0xcb, gbc.b());
        EXPECT(0xe6, gbc.c());
        EXPECT(0x5c, gbc.d());
        EXPECT(0xfa, gbc.e());
        EXPECT(0x85, gbc.h());
        EXPECT(0xa9, gbc.l());
        EXPECT(0x7623, gbc.sp());
        EXPECT(0x82bd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x82bb));
        EXPECT(0x95, gbc.readMem(0x82bc));
        // CB 95 0084
        gbc.setState(0xe6c9, 0xafc4, 0x3930, 0xc47e, 0x30bf, 0xbc26, 0x0, 0x1);
        gbc.writeMem(0xe6c9, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x39, gbc.a());
        EXPECT(0xc4, gbc.b());
        EXPECT(0x7e, gbc.c());
        EXPECT(0x30, gbc.d());
        EXPECT(0xbf, gbc.e());
        EXPECT(0xbc, gbc.h());
        EXPECT(0x22, gbc.l());
        EXPECT(0xafc4, gbc.sp());
        EXPECT(0xe6cb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe6c9));
        EXPECT(0x95, gbc.readMem(0xe6ca));
        // CB 95 0085
        gbc.setState(0x6814, 0x862a, 0x4580, 0x421c, 0x6743, 0xaa25, 0x1, 0x0);
        gbc.writeMem(0x6814, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x45, gbc.a());
        EXPECT(0x42, gbc.b());
        EXPECT(0x1c, gbc.c());
        EXPECT(0x67, gbc.d());
        EXPECT(0x43, gbc.e());
        EXPECT(0xaa, gbc.h());
        EXPECT(0x21, gbc.l());
        EXPECT(0x862a, gbc.sp());
        EXPECT(0x6816, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 0086
        gbc.setState(0x8dc1, 0xf1bb, 0x900, 0x90e4, 0xbf1e, 0x892d, 0x1, 0x0);
        gbc.writeMem(0x8dc1, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x9, gbc.a());
        EXPECT(0x90, gbc.b());
        EXPECT(0xe4, gbc.c());
        EXPECT(0xbf, gbc.d());
        EXPECT(0x1e, gbc.e());
        EXPECT(0x89, gbc.h());
        EXPECT(0x29, gbc.l());
        EXPECT(0xf1bb, gbc.sp());
        EXPECT(0x8dc3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8dc1));
        EXPECT(0x95, gbc.readMem(0x8dc2));
        // CB 95 0087
        gbc.setState(0xd293, 0xa213, 0x8fe0, 0xe86c, 0xdf35, 0xce75, 0x1, 0x1);
        gbc.writeMem(0xd293, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x8f, gbc.a());
        EXPECT(0xe8, gbc.b());
        EXPECT(0x6c, gbc.c());
        EXPECT(0xdf, gbc.d());
        EXPECT(0x35, gbc.e());
        EXPECT(0xce, gbc.h());
        EXPECT(0x71, gbc.l());
        EXPECT(0xa213, gbc.sp());
        EXPECT(0xd295, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd293));
        EXPECT(0x95, gbc.readMem(0xd294));
        // CB 95 0088
        gbc.setState(0xaf2b, 0x15aa, 0x7980, 0xcda1, 0x8bda, 0xef83, 0x1, 0x1);
        gbc.writeMem(0xaf2b, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x79, gbc.a());
        EXPECT(0xcd, gbc.b());
        EXPECT(0xa1, gbc.c());
        EXPECT(0x8b, gbc.d());
        EXPECT(0xda, gbc.e());
        EXPECT(0xef, gbc.h());
        EXPECT(0x83, gbc.l());
        EXPECT(0x15aa, gbc.sp());
        EXPECT(0xaf2d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaf2b));
        EXPECT(0x95, gbc.readMem(0xaf2c));
        // CB 95 0089
        gbc.setState(0x67a0, 0x7b57, 0x4730, 0x7b23, 0x6899, 0x7b1e, 0x0, 0x0);
        gbc.writeMem(0x67a0, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x47, gbc.a());
        EXPECT(0x7b, gbc.b());
        EXPECT(0x23, gbc.c());
        EXPECT(0x68, gbc.d());
        EXPECT(0x99, gbc.e());
        EXPECT(0x7b, gbc.h());
        EXPECT(0x1a, gbc.l());
        EXPECT(0x7b57, gbc.sp());
        EXPECT(0x67a2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 008A
        gbc.setState(0xc0a7, 0x1b70, 0x6f40, 0x26fa, 0x318a, 0x1914, 0x1, 0x1);
        gbc.writeMem(0xc0a7, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x6f, gbc.a());
        EXPECT(0x26, gbc.b());
        EXPECT(0xfa, gbc.c());
        EXPECT(0x31, gbc.d());
        EXPECT(0x8a, gbc.e());
        EXPECT(0x19, gbc.h());
        EXPECT(0x10, gbc.l());
        EXPECT(0x1b70, gbc.sp());
        EXPECT(0xc0a9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc0a7));
        EXPECT(0x95, gbc.readMem(0xc0a8));
        // CB 95 008C
        gbc.setState(0x58a7, 0xb082, 0x4800, 0x18f, 0x5a0e, 0x944, 0x1, 0x0);
        gbc.writeMem(0x58a7, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x48, gbc.a());
        EXPECT(0x1, gbc.b());
        EXPECT(0x8f, gbc.c());
        EXPECT(0x5a, gbc.d());
        EXPECT(0xe, gbc.e());
        EXPECT(0x9, gbc.h());
        EXPECT(0x40, gbc.l());
        EXPECT(0xb082, gbc.sp());
        EXPECT(0x58a9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 008D
        gbc.setState(0x8c96, 0xa0b8, 0xe170, 0xbf1c, 0xc38c, 0xff8e, 0x0, 0x0);
        gbc.writeMem(0x8c96, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xe1, gbc.a());
        EXPECT(0xbf, gbc.b());
        EXPECT(0x1c, gbc.c());
        EXPECT(0xc3, gbc.d());
        EXPECT(0x8c, gbc.e());
        EXPECT(0xff, gbc.h());
        EXPECT(0x8a, gbc.l());
        EXPECT(0xa0b8, gbc.sp());
        EXPECT(0x8c98, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8c96));
        EXPECT(0x95, gbc.readMem(0x8c97));
        // CB 95 008E
        gbc.setState(0x5bc, 0xd2ec, 0xc8c0, 0x9606, 0x33f0, 0x8a8a, 0x0, 0x1);
        gbc.writeMem(0x5bc, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xc8, gbc.a());
        EXPECT(0x96, gbc.b());
        EXPECT(0x6, gbc.c());
        EXPECT(0x33, gbc.d());
        EXPECT(0xf0, gbc.e());
        EXPECT(0x8a, gbc.h());
        EXPECT(0x8a, gbc.l());
        EXPECT(0xd2ec, gbc.sp());
        EXPECT(0x5be, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 008F
        gbc.setState(0xaf53, 0x2f91, 0x4400, 0xe955, 0x80d3, 0xd42e, 0x0, 0x1);
        gbc.writeMem(0xaf53, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x44, gbc.a());
        EXPECT(0xe9, gbc.b());
        EXPECT(0x55, gbc.c());
        EXPECT(0x80, gbc.d());
        EXPECT(0xd3, gbc.e());
        EXPECT(0xd4, gbc.h());
        EXPECT(0x2a, gbc.l());
        EXPECT(0x2f91, gbc.sp());
        EXPECT(0xaf55, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaf53));
        EXPECT(0x95, gbc.readMem(0xaf54));
        // CB 95 0090
        gbc.setState(0x1c94, 0x3e54, 0xa3b0, 0x5aeb, 0xf9d, 0xc54a, 0x1, 0x0);
        gbc.writeMem(0x1c94, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xa3, gbc.a());
        EXPECT(0x5a, gbc.b());
        EXPECT(0xeb, gbc.c());
        EXPECT(0xf, gbc.d());
        EXPECT(0x9d, gbc.e());
        EXPECT(0xc5, gbc.h());
        EXPECT(0x4a, gbc.l());
        EXPECT(0x3e54, gbc.sp());
        EXPECT(0x1c96, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 0093
        gbc.setState(0xd3ae, 0x30bb, 0xccb0, 0x6fdd, 0x372b, 0x2329, 0x1, 0x1);
        gbc.writeMem(0xd3ae, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xcc, gbc.a());
        EXPECT(0x6f, gbc.b());
        EXPECT(0xdd, gbc.c());
        EXPECT(0x37, gbc.d());
        EXPECT(0x2b, gbc.e());
        EXPECT(0x23, gbc.h());
        EXPECT(0x29, gbc.l());
        EXPECT(0x30bb, gbc.sp());
        EXPECT(0xd3b0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd3ae));
        EXPECT(0x95, gbc.readMem(0xd3af));
        // CB 95 0095
        gbc.setState(0xce5c, 0x7b0d, 0x8770, 0x53f6, 0x1b03, 0xb213, 0x0, 0x1);
        gbc.writeMem(0xce5c, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x87, gbc.a());
        EXPECT(0x53, gbc.b());
        EXPECT(0xf6, gbc.c());
        EXPECT(0x1b, gbc.d());
        EXPECT(0x3, gbc.e());
        EXPECT(0xb2, gbc.h());
        EXPECT(0x13, gbc.l());
        EXPECT(0x7b0d, gbc.sp());
        EXPECT(0xce5e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xce5c));
        EXPECT(0x95, gbc.readMem(0xce5d));
        // CB 95 0096
        gbc.setState(0xd78e, 0x254d, 0xf5e0, 0xd339, 0x9520, 0xb839, 0x1, 0x1);
        gbc.writeMem(0xd78e, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xf5, gbc.a());
        EXPECT(0xd3, gbc.b());
        EXPECT(0x39, gbc.c());
        EXPECT(0x95, gbc.d());
        EXPECT(0x20, gbc.e());
        EXPECT(0xb8, gbc.h());
        EXPECT(0x39, gbc.l());
        EXPECT(0x254d, gbc.sp());
        EXPECT(0xd790, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd78e));
        EXPECT(0x95, gbc.readMem(0xd78f));
        // CB 95 0097
        gbc.setState(0xd568, 0x46b9, 0xaf70, 0x6b7a, 0x8bdf, 0xad77, 0x1, 0x1);
        gbc.writeMem(0xd568, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xaf, gbc.a());
        EXPECT(0x6b, gbc.b());
        EXPECT(0x7a, gbc.c());
        EXPECT(0x8b, gbc.d());
        EXPECT(0xdf, gbc.e());
        EXPECT(0xad, gbc.h());
        EXPECT(0x73, gbc.l());
        EXPECT(0x46b9, gbc.sp());
        EXPECT(0xd56a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd568));
        EXPECT(0x95, gbc.readMem(0xd569));
        // CB 95 0098
        gbc.setState(0x36fe, 0xf141, 0x7550, 0x84f8, 0xb549, 0x1634, 0x0, 0x1);
        gbc.writeMem(0x36fe, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x75, gbc.a());
        EXPECT(0x84, gbc.b());
        EXPECT(0xf8, gbc.c());
        EXPECT(0xb5, gbc.d());
        EXPECT(0x49, gbc.e());
        EXPECT(0x16, gbc.h());
        EXPECT(0x30, gbc.l());
        EXPECT(0xf141, gbc.sp());
        EXPECT(0x3700, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 0099
        gbc.setState(0x3cef, 0x9961, 0xde0, 0x36fa, 0xa312, 0x63c3, 0x1, 0x1);
        gbc.writeMem(0x3cef, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xd, gbc.a());
        EXPECT(0x36, gbc.b());
        EXPECT(0xfa, gbc.c());
        EXPECT(0xa3, gbc.d());
        EXPECT(0x12, gbc.e());
        EXPECT(0x63, gbc.h());
        EXPECT(0xc3, gbc.l());
        EXPECT(0x9961, gbc.sp());
        EXPECT(0x3cf1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 009A
        gbc.setState(0xae90, 0x3c43, 0xec70, 0x3ae5, 0xac24, 0x54a9, 0x0, 0x0);
        gbc.writeMem(0xae90, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xec, gbc.a());
        EXPECT(0x3a, gbc.b());
        EXPECT(0xe5, gbc.c());
        EXPECT(0xac, gbc.d());
        EXPECT(0x24, gbc.e());
        EXPECT(0x54, gbc.h());
        EXPECT(0xa9, gbc.l());
        EXPECT(0x3c43, gbc.sp());
        EXPECT(0xae92, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xae90));
        EXPECT(0x95, gbc.readMem(0xae91));
        // CB 95 009B
        gbc.setState(0xecfe, 0xe7d9, 0x9de0, 0xd9a8, 0x4b25, 0x1f46, 0x1, 0x0);
        gbc.writeMem(0xecfe, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x9d, gbc.a());
        EXPECT(0xd9, gbc.b());
        EXPECT(0xa8, gbc.c());
        EXPECT(0x4b, gbc.d());
        EXPECT(0x25, gbc.e());
        EXPECT(0x1f, gbc.h());
        EXPECT(0x42, gbc.l());
        EXPECT(0xe7d9, gbc.sp());
        EXPECT(0xed00, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xecfe));
        EXPECT(0x95, gbc.readMem(0xecff));
        // CB 95 009C
        gbc.setState(0x2286, 0xc72, 0x6860, 0xa163, 0x9a1b, 0xdadf, 0x0, 0x1);
        gbc.writeMem(0x2286, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x68, gbc.a());
        EXPECT(0xa1, gbc.b());
        EXPECT(0x63, gbc.c());
        EXPECT(0x9a, gbc.d());
        EXPECT(0x1b, gbc.e());
        EXPECT(0xda, gbc.h());
        EXPECT(0xdb, gbc.l());
        EXPECT(0xc72, gbc.sp());
        EXPECT(0x2288, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 009D
        gbc.setState(0xc4e1, 0xe986, 0xba0, 0x105f, 0xc7da, 0x8459, 0x1, 0x0);
        gbc.writeMem(0xc4e1, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xb, gbc.a());
        EXPECT(0x10, gbc.b());
        EXPECT(0x5f, gbc.c());
        EXPECT(0xc7, gbc.d());
        EXPECT(0xda, gbc.e());
        EXPECT(0x84, gbc.h());
        EXPECT(0x59, gbc.l());
        EXPECT(0xe986, gbc.sp());
        EXPECT(0xc4e3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc4e1));
        EXPECT(0x95, gbc.readMem(0xc4e2));
        // CB 95 009E
        gbc.setState(0x4a71, 0x78f6, 0xce40, 0x6618, 0x7be, 0x4e3a, 0x1, 0x0);
        gbc.writeMem(0x4a71, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xce, gbc.a());
        EXPECT(0x66, gbc.b());
        EXPECT(0x18, gbc.c());
        EXPECT(0x7, gbc.d());
        EXPECT(0xbe, gbc.e());
        EXPECT(0x4e, gbc.h());
        EXPECT(0x3a, gbc.l());
        EXPECT(0x78f6, gbc.sp());
        EXPECT(0x4a73, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 009F
        gbc.setState(0x5d0e, 0x1b70, 0x3cf0, 0x56ba, 0x47bf, 0x766a, 0x1, 0x0);
        gbc.writeMem(0x5d0e, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x3c, gbc.a());
        EXPECT(0x56, gbc.b());
        EXPECT(0xba, gbc.c());
        EXPECT(0x47, gbc.d());
        EXPECT(0xbf, gbc.e());
        EXPECT(0x76, gbc.h());
        EXPECT(0x6a, gbc.l());
        EXPECT(0x1b70, gbc.sp());
        EXPECT(0x5d10, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 00A0
        gbc.setState(0x146c, 0x2692, 0x4cc0, 0xc86d, 0xe19f, 0xc3f3, 0x0, 0x0);
        gbc.writeMem(0x146c, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x4c, gbc.a());
        EXPECT(0xc8, gbc.b());
        EXPECT(0x6d, gbc.c());
        EXPECT(0xe1, gbc.d());
        EXPECT(0x9f, gbc.e());
        EXPECT(0xc3, gbc.h());
        EXPECT(0xf3, gbc.l());
        EXPECT(0x2692, gbc.sp());
        EXPECT(0x146e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 00A1
        gbc.setState(0xcfb0, 0xf811, 0xf2a0, 0x2d4d, 0xe854, 0x72b7, 0x0, 0x0);
        gbc.writeMem(0xcfb0, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xf2, gbc.a());
        EXPECT(0x2d, gbc.b());
        EXPECT(0x4d, gbc.c());
        EXPECT(0xe8, gbc.d());
        EXPECT(0x54, gbc.e());
        EXPECT(0x72, gbc.h());
        EXPECT(0xb3, gbc.l());
        EXPECT(0xf811, gbc.sp());
        EXPECT(0xcfb2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcfb0));
        EXPECT(0x95, gbc.readMem(0xcfb1));
        // CB 95 00A2
        gbc.setState(0x3f5f, 0x6a0a, 0xcf30, 0x7126, 0x7f62, 0xb145, 0x1, 0x0);
        gbc.writeMem(0x3f5f, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xcf, gbc.a());
        EXPECT(0x71, gbc.b());
        EXPECT(0x26, gbc.c());
        EXPECT(0x7f, gbc.d());
        EXPECT(0x62, gbc.e());
        EXPECT(0xb1, gbc.h());
        EXPECT(0x41, gbc.l());
        EXPECT(0x6a0a, gbc.sp());
        EXPECT(0x3f61, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 00A3
        gbc.setState(0x53d6, 0xdda8, 0x6940, 0x3d36, 0x4bea, 0x8e1c, 0x0, 0x0);
        gbc.writeMem(0x53d6, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x69, gbc.a());
        EXPECT(0x3d, gbc.b());
        EXPECT(0x36, gbc.c());
        EXPECT(0x4b, gbc.d());
        EXPECT(0xea, gbc.e());
        EXPECT(0x8e, gbc.h());
        EXPECT(0x18, gbc.l());
        EXPECT(0xdda8, gbc.sp());
        EXPECT(0x53d8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 00A4
        gbc.setState(0x8be8, 0x4b3c, 0x9120, 0x1b6f, 0x29c0, 0x85cd, 0x1, 0x1);
        gbc.writeMem(0x8be8, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x91, gbc.a());
        EXPECT(0x1b, gbc.b());
        EXPECT(0x6f, gbc.c());
        EXPECT(0x29, gbc.d());
        EXPECT(0xc0, gbc.e());
        EXPECT(0x85, gbc.h());
        EXPECT(0xc9, gbc.l());
        EXPECT(0x4b3c, gbc.sp());
        EXPECT(0x8bea, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8be8));
        EXPECT(0x95, gbc.readMem(0x8be9));
        // CB 95 00A5
        gbc.setState(0x24fb, 0x860f, 0xcb10, 0xb79f, 0x7fc7, 0x6ba2, 0x0, 0x0);
        gbc.writeMem(0x24fb, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xcb, gbc.a());
        EXPECT(0xb7, gbc.b());
        EXPECT(0x9f, gbc.c());
        EXPECT(0x7f, gbc.d());
        EXPECT(0xc7, gbc.e());
        EXPECT(0x6b, gbc.h());
        EXPECT(0xa2, gbc.l());
        EXPECT(0x860f, gbc.sp());
        EXPECT(0x24fd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 00A6
        gbc.setState(0x3b9a, 0x5cde, 0x7530, 0x921d, 0xc135, 0xa434, 0x1, 0x0);
        gbc.writeMem(0x3b9a, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x75, gbc.a());
        EXPECT(0x92, gbc.b());
        EXPECT(0x1d, gbc.c());
        EXPECT(0xc1, gbc.d());
        EXPECT(0x35, gbc.e());
        EXPECT(0xa4, gbc.h());
        EXPECT(0x30, gbc.l());
        EXPECT(0x5cde, gbc.sp());
        EXPECT(0x3b9c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 00A7
        gbc.setState(0xe6f7, 0x428e, 0x5c20, 0x512, 0x7f1, 0x9b42, 0x0, 0x0);
        gbc.writeMem(0xe6f7, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x5c, gbc.a());
        EXPECT(0x5, gbc.b());
        EXPECT(0x12, gbc.c());
        EXPECT(0x7, gbc.d());
        EXPECT(0xf1, gbc.e());
        EXPECT(0x9b, gbc.h());
        EXPECT(0x42, gbc.l());
        EXPECT(0x428e, gbc.sp());
        EXPECT(0xe6f9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe6f7));
        EXPECT(0x95, gbc.readMem(0xe6f8));
        // CB 95 00A8
        gbc.setState(0x9515, 0x5c1a, 0xb940, 0xdfa3, 0xe98c, 0xabd9, 0x1, 0x1);
        gbc.writeMem(0x9515, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xb9, gbc.a());
        EXPECT(0xdf, gbc.b());
        EXPECT(0xa3, gbc.c());
        EXPECT(0xe9, gbc.d());
        EXPECT(0x8c, gbc.e());
        EXPECT(0xab, gbc.h());
        EXPECT(0xd9, gbc.l());
        EXPECT(0x5c1a, gbc.sp());
        EXPECT(0x9517, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9515));
        EXPECT(0x95, gbc.readMem(0x9516));
        // CB 95 00A9
        gbc.setState(0x56ef, 0xf84, 0x1690, 0xe0db, 0xdb7d, 0x9b80, 0x1, 0x0);
        gbc.writeMem(0x56ef, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x16, gbc.a());
        EXPECT(0xe0, gbc.b());
        EXPECT(0xdb, gbc.c());
        EXPECT(0xdb, gbc.d());
        EXPECT(0x7d, gbc.e());
        EXPECT(0x9b, gbc.h());
        EXPECT(0x80, gbc.l());
        EXPECT(0xf84, gbc.sp());
        EXPECT(0x56f1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 00AA
        gbc.setState(0x7402, 0x7043, 0xe460, 0xc62c, 0x8c55, 0x5207, 0x1, 0x1);
        gbc.writeMem(0x7402, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xe4, gbc.a());
        EXPECT(0xc6, gbc.b());
        EXPECT(0x2c, gbc.c());
        EXPECT(0x8c, gbc.d());
        EXPECT(0x55, gbc.e());
        EXPECT(0x52, gbc.h());
        EXPECT(0x3, gbc.l());
        EXPECT(0x7043, gbc.sp());
        EXPECT(0x7404, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 00AB
        gbc.setState(0x9ea7, 0x2d23, 0xe940, 0xf0bc, 0xfa67, 0xf4d6, 0x0, 0x1);
        gbc.writeMem(0x9ea7, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xe9, gbc.a());
        EXPECT(0xf0, gbc.b());
        EXPECT(0xbc, gbc.c());
        EXPECT(0xfa, gbc.d());
        EXPECT(0x67, gbc.e());
        EXPECT(0xf4, gbc.h());
        EXPECT(0xd2, gbc.l());
        EXPECT(0x2d23, gbc.sp());
        EXPECT(0x9ea9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9ea7));
        EXPECT(0x95, gbc.readMem(0x9ea8));
        // CB 95 00AC
        gbc.setState(0xc967, 0x5fff, 0x5c20, 0x1270, 0x5ac7, 0xa52f, 0x1, 0x0);
        gbc.writeMem(0xc967, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x5c, gbc.a());
        EXPECT(0x12, gbc.b());
        EXPECT(0x70, gbc.c());
        EXPECT(0x5a, gbc.d());
        EXPECT(0xc7, gbc.e());
        EXPECT(0xa5, gbc.h());
        EXPECT(0x2b, gbc.l());
        EXPECT(0x5fff, gbc.sp());
        EXPECT(0xc969, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc967));
        EXPECT(0x95, gbc.readMem(0xc968));
        // CB 95 00AD
        gbc.setState(0x31ec, 0xfc62, 0x1680, 0xdd21, 0x167a, 0xd3ca, 0x1, 0x1);
        gbc.writeMem(0x31ec, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x16, gbc.a());
        EXPECT(0xdd, gbc.b());
        EXPECT(0x21, gbc.c());
        EXPECT(0x16, gbc.d());
        EXPECT(0x7a, gbc.e());
        EXPECT(0xd3, gbc.h());
        EXPECT(0xca, gbc.l());
        EXPECT(0xfc62, gbc.sp());
        EXPECT(0x31ee, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 00AE
        gbc.setState(0xb112, 0xdf3c, 0x74f0, 0x22bf, 0xf97d, 0x75a6, 0x0, 0x0);
        gbc.writeMem(0xb112, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x74, gbc.a());
        EXPECT(0x22, gbc.b());
        EXPECT(0xbf, gbc.c());
        EXPECT(0xf9, gbc.d());
        EXPECT(0x7d, gbc.e());
        EXPECT(0x75, gbc.h());
        EXPECT(0xa2, gbc.l());
        EXPECT(0xdf3c, gbc.sp());
        EXPECT(0xb114, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb112));
        EXPECT(0x95, gbc.readMem(0xb113));
        // CB 95 00AF
        gbc.setState(0xe005, 0x5b5b, 0x6840, 0x4b4f, 0xe1a9, 0xd4d2, 0x1, 0x1);
        gbc.writeMem(0xe005, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x68, gbc.a());
        EXPECT(0x4b, gbc.b());
        EXPECT(0x4f, gbc.c());
        EXPECT(0xe1, gbc.d());
        EXPECT(0xa9, gbc.e());
        EXPECT(0xd4, gbc.h());
        EXPECT(0xd2, gbc.l());
        EXPECT(0x5b5b, gbc.sp());
        EXPECT(0xe007, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe005));
        EXPECT(0x95, gbc.readMem(0xe006));
        // CB 95 00B0
        gbc.setState(0xbaa7, 0x6bba, 0x9820, 0xf214, 0x650, 0xe194, 0x0, 0x0);
        gbc.writeMem(0xbaa7, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x98, gbc.a());
        EXPECT(0xf2, gbc.b());
        EXPECT(0x14, gbc.c());
        EXPECT(0x6, gbc.d());
        EXPECT(0x50, gbc.e());
        EXPECT(0xe1, gbc.h());
        EXPECT(0x90, gbc.l());
        EXPECT(0x6bba, gbc.sp());
        EXPECT(0xbaa9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbaa7));
        EXPECT(0x95, gbc.readMem(0xbaa8));
        // CB 95 00B1
        gbc.setState(0x84a2, 0x3766, 0x35a0, 0x722a, 0xdaf6, 0x8bf2, 0x1, 0x0);
        gbc.writeMem(0x84a2, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x35, gbc.a());
        EXPECT(0x72, gbc.b());
        EXPECT(0x2a, gbc.c());
        EXPECT(0xda, gbc.d());
        EXPECT(0xf6, gbc.e());
        EXPECT(0x8b, gbc.h());
        EXPECT(0xf2, gbc.l());
        EXPECT(0x3766, gbc.sp());
        EXPECT(0x84a4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x84a2));
        EXPECT(0x95, gbc.readMem(0x84a3));
        // CB 95 00B2
        gbc.setState(0xa467, 0x21a1, 0xf670, 0x73a6, 0xde5f, 0x8e33, 0x0, 0x0);
        gbc.writeMem(0xa467, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xf6, gbc.a());
        EXPECT(0x73, gbc.b());
        EXPECT(0xa6, gbc.c());
        EXPECT(0xde, gbc.d());
        EXPECT(0x5f, gbc.e());
        EXPECT(0x8e, gbc.h());
        EXPECT(0x33, gbc.l());
        EXPECT(0x21a1, gbc.sp());
        EXPECT(0xa469, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa467));
        EXPECT(0x95, gbc.readMem(0xa468));
        // CB 95 00B3
        gbc.setState(0x940, 0x6452, 0xb30, 0x643e, 0xff4a, 0xedc0, 0x0, 0x1);
        gbc.writeMem(0x940, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xb, gbc.a());
        EXPECT(0x64, gbc.b());
        EXPECT(0x3e, gbc.c());
        EXPECT(0xff, gbc.d());
        EXPECT(0x4a, gbc.e());
        EXPECT(0xed, gbc.h());
        EXPECT(0xc0, gbc.l());
        EXPECT(0x6452, gbc.sp());
        EXPECT(0x942, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 00B4
        gbc.setState(0x40c8, 0x3347, 0x8f70, 0x2ff6, 0xedbc, 0x9ce5, 0x0, 0x1);
        gbc.writeMem(0x40c8, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x8f, gbc.a());
        EXPECT(0x2f, gbc.b());
        EXPECT(0xf6, gbc.c());
        EXPECT(0xed, gbc.d());
        EXPECT(0xbc, gbc.e());
        EXPECT(0x9c, gbc.h());
        EXPECT(0xe1, gbc.l());
        EXPECT(0x3347, gbc.sp());
        EXPECT(0x40ca, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 00B5
        gbc.setState(0xc70b, 0x9296, 0x220, 0x85a, 0x69be, 0xb38c, 0x1, 0x0);
        gbc.writeMem(0xc70b, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x2, gbc.a());
        EXPECT(0x8, gbc.b());
        EXPECT(0x5a, gbc.c());
        EXPECT(0x69, gbc.d());
        EXPECT(0xbe, gbc.e());
        EXPECT(0xb3, gbc.h());
        EXPECT(0x88, gbc.l());
        EXPECT(0x9296, gbc.sp());
        EXPECT(0xc70d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc70b));
        EXPECT(0x95, gbc.readMem(0xc70c));
        // CB 95 00B6
        gbc.setState(0x2f3, 0x253d, 0xf110, 0x10cc, 0xdf37, 0xa9ae, 0x1, 0x0);
        gbc.writeMem(0x2f3, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xf1, gbc.a());
        EXPECT(0x10, gbc.b());
        EXPECT(0xcc, gbc.c());
        EXPECT(0xdf, gbc.d());
        EXPECT(0x37, gbc.e());
        EXPECT(0xa9, gbc.h());
        EXPECT(0xaa, gbc.l());
        EXPECT(0x253d, gbc.sp());
        EXPECT(0x2f5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 00B7
        gbc.setState(0x458e, 0xe06e, 0xaed0, 0x9e3a, 0x96bf, 0x40cf, 0x1, 0x0);
        gbc.writeMem(0x458e, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xae, gbc.a());
        EXPECT(0x9e, gbc.b());
        EXPECT(0x3a, gbc.c());
        EXPECT(0x96, gbc.d());
        EXPECT(0xbf, gbc.e());
        EXPECT(0x40, gbc.h());
        EXPECT(0xcb, gbc.l());
        EXPECT(0xe06e, gbc.sp());
        EXPECT(0x4590, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 00B8
        gbc.setState(0xf6a, 0xc466, 0x1c80, 0x626b, 0x124e, 0x4ce7, 0x1, 0x0);
        gbc.writeMem(0xf6a, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x1c, gbc.a());
        EXPECT(0x62, gbc.b());
        EXPECT(0x6b, gbc.c());
        EXPECT(0x12, gbc.d());
        EXPECT(0x4e, gbc.e());
        EXPECT(0x4c, gbc.h());
        EXPECT(0xe3, gbc.l());
        EXPECT(0xc466, gbc.sp());
        EXPECT(0xf6c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 00B9
        gbc.setState(0x34f5, 0x69a2, 0xef10, 0xf4a9, 0xcc3a, 0x9227, 0x1, 0x0);
        gbc.writeMem(0x34f5, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xef, gbc.a());
        EXPECT(0xf4, gbc.b());
        EXPECT(0xa9, gbc.c());
        EXPECT(0xcc, gbc.d());
        EXPECT(0x3a, gbc.e());
        EXPECT(0x92, gbc.h());
        EXPECT(0x23, gbc.l());
        EXPECT(0x69a2, gbc.sp());
        EXPECT(0x34f7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 00BA
        gbc.setState(0x73e2, 0xfdd0, 0x530, 0x5980, 0x5752, 0xd255, 0x1, 0x0);
        gbc.writeMem(0x73e2, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x5, gbc.a());
        EXPECT(0x59, gbc.b());
        EXPECT(0x80, gbc.c());
        EXPECT(0x57, gbc.d());
        EXPECT(0x52, gbc.e());
        EXPECT(0xd2, gbc.h());
        EXPECT(0x51, gbc.l());
        EXPECT(0xfdd0, gbc.sp());
        EXPECT(0x73e4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 00BB
        gbc.setState(0x783a, 0x79e, 0x6360, 0xf7f1, 0x9075, 0x66f2, 0x0, 0x1);
        gbc.writeMem(0x783a, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x63, gbc.a());
        EXPECT(0xf7, gbc.b());
        EXPECT(0xf1, gbc.c());
        EXPECT(0x90, gbc.d());
        EXPECT(0x75, gbc.e());
        EXPECT(0x66, gbc.h());
        EXPECT(0xf2, gbc.l());
        EXPECT(0x79e, gbc.sp());
        EXPECT(0x783c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 00BC
        gbc.setState(0x48b3, 0xaeb0, 0xb480, 0x2456, 0x7843, 0x6ff6, 0x0, 0x0);
        gbc.writeMem(0x48b3, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xb4, gbc.a());
        EXPECT(0x24, gbc.b());
        EXPECT(0x56, gbc.c());
        EXPECT(0x78, gbc.d());
        EXPECT(0x43, gbc.e());
        EXPECT(0x6f, gbc.h());
        EXPECT(0xf2, gbc.l());
        EXPECT(0xaeb0, gbc.sp());
        EXPECT(0x48b5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 00BE
        gbc.setState(0xaf0, 0x2b8, 0xa3a0, 0x1f6f, 0xac5b, 0xeaf0, 0x0, 0x1);
        gbc.writeMem(0xaf0, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xa3, gbc.a());
        EXPECT(0x1f, gbc.b());
        EXPECT(0x6f, gbc.c());
        EXPECT(0xac, gbc.d());
        EXPECT(0x5b, gbc.e());
        EXPECT(0xea, gbc.h());
        EXPECT(0xf0, gbc.l());
        EXPECT(0x2b8, gbc.sp());
        EXPECT(0xaf2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 00BF
        gbc.setState(0x4c56, 0x1425, 0x1520, 0x7f64, 0x9ee4, 0xf8ed, 0x0, 0x1);
        gbc.writeMem(0x4c56, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x15, gbc.a());
        EXPECT(0x7f, gbc.b());
        EXPECT(0x64, gbc.c());
        EXPECT(0x9e, gbc.d());
        EXPECT(0xe4, gbc.e());
        EXPECT(0xf8, gbc.h());
        EXPECT(0xe9, gbc.l());
        EXPECT(0x1425, gbc.sp());
        EXPECT(0x4c58, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 00C0
        gbc.setState(0xe5f2, 0xa09f, 0xf6e0, 0xe591, 0x1700, 0x7a4f, 0x1, 0x0);
        gbc.writeMem(0xe5f2, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xf6, gbc.a());
        EXPECT(0xe5, gbc.b());
        EXPECT(0x91, gbc.c());
        EXPECT(0x17, gbc.d());
        EXPECT(0x0, gbc.e());
        EXPECT(0x7a, gbc.h());
        EXPECT(0x4b, gbc.l());
        EXPECT(0xa09f, gbc.sp());
        EXPECT(0xe5f4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe5f2));
        EXPECT(0x95, gbc.readMem(0xe5f3));
        // CB 95 00C1
        gbc.setState(0x345c, 0x42f0, 0xa530, 0xeca8, 0x2cc3, 0x90a1, 0x1, 0x0);
        gbc.writeMem(0x345c, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xa5, gbc.a());
        EXPECT(0xec, gbc.b());
        EXPECT(0xa8, gbc.c());
        EXPECT(0x2c, gbc.d());
        EXPECT(0xc3, gbc.e());
        EXPECT(0x90, gbc.h());
        EXPECT(0xa1, gbc.l());
        EXPECT(0x42f0, gbc.sp());
        EXPECT(0x345e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 00C2
        gbc.setState(0x8856, 0xa85e, 0xde40, 0x8995, 0x194e, 0x2fd1, 0x1, 0x0);
        gbc.writeMem(0x8856, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xde, gbc.a());
        EXPECT(0x89, gbc.b());
        EXPECT(0x95, gbc.c());
        EXPECT(0x19, gbc.d());
        EXPECT(0x4e, gbc.e());
        EXPECT(0x2f, gbc.h());
        EXPECT(0xd1, gbc.l());
        EXPECT(0xa85e, gbc.sp());
        EXPECT(0x8858, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8856));
        EXPECT(0x95, gbc.readMem(0x8857));
        // CB 95 00C3
        gbc.setState(0x440d, 0x5ab, 0x1ad0, 0x80d7, 0x1f8d, 0x13bd, 0x1, 0x1);
        gbc.writeMem(0x440d, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x1a, gbc.a());
        EXPECT(0x80, gbc.b());
        EXPECT(0xd7, gbc.c());
        EXPECT(0x1f, gbc.d());
        EXPECT(0x8d, gbc.e());
        EXPECT(0x13, gbc.h());
        EXPECT(0xb9, gbc.l());
        EXPECT(0x5ab, gbc.sp());
        EXPECT(0x440f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 00C4
        gbc.setState(0x22aa, 0xd66b, 0xe6c0, 0xf139, 0x1fea, 0xc514, 0x1, 0x0);
        gbc.writeMem(0x22aa, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xe6, gbc.a());
        EXPECT(0xf1, gbc.b());
        EXPECT(0x39, gbc.c());
        EXPECT(0x1f, gbc.d());
        EXPECT(0xea, gbc.e());
        EXPECT(0xc5, gbc.h());
        EXPECT(0x10, gbc.l());
        EXPECT(0xd66b, gbc.sp());
        EXPECT(0x22ac, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 00C5
        gbc.setState(0x3da7, 0xbb10, 0x8e10, 0x38bf, 0x2c36, 0x1c81, 0x0, 0x1);
        gbc.writeMem(0x3da7, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x8e, gbc.a());
        EXPECT(0x38, gbc.b());
        EXPECT(0xbf, gbc.c());
        EXPECT(0x2c, gbc.d());
        EXPECT(0x36, gbc.e());
        EXPECT(0x1c, gbc.h());
        EXPECT(0x81, gbc.l());
        EXPECT(0xbb10, gbc.sp());
        EXPECT(0x3da9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 00C6
        gbc.setState(0x511b, 0x75c4, 0x5a20, 0xaf39, 0xde10, 0xacc7, 0x0, 0x0);
        gbc.writeMem(0x511b, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x5a, gbc.a());
        EXPECT(0xaf, gbc.b());
        EXPECT(0x39, gbc.c());
        EXPECT(0xde, gbc.d());
        EXPECT(0x10, gbc.e());
        EXPECT(0xac, gbc.h());
        EXPECT(0xc3, gbc.l());
        EXPECT(0x75c4, gbc.sp());
        EXPECT(0x511d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 00C8
        gbc.setState(0x7a85, 0x9381, 0x7a0, 0xb6e7, 0x947d, 0x46d2, 0x1, 0x1);
        gbc.writeMem(0x7a85, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x7, gbc.a());
        EXPECT(0xb6, gbc.b());
        EXPECT(0xe7, gbc.c());
        EXPECT(0x94, gbc.d());
        EXPECT(0x7d, gbc.e());
        EXPECT(0x46, gbc.h());
        EXPECT(0xd2, gbc.l());
        EXPECT(0x9381, gbc.sp());
        EXPECT(0x7a87, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 00C9
        gbc.setState(0x9bff, 0x55cd, 0x9320, 0xec61, 0xdad7, 0x78b, 0x1, 0x1);
        gbc.writeMem(0x9bff, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x93, gbc.a());
        EXPECT(0xec, gbc.b());
        EXPECT(0x61, gbc.c());
        EXPECT(0xda, gbc.d());
        EXPECT(0xd7, gbc.e());
        EXPECT(0x7, gbc.h());
        EXPECT(0x8b, gbc.l());
        EXPECT(0x55cd, gbc.sp());
        EXPECT(0x9c01, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9bff));
        EXPECT(0x95, gbc.readMem(0x9c00));
        // CB 95 00CB
        gbc.setState(0x1d17, 0x8142, 0x5580, 0x6bd2, 0xb360, 0x2c87, 0x1, 0x1);
        gbc.writeMem(0x1d17, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x55, gbc.a());
        EXPECT(0x6b, gbc.b());
        EXPECT(0xd2, gbc.c());
        EXPECT(0xb3, gbc.d());
        EXPECT(0x60, gbc.e());
        EXPECT(0x2c, gbc.h());
        EXPECT(0x83, gbc.l());
        EXPECT(0x8142, gbc.sp());
        EXPECT(0x1d19, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 00CC
        gbc.setState(0xc22a, 0xd422, 0xec30, 0x8974, 0x414c, 0xc72, 0x0, 0x0);
        gbc.writeMem(0xc22a, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xec, gbc.a());
        EXPECT(0x89, gbc.b());
        EXPECT(0x74, gbc.c());
        EXPECT(0x41, gbc.d());
        EXPECT(0x4c, gbc.e());
        EXPECT(0xc, gbc.h());
        EXPECT(0x72, gbc.l());
        EXPECT(0xd422, gbc.sp());
        EXPECT(0xc22c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc22a));
        EXPECT(0x95, gbc.readMem(0xc22b));
        // CB 95 00CD
        gbc.setState(0xb81b, 0x6601, 0x1290, 0xc481, 0x515e, 0x9a7f, 0x0, 0x1);
        gbc.writeMem(0xb81b, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x12, gbc.a());
        EXPECT(0xc4, gbc.b());
        EXPECT(0x81, gbc.c());
        EXPECT(0x51, gbc.d());
        EXPECT(0x5e, gbc.e());
        EXPECT(0x9a, gbc.h());
        EXPECT(0x7b, gbc.l());
        EXPECT(0x6601, gbc.sp());
        EXPECT(0xb81d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb81b));
        EXPECT(0x95, gbc.readMem(0xb81c));
        // CB 95 00CE
        gbc.setState(0x412, 0x8ca8, 0xea10, 0x503d, 0x3f28, 0x53c, 0x1, 0x1);
        gbc.writeMem(0x412, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xea, gbc.a());
        EXPECT(0x50, gbc.b());
        EXPECT(0x3d, gbc.c());
        EXPECT(0x3f, gbc.d());
        EXPECT(0x28, gbc.e());
        EXPECT(0x5, gbc.h());
        EXPECT(0x38, gbc.l());
        EXPECT(0x8ca8, gbc.sp());
        EXPECT(0x414, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 00CF
        gbc.setState(0x347e, 0xa507, 0xa640, 0x5ba4, 0xb7b7, 0xfd29, 0x1, 0x0);
        gbc.writeMem(0x347e, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xa6, gbc.a());
        EXPECT(0x5b, gbc.b());
        EXPECT(0xa4, gbc.c());
        EXPECT(0xb7, gbc.d());
        EXPECT(0xb7, gbc.e());
        EXPECT(0xfd, gbc.h());
        EXPECT(0x29, gbc.l());
        EXPECT(0xa507, gbc.sp());
        EXPECT(0x3480, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 00D0
        gbc.setState(0x7f81, 0x6967, 0x80a0, 0x34a5, 0x77ee, 0x71c2, 0x1, 0x0);
        gbc.writeMem(0x7f81, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x80, gbc.a());
        EXPECT(0x34, gbc.b());
        EXPECT(0xa5, gbc.c());
        EXPECT(0x77, gbc.d());
        EXPECT(0xee, gbc.e());
        EXPECT(0x71, gbc.h());
        EXPECT(0xc2, gbc.l());
        EXPECT(0x6967, gbc.sp());
        EXPECT(0x7f83, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 00D1
        gbc.setState(0xefb5, 0x4d63, 0x8140, 0x6b2c, 0xec19, 0xc28e, 0x1, 0x0);
        gbc.writeMem(0xefb5, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x81, gbc.a());
        EXPECT(0x6b, gbc.b());
        EXPECT(0x2c, gbc.c());
        EXPECT(0xec, gbc.d());
        EXPECT(0x19, gbc.e());
        EXPECT(0xc2, gbc.h());
        EXPECT(0x8a, gbc.l());
        EXPECT(0x4d63, gbc.sp());
        EXPECT(0xefb7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xefb5));
        EXPECT(0x95, gbc.readMem(0xefb6));
        // CB 95 00D2
        gbc.setState(0xc580, 0xd1bf, 0xe190, 0x78b0, 0x2d0, 0xa4dd, 0x0, 0x1);
        gbc.writeMem(0xc580, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xe1, gbc.a());
        EXPECT(0x78, gbc.b());
        EXPECT(0xb0, gbc.c());
        EXPECT(0x2, gbc.d());
        EXPECT(0xd0, gbc.e());
        EXPECT(0xa4, gbc.h());
        EXPECT(0xd9, gbc.l());
        EXPECT(0xd1bf, gbc.sp());
        EXPECT(0xc582, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc580));
        EXPECT(0x95, gbc.readMem(0xc581));
        // CB 95 00D3
        gbc.setState(0x99b, 0x4366, 0x2d80, 0xba2d, 0x7bfb, 0xf8b5, 0x1, 0x0);
        gbc.writeMem(0x99b, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x2d, gbc.a());
        EXPECT(0xba, gbc.b());
        EXPECT(0x2d, gbc.c());
        EXPECT(0x7b, gbc.d());
        EXPECT(0xfb, gbc.e());
        EXPECT(0xf8, gbc.h());
        EXPECT(0xb1, gbc.l());
        EXPECT(0x4366, gbc.sp());
        EXPECT(0x99d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 00D4
        gbc.setState(0x13d1, 0x2ae0, 0xa50, 0xb1e6, 0x118e, 0xa81d, 0x1, 0x1);
        gbc.writeMem(0x13d1, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xa, gbc.a());
        EXPECT(0xb1, gbc.b());
        EXPECT(0xe6, gbc.c());
        EXPECT(0x11, gbc.d());
        EXPECT(0x8e, gbc.e());
        EXPECT(0xa8, gbc.h());
        EXPECT(0x19, gbc.l());
        EXPECT(0x2ae0, gbc.sp());
        EXPECT(0x13d3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 00D5
        gbc.setState(0x163b, 0x1252, 0xddf0, 0x7894, 0x2c4e, 0x2e26, 0x0, 0x0);
        gbc.writeMem(0x163b, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xdd, gbc.a());
        EXPECT(0x78, gbc.b());
        EXPECT(0x94, gbc.c());
        EXPECT(0x2c, gbc.d());
        EXPECT(0x4e, gbc.e());
        EXPECT(0x2e, gbc.h());
        EXPECT(0x22, gbc.l());
        EXPECT(0x1252, gbc.sp());
        EXPECT(0x163d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 00D6
        gbc.setState(0xbf0b, 0x11ec, 0xeb10, 0x71ff, 0xd2bd, 0x1fb8, 0x1, 0x0);
        gbc.writeMem(0xbf0b, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xeb, gbc.a());
        EXPECT(0x71, gbc.b());
        EXPECT(0xff, gbc.c());
        EXPECT(0xd2, gbc.d());
        EXPECT(0xbd, gbc.e());
        EXPECT(0x1f, gbc.h());
        EXPECT(0xb8, gbc.l());
        EXPECT(0x11ec, gbc.sp());
        EXPECT(0xbf0d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbf0b));
        EXPECT(0x95, gbc.readMem(0xbf0c));
        // CB 95 00D7
        gbc.setState(0x3eb3, 0xdab1, 0xae50, 0x5282, 0x92c4, 0xb26c, 0x0, 0x0);
        gbc.writeMem(0x3eb3, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xae, gbc.a());
        EXPECT(0x52, gbc.b());
        EXPECT(0x82, gbc.c());
        EXPECT(0x92, gbc.d());
        EXPECT(0xc4, gbc.e());
        EXPECT(0xb2, gbc.h());
        EXPECT(0x68, gbc.l());
        EXPECT(0xdab1, gbc.sp());
        EXPECT(0x3eb5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 00D8
        gbc.setState(0x8886, 0xf6b0, 0x4ec0, 0xd8c6, 0x6031, 0x107e, 0x1, 0x0);
        gbc.writeMem(0x8886, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x4e, gbc.a());
        EXPECT(0xd8, gbc.b());
        EXPECT(0xc6, gbc.c());
        EXPECT(0x60, gbc.d());
        EXPECT(0x31, gbc.e());
        EXPECT(0x10, gbc.h());
        EXPECT(0x7a, gbc.l());
        EXPECT(0xf6b0, gbc.sp());
        EXPECT(0x8888, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8886));
        EXPECT(0x95, gbc.readMem(0x8887));
        // CB 95 00D9
        gbc.setState(0xa8bb, 0xd497, 0x77b0, 0x5de5, 0x71a9, 0x3064, 0x0, 0x0);
        gbc.writeMem(0xa8bb, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x77, gbc.a());
        EXPECT(0x5d, gbc.b());
        EXPECT(0xe5, gbc.c());
        EXPECT(0x71, gbc.d());
        EXPECT(0xa9, gbc.e());
        EXPECT(0x30, gbc.h());
        EXPECT(0x60, gbc.l());
        EXPECT(0xd497, gbc.sp());
        EXPECT(0xa8bd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa8bb));
        EXPECT(0x95, gbc.readMem(0xa8bc));
        // CB 95 00DA
        gbc.setState(0x153e, 0xd478, 0x6b10, 0xb6bd, 0xb198, 0xfd69, 0x1, 0x1);
        gbc.writeMem(0x153e, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x6b, gbc.a());
        EXPECT(0xb6, gbc.b());
        EXPECT(0xbd, gbc.c());
        EXPECT(0xb1, gbc.d());
        EXPECT(0x98, gbc.e());
        EXPECT(0xfd, gbc.h());
        EXPECT(0x69, gbc.l());
        EXPECT(0xd478, gbc.sp());
        EXPECT(0x1540, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 00DB
        gbc.setState(0x392a, 0x3a94, 0xc420, 0xbea4, 0xb1a8, 0xf9a7, 0x1, 0x1);
        gbc.writeMem(0x392a, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xc4, gbc.a());
        EXPECT(0xbe, gbc.b());
        EXPECT(0xa4, gbc.c());
        EXPECT(0xb1, gbc.d());
        EXPECT(0xa8, gbc.e());
        EXPECT(0xf9, gbc.h());
        EXPECT(0xa3, gbc.l());
        EXPECT(0x3a94, gbc.sp());
        EXPECT(0x392c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 00DC
        gbc.setState(0x8410, 0x872b, 0xf7c0, 0xeeb6, 0xfc0f, 0xdae8, 0x1, 0x1);
        gbc.writeMem(0x8410, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xf7, gbc.a());
        EXPECT(0xee, gbc.b());
        EXPECT(0xb6, gbc.c());
        EXPECT(0xfc, gbc.d());
        EXPECT(0xf, gbc.e());
        EXPECT(0xda, gbc.h());
        EXPECT(0xe8, gbc.l());
        EXPECT(0x872b, gbc.sp());
        EXPECT(0x8412, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8410));
        EXPECT(0x95, gbc.readMem(0x8411));
        // CB 95 00DD
        gbc.setState(0x1e1d, 0x5a11, 0x9000, 0x7280, 0xe159, 0x8970, 0x0, 0x1);
        gbc.writeMem(0x1e1d, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x90, gbc.a());
        EXPECT(0x72, gbc.b());
        EXPECT(0x80, gbc.c());
        EXPECT(0xe1, gbc.d());
        EXPECT(0x59, gbc.e());
        EXPECT(0x89, gbc.h());
        EXPECT(0x70, gbc.l());
        EXPECT(0x5a11, gbc.sp());
        EXPECT(0x1e1f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 00DF
        gbc.setState(0x4c5e, 0x5985, 0xeef0, 0x9c07, 0x7db8, 0x4889, 0x0, 0x0);
        gbc.writeMem(0x4c5e, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xee, gbc.a());
        EXPECT(0x9c, gbc.b());
        EXPECT(0x7, gbc.c());
        EXPECT(0x7d, gbc.d());
        EXPECT(0xb8, gbc.e());
        EXPECT(0x48, gbc.h());
        EXPECT(0x89, gbc.l());
        EXPECT(0x5985, gbc.sp());
        EXPECT(0x4c60, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 00E0
        gbc.setState(0xd436, 0x832b, 0x89f0, 0xe28e, 0x998d, 0x57ce, 0x0, 0x0);
        gbc.writeMem(0xd436, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x89, gbc.a());
        EXPECT(0xe2, gbc.b());
        EXPECT(0x8e, gbc.c());
        EXPECT(0x99, gbc.d());
        EXPECT(0x8d, gbc.e());
        EXPECT(0x57, gbc.h());
        EXPECT(0xca, gbc.l());
        EXPECT(0x832b, gbc.sp());
        EXPECT(0xd438, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd436));
        EXPECT(0x95, gbc.readMem(0xd437));
        // CB 95 00E1
        gbc.setState(0xace, 0xbabb, 0xaa20, 0x45c4, 0x62b0, 0x4f20, 0x0, 0x0);
        gbc.writeMem(0xace, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xaa, gbc.a());
        EXPECT(0x45, gbc.b());
        EXPECT(0xc4, gbc.c());
        EXPECT(0x62, gbc.d());
        EXPECT(0xb0, gbc.e());
        EXPECT(0x4f, gbc.h());
        EXPECT(0x20, gbc.l());
        EXPECT(0xbabb, gbc.sp());
        EXPECT(0xad0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 00E2
        gbc.setState(0x8341, 0x25e6, 0xd400, 0x6b0f, 0xc824, 0x47c9, 0x1, 0x0);
        gbc.writeMem(0x8341, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xd4, gbc.a());
        EXPECT(0x6b, gbc.b());
        EXPECT(0xf, gbc.c());
        EXPECT(0xc8, gbc.d());
        EXPECT(0x24, gbc.e());
        EXPECT(0x47, gbc.h());
        EXPECT(0xc9, gbc.l());
        EXPECT(0x25e6, gbc.sp());
        EXPECT(0x8343, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8341));
        EXPECT(0x95, gbc.readMem(0x8342));
        // CB 95 00E3
        gbc.setState(0xb28, 0xba97, 0xf030, 0x96f6, 0xbd19, 0xf077, 0x1, 0x1);
        gbc.writeMem(0xb28, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xf0, gbc.a());
        EXPECT(0x96, gbc.b());
        EXPECT(0xf6, gbc.c());
        EXPECT(0xbd, gbc.d());
        EXPECT(0x19, gbc.e());
        EXPECT(0xf0, gbc.h());
        EXPECT(0x73, gbc.l());
        EXPECT(0xba97, gbc.sp());
        EXPECT(0xb2a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 00E4
        gbc.setState(0xe6bb, 0xa367, 0x2270, 0xccd3, 0x5545, 0x9ebd, 0x1, 0x1);
        gbc.writeMem(0xe6bb, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x22, gbc.a());
        EXPECT(0xcc, gbc.b());
        EXPECT(0xd3, gbc.c());
        EXPECT(0x55, gbc.d());
        EXPECT(0x45, gbc.e());
        EXPECT(0x9e, gbc.h());
        EXPECT(0xb9, gbc.l());
        EXPECT(0xa367, gbc.sp());
        EXPECT(0xe6bd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe6bb));
        EXPECT(0x95, gbc.readMem(0xe6bc));
        // CB 95 00E5
        gbc.setState(0x3d2a, 0xdd7, 0x4ca0, 0xeaa8, 0xc03, 0x8324, 0x1, 0x0);
        gbc.writeMem(0x3d2a, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x4c, gbc.a());
        EXPECT(0xea, gbc.b());
        EXPECT(0xa8, gbc.c());
        EXPECT(0xc, gbc.d());
        EXPECT(0x3, gbc.e());
        EXPECT(0x83, gbc.h());
        EXPECT(0x20, gbc.l());
        EXPECT(0xdd7, gbc.sp());
        EXPECT(0x3d2c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 00E6
        gbc.setState(0xd150, 0xc22f, 0xb10, 0xe727, 0x1ea1, 0xda0c, 0x1, 0x1);
        gbc.writeMem(0xd150, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xb, gbc.a());
        EXPECT(0xe7, gbc.b());
        EXPECT(0x27, gbc.c());
        EXPECT(0x1e, gbc.d());
        EXPECT(0xa1, gbc.e());
        EXPECT(0xda, gbc.h());
        EXPECT(0x8, gbc.l());
        EXPECT(0xc22f, gbc.sp());
        EXPECT(0xd152, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd150));
        EXPECT(0x95, gbc.readMem(0xd151));
        // CB 95 00E7
        gbc.setState(0xc2, 0x3143, 0x86e0, 0x21a1, 0xa99f, 0x8c70, 0x0, 0x1);
        gbc.writeMem(0xc2, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x86, gbc.a());
        EXPECT(0x21, gbc.b());
        EXPECT(0xa1, gbc.c());
        EXPECT(0xa9, gbc.d());
        EXPECT(0x9f, gbc.e());
        EXPECT(0x8c, gbc.h());
        EXPECT(0x70, gbc.l());
        EXPECT(0x3143, gbc.sp());
        EXPECT(0xc4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 00E8
        gbc.setState(0xcd23, 0xc895, 0x700, 0xabda, 0xfcf5, 0x2b30, 0x1, 0x0);
        gbc.writeMem(0xcd23, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x7, gbc.a());
        EXPECT(0xab, gbc.b());
        EXPECT(0xda, gbc.c());
        EXPECT(0xfc, gbc.d());
        EXPECT(0xf5, gbc.e());
        EXPECT(0x2b, gbc.h());
        EXPECT(0x30, gbc.l());
        EXPECT(0xc895, gbc.sp());
        EXPECT(0xcd25, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcd23));
        EXPECT(0x95, gbc.readMem(0xcd24));
        // CB 95 00E9
        gbc.setState(0xcb72, 0x8325, 0x500, 0x1a57, 0xe199, 0x73f2, 0x1, 0x0);
        gbc.writeMem(0xcb72, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x5, gbc.a());
        EXPECT(0x1a, gbc.b());
        EXPECT(0x57, gbc.c());
        EXPECT(0xe1, gbc.d());
        EXPECT(0x99, gbc.e());
        EXPECT(0x73, gbc.h());
        EXPECT(0xf2, gbc.l());
        EXPECT(0x8325, gbc.sp());
        EXPECT(0xcb74, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcb72));
        EXPECT(0x95, gbc.readMem(0xcb73));
        // CB 95 00EA
        gbc.setState(0x62dc, 0x9096, 0xcd60, 0xf150, 0xe89d, 0xeae2, 0x1, 0x1);
        gbc.writeMem(0x62dc, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xcd, gbc.a());
        EXPECT(0xf1, gbc.b());
        EXPECT(0x50, gbc.c());
        EXPECT(0xe8, gbc.d());
        EXPECT(0x9d, gbc.e());
        EXPECT(0xea, gbc.h());
        EXPECT(0xe2, gbc.l());
        EXPECT(0x9096, gbc.sp());
        EXPECT(0x62de, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 00EB
        gbc.setState(0x4bca, 0xbf5a, 0x8950, 0x4778, 0x8156, 0x5ef5, 0x1, 0x1);
        gbc.writeMem(0x4bca, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x89, gbc.a());
        EXPECT(0x47, gbc.b());
        EXPECT(0x78, gbc.c());
        EXPECT(0x81, gbc.d());
        EXPECT(0x56, gbc.e());
        EXPECT(0x5e, gbc.h());
        EXPECT(0xf1, gbc.l());
        EXPECT(0xbf5a, gbc.sp());
        EXPECT(0x4bcc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 00EC
        gbc.setState(0xc87d, 0xba18, 0xbba0, 0xf06f, 0xf508, 0xb417, 0x0, 0x1);
        gbc.writeMem(0xc87d, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xbb, gbc.a());
        EXPECT(0xf0, gbc.b());
        EXPECT(0x6f, gbc.c());
        EXPECT(0xf5, gbc.d());
        EXPECT(0x8, gbc.e());
        EXPECT(0xb4, gbc.h());
        EXPECT(0x13, gbc.l());
        EXPECT(0xba18, gbc.sp());
        EXPECT(0xc87f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc87d));
        EXPECT(0x95, gbc.readMem(0xc87e));
        // CB 95 00ED
        gbc.setState(0x5fb7, 0xc71, 0x1b20, 0x8c37, 0xe0f7, 0x1028, 0x1, 0x1);
        gbc.writeMem(0x5fb7, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x1b, gbc.a());
        EXPECT(0x8c, gbc.b());
        EXPECT(0x37, gbc.c());
        EXPECT(0xe0, gbc.d());
        EXPECT(0xf7, gbc.e());
        EXPECT(0x10, gbc.h());
        EXPECT(0x28, gbc.l());
        EXPECT(0xc71, gbc.sp());
        EXPECT(0x5fb9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 00EE
        gbc.setState(0x8da0, 0x8fdf, 0xb590, 0xa5ed, 0xd3a8, 0x3d14, 0x0, 0x0);
        gbc.writeMem(0x8da0, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xb5, gbc.a());
        EXPECT(0xa5, gbc.b());
        EXPECT(0xed, gbc.c());
        EXPECT(0xd3, gbc.d());
        EXPECT(0xa8, gbc.e());
        EXPECT(0x3d, gbc.h());
        EXPECT(0x10, gbc.l());
        EXPECT(0x8fdf, gbc.sp());
        EXPECT(0x8da2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8da0));
        EXPECT(0x95, gbc.readMem(0x8da1));
        // CB 95 00EF
        gbc.setState(0x4ebc, 0x975c, 0xb600, 0x7949, 0x8ff9, 0x5df9, 0x0, 0x1);
        gbc.writeMem(0x4ebc, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xb6, gbc.a());
        EXPECT(0x79, gbc.b());
        EXPECT(0x49, gbc.c());
        EXPECT(0x8f, gbc.d());
        EXPECT(0xf9, gbc.e());
        EXPECT(0x5d, gbc.h());
        EXPECT(0xf9, gbc.l());
        EXPECT(0x975c, gbc.sp());
        EXPECT(0x4ebe, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 00F0
        gbc.setState(0x4bda, 0x6f60, 0xd440, 0x7c33, 0xbe7f, 0x3772, 0x0, 0x0);
        gbc.writeMem(0x4bda, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xd4, gbc.a());
        EXPECT(0x7c, gbc.b());
        EXPECT(0x33, gbc.c());
        EXPECT(0xbe, gbc.d());
        EXPECT(0x7f, gbc.e());
        EXPECT(0x37, gbc.h());
        EXPECT(0x72, gbc.l());
        EXPECT(0x6f60, gbc.sp());
        EXPECT(0x4bdc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 00F1
        gbc.setState(0xe38e, 0xa9b2, 0x2da0, 0x669f, 0x9461, 0x5643, 0x0, 0x1);
        gbc.writeMem(0xe38e, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x2d, gbc.a());
        EXPECT(0x66, gbc.b());
        EXPECT(0x9f, gbc.c());
        EXPECT(0x94, gbc.d());
        EXPECT(0x61, gbc.e());
        EXPECT(0x56, gbc.h());
        EXPECT(0x43, gbc.l());
        EXPECT(0xa9b2, gbc.sp());
        EXPECT(0xe390, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe38e));
        EXPECT(0x95, gbc.readMem(0xe38f));
        // CB 95 00F2
        gbc.setState(0xaa19, 0x53db, 0x5420, 0x6e2c, 0x367c, 0x6722, 0x0, 0x0);
        gbc.writeMem(0xaa19, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x54, gbc.a());
        EXPECT(0x6e, gbc.b());
        EXPECT(0x2c, gbc.c());
        EXPECT(0x36, gbc.d());
        EXPECT(0x7c, gbc.e());
        EXPECT(0x67, gbc.h());
        EXPECT(0x22, gbc.l());
        EXPECT(0x53db, gbc.sp());
        EXPECT(0xaa1b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaa19));
        EXPECT(0x95, gbc.readMem(0xaa1a));
        // CB 95 00F3
        gbc.setState(0x82bd, 0xd825, 0xd020, 0x6588, 0x820f, 0xb867, 0x0, 0x1);
        gbc.writeMem(0x82bd, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xd0, gbc.a());
        EXPECT(0x65, gbc.b());
        EXPECT(0x88, gbc.c());
        EXPECT(0x82, gbc.d());
        EXPECT(0xf, gbc.e());
        EXPECT(0xb8, gbc.h());
        EXPECT(0x63, gbc.l());
        EXPECT(0xd825, gbc.sp());
        EXPECT(0x82bf, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x82bd));
        EXPECT(0x95, gbc.readMem(0x82be));
        // CB 95 00F4
        gbc.setState(0x178b, 0x42c9, 0x1df0, 0x1d56, 0xd464, 0x5203, 0x1, 0x1);
        gbc.writeMem(0x178b, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x1d, gbc.a());
        EXPECT(0x1d, gbc.b());
        EXPECT(0x56, gbc.c());
        EXPECT(0xd4, gbc.d());
        EXPECT(0x64, gbc.e());
        EXPECT(0x52, gbc.h());
        EXPECT(0x3, gbc.l());
        EXPECT(0x42c9, gbc.sp());
        EXPECT(0x178d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 00F5
        gbc.setState(0x616c, 0xb0bd, 0x810, 0x687d, 0xa301, 0xb7b1, 0x1, 0x0);
        gbc.writeMem(0x616c, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x8, gbc.a());
        EXPECT(0x68, gbc.b());
        EXPECT(0x7d, gbc.c());
        EXPECT(0xa3, gbc.d());
        EXPECT(0x1, gbc.e());
        EXPECT(0xb7, gbc.h());
        EXPECT(0xb1, gbc.l());
        EXPECT(0xb0bd, gbc.sp());
        EXPECT(0x616e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 00F6
        gbc.setState(0xa487, 0xb88f, 0xc340, 0x591b, 0x9407, 0xab02, 0x1, 0x1);
        gbc.writeMem(0xa487, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xc3, gbc.a());
        EXPECT(0x59, gbc.b());
        EXPECT(0x1b, gbc.c());
        EXPECT(0x94, gbc.d());
        EXPECT(0x7, gbc.e());
        EXPECT(0xab, gbc.h());
        EXPECT(0x2, gbc.l());
        EXPECT(0xb88f, gbc.sp());
        EXPECT(0xa489, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa487));
        EXPECT(0x95, gbc.readMem(0xa488));
        // CB 95 00F7
        gbc.setState(0xdf54, 0x25aa, 0xdcb0, 0x8ef0, 0x8b3a, 0x6407, 0x1, 0x0);
        gbc.writeMem(0xdf54, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xdc, gbc.a());
        EXPECT(0x8e, gbc.b());
        EXPECT(0xf0, gbc.c());
        EXPECT(0x8b, gbc.d());
        EXPECT(0x3a, gbc.e());
        EXPECT(0x64, gbc.h());
        EXPECT(0x3, gbc.l());
        EXPECT(0x25aa, gbc.sp());
        EXPECT(0xdf56, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdf54));
        EXPECT(0x95, gbc.readMem(0xdf55));
        // CB 95 00F8
        gbc.setState(0x5d28, 0xcff6, 0x2320, 0x56a8, 0xdd9c, 0x2fd, 0x0, 0x1);
        gbc.writeMem(0x5d28, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x23, gbc.a());
        EXPECT(0x56, gbc.b());
        EXPECT(0xa8, gbc.c());
        EXPECT(0xdd, gbc.d());
        EXPECT(0x9c, gbc.e());
        EXPECT(0x2, gbc.h());
        EXPECT(0xf9, gbc.l());
        EXPECT(0xcff6, gbc.sp());
        EXPECT(0x5d2a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 00F9
        gbc.setState(0xb4c8, 0x30d5, 0x6800, 0x18c5, 0x9c30, 0x12a9, 0x0, 0x1);
        gbc.writeMem(0xb4c8, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x68, gbc.a());
        EXPECT(0x18, gbc.b());
        EXPECT(0xc5, gbc.c());
        EXPECT(0x9c, gbc.d());
        EXPECT(0x30, gbc.e());
        EXPECT(0x12, gbc.h());
        EXPECT(0xa9, gbc.l());
        EXPECT(0x30d5, gbc.sp());
        EXPECT(0xb4ca, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb4c8));
        EXPECT(0x95, gbc.readMem(0xb4c9));
        // CB 95 00FA
        gbc.setState(0x236c, 0x5db6, 0x7470, 0x28cd, 0xa786, 0x2139, 0x0, 0x0);
        gbc.writeMem(0x236c, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x74, gbc.a());
        EXPECT(0x28, gbc.b());
        EXPECT(0xcd, gbc.c());
        EXPECT(0xa7, gbc.d());
        EXPECT(0x86, gbc.e());
        EXPECT(0x21, gbc.h());
        EXPECT(0x39, gbc.l());
        EXPECT(0x5db6, gbc.sp());
        EXPECT(0x236e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 00FC
        gbc.setState(0xf0a, 0x3e82, 0x6940, 0x9120, 0x45a2, 0x6e72, 0x0, 0x1);
        gbc.writeMem(0xf0a, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x69, gbc.a());
        EXPECT(0x91, gbc.b());
        EXPECT(0x20, gbc.c());
        EXPECT(0x45, gbc.d());
        EXPECT(0xa2, gbc.e());
        EXPECT(0x6e, gbc.h());
        EXPECT(0x72, gbc.l());
        EXPECT(0x3e82, gbc.sp());
        EXPECT(0xf0c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 00FD
        gbc.setState(0x7b62, 0xdefa, 0x8150, 0x6fee, 0x335a, 0x684d, 0x1, 0x0);
        gbc.writeMem(0x7b62, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x81, gbc.a());
        EXPECT(0x6f, gbc.b());
        EXPECT(0xee, gbc.c());
        EXPECT(0x33, gbc.d());
        EXPECT(0x5a, gbc.e());
        EXPECT(0x68, gbc.h());
        EXPECT(0x49, gbc.l());
        EXPECT(0xdefa, gbc.sp());
        EXPECT(0x7b64, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 00FE
        gbc.setState(0xe34b, 0x1bad, 0xb8a0, 0x81a8, 0x851b, 0xd7df, 0x1, 0x1);
        gbc.writeMem(0xe34b, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xb8, gbc.a());
        EXPECT(0x81, gbc.b());
        EXPECT(0xa8, gbc.c());
        EXPECT(0x85, gbc.d());
        EXPECT(0x1b, gbc.e());
        EXPECT(0xd7, gbc.h());
        EXPECT(0xdb, gbc.l());
        EXPECT(0x1bad, gbc.sp());
        EXPECT(0xe34d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe34b));
        EXPECT(0x95, gbc.readMem(0xe34c));
        // CB 95 00FF
        gbc.setState(0x1cdc, 0xed9c, 0xead0, 0x5f6f, 0x200f, 0x50ca, 0x1, 0x0);
        gbc.writeMem(0x1cdc, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xea, gbc.a());
        EXPECT(0x5f, gbc.b());
        EXPECT(0x6f, gbc.c());
        EXPECT(0x20, gbc.d());
        EXPECT(0xf, gbc.e());
        EXPECT(0x50, gbc.h());
        EXPECT(0xca, gbc.l());
        EXPECT(0xed9c, gbc.sp());
        EXPECT(0x1cde, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 0100
        gbc.setState(0x2768, 0x7de4, 0x7fb0, 0x2c04, 0xf6a5, 0x98f1, 0x0, 0x1);
        gbc.writeMem(0x2768, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x7f, gbc.a());
        EXPECT(0x2c, gbc.b());
        EXPECT(0x4, gbc.c());
        EXPECT(0xf6, gbc.d());
        EXPECT(0xa5, gbc.e());
        EXPECT(0x98, gbc.h());
        EXPECT(0xf1, gbc.l());
        EXPECT(0x7de4, gbc.sp());
        EXPECT(0x276a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 0101
        gbc.setState(0x1cd6, 0x2d11, 0x7c0, 0xd3ed, 0xc951, 0x8757, 0x1, 0x0);
        gbc.writeMem(0x1cd6, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x7, gbc.a());
        EXPECT(0xd3, gbc.b());
        EXPECT(0xed, gbc.c());
        EXPECT(0xc9, gbc.d());
        EXPECT(0x51, gbc.e());
        EXPECT(0x87, gbc.h());
        EXPECT(0x53, gbc.l());
        EXPECT(0x2d11, gbc.sp());
        EXPECT(0x1cd8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 0102
        gbc.setState(0x4748, 0x8248, 0x15f0, 0x27a0, 0xf842, 0x643e, 0x0, 0x0);
        gbc.writeMem(0x4748, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x15, gbc.a());
        EXPECT(0x27, gbc.b());
        EXPECT(0xa0, gbc.c());
        EXPECT(0xf8, gbc.d());
        EXPECT(0x42, gbc.e());
        EXPECT(0x64, gbc.h());
        EXPECT(0x3a, gbc.l());
        EXPECT(0x8248, gbc.sp());
        EXPECT(0x474a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 0103
        gbc.setState(0xeeab, 0x5ae7, 0x2830, 0x736, 0xe1e8, 0x6bc9, 0x0, 0x1);
        gbc.writeMem(0xeeab, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x28, gbc.a());
        EXPECT(0x7, gbc.b());
        EXPECT(0x36, gbc.c());
        EXPECT(0xe1, gbc.d());
        EXPECT(0xe8, gbc.e());
        EXPECT(0x6b, gbc.h());
        EXPECT(0xc9, gbc.l());
        EXPECT(0x5ae7, gbc.sp());
        EXPECT(0xeead, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xeeab));
        EXPECT(0x95, gbc.readMem(0xeeac));
        // CB 95 0104
        gbc.setState(0xde4, 0xf531, 0x4a80, 0x2d8d, 0xa284, 0x2bf1, 0x1, 0x0);
        gbc.writeMem(0xde4, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x4a, gbc.a());
        EXPECT(0x2d, gbc.b());
        EXPECT(0x8d, gbc.c());
        EXPECT(0xa2, gbc.d());
        EXPECT(0x84, gbc.e());
        EXPECT(0x2b, gbc.h());
        EXPECT(0xf1, gbc.l());
        EXPECT(0xf531, gbc.sp());
        EXPECT(0xde6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 0105
        gbc.setState(0xe271, 0x932d, 0x9960, 0xee6c, 0xade8, 0xa26b, 0x1, 0x1);
        gbc.writeMem(0xe271, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x99, gbc.a());
        EXPECT(0xee, gbc.b());
        EXPECT(0x6c, gbc.c());
        EXPECT(0xad, gbc.d());
        EXPECT(0xe8, gbc.e());
        EXPECT(0xa2, gbc.h());
        EXPECT(0x6b, gbc.l());
        EXPECT(0x932d, gbc.sp());
        EXPECT(0xe273, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe271));
        EXPECT(0x95, gbc.readMem(0xe272));
        // CB 95 0106
        gbc.setState(0xc1b2, 0x3a4d, 0x2680, 0x974d, 0x4caa, 0x1c37, 0x0, 0x1);
        gbc.writeMem(0xc1b2, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x26, gbc.a());
        EXPECT(0x97, gbc.b());
        EXPECT(0x4d, gbc.c());
        EXPECT(0x4c, gbc.d());
        EXPECT(0xaa, gbc.e());
        EXPECT(0x1c, gbc.h());
        EXPECT(0x33, gbc.l());
        EXPECT(0x3a4d, gbc.sp());
        EXPECT(0xc1b4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc1b2));
        EXPECT(0x95, gbc.readMem(0xc1b3));
        // CB 95 0107
        gbc.setState(0x671c, 0x8969, 0xad10, 0x3156, 0x4944, 0x5d8e, 0x0, 0x1);
        gbc.writeMem(0x671c, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xad, gbc.a());
        EXPECT(0x31, gbc.b());
        EXPECT(0x56, gbc.c());
        EXPECT(0x49, gbc.d());
        EXPECT(0x44, gbc.e());
        EXPECT(0x5d, gbc.h());
        EXPECT(0x8a, gbc.l());
        EXPECT(0x8969, gbc.sp());
        EXPECT(0x671e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 0108
        gbc.setState(0x3893, 0xe061, 0x49d0, 0x1d09, 0x495b, 0x23ef, 0x1, 0x1);
        gbc.writeMem(0x3893, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x49, gbc.a());
        EXPECT(0x1d, gbc.b());
        EXPECT(0x9, gbc.c());
        EXPECT(0x49, gbc.d());
        EXPECT(0x5b, gbc.e());
        EXPECT(0x23, gbc.h());
        EXPECT(0xeb, gbc.l());
        EXPECT(0xe061, gbc.sp());
        EXPECT(0x3895, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 0109
        gbc.setState(0x726c, 0x5bd3, 0xd4a0, 0x2fc5, 0x8ead, 0x2762, 0x1, 0x1);
        gbc.writeMem(0x726c, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xd4, gbc.a());
        EXPECT(0x2f, gbc.b());
        EXPECT(0xc5, gbc.c());
        EXPECT(0x8e, gbc.d());
        EXPECT(0xad, gbc.e());
        EXPECT(0x27, gbc.h());
        EXPECT(0x62, gbc.l());
        EXPECT(0x5bd3, gbc.sp());
        EXPECT(0x726e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 010A
        gbc.setState(0x58eb, 0xb971, 0x8ef0, 0xcbf9, 0xf5b9, 0x5602, 0x0, 0x0);
        gbc.writeMem(0x58eb, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x8e, gbc.a());
        EXPECT(0xcb, gbc.b());
        EXPECT(0xf9, gbc.c());
        EXPECT(0xf5, gbc.d());
        EXPECT(0xb9, gbc.e());
        EXPECT(0x56, gbc.h());
        EXPECT(0x2, gbc.l());
        EXPECT(0xb971, gbc.sp());
        EXPECT(0x58ed, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 010B
        gbc.setState(0x5a20, 0xfb4, 0x75d0, 0xcaf7, 0x19e5, 0xe367, 0x0, 0x1);
        gbc.writeMem(0x5a20, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x75, gbc.a());
        EXPECT(0xca, gbc.b());
        EXPECT(0xf7, gbc.c());
        EXPECT(0x19, gbc.d());
        EXPECT(0xe5, gbc.e());
        EXPECT(0xe3, gbc.h());
        EXPECT(0x63, gbc.l());
        EXPECT(0xfb4, gbc.sp());
        EXPECT(0x5a22, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 010C
        gbc.setState(0x4fb4, 0xbcd3, 0xcef0, 0xa2fe, 0xa770, 0x89b6, 0x1, 0x1);
        gbc.writeMem(0x4fb4, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xce, gbc.a());
        EXPECT(0xa2, gbc.b());
        EXPECT(0xfe, gbc.c());
        EXPECT(0xa7, gbc.d());
        EXPECT(0x70, gbc.e());
        EXPECT(0x89, gbc.h());
        EXPECT(0xb2, gbc.l());
        EXPECT(0xbcd3, gbc.sp());
        EXPECT(0x4fb6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 010D
        gbc.setState(0xe21f, 0x39f7, 0x85b0, 0x27a1, 0xb180, 0xcfee, 0x0, 0x1);
        gbc.writeMem(0xe21f, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x85, gbc.a());
        EXPECT(0x27, gbc.b());
        EXPECT(0xa1, gbc.c());
        EXPECT(0xb1, gbc.d());
        EXPECT(0x80, gbc.e());
        EXPECT(0xcf, gbc.h());
        EXPECT(0xea, gbc.l());
        EXPECT(0x39f7, gbc.sp());
        EXPECT(0xe221, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe21f));
        EXPECT(0x95, gbc.readMem(0xe220));
        // CB 95 010E
        gbc.setState(0x3e0c, 0xa59e, 0x130, 0xbbe, 0xc540, 0xa93b, 0x0, 0x1);
        gbc.writeMem(0x3e0c, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x1, gbc.a());
        EXPECT(0xb, gbc.b());
        EXPECT(0xbe, gbc.c());
        EXPECT(0xc5, gbc.d());
        EXPECT(0x40, gbc.e());
        EXPECT(0xa9, gbc.h());
        EXPECT(0x3b, gbc.l());
        EXPECT(0xa59e, gbc.sp());
        EXPECT(0x3e0e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 010F
        gbc.setState(0xb1d, 0x80ca, 0xc200, 0x505b, 0x854e, 0x9f25, 0x1, 0x1);
        gbc.writeMem(0xb1d, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xc2, gbc.a());
        EXPECT(0x50, gbc.b());
        EXPECT(0x5b, gbc.c());
        EXPECT(0x85, gbc.d());
        EXPECT(0x4e, gbc.e());
        EXPECT(0x9f, gbc.h());
        EXPECT(0x21, gbc.l());
        EXPECT(0x80ca, gbc.sp());
        EXPECT(0xb1f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 0110
        gbc.setState(0x20ef, 0xc1e3, 0x8590, 0x86d4, 0xe1ea, 0xc48b, 0x0, 0x0);
        gbc.writeMem(0x20ef, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x85, gbc.a());
        EXPECT(0x86, gbc.b());
        EXPECT(0xd4, gbc.c());
        EXPECT(0xe1, gbc.d());
        EXPECT(0xea, gbc.e());
        EXPECT(0xc4, gbc.h());
        EXPECT(0x8b, gbc.l());
        EXPECT(0xc1e3, gbc.sp());
        EXPECT(0x20f1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 0111
        gbc.setState(0x66a9, 0x414b, 0xf680, 0xc0bf, 0x41b8, 0x2f1, 0x0, 0x1);
        gbc.writeMem(0x66a9, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xf6, gbc.a());
        EXPECT(0xc0, gbc.b());
        EXPECT(0xbf, gbc.c());
        EXPECT(0x41, gbc.d());
        EXPECT(0xb8, gbc.e());
        EXPECT(0x2, gbc.h());
        EXPECT(0xf1, gbc.l());
        EXPECT(0x414b, gbc.sp());
        EXPECT(0x66ab, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 0112
        gbc.setState(0x31b0, 0xe831, 0x41a0, 0x9a1f, 0x6c2b, 0x1992, 0x0, 0x0);
        gbc.writeMem(0x31b0, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x41, gbc.a());
        EXPECT(0x9a, gbc.b());
        EXPECT(0x1f, gbc.c());
        EXPECT(0x6c, gbc.d());
        EXPECT(0x2b, gbc.e());
        EXPECT(0x19, gbc.h());
        EXPECT(0x92, gbc.l());
        EXPECT(0xe831, gbc.sp());
        EXPECT(0x31b2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 0113
        gbc.setState(0x3786, 0x3586, 0x71d0, 0x1bde, 0xb874, 0x5656, 0x1, 0x1);
        gbc.writeMem(0x3786, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x71, gbc.a());
        EXPECT(0x1b, gbc.b());
        EXPECT(0xde, gbc.c());
        EXPECT(0xb8, gbc.d());
        EXPECT(0x74, gbc.e());
        EXPECT(0x56, gbc.h());
        EXPECT(0x52, gbc.l());
        EXPECT(0x3586, gbc.sp());
        EXPECT(0x3788, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 0114
        gbc.setState(0x75c6, 0x181d, 0x70f0, 0x7111, 0xa4ac, 0x4472, 0x1, 0x0);
        gbc.writeMem(0x75c6, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x70, gbc.a());
        EXPECT(0x71, gbc.b());
        EXPECT(0x11, gbc.c());
        EXPECT(0xa4, gbc.d());
        EXPECT(0xac, gbc.e());
        EXPECT(0x44, gbc.h());
        EXPECT(0x72, gbc.l());
        EXPECT(0x181d, gbc.sp());
        EXPECT(0x75c8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 0115
        gbc.setState(0xd33a, 0x69ed, 0xd610, 0x701b, 0x3df4, 0xcd07, 0x0, 0x1);
        gbc.writeMem(0xd33a, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xd6, gbc.a());
        EXPECT(0x70, gbc.b());
        EXPECT(0x1b, gbc.c());
        EXPECT(0x3d, gbc.d());
        EXPECT(0xf4, gbc.e());
        EXPECT(0xcd, gbc.h());
        EXPECT(0x3, gbc.l());
        EXPECT(0x69ed, gbc.sp());
        EXPECT(0xd33c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd33a));
        EXPECT(0x95, gbc.readMem(0xd33b));
        // CB 95 0116
        gbc.setState(0x34e7, 0x1623, 0x38e0, 0xf8c, 0x8482, 0x2192, 0x1, 0x1);
        gbc.writeMem(0x34e7, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x38, gbc.a());
        EXPECT(0xf, gbc.b());
        EXPECT(0x8c, gbc.c());
        EXPECT(0x84, gbc.d());
        EXPECT(0x82, gbc.e());
        EXPECT(0x21, gbc.h());
        EXPECT(0x92, gbc.l());
        EXPECT(0x1623, gbc.sp());
        EXPECT(0x34e9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 0117
        gbc.setState(0xa719, 0xbc8c, 0x1710, 0x9116, 0x63dd, 0x9a5c, 0x0, 0x0);
        gbc.writeMem(0xa719, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x17, gbc.a());
        EXPECT(0x91, gbc.b());
        EXPECT(0x16, gbc.c());
        EXPECT(0x63, gbc.d());
        EXPECT(0xdd, gbc.e());
        EXPECT(0x9a, gbc.h());
        EXPECT(0x58, gbc.l());
        EXPECT(0xbc8c, gbc.sp());
        EXPECT(0xa71b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa719));
        EXPECT(0x95, gbc.readMem(0xa71a));
        // CB 95 0118
        gbc.setState(0x138c, 0x2b1a, 0x9410, 0xc89f, 0x1e18, 0xf1fe, 0x0, 0x0);
        gbc.writeMem(0x138c, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x94, gbc.a());
        EXPECT(0xc8, gbc.b());
        EXPECT(0x9f, gbc.c());
        EXPECT(0x1e, gbc.d());
        EXPECT(0x18, gbc.e());
        EXPECT(0xf1, gbc.h());
        EXPECT(0xfa, gbc.l());
        EXPECT(0x2b1a, gbc.sp());
        EXPECT(0x138e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 0119
        gbc.setState(0x8e44, 0x4068, 0x5750, 0x9dad, 0xd0be, 0x1524, 0x0, 0x0);
        gbc.writeMem(0x8e44, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x57, gbc.a());
        EXPECT(0x9d, gbc.b());
        EXPECT(0xad, gbc.c());
        EXPECT(0xd0, gbc.d());
        EXPECT(0xbe, gbc.e());
        EXPECT(0x15, gbc.h());
        EXPECT(0x20, gbc.l());
        EXPECT(0x4068, gbc.sp());
        EXPECT(0x8e46, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8e44));
        EXPECT(0x95, gbc.readMem(0x8e45));
        // CB 95 011A
        gbc.setState(0xae02, 0x5d58, 0x2700, 0x48fc, 0x24ce, 0x6dfc, 0x0, 0x0);
        gbc.writeMem(0xae02, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x27, gbc.a());
        EXPECT(0x48, gbc.b());
        EXPECT(0xfc, gbc.c());
        EXPECT(0x24, gbc.d());
        EXPECT(0xce, gbc.e());
        EXPECT(0x6d, gbc.h());
        EXPECT(0xf8, gbc.l());
        EXPECT(0x5d58, gbc.sp());
        EXPECT(0xae04, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xae02));
        EXPECT(0x95, gbc.readMem(0xae03));
        // CB 95 011B
        gbc.setState(0xac72, 0x82bc, 0x8170, 0x6b57, 0x5346, 0x251b, 0x1, 0x0);
        gbc.writeMem(0xac72, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x81, gbc.a());
        EXPECT(0x6b, gbc.b());
        EXPECT(0x57, gbc.c());
        EXPECT(0x53, gbc.d());
        EXPECT(0x46, gbc.e());
        EXPECT(0x25, gbc.h());
        EXPECT(0x1b, gbc.l());
        EXPECT(0x82bc, gbc.sp());
        EXPECT(0xac74, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xac72));
        EXPECT(0x95, gbc.readMem(0xac73));
        // CB 95 011C
        gbc.setState(0x9737, 0xb3d7, 0xd2a0, 0x7eef, 0x52cf, 0x161f, 0x0, 0x1);
        gbc.writeMem(0x9737, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xd2, gbc.a());
        EXPECT(0x7e, gbc.b());
        EXPECT(0xef, gbc.c());
        EXPECT(0x52, gbc.d());
        EXPECT(0xcf, gbc.e());
        EXPECT(0x16, gbc.h());
        EXPECT(0x1b, gbc.l());
        EXPECT(0xb3d7, gbc.sp());
        EXPECT(0x9739, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9737));
        EXPECT(0x95, gbc.readMem(0x9738));
        // CB 95 011D
        gbc.setState(0x4a38, 0x4765, 0xcbd0, 0x1fca, 0xc811, 0x10a5, 0x1, 0x0);
        gbc.writeMem(0x4a38, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xcb, gbc.a());
        EXPECT(0x1f, gbc.b());
        EXPECT(0xca, gbc.c());
        EXPECT(0xc8, gbc.d());
        EXPECT(0x11, gbc.e());
        EXPECT(0x10, gbc.h());
        EXPECT(0xa1, gbc.l());
        EXPECT(0x4765, gbc.sp());
        EXPECT(0x4a3a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 011E
        gbc.setState(0x354e, 0x3e8a, 0x4260, 0x3cbf, 0xd53c, 0x296f, 0x0, 0x1);
        gbc.writeMem(0x354e, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x42, gbc.a());
        EXPECT(0x3c, gbc.b());
        EXPECT(0xbf, gbc.c());
        EXPECT(0xd5, gbc.d());
        EXPECT(0x3c, gbc.e());
        EXPECT(0x29, gbc.h());
        EXPECT(0x6b, gbc.l());
        EXPECT(0x3e8a, gbc.sp());
        EXPECT(0x3550, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 0120
        gbc.setState(0xd142, 0xd8c4, 0xc480, 0xe3ca, 0xe56d, 0x4c45, 0x1, 0x1);
        gbc.writeMem(0xd142, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xc4, gbc.a());
        EXPECT(0xe3, gbc.b());
        EXPECT(0xca, gbc.c());
        EXPECT(0xe5, gbc.d());
        EXPECT(0x6d, gbc.e());
        EXPECT(0x4c, gbc.h());
        EXPECT(0x41, gbc.l());
        EXPECT(0xd8c4, gbc.sp());
        EXPECT(0xd144, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd142));
        EXPECT(0x95, gbc.readMem(0xd143));
        // CB 95 0121
        gbc.setState(0xa82c, 0x63bc, 0xbc70, 0x4230, 0x649, 0x9974, 0x1, 0x1);
        gbc.writeMem(0xa82c, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xbc, gbc.a());
        EXPECT(0x42, gbc.b());
        EXPECT(0x30, gbc.c());
        EXPECT(0x6, gbc.d());
        EXPECT(0x49, gbc.e());
        EXPECT(0x99, gbc.h());
        EXPECT(0x70, gbc.l());
        EXPECT(0x63bc, gbc.sp());
        EXPECT(0xa82e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa82c));
        EXPECT(0x95, gbc.readMem(0xa82d));
        // CB 95 0122
        gbc.setState(0x403a, 0x61b3, 0xf60, 0x3056, 0x1ea7, 0xa07b, 0x0, 0x0);
        gbc.writeMem(0x403a, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xf, gbc.a());
        EXPECT(0x30, gbc.b());
        EXPECT(0x56, gbc.c());
        EXPECT(0x1e, gbc.d());
        EXPECT(0xa7, gbc.e());
        EXPECT(0xa0, gbc.h());
        EXPECT(0x7b, gbc.l());
        EXPECT(0x61b3, gbc.sp());
        EXPECT(0x403c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 0123
        gbc.setState(0x7da5, 0xf5cc, 0xe540, 0xe415, 0xcf70, 0xeb51, 0x1, 0x1);
        gbc.writeMem(0x7da5, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xe5, gbc.a());
        EXPECT(0xe4, gbc.b());
        EXPECT(0x15, gbc.c());
        EXPECT(0xcf, gbc.d());
        EXPECT(0x70, gbc.e());
        EXPECT(0xeb, gbc.h());
        EXPECT(0x51, gbc.l());
        EXPECT(0xf5cc, gbc.sp());
        EXPECT(0x7da7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 0124
        gbc.setState(0x566d, 0x99bd, 0xa3a0, 0x9902, 0x415d, 0x861, 0x1, 0x0);
        gbc.writeMem(0x566d, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xa3, gbc.a());
        EXPECT(0x99, gbc.b());
        EXPECT(0x2, gbc.c());
        EXPECT(0x41, gbc.d());
        EXPECT(0x5d, gbc.e());
        EXPECT(0x8, gbc.h());
        EXPECT(0x61, gbc.l());
        EXPECT(0x99bd, gbc.sp());
        EXPECT(0x566f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 0125
        gbc.setState(0x657c, 0x6de8, 0xd8d0, 0xa083, 0xc9c8, 0xb78e, 0x0, 0x0);
        gbc.writeMem(0x657c, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xd8, gbc.a());
        EXPECT(0xa0, gbc.b());
        EXPECT(0x83, gbc.c());
        EXPECT(0xc9, gbc.d());
        EXPECT(0xc8, gbc.e());
        EXPECT(0xb7, gbc.h());
        EXPECT(0x8a, gbc.l());
        EXPECT(0x6de8, gbc.sp());
        EXPECT(0x657e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 0126
        gbc.setState(0x5595, 0x94b6, 0x7c10, 0xc542, 0x835c, 0x79e9, 0x0, 0x0);
        gbc.writeMem(0x5595, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x7c, gbc.a());
        EXPECT(0xc5, gbc.b());
        EXPECT(0x42, gbc.c());
        EXPECT(0x83, gbc.d());
        EXPECT(0x5c, gbc.e());
        EXPECT(0x79, gbc.h());
        EXPECT(0xe9, gbc.l());
        EXPECT(0x94b6, gbc.sp());
        EXPECT(0x5597, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 0127
        gbc.setState(0xaf6, 0x613f, 0xb4f0, 0xf3e, 0x4d80, 0x4052, 0x1, 0x1);
        gbc.writeMem(0xaf6, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xb4, gbc.a());
        EXPECT(0xf, gbc.b());
        EXPECT(0x3e, gbc.c());
        EXPECT(0x4d, gbc.d());
        EXPECT(0x80, gbc.e());
        EXPECT(0x40, gbc.h());
        EXPECT(0x52, gbc.l());
        EXPECT(0x613f, gbc.sp());
        EXPECT(0xaf8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 0128
        gbc.setState(0x7ef7, 0x9dfa, 0xf7f0, 0xffe6, 0x2099, 0x6757, 0x0, 0x1);
        gbc.writeMem(0x7ef7, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xf7, gbc.a());
        EXPECT(0xff, gbc.b());
        EXPECT(0xe6, gbc.c());
        EXPECT(0x20, gbc.d());
        EXPECT(0x99, gbc.e());
        EXPECT(0x67, gbc.h());
        EXPECT(0x53, gbc.l());
        EXPECT(0x9dfa, gbc.sp());
        EXPECT(0x7ef9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 0129
        gbc.setState(0xb058, 0x67af, 0x3120, 0x3f45, 0x5c34, 0xe116, 0x0, 0x1);
        gbc.writeMem(0xb058, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x31, gbc.a());
        EXPECT(0x3f, gbc.b());
        EXPECT(0x45, gbc.c());
        EXPECT(0x5c, gbc.d());
        EXPECT(0x34, gbc.e());
        EXPECT(0xe1, gbc.h());
        EXPECT(0x12, gbc.l());
        EXPECT(0x67af, gbc.sp());
        EXPECT(0xb05a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb058));
        EXPECT(0x95, gbc.readMem(0xb059));
        // CB 95 012A
        gbc.setState(0x67f, 0x157c, 0x9330, 0x65e3, 0x8d8a, 0x260e, 0x0, 0x0);
        gbc.writeMem(0x67f, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x93, gbc.a());
        EXPECT(0x65, gbc.b());
        EXPECT(0xe3, gbc.c());
        EXPECT(0x8d, gbc.d());
        EXPECT(0x8a, gbc.e());
        EXPECT(0x26, gbc.h());
        EXPECT(0xa, gbc.l());
        EXPECT(0x157c, gbc.sp());
        EXPECT(0x681, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 012B
        gbc.setState(0x30aa, 0xf38a, 0x3470, 0xabdf, 0x10d9, 0x1e3, 0x1, 0x0);
        gbc.writeMem(0x30aa, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x34, gbc.a());
        EXPECT(0xab, gbc.b());
        EXPECT(0xdf, gbc.c());
        EXPECT(0x10, gbc.d());
        EXPECT(0xd9, gbc.e());
        EXPECT(0x1, gbc.h());
        EXPECT(0xe3, gbc.l());
        EXPECT(0xf38a, gbc.sp());
        EXPECT(0x30ac, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 012C
        gbc.setState(0xcaf7, 0xc658, 0xf720, 0x6af0, 0xd5d7, 0xd6f9, 0x0, 0x1);
        gbc.writeMem(0xcaf7, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xf7, gbc.a());
        EXPECT(0x6a, gbc.b());
        EXPECT(0xf0, gbc.c());
        EXPECT(0xd5, gbc.d());
        EXPECT(0xd7, gbc.e());
        EXPECT(0xd6, gbc.h());
        EXPECT(0xf9, gbc.l());
        EXPECT(0xc658, gbc.sp());
        EXPECT(0xcaf9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcaf7));
        EXPECT(0x95, gbc.readMem(0xcaf8));
        // CB 95 012D
        gbc.setState(0x2e97, 0x835f, 0xd500, 0xcf52, 0xb3a0, 0xd067, 0x0, 0x0);
        gbc.writeMem(0x2e97, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xd5, gbc.a());
        EXPECT(0xcf, gbc.b());
        EXPECT(0x52, gbc.c());
        EXPECT(0xb3, gbc.d());
        EXPECT(0xa0, gbc.e());
        EXPECT(0xd0, gbc.h());
        EXPECT(0x63, gbc.l());
        EXPECT(0x835f, gbc.sp());
        EXPECT(0x2e99, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 012E
        gbc.setState(0x6c17, 0xa54a, 0x4a0, 0x146d, 0xaef3, 0xbe5, 0x1, 0x0);
        gbc.writeMem(0x6c17, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x4, gbc.a());
        EXPECT(0x14, gbc.b());
        EXPECT(0x6d, gbc.c());
        EXPECT(0xae, gbc.d());
        EXPECT(0xf3, gbc.e());
        EXPECT(0xb, gbc.h());
        EXPECT(0xe1, gbc.l());
        EXPECT(0xa54a, gbc.sp());
        EXPECT(0x6c19, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 012F
        gbc.setState(0xc338, 0x1462, 0xe910, 0x9cc3, 0x54d7, 0x871c, 0x0, 0x1);
        gbc.writeMem(0xc338, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xe9, gbc.a());
        EXPECT(0x9c, gbc.b());
        EXPECT(0xc3, gbc.c());
        EXPECT(0x54, gbc.d());
        EXPECT(0xd7, gbc.e());
        EXPECT(0x87, gbc.h());
        EXPECT(0x18, gbc.l());
        EXPECT(0x1462, gbc.sp());
        EXPECT(0xc33a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc338));
        EXPECT(0x95, gbc.readMem(0xc339));
        // CB 95 0130
        gbc.setState(0xe96, 0x933d, 0xcf00, 0xad83, 0xfef4, 0xeb68, 0x0, 0x1);
        gbc.writeMem(0xe96, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xcf, gbc.a());
        EXPECT(0xad, gbc.b());
        EXPECT(0x83, gbc.c());
        EXPECT(0xfe, gbc.d());
        EXPECT(0xf4, gbc.e());
        EXPECT(0xeb, gbc.h());
        EXPECT(0x68, gbc.l());
        EXPECT(0x933d, gbc.sp());
        EXPECT(0xe98, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 0131
        gbc.setState(0x1262, 0x5194, 0x8050, 0xdede, 0x8ff7, 0xf87d, 0x0, 0x0);
        gbc.writeMem(0x1262, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x80, gbc.a());
        EXPECT(0xde, gbc.b());
        EXPECT(0xde, gbc.c());
        EXPECT(0x8f, gbc.d());
        EXPECT(0xf7, gbc.e());
        EXPECT(0xf8, gbc.h());
        EXPECT(0x79, gbc.l());
        EXPECT(0x5194, gbc.sp());
        EXPECT(0x1264, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 0132
        gbc.setState(0x6f34, 0x503b, 0x5d00, 0xa098, 0x4b08, 0x4a31, 0x1, 0x0);
        gbc.writeMem(0x6f34, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x5d, gbc.a());
        EXPECT(0xa0, gbc.b());
        EXPECT(0x98, gbc.c());
        EXPECT(0x4b, gbc.d());
        EXPECT(0x8, gbc.e());
        EXPECT(0x4a, gbc.h());
        EXPECT(0x31, gbc.l());
        EXPECT(0x503b, gbc.sp());
        EXPECT(0x6f36, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 0133
        gbc.setState(0x6c2e, 0x2c8, 0xe840, 0x3297, 0x782a, 0x5d4d, 0x1, 0x0);
        gbc.writeMem(0x6c2e, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xe8, gbc.a());
        EXPECT(0x32, gbc.b());
        EXPECT(0x97, gbc.c());
        EXPECT(0x78, gbc.d());
        EXPECT(0x2a, gbc.e());
        EXPECT(0x5d, gbc.h());
        EXPECT(0x49, gbc.l());
        EXPECT(0x2c8, gbc.sp());
        EXPECT(0x6c30, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 0134
        gbc.setState(0xb189, 0xdb4d, 0x45a0, 0xe0e1, 0xf082, 0x2016, 0x1, 0x0);
        gbc.writeMem(0xb189, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x45, gbc.a());
        EXPECT(0xe0, gbc.b());
        EXPECT(0xe1, gbc.c());
        EXPECT(0xf0, gbc.d());
        EXPECT(0x82, gbc.e());
        EXPECT(0x20, gbc.h());
        EXPECT(0x12, gbc.l());
        EXPECT(0xdb4d, gbc.sp());
        EXPECT(0xb18b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb189));
        EXPECT(0x95, gbc.readMem(0xb18a));
        // CB 95 0135
        gbc.setState(0x7dc7, 0x2fcd, 0x1290, 0xdff7, 0xb2be, 0x4cb4, 0x1, 0x0);
        gbc.writeMem(0x7dc7, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x12, gbc.a());
        EXPECT(0xdf, gbc.b());
        EXPECT(0xf7, gbc.c());
        EXPECT(0xb2, gbc.d());
        EXPECT(0xbe, gbc.e());
        EXPECT(0x4c, gbc.h());
        EXPECT(0xb0, gbc.l());
        EXPECT(0x2fcd, gbc.sp());
        EXPECT(0x7dc9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 0136
        gbc.setState(0xb0b8, 0x669a, 0xe40, 0xf402, 0x1c5a, 0x39e4, 0x1, 0x1);
        gbc.writeMem(0xb0b8, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xe, gbc.a());
        EXPECT(0xf4, gbc.b());
        EXPECT(0x2, gbc.c());
        EXPECT(0x1c, gbc.d());
        EXPECT(0x5a, gbc.e());
        EXPECT(0x39, gbc.h());
        EXPECT(0xe0, gbc.l());
        EXPECT(0x669a, gbc.sp());
        EXPECT(0xb0ba, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb0b8));
        EXPECT(0x95, gbc.readMem(0xb0b9));
        // CB 95 0137
        gbc.setState(0xbae8, 0x85a, 0xdf60, 0x643d, 0x1504, 0xe30e, 0x1, 0x0);
        gbc.writeMem(0xbae8, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xdf, gbc.a());
        EXPECT(0x64, gbc.b());
        EXPECT(0x3d, gbc.c());
        EXPECT(0x15, gbc.d());
        EXPECT(0x4, gbc.e());
        EXPECT(0xe3, gbc.h());
        EXPECT(0xa, gbc.l());
        EXPECT(0x85a, gbc.sp());
        EXPECT(0xbaea, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbae8));
        EXPECT(0x95, gbc.readMem(0xbae9));
        // CB 95 0138
        gbc.setState(0x6e6c, 0x9932, 0xff70, 0xef9, 0x7493, 0x66f2, 0x0, 0x1);
        gbc.writeMem(0x6e6c, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xff, gbc.a());
        EXPECT(0xe, gbc.b());
        EXPECT(0xf9, gbc.c());
        EXPECT(0x74, gbc.d());
        EXPECT(0x93, gbc.e());
        EXPECT(0x66, gbc.h());
        EXPECT(0xf2, gbc.l());
        EXPECT(0x9932, gbc.sp());
        EXPECT(0x6e6e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 0139
        gbc.setState(0xe2f4, 0x4c71, 0xf900, 0x3337, 0x48a3, 0x36bf, 0x0, 0x1);
        gbc.writeMem(0xe2f4, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xf9, gbc.a());
        EXPECT(0x33, gbc.b());
        EXPECT(0x37, gbc.c());
        EXPECT(0x48, gbc.d());
        EXPECT(0xa3, gbc.e());
        EXPECT(0x36, gbc.h());
        EXPECT(0xbb, gbc.l());
        EXPECT(0x4c71, gbc.sp());
        EXPECT(0xe2f6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe2f4));
        EXPECT(0x95, gbc.readMem(0xe2f5));
        // CB 95 013A
        gbc.setState(0xa306, 0xdd72, 0x7b0, 0xd66a, 0xd4b1, 0xf5c4, 0x1, 0x0);
        gbc.writeMem(0xa306, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x7, gbc.a());
        EXPECT(0xd6, gbc.b());
        EXPECT(0x6a, gbc.c());
        EXPECT(0xd4, gbc.d());
        EXPECT(0xb1, gbc.e());
        EXPECT(0xf5, gbc.h());
        EXPECT(0xc0, gbc.l());
        EXPECT(0xdd72, gbc.sp());
        EXPECT(0xa308, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa306));
        EXPECT(0x95, gbc.readMem(0xa307));
        // CB 95 013B
        gbc.setState(0x8760, 0x8edb, 0x2ff0, 0x3145, 0xb882, 0xdf5c, 0x1, 0x1);
        gbc.writeMem(0x8760, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x2f, gbc.a());
        EXPECT(0x31, gbc.b());
        EXPECT(0x45, gbc.c());
        EXPECT(0xb8, gbc.d());
        EXPECT(0x82, gbc.e());
        EXPECT(0xdf, gbc.h());
        EXPECT(0x58, gbc.l());
        EXPECT(0x8edb, gbc.sp());
        EXPECT(0x8762, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8760));
        EXPECT(0x95, gbc.readMem(0x8761));
        // CB 95 013C
        gbc.setState(0x4b99, 0xa95f, 0x27a0, 0xb319, 0x492d, 0x39a2, 0x1, 0x0);
        gbc.writeMem(0x4b99, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x27, gbc.a());
        EXPECT(0xb3, gbc.b());
        EXPECT(0x19, gbc.c());
        EXPECT(0x49, gbc.d());
        EXPECT(0x2d, gbc.e());
        EXPECT(0x39, gbc.h());
        EXPECT(0xa2, gbc.l());
        EXPECT(0xa95f, gbc.sp());
        EXPECT(0x4b9b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 013D
        gbc.setState(0xdc71, 0xd874, 0x3b90, 0xcc2a, 0xce17, 0xfdae, 0x1, 0x0);
        gbc.writeMem(0xdc71, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x3b, gbc.a());
        EXPECT(0xcc, gbc.b());
        EXPECT(0x2a, gbc.c());
        EXPECT(0xce, gbc.d());
        EXPECT(0x17, gbc.e());
        EXPECT(0xfd, gbc.h());
        EXPECT(0xaa, gbc.l());
        EXPECT(0xd874, gbc.sp());
        EXPECT(0xdc73, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdc71));
        EXPECT(0x95, gbc.readMem(0xdc72));
        // CB 95 013E
        gbc.setState(0x441d, 0x2f97, 0xab0, 0x4014, 0x69df, 0x1a85, 0x1, 0x1);
        gbc.writeMem(0x441d, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xa, gbc.a());
        EXPECT(0x40, gbc.b());
        EXPECT(0x14, gbc.c());
        EXPECT(0x69, gbc.d());
        EXPECT(0xdf, gbc.e());
        EXPECT(0x1a, gbc.h());
        EXPECT(0x81, gbc.l());
        EXPECT(0x2f97, gbc.sp());
        EXPECT(0x441f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 013F
        gbc.setState(0x6c35, 0x1851, 0xfc40, 0xd36e, 0xf2ae, 0x912f, 0x1, 0x1);
        gbc.writeMem(0x6c35, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xfc, gbc.a());
        EXPECT(0xd3, gbc.b());
        EXPECT(0x6e, gbc.c());
        EXPECT(0xf2, gbc.d());
        EXPECT(0xae, gbc.e());
        EXPECT(0x91, gbc.h());
        EXPECT(0x2b, gbc.l());
        EXPECT(0x1851, gbc.sp());
        EXPECT(0x6c37, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 0140
        gbc.setState(0x7b03, 0xad59, 0x100, 0x727f, 0xf46c, 0xbc7b, 0x0, 0x0);
        gbc.writeMem(0x7b03, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x1, gbc.a());
        EXPECT(0x72, gbc.b());
        EXPECT(0x7f, gbc.c());
        EXPECT(0xf4, gbc.d());
        EXPECT(0x6c, gbc.e());
        EXPECT(0xbc, gbc.h());
        EXPECT(0x7b, gbc.l());
        EXPECT(0xad59, gbc.sp());
        EXPECT(0x7b05, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 0141
        gbc.setState(0x5382, 0xf5fd, 0x75a0, 0x1dc9, 0x4e2b, 0x28b6, 0x0, 0x0);
        gbc.writeMem(0x5382, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x75, gbc.a());
        EXPECT(0x1d, gbc.b());
        EXPECT(0xc9, gbc.c());
        EXPECT(0x4e, gbc.d());
        EXPECT(0x2b, gbc.e());
        EXPECT(0x28, gbc.h());
        EXPECT(0xb2, gbc.l());
        EXPECT(0xf5fd, gbc.sp());
        EXPECT(0x5384, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 0142
        gbc.setState(0xe0a6, 0x7b05, 0xbc20, 0xe1ec, 0xc5d7, 0x96d, 0x0, 0x1);
        gbc.writeMem(0xe0a6, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xbc, gbc.a());
        EXPECT(0xe1, gbc.b());
        EXPECT(0xec, gbc.c());
        EXPECT(0xc5, gbc.d());
        EXPECT(0xd7, gbc.e());
        EXPECT(0x9, gbc.h());
        EXPECT(0x69, gbc.l());
        EXPECT(0x7b05, gbc.sp());
        EXPECT(0xe0a8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe0a6));
        EXPECT(0x95, gbc.readMem(0xe0a7));
        // CB 95 0143
        gbc.setState(0x1477, 0x5f44, 0xa1a0, 0x954a, 0x8621, 0xf856, 0x0, 0x0);
        gbc.writeMem(0x1477, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xa1, gbc.a());
        EXPECT(0x95, gbc.b());
        EXPECT(0x4a, gbc.c());
        EXPECT(0x86, gbc.d());
        EXPECT(0x21, gbc.e());
        EXPECT(0xf8, gbc.h());
        EXPECT(0x52, gbc.l());
        EXPECT(0x5f44, gbc.sp());
        EXPECT(0x1479, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 0144
        gbc.setState(0x1d54, 0x974d, 0x9eb0, 0xc758, 0x14ba, 0xd9e7, 0x1, 0x1);
        gbc.writeMem(0x1d54, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x9e, gbc.a());
        EXPECT(0xc7, gbc.b());
        EXPECT(0x58, gbc.c());
        EXPECT(0x14, gbc.d());
        EXPECT(0xba, gbc.e());
        EXPECT(0xd9, gbc.h());
        EXPECT(0xe3, gbc.l());
        EXPECT(0x974d, gbc.sp());
        EXPECT(0x1d56, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 0145
        gbc.setState(0xa0d4, 0x6cfc, 0xf4c0, 0x141a, 0xfcb3, 0xc6cc, 0x0, 0x0);
        gbc.writeMem(0xa0d4, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xf4, gbc.a());
        EXPECT(0x14, gbc.b());
        EXPECT(0x1a, gbc.c());
        EXPECT(0xfc, gbc.d());
        EXPECT(0xb3, gbc.e());
        EXPECT(0xc6, gbc.h());
        EXPECT(0xc8, gbc.l());
        EXPECT(0x6cfc, gbc.sp());
        EXPECT(0xa0d6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa0d4));
        EXPECT(0x95, gbc.readMem(0xa0d5));
        // CB 95 0146
        gbc.setState(0x4086, 0xba72, 0xd190, 0xe2fe, 0x1079, 0x6ad1, 0x0, 0x0);
        gbc.writeMem(0x4086, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xd1, gbc.a());
        EXPECT(0xe2, gbc.b());
        EXPECT(0xfe, gbc.c());
        EXPECT(0x10, gbc.d());
        EXPECT(0x79, gbc.e());
        EXPECT(0x6a, gbc.h());
        EXPECT(0xd1, gbc.l());
        EXPECT(0xba72, gbc.sp());
        EXPECT(0x4088, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 0147
        gbc.setState(0x997f, 0x57ce, 0x4670, 0xf46c, 0x123f, 0xbb9f, 0x0, 0x0);
        gbc.writeMem(0x997f, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x46, gbc.a());
        EXPECT(0xf4, gbc.b());
        EXPECT(0x6c, gbc.c());
        EXPECT(0x12, gbc.d());
        EXPECT(0x3f, gbc.e());
        EXPECT(0xbb, gbc.h());
        EXPECT(0x9b, gbc.l());
        EXPECT(0x57ce, gbc.sp());
        EXPECT(0x9981, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x997f));
        EXPECT(0x95, gbc.readMem(0x9980));
        // CB 95 0148
        gbc.setState(0x2288, 0xc044, 0xcb20, 0xc440, 0x5653, 0xd7ee, 0x0, 0x1);
        gbc.writeMem(0x2288, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xcb, gbc.a());
        EXPECT(0xc4, gbc.b());
        EXPECT(0x40, gbc.c());
        EXPECT(0x56, gbc.d());
        EXPECT(0x53, gbc.e());
        EXPECT(0xd7, gbc.h());
        EXPECT(0xea, gbc.l());
        EXPECT(0xc044, gbc.sp());
        EXPECT(0x228a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 0149
        gbc.setState(0xdddf, 0xd586, 0x4ed0, 0xc420, 0x800a, 0x7c93, 0x1, 0x0);
        gbc.writeMem(0xdddf, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x4e, gbc.a());
        EXPECT(0xc4, gbc.b());
        EXPECT(0x20, gbc.c());
        EXPECT(0x80, gbc.d());
        EXPECT(0xa, gbc.e());
        EXPECT(0x7c, gbc.h());
        EXPECT(0x93, gbc.l());
        EXPECT(0xd586, gbc.sp());
        EXPECT(0xdde1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdddf));
        EXPECT(0x95, gbc.readMem(0xdde0));
        // CB 95 014A
        gbc.setState(0x51f, 0xaaaf, 0x9060, 0x1970, 0x44fb, 0x2eb0, 0x0, 0x1);
        gbc.writeMem(0x51f, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x90, gbc.a());
        EXPECT(0x19, gbc.b());
        EXPECT(0x70, gbc.c());
        EXPECT(0x44, gbc.d());
        EXPECT(0xfb, gbc.e());
        EXPECT(0x2e, gbc.h());
        EXPECT(0xb0, gbc.l());
        EXPECT(0xaaaf, gbc.sp());
        EXPECT(0x521, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 014B
        gbc.setState(0x289a, 0xa7f0, 0x9760, 0x24c6, 0x10f9, 0x2ba1, 0x0, 0x1);
        gbc.writeMem(0x289a, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x97, gbc.a());
        EXPECT(0x24, gbc.b());
        EXPECT(0xc6, gbc.c());
        EXPECT(0x10, gbc.d());
        EXPECT(0xf9, gbc.e());
        EXPECT(0x2b, gbc.h());
        EXPECT(0xa1, gbc.l());
        EXPECT(0xa7f0, gbc.sp());
        EXPECT(0x289c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 014C
        gbc.setState(0xbdfe, 0xbcb, 0x4c00, 0xca6f, 0x165d, 0x7172, 0x0, 0x1);
        gbc.writeMem(0xbdfe, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x4c, gbc.a());
        EXPECT(0xca, gbc.b());
        EXPECT(0x6f, gbc.c());
        EXPECT(0x16, gbc.d());
        EXPECT(0x5d, gbc.e());
        EXPECT(0x71, gbc.h());
        EXPECT(0x72, gbc.l());
        EXPECT(0xbcb, gbc.sp());
        EXPECT(0xbe00, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbdfe));
        EXPECT(0x95, gbc.readMem(0xbdff));
        // CB 95 014D
        gbc.setState(0xc4e1, 0x5a7b, 0x2ef0, 0x656e, 0x75b3, 0x77f5, 0x0, 0x0);
        gbc.writeMem(0xc4e1, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x2e, gbc.a());
        EXPECT(0x65, gbc.b());
        EXPECT(0x6e, gbc.c());
        EXPECT(0x75, gbc.d());
        EXPECT(0xb3, gbc.e());
        EXPECT(0x77, gbc.h());
        EXPECT(0xf1, gbc.l());
        EXPECT(0x5a7b, gbc.sp());
        EXPECT(0xc4e3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc4e1));
        EXPECT(0x95, gbc.readMem(0xc4e2));
        // CB 95 014E
        gbc.setState(0x6da9, 0xfab5, 0x2630, 0x9446, 0xde08, 0x4d60, 0x0, 0x0);
        gbc.writeMem(0x6da9, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x26, gbc.a());
        EXPECT(0x94, gbc.b());
        EXPECT(0x46, gbc.c());
        EXPECT(0xde, gbc.d());
        EXPECT(0x8, gbc.e());
        EXPECT(0x4d, gbc.h());
        EXPECT(0x60, gbc.l());
        EXPECT(0xfab5, gbc.sp());
        EXPECT(0x6dab, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 0150
        gbc.setState(0xc72b, 0x3072, 0x9bc0, 0x846c, 0x3b23, 0x82ca, 0x1, 0x0);
        gbc.writeMem(0xc72b, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x9b, gbc.a());
        EXPECT(0x84, gbc.b());
        EXPECT(0x6c, gbc.c());
        EXPECT(0x3b, gbc.d());
        EXPECT(0x23, gbc.e());
        EXPECT(0x82, gbc.h());
        EXPECT(0xca, gbc.l());
        EXPECT(0x3072, gbc.sp());
        EXPECT(0xc72d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc72b));
        EXPECT(0x95, gbc.readMem(0xc72c));
        // CB 95 0151
        gbc.setState(0x8524, 0xcdc5, 0x35f0, 0x25c6, 0x269f, 0xaa68, 0x0, 0x0);
        gbc.writeMem(0x8524, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x35, gbc.a());
        EXPECT(0x25, gbc.b());
        EXPECT(0xc6, gbc.c());
        EXPECT(0x26, gbc.d());
        EXPECT(0x9f, gbc.e());
        EXPECT(0xaa, gbc.h());
        EXPECT(0x68, gbc.l());
        EXPECT(0xcdc5, gbc.sp());
        EXPECT(0x8526, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8524));
        EXPECT(0x95, gbc.readMem(0x8525));
        // CB 95 0152
        gbc.setState(0x92ad, 0x5ffc, 0x1b20, 0xb3ec, 0xf55b, 0x45bd, 0x1, 0x0);
        gbc.writeMem(0x92ad, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x1b, gbc.a());
        EXPECT(0xb3, gbc.b());
        EXPECT(0xec, gbc.c());
        EXPECT(0xf5, gbc.d());
        EXPECT(0x5b, gbc.e());
        EXPECT(0x45, gbc.h());
        EXPECT(0xb9, gbc.l());
        EXPECT(0x5ffc, gbc.sp());
        EXPECT(0x92af, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x92ad));
        EXPECT(0x95, gbc.readMem(0x92ae));
        // CB 95 0153
        gbc.setState(0x8c9a, 0x36c0, 0x4480, 0x7764, 0xb6ef, 0xcdd5, 0x1, 0x0);
        gbc.writeMem(0x8c9a, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x44, gbc.a());
        EXPECT(0x77, gbc.b());
        EXPECT(0x64, gbc.c());
        EXPECT(0xb6, gbc.d());
        EXPECT(0xef, gbc.e());
        EXPECT(0xcd, gbc.h());
        EXPECT(0xd1, gbc.l());
        EXPECT(0x36c0, gbc.sp());
        EXPECT(0x8c9c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8c9a));
        EXPECT(0x95, gbc.readMem(0x8c9b));
        // CB 95 0154
        gbc.setState(0x9c1b, 0xa19e, 0xdfb0, 0xe7e0, 0x88b8, 0xd5aa, 0x1, 0x1);
        gbc.writeMem(0x9c1b, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xdf, gbc.a());
        EXPECT(0xe7, gbc.b());
        EXPECT(0xe0, gbc.c());
        EXPECT(0x88, gbc.d());
        EXPECT(0xb8, gbc.e());
        EXPECT(0xd5, gbc.h());
        EXPECT(0xaa, gbc.l());
        EXPECT(0xa19e, gbc.sp());
        EXPECT(0x9c1d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9c1b));
        EXPECT(0x95, gbc.readMem(0x9c1c));
        // CB 95 0155
        gbc.setState(0x3840, 0x8030, 0x610, 0x3a47, 0xcd5a, 0x7c02, 0x0, 0x0);
        gbc.writeMem(0x3840, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x6, gbc.a());
        EXPECT(0x3a, gbc.b());
        EXPECT(0x47, gbc.c());
        EXPECT(0xcd, gbc.d());
        EXPECT(0x5a, gbc.e());
        EXPECT(0x7c, gbc.h());
        EXPECT(0x2, gbc.l());
        EXPECT(0x8030, gbc.sp());
        EXPECT(0x3842, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 0156
        gbc.setState(0x1966, 0x2f75, 0xf820, 0xba15, 0x5b79, 0x2d18, 0x0, 0x0);
        gbc.writeMem(0x1966, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xf8, gbc.a());
        EXPECT(0xba, gbc.b());
        EXPECT(0x15, gbc.c());
        EXPECT(0x5b, gbc.d());
        EXPECT(0x79, gbc.e());
        EXPECT(0x2d, gbc.h());
        EXPECT(0x18, gbc.l());
        EXPECT(0x2f75, gbc.sp());
        EXPECT(0x1968, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 0157
        gbc.setState(0x75b9, 0x8f84, 0xd150, 0x848, 0xfad2, 0x178d, 0x1, 0x0);
        gbc.writeMem(0x75b9, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xd1, gbc.a());
        EXPECT(0x8, gbc.b());
        EXPECT(0x48, gbc.c());
        EXPECT(0xfa, gbc.d());
        EXPECT(0xd2, gbc.e());
        EXPECT(0x17, gbc.h());
        EXPECT(0x89, gbc.l());
        EXPECT(0x8f84, gbc.sp());
        EXPECT(0x75bb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 0158
        gbc.setState(0x90ed, 0xdb1c, 0x33e0, 0xd65f, 0x54a4, 0xd11e, 0x0, 0x0);
        gbc.writeMem(0x90ed, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x33, gbc.a());
        EXPECT(0xd6, gbc.b());
        EXPECT(0x5f, gbc.c());
        EXPECT(0x54, gbc.d());
        EXPECT(0xa4, gbc.e());
        EXPECT(0xd1, gbc.h());
        EXPECT(0x1a, gbc.l());
        EXPECT(0xdb1c, gbc.sp());
        EXPECT(0x90ef, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x90ed));
        EXPECT(0x95, gbc.readMem(0x90ee));
        // CB 95 0159
        gbc.setState(0xf99, 0x19ab, 0x1ce0, 0x6521, 0x3bec, 0xc58e, 0x0, 0x1);
        gbc.writeMem(0xf99, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x1c, gbc.a());
        EXPECT(0x65, gbc.b());
        EXPECT(0x21, gbc.c());
        EXPECT(0x3b, gbc.d());
        EXPECT(0xec, gbc.e());
        EXPECT(0xc5, gbc.h());
        EXPECT(0x8a, gbc.l());
        EXPECT(0x19ab, gbc.sp());
        EXPECT(0xf9b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 015B
        gbc.setState(0xb2b5, 0x9175, 0x3760, 0xf792, 0x4857, 0x74c9, 0x1, 0x1);
        gbc.writeMem(0xb2b5, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x37, gbc.a());
        EXPECT(0xf7, gbc.b());
        EXPECT(0x92, gbc.c());
        EXPECT(0x48, gbc.d());
        EXPECT(0x57, gbc.e());
        EXPECT(0x74, gbc.h());
        EXPECT(0xc9, gbc.l());
        EXPECT(0x9175, gbc.sp());
        EXPECT(0xb2b7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb2b5));
        EXPECT(0x95, gbc.readMem(0xb2b6));
        // CB 95 015C
        gbc.setState(0x6c0a, 0x318, 0xf2d0, 0x5b91, 0xdbca, 0x6c5, 0x1, 0x1);
        gbc.writeMem(0x6c0a, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xf2, gbc.a());
        EXPECT(0x5b, gbc.b());
        EXPECT(0x91, gbc.c());
        EXPECT(0xdb, gbc.d());
        EXPECT(0xca, gbc.e());
        EXPECT(0x6, gbc.h());
        EXPECT(0xc1, gbc.l());
        EXPECT(0x318, gbc.sp());
        EXPECT(0x6c0c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 015D
        gbc.setState(0xb9b5, 0x5dcf, 0x5f70, 0xad51, 0xff1e, 0xae4, 0x0, 0x0);
        gbc.writeMem(0xb9b5, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x5f, gbc.a());
        EXPECT(0xad, gbc.b());
        EXPECT(0x51, gbc.c());
        EXPECT(0xff, gbc.d());
        EXPECT(0x1e, gbc.e());
        EXPECT(0xa, gbc.h());
        EXPECT(0xe0, gbc.l());
        EXPECT(0x5dcf, gbc.sp());
        EXPECT(0xb9b7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb9b5));
        EXPECT(0x95, gbc.readMem(0xb9b6));
        // CB 95 015E
        gbc.setState(0x11dd, 0x9845, 0x7990, 0x6706, 0xaaa3, 0x31ca, 0x1, 0x1);
        gbc.writeMem(0x11dd, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x79, gbc.a());
        EXPECT(0x67, gbc.b());
        EXPECT(0x6, gbc.c());
        EXPECT(0xaa, gbc.d());
        EXPECT(0xa3, gbc.e());
        EXPECT(0x31, gbc.h());
        EXPECT(0xca, gbc.l());
        EXPECT(0x9845, gbc.sp());
        EXPECT(0x11df, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 015F
        gbc.setState(0x5746, 0xf980, 0x4af0, 0xf71d, 0x2892, 0x41b1, 0x1, 0x0);
        gbc.writeMem(0x5746, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x4a, gbc.a());
        EXPECT(0xf7, gbc.b());
        EXPECT(0x1d, gbc.c());
        EXPECT(0x28, gbc.d());
        EXPECT(0x92, gbc.e());
        EXPECT(0x41, gbc.h());
        EXPECT(0xb1, gbc.l());
        EXPECT(0xf980, gbc.sp());
        EXPECT(0x5748, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 0160
        gbc.setState(0x4e63, 0x9a0a, 0x1e20, 0xd8c1, 0xb88a, 0x117f, 0x1, 0x1);
        gbc.writeMem(0x4e63, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x1e, gbc.a());
        EXPECT(0xd8, gbc.b());
        EXPECT(0xc1, gbc.c());
        EXPECT(0xb8, gbc.d());
        EXPECT(0x8a, gbc.e());
        EXPECT(0x11, gbc.h());
        EXPECT(0x7b, gbc.l());
        EXPECT(0x9a0a, gbc.sp());
        EXPECT(0x4e65, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 0161
        gbc.setState(0xea91, 0x946c, 0x98f0, 0xf23e, 0xe942, 0xa5a8, 0x1, 0x0);
        gbc.writeMem(0xea91, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x98, gbc.a());
        EXPECT(0xf2, gbc.b());
        EXPECT(0x3e, gbc.c());
        EXPECT(0xe9, gbc.d());
        EXPECT(0x42, gbc.e());
        EXPECT(0xa5, gbc.h());
        EXPECT(0xa8, gbc.l());
        EXPECT(0x946c, gbc.sp());
        EXPECT(0xea93, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xea91));
        EXPECT(0x95, gbc.readMem(0xea92));
        // CB 95 0162
        gbc.setState(0xe5e3, 0x9b27, 0x2e80, 0xd853, 0xe6f0, 0xbe56, 0x1, 0x0);
        gbc.writeMem(0xe5e3, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x2e, gbc.a());
        EXPECT(0xd8, gbc.b());
        EXPECT(0x53, gbc.c());
        EXPECT(0xe6, gbc.d());
        EXPECT(0xf0, gbc.e());
        EXPECT(0xbe, gbc.h());
        EXPECT(0x52, gbc.l());
        EXPECT(0x9b27, gbc.sp());
        EXPECT(0xe5e5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe5e3));
        EXPECT(0x95, gbc.readMem(0xe5e4));
        // CB 95 0164
        gbc.setState(0x1735, 0xeef5, 0x7b70, 0x9b49, 0xbe3d, 0x7522, 0x0, 0x0);
        gbc.writeMem(0x1735, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x7b, gbc.a());
        EXPECT(0x9b, gbc.b());
        EXPECT(0x49, gbc.c());
        EXPECT(0xbe, gbc.d());
        EXPECT(0x3d, gbc.e());
        EXPECT(0x75, gbc.h());
        EXPECT(0x22, gbc.l());
        EXPECT(0xeef5, gbc.sp());
        EXPECT(0x1737, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 0165
        gbc.setState(0x3c79, 0x69da, 0xf1c0, 0x269b, 0xc4cd, 0x1538, 0x1, 0x0);
        gbc.writeMem(0x3c79, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xf1, gbc.a());
        EXPECT(0x26, gbc.b());
        EXPECT(0x9b, gbc.c());
        EXPECT(0xc4, gbc.d());
        EXPECT(0xcd, gbc.e());
        EXPECT(0x15, gbc.h());
        EXPECT(0x38, gbc.l());
        EXPECT(0x69da, gbc.sp());
        EXPECT(0x3c7b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 0166
        gbc.setState(0xb2a6, 0xfd9, 0x99e0, 0x8940, 0xca69, 0x2989, 0x0, 0x0);
        gbc.writeMem(0xb2a6, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x99, gbc.a());
        EXPECT(0x89, gbc.b());
        EXPECT(0x40, gbc.c());
        EXPECT(0xca, gbc.d());
        EXPECT(0x69, gbc.e());
        EXPECT(0x29, gbc.h());
        EXPECT(0x89, gbc.l());
        EXPECT(0xfd9, gbc.sp());
        EXPECT(0xb2a8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb2a6));
        EXPECT(0x95, gbc.readMem(0xb2a7));
        // CB 95 0167
        gbc.setState(0xe2c2, 0xef8b, 0xccc0, 0xbd21, 0xd6a, 0x5b81, 0x0, 0x1);
        gbc.writeMem(0xe2c2, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xcc, gbc.a());
        EXPECT(0xbd, gbc.b());
        EXPECT(0x21, gbc.c());
        EXPECT(0xd, gbc.d());
        EXPECT(0x6a, gbc.e());
        EXPECT(0x5b, gbc.h());
        EXPECT(0x81, gbc.l());
        EXPECT(0xef8b, gbc.sp());
        EXPECT(0xe2c4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe2c2));
        EXPECT(0x95, gbc.readMem(0xe2c3));
        // CB 95 0168
        gbc.setState(0x4222, 0xa941, 0x1c10, 0xf07b, 0x6630, 0xab5c, 0x1, 0x1);
        gbc.writeMem(0x4222, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x1c, gbc.a());
        EXPECT(0xf0, gbc.b());
        EXPECT(0x7b, gbc.c());
        EXPECT(0x66, gbc.d());
        EXPECT(0x30, gbc.e());
        EXPECT(0xab, gbc.h());
        EXPECT(0x58, gbc.l());
        EXPECT(0xa941, gbc.sp());
        EXPECT(0x4224, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 0169
        gbc.setState(0xb2e8, 0xfa30, 0xe260, 0x5414, 0x316d, 0x60fe, 0x0, 0x0);
        gbc.writeMem(0xb2e8, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xe2, gbc.a());
        EXPECT(0x54, gbc.b());
        EXPECT(0x14, gbc.c());
        EXPECT(0x31, gbc.d());
        EXPECT(0x6d, gbc.e());
        EXPECT(0x60, gbc.h());
        EXPECT(0xfa, gbc.l());
        EXPECT(0xfa30, gbc.sp());
        EXPECT(0xb2ea, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb2e8));
        EXPECT(0x95, gbc.readMem(0xb2e9));
        // CB 95 016A
        gbc.setState(0x530a, 0x488d, 0x3db0, 0xfebb, 0x9df2, 0x115e, 0x1, 0x1);
        gbc.writeMem(0x530a, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x3d, gbc.a());
        EXPECT(0xfe, gbc.b());
        EXPECT(0xbb, gbc.c());
        EXPECT(0x9d, gbc.d());
        EXPECT(0xf2, gbc.e());
        EXPECT(0x11, gbc.h());
        EXPECT(0x5a, gbc.l());
        EXPECT(0x488d, gbc.sp());
        EXPECT(0x530c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 016B
        gbc.setState(0xdbe2, 0x8041, 0x47d0, 0x24ed, 0x25d1, 0x5986, 0x0, 0x1);
        gbc.writeMem(0xdbe2, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x47, gbc.a());
        EXPECT(0x24, gbc.b());
        EXPECT(0xed, gbc.c());
        EXPECT(0x25, gbc.d());
        EXPECT(0xd1, gbc.e());
        EXPECT(0x59, gbc.h());
        EXPECT(0x82, gbc.l());
        EXPECT(0x8041, gbc.sp());
        EXPECT(0xdbe4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdbe2));
        EXPECT(0x95, gbc.readMem(0xdbe3));
        // CB 95 016C
        gbc.setState(0x389, 0x3b40, 0x4540, 0x9539, 0x487c, 0xe751, 0x0, 0x1);
        gbc.writeMem(0x389, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x45, gbc.a());
        EXPECT(0x95, gbc.b());
        EXPECT(0x39, gbc.c());
        EXPECT(0x48, gbc.d());
        EXPECT(0x7c, gbc.e());
        EXPECT(0xe7, gbc.h());
        EXPECT(0x51, gbc.l());
        EXPECT(0x3b40, gbc.sp());
        EXPECT(0x38b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 016D
        gbc.setState(0xa9ae, 0xe5e7, 0xa200, 0xbe9a, 0x321e, 0xcee, 0x1, 0x0);
        gbc.writeMem(0xa9ae, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xa2, gbc.a());
        EXPECT(0xbe, gbc.b());
        EXPECT(0x9a, gbc.c());
        EXPECT(0x32, gbc.d());
        EXPECT(0x1e, gbc.e());
        EXPECT(0xc, gbc.h());
        EXPECT(0xea, gbc.l());
        EXPECT(0xe5e7, gbc.sp());
        EXPECT(0xa9b0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa9ae));
        EXPECT(0x95, gbc.readMem(0xa9af));
        // CB 95 016E
        gbc.setState(0x34ff, 0xa60e, 0xc4a0, 0x8f36, 0xf292, 0xca92, 0x0, 0x1);
        gbc.writeMem(0x34ff, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xc4, gbc.a());
        EXPECT(0x8f, gbc.b());
        EXPECT(0x36, gbc.c());
        EXPECT(0xf2, gbc.d());
        EXPECT(0x92, gbc.e());
        EXPECT(0xca, gbc.h());
        EXPECT(0x92, gbc.l());
        EXPECT(0xa60e, gbc.sp());
        EXPECT(0x3501, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 016F
        gbc.setState(0xb51d, 0x74cd, 0xccd0, 0x52f6, 0x93ca, 0x8e86, 0x0, 0x0);
        gbc.writeMem(0xb51d, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xcc, gbc.a());
        EXPECT(0x52, gbc.b());
        EXPECT(0xf6, gbc.c());
        EXPECT(0x93, gbc.d());
        EXPECT(0xca, gbc.e());
        EXPECT(0x8e, gbc.h());
        EXPECT(0x82, gbc.l());
        EXPECT(0x74cd, gbc.sp());
        EXPECT(0xb51f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb51d));
        EXPECT(0x95, gbc.readMem(0xb51e));
        // CB 95 0170
        gbc.setState(0x3932, 0xe95f, 0x8450, 0x7754, 0xe8a2, 0xb8bd, 0x0, 0x1);
        gbc.writeMem(0x3932, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x84, gbc.a());
        EXPECT(0x77, gbc.b());
        EXPECT(0x54, gbc.c());
        EXPECT(0xe8, gbc.d());
        EXPECT(0xa2, gbc.e());
        EXPECT(0xb8, gbc.h());
        EXPECT(0xb9, gbc.l());
        EXPECT(0xe95f, gbc.sp());
        EXPECT(0x3934, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 0171
        gbc.setState(0x8b66, 0xf4a1, 0x3540, 0x88b5, 0xbb0f, 0x5985, 0x0, 0x1);
        gbc.writeMem(0x8b66, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x35, gbc.a());
        EXPECT(0x88, gbc.b());
        EXPECT(0xb5, gbc.c());
        EXPECT(0xbb, gbc.d());
        EXPECT(0xf, gbc.e());
        EXPECT(0x59, gbc.h());
        EXPECT(0x81, gbc.l());
        EXPECT(0xf4a1, gbc.sp());
        EXPECT(0x8b68, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8b66));
        EXPECT(0x95, gbc.readMem(0x8b67));
        // CB 95 0172
        gbc.setState(0xa021, 0xbfac, 0xbe20, 0x19ac, 0xd0f9, 0x41f2, 0x0, 0x1);
        gbc.writeMem(0xa021, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xbe, gbc.a());
        EXPECT(0x19, gbc.b());
        EXPECT(0xac, gbc.c());
        EXPECT(0xd0, gbc.d());
        EXPECT(0xf9, gbc.e());
        EXPECT(0x41, gbc.h());
        EXPECT(0xf2, gbc.l());
        EXPECT(0xbfac, gbc.sp());
        EXPECT(0xa023, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa021));
        EXPECT(0x95, gbc.readMem(0xa022));
        // CB 95 0173
        gbc.setState(0xc94f, 0xf159, 0x95d0, 0x81d7, 0x1dfe, 0x3d8c, 0x0, 0x1);
        gbc.writeMem(0xc94f, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x95, gbc.a());
        EXPECT(0x81, gbc.b());
        EXPECT(0xd7, gbc.c());
        EXPECT(0x1d, gbc.d());
        EXPECT(0xfe, gbc.e());
        EXPECT(0x3d, gbc.h());
        EXPECT(0x88, gbc.l());
        EXPECT(0xf159, gbc.sp());
        EXPECT(0xc951, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc94f));
        EXPECT(0x95, gbc.readMem(0xc950));
        // CB 95 0174
        gbc.setState(0xe7f5, 0x617e, 0x8b00, 0x9e73, 0x1cf5, 0xf352, 0x1, 0x0);
        gbc.writeMem(0xe7f5, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x8b, gbc.a());
        EXPECT(0x9e, gbc.b());
        EXPECT(0x73, gbc.c());
        EXPECT(0x1c, gbc.d());
        EXPECT(0xf5, gbc.e());
        EXPECT(0xf3, gbc.h());
        EXPECT(0x52, gbc.l());
        EXPECT(0x617e, gbc.sp());
        EXPECT(0xe7f7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe7f5));
        EXPECT(0x95, gbc.readMem(0xe7f6));
        // CB 95 0175
        gbc.setState(0x172a, 0x7b7e, 0x7c90, 0xcd2e, 0xc637, 0x917c, 0x0, 0x0);
        gbc.writeMem(0x172a, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x7c, gbc.a());
        EXPECT(0xcd, gbc.b());
        EXPECT(0x2e, gbc.c());
        EXPECT(0xc6, gbc.d());
        EXPECT(0x37, gbc.e());
        EXPECT(0x91, gbc.h());
        EXPECT(0x78, gbc.l());
        EXPECT(0x7b7e, gbc.sp());
        EXPECT(0x172c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 0176
        gbc.setState(0xcbdc, 0xcd3b, 0xea90, 0xd1e3, 0xf1e5, 0xada2, 0x0, 0x1);
        gbc.writeMem(0xcbdc, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xea, gbc.a());
        EXPECT(0xd1, gbc.b());
        EXPECT(0xe3, gbc.c());
        EXPECT(0xf1, gbc.d());
        EXPECT(0xe5, gbc.e());
        EXPECT(0xad, gbc.h());
        EXPECT(0xa2, gbc.l());
        EXPECT(0xcd3b, gbc.sp());
        EXPECT(0xcbde, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcbdc));
        EXPECT(0x95, gbc.readMem(0xcbdd));
        // CB 95 0177
        gbc.setState(0x1f3e, 0xfcb5, 0x89b0, 0xead2, 0x242a, 0x31e2, 0x1, 0x1);
        gbc.writeMem(0x1f3e, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x89, gbc.a());
        EXPECT(0xea, gbc.b());
        EXPECT(0xd2, gbc.c());
        EXPECT(0x24, gbc.d());
        EXPECT(0x2a, gbc.e());
        EXPECT(0x31, gbc.h());
        EXPECT(0xe2, gbc.l());
        EXPECT(0xfcb5, gbc.sp());
        EXPECT(0x1f40, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 0178
        gbc.setState(0x981c, 0x7214, 0x2b60, 0x33da, 0xab46, 0xc8d4, 0x1, 0x0);
        gbc.writeMem(0x981c, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x2b, gbc.a());
        EXPECT(0x33, gbc.b());
        EXPECT(0xda, gbc.c());
        EXPECT(0xab, gbc.d());
        EXPECT(0x46, gbc.e());
        EXPECT(0xc8, gbc.h());
        EXPECT(0xd0, gbc.l());
        EXPECT(0x7214, gbc.sp());
        EXPECT(0x981e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x981c));
        EXPECT(0x95, gbc.readMem(0x981d));
        // CB 95 0179
        gbc.setState(0x9210, 0x3879, 0x6eb0, 0x6195, 0x7a10, 0xbc30, 0x0, 0x0);
        gbc.writeMem(0x9210, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x6e, gbc.a());
        EXPECT(0x61, gbc.b());
        EXPECT(0x95, gbc.c());
        EXPECT(0x7a, gbc.d());
        EXPECT(0x10, gbc.e());
        EXPECT(0xbc, gbc.h());
        EXPECT(0x30, gbc.l());
        EXPECT(0x3879, gbc.sp());
        EXPECT(0x9212, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9210));
        EXPECT(0x95, gbc.readMem(0x9211));
        // CB 95 017C
        gbc.setState(0x9748, 0xc89d, 0x8100, 0x172d, 0x5951, 0x1deb, 0x1, 0x0);
        gbc.writeMem(0x9748, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x81, gbc.a());
        EXPECT(0x17, gbc.b());
        EXPECT(0x2d, gbc.c());
        EXPECT(0x59, gbc.d());
        EXPECT(0x51, gbc.e());
        EXPECT(0x1d, gbc.h());
        EXPECT(0xeb, gbc.l());
        EXPECT(0xc89d, gbc.sp());
        EXPECT(0x974a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9748));
        EXPECT(0x95, gbc.readMem(0x9749));
        // CB 95 017D
        gbc.setState(0xd3f8, 0xfbaf, 0x9fb0, 0x8e10, 0xc412, 0x9d7d, 0x1, 0x0);
        gbc.writeMem(0xd3f8, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x9f, gbc.a());
        EXPECT(0x8e, gbc.b());
        EXPECT(0x10, gbc.c());
        EXPECT(0xc4, gbc.d());
        EXPECT(0x12, gbc.e());
        EXPECT(0x9d, gbc.h());
        EXPECT(0x79, gbc.l());
        EXPECT(0xfbaf, gbc.sp());
        EXPECT(0xd3fa, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd3f8));
        EXPECT(0x95, gbc.readMem(0xd3f9));
        // CB 95 017E
        gbc.setState(0xc58, 0xbe8c, 0x11e0, 0x537b, 0x8d05, 0xe13f, 0x1, 0x1);
        gbc.writeMem(0xc58, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x11, gbc.a());
        EXPECT(0x53, gbc.b());
        EXPECT(0x7b, gbc.c());
        EXPECT(0x8d, gbc.d());
        EXPECT(0x5, gbc.e());
        EXPECT(0xe1, gbc.h());
        EXPECT(0x3b, gbc.l());
        EXPECT(0xbe8c, gbc.sp());
        EXPECT(0xc5a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 017F
        gbc.setState(0x2020, 0xa8c7, 0xf060, 0xad61, 0xea85, 0xbdac, 0x0, 0x0);
        gbc.writeMem(0x2020, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xf0, gbc.a());
        EXPECT(0xad, gbc.b());
        EXPECT(0x61, gbc.c());
        EXPECT(0xea, gbc.d());
        EXPECT(0x85, gbc.e());
        EXPECT(0xbd, gbc.h());
        EXPECT(0xa8, gbc.l());
        EXPECT(0xa8c7, gbc.sp());
        EXPECT(0x2022, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 0180
        gbc.setState(0x57fa, 0x4021, 0xe250, 0x6607, 0xc19, 0x8689, 0x1, 0x0);
        gbc.writeMem(0x57fa, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xe2, gbc.a());
        EXPECT(0x66, gbc.b());
        EXPECT(0x7, gbc.c());
        EXPECT(0xc, gbc.d());
        EXPECT(0x19, gbc.e());
        EXPECT(0x86, gbc.h());
        EXPECT(0x89, gbc.l());
        EXPECT(0x4021, gbc.sp());
        EXPECT(0x57fc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 0181
        gbc.setState(0x8f4, 0xc637, 0x48e0, 0x2476, 0x4003, 0xbebe, 0x0, 0x1);
        gbc.writeMem(0x8f4, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x48, gbc.a());
        EXPECT(0x24, gbc.b());
        EXPECT(0x76, gbc.c());
        EXPECT(0x40, gbc.d());
        EXPECT(0x3, gbc.e());
        EXPECT(0xbe, gbc.h());
        EXPECT(0xba, gbc.l());
        EXPECT(0xc637, gbc.sp());
        EXPECT(0x8f6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 0182
        gbc.setState(0x91c0, 0x33d0, 0x24c0, 0x8022, 0x722b, 0xb650, 0x0, 0x1);
        gbc.writeMem(0x91c0, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x24, gbc.a());
        EXPECT(0x80, gbc.b());
        EXPECT(0x22, gbc.c());
        EXPECT(0x72, gbc.d());
        EXPECT(0x2b, gbc.e());
        EXPECT(0xb6, gbc.h());
        EXPECT(0x50, gbc.l());
        EXPECT(0x33d0, gbc.sp());
        EXPECT(0x91c2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x91c0));
        EXPECT(0x95, gbc.readMem(0x91c1));
        // CB 95 0183
        gbc.setState(0x4d57, 0xcbde, 0x340, 0x29a1, 0x3a32, 0xc2d9, 0x0, 0x1);
        gbc.writeMem(0x4d57, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x3, gbc.a());
        EXPECT(0x29, gbc.b());
        EXPECT(0xa1, gbc.c());
        EXPECT(0x3a, gbc.d());
        EXPECT(0x32, gbc.e());
        EXPECT(0xc2, gbc.h());
        EXPECT(0xd9, gbc.l());
        EXPECT(0xcbde, gbc.sp());
        EXPECT(0x4d59, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 0184
        gbc.setState(0x9112, 0xbaaa, 0x77d0, 0xa82, 0xbab4, 0x912e, 0x0, 0x1);
        gbc.writeMem(0x9112, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x77, gbc.a());
        EXPECT(0xa, gbc.b());
        EXPECT(0x82, gbc.c());
        EXPECT(0xba, gbc.d());
        EXPECT(0xb4, gbc.e());
        EXPECT(0x91, gbc.h());
        EXPECT(0x2a, gbc.l());
        EXPECT(0xbaaa, gbc.sp());
        EXPECT(0x9114, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9112));
        EXPECT(0x95, gbc.readMem(0x9113));
        // CB 95 0186
        gbc.setState(0xd2e3, 0x7317, 0x7660, 0xfe30, 0x454f, 0x94ec, 0x1, 0x0);
        gbc.writeMem(0xd2e3, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x76, gbc.a());
        EXPECT(0xfe, gbc.b());
        EXPECT(0x30, gbc.c());
        EXPECT(0x45, gbc.d());
        EXPECT(0x4f, gbc.e());
        EXPECT(0x94, gbc.h());
        EXPECT(0xe8, gbc.l());
        EXPECT(0x7317, gbc.sp());
        EXPECT(0xd2e5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd2e3));
        EXPECT(0x95, gbc.readMem(0xd2e4));
        // CB 95 0187
        gbc.setState(0xe301, 0x7f23, 0xa860, 0x7a0e, 0x8964, 0x3a3d, 0x0, 0x0);
        gbc.writeMem(0xe301, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xa8, gbc.a());
        EXPECT(0x7a, gbc.b());
        EXPECT(0xe, gbc.c());
        EXPECT(0x89, gbc.d());
        EXPECT(0x64, gbc.e());
        EXPECT(0x3a, gbc.h());
        EXPECT(0x39, gbc.l());
        EXPECT(0x7f23, gbc.sp());
        EXPECT(0xe303, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe301));
        EXPECT(0x95, gbc.readMem(0xe302));
        // CB 95 0188
        gbc.setState(0x2003, 0x3ea4, 0x66d0, 0x4b1a, 0xc6cd, 0xd3be, 0x1, 0x0);
        gbc.writeMem(0x2003, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x66, gbc.a());
        EXPECT(0x4b, gbc.b());
        EXPECT(0x1a, gbc.c());
        EXPECT(0xc6, gbc.d());
        EXPECT(0xcd, gbc.e());
        EXPECT(0xd3, gbc.h());
        EXPECT(0xba, gbc.l());
        EXPECT(0x3ea4, gbc.sp());
        EXPECT(0x2005, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 0189
        gbc.setState(0x7a38, 0x2b83, 0xf8a0, 0x4868, 0xa715, 0xd3f8, 0x1, 0x1);
        gbc.writeMem(0x7a38, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xf8, gbc.a());
        EXPECT(0x48, gbc.b());
        EXPECT(0x68, gbc.c());
        EXPECT(0xa7, gbc.d());
        EXPECT(0x15, gbc.e());
        EXPECT(0xd3, gbc.h());
        EXPECT(0xf8, gbc.l());
        EXPECT(0x2b83, gbc.sp());
        EXPECT(0x7a3a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 018A
        gbc.setState(0xdc6b, 0x18f1, 0x8fd0, 0x8afe, 0x8495, 0x2b1f, 0x1, 0x0);
        gbc.writeMem(0xdc6b, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x8f, gbc.a());
        EXPECT(0x8a, gbc.b());
        EXPECT(0xfe, gbc.c());
        EXPECT(0x84, gbc.d());
        EXPECT(0x95, gbc.e());
        EXPECT(0x2b, gbc.h());
        EXPECT(0x1b, gbc.l());
        EXPECT(0x18f1, gbc.sp());
        EXPECT(0xdc6d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdc6b));
        EXPECT(0x95, gbc.readMem(0xdc6c));
        // CB 95 018B
        gbc.setState(0x40a7, 0xa4e, 0xb580, 0x1e74, 0x9164, 0x3e8a, 0x0, 0x0);
        gbc.writeMem(0x40a7, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xb5, gbc.a());
        EXPECT(0x1e, gbc.b());
        EXPECT(0x74, gbc.c());
        EXPECT(0x91, gbc.d());
        EXPECT(0x64, gbc.e());
        EXPECT(0x3e, gbc.h());
        EXPECT(0x8a, gbc.l());
        EXPECT(0xa4e, gbc.sp());
        EXPECT(0x40a9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 018C
        gbc.setState(0xe584, 0xdf49, 0xb4c0, 0x2282, 0x3d35, 0xe8e8, 0x0, 0x1);
        gbc.writeMem(0xe584, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xb4, gbc.a());
        EXPECT(0x22, gbc.b());
        EXPECT(0x82, gbc.c());
        EXPECT(0x3d, gbc.d());
        EXPECT(0x35, gbc.e());
        EXPECT(0xe8, gbc.h());
        EXPECT(0xe8, gbc.l());
        EXPECT(0xdf49, gbc.sp());
        EXPECT(0xe586, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe584));
        EXPECT(0x95, gbc.readMem(0xe585));
        // CB 95 018E
        gbc.setState(0x5f66, 0x72e9, 0xcd70, 0x26bf, 0xe3ea, 0x8d4a, 0x0, 0x1);
        gbc.writeMem(0x5f66, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xcd, gbc.a());
        EXPECT(0x26, gbc.b());
        EXPECT(0xbf, gbc.c());
        EXPECT(0xe3, gbc.d());
        EXPECT(0xea, gbc.e());
        EXPECT(0x8d, gbc.h());
        EXPECT(0x4a, gbc.l());
        EXPECT(0x72e9, gbc.sp());
        EXPECT(0x5f68, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 018F
        gbc.setState(0xaa11, 0xe620, 0xffb0, 0x6451, 0x379d, 0x87c4, 0x0, 0x0);
        gbc.writeMem(0xaa11, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xff, gbc.a());
        EXPECT(0x64, gbc.b());
        EXPECT(0x51, gbc.c());
        EXPECT(0x37, gbc.d());
        EXPECT(0x9d, gbc.e());
        EXPECT(0x87, gbc.h());
        EXPECT(0xc0, gbc.l());
        EXPECT(0xe620, gbc.sp());
        EXPECT(0xaa13, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaa11));
        EXPECT(0x95, gbc.readMem(0xaa12));
        // CB 95 0190
        gbc.setState(0x56f, 0xdc61, 0xe530, 0x657e, 0xfb25, 0x23b1, 0x0, 0x1);
        gbc.writeMem(0x56f, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xe5, gbc.a());
        EXPECT(0x65, gbc.b());
        EXPECT(0x7e, gbc.c());
        EXPECT(0xfb, gbc.d());
        EXPECT(0x25, gbc.e());
        EXPECT(0x23, gbc.h());
        EXPECT(0xb1, gbc.l());
        EXPECT(0xdc61, gbc.sp());
        EXPECT(0x571, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 0191
        gbc.setState(0x5a5a, 0x9b35, 0xce40, 0xab99, 0x4aea, 0x1cbc, 0x0, 0x1);
        gbc.writeMem(0x5a5a, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xce, gbc.a());
        EXPECT(0xab, gbc.b());
        EXPECT(0x99, gbc.c());
        EXPECT(0x4a, gbc.d());
        EXPECT(0xea, gbc.e());
        EXPECT(0x1c, gbc.h());
        EXPECT(0xb8, gbc.l());
        EXPECT(0x9b35, gbc.sp());
        EXPECT(0x5a5c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 0192
        gbc.setState(0xcd0e, 0x5d1f, 0xc7b0, 0x6d95, 0x270e, 0x8cb5, 0x1, 0x1);
        gbc.writeMem(0xcd0e, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xc7, gbc.a());
        EXPECT(0x6d, gbc.b());
        EXPECT(0x95, gbc.c());
        EXPECT(0x27, gbc.d());
        EXPECT(0xe, gbc.e());
        EXPECT(0x8c, gbc.h());
        EXPECT(0xb1, gbc.l());
        EXPECT(0x5d1f, gbc.sp());
        EXPECT(0xcd10, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcd0e));
        EXPECT(0x95, gbc.readMem(0xcd0f));
        // CB 95 0193
        gbc.setState(0x1bb9, 0x424f, 0x5800, 0x798b, 0x52c0, 0x6c60, 0x1, 0x1);
        gbc.writeMem(0x1bb9, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x58, gbc.a());
        EXPECT(0x79, gbc.b());
        EXPECT(0x8b, gbc.c());
        EXPECT(0x52, gbc.d());
        EXPECT(0xc0, gbc.e());
        EXPECT(0x6c, gbc.h());
        EXPECT(0x60, gbc.l());
        EXPECT(0x424f, gbc.sp());
        EXPECT(0x1bbb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 0194
        gbc.setState(0xd8a4, 0xff23, 0xd4e0, 0xe424, 0x6013, 0x8696, 0x1, 0x1);
        gbc.writeMem(0xd8a4, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xd4, gbc.a());
        EXPECT(0xe4, gbc.b());
        EXPECT(0x24, gbc.c());
        EXPECT(0x60, gbc.d());
        EXPECT(0x13, gbc.e());
        EXPECT(0x86, gbc.h());
        EXPECT(0x92, gbc.l());
        EXPECT(0xff23, gbc.sp());
        EXPECT(0xd8a6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd8a4));
        EXPECT(0x95, gbc.readMem(0xd8a5));
        // CB 95 0195
        gbc.setState(0x33a9, 0x2e99, 0xe790, 0x22c8, 0xdc68, 0x149a, 0x0, 0x0);
        gbc.writeMem(0x33a9, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xe7, gbc.a());
        EXPECT(0x22, gbc.b());
        EXPECT(0xc8, gbc.c());
        EXPECT(0xdc, gbc.d());
        EXPECT(0x68, gbc.e());
        EXPECT(0x14, gbc.h());
        EXPECT(0x9a, gbc.l());
        EXPECT(0x2e99, gbc.sp());
        EXPECT(0x33ab, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 0196
        gbc.setState(0x32fa, 0xdd9b, 0xa1c0, 0x3f6d, 0x3b59, 0x572d, 0x1, 0x0);
        gbc.writeMem(0x32fa, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xa1, gbc.a());
        EXPECT(0x3f, gbc.b());
        EXPECT(0x6d, gbc.c());
        EXPECT(0x3b, gbc.d());
        EXPECT(0x59, gbc.e());
        EXPECT(0x57, gbc.h());
        EXPECT(0x29, gbc.l());
        EXPECT(0xdd9b, gbc.sp());
        EXPECT(0x32fc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 0197
        gbc.setState(0xd02d, 0x11d4, 0x5460, 0x63b3, 0x73da, 0x46c9, 0x1, 0x1);
        gbc.writeMem(0xd02d, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x54, gbc.a());
        EXPECT(0x63, gbc.b());
        EXPECT(0xb3, gbc.c());
        EXPECT(0x73, gbc.d());
        EXPECT(0xda, gbc.e());
        EXPECT(0x46, gbc.h());
        EXPECT(0xc9, gbc.l());
        EXPECT(0x11d4, gbc.sp());
        EXPECT(0xd02f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd02d));
        EXPECT(0x95, gbc.readMem(0xd02e));
        // CB 95 0198
        gbc.setState(0xdf15, 0x9661, 0x6df0, 0x184, 0xe644, 0xc3a5, 0x1, 0x0);
        gbc.writeMem(0xdf15, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x6d, gbc.a());
        EXPECT(0x1, gbc.b());
        EXPECT(0x84, gbc.c());
        EXPECT(0xe6, gbc.d());
        EXPECT(0x44, gbc.e());
        EXPECT(0xc3, gbc.h());
        EXPECT(0xa1, gbc.l());
        EXPECT(0x9661, gbc.sp());
        EXPECT(0xdf17, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdf15));
        EXPECT(0x95, gbc.readMem(0xdf16));
        // CB 95 0199
        gbc.setState(0x82a8, 0x334d, 0x91c0, 0xdb8d, 0x54c4, 0x7afa, 0x1, 0x1);
        gbc.writeMem(0x82a8, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x91, gbc.a());
        EXPECT(0xdb, gbc.b());
        EXPECT(0x8d, gbc.c());
        EXPECT(0x54, gbc.d());
        EXPECT(0xc4, gbc.e());
        EXPECT(0x7a, gbc.h());
        EXPECT(0xfa, gbc.l());
        EXPECT(0x334d, gbc.sp());
        EXPECT(0x82aa, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x82a8));
        EXPECT(0x95, gbc.readMem(0x82a9));
        // CB 95 019A
        gbc.setState(0x4d01, 0x3b21, 0x9d40, 0xea24, 0x94ce, 0xdf43, 0x1, 0x1);
        gbc.writeMem(0x4d01, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x9d, gbc.a());
        EXPECT(0xea, gbc.b());
        EXPECT(0x24, gbc.c());
        EXPECT(0x94, gbc.d());
        EXPECT(0xce, gbc.e());
        EXPECT(0xdf, gbc.h());
        EXPECT(0x43, gbc.l());
        EXPECT(0x3b21, gbc.sp());
        EXPECT(0x4d03, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 019B
        gbc.setState(0xeb9c, 0x1645, 0xadf0, 0xb526, 0xc4a4, 0x32ba, 0x0, 0x0);
        gbc.writeMem(0xeb9c, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xad, gbc.a());
        EXPECT(0xb5, gbc.b());
        EXPECT(0x26, gbc.c());
        EXPECT(0xc4, gbc.d());
        EXPECT(0xa4, gbc.e());
        EXPECT(0x32, gbc.h());
        EXPECT(0xba, gbc.l());
        EXPECT(0x1645, gbc.sp());
        EXPECT(0xeb9e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xeb9c));
        EXPECT(0x95, gbc.readMem(0xeb9d));
        // CB 95 019C
        gbc.setState(0xcae, 0x7983, 0x68e0, 0x17c7, 0x9f1b, 0xde9d, 0x1, 0x0);
        gbc.writeMem(0xcae, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x68, gbc.a());
        EXPECT(0x17, gbc.b());
        EXPECT(0xc7, gbc.c());
        EXPECT(0x9f, gbc.d());
        EXPECT(0x1b, gbc.e());
        EXPECT(0xde, gbc.h());
        EXPECT(0x99, gbc.l());
        EXPECT(0x7983, gbc.sp());
        EXPECT(0xcb0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 019D
        gbc.setState(0x4e64, 0x706b, 0xe550, 0xa925, 0x18f5, 0x4a8a, 0x1, 0x1);
        gbc.writeMem(0x4e64, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xe5, gbc.a());
        EXPECT(0xa9, gbc.b());
        EXPECT(0x25, gbc.c());
        EXPECT(0x18, gbc.d());
        EXPECT(0xf5, gbc.e());
        EXPECT(0x4a, gbc.h());
        EXPECT(0x8a, gbc.l());
        EXPECT(0x706b, gbc.sp());
        EXPECT(0x4e66, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 019E
        gbc.setState(0x1ec3, 0x7bdf, 0xcbc0, 0xaccc, 0xad53, 0x799, 0x1, 0x0);
        gbc.writeMem(0x1ec3, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xcb, gbc.a());
        EXPECT(0xac, gbc.b());
        EXPECT(0xcc, gbc.c());
        EXPECT(0xad, gbc.d());
        EXPECT(0x53, gbc.e());
        EXPECT(0x7, gbc.h());
        EXPECT(0x99, gbc.l());
        EXPECT(0x7bdf, gbc.sp());
        EXPECT(0x1ec5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 019F
        gbc.setState(0xc9e7, 0xd500, 0x17c0, 0x7b49, 0xeff0, 0x8602, 0x0, 0x1);
        gbc.writeMem(0xc9e7, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x17, gbc.a());
        EXPECT(0x7b, gbc.b());
        EXPECT(0x49, gbc.c());
        EXPECT(0xef, gbc.d());
        EXPECT(0xf0, gbc.e());
        EXPECT(0x86, gbc.h());
        EXPECT(0x2, gbc.l());
        EXPECT(0xd500, gbc.sp());
        EXPECT(0xc9e9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc9e7));
        EXPECT(0x95, gbc.readMem(0xc9e8));
        // CB 95 01A0
        gbc.setState(0x6aa3, 0x478c, 0x10, 0x2ff1, 0x8005, 0xc4b1, 0x0, 0x1);
        gbc.writeMem(0x6aa3, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x2f, gbc.b());
        EXPECT(0xf1, gbc.c());
        EXPECT(0x80, gbc.d());
        EXPECT(0x5, gbc.e());
        EXPECT(0xc4, gbc.h());
        EXPECT(0xb1, gbc.l());
        EXPECT(0x478c, gbc.sp());
        EXPECT(0x6aa5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 01A1
        gbc.setState(0xe768, 0x989b, 0x20c0, 0x9f0c, 0x7e86, 0xf21a, 0x0, 0x1);
        gbc.writeMem(0xe768, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x20, gbc.a());
        EXPECT(0x9f, gbc.b());
        EXPECT(0xc, gbc.c());
        EXPECT(0x7e, gbc.d());
        EXPECT(0x86, gbc.e());
        EXPECT(0xf2, gbc.h());
        EXPECT(0x1a, gbc.l());
        EXPECT(0x989b, gbc.sp());
        EXPECT(0xe76a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe768));
        EXPECT(0x95, gbc.readMem(0xe769));
        // CB 95 01A2
        gbc.setState(0xef97, 0x1bd9, 0xa040, 0xc63e, 0xb1c1, 0xa71e, 0x0, 0x1);
        gbc.writeMem(0xef97, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xa0, gbc.a());
        EXPECT(0xc6, gbc.b());
        EXPECT(0x3e, gbc.c());
        EXPECT(0xb1, gbc.d());
        EXPECT(0xc1, gbc.e());
        EXPECT(0xa7, gbc.h());
        EXPECT(0x1a, gbc.l());
        EXPECT(0x1bd9, gbc.sp());
        EXPECT(0xef99, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xef97));
        EXPECT(0x95, gbc.readMem(0xef98));
        // CB 95 01A3
        gbc.setState(0xd0da, 0xdcbd, 0xd230, 0xc0e3, 0xd0be, 0x43f0, 0x0, 0x1);
        gbc.writeMem(0xd0da, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xd2, gbc.a());
        EXPECT(0xc0, gbc.b());
        EXPECT(0xe3, gbc.c());
        EXPECT(0xd0, gbc.d());
        EXPECT(0xbe, gbc.e());
        EXPECT(0x43, gbc.h());
        EXPECT(0xf0, gbc.l());
        EXPECT(0xdcbd, gbc.sp());
        EXPECT(0xd0dc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd0da));
        EXPECT(0x95, gbc.readMem(0xd0db));
        // CB 95 01A4
        gbc.setState(0xee03, 0x73f7, 0xcf0, 0x1d81, 0x3f79, 0x4616, 0x0, 0x1);
        gbc.writeMem(0xee03, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xc, gbc.a());
        EXPECT(0x1d, gbc.b());
        EXPECT(0x81, gbc.c());
        EXPECT(0x3f, gbc.d());
        EXPECT(0x79, gbc.e());
        EXPECT(0x46, gbc.h());
        EXPECT(0x12, gbc.l());
        EXPECT(0x73f7, gbc.sp());
        EXPECT(0xee05, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xee03));
        EXPECT(0x95, gbc.readMem(0xee04));
        // CB 95 01A5
        gbc.setState(0x8943, 0x2e4c, 0x6d70, 0x30f, 0xe1ab, 0x3df7, 0x1, 0x0);
        gbc.writeMem(0x8943, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x6d, gbc.a());
        EXPECT(0x3, gbc.b());
        EXPECT(0xf, gbc.c());
        EXPECT(0xe1, gbc.d());
        EXPECT(0xab, gbc.e());
        EXPECT(0x3d, gbc.h());
        EXPECT(0xf3, gbc.l());
        EXPECT(0x2e4c, gbc.sp());
        EXPECT(0x8945, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8943));
        EXPECT(0x95, gbc.readMem(0x8944));
        // CB 95 01A6
        gbc.setState(0x306e, 0xa045, 0x52f0, 0x25d4, 0x64a0, 0x68d6, 0x0, 0x1);
        gbc.writeMem(0x306e, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x52, gbc.a());
        EXPECT(0x25, gbc.b());
        EXPECT(0xd4, gbc.c());
        EXPECT(0x64, gbc.d());
        EXPECT(0xa0, gbc.e());
        EXPECT(0x68, gbc.h());
        EXPECT(0xd2, gbc.l());
        EXPECT(0xa045, gbc.sp());
        EXPECT(0x3070, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 01A7
        gbc.setState(0x9480, 0xfe44, 0x88f0, 0xe944, 0xc7ea, 0x80d4, 0x1, 0x1);
        gbc.writeMem(0x9480, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x88, gbc.a());
        EXPECT(0xe9, gbc.b());
        EXPECT(0x44, gbc.c());
        EXPECT(0xc7, gbc.d());
        EXPECT(0xea, gbc.e());
        EXPECT(0x80, gbc.h());
        EXPECT(0xd0, gbc.l());
        EXPECT(0xfe44, gbc.sp());
        EXPECT(0x9482, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9480));
        EXPECT(0x95, gbc.readMem(0x9481));
        // CB 95 01A8
        gbc.setState(0x1f8, 0x76d5, 0xa3b0, 0x261b, 0xd097, 0x8c9f, 0x1, 0x1);
        gbc.writeMem(0x1f8, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xa3, gbc.a());
        EXPECT(0x26, gbc.b());
        EXPECT(0x1b, gbc.c());
        EXPECT(0xd0, gbc.d());
        EXPECT(0x97, gbc.e());
        EXPECT(0x8c, gbc.h());
        EXPECT(0x9b, gbc.l());
        EXPECT(0x76d5, gbc.sp());
        EXPECT(0x1fa, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 01A9
        gbc.setState(0x375b, 0xc05b, 0xa400, 0xf5df, 0xc67b, 0xcc21, 0x1, 0x1);
        gbc.writeMem(0x375b, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xa4, gbc.a());
        EXPECT(0xf5, gbc.b());
        EXPECT(0xdf, gbc.c());
        EXPECT(0xc6, gbc.d());
        EXPECT(0x7b, gbc.e());
        EXPECT(0xcc, gbc.h());
        EXPECT(0x21, gbc.l());
        EXPECT(0xc05b, gbc.sp());
        EXPECT(0x375d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 01AA
        gbc.setState(0x9b7e, 0xb779, 0xe6c0, 0xb870, 0x498e, 0x3f17, 0x1, 0x0);
        gbc.writeMem(0x9b7e, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xe6, gbc.a());
        EXPECT(0xb8, gbc.b());
        EXPECT(0x70, gbc.c());
        EXPECT(0x49, gbc.d());
        EXPECT(0x8e, gbc.e());
        EXPECT(0x3f, gbc.h());
        EXPECT(0x13, gbc.l());
        EXPECT(0xb779, gbc.sp());
        EXPECT(0x9b80, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9b7e));
        EXPECT(0x95, gbc.readMem(0x9b7f));
        // CB 95 01AB
        gbc.setState(0x477f, 0x2e69, 0x3650, 0x472b, 0x5c16, 0x21fb, 0x0, 0x1);
        gbc.writeMem(0x477f, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x36, gbc.a());
        EXPECT(0x47, gbc.b());
        EXPECT(0x2b, gbc.c());
        EXPECT(0x5c, gbc.d());
        EXPECT(0x16, gbc.e());
        EXPECT(0x21, gbc.h());
        EXPECT(0xfb, gbc.l());
        EXPECT(0x2e69, gbc.sp());
        EXPECT(0x4781, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 01AC
        gbc.setState(0x3e7a, 0x99f7, 0x8f30, 0xcb2f, 0xa3c2, 0xe8bd, 0x0, 0x1);
        gbc.writeMem(0x3e7a, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x8f, gbc.a());
        EXPECT(0xcb, gbc.b());
        EXPECT(0x2f, gbc.c());
        EXPECT(0xa3, gbc.d());
        EXPECT(0xc2, gbc.e());
        EXPECT(0xe8, gbc.h());
        EXPECT(0xb9, gbc.l());
        EXPECT(0x99f7, gbc.sp());
        EXPECT(0x3e7c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 01AD
        gbc.setState(0xaa2c, 0xec4a, 0x3fd0, 0xd10f, 0xb9f4, 0x53c7, 0x0, 0x1);
        gbc.writeMem(0xaa2c, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x3f, gbc.a());
        EXPECT(0xd1, gbc.b());
        EXPECT(0xf, gbc.c());
        EXPECT(0xb9, gbc.d());
        EXPECT(0xf4, gbc.e());
        EXPECT(0x53, gbc.h());
        EXPECT(0xc3, gbc.l());
        EXPECT(0xec4a, gbc.sp());
        EXPECT(0xaa2e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaa2c));
        EXPECT(0x95, gbc.readMem(0xaa2d));
        // CB 95 01AE
        gbc.setState(0x9dc5, 0x69c1, 0xe490, 0x8665, 0xd67a, 0xeed5, 0x1, 0x0);
        gbc.writeMem(0x9dc5, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xe4, gbc.a());
        EXPECT(0x86, gbc.b());
        EXPECT(0x65, gbc.c());
        EXPECT(0xd6, gbc.d());
        EXPECT(0x7a, gbc.e());
        EXPECT(0xee, gbc.h());
        EXPECT(0xd1, gbc.l());
        EXPECT(0x69c1, gbc.sp());
        EXPECT(0x9dc7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9dc5));
        EXPECT(0x95, gbc.readMem(0x9dc6));
        // CB 95 01AF
        gbc.setState(0xb218, 0x8478, 0x9f30, 0x759c, 0xfb3a, 0xbf8a, 0x1, 0x1);
        gbc.writeMem(0xb218, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x9f, gbc.a());
        EXPECT(0x75, gbc.b());
        EXPECT(0x9c, gbc.c());
        EXPECT(0xfb, gbc.d());
        EXPECT(0x3a, gbc.e());
        EXPECT(0xbf, gbc.h());
        EXPECT(0x8a, gbc.l());
        EXPECT(0x8478, gbc.sp());
        EXPECT(0xb21a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb218));
        EXPECT(0x95, gbc.readMem(0xb219));
        // CB 95 01B0
        gbc.setState(0xa3a5, 0x1d58, 0xf600, 0xe03f, 0xa6a3, 0x165e, 0x1, 0x1);
        gbc.writeMem(0xa3a5, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xf6, gbc.a());
        EXPECT(0xe0, gbc.b());
        EXPECT(0x3f, gbc.c());
        EXPECT(0xa6, gbc.d());
        EXPECT(0xa3, gbc.e());
        EXPECT(0x16, gbc.h());
        EXPECT(0x5a, gbc.l());
        EXPECT(0x1d58, gbc.sp());
        EXPECT(0xa3a7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa3a5));
        EXPECT(0x95, gbc.readMem(0xa3a6));
        // CB 95 01B2
        gbc.setState(0xedb8, 0xd73a, 0x8dc0, 0xb3a7, 0x3c4f, 0x1e0a, 0x0, 0x1);
        gbc.writeMem(0xedb8, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x8d, gbc.a());
        EXPECT(0xb3, gbc.b());
        EXPECT(0xa7, gbc.c());
        EXPECT(0x3c, gbc.d());
        EXPECT(0x4f, gbc.e());
        EXPECT(0x1e, gbc.h());
        EXPECT(0xa, gbc.l());
        EXPECT(0xd73a, gbc.sp());
        EXPECT(0xedba, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xedb8));
        EXPECT(0x95, gbc.readMem(0xedb9));
        // CB 95 01B3
        gbc.setState(0x33c7, 0x2be5, 0xd690, 0x6b97, 0x287, 0x2f6d, 0x1, 0x0);
        gbc.writeMem(0x33c7, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xd6, gbc.a());
        EXPECT(0x6b, gbc.b());
        EXPECT(0x97, gbc.c());
        EXPECT(0x2, gbc.d());
        EXPECT(0x87, gbc.e());
        EXPECT(0x2f, gbc.h());
        EXPECT(0x69, gbc.l());
        EXPECT(0x2be5, gbc.sp());
        EXPECT(0x33c9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 01B4
        gbc.setState(0x8173, 0x56a, 0x78d0, 0x7460, 0xcfd7, 0x3b0b, 0x0, 0x0);
        gbc.writeMem(0x8173, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x78, gbc.a());
        EXPECT(0x74, gbc.b());
        EXPECT(0x60, gbc.c());
        EXPECT(0xcf, gbc.d());
        EXPECT(0xd7, gbc.e());
        EXPECT(0x3b, gbc.h());
        EXPECT(0xb, gbc.l());
        EXPECT(0x56a, gbc.sp());
        EXPECT(0x8175, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8173));
        EXPECT(0x95, gbc.readMem(0x8174));
        // CB 95 01B5
        gbc.setState(0x117b, 0xaa93, 0x13a0, 0x1660, 0x2c21, 0xea, 0x1, 0x0);
        gbc.writeMem(0x117b, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x13, gbc.a());
        EXPECT(0x16, gbc.b());
        EXPECT(0x60, gbc.c());
        EXPECT(0x2c, gbc.d());
        EXPECT(0x21, gbc.e());
        EXPECT(0x0, gbc.h());
        EXPECT(0xea, gbc.l());
        EXPECT(0xaa93, gbc.sp());
        EXPECT(0x117d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 01B6
        gbc.setState(0x5fa3, 0xd063, 0x3770, 0x66b8, 0x2d75, 0x5dba, 0x0, 0x1);
        gbc.writeMem(0x5fa3, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x37, gbc.a());
        EXPECT(0x66, gbc.b());
        EXPECT(0xb8, gbc.c());
        EXPECT(0x2d, gbc.d());
        EXPECT(0x75, gbc.e());
        EXPECT(0x5d, gbc.h());
        EXPECT(0xba, gbc.l());
        EXPECT(0xd063, gbc.sp());
        EXPECT(0x5fa5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 01B7
        gbc.setState(0x386b, 0xdde7, 0x1430, 0x8a79, 0x7ffa, 0x1adc, 0x1, 0x0);
        gbc.writeMem(0x386b, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x14, gbc.a());
        EXPECT(0x8a, gbc.b());
        EXPECT(0x79, gbc.c());
        EXPECT(0x7f, gbc.d());
        EXPECT(0xfa, gbc.e());
        EXPECT(0x1a, gbc.h());
        EXPECT(0xd8, gbc.l());
        EXPECT(0xdde7, gbc.sp());
        EXPECT(0x386d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 01B8
        gbc.setState(0x7485, 0x2ae8, 0x8b10, 0x50ff, 0x403f, 0xfba7, 0x0, 0x1);
        gbc.writeMem(0x7485, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x8b, gbc.a());
        EXPECT(0x50, gbc.b());
        EXPECT(0xff, gbc.c());
        EXPECT(0x40, gbc.d());
        EXPECT(0x3f, gbc.e());
        EXPECT(0xfb, gbc.h());
        EXPECT(0xa3, gbc.l());
        EXPECT(0x2ae8, gbc.sp());
        EXPECT(0x7487, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 01B9
        gbc.setState(0xeceb, 0x43de, 0xa2f0, 0x23f4, 0x731f, 0xef19, 0x0, 0x0);
        gbc.writeMem(0xeceb, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xa2, gbc.a());
        EXPECT(0x23, gbc.b());
        EXPECT(0xf4, gbc.c());
        EXPECT(0x73, gbc.d());
        EXPECT(0x1f, gbc.e());
        EXPECT(0xef, gbc.h());
        EXPECT(0x19, gbc.l());
        EXPECT(0x43de, gbc.sp());
        EXPECT(0xeced, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xeceb));
        EXPECT(0x95, gbc.readMem(0xecec));
        // CB 95 01BA
        gbc.setState(0xc19b, 0xc81e, 0x8890, 0x2f27, 0x638b, 0x868, 0x1, 0x1);
        gbc.writeMem(0xc19b, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x88, gbc.a());
        EXPECT(0x2f, gbc.b());
        EXPECT(0x27, gbc.c());
        EXPECT(0x63, gbc.d());
        EXPECT(0x8b, gbc.e());
        EXPECT(0x8, gbc.h());
        EXPECT(0x68, gbc.l());
        EXPECT(0xc81e, gbc.sp());
        EXPECT(0xc19d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc19b));
        EXPECT(0x95, gbc.readMem(0xc19c));
        // CB 95 01BB
        gbc.setState(0xa4c4, 0x593e, 0x2310, 0x64f8, 0x1d48, 0x9e8b, 0x1, 0x1);
        gbc.writeMem(0xa4c4, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x23, gbc.a());
        EXPECT(0x64, gbc.b());
        EXPECT(0xf8, gbc.c());
        EXPECT(0x1d, gbc.d());
        EXPECT(0x48, gbc.e());
        EXPECT(0x9e, gbc.h());
        EXPECT(0x8b, gbc.l());
        EXPECT(0x593e, gbc.sp());
        EXPECT(0xa4c6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa4c4));
        EXPECT(0x95, gbc.readMem(0xa4c5));
        // CB 95 01BC
        gbc.setState(0x6a7b, 0x4232, 0x7280, 0x4621, 0xd203, 0x91e, 0x0, 0x0);
        gbc.writeMem(0x6a7b, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x72, gbc.a());
        EXPECT(0x46, gbc.b());
        EXPECT(0x21, gbc.c());
        EXPECT(0xd2, gbc.d());
        EXPECT(0x3, gbc.e());
        EXPECT(0x9, gbc.h());
        EXPECT(0x1a, gbc.l());
        EXPECT(0x4232, gbc.sp());
        EXPECT(0x6a7d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 01BD
        gbc.setState(0x1d34, 0x4ca3, 0x9020, 0x280f, 0xca7c, 0x748c, 0x0, 0x0);
        gbc.writeMem(0x1d34, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x90, gbc.a());
        EXPECT(0x28, gbc.b());
        EXPECT(0xf, gbc.c());
        EXPECT(0xca, gbc.d());
        EXPECT(0x7c, gbc.e());
        EXPECT(0x74, gbc.h());
        EXPECT(0x88, gbc.l());
        EXPECT(0x4ca3, gbc.sp());
        EXPECT(0x1d36, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 01BE
        gbc.setState(0xd8a8, 0xfe60, 0x2360, 0x5852, 0xe247, 0x702, 0x0, 0x1);
        gbc.writeMem(0xd8a8, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x23, gbc.a());
        EXPECT(0x58, gbc.b());
        EXPECT(0x52, gbc.c());
        EXPECT(0xe2, gbc.d());
        EXPECT(0x47, gbc.e());
        EXPECT(0x7, gbc.h());
        EXPECT(0x2, gbc.l());
        EXPECT(0xfe60, gbc.sp());
        EXPECT(0xd8aa, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd8a8));
        EXPECT(0x95, gbc.readMem(0xd8a9));
        // CB 95 01BF
        gbc.setState(0xba24, 0x4a37, 0xd1d0, 0x716e, 0x39b, 0x2ef, 0x0, 0x0);
        gbc.writeMem(0xba24, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xd1, gbc.a());
        EXPECT(0x71, gbc.b());
        EXPECT(0x6e, gbc.c());
        EXPECT(0x3, gbc.d());
        EXPECT(0x9b, gbc.e());
        EXPECT(0x2, gbc.h());
        EXPECT(0xeb, gbc.l());
        EXPECT(0x4a37, gbc.sp());
        EXPECT(0xba26, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xba24));
        EXPECT(0x95, gbc.readMem(0xba25));
        // CB 95 01C0
        gbc.setState(0x1c91, 0x99, 0x1570, 0x29f2, 0x6b45, 0x7c7a, 0x1, 0x1);
        gbc.writeMem(0x1c91, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x15, gbc.a());
        EXPECT(0x29, gbc.b());
        EXPECT(0xf2, gbc.c());
        EXPECT(0x6b, gbc.d());
        EXPECT(0x45, gbc.e());
        EXPECT(0x7c, gbc.h());
        EXPECT(0x7a, gbc.l());
        EXPECT(0x99, gbc.sp());
        EXPECT(0x1c93, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 01C1
        gbc.setState(0x3dc1, 0xd042, 0x37b0, 0x408, 0x90b, 0x1295, 0x1, 0x0);
        gbc.writeMem(0x3dc1, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x37, gbc.a());
        EXPECT(0x4, gbc.b());
        EXPECT(0x8, gbc.c());
        EXPECT(0x9, gbc.d());
        EXPECT(0xb, gbc.e());
        EXPECT(0x12, gbc.h());
        EXPECT(0x91, gbc.l());
        EXPECT(0xd042, gbc.sp());
        EXPECT(0x3dc3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 01C2
        gbc.setState(0x1f34, 0x85ec, 0xbce0, 0x4009, 0x11af, 0xcf01, 0x0, 0x1);
        gbc.writeMem(0x1f34, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xbc, gbc.a());
        EXPECT(0x40, gbc.b());
        EXPECT(0x9, gbc.c());
        EXPECT(0x11, gbc.d());
        EXPECT(0xaf, gbc.e());
        EXPECT(0xcf, gbc.h());
        EXPECT(0x1, gbc.l());
        EXPECT(0x85ec, gbc.sp());
        EXPECT(0x1f36, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 01C3
        gbc.setState(0x8987, 0x163a, 0x36d0, 0x486, 0x4302, 0x8811, 0x0, 0x0);
        gbc.writeMem(0x8987, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x36, gbc.a());
        EXPECT(0x4, gbc.b());
        EXPECT(0x86, gbc.c());
        EXPECT(0x43, gbc.d());
        EXPECT(0x2, gbc.e());
        EXPECT(0x88, gbc.h());
        EXPECT(0x11, gbc.l());
        EXPECT(0x163a, gbc.sp());
        EXPECT(0x8989, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8987));
        EXPECT(0x95, gbc.readMem(0x8988));
        // CB 95 01C4
        gbc.setState(0x6dc2, 0x8160, 0x5670, 0x24ca, 0x2051, 0xbf09, 0x0, 0x1);
        gbc.writeMem(0x6dc2, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x56, gbc.a());
        EXPECT(0x24, gbc.b());
        EXPECT(0xca, gbc.c());
        EXPECT(0x20, gbc.d());
        EXPECT(0x51, gbc.e());
        EXPECT(0xbf, gbc.h());
        EXPECT(0x9, gbc.l());
        EXPECT(0x8160, gbc.sp());
        EXPECT(0x6dc4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 01C5
        gbc.setState(0x6768, 0xfd0, 0xe30, 0xc7d9, 0xbd98, 0x7cf2, 0x0, 0x1);
        gbc.writeMem(0x6768, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xe, gbc.a());
        EXPECT(0xc7, gbc.b());
        EXPECT(0xd9, gbc.c());
        EXPECT(0xbd, gbc.d());
        EXPECT(0x98, gbc.e());
        EXPECT(0x7c, gbc.h());
        EXPECT(0xf2, gbc.l());
        EXPECT(0xfd0, gbc.sp());
        EXPECT(0x676a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 01C7
        gbc.setState(0x1d, 0x2c29, 0xa40, 0x3808, 0xb335, 0x356d, 0x1, 0x0);
        gbc.writeMem(0x1d, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xa, gbc.a());
        EXPECT(0x38, gbc.b());
        EXPECT(0x8, gbc.c());
        EXPECT(0xb3, gbc.d());
        EXPECT(0x35, gbc.e());
        EXPECT(0x35, gbc.h());
        EXPECT(0x69, gbc.l());
        EXPECT(0x2c29, gbc.sp());
        EXPECT(0x1f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 01C8
        gbc.setState(0x6163, 0x5255, 0x4ca0, 0x337d, 0x31f6, 0x921a, 0x0, 0x1);
        gbc.writeMem(0x6163, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x4c, gbc.a());
        EXPECT(0x33, gbc.b());
        EXPECT(0x7d, gbc.c());
        EXPECT(0x31, gbc.d());
        EXPECT(0xf6, gbc.e());
        EXPECT(0x92, gbc.h());
        EXPECT(0x1a, gbc.l());
        EXPECT(0x5255, gbc.sp());
        EXPECT(0x6165, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 01C9
        gbc.setState(0x3fa3, 0x2ed2, 0x8df0, 0x26e4, 0xf608, 0x6858, 0x1, 0x0);
        gbc.writeMem(0x3fa3, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x8d, gbc.a());
        EXPECT(0x26, gbc.b());
        EXPECT(0xe4, gbc.c());
        EXPECT(0xf6, gbc.d());
        EXPECT(0x8, gbc.e());
        EXPECT(0x68, gbc.h());
        EXPECT(0x58, gbc.l());
        EXPECT(0x2ed2, gbc.sp());
        EXPECT(0x3fa5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 01CA
        gbc.setState(0xbbc, 0xb10, 0xe3e0, 0x42ba, 0xff10, 0x8b78, 0x0, 0x0);
        gbc.writeMem(0xbbc, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xe3, gbc.a());
        EXPECT(0x42, gbc.b());
        EXPECT(0xba, gbc.c());
        EXPECT(0xff, gbc.d());
        EXPECT(0x10, gbc.e());
        EXPECT(0x8b, gbc.h());
        EXPECT(0x78, gbc.l());
        EXPECT(0xb10, gbc.sp());
        EXPECT(0xbbe, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 01CB
        gbc.setState(0x669b, 0x5901, 0xc900, 0x5886, 0xd9c, 0x1b96, 0x0, 0x1);
        gbc.writeMem(0x669b, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xc9, gbc.a());
        EXPECT(0x58, gbc.b());
        EXPECT(0x86, gbc.c());
        EXPECT(0xd, gbc.d());
        EXPECT(0x9c, gbc.e());
        EXPECT(0x1b, gbc.h());
        EXPECT(0x92, gbc.l());
        EXPECT(0x5901, gbc.sp());
        EXPECT(0x669d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 01CC
        gbc.setState(0xd822, 0xea3d, 0x5f00, 0x8709, 0x73c6, 0xe926, 0x1, 0x0);
        gbc.writeMem(0xd822, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x5f, gbc.a());
        EXPECT(0x87, gbc.b());
        EXPECT(0x9, gbc.c());
        EXPECT(0x73, gbc.d());
        EXPECT(0xc6, gbc.e());
        EXPECT(0xe9, gbc.h());
        EXPECT(0x22, gbc.l());
        EXPECT(0xea3d, gbc.sp());
        EXPECT(0xd824, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd822));
        EXPECT(0x95, gbc.readMem(0xd823));
        // CB 95 01CD
        gbc.setState(0xbe0d, 0xf31d, 0xa0b0, 0x1c7, 0xd136, 0x4e5b, 0x1, 0x0);
        gbc.writeMem(0xbe0d, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xa0, gbc.a());
        EXPECT(0x1, gbc.b());
        EXPECT(0xc7, gbc.c());
        EXPECT(0xd1, gbc.d());
        EXPECT(0x36, gbc.e());
        EXPECT(0x4e, gbc.h());
        EXPECT(0x5b, gbc.l());
        EXPECT(0xf31d, gbc.sp());
        EXPECT(0xbe0f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbe0d));
        EXPECT(0x95, gbc.readMem(0xbe0e));
        // CB 95 01CE
        gbc.setState(0xb747, 0x4620, 0xab40, 0x1e51, 0x9866, 0xb29, 0x1, 0x1);
        gbc.writeMem(0xb747, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xab, gbc.a());
        EXPECT(0x1e, gbc.b());
        EXPECT(0x51, gbc.c());
        EXPECT(0x98, gbc.d());
        EXPECT(0x66, gbc.e());
        EXPECT(0xb, gbc.h());
        EXPECT(0x29, gbc.l());
        EXPECT(0x4620, gbc.sp());
        EXPECT(0xb749, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb747));
        EXPECT(0x95, gbc.readMem(0xb748));
        // CB 95 01CF
        gbc.setState(0xcf32, 0xcc68, 0x8780, 0xc881, 0x960e, 0x5b51, 0x1, 0x0);
        gbc.writeMem(0xcf32, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x87, gbc.a());
        EXPECT(0xc8, gbc.b());
        EXPECT(0x81, gbc.c());
        EXPECT(0x96, gbc.d());
        EXPECT(0xe, gbc.e());
        EXPECT(0x5b, gbc.h());
        EXPECT(0x51, gbc.l());
        EXPECT(0xcc68, gbc.sp());
        EXPECT(0xcf34, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcf32));
        EXPECT(0x95, gbc.readMem(0xcf33));
        // CB 95 01D0
        gbc.setState(0xc2e, 0x9e35, 0xb930, 0x2ec, 0x60ad, 0xdf7c, 0x0, 0x0);
        gbc.writeMem(0xc2e, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xb9, gbc.a());
        EXPECT(0x2, gbc.b());
        EXPECT(0xec, gbc.c());
        EXPECT(0x60, gbc.d());
        EXPECT(0xad, gbc.e());
        EXPECT(0xdf, gbc.h());
        EXPECT(0x78, gbc.l());
        EXPECT(0x9e35, gbc.sp());
        EXPECT(0xc30, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 01D1
        gbc.setState(0xa3b6, 0xa6c7, 0x4340, 0x2636, 0xfca9, 0xa08d, 0x1, 0x0);
        gbc.writeMem(0xa3b6, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x43, gbc.a());
        EXPECT(0x26, gbc.b());
        EXPECT(0x36, gbc.c());
        EXPECT(0xfc, gbc.d());
        EXPECT(0xa9, gbc.e());
        EXPECT(0xa0, gbc.h());
        EXPECT(0x89, gbc.l());
        EXPECT(0xa6c7, gbc.sp());
        EXPECT(0xa3b8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa3b6));
        EXPECT(0x95, gbc.readMem(0xa3b7));
        // CB 95 01D3
        gbc.setState(0x787b, 0x934b, 0x1060, 0x5513, 0x88da, 0x63a4, 0x0, 0x1);
        gbc.writeMem(0x787b, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x10, gbc.a());
        EXPECT(0x55, gbc.b());
        EXPECT(0x13, gbc.c());
        EXPECT(0x88, gbc.d());
        EXPECT(0xda, gbc.e());
        EXPECT(0x63, gbc.h());
        EXPECT(0xa0, gbc.l());
        EXPECT(0x934b, gbc.sp());
        EXPECT(0x787d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 01D4
        gbc.setState(0xefb2, 0x1351, 0x9e30, 0xc3a1, 0x4d0e, 0x6a58, 0x0, 0x0);
        gbc.writeMem(0xefb2, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x9e, gbc.a());
        EXPECT(0xc3, gbc.b());
        EXPECT(0xa1, gbc.c());
        EXPECT(0x4d, gbc.d());
        EXPECT(0xe, gbc.e());
        EXPECT(0x6a, gbc.h());
        EXPECT(0x58, gbc.l());
        EXPECT(0x1351, gbc.sp());
        EXPECT(0xefb4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xefb2));
        EXPECT(0x95, gbc.readMem(0xefb3));
        // CB 95 01D5
        gbc.setState(0x9d8b, 0x19ee, 0x5700, 0x4a2b, 0xa7d5, 0x6ded, 0x1, 0x0);
        gbc.writeMem(0x9d8b, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x57, gbc.a());
        EXPECT(0x4a, gbc.b());
        EXPECT(0x2b, gbc.c());
        EXPECT(0xa7, gbc.d());
        EXPECT(0xd5, gbc.e());
        EXPECT(0x6d, gbc.h());
        EXPECT(0xe9, gbc.l());
        EXPECT(0x19ee, gbc.sp());
        EXPECT(0x9d8d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9d8b));
        EXPECT(0x95, gbc.readMem(0x9d8c));
        // CB 95 01D6
        gbc.setState(0xdb97, 0x9e45, 0xa970, 0xc976, 0x79ce, 0xb265, 0x1, 0x1);
        gbc.writeMem(0xdb97, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xa9, gbc.a());
        EXPECT(0xc9, gbc.b());
        EXPECT(0x76, gbc.c());
        EXPECT(0x79, gbc.d());
        EXPECT(0xce, gbc.e());
        EXPECT(0xb2, gbc.h());
        EXPECT(0x61, gbc.l());
        EXPECT(0x9e45, gbc.sp());
        EXPECT(0xdb99, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdb97));
        EXPECT(0x95, gbc.readMem(0xdb98));
        // CB 95 01D7
        gbc.setState(0xefef, 0x195, 0x6150, 0xc42c, 0xf1a6, 0x1a11, 0x0, 0x1);
        gbc.writeMem(0xefef, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x61, gbc.a());
        EXPECT(0xc4, gbc.b());
        EXPECT(0x2c, gbc.c());
        EXPECT(0xf1, gbc.d());
        EXPECT(0xa6, gbc.e());
        EXPECT(0x1a, gbc.h());
        EXPECT(0x11, gbc.l());
        EXPECT(0x195, gbc.sp());
        EXPECT(0xeff1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xefef));
        EXPECT(0x95, gbc.readMem(0xeff0));
        // CB 95 01D8
        gbc.setState(0x4618, 0x996b, 0xfb90, 0xfed0, 0x2063, 0x6656, 0x1, 0x0);
        gbc.writeMem(0x4618, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xfb, gbc.a());
        EXPECT(0xfe, gbc.b());
        EXPECT(0xd0, gbc.c());
        EXPECT(0x20, gbc.d());
        EXPECT(0x63, gbc.e());
        EXPECT(0x66, gbc.h());
        EXPECT(0x52, gbc.l());
        EXPECT(0x996b, gbc.sp());
        EXPECT(0x461a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 01D9
        gbc.setState(0x215a, 0xc834, 0xc940, 0xc679, 0x58be, 0xf51f, 0x1, 0x0);
        gbc.writeMem(0x215a, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xc9, gbc.a());
        EXPECT(0xc6, gbc.b());
        EXPECT(0x79, gbc.c());
        EXPECT(0x58, gbc.d());
        EXPECT(0xbe, gbc.e());
        EXPECT(0xf5, gbc.h());
        EXPECT(0x1b, gbc.l());
        EXPECT(0xc834, gbc.sp());
        EXPECT(0x215c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 01DA
        gbc.setState(0x9c34, 0x6f52, 0x5280, 0xbdd1, 0x9810, 0xce3b, 0x0, 0x0);
        gbc.writeMem(0x9c34, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x52, gbc.a());
        EXPECT(0xbd, gbc.b());
        EXPECT(0xd1, gbc.c());
        EXPECT(0x98, gbc.d());
        EXPECT(0x10, gbc.e());
        EXPECT(0xce, gbc.h());
        EXPECT(0x3b, gbc.l());
        EXPECT(0x6f52, gbc.sp());
        EXPECT(0x9c36, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9c34));
        EXPECT(0x95, gbc.readMem(0x9c35));
        // CB 95 01DB
        gbc.setState(0xdf40, 0x43fb, 0x430, 0x61c8, 0x46d4, 0xfe2a, 0x1, 0x1);
        gbc.writeMem(0xdf40, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x4, gbc.a());
        EXPECT(0x61, gbc.b());
        EXPECT(0xc8, gbc.c());
        EXPECT(0x46, gbc.d());
        EXPECT(0xd4, gbc.e());
        EXPECT(0xfe, gbc.h());
        EXPECT(0x2a, gbc.l());
        EXPECT(0x43fb, gbc.sp());
        EXPECT(0xdf42, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdf40));
        EXPECT(0x95, gbc.readMem(0xdf41));
        // CB 95 01DC
        gbc.setState(0xa828, 0x71aa, 0x9e00, 0xc54d, 0x7dbb, 0x58b, 0x1, 0x0);
        gbc.writeMem(0xa828, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x9e, gbc.a());
        EXPECT(0xc5, gbc.b());
        EXPECT(0x4d, gbc.c());
        EXPECT(0x7d, gbc.d());
        EXPECT(0xbb, gbc.e());
        EXPECT(0x5, gbc.h());
        EXPECT(0x8b, gbc.l());
        EXPECT(0x71aa, gbc.sp());
        EXPECT(0xa82a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa828));
        EXPECT(0x95, gbc.readMem(0xa829));
        // CB 95 01DD
        gbc.setState(0x5243, 0x369, 0xf270, 0xbe39, 0x1fd2, 0xcef2, 0x1, 0x0);
        gbc.writeMem(0x5243, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xf2, gbc.a());
        EXPECT(0xbe, gbc.b());
        EXPECT(0x39, gbc.c());
        EXPECT(0x1f, gbc.d());
        EXPECT(0xd2, gbc.e());
        EXPECT(0xce, gbc.h());
        EXPECT(0xf2, gbc.l());
        EXPECT(0x369, gbc.sp());
        EXPECT(0x5245, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 01DE
        gbc.setState(0x26d5, 0x9de6, 0x57b0, 0x2721, 0xfa7, 0x2434, 0x0, 0x0);
        gbc.writeMem(0x26d5, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x57, gbc.a());
        EXPECT(0x27, gbc.b());
        EXPECT(0x21, gbc.c());
        EXPECT(0xf, gbc.d());
        EXPECT(0xa7, gbc.e());
        EXPECT(0x24, gbc.h());
        EXPECT(0x30, gbc.l());
        EXPECT(0x9de6, gbc.sp());
        EXPECT(0x26d7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 01DF
        gbc.setState(0x5208, 0x8f90, 0x5460, 0x742c, 0xbd35, 0x7908, 0x1, 0x0);
        gbc.writeMem(0x5208, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x54, gbc.a());
        EXPECT(0x74, gbc.b());
        EXPECT(0x2c, gbc.c());
        EXPECT(0xbd, gbc.d());
        EXPECT(0x35, gbc.e());
        EXPECT(0x79, gbc.h());
        EXPECT(0x8, gbc.l());
        EXPECT(0x8f90, gbc.sp());
        EXPECT(0x520a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 01E0
        gbc.setState(0x9df5, 0x5828, 0x34e0, 0xba67, 0x76e2, 0xe350, 0x0, 0x0);
        gbc.writeMem(0x9df5, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x34, gbc.a());
        EXPECT(0xba, gbc.b());
        EXPECT(0x67, gbc.c());
        EXPECT(0x76, gbc.d());
        EXPECT(0xe2, gbc.e());
        EXPECT(0xe3, gbc.h());
        EXPECT(0x50, gbc.l());
        EXPECT(0x5828, gbc.sp());
        EXPECT(0x9df7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9df5));
        EXPECT(0x95, gbc.readMem(0x9df6));
        // CB 95 01E1
        gbc.setState(0xc404, 0x8f64, 0xcb40, 0x142b, 0x8522, 0xe824, 0x0, 0x0);
        gbc.writeMem(0xc404, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xcb, gbc.a());
        EXPECT(0x14, gbc.b());
        EXPECT(0x2b, gbc.c());
        EXPECT(0x85, gbc.d());
        EXPECT(0x22, gbc.e());
        EXPECT(0xe8, gbc.h());
        EXPECT(0x20, gbc.l());
        EXPECT(0x8f64, gbc.sp());
        EXPECT(0xc406, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc404));
        EXPECT(0x95, gbc.readMem(0xc405));
        // CB 95 01E2
        gbc.setState(0xa0e3, 0xe3e, 0xd3e0, 0xaee2, 0x3238, 0xe82e, 0x0, 0x1);
        gbc.writeMem(0xa0e3, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xd3, gbc.a());
        EXPECT(0xae, gbc.b());
        EXPECT(0xe2, gbc.c());
        EXPECT(0x32, gbc.d());
        EXPECT(0x38, gbc.e());
        EXPECT(0xe8, gbc.h());
        EXPECT(0x2a, gbc.l());
        EXPECT(0xe3e, gbc.sp());
        EXPECT(0xa0e5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa0e3));
        EXPECT(0x95, gbc.readMem(0xa0e4));
        // CB 95 01E3
        gbc.setState(0x8833, 0xdf45, 0x9c40, 0xef09, 0x7bac, 0xa5f8, 0x0, 0x1);
        gbc.writeMem(0x8833, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x9c, gbc.a());
        EXPECT(0xef, gbc.b());
        EXPECT(0x9, gbc.c());
        EXPECT(0x7b, gbc.d());
        EXPECT(0xac, gbc.e());
        EXPECT(0xa5, gbc.h());
        EXPECT(0xf8, gbc.l());
        EXPECT(0xdf45, gbc.sp());
        EXPECT(0x8835, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8833));
        EXPECT(0x95, gbc.readMem(0x8834));
        // CB 95 01E4
        gbc.setState(0x9cfe, 0xd7c6, 0x69d0, 0x5db9, 0x1134, 0xeac1, 0x0, 0x0);
        gbc.writeMem(0x9cfe, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x69, gbc.a());
        EXPECT(0x5d, gbc.b());
        EXPECT(0xb9, gbc.c());
        EXPECT(0x11, gbc.d());
        EXPECT(0x34, gbc.e());
        EXPECT(0xea, gbc.h());
        EXPECT(0xc1, gbc.l());
        EXPECT(0xd7c6, gbc.sp());
        EXPECT(0x9d00, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9cfe));
        EXPECT(0x95, gbc.readMem(0x9cff));
        // CB 95 01E5
        gbc.setState(0x4d9d, 0xf405, 0x3c40, 0xfd07, 0xd3d9, 0xd67c, 0x1, 0x0);
        gbc.writeMem(0x4d9d, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x3c, gbc.a());
        EXPECT(0xfd, gbc.b());
        EXPECT(0x7, gbc.c());
        EXPECT(0xd3, gbc.d());
        EXPECT(0xd9, gbc.e());
        EXPECT(0xd6, gbc.h());
        EXPECT(0x78, gbc.l());
        EXPECT(0xf405, gbc.sp());
        EXPECT(0x4d9f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 01E6
        gbc.setState(0xd902, 0x415f, 0x4390, 0x2dca, 0xca28, 0xac7b, 0x0, 0x1);
        gbc.writeMem(0xd902, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x43, gbc.a());
        EXPECT(0x2d, gbc.b());
        EXPECT(0xca, gbc.c());
        EXPECT(0xca, gbc.d());
        EXPECT(0x28, gbc.e());
        EXPECT(0xac, gbc.h());
        EXPECT(0x7b, gbc.l());
        EXPECT(0x415f, gbc.sp());
        EXPECT(0xd904, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd902));
        EXPECT(0x95, gbc.readMem(0xd903));
        // CB 95 01E7
        gbc.setState(0xda7f, 0x13e1, 0x9950, 0x16dc, 0x4db9, 0xc3f5, 0x0, 0x0);
        gbc.writeMem(0xda7f, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x99, gbc.a());
        EXPECT(0x16, gbc.b());
        EXPECT(0xdc, gbc.c());
        EXPECT(0x4d, gbc.d());
        EXPECT(0xb9, gbc.e());
        EXPECT(0xc3, gbc.h());
        EXPECT(0xf1, gbc.l());
        EXPECT(0x13e1, gbc.sp());
        EXPECT(0xda81, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xda7f));
        EXPECT(0x95, gbc.readMem(0xda80));
        // CB 95 01E8
        gbc.setState(0x1f03, 0x61da, 0x1c80, 0x7fe1, 0xfc54, 0xfc5, 0x1, 0x1);
        gbc.writeMem(0x1f03, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x1c, gbc.a());
        EXPECT(0x7f, gbc.b());
        EXPECT(0xe1, gbc.c());
        EXPECT(0xfc, gbc.d());
        EXPECT(0x54, gbc.e());
        EXPECT(0xf, gbc.h());
        EXPECT(0xc1, gbc.l());
        EXPECT(0x61da, gbc.sp());
        EXPECT(0x1f05, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 01E9
        gbc.setState(0x2a09, 0x4f01, 0xa250, 0xa893, 0x9cc5, 0xb5c3, 0x1, 0x0);
        gbc.writeMem(0x2a09, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xa2, gbc.a());
        EXPECT(0xa8, gbc.b());
        EXPECT(0x93, gbc.c());
        EXPECT(0x9c, gbc.d());
        EXPECT(0xc5, gbc.e());
        EXPECT(0xb5, gbc.h());
        EXPECT(0xc3, gbc.l());
        EXPECT(0x4f01, gbc.sp());
        EXPECT(0x2a0b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 01EA
        gbc.setState(0x248e, 0x3611, 0x9160, 0xc7af, 0x4fe7, 0xa41b, 0x1, 0x0);
        gbc.writeMem(0x248e, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x91, gbc.a());
        EXPECT(0xc7, gbc.b());
        EXPECT(0xaf, gbc.c());
        EXPECT(0x4f, gbc.d());
        EXPECT(0xe7, gbc.e());
        EXPECT(0xa4, gbc.h());
        EXPECT(0x1b, gbc.l());
        EXPECT(0x3611, gbc.sp());
        EXPECT(0x2490, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 01EC
        gbc.setState(0xafb8, 0x1899, 0x1ae0, 0xac5f, 0x3794, 0xc5f5, 0x0, 0x0);
        gbc.writeMem(0xafb8, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x1a, gbc.a());
        EXPECT(0xac, gbc.b());
        EXPECT(0x5f, gbc.c());
        EXPECT(0x37, gbc.d());
        EXPECT(0x94, gbc.e());
        EXPECT(0xc5, gbc.h());
        EXPECT(0xf1, gbc.l());
        EXPECT(0x1899, gbc.sp());
        EXPECT(0xafba, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xafb8));
        EXPECT(0x95, gbc.readMem(0xafb9));
        // CB 95 01ED
        gbc.setState(0x5697, 0x31d4, 0x5ae0, 0x86ef, 0xa2d8, 0x2a14, 0x0, 0x1);
        gbc.writeMem(0x5697, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x5a, gbc.a());
        EXPECT(0x86, gbc.b());
        EXPECT(0xef, gbc.c());
        EXPECT(0xa2, gbc.d());
        EXPECT(0xd8, gbc.e());
        EXPECT(0x2a, gbc.h());
        EXPECT(0x10, gbc.l());
        EXPECT(0x31d4, gbc.sp());
        EXPECT(0x5699, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 01EE
        gbc.setState(0x68ec, 0xa6ee, 0xea30, 0x8a3c, 0x40b4, 0x6331, 0x0, 0x0);
        gbc.writeMem(0x68ec, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xea, gbc.a());
        EXPECT(0x8a, gbc.b());
        EXPECT(0x3c, gbc.c());
        EXPECT(0x40, gbc.d());
        EXPECT(0xb4, gbc.e());
        EXPECT(0x63, gbc.h());
        EXPECT(0x31, gbc.l());
        EXPECT(0xa6ee, gbc.sp());
        EXPECT(0x68ee, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 01EF
        gbc.setState(0x4ebd, 0xc651, 0xf930, 0x7a36, 0x34bd, 0xc966, 0x1, 0x0);
        gbc.writeMem(0x4ebd, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xf9, gbc.a());
        EXPECT(0x7a, gbc.b());
        EXPECT(0x36, gbc.c());
        EXPECT(0x34, gbc.d());
        EXPECT(0xbd, gbc.e());
        EXPECT(0xc9, gbc.h());
        EXPECT(0x62, gbc.l());
        EXPECT(0xc651, gbc.sp());
        EXPECT(0x4ebf, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 01F0
        gbc.setState(0x5beb, 0xe84d, 0x5160, 0xb219, 0x7c60, 0x334b, 0x1, 0x1);
        gbc.writeMem(0x5beb, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x51, gbc.a());
        EXPECT(0xb2, gbc.b());
        EXPECT(0x19, gbc.c());
        EXPECT(0x7c, gbc.d());
        EXPECT(0x60, gbc.e());
        EXPECT(0x33, gbc.h());
        EXPECT(0x4b, gbc.l());
        EXPECT(0xe84d, gbc.sp());
        EXPECT(0x5bed, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 01F1
        gbc.setState(0x88ad, 0x874c, 0x3910, 0xc9dc, 0x6580, 0x8b51, 0x1, 0x1);
        gbc.writeMem(0x88ad, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x39, gbc.a());
        EXPECT(0xc9, gbc.b());
        EXPECT(0xdc, gbc.c());
        EXPECT(0x65, gbc.d());
        EXPECT(0x80, gbc.e());
        EXPECT(0x8b, gbc.h());
        EXPECT(0x51, gbc.l());
        EXPECT(0x874c, gbc.sp());
        EXPECT(0x88af, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x88ad));
        EXPECT(0x95, gbc.readMem(0x88ae));
        // CB 95 01F3
        gbc.setState(0x88a5, 0x55b7, 0x6b80, 0x70ff, 0x4090, 0xc417, 0x0, 0x1);
        gbc.writeMem(0x88a5, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x6b, gbc.a());
        EXPECT(0x70, gbc.b());
        EXPECT(0xff, gbc.c());
        EXPECT(0x40, gbc.d());
        EXPECT(0x90, gbc.e());
        EXPECT(0xc4, gbc.h());
        EXPECT(0x13, gbc.l());
        EXPECT(0x55b7, gbc.sp());
        EXPECT(0x88a7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x88a5));
        EXPECT(0x95, gbc.readMem(0x88a6));
        // CB 95 01F4
        gbc.setState(0x8a40, 0x359f, 0x9f10, 0x80b2, 0x50fb, 0x5608, 0x1, 0x0);
        gbc.writeMem(0x8a40, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x9f, gbc.a());
        EXPECT(0x80, gbc.b());
        EXPECT(0xb2, gbc.c());
        EXPECT(0x50, gbc.d());
        EXPECT(0xfb, gbc.e());
        EXPECT(0x56, gbc.h());
        EXPECT(0x8, gbc.l());
        EXPECT(0x359f, gbc.sp());
        EXPECT(0x8a42, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8a40));
        EXPECT(0x95, gbc.readMem(0x8a41));
        // CB 95 01F5
        gbc.setState(0xbc5f, 0x8c7c, 0x3fc0, 0xd25c, 0x1aa, 0x36ae, 0x1, 0x0);
        gbc.writeMem(0xbc5f, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x3f, gbc.a());
        EXPECT(0xd2, gbc.b());
        EXPECT(0x5c, gbc.c());
        EXPECT(0x1, gbc.d());
        EXPECT(0xaa, gbc.e());
        EXPECT(0x36, gbc.h());
        EXPECT(0xaa, gbc.l());
        EXPECT(0x8c7c, gbc.sp());
        EXPECT(0xbc61, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbc5f));
        EXPECT(0x95, gbc.readMem(0xbc60));
        // CB 95 01F6
        gbc.setState(0x887d, 0xde90, 0x3750, 0xa04d, 0x294d, 0x39fe, 0x0, 0x1);
        gbc.writeMem(0x887d, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x37, gbc.a());
        EXPECT(0xa0, gbc.b());
        EXPECT(0x4d, gbc.c());
        EXPECT(0x29, gbc.d());
        EXPECT(0x4d, gbc.e());
        EXPECT(0x39, gbc.h());
        EXPECT(0xfa, gbc.l());
        EXPECT(0xde90, gbc.sp());
        EXPECT(0x887f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x887d));
        EXPECT(0x95, gbc.readMem(0x887e));
        // CB 95 01F7
        gbc.setState(0x7eca, 0x4389, 0xea40, 0x416f, 0x4433, 0x1371, 0x0, 0x0);
        gbc.writeMem(0x7eca, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xea, gbc.a());
        EXPECT(0x41, gbc.b());
        EXPECT(0x6f, gbc.c());
        EXPECT(0x44, gbc.d());
        EXPECT(0x33, gbc.e());
        EXPECT(0x13, gbc.h());
        EXPECT(0x71, gbc.l());
        EXPECT(0x4389, gbc.sp());
        EXPECT(0x7ecc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 01F8
        gbc.setState(0xd618, 0x364a, 0x5210, 0x926b, 0xa55e, 0xe6f7, 0x0, 0x0);
        gbc.writeMem(0xd618, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x52, gbc.a());
        EXPECT(0x92, gbc.b());
        EXPECT(0x6b, gbc.c());
        EXPECT(0xa5, gbc.d());
        EXPECT(0x5e, gbc.e());
        EXPECT(0xe6, gbc.h());
        EXPECT(0xf3, gbc.l());
        EXPECT(0x364a, gbc.sp());
        EXPECT(0xd61a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd618));
        EXPECT(0x95, gbc.readMem(0xd619));
        // CB 95 01F9
        gbc.setState(0x82e7, 0x437a, 0x1270, 0x7e51, 0xf68b, 0x6a83, 0x1, 0x1);
        gbc.writeMem(0x82e7, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x12, gbc.a());
        EXPECT(0x7e, gbc.b());
        EXPECT(0x51, gbc.c());
        EXPECT(0xf6, gbc.d());
        EXPECT(0x8b, gbc.e());
        EXPECT(0x6a, gbc.h());
        EXPECT(0x83, gbc.l());
        EXPECT(0x437a, gbc.sp());
        EXPECT(0x82e9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x82e7));
        EXPECT(0x95, gbc.readMem(0x82e8));
        // CB 95 01FA
        gbc.setState(0x46d6, 0x6bef, 0xf060, 0xe87, 0x6253, 0x9d89, 0x1, 0x1);
        gbc.writeMem(0x46d6, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xf0, gbc.a());
        EXPECT(0xe, gbc.b());
        EXPECT(0x87, gbc.c());
        EXPECT(0x62, gbc.d());
        EXPECT(0x53, gbc.e());
        EXPECT(0x9d, gbc.h());
        EXPECT(0x89, gbc.l());
        EXPECT(0x6bef, gbc.sp());
        EXPECT(0x46d8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 01FB
        gbc.setState(0x5754, 0xaf2e, 0x5cf0, 0x340, 0x32aa, 0x99e0, 0x0, 0x0);
        gbc.writeMem(0x5754, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x5c, gbc.a());
        EXPECT(0x3, gbc.b());
        EXPECT(0x40, gbc.c());
        EXPECT(0x32, gbc.d());
        EXPECT(0xaa, gbc.e());
        EXPECT(0x99, gbc.h());
        EXPECT(0xe0, gbc.l());
        EXPECT(0xaf2e, gbc.sp());
        EXPECT(0x5756, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 01FC
        gbc.setState(0x610c, 0x4c4d, 0xabb0, 0xdf97, 0x20da, 0xc43e, 0x0, 0x1);
        gbc.writeMem(0x610c, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xab, gbc.a());
        EXPECT(0xdf, gbc.b());
        EXPECT(0x97, gbc.c());
        EXPECT(0x20, gbc.d());
        EXPECT(0xda, gbc.e());
        EXPECT(0xc4, gbc.h());
        EXPECT(0x3a, gbc.l());
        EXPECT(0x4c4d, gbc.sp());
        EXPECT(0x610e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 01FD
        gbc.setState(0xd431, 0xef25, 0xbf0, 0x651f, 0x97e3, 0x836, 0x0, 0x0);
        gbc.writeMem(0xd431, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xb, gbc.a());
        EXPECT(0x65, gbc.b());
        EXPECT(0x1f, gbc.c());
        EXPECT(0x97, gbc.d());
        EXPECT(0xe3, gbc.e());
        EXPECT(0x8, gbc.h());
        EXPECT(0x32, gbc.l());
        EXPECT(0xef25, gbc.sp());
        EXPECT(0xd433, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd431));
        EXPECT(0x95, gbc.readMem(0xd432));
        // CB 95 01FE
        gbc.setState(0xd994, 0xb37b, 0x390, 0x6dc9, 0xcdae, 0x3bfe, 0x1, 0x1);
        gbc.writeMem(0xd994, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x3, gbc.a());
        EXPECT(0x6d, gbc.b());
        EXPECT(0xc9, gbc.c());
        EXPECT(0xcd, gbc.d());
        EXPECT(0xae, gbc.e());
        EXPECT(0x3b, gbc.h());
        EXPECT(0xfa, gbc.l());
        EXPECT(0xb37b, gbc.sp());
        EXPECT(0xd996, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd994));
        EXPECT(0x95, gbc.readMem(0xd995));
        // CB 95 01FF
        gbc.setState(0xe0e3, 0x3bfa, 0x1b40, 0xd391, 0xb6de, 0xc754, 0x1, 0x0);
        gbc.writeMem(0xe0e3, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x1b, gbc.a());
        EXPECT(0xd3, gbc.b());
        EXPECT(0x91, gbc.c());
        EXPECT(0xb6, gbc.d());
        EXPECT(0xde, gbc.e());
        EXPECT(0xc7, gbc.h());
        EXPECT(0x50, gbc.l());
        EXPECT(0x3bfa, gbc.sp());
        EXPECT(0xe0e5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe0e3));
        EXPECT(0x95, gbc.readMem(0xe0e4));
        // CB 95 0200
        gbc.setState(0x3626, 0x47f9, 0xb8d0, 0xf05b, 0x8f62, 0x6e0d, 0x1, 0x0);
        gbc.writeMem(0x3626, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xb8, gbc.a());
        EXPECT(0xf0, gbc.b());
        EXPECT(0x5b, gbc.c());
        EXPECT(0x8f, gbc.d());
        EXPECT(0x62, gbc.e());
        EXPECT(0x6e, gbc.h());
        EXPECT(0x9, gbc.l());
        EXPECT(0x47f9, gbc.sp());
        EXPECT(0x3628, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 0201
        gbc.setState(0x89dd, 0xad30, 0x1850, 0x5198, 0xa0ea, 0x19e6, 0x1, 0x1);
        gbc.writeMem(0x89dd, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x18, gbc.a());
        EXPECT(0x51, gbc.b());
        EXPECT(0x98, gbc.c());
        EXPECT(0xa0, gbc.d());
        EXPECT(0xea, gbc.e());
        EXPECT(0x19, gbc.h());
        EXPECT(0xe2, gbc.l());
        EXPECT(0xad30, gbc.sp());
        EXPECT(0x89df, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x89dd));
        EXPECT(0x95, gbc.readMem(0x89de));
        // CB 95 0202
        gbc.setState(0x9378, 0xdbeb, 0xfd70, 0x39e5, 0x3509, 0x334, 0x1, 0x0);
        gbc.writeMem(0x9378, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xfd, gbc.a());
        EXPECT(0x39, gbc.b());
        EXPECT(0xe5, gbc.c());
        EXPECT(0x35, gbc.d());
        EXPECT(0x9, gbc.e());
        EXPECT(0x3, gbc.h());
        EXPECT(0x30, gbc.l());
        EXPECT(0xdbeb, gbc.sp());
        EXPECT(0x937a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9378));
        EXPECT(0x95, gbc.readMem(0x9379));
        // CB 95 0203
        gbc.setState(0x9f00, 0xbe01, 0x5610, 0xd05a, 0xa736, 0x7c21, 0x0, 0x1);
        gbc.writeMem(0x9f00, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x56, gbc.a());
        EXPECT(0xd0, gbc.b());
        EXPECT(0x5a, gbc.c());
        EXPECT(0xa7, gbc.d());
        EXPECT(0x36, gbc.e());
        EXPECT(0x7c, gbc.h());
        EXPECT(0x21, gbc.l());
        EXPECT(0xbe01, gbc.sp());
        EXPECT(0x9f02, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9f00));
        EXPECT(0x95, gbc.readMem(0x9f01));
        // CB 95 0204
        gbc.setState(0x3922, 0x4d9d, 0x6b20, 0x13d9, 0x5c18, 0xe001, 0x1, 0x0);
        gbc.writeMem(0x3922, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x6b, gbc.a());
        EXPECT(0x13, gbc.b());
        EXPECT(0xd9, gbc.c());
        EXPECT(0x5c, gbc.d());
        EXPECT(0x18, gbc.e());
        EXPECT(0xe0, gbc.h());
        EXPECT(0x1, gbc.l());
        EXPECT(0x4d9d, gbc.sp());
        EXPECT(0x3924, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 0205
        gbc.setState(0x9f17, 0xce2c, 0x4450, 0x2816, 0x850e, 0xe236, 0x0, 0x1);
        gbc.writeMem(0x9f17, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x44, gbc.a());
        EXPECT(0x28, gbc.b());
        EXPECT(0x16, gbc.c());
        EXPECT(0x85, gbc.d());
        EXPECT(0xe, gbc.e());
        EXPECT(0xe2, gbc.h());
        EXPECT(0x32, gbc.l());
        EXPECT(0xce2c, gbc.sp());
        EXPECT(0x9f19, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9f17));
        EXPECT(0x95, gbc.readMem(0x9f18));
        // CB 95 0206
        gbc.setState(0x801e, 0x78e7, 0xf1d0, 0x557f, 0xb8af, 0xb5c8, 0x0, 0x0);
        gbc.writeMem(0x801e, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xf1, gbc.a());
        EXPECT(0x55, gbc.b());
        EXPECT(0x7f, gbc.c());
        EXPECT(0xb8, gbc.d());
        EXPECT(0xaf, gbc.e());
        EXPECT(0xb5, gbc.h());
        EXPECT(0xc8, gbc.l());
        EXPECT(0x78e7, gbc.sp());
        EXPECT(0x8020, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x801e));
        EXPECT(0x95, gbc.readMem(0x801f));
        // CB 95 0207
        gbc.setState(0x83bc, 0xe50f, 0x5660, 0x3fc, 0xe4e5, 0xa6f6, 0x1, 0x0);
        gbc.writeMem(0x83bc, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x56, gbc.a());
        EXPECT(0x3, gbc.b());
        EXPECT(0xfc, gbc.c());
        EXPECT(0xe4, gbc.d());
        EXPECT(0xe5, gbc.e());
        EXPECT(0xa6, gbc.h());
        EXPECT(0xf2, gbc.l());
        EXPECT(0xe50f, gbc.sp());
        EXPECT(0x83be, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x83bc));
        EXPECT(0x95, gbc.readMem(0x83bd));
        // CB 95 0208
        gbc.setState(0xbabb, 0x259, 0x4080, 0xbab7, 0x248, 0x3a5c, 0x0, 0x1);
        gbc.writeMem(0xbabb, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x40, gbc.a());
        EXPECT(0xba, gbc.b());
        EXPECT(0xb7, gbc.c());
        EXPECT(0x2, gbc.d());
        EXPECT(0x48, gbc.e());
        EXPECT(0x3a, gbc.h());
        EXPECT(0x58, gbc.l());
        EXPECT(0x259, gbc.sp());
        EXPECT(0xbabd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbabb));
        EXPECT(0x95, gbc.readMem(0xbabc));
        // CB 95 0209
        gbc.setState(0x833a, 0x9c25, 0x8830, 0x393b, 0xc67d, 0xd724, 0x0, 0x0);
        gbc.writeMem(0x833a, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x88, gbc.a());
        EXPECT(0x39, gbc.b());
        EXPECT(0x3b, gbc.c());
        EXPECT(0xc6, gbc.d());
        EXPECT(0x7d, gbc.e());
        EXPECT(0xd7, gbc.h());
        EXPECT(0x20, gbc.l());
        EXPECT(0x9c25, gbc.sp());
        EXPECT(0x833c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x833a));
        EXPECT(0x95, gbc.readMem(0x833b));
        // CB 95 020A
        gbc.setState(0x1774, 0xb2e3, 0xf280, 0xcaed, 0x35c4, 0x78c3, 0x1, 0x1);
        gbc.writeMem(0x1774, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xf2, gbc.a());
        EXPECT(0xca, gbc.b());
        EXPECT(0xed, gbc.c());
        EXPECT(0x35, gbc.d());
        EXPECT(0xc4, gbc.e());
        EXPECT(0x78, gbc.h());
        EXPECT(0xc3, gbc.l());
        EXPECT(0xb2e3, gbc.sp());
        EXPECT(0x1776, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 020B
        gbc.setState(0xb74c, 0x1b76, 0x8390, 0xa671, 0x2855, 0x8218, 0x1, 0x1);
        gbc.writeMem(0xb74c, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x83, gbc.a());
        EXPECT(0xa6, gbc.b());
        EXPECT(0x71, gbc.c());
        EXPECT(0x28, gbc.d());
        EXPECT(0x55, gbc.e());
        EXPECT(0x82, gbc.h());
        EXPECT(0x18, gbc.l());
        EXPECT(0x1b76, gbc.sp());
        EXPECT(0xb74e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb74c));
        EXPECT(0x95, gbc.readMem(0xb74d));
        // CB 95 020C
        gbc.setState(0x1ecd, 0x7ed9, 0xe310, 0x7989, 0xa0bd, 0xc7a0, 0x0, 0x0);
        gbc.writeMem(0x1ecd, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xe3, gbc.a());
        EXPECT(0x79, gbc.b());
        EXPECT(0x89, gbc.c());
        EXPECT(0xa0, gbc.d());
        EXPECT(0xbd, gbc.e());
        EXPECT(0xc7, gbc.h());
        EXPECT(0xa0, gbc.l());
        EXPECT(0x7ed9, gbc.sp());
        EXPECT(0x1ecf, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 020D
        gbc.setState(0x5f51, 0x290c, 0x3090, 0x3934, 0xa7f6, 0x3edb, 0x0, 0x1);
        gbc.writeMem(0x5f51, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x30, gbc.a());
        EXPECT(0x39, gbc.b());
        EXPECT(0x34, gbc.c());
        EXPECT(0xa7, gbc.d());
        EXPECT(0xf6, gbc.e());
        EXPECT(0x3e, gbc.h());
        EXPECT(0xdb, gbc.l());
        EXPECT(0x290c, gbc.sp());
        EXPECT(0x5f53, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 020E
        gbc.setState(0x6be9, 0x4a59, 0x51d0, 0x1c0d, 0x453a, 0x3584, 0x1, 0x0);
        gbc.writeMem(0x6be9, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x51, gbc.a());
        EXPECT(0x1c, gbc.b());
        EXPECT(0xd, gbc.c());
        EXPECT(0x45, gbc.d());
        EXPECT(0x3a, gbc.e());
        EXPECT(0x35, gbc.h());
        EXPECT(0x80, gbc.l());
        EXPECT(0x4a59, gbc.sp());
        EXPECT(0x6beb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 020F
        gbc.setState(0x22ce, 0x32f5, 0x7580, 0xaebd, 0xb8c3, 0xfe4b, 0x1, 0x0);
        gbc.writeMem(0x22ce, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x75, gbc.a());
        EXPECT(0xae, gbc.b());
        EXPECT(0xbd, gbc.c());
        EXPECT(0xb8, gbc.d());
        EXPECT(0xc3, gbc.e());
        EXPECT(0xfe, gbc.h());
        EXPECT(0x4b, gbc.l());
        EXPECT(0x32f5, gbc.sp());
        EXPECT(0x22d0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 0210
        gbc.setState(0x5d93, 0x17c5, 0x4fb0, 0x3e60, 0x537c, 0xcff4, 0x1, 0x1);
        gbc.writeMem(0x5d93, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x4f, gbc.a());
        EXPECT(0x3e, gbc.b());
        EXPECT(0x60, gbc.c());
        EXPECT(0x53, gbc.d());
        EXPECT(0x7c, gbc.e());
        EXPECT(0xcf, gbc.h());
        EXPECT(0xf0, gbc.l());
        EXPECT(0x17c5, gbc.sp());
        EXPECT(0x5d95, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 0211
        gbc.setState(0x1cb5, 0xfc97, 0xc830, 0x1e87, 0xa51b, 0x986d, 0x0, 0x1);
        gbc.writeMem(0x1cb5, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xc8, gbc.a());
        EXPECT(0x1e, gbc.b());
        EXPECT(0x87, gbc.c());
        EXPECT(0xa5, gbc.d());
        EXPECT(0x1b, gbc.e());
        EXPECT(0x98, gbc.h());
        EXPECT(0x69, gbc.l());
        EXPECT(0xfc97, gbc.sp());
        EXPECT(0x1cb7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 0212
        gbc.setState(0xae8e, 0x1e4, 0xcb0, 0x6e35, 0x9d47, 0x55ce, 0x0, 0x0);
        gbc.writeMem(0xae8e, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xc, gbc.a());
        EXPECT(0x6e, gbc.b());
        EXPECT(0x35, gbc.c());
        EXPECT(0x9d, gbc.d());
        EXPECT(0x47, gbc.e());
        EXPECT(0x55, gbc.h());
        EXPECT(0xca, gbc.l());
        EXPECT(0x1e4, gbc.sp());
        EXPECT(0xae90, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xae8e));
        EXPECT(0x95, gbc.readMem(0xae8f));
        // CB 95 0213
        gbc.setState(0xc0b6, 0xa25a, 0x7e20, 0xdf0a, 0x5b1f, 0xd96b, 0x1, 0x0);
        gbc.writeMem(0xc0b6, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x7e, gbc.a());
        EXPECT(0xdf, gbc.b());
        EXPECT(0xa, gbc.c());
        EXPECT(0x5b, gbc.d());
        EXPECT(0x1f, gbc.e());
        EXPECT(0xd9, gbc.h());
        EXPECT(0x6b, gbc.l());
        EXPECT(0xa25a, gbc.sp());
        EXPECT(0xc0b8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc0b6));
        EXPECT(0x95, gbc.readMem(0xc0b7));
        // CB 95 0214
        gbc.setState(0x69fb, 0x6703, 0x9b70, 0x7e62, 0xd9c7, 0x1720, 0x1, 0x0);
        gbc.writeMem(0x69fb, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x9b, gbc.a());
        EXPECT(0x7e, gbc.b());
        EXPECT(0x62, gbc.c());
        EXPECT(0xd9, gbc.d());
        EXPECT(0xc7, gbc.e());
        EXPECT(0x17, gbc.h());
        EXPECT(0x20, gbc.l());
        EXPECT(0x6703, gbc.sp());
        EXPECT(0x69fd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 0215
        gbc.setState(0x4506, 0x58c5, 0xbd10, 0xd7f5, 0x5139, 0xee14, 0x1, 0x0);
        gbc.writeMem(0x4506, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xbd, gbc.a());
        EXPECT(0xd7, gbc.b());
        EXPECT(0xf5, gbc.c());
        EXPECT(0x51, gbc.d());
        EXPECT(0x39, gbc.e());
        EXPECT(0xee, gbc.h());
        EXPECT(0x10, gbc.l());
        EXPECT(0x58c5, gbc.sp());
        EXPECT(0x4508, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 0216
        gbc.setState(0x6f36, 0x21c0, 0x6500, 0x428f, 0x4f22, 0x36fd, 0x0, 0x0);
        gbc.writeMem(0x6f36, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x65, gbc.a());
        EXPECT(0x42, gbc.b());
        EXPECT(0x8f, gbc.c());
        EXPECT(0x4f, gbc.d());
        EXPECT(0x22, gbc.e());
        EXPECT(0x36, gbc.h());
        EXPECT(0xf9, gbc.l());
        EXPECT(0x21c0, gbc.sp());
        EXPECT(0x6f38, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 0217
        gbc.setState(0x2fc7, 0xb47c, 0xcc30, 0x7ca3, 0xc7e2, 0x7528, 0x0, 0x0);
        gbc.writeMem(0x2fc7, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xcc, gbc.a());
        EXPECT(0x7c, gbc.b());
        EXPECT(0xa3, gbc.c());
        EXPECT(0xc7, gbc.d());
        EXPECT(0xe2, gbc.e());
        EXPECT(0x75, gbc.h());
        EXPECT(0x28, gbc.l());
        EXPECT(0xb47c, gbc.sp());
        EXPECT(0x2fc9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 0218
        gbc.setState(0xca90, 0xc509, 0x3990, 0x5c37, 0x3dde, 0xeb8a, 0x0, 0x0);
        gbc.writeMem(0xca90, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x39, gbc.a());
        EXPECT(0x5c, gbc.b());
        EXPECT(0x37, gbc.c());
        EXPECT(0x3d, gbc.d());
        EXPECT(0xde, gbc.e());
        EXPECT(0xeb, gbc.h());
        EXPECT(0x8a, gbc.l());
        EXPECT(0xc509, gbc.sp());
        EXPECT(0xca92, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xca90));
        EXPECT(0x95, gbc.readMem(0xca91));
        // CB 95 0219
        gbc.setState(0x865, 0xe8b5, 0xda90, 0x2a11, 0xf4e1, 0x4c53, 0x1, 0x0);
        gbc.writeMem(0x865, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xda, gbc.a());
        EXPECT(0x2a, gbc.b());
        EXPECT(0x11, gbc.c());
        EXPECT(0xf4, gbc.d());
        EXPECT(0xe1, gbc.e());
        EXPECT(0x4c, gbc.h());
        EXPECT(0x53, gbc.l());
        EXPECT(0xe8b5, gbc.sp());
        EXPECT(0x867, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 021C
        gbc.setState(0x885f, 0x55ef, 0x1940, 0xa9a5, 0xc7e9, 0x1ed, 0x1, 0x0);
        gbc.writeMem(0x885f, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x19, gbc.a());
        EXPECT(0xa9, gbc.b());
        EXPECT(0xa5, gbc.c());
        EXPECT(0xc7, gbc.d());
        EXPECT(0xe9, gbc.e());
        EXPECT(0x1, gbc.h());
        EXPECT(0xe9, gbc.l());
        EXPECT(0x55ef, gbc.sp());
        EXPECT(0x8861, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x885f));
        EXPECT(0x95, gbc.readMem(0x8860));
        // CB 95 021D
        gbc.setState(0xe2c7, 0xb18f, 0x5850, 0x9814, 0xeb9e, 0x51f1, 0x0, 0x0);
        gbc.writeMem(0xe2c7, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x58, gbc.a());
        EXPECT(0x98, gbc.b());
        EXPECT(0x14, gbc.c());
        EXPECT(0xeb, gbc.d());
        EXPECT(0x9e, gbc.e());
        EXPECT(0x51, gbc.h());
        EXPECT(0xf1, gbc.l());
        EXPECT(0xb18f, gbc.sp());
        EXPECT(0xe2c9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe2c7));
        EXPECT(0x95, gbc.readMem(0xe2c8));
        // CB 95 021E
        gbc.setState(0x78ab, 0xd50b, 0x8260, 0x5b80, 0x7f7b, 0xbc76, 0x0, 0x1);
        gbc.writeMem(0x78ab, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x82, gbc.a());
        EXPECT(0x5b, gbc.b());
        EXPECT(0x80, gbc.c());
        EXPECT(0x7f, gbc.d());
        EXPECT(0x7b, gbc.e());
        EXPECT(0xbc, gbc.h());
        EXPECT(0x72, gbc.l());
        EXPECT(0xd50b, gbc.sp());
        EXPECT(0x78ad, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 021F
        gbc.setState(0x2583, 0x5444, 0xbb00, 0xab83, 0x260c, 0x1e34, 0x0, 0x1);
        gbc.writeMem(0x2583, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xbb, gbc.a());
        EXPECT(0xab, gbc.b());
        EXPECT(0x83, gbc.c());
        EXPECT(0x26, gbc.d());
        EXPECT(0xc, gbc.e());
        EXPECT(0x1e, gbc.h());
        EXPECT(0x30, gbc.l());
        EXPECT(0x5444, gbc.sp());
        EXPECT(0x2585, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 0220
        gbc.setState(0x7656, 0x6c3b, 0x2a80, 0x7c74, 0x3fba, 0x60dd, 0x1, 0x0);
        gbc.writeMem(0x7656, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x2a, gbc.a());
        EXPECT(0x7c, gbc.b());
        EXPECT(0x74, gbc.c());
        EXPECT(0x3f, gbc.d());
        EXPECT(0xba, gbc.e());
        EXPECT(0x60, gbc.h());
        EXPECT(0xd9, gbc.l());
        EXPECT(0x6c3b, gbc.sp());
        EXPECT(0x7658, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 0221
        gbc.setState(0xd3e9, 0x47b1, 0xe9d0, 0x882, 0xb64f, 0x87c3, 0x1, 0x1);
        gbc.writeMem(0xd3e9, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xe9, gbc.a());
        EXPECT(0x8, gbc.b());
        EXPECT(0x82, gbc.c());
        EXPECT(0xb6, gbc.d());
        EXPECT(0x4f, gbc.e());
        EXPECT(0x87, gbc.h());
        EXPECT(0xc3, gbc.l());
        EXPECT(0x47b1, gbc.sp());
        EXPECT(0xd3eb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd3e9));
        EXPECT(0x95, gbc.readMem(0xd3ea));
        // CB 95 0222
        gbc.setState(0x40ba, 0x531, 0x8260, 0x71bc, 0xd88f, 0x9588, 0x1, 0x1);
        gbc.writeMem(0x40ba, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x82, gbc.a());
        EXPECT(0x71, gbc.b());
        EXPECT(0xbc, gbc.c());
        EXPECT(0xd8, gbc.d());
        EXPECT(0x8f, gbc.e());
        EXPECT(0x95, gbc.h());
        EXPECT(0x88, gbc.l());
        EXPECT(0x531, gbc.sp());
        EXPECT(0x40bc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 0223
        gbc.setState(0xc361, 0x3d56, 0x1130, 0x2d7d, 0xadcd, 0x1efd, 0x0, 0x0);
        gbc.writeMem(0xc361, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x11, gbc.a());
        EXPECT(0x2d, gbc.b());
        EXPECT(0x7d, gbc.c());
        EXPECT(0xad, gbc.d());
        EXPECT(0xcd, gbc.e());
        EXPECT(0x1e, gbc.h());
        EXPECT(0xf9, gbc.l());
        EXPECT(0x3d56, gbc.sp());
        EXPECT(0xc363, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc361));
        EXPECT(0x95, gbc.readMem(0xc362));
        // CB 95 0224
        gbc.setState(0x8c8b, 0xccf1, 0xdeb0, 0xcc04, 0xbad7, 0xad64, 0x0, 0x0);
        gbc.writeMem(0x8c8b, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xde, gbc.a());
        EXPECT(0xcc, gbc.b());
        EXPECT(0x4, gbc.c());
        EXPECT(0xba, gbc.d());
        EXPECT(0xd7, gbc.e());
        EXPECT(0xad, gbc.h());
        EXPECT(0x60, gbc.l());
        EXPECT(0xccf1, gbc.sp());
        EXPECT(0x8c8d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8c8b));
        EXPECT(0x95, gbc.readMem(0x8c8c));
        // CB 95 0225
        gbc.setState(0xed72, 0xab0b, 0x2770, 0xb863, 0x2a3b, 0xa4e6, 0x1, 0x0);
        gbc.writeMem(0xed72, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x27, gbc.a());
        EXPECT(0xb8, gbc.b());
        EXPECT(0x63, gbc.c());
        EXPECT(0x2a, gbc.d());
        EXPECT(0x3b, gbc.e());
        EXPECT(0xa4, gbc.h());
        EXPECT(0xe2, gbc.l());
        EXPECT(0xab0b, gbc.sp());
        EXPECT(0xed74, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xed72));
        EXPECT(0x95, gbc.readMem(0xed73));
        // CB 95 0226
        gbc.setState(0x9dd9, 0x781a, 0x1d10, 0x4e29, 0x3491, 0x7db5, 0x0, 0x1);
        gbc.writeMem(0x9dd9, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x1d, gbc.a());
        EXPECT(0x4e, gbc.b());
        EXPECT(0x29, gbc.c());
        EXPECT(0x34, gbc.d());
        EXPECT(0x91, gbc.e());
        EXPECT(0x7d, gbc.h());
        EXPECT(0xb1, gbc.l());
        EXPECT(0x781a, gbc.sp());
        EXPECT(0x9ddb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9dd9));
        EXPECT(0x95, gbc.readMem(0x9dda));
        // CB 95 0227
        gbc.setState(0x7573, 0x9058, 0x9e90, 0x9d09, 0x7de5, 0xfb2f, 0x0, 0x0);
        gbc.writeMem(0x7573, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x9e, gbc.a());
        EXPECT(0x9d, gbc.b());
        EXPECT(0x9, gbc.c());
        EXPECT(0x7d, gbc.d());
        EXPECT(0xe5, gbc.e());
        EXPECT(0xfb, gbc.h());
        EXPECT(0x2b, gbc.l());
        EXPECT(0x9058, gbc.sp());
        EXPECT(0x7575, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 0228
        gbc.setState(0xc06d, 0x65c3, 0x22e0, 0x4bda, 0x363f, 0x2cc7, 0x1, 0x0);
        gbc.writeMem(0xc06d, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x22, gbc.a());
        EXPECT(0x4b, gbc.b());
        EXPECT(0xda, gbc.c());
        EXPECT(0x36, gbc.d());
        EXPECT(0x3f, gbc.e());
        EXPECT(0x2c, gbc.h());
        EXPECT(0xc3, gbc.l());
        EXPECT(0x65c3, gbc.sp());
        EXPECT(0xc06f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc06d));
        EXPECT(0x95, gbc.readMem(0xc06e));
        // CB 95 0229
        gbc.setState(0x79c9, 0x8b8b, 0xf90, 0xe0c6, 0xf259, 0xc527, 0x0, 0x0);
        gbc.writeMem(0x79c9, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xf, gbc.a());
        EXPECT(0xe0, gbc.b());
        EXPECT(0xc6, gbc.c());
        EXPECT(0xf2, gbc.d());
        EXPECT(0x59, gbc.e());
        EXPECT(0xc5, gbc.h());
        EXPECT(0x23, gbc.l());
        EXPECT(0x8b8b, gbc.sp());
        EXPECT(0x79cb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 022A
        gbc.setState(0xac9e, 0x726, 0xa650, 0x15c8, 0x3ec8, 0x4082, 0x1, 0x0);
        gbc.writeMem(0xac9e, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xa6, gbc.a());
        EXPECT(0x15, gbc.b());
        EXPECT(0xc8, gbc.c());
        EXPECT(0x3e, gbc.d());
        EXPECT(0xc8, gbc.e());
        EXPECT(0x40, gbc.h());
        EXPECT(0x82, gbc.l());
        EXPECT(0x726, gbc.sp());
        EXPECT(0xaca0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xac9e));
        EXPECT(0x95, gbc.readMem(0xac9f));
        // CB 95 022B
        gbc.setState(0xce75, 0x89b5, 0xbcf0, 0xfe59, 0xfee2, 0xc3a5, 0x0, 0x1);
        gbc.writeMem(0xce75, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xbc, gbc.a());
        EXPECT(0xfe, gbc.b());
        EXPECT(0x59, gbc.c());
        EXPECT(0xfe, gbc.d());
        EXPECT(0xe2, gbc.e());
        EXPECT(0xc3, gbc.h());
        EXPECT(0xa1, gbc.l());
        EXPECT(0x89b5, gbc.sp());
        EXPECT(0xce77, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xce75));
        EXPECT(0x95, gbc.readMem(0xce76));
        // CB 95 022C
        gbc.setState(0x95ad, 0xa5bb, 0x45a0, 0xa0fa, 0x48f6, 0x3e5f, 0x0, 0x1);
        gbc.writeMem(0x95ad, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x45, gbc.a());
        EXPECT(0xa0, gbc.b());
        EXPECT(0xfa, gbc.c());
        EXPECT(0x48, gbc.d());
        EXPECT(0xf6, gbc.e());
        EXPECT(0x3e, gbc.h());
        EXPECT(0x5b, gbc.l());
        EXPECT(0xa5bb, gbc.sp());
        EXPECT(0x95af, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x95ad));
        EXPECT(0x95, gbc.readMem(0x95ae));
        // CB 95 022D
        gbc.setState(0x2351, 0x3235, 0x67e0, 0xc1e0, 0xb9ea, 0xfeef, 0x1, 0x0);
        gbc.writeMem(0x2351, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x67, gbc.a());
        EXPECT(0xc1, gbc.b());
        EXPECT(0xe0, gbc.c());
        EXPECT(0xb9, gbc.d());
        EXPECT(0xea, gbc.e());
        EXPECT(0xfe, gbc.h());
        EXPECT(0xeb, gbc.l());
        EXPECT(0x3235, gbc.sp());
        EXPECT(0x2353, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 022E
        gbc.setState(0x5312, 0x52af, 0xa280, 0x3d49, 0x94f, 0xe918, 0x0, 0x0);
        gbc.writeMem(0x5312, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xa2, gbc.a());
        EXPECT(0x3d, gbc.b());
        EXPECT(0x49, gbc.c());
        EXPECT(0x9, gbc.d());
        EXPECT(0x4f, gbc.e());
        EXPECT(0xe9, gbc.h());
        EXPECT(0x18, gbc.l());
        EXPECT(0x52af, gbc.sp());
        EXPECT(0x5314, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 022F
        gbc.setState(0x130c, 0x230f, 0xf9a0, 0x79ad, 0xb1d, 0xe3c6, 0x0, 0x1);
        gbc.writeMem(0x130c, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xf9, gbc.a());
        EXPECT(0x79, gbc.b());
        EXPECT(0xad, gbc.c());
        EXPECT(0xb, gbc.d());
        EXPECT(0x1d, gbc.e());
        EXPECT(0xe3, gbc.h());
        EXPECT(0xc2, gbc.l());
        EXPECT(0x230f, gbc.sp());
        EXPECT(0x130e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 0230
        gbc.setState(0x167f, 0x47bf, 0x8f60, 0x80d8, 0xf7b9, 0x118b, 0x0, 0x1);
        gbc.writeMem(0x167f, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x8f, gbc.a());
        EXPECT(0x80, gbc.b());
        EXPECT(0xd8, gbc.c());
        EXPECT(0xf7, gbc.d());
        EXPECT(0xb9, gbc.e());
        EXPECT(0x11, gbc.h());
        EXPECT(0x8b, gbc.l());
        EXPECT(0x47bf, gbc.sp());
        EXPECT(0x1681, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 0231
        gbc.setState(0xb9e5, 0xc259, 0xc070, 0x5edd, 0x5985, 0x8e8a, 0x0, 0x0);
        gbc.writeMem(0xb9e5, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xc0, gbc.a());
        EXPECT(0x5e, gbc.b());
        EXPECT(0xdd, gbc.c());
        EXPECT(0x59, gbc.d());
        EXPECT(0x85, gbc.e());
        EXPECT(0x8e, gbc.h());
        EXPECT(0x8a, gbc.l());
        EXPECT(0xc259, gbc.sp());
        EXPECT(0xb9e7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb9e5));
        EXPECT(0x95, gbc.readMem(0xb9e6));
        // CB 95 0232
        gbc.setState(0x8f79, 0x70b2, 0x7340, 0x8265, 0xe9e0, 0x3617, 0x0, 0x1);
        gbc.writeMem(0x8f79, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x73, gbc.a());
        EXPECT(0x82, gbc.b());
        EXPECT(0x65, gbc.c());
        EXPECT(0xe9, gbc.d());
        EXPECT(0xe0, gbc.e());
        EXPECT(0x36, gbc.h());
        EXPECT(0x13, gbc.l());
        EXPECT(0x70b2, gbc.sp());
        EXPECT(0x8f7b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8f79));
        EXPECT(0x95, gbc.readMem(0x8f7a));
        // CB 95 0233
        gbc.setState(0x2d50, 0x43b3, 0x7370, 0x5e6e, 0xff05, 0x26e1, 0x0, 0x1);
        gbc.writeMem(0x2d50, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x73, gbc.a());
        EXPECT(0x5e, gbc.b());
        EXPECT(0x6e, gbc.c());
        EXPECT(0xff, gbc.d());
        EXPECT(0x5, gbc.e());
        EXPECT(0x26, gbc.h());
        EXPECT(0xe1, gbc.l());
        EXPECT(0x43b3, gbc.sp());
        EXPECT(0x2d52, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 0234
        gbc.setState(0x6005, 0x27cd, 0x1200, 0xe1fc, 0xc2b3, 0x7171, 0x1, 0x1);
        gbc.writeMem(0x6005, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x12, gbc.a());
        EXPECT(0xe1, gbc.b());
        EXPECT(0xfc, gbc.c());
        EXPECT(0xc2, gbc.d());
        EXPECT(0xb3, gbc.e());
        EXPECT(0x71, gbc.h());
        EXPECT(0x71, gbc.l());
        EXPECT(0x27cd, gbc.sp());
        EXPECT(0x6007, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 0235
        gbc.setState(0xa022, 0xad32, 0x4c50, 0x64f2, 0x77ae, 0x8974, 0x0, 0x0);
        gbc.writeMem(0xa022, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x4c, gbc.a());
        EXPECT(0x64, gbc.b());
        EXPECT(0xf2, gbc.c());
        EXPECT(0x77, gbc.d());
        EXPECT(0xae, gbc.e());
        EXPECT(0x89, gbc.h());
        EXPECT(0x70, gbc.l());
        EXPECT(0xad32, gbc.sp());
        EXPECT(0xa024, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa022));
        EXPECT(0x95, gbc.readMem(0xa023));
        // CB 95 0237
        gbc.setState(0xeb0c, 0xfd94, 0xa00, 0x4a31, 0x5479, 0xcb1d, 0x1, 0x1);
        gbc.writeMem(0xeb0c, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xa, gbc.a());
        EXPECT(0x4a, gbc.b());
        EXPECT(0x31, gbc.c());
        EXPECT(0x54, gbc.d());
        EXPECT(0x79, gbc.e());
        EXPECT(0xcb, gbc.h());
        EXPECT(0x19, gbc.l());
        EXPECT(0xfd94, gbc.sp());
        EXPECT(0xeb0e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xeb0c));
        EXPECT(0x95, gbc.readMem(0xeb0d));
        // CB 95 0238
        gbc.setState(0x2424, 0x5dc1, 0x6c90, 0x7345, 0x59d6, 0x57b6, 0x1, 0x1);
        gbc.writeMem(0x2424, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x6c, gbc.a());
        EXPECT(0x73, gbc.b());
        EXPECT(0x45, gbc.c());
        EXPECT(0x59, gbc.d());
        EXPECT(0xd6, gbc.e());
        EXPECT(0x57, gbc.h());
        EXPECT(0xb2, gbc.l());
        EXPECT(0x5dc1, gbc.sp());
        EXPECT(0x2426, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 0239
        gbc.setState(0x8cf2, 0xcd1, 0x6880, 0xae22, 0x6807, 0xfff4, 0x0, 0x1);
        gbc.writeMem(0x8cf2, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x68, gbc.a());
        EXPECT(0xae, gbc.b());
        EXPECT(0x22, gbc.c());
        EXPECT(0x68, gbc.d());
        EXPECT(0x7, gbc.e());
        EXPECT(0xff, gbc.h());
        EXPECT(0xf0, gbc.l());
        EXPECT(0xcd1, gbc.sp());
        EXPECT(0x8cf4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8cf2));
        EXPECT(0x95, gbc.readMem(0x8cf3));
        // CB 95 023A
        gbc.setState(0x1e4c, 0x66d4, 0x1420, 0x9fe3, 0xa862, 0xeef8, 0x1, 0x0);
        gbc.writeMem(0x1e4c, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x14, gbc.a());
        EXPECT(0x9f, gbc.b());
        EXPECT(0xe3, gbc.c());
        EXPECT(0xa8, gbc.d());
        EXPECT(0x62, gbc.e());
        EXPECT(0xee, gbc.h());
        EXPECT(0xf8, gbc.l());
        EXPECT(0x66d4, gbc.sp());
        EXPECT(0x1e4e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 023B
        gbc.setState(0x8a17, 0x4e74, 0xa4b0, 0x12a7, 0xadd2, 0x7941, 0x0, 0x1);
        gbc.writeMem(0x8a17, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xa4, gbc.a());
        EXPECT(0x12, gbc.b());
        EXPECT(0xa7, gbc.c());
        EXPECT(0xad, gbc.d());
        EXPECT(0xd2, gbc.e());
        EXPECT(0x79, gbc.h());
        EXPECT(0x41, gbc.l());
        EXPECT(0x4e74, gbc.sp());
        EXPECT(0x8a19, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8a17));
        EXPECT(0x95, gbc.readMem(0x8a18));
        // CB 95 023C
        gbc.setState(0xd5a1, 0x9e3e, 0xc20, 0xc135, 0x49b9, 0xac13, 0x0, 0x0);
        gbc.writeMem(0xd5a1, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xc, gbc.a());
        EXPECT(0xc1, gbc.b());
        EXPECT(0x35, gbc.c());
        EXPECT(0x49, gbc.d());
        EXPECT(0xb9, gbc.e());
        EXPECT(0xac, gbc.h());
        EXPECT(0x13, gbc.l());
        EXPECT(0x9e3e, gbc.sp());
        EXPECT(0xd5a3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd5a1));
        EXPECT(0x95, gbc.readMem(0xd5a2));
        // CB 95 023E
        gbc.setState(0x52f0, 0xabed, 0x8240, 0x9f35, 0xd3b7, 0xcb4e, 0x1, 0x0);
        gbc.writeMem(0x52f0, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x82, gbc.a());
        EXPECT(0x9f, gbc.b());
        EXPECT(0x35, gbc.c());
        EXPECT(0xd3, gbc.d());
        EXPECT(0xb7, gbc.e());
        EXPECT(0xcb, gbc.h());
        EXPECT(0x4a, gbc.l());
        EXPECT(0xabed, gbc.sp());
        EXPECT(0x52f2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 023F
        gbc.setState(0x2f63, 0x309d, 0x22b0, 0xca0e, 0xe94e, 0xaca5, 0x1, 0x1);
        gbc.writeMem(0x2f63, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x22, gbc.a());
        EXPECT(0xca, gbc.b());
        EXPECT(0xe, gbc.c());
        EXPECT(0xe9, gbc.d());
        EXPECT(0x4e, gbc.e());
        EXPECT(0xac, gbc.h());
        EXPECT(0xa1, gbc.l());
        EXPECT(0x309d, gbc.sp());
        EXPECT(0x2f65, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 0240
        gbc.setState(0xa893, 0x75e7, 0x69a0, 0x842c, 0x342e, 0x6df6, 0x0, 0x1);
        gbc.writeMem(0xa893, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x69, gbc.a());
        EXPECT(0x84, gbc.b());
        EXPECT(0x2c, gbc.c());
        EXPECT(0x34, gbc.d());
        EXPECT(0x2e, gbc.e());
        EXPECT(0x6d, gbc.h());
        EXPECT(0xf2, gbc.l());
        EXPECT(0x75e7, gbc.sp());
        EXPECT(0xa895, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa893));
        EXPECT(0x95, gbc.readMem(0xa894));
        // CB 95 0241
        gbc.setState(0x21a0, 0x8914, 0x1ea0, 0x3253, 0xd8d6, 0xaa8c, 0x0, 0x0);
        gbc.writeMem(0x21a0, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x1e, gbc.a());
        EXPECT(0x32, gbc.b());
        EXPECT(0x53, gbc.c());
        EXPECT(0xd8, gbc.d());
        EXPECT(0xd6, gbc.e());
        EXPECT(0xaa, gbc.h());
        EXPECT(0x88, gbc.l());
        EXPECT(0x8914, gbc.sp());
        EXPECT(0x21a2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 0242
        gbc.setState(0x8c69, 0x7c43, 0xa400, 0x58fe, 0x4b5f, 0x426b, 0x0, 0x0);
        gbc.writeMem(0x8c69, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xa4, gbc.a());
        EXPECT(0x58, gbc.b());
        EXPECT(0xfe, gbc.c());
        EXPECT(0x4b, gbc.d());
        EXPECT(0x5f, gbc.e());
        EXPECT(0x42, gbc.h());
        EXPECT(0x6b, gbc.l());
        EXPECT(0x7c43, gbc.sp());
        EXPECT(0x8c6b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8c69));
        EXPECT(0x95, gbc.readMem(0x8c6a));
        // CB 95 0243
        gbc.setState(0x4919, 0xb352, 0xf760, 0x50da, 0x1724, 0x26db, 0x0, 0x0);
        gbc.writeMem(0x4919, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xf7, gbc.a());
        EXPECT(0x50, gbc.b());
        EXPECT(0xda, gbc.c());
        EXPECT(0x17, gbc.d());
        EXPECT(0x24, gbc.e());
        EXPECT(0x26, gbc.h());
        EXPECT(0xdb, gbc.l());
        EXPECT(0xb352, gbc.sp());
        EXPECT(0x491b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 0244
        gbc.setState(0x8dcc, 0xe951, 0x53f0, 0xa185, 0x3ccf, 0xedfb, 0x0, 0x0);
        gbc.writeMem(0x8dcc, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x53, gbc.a());
        EXPECT(0xa1, gbc.b());
        EXPECT(0x85, gbc.c());
        EXPECT(0x3c, gbc.d());
        EXPECT(0xcf, gbc.e());
        EXPECT(0xed, gbc.h());
        EXPECT(0xfb, gbc.l());
        EXPECT(0xe951, gbc.sp());
        EXPECT(0x8dce, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8dcc));
        EXPECT(0x95, gbc.readMem(0x8dcd));
        // CB 95 0245
        gbc.setState(0x1ce9, 0x1951, 0x2c50, 0xe65, 0x6ca, 0xb9c4, 0x0, 0x0);
        gbc.writeMem(0x1ce9, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x2c, gbc.a());
        EXPECT(0xe, gbc.b());
        EXPECT(0x65, gbc.c());
        EXPECT(0x6, gbc.d());
        EXPECT(0xca, gbc.e());
        EXPECT(0xb9, gbc.h());
        EXPECT(0xc0, gbc.l());
        EXPECT(0x1951, gbc.sp());
        EXPECT(0x1ceb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 0246
        gbc.setState(0x624a, 0x1f0c, 0x75a0, 0x26f0, 0x3e9b, 0x2867, 0x0, 0x1);
        gbc.writeMem(0x624a, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x75, gbc.a());
        EXPECT(0x26, gbc.b());
        EXPECT(0xf0, gbc.c());
        EXPECT(0x3e, gbc.d());
        EXPECT(0x9b, gbc.e());
        EXPECT(0x28, gbc.h());
        EXPECT(0x63, gbc.l());
        EXPECT(0x1f0c, gbc.sp());
        EXPECT(0x624c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 0247
        gbc.setState(0x42a7, 0x8b9e, 0x20d0, 0xe4a6, 0xfec2, 0x872c, 0x1, 0x0);
        gbc.writeMem(0x42a7, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x20, gbc.a());
        EXPECT(0xe4, gbc.b());
        EXPECT(0xa6, gbc.c());
        EXPECT(0xfe, gbc.d());
        EXPECT(0xc2, gbc.e());
        EXPECT(0x87, gbc.h());
        EXPECT(0x28, gbc.l());
        EXPECT(0x8b9e, gbc.sp());
        EXPECT(0x42a9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 0248
        gbc.setState(0xb5a8, 0x179e, 0x4460, 0x3201, 0xadd6, 0x443e, 0x1, 0x0);
        gbc.writeMem(0xb5a8, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x44, gbc.a());
        EXPECT(0x32, gbc.b());
        EXPECT(0x1, gbc.c());
        EXPECT(0xad, gbc.d());
        EXPECT(0xd6, gbc.e());
        EXPECT(0x44, gbc.h());
        EXPECT(0x3a, gbc.l());
        EXPECT(0x179e, gbc.sp());
        EXPECT(0xb5aa, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb5a8));
        EXPECT(0x95, gbc.readMem(0xb5a9));
        // CB 95 024A
        gbc.setState(0x52b4, 0x8ad7, 0xc400, 0x3c19, 0xb894, 0x4978, 0x1, 0x0);
        gbc.writeMem(0x52b4, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xc4, gbc.a());
        EXPECT(0x3c, gbc.b());
        EXPECT(0x19, gbc.c());
        EXPECT(0xb8, gbc.d());
        EXPECT(0x94, gbc.e());
        EXPECT(0x49, gbc.h());
        EXPECT(0x78, gbc.l());
        EXPECT(0x8ad7, gbc.sp());
        EXPECT(0x52b6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 024B
        gbc.setState(0x7265, 0xffd4, 0x49f0, 0x3b62, 0x7431, 0xee64, 0x1, 0x1);
        gbc.writeMem(0x7265, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x49, gbc.a());
        EXPECT(0x3b, gbc.b());
        EXPECT(0x62, gbc.c());
        EXPECT(0x74, gbc.d());
        EXPECT(0x31, gbc.e());
        EXPECT(0xee, gbc.h());
        EXPECT(0x60, gbc.l());
        EXPECT(0xffd4, gbc.sp());
        EXPECT(0x7267, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 024D
        gbc.setState(0x9423, 0x2f2d, 0x3fe0, 0xa24c, 0x741c, 0x84d2, 0x1, 0x0);
        gbc.writeMem(0x9423, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x3f, gbc.a());
        EXPECT(0xa2, gbc.b());
        EXPECT(0x4c, gbc.c());
        EXPECT(0x74, gbc.d());
        EXPECT(0x1c, gbc.e());
        EXPECT(0x84, gbc.h());
        EXPECT(0xd2, gbc.l());
        EXPECT(0x2f2d, gbc.sp());
        EXPECT(0x9425, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9423));
        EXPECT(0x95, gbc.readMem(0x9424));
        // CB 95 024E
        gbc.setState(0xb4df, 0x370a, 0xc450, 0xbb3b, 0x54f2, 0x8a4f, 0x0, 0x1);
        gbc.writeMem(0xb4df, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xc4, gbc.a());
        EXPECT(0xbb, gbc.b());
        EXPECT(0x3b, gbc.c());
        EXPECT(0x54, gbc.d());
        EXPECT(0xf2, gbc.e());
        EXPECT(0x8a, gbc.h());
        EXPECT(0x4b, gbc.l());
        EXPECT(0x370a, gbc.sp());
        EXPECT(0xb4e1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb4df));
        EXPECT(0x95, gbc.readMem(0xb4e0));
        // CB 95 024F
        gbc.setState(0x8bfb, 0xf35f, 0xc570, 0x9b72, 0xd6a9, 0x245a, 0x0, 0x1);
        gbc.writeMem(0x8bfb, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xc5, gbc.a());
        EXPECT(0x9b, gbc.b());
        EXPECT(0x72, gbc.c());
        EXPECT(0xd6, gbc.d());
        EXPECT(0xa9, gbc.e());
        EXPECT(0x24, gbc.h());
        EXPECT(0x5a, gbc.l());
        EXPECT(0xf35f, gbc.sp());
        EXPECT(0x8bfd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8bfb));
        EXPECT(0x95, gbc.readMem(0x8bfc));
        // CB 95 0250
        gbc.setState(0xdffb, 0x2898, 0x3720, 0x26ae, 0xf7e3, 0xf45c, 0x1, 0x1);
        gbc.writeMem(0xdffb, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x37, gbc.a());
        EXPECT(0x26, gbc.b());
        EXPECT(0xae, gbc.c());
        EXPECT(0xf7, gbc.d());
        EXPECT(0xe3, gbc.e());
        EXPECT(0xf4, gbc.h());
        EXPECT(0x58, gbc.l());
        EXPECT(0x2898, gbc.sp());
        EXPECT(0xdffd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdffb));
        EXPECT(0x95, gbc.readMem(0xdffc));
        // CB 95 0252
        gbc.setState(0x79d8, 0xedd5, 0xafd0, 0x32b1, 0x3704, 0x3bd5, 0x1, 0x0);
        gbc.writeMem(0x79d8, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xaf, gbc.a());
        EXPECT(0x32, gbc.b());
        EXPECT(0xb1, gbc.c());
        EXPECT(0x37, gbc.d());
        EXPECT(0x4, gbc.e());
        EXPECT(0x3b, gbc.h());
        EXPECT(0xd1, gbc.l());
        EXPECT(0xedd5, gbc.sp());
        EXPECT(0x79da, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 0254
        gbc.setState(0xb5b7, 0xa487, 0x62e0, 0x54bd, 0xa15d, 0x835e, 0x0, 0x1);
        gbc.writeMem(0xb5b7, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x62, gbc.a());
        EXPECT(0x54, gbc.b());
        EXPECT(0xbd, gbc.c());
        EXPECT(0xa1, gbc.d());
        EXPECT(0x5d, gbc.e());
        EXPECT(0x83, gbc.h());
        EXPECT(0x5a, gbc.l());
        EXPECT(0xa487, gbc.sp());
        EXPECT(0xb5b9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb5b7));
        EXPECT(0x95, gbc.readMem(0xb5b8));
        // CB 95 0255
        gbc.setState(0x74c0, 0x92e1, 0xe660, 0xf15c, 0xfb66, 0xd09f, 0x1, 0x1);
        gbc.writeMem(0x74c0, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xe6, gbc.a());
        EXPECT(0xf1, gbc.b());
        EXPECT(0x5c, gbc.c());
        EXPECT(0xfb, gbc.d());
        EXPECT(0x66, gbc.e());
        EXPECT(0xd0, gbc.h());
        EXPECT(0x9b, gbc.l());
        EXPECT(0x92e1, gbc.sp());
        EXPECT(0x74c2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 0256
        gbc.setState(0xb845, 0x1b3d, 0x6780, 0xc1f9, 0x9830, 0xa14b, 0x1, 0x1);
        gbc.writeMem(0xb845, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x67, gbc.a());
        EXPECT(0xc1, gbc.b());
        EXPECT(0xf9, gbc.c());
        EXPECT(0x98, gbc.d());
        EXPECT(0x30, gbc.e());
        EXPECT(0xa1, gbc.h());
        EXPECT(0x4b, gbc.l());
        EXPECT(0x1b3d, gbc.sp());
        EXPECT(0xb847, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb845));
        EXPECT(0x95, gbc.readMem(0xb846));
        // CB 95 0257
        gbc.setState(0x6d13, 0x64d5, 0x7480, 0xdfce, 0x8ca9, 0x42f5, 0x1, 0x0);
        gbc.writeMem(0x6d13, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x74, gbc.a());
        EXPECT(0xdf, gbc.b());
        EXPECT(0xce, gbc.c());
        EXPECT(0x8c, gbc.d());
        EXPECT(0xa9, gbc.e());
        EXPECT(0x42, gbc.h());
        EXPECT(0xf1, gbc.l());
        EXPECT(0x64d5, gbc.sp());
        EXPECT(0x6d15, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 0258
        gbc.setState(0x745a, 0x38cd, 0x5b40, 0x933, 0xca9b, 0x1161, 0x1, 0x0);
        gbc.writeMem(0x745a, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x5b, gbc.a());
        EXPECT(0x9, gbc.b());
        EXPECT(0x33, gbc.c());
        EXPECT(0xca, gbc.d());
        EXPECT(0x9b, gbc.e());
        EXPECT(0x11, gbc.h());
        EXPECT(0x61, gbc.l());
        EXPECT(0x38cd, gbc.sp());
        EXPECT(0x745c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 025A
        gbc.setState(0xaf1, 0x1eab, 0x2410, 0x2037, 0xc2b, 0xa062, 0x0, 0x0);
        gbc.writeMem(0xaf1, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x24, gbc.a());
        EXPECT(0x20, gbc.b());
        EXPECT(0x37, gbc.c());
        EXPECT(0xc, gbc.d());
        EXPECT(0x2b, gbc.e());
        EXPECT(0xa0, gbc.h());
        EXPECT(0x62, gbc.l());
        EXPECT(0x1eab, gbc.sp());
        EXPECT(0xaf3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 025B
        gbc.setState(0x78b3, 0x62ce, 0x5290, 0xf0c, 0xecb8, 0xc3a8, 0x1, 0x1);
        gbc.writeMem(0x78b3, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x52, gbc.a());
        EXPECT(0xf, gbc.b());
        EXPECT(0xc, gbc.c());
        EXPECT(0xec, gbc.d());
        EXPECT(0xb8, gbc.e());
        EXPECT(0xc3, gbc.h());
        EXPECT(0xa8, gbc.l());
        EXPECT(0x62ce, gbc.sp());
        EXPECT(0x78b5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 025C
        gbc.setState(0x650b, 0x1111, 0x6920, 0x57dc, 0x739b, 0x5e46, 0x0, 0x1);
        gbc.writeMem(0x650b, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x69, gbc.a());
        EXPECT(0x57, gbc.b());
        EXPECT(0xdc, gbc.c());
        EXPECT(0x73, gbc.d());
        EXPECT(0x9b, gbc.e());
        EXPECT(0x5e, gbc.h());
        EXPECT(0x42, gbc.l());
        EXPECT(0x1111, gbc.sp());
        EXPECT(0x650d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 025D
        gbc.setState(0x857a, 0x49b2, 0xdc20, 0xeba4, 0xa2d, 0xdc5f, 0x1, 0x0);
        gbc.writeMem(0x857a, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xdc, gbc.a());
        EXPECT(0xeb, gbc.b());
        EXPECT(0xa4, gbc.c());
        EXPECT(0xa, gbc.d());
        EXPECT(0x2d, gbc.e());
        EXPECT(0xdc, gbc.h());
        EXPECT(0x5b, gbc.l());
        EXPECT(0x49b2, gbc.sp());
        EXPECT(0x857c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x857a));
        EXPECT(0x95, gbc.readMem(0x857b));
        // CB 95 025E
        gbc.setState(0x4680, 0x23ec, 0xdb0, 0x72f0, 0xcb14, 0x560e, 0x1, 0x0);
        gbc.writeMem(0x4680, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xd, gbc.a());
        EXPECT(0x72, gbc.b());
        EXPECT(0xf0, gbc.c());
        EXPECT(0xcb, gbc.d());
        EXPECT(0x14, gbc.e());
        EXPECT(0x56, gbc.h());
        EXPECT(0xa, gbc.l());
        EXPECT(0x23ec, gbc.sp());
        EXPECT(0x4682, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 025F
        gbc.setState(0x212d, 0x428b, 0xaf80, 0xf7ee, 0x4d65, 0xf4fe, 0x0, 0x0);
        gbc.writeMem(0x212d, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xaf, gbc.a());
        EXPECT(0xf7, gbc.b());
        EXPECT(0xee, gbc.c());
        EXPECT(0x4d, gbc.d());
        EXPECT(0x65, gbc.e());
        EXPECT(0xf4, gbc.h());
        EXPECT(0xfa, gbc.l());
        EXPECT(0x428b, gbc.sp());
        EXPECT(0x212f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 0260
        gbc.setState(0x415f, 0xc0c1, 0x1e10, 0xb6da, 0x17ae, 0x6613, 0x1, 0x0);
        gbc.writeMem(0x415f, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x1e, gbc.a());
        EXPECT(0xb6, gbc.b());
        EXPECT(0xda, gbc.c());
        EXPECT(0x17, gbc.d());
        EXPECT(0xae, gbc.e());
        EXPECT(0x66, gbc.h());
        EXPECT(0x13, gbc.l());
        EXPECT(0xc0c1, gbc.sp());
        EXPECT(0x4161, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 0261
        gbc.setState(0xd111, 0x2e3, 0x16a0, 0xdbc6, 0x76e3, 0x669a, 0x0, 0x1);
        gbc.writeMem(0xd111, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x16, gbc.a());
        EXPECT(0xdb, gbc.b());
        EXPECT(0xc6, gbc.c());
        EXPECT(0x76, gbc.d());
        EXPECT(0xe3, gbc.e());
        EXPECT(0x66, gbc.h());
        EXPECT(0x9a, gbc.l());
        EXPECT(0x2e3, gbc.sp());
        EXPECT(0xd113, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd111));
        EXPECT(0x95, gbc.readMem(0xd112));
        // CB 95 0262
        gbc.setState(0x71eb, 0x1047, 0xfe10, 0xde52, 0xcdc4, 0x42cf, 0x1, 0x0);
        gbc.writeMem(0x71eb, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xfe, gbc.a());
        EXPECT(0xde, gbc.b());
        EXPECT(0x52, gbc.c());
        EXPECT(0xcd, gbc.d());
        EXPECT(0xc4, gbc.e());
        EXPECT(0x42, gbc.h());
        EXPECT(0xcb, gbc.l());
        EXPECT(0x1047, gbc.sp());
        EXPECT(0x71ed, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 0263
        gbc.setState(0xbdbb, 0xc2dc, 0x3ee0, 0x9dc5, 0xc864, 0x6b6d, 0x0, 0x0);
        gbc.writeMem(0xbdbb, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x3e, gbc.a());
        EXPECT(0x9d, gbc.b());
        EXPECT(0xc5, gbc.c());
        EXPECT(0xc8, gbc.d());
        EXPECT(0x64, gbc.e());
        EXPECT(0x6b, gbc.h());
        EXPECT(0x69, gbc.l());
        EXPECT(0xc2dc, gbc.sp());
        EXPECT(0xbdbd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbdbb));
        EXPECT(0x95, gbc.readMem(0xbdbc));
        // CB 95 0264
        gbc.setState(0x6403, 0xc7aa, 0xeaa0, 0x43e0, 0xc82, 0xb912, 0x1, 0x0);
        gbc.writeMem(0x6403, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xea, gbc.a());
        EXPECT(0x43, gbc.b());
        EXPECT(0xe0, gbc.c());
        EXPECT(0xc, gbc.d());
        EXPECT(0x82, gbc.e());
        EXPECT(0xb9, gbc.h());
        EXPECT(0x12, gbc.l());
        EXPECT(0xc7aa, gbc.sp());
        EXPECT(0x6405, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 0265
        gbc.setState(0xafed, 0x5c34, 0xcf10, 0xe809, 0x3fcd, 0x4549, 0x1, 0x1);
        gbc.writeMem(0xafed, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xcf, gbc.a());
        EXPECT(0xe8, gbc.b());
        EXPECT(0x9, gbc.c());
        EXPECT(0x3f, gbc.d());
        EXPECT(0xcd, gbc.e());
        EXPECT(0x45, gbc.h());
        EXPECT(0x49, gbc.l());
        EXPECT(0x5c34, gbc.sp());
        EXPECT(0xafef, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xafed));
        EXPECT(0x95, gbc.readMem(0xafee));
        // CB 95 0266
        gbc.setState(0x488c, 0xa57f, 0x1860, 0x1eac, 0x2e30, 0x13ce, 0x0, 0x1);
        gbc.writeMem(0x488c, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x18, gbc.a());
        EXPECT(0x1e, gbc.b());
        EXPECT(0xac, gbc.c());
        EXPECT(0x2e, gbc.d());
        EXPECT(0x30, gbc.e());
        EXPECT(0x13, gbc.h());
        EXPECT(0xca, gbc.l());
        EXPECT(0xa57f, gbc.sp());
        EXPECT(0x488e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 0267
        gbc.setState(0x665b, 0xb2b6, 0x58c0, 0xa58, 0x13cc, 0x7d1f, 0x0, 0x0);
        gbc.writeMem(0x665b, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x58, gbc.a());
        EXPECT(0xa, gbc.b());
        EXPECT(0x58, gbc.c());
        EXPECT(0x13, gbc.d());
        EXPECT(0xcc, gbc.e());
        EXPECT(0x7d, gbc.h());
        EXPECT(0x1b, gbc.l());
        EXPECT(0xb2b6, gbc.sp());
        EXPECT(0x665d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 0268
        gbc.setState(0xe5c9, 0x2dd3, 0xd8a0, 0x63f0, 0xaee6, 0x5e7a, 0x1, 0x0);
        gbc.writeMem(0xe5c9, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xd8, gbc.a());
        EXPECT(0x63, gbc.b());
        EXPECT(0xf0, gbc.c());
        EXPECT(0xae, gbc.d());
        EXPECT(0xe6, gbc.e());
        EXPECT(0x5e, gbc.h());
        EXPECT(0x7a, gbc.l());
        EXPECT(0x2dd3, gbc.sp());
        EXPECT(0xe5cb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe5c9));
        EXPECT(0x95, gbc.readMem(0xe5ca));
        // CB 95 0269
        gbc.setState(0x1232, 0xc1e9, 0x3440, 0x88f2, 0xa5af, 0x10f2, 0x1, 0x0);
        gbc.writeMem(0x1232, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x34, gbc.a());
        EXPECT(0x88, gbc.b());
        EXPECT(0xf2, gbc.c());
        EXPECT(0xa5, gbc.d());
        EXPECT(0xaf, gbc.e());
        EXPECT(0x10, gbc.h());
        EXPECT(0xf2, gbc.l());
        EXPECT(0xc1e9, gbc.sp());
        EXPECT(0x1234, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 026B
        gbc.setState(0x1f3, 0xa18c, 0x29b0, 0x5ee3, 0xc740, 0x1012, 0x0, 0x0);
        gbc.writeMem(0x1f3, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x29, gbc.a());
        EXPECT(0x5e, gbc.b());
        EXPECT(0xe3, gbc.c());
        EXPECT(0xc7, gbc.d());
        EXPECT(0x40, gbc.e());
        EXPECT(0x10, gbc.h());
        EXPECT(0x12, gbc.l());
        EXPECT(0xa18c, gbc.sp());
        EXPECT(0x1f5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 026D
        gbc.setState(0xe9f8, 0xb07e, 0x61c0, 0x706, 0xd35, 0x4275, 0x1, 0x0);
        gbc.writeMem(0xe9f8, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x61, gbc.a());
        EXPECT(0x7, gbc.b());
        EXPECT(0x6, gbc.c());
        EXPECT(0xd, gbc.d());
        EXPECT(0x35, gbc.e());
        EXPECT(0x42, gbc.h());
        EXPECT(0x71, gbc.l());
        EXPECT(0xb07e, gbc.sp());
        EXPECT(0xe9fa, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe9f8));
        EXPECT(0x95, gbc.readMem(0xe9f9));
        // CB 95 026E
        gbc.setState(0xe4e6, 0x618d, 0x82e0, 0x1835, 0x71f2, 0x13d0, 0x1, 0x1);
        gbc.writeMem(0xe4e6, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x82, gbc.a());
        EXPECT(0x18, gbc.b());
        EXPECT(0x35, gbc.c());
        EXPECT(0x71, gbc.d());
        EXPECT(0xf2, gbc.e());
        EXPECT(0x13, gbc.h());
        EXPECT(0xd0, gbc.l());
        EXPECT(0x618d, gbc.sp());
        EXPECT(0xe4e8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe4e6));
        EXPECT(0x95, gbc.readMem(0xe4e7));
        // CB 95 026F
        gbc.setState(0xa2e7, 0x5c75, 0xf070, 0x7b39, 0x4b59, 0xf463, 0x1, 0x1);
        gbc.writeMem(0xa2e7, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xf0, gbc.a());
        EXPECT(0x7b, gbc.b());
        EXPECT(0x39, gbc.c());
        EXPECT(0x4b, gbc.d());
        EXPECT(0x59, gbc.e());
        EXPECT(0xf4, gbc.h());
        EXPECT(0x63, gbc.l());
        EXPECT(0x5c75, gbc.sp());
        EXPECT(0xa2e9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa2e7));
        EXPECT(0x95, gbc.readMem(0xa2e8));
        // CB 95 0270
        gbc.setState(0xc771, 0xd88b, 0x57b0, 0x4fa8, 0x9e16, 0x3d8f, 0x0, 0x1);
        gbc.writeMem(0xc771, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x57, gbc.a());
        EXPECT(0x4f, gbc.b());
        EXPECT(0xa8, gbc.c());
        EXPECT(0x9e, gbc.d());
        EXPECT(0x16, gbc.e());
        EXPECT(0x3d, gbc.h());
        EXPECT(0x8b, gbc.l());
        EXPECT(0xd88b, gbc.sp());
        EXPECT(0xc773, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc771));
        EXPECT(0x95, gbc.readMem(0xc772));
        // CB 95 0271
        gbc.setState(0x3eed, 0xf8eb, 0xc170, 0xb7cc, 0xeffc, 0x44ab, 0x1, 0x1);
        gbc.writeMem(0x3eed, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xc1, gbc.a());
        EXPECT(0xb7, gbc.b());
        EXPECT(0xcc, gbc.c());
        EXPECT(0xef, gbc.d());
        EXPECT(0xfc, gbc.e());
        EXPECT(0x44, gbc.h());
        EXPECT(0xab, gbc.l());
        EXPECT(0xf8eb, gbc.sp());
        EXPECT(0x3eef, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 0272
        gbc.setState(0x338d, 0xb1ba, 0xe10, 0xe4c0, 0xa44b, 0xde59, 0x0, 0x1);
        gbc.writeMem(0x338d, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xe, gbc.a());
        EXPECT(0xe4, gbc.b());
        EXPECT(0xc0, gbc.c());
        EXPECT(0xa4, gbc.d());
        EXPECT(0x4b, gbc.e());
        EXPECT(0xde, gbc.h());
        EXPECT(0x59, gbc.l());
        EXPECT(0xb1ba, gbc.sp());
        EXPECT(0x338f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 0273
        gbc.setState(0x1af7, 0x45a5, 0x75a0, 0x2776, 0xad73, 0xd46, 0x1, 0x0);
        gbc.writeMem(0x1af7, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x75, gbc.a());
        EXPECT(0x27, gbc.b());
        EXPECT(0x76, gbc.c());
        EXPECT(0xad, gbc.d());
        EXPECT(0x73, gbc.e());
        EXPECT(0xd, gbc.h());
        EXPECT(0x42, gbc.l());
        EXPECT(0x45a5, gbc.sp());
        EXPECT(0x1af9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 0274
        gbc.setState(0x6fa3, 0xdb16, 0xad60, 0x627d, 0xb103, 0xdffb, 0x0, 0x1);
        gbc.writeMem(0x6fa3, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xad, gbc.a());
        EXPECT(0x62, gbc.b());
        EXPECT(0x7d, gbc.c());
        EXPECT(0xb1, gbc.d());
        EXPECT(0x3, gbc.e());
        EXPECT(0xdf, gbc.h());
        EXPECT(0xfb, gbc.l());
        EXPECT(0xdb16, gbc.sp());
        EXPECT(0x6fa5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 0275
        gbc.setState(0x564d, 0x12a5, 0xa290, 0x73a2, 0xf4d8, 0x6662, 0x0, 0x0);
        gbc.writeMem(0x564d, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xa2, gbc.a());
        EXPECT(0x73, gbc.b());
        EXPECT(0xa2, gbc.c());
        EXPECT(0xf4, gbc.d());
        EXPECT(0xd8, gbc.e());
        EXPECT(0x66, gbc.h());
        EXPECT(0x62, gbc.l());
        EXPECT(0x12a5, gbc.sp());
        EXPECT(0x564f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 0276
        gbc.setState(0xad44, 0xef42, 0xf630, 0x2813, 0x619c, 0x1a40, 0x0, 0x0);
        gbc.writeMem(0xad44, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xf6, gbc.a());
        EXPECT(0x28, gbc.b());
        EXPECT(0x13, gbc.c());
        EXPECT(0x61, gbc.d());
        EXPECT(0x9c, gbc.e());
        EXPECT(0x1a, gbc.h());
        EXPECT(0x40, gbc.l());
        EXPECT(0xef42, gbc.sp());
        EXPECT(0xad46, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xad44));
        EXPECT(0x95, gbc.readMem(0xad45));
        // CB 95 0277
        gbc.setState(0x58a9, 0xfbf1, 0xd510, 0xdc84, 0x1ba0, 0x34b1, 0x0, 0x0);
        gbc.writeMem(0x58a9, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xd5, gbc.a());
        EXPECT(0xdc, gbc.b());
        EXPECT(0x84, gbc.c());
        EXPECT(0x1b, gbc.d());
        EXPECT(0xa0, gbc.e());
        EXPECT(0x34, gbc.h());
        EXPECT(0xb1, gbc.l());
        EXPECT(0xfbf1, gbc.sp());
        EXPECT(0x58ab, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 0279
        gbc.setState(0xd7f8, 0x7adc, 0xffc0, 0xa1ca, 0xfd0b, 0x507c, 0x1, 0x0);
        gbc.writeMem(0xd7f8, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xff, gbc.a());
        EXPECT(0xa1, gbc.b());
        EXPECT(0xca, gbc.c());
        EXPECT(0xfd, gbc.d());
        EXPECT(0xb, gbc.e());
        EXPECT(0x50, gbc.h());
        EXPECT(0x78, gbc.l());
        EXPECT(0x7adc, gbc.sp());
        EXPECT(0xd7fa, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd7f8));
        EXPECT(0x95, gbc.readMem(0xd7f9));
        // CB 95 027A
        gbc.setState(0x8edc, 0xa712, 0x19b0, 0x81ec, 0x409f, 0xe5de, 0x1, 0x1);
        gbc.writeMem(0x8edc, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x19, gbc.a());
        EXPECT(0x81, gbc.b());
        EXPECT(0xec, gbc.c());
        EXPECT(0x40, gbc.d());
        EXPECT(0x9f, gbc.e());
        EXPECT(0xe5, gbc.h());
        EXPECT(0xda, gbc.l());
        EXPECT(0xa712, gbc.sp());
        EXPECT(0x8ede, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8edc));
        EXPECT(0x95, gbc.readMem(0x8edd));
        // CB 95 027B
        gbc.setState(0x7a78, 0x5b03, 0x83c0, 0x84, 0x39d8, 0x3289, 0x1, 0x1);
        gbc.writeMem(0x7a78, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x83, gbc.a());
        EXPECT(0x0, gbc.b());
        EXPECT(0x84, gbc.c());
        EXPECT(0x39, gbc.d());
        EXPECT(0xd8, gbc.e());
        EXPECT(0x32, gbc.h());
        EXPECT(0x89, gbc.l());
        EXPECT(0x5b03, gbc.sp());
        EXPECT(0x7a7a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 027C
        gbc.setState(0xcf65, 0x67eb, 0xac80, 0x4a76, 0x2709, 0xe5f5, 0x1, 0x0);
        gbc.writeMem(0xcf65, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xac, gbc.a());
        EXPECT(0x4a, gbc.b());
        EXPECT(0x76, gbc.c());
        EXPECT(0x27, gbc.d());
        EXPECT(0x9, gbc.e());
        EXPECT(0xe5, gbc.h());
        EXPECT(0xf1, gbc.l());
        EXPECT(0x67eb, gbc.sp());
        EXPECT(0xcf67, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcf65));
        EXPECT(0x95, gbc.readMem(0xcf66));
        // CB 95 027E
        gbc.setState(0x25b8, 0x7dbb, 0xf190, 0xee50, 0x9375, 0x9f36, 0x0, 0x0);
        gbc.writeMem(0x25b8, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xf1, gbc.a());
        EXPECT(0xee, gbc.b());
        EXPECT(0x50, gbc.c());
        EXPECT(0x93, gbc.d());
        EXPECT(0x75, gbc.e());
        EXPECT(0x9f, gbc.h());
        EXPECT(0x32, gbc.l());
        EXPECT(0x7dbb, gbc.sp());
        EXPECT(0x25ba, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 027F
        gbc.setState(0xe819, 0x25bf, 0xf6a0, 0xb71d, 0x9862, 0x97eb, 0x0, 0x0);
        gbc.writeMem(0xe819, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xf6, gbc.a());
        EXPECT(0xb7, gbc.b());
        EXPECT(0x1d, gbc.c());
        EXPECT(0x98, gbc.d());
        EXPECT(0x62, gbc.e());
        EXPECT(0x97, gbc.h());
        EXPECT(0xeb, gbc.l());
        EXPECT(0x25bf, gbc.sp());
        EXPECT(0xe81b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe819));
        EXPECT(0x95, gbc.readMem(0xe81a));
        // CB 95 0280
        gbc.setState(0xeee0, 0x201c, 0xf4c0, 0x4005, 0xcf9d, 0xc06b, 0x1, 0x0);
        gbc.writeMem(0xeee0, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xf4, gbc.a());
        EXPECT(0x40, gbc.b());
        EXPECT(0x5, gbc.c());
        EXPECT(0xcf, gbc.d());
        EXPECT(0x9d, gbc.e());
        EXPECT(0xc0, gbc.h());
        EXPECT(0x6b, gbc.l());
        EXPECT(0x201c, gbc.sp());
        EXPECT(0xeee2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xeee0));
        EXPECT(0x95, gbc.readMem(0xeee1));
        // CB 95 0281
        gbc.setState(0x2014, 0x3d95, 0x69b0, 0x4c60, 0x8cae, 0x30c5, 0x0, 0x1);
        gbc.writeMem(0x2014, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x69, gbc.a());
        EXPECT(0x4c, gbc.b());
        EXPECT(0x60, gbc.c());
        EXPECT(0x8c, gbc.d());
        EXPECT(0xae, gbc.e());
        EXPECT(0x30, gbc.h());
        EXPECT(0xc1, gbc.l());
        EXPECT(0x3d95, gbc.sp());
        EXPECT(0x2016, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 0283
        gbc.setState(0x67c1, 0x8f10, 0x70c0, 0x9974, 0x82b1, 0x227, 0x0, 0x1);
        gbc.writeMem(0x67c1, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x70, gbc.a());
        EXPECT(0x99, gbc.b());
        EXPECT(0x74, gbc.c());
        EXPECT(0x82, gbc.d());
        EXPECT(0xb1, gbc.e());
        EXPECT(0x2, gbc.h());
        EXPECT(0x23, gbc.l());
        EXPECT(0x8f10, gbc.sp());
        EXPECT(0x67c3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 0284
        gbc.setState(0xef6b, 0xb652, 0xc460, 0x4224, 0xa8fa, 0x781d, 0x1, 0x1);
        gbc.writeMem(0xef6b, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xc4, gbc.a());
        EXPECT(0x42, gbc.b());
        EXPECT(0x24, gbc.c());
        EXPECT(0xa8, gbc.d());
        EXPECT(0xfa, gbc.e());
        EXPECT(0x78, gbc.h());
        EXPECT(0x19, gbc.l());
        EXPECT(0xb652, gbc.sp());
        EXPECT(0xef6d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xef6b));
        EXPECT(0x95, gbc.readMem(0xef6c));
        // CB 95 0285
        gbc.setState(0xad6, 0x5b2a, 0xf980, 0xf13, 0xe8bd, 0xee74, 0x0, 0x0);
        gbc.writeMem(0xad6, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xf9, gbc.a());
        EXPECT(0xf, gbc.b());
        EXPECT(0x13, gbc.c());
        EXPECT(0xe8, gbc.d());
        EXPECT(0xbd, gbc.e());
        EXPECT(0xee, gbc.h());
        EXPECT(0x70, gbc.l());
        EXPECT(0x5b2a, gbc.sp());
        EXPECT(0xad8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 0286
        gbc.setState(0x6ac1, 0xc30a, 0xc270, 0x6ba9, 0x171f, 0x7d95, 0x0, 0x1);
        gbc.writeMem(0x6ac1, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xc2, gbc.a());
        EXPECT(0x6b, gbc.b());
        EXPECT(0xa9, gbc.c());
        EXPECT(0x17, gbc.d());
        EXPECT(0x1f, gbc.e());
        EXPECT(0x7d, gbc.h());
        EXPECT(0x91, gbc.l());
        EXPECT(0xc30a, gbc.sp());
        EXPECT(0x6ac3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 0288
        gbc.setState(0x5b7a, 0x1767, 0xd9e0, 0x2341, 0xbb5d, 0xf27, 0x0, 0x1);
        gbc.writeMem(0x5b7a, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xd9, gbc.a());
        EXPECT(0x23, gbc.b());
        EXPECT(0x41, gbc.c());
        EXPECT(0xbb, gbc.d());
        EXPECT(0x5d, gbc.e());
        EXPECT(0xf, gbc.h());
        EXPECT(0x23, gbc.l());
        EXPECT(0x1767, gbc.sp());
        EXPECT(0x5b7c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 0289
        gbc.setState(0x7b55, 0xaf8c, 0xb2c0, 0xee95, 0xf2ec, 0x340b, 0x1, 0x1);
        gbc.writeMem(0x7b55, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xb2, gbc.a());
        EXPECT(0xee, gbc.b());
        EXPECT(0x95, gbc.c());
        EXPECT(0xf2, gbc.d());
        EXPECT(0xec, gbc.e());
        EXPECT(0x34, gbc.h());
        EXPECT(0xb, gbc.l());
        EXPECT(0xaf8c, gbc.sp());
        EXPECT(0x7b57, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 028A
        gbc.setState(0x677, 0xc3, 0xc2e0, 0xa685, 0x62dc, 0x1b42, 0x0, 0x0);
        gbc.writeMem(0x677, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xc2, gbc.a());
        EXPECT(0xa6, gbc.b());
        EXPECT(0x85, gbc.c());
        EXPECT(0x62, gbc.d());
        EXPECT(0xdc, gbc.e());
        EXPECT(0x1b, gbc.h());
        EXPECT(0x42, gbc.l());
        EXPECT(0xc3, gbc.sp());
        EXPECT(0x679, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 028B
        gbc.setState(0xc88f, 0x7713, 0x790, 0x2f7f, 0xc8d, 0x7bdc, 0x0, 0x1);
        gbc.writeMem(0xc88f, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x7, gbc.a());
        EXPECT(0x2f, gbc.b());
        EXPECT(0x7f, gbc.c());
        EXPECT(0xc, gbc.d());
        EXPECT(0x8d, gbc.e());
        EXPECT(0x7b, gbc.h());
        EXPECT(0xd8, gbc.l());
        EXPECT(0x7713, gbc.sp());
        EXPECT(0xc891, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc88f));
        EXPECT(0x95, gbc.readMem(0xc890));
        // CB 95 028C
        gbc.setState(0x82f9, 0xfd2b, 0xae80, 0xad72, 0x23cf, 0x2b8f, 0x0, 0x1);
        gbc.writeMem(0x82f9, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xae, gbc.a());
        EXPECT(0xad, gbc.b());
        EXPECT(0x72, gbc.c());
        EXPECT(0x23, gbc.d());
        EXPECT(0xcf, gbc.e());
        EXPECT(0x2b, gbc.h());
        EXPECT(0x8b, gbc.l());
        EXPECT(0xfd2b, gbc.sp());
        EXPECT(0x82fb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x82f9));
        EXPECT(0x95, gbc.readMem(0x82fa));
        // CB 95 028D
        gbc.setState(0x4eb2, 0x21ef, 0x6130, 0xd355, 0x9c94, 0x32e9, 0x0, 0x1);
        gbc.writeMem(0x4eb2, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x61, gbc.a());
        EXPECT(0xd3, gbc.b());
        EXPECT(0x55, gbc.c());
        EXPECT(0x9c, gbc.d());
        EXPECT(0x94, gbc.e());
        EXPECT(0x32, gbc.h());
        EXPECT(0xe9, gbc.l());
        EXPECT(0x21ef, gbc.sp());
        EXPECT(0x4eb4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 028E
        gbc.setState(0xb046, 0x5376, 0xbbd0, 0xf8ae, 0x178d, 0x4a51, 0x1, 0x0);
        gbc.writeMem(0xb046, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xbb, gbc.a());
        EXPECT(0xf8, gbc.b());
        EXPECT(0xae, gbc.c());
        EXPECT(0x17, gbc.d());
        EXPECT(0x8d, gbc.e());
        EXPECT(0x4a, gbc.h());
        EXPECT(0x51, gbc.l());
        EXPECT(0x5376, gbc.sp());
        EXPECT(0xb048, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb046));
        EXPECT(0x95, gbc.readMem(0xb047));
        // CB 95 028F
        gbc.setState(0x7f35, 0x326f, 0x38f0, 0x35b9, 0xe01c, 0x3ea9, 0x1, 0x1);
        gbc.writeMem(0x7f35, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x38, gbc.a());
        EXPECT(0x35, gbc.b());
        EXPECT(0xb9, gbc.c());
        EXPECT(0xe0, gbc.d());
        EXPECT(0x1c, gbc.e());
        EXPECT(0x3e, gbc.h());
        EXPECT(0xa9, gbc.l());
        EXPECT(0x326f, gbc.sp());
        EXPECT(0x7f37, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 0290
        gbc.setState(0xb837, 0x8bc1, 0x2c70, 0x3db7, 0xacc, 0xfe11, 0x0, 0x1);
        gbc.writeMem(0xb837, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x2c, gbc.a());
        EXPECT(0x3d, gbc.b());
        EXPECT(0xb7, gbc.c());
        EXPECT(0xa, gbc.d());
        EXPECT(0xcc, gbc.e());
        EXPECT(0xfe, gbc.h());
        EXPECT(0x11, gbc.l());
        EXPECT(0x8bc1, gbc.sp());
        EXPECT(0xb839, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb837));
        EXPECT(0x95, gbc.readMem(0xb838));
        // CB 95 0291
        gbc.setState(0x5462, 0x2ba1, 0x4950, 0xc7b, 0xfb2d, 0x331b, 0x1, 0x1);
        gbc.writeMem(0x5462, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x49, gbc.a());
        EXPECT(0xc, gbc.b());
        EXPECT(0x7b, gbc.c());
        EXPECT(0xfb, gbc.d());
        EXPECT(0x2d, gbc.e());
        EXPECT(0x33, gbc.h());
        EXPECT(0x1b, gbc.l());
        EXPECT(0x2ba1, gbc.sp());
        EXPECT(0x5464, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 0292
        gbc.setState(0xc976, 0xaba1, 0xf290, 0x4a32, 0x94f6, 0x9359, 0x0, 0x1);
        gbc.writeMem(0xc976, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xf2, gbc.a());
        EXPECT(0x4a, gbc.b());
        EXPECT(0x32, gbc.c());
        EXPECT(0x94, gbc.d());
        EXPECT(0xf6, gbc.e());
        EXPECT(0x93, gbc.h());
        EXPECT(0x59, gbc.l());
        EXPECT(0xaba1, gbc.sp());
        EXPECT(0xc978, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc976));
        EXPECT(0x95, gbc.readMem(0xc977));
        // CB 95 0293
        gbc.setState(0x3814, 0x4006, 0x9b60, 0x8058, 0x4d99, 0xbed2, 0x0, 0x1);
        gbc.writeMem(0x3814, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x9b, gbc.a());
        EXPECT(0x80, gbc.b());
        EXPECT(0x58, gbc.c());
        EXPECT(0x4d, gbc.d());
        EXPECT(0x99, gbc.e());
        EXPECT(0xbe, gbc.h());
        EXPECT(0xd2, gbc.l());
        EXPECT(0x4006, gbc.sp());
        EXPECT(0x3816, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 0294
        gbc.setState(0x6776, 0xad4a, 0x9340, 0x4762, 0x4362, 0x86d9, 0x0, 0x0);
        gbc.writeMem(0x6776, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x93, gbc.a());
        EXPECT(0x47, gbc.b());
        EXPECT(0x62, gbc.c());
        EXPECT(0x43, gbc.d());
        EXPECT(0x62, gbc.e());
        EXPECT(0x86, gbc.h());
        EXPECT(0xd9, gbc.l());
        EXPECT(0xad4a, gbc.sp());
        EXPECT(0x6778, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 0295
        gbc.setState(0xcbea, 0x7acd, 0x2740, 0x1f08, 0x9840, 0xaa8, 0x1, 0x1);
        gbc.writeMem(0xcbea, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x27, gbc.a());
        EXPECT(0x1f, gbc.b());
        EXPECT(0x8, gbc.c());
        EXPECT(0x98, gbc.d());
        EXPECT(0x40, gbc.e());
        EXPECT(0xa, gbc.h());
        EXPECT(0xa8, gbc.l());
        EXPECT(0x7acd, gbc.sp());
        EXPECT(0xcbec, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcbea));
        EXPECT(0x95, gbc.readMem(0xcbeb));
        // CB 95 0296
        gbc.setState(0x194, 0x9094, 0x4f00, 0x4b61, 0x4340, 0x97d4, 0x1, 0x1);
        gbc.writeMem(0x194, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x4f, gbc.a());
        EXPECT(0x4b, gbc.b());
        EXPECT(0x61, gbc.c());
        EXPECT(0x43, gbc.d());
        EXPECT(0x40, gbc.e());
        EXPECT(0x97, gbc.h());
        EXPECT(0xd0, gbc.l());
        EXPECT(0x9094, gbc.sp());
        EXPECT(0x196, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 0297
        gbc.setState(0x84e0, 0xd866, 0x6fd0, 0x4b1b, 0x3a7, 0xf9e2, 0x1, 0x0);
        gbc.writeMem(0x84e0, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x6f, gbc.a());
        EXPECT(0x4b, gbc.b());
        EXPECT(0x1b, gbc.c());
        EXPECT(0x3, gbc.d());
        EXPECT(0xa7, gbc.e());
        EXPECT(0xf9, gbc.h());
        EXPECT(0xe2, gbc.l());
        EXPECT(0xd866, gbc.sp());
        EXPECT(0x84e2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x84e0));
        EXPECT(0x95, gbc.readMem(0x84e1));
        // CB 95 0299
        gbc.setState(0xb263, 0x2cb7, 0x2f90, 0x1ac1, 0x5e0e, 0xd0c2, 0x1, 0x0);
        gbc.writeMem(0xb263, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x2f, gbc.a());
        EXPECT(0x1a, gbc.b());
        EXPECT(0xc1, gbc.c());
        EXPECT(0x5e, gbc.d());
        EXPECT(0xe, gbc.e());
        EXPECT(0xd0, gbc.h());
        EXPECT(0xc2, gbc.l());
        EXPECT(0x2cb7, gbc.sp());
        EXPECT(0xb265, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb263));
        EXPECT(0x95, gbc.readMem(0xb264));
        // CB 95 029A
        gbc.setState(0x80c3, 0x4984, 0x2900, 0xc8b3, 0x84dc, 0x3666, 0x1, 0x1);
        gbc.writeMem(0x80c3, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x29, gbc.a());
        EXPECT(0xc8, gbc.b());
        EXPECT(0xb3, gbc.c());
        EXPECT(0x84, gbc.d());
        EXPECT(0xdc, gbc.e());
        EXPECT(0x36, gbc.h());
        EXPECT(0x62, gbc.l());
        EXPECT(0x4984, gbc.sp());
        EXPECT(0x80c5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x80c3));
        EXPECT(0x95, gbc.readMem(0x80c4));
        // CB 95 029B
        gbc.setState(0xd105, 0xa40d, 0x26c0, 0x7aab, 0x5001, 0x5752, 0x0, 0x1);
        gbc.writeMem(0xd105, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x26, gbc.a());
        EXPECT(0x7a, gbc.b());
        EXPECT(0xab, gbc.c());
        EXPECT(0x50, gbc.d());
        EXPECT(0x1, gbc.e());
        EXPECT(0x57, gbc.h());
        EXPECT(0x52, gbc.l());
        EXPECT(0xa40d, gbc.sp());
        EXPECT(0xd107, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd105));
        EXPECT(0x95, gbc.readMem(0xd106));
        // CB 95 029C
        gbc.setState(0x67f4, 0x50f7, 0x1ba0, 0xf219, 0x11f2, 0x2f80, 0x0, 0x0);
        gbc.writeMem(0x67f4, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x1b, gbc.a());
        EXPECT(0xf2, gbc.b());
        EXPECT(0x19, gbc.c());
        EXPECT(0x11, gbc.d());
        EXPECT(0xf2, gbc.e());
        EXPECT(0x2f, gbc.h());
        EXPECT(0x80, gbc.l());
        EXPECT(0x50f7, gbc.sp());
        EXPECT(0x67f6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 029D
        gbc.setState(0x473c, 0xf143, 0x4fc0, 0x4b0b, 0xaa29, 0xf182, 0x0, 0x0);
        gbc.writeMem(0x473c, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x4f, gbc.a());
        EXPECT(0x4b, gbc.b());
        EXPECT(0xb, gbc.c());
        EXPECT(0xaa, gbc.d());
        EXPECT(0x29, gbc.e());
        EXPECT(0xf1, gbc.h());
        EXPECT(0x82, gbc.l());
        EXPECT(0xf143, gbc.sp());
        EXPECT(0x473e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 029E
        gbc.setState(0x5cd0, 0xf2d4, 0x4d40, 0x5531, 0x6adc, 0xeda9, 0x1, 0x1);
        gbc.writeMem(0x5cd0, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x4d, gbc.a());
        EXPECT(0x55, gbc.b());
        EXPECT(0x31, gbc.c());
        EXPECT(0x6a, gbc.d());
        EXPECT(0xdc, gbc.e());
        EXPECT(0xed, gbc.h());
        EXPECT(0xa9, gbc.l());
        EXPECT(0xf2d4, gbc.sp());
        EXPECT(0x5cd2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 029F
        gbc.setState(0x290f, 0x9de3, 0x39d0, 0xf54f, 0xf26d, 0x1e49, 0x0, 0x1);
        gbc.writeMem(0x290f, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x39, gbc.a());
        EXPECT(0xf5, gbc.b());
        EXPECT(0x4f, gbc.c());
        EXPECT(0xf2, gbc.d());
        EXPECT(0x6d, gbc.e());
        EXPECT(0x1e, gbc.h());
        EXPECT(0x49, gbc.l());
        EXPECT(0x9de3, gbc.sp());
        EXPECT(0x2911, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 02A0
        gbc.setState(0x7cfa, 0x67bd, 0x2b00, 0x3a34, 0x858e, 0xcc53, 0x0, 0x0);
        gbc.writeMem(0x7cfa, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x2b, gbc.a());
        EXPECT(0x3a, gbc.b());
        EXPECT(0x34, gbc.c());
        EXPECT(0x85, gbc.d());
        EXPECT(0x8e, gbc.e());
        EXPECT(0xcc, gbc.h());
        EXPECT(0x53, gbc.l());
        EXPECT(0x67bd, gbc.sp());
        EXPECT(0x7cfc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 02A1
        gbc.setState(0xdb2d, 0xf59, 0xb850, 0xd6e3, 0x8b59, 0x997a, 0x0, 0x0);
        gbc.writeMem(0xdb2d, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xb8, gbc.a());
        EXPECT(0xd6, gbc.b());
        EXPECT(0xe3, gbc.c());
        EXPECT(0x8b, gbc.d());
        EXPECT(0x59, gbc.e());
        EXPECT(0x99, gbc.h());
        EXPECT(0x7a, gbc.l());
        EXPECT(0xf59, gbc.sp());
        EXPECT(0xdb2f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdb2d));
        EXPECT(0x95, gbc.readMem(0xdb2e));
        // CB 95 02A2
        gbc.setState(0xe73e, 0x46d9, 0x5890, 0x33bd, 0x162e, 0xb629, 0x1, 0x1);
        gbc.writeMem(0xe73e, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x58, gbc.a());
        EXPECT(0x33, gbc.b());
        EXPECT(0xbd, gbc.c());
        EXPECT(0x16, gbc.d());
        EXPECT(0x2e, gbc.e());
        EXPECT(0xb6, gbc.h());
        EXPECT(0x29, gbc.l());
        EXPECT(0x46d9, gbc.sp());
        EXPECT(0xe740, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe73e));
        EXPECT(0x95, gbc.readMem(0xe73f));
        // CB 95 02A3
        gbc.setState(0x25ca, 0xa94, 0xba90, 0x716b, 0x555, 0x5b5b, 0x1, 0x1);
        gbc.writeMem(0x25ca, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xba, gbc.a());
        EXPECT(0x71, gbc.b());
        EXPECT(0x6b, gbc.c());
        EXPECT(0x5, gbc.d());
        EXPECT(0x55, gbc.e());
        EXPECT(0x5b, gbc.h());
        EXPECT(0x5b, gbc.l());
        EXPECT(0xa94, gbc.sp());
        EXPECT(0x25cc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 02A4
        gbc.setState(0xb5a6, 0x872f, 0x5430, 0x5e0c, 0x2514, 0xa77c, 0x1, 0x0);
        gbc.writeMem(0xb5a6, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x54, gbc.a());
        EXPECT(0x5e, gbc.b());
        EXPECT(0xc, gbc.c());
        EXPECT(0x25, gbc.d());
        EXPECT(0x14, gbc.e());
        EXPECT(0xa7, gbc.h());
        EXPECT(0x78, gbc.l());
        EXPECT(0x872f, gbc.sp());
        EXPECT(0xb5a8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb5a6));
        EXPECT(0x95, gbc.readMem(0xb5a7));
        // CB 95 02A5
        gbc.setState(0xed6, 0xb79c, 0x2b60, 0xa3f1, 0x4cb, 0xfe1f, 0x1, 0x1);
        gbc.writeMem(0xed6, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x2b, gbc.a());
        EXPECT(0xa3, gbc.b());
        EXPECT(0xf1, gbc.c());
        EXPECT(0x4, gbc.d());
        EXPECT(0xcb, gbc.e());
        EXPECT(0xfe, gbc.h());
        EXPECT(0x1b, gbc.l());
        EXPECT(0xb79c, gbc.sp());
        EXPECT(0xed8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 02A6
        gbc.setState(0xa060, 0x8a5e, 0x7e70, 0x2077, 0x17fd, 0xcc3a, 0x1, 0x1);
        gbc.writeMem(0xa060, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x7e, gbc.a());
        EXPECT(0x20, gbc.b());
        EXPECT(0x77, gbc.c());
        EXPECT(0x17, gbc.d());
        EXPECT(0xfd, gbc.e());
        EXPECT(0xcc, gbc.h());
        EXPECT(0x3a, gbc.l());
        EXPECT(0x8a5e, gbc.sp());
        EXPECT(0xa062, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa060));
        EXPECT(0x95, gbc.readMem(0xa061));
        // CB 95 02A7
        gbc.setState(0x4dfb, 0x2898, 0x6310, 0x8569, 0x305e, 0xf8a3, 0x0, 0x1);
        gbc.writeMem(0x4dfb, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x63, gbc.a());
        EXPECT(0x85, gbc.b());
        EXPECT(0x69, gbc.c());
        EXPECT(0x30, gbc.d());
        EXPECT(0x5e, gbc.e());
        EXPECT(0xf8, gbc.h());
        EXPECT(0xa3, gbc.l());
        EXPECT(0x2898, gbc.sp());
        EXPECT(0x4dfd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 02A8
        gbc.setState(0xcaf7, 0xf03c, 0x9fc0, 0x9f5, 0xbb43, 0x83f6, 0x0, 0x0);
        gbc.writeMem(0xcaf7, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x9f, gbc.a());
        EXPECT(0x9, gbc.b());
        EXPECT(0xf5, gbc.c());
        EXPECT(0xbb, gbc.d());
        EXPECT(0x43, gbc.e());
        EXPECT(0x83, gbc.h());
        EXPECT(0xf2, gbc.l());
        EXPECT(0xf03c, gbc.sp());
        EXPECT(0xcaf9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcaf7));
        EXPECT(0x95, gbc.readMem(0xcaf8));
        // CB 95 02A9
        gbc.setState(0xee5a, 0x2628, 0x40b0, 0x2dcd, 0x352d, 0x8d52, 0x1, 0x1);
        gbc.writeMem(0xee5a, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x40, gbc.a());
        EXPECT(0x2d, gbc.b());
        EXPECT(0xcd, gbc.c());
        EXPECT(0x35, gbc.d());
        EXPECT(0x2d, gbc.e());
        EXPECT(0x8d, gbc.h());
        EXPECT(0x52, gbc.l());
        EXPECT(0x2628, gbc.sp());
        EXPECT(0xee5c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xee5a));
        EXPECT(0x95, gbc.readMem(0xee5b));
        // CB 95 02AA
        gbc.setState(0x34c7, 0x5f46, 0x33f0, 0x7802, 0x9f60, 0x9009, 0x1, 0x1);
        gbc.writeMem(0x34c7, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x33, gbc.a());
        EXPECT(0x78, gbc.b());
        EXPECT(0x2, gbc.c());
        EXPECT(0x9f, gbc.d());
        EXPECT(0x60, gbc.e());
        EXPECT(0x90, gbc.h());
        EXPECT(0x9, gbc.l());
        EXPECT(0x5f46, gbc.sp());
        EXPECT(0x34c9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 02AC
        gbc.setState(0x92f5, 0x91f6, 0x7be0, 0x765a, 0xa71e, 0xf178, 0x0, 0x0);
        gbc.writeMem(0x92f5, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x7b, gbc.a());
        EXPECT(0x76, gbc.b());
        EXPECT(0x5a, gbc.c());
        EXPECT(0xa7, gbc.d());
        EXPECT(0x1e, gbc.e());
        EXPECT(0xf1, gbc.h());
        EXPECT(0x78, gbc.l());
        EXPECT(0x91f6, gbc.sp());
        EXPECT(0x92f7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x92f5));
        EXPECT(0x95, gbc.readMem(0x92f6));
        // CB 95 02AD
        gbc.setState(0x4245, 0xfdd2, 0x7520, 0x505a, 0xeef, 0x531c, 0x1, 0x0);
        gbc.writeMem(0x4245, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x75, gbc.a());
        EXPECT(0x50, gbc.b());
        EXPECT(0x5a, gbc.c());
        EXPECT(0xe, gbc.d());
        EXPECT(0xef, gbc.e());
        EXPECT(0x53, gbc.h());
        EXPECT(0x18, gbc.l());
        EXPECT(0xfdd2, gbc.sp());
        EXPECT(0x4247, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 02AE
        gbc.setState(0x4c9, 0xe86b, 0x2100, 0xccfd, 0xb477, 0xd9c7, 0x0, 0x1);
        gbc.writeMem(0x4c9, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x21, gbc.a());
        EXPECT(0xcc, gbc.b());
        EXPECT(0xfd, gbc.c());
        EXPECT(0xb4, gbc.d());
        EXPECT(0x77, gbc.e());
        EXPECT(0xd9, gbc.h());
        EXPECT(0xc3, gbc.l());
        EXPECT(0xe86b, gbc.sp());
        EXPECT(0x4cb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 02AF
        gbc.setState(0x74dc, 0xec82, 0x1020, 0x3cbd, 0x2d75, 0x3c1b, 0x1, 0x0);
        gbc.writeMem(0x74dc, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x10, gbc.a());
        EXPECT(0x3c, gbc.b());
        EXPECT(0xbd, gbc.c());
        EXPECT(0x2d, gbc.d());
        EXPECT(0x75, gbc.e());
        EXPECT(0x3c, gbc.h());
        EXPECT(0x1b, gbc.l());
        EXPECT(0xec82, gbc.sp());
        EXPECT(0x74de, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 02B0
        gbc.setState(0x6779, 0xabba, 0xfef0, 0xffb4, 0xc50d, 0x9ec5, 0x0, 0x0);
        gbc.writeMem(0x6779, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xfe, gbc.a());
        EXPECT(0xff, gbc.b());
        EXPECT(0xb4, gbc.c());
        EXPECT(0xc5, gbc.d());
        EXPECT(0xd, gbc.e());
        EXPECT(0x9e, gbc.h());
        EXPECT(0xc1, gbc.l());
        EXPECT(0xabba, gbc.sp());
        EXPECT(0x677b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 02B1
        gbc.setState(0x25c0, 0x1c9f, 0xf510, 0x429a, 0x5e75, 0x15df, 0x1, 0x1);
        gbc.writeMem(0x25c0, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xf5, gbc.a());
        EXPECT(0x42, gbc.b());
        EXPECT(0x9a, gbc.c());
        EXPECT(0x5e, gbc.d());
        EXPECT(0x75, gbc.e());
        EXPECT(0x15, gbc.h());
        EXPECT(0xdb, gbc.l());
        EXPECT(0x1c9f, gbc.sp());
        EXPECT(0x25c2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 02B2
        gbc.setState(0xf49, 0x4715, 0xcbe0, 0x9acf, 0x7118, 0xa7ed, 0x0, 0x0);
        gbc.writeMem(0xf49, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xcb, gbc.a());
        EXPECT(0x9a, gbc.b());
        EXPECT(0xcf, gbc.c());
        EXPECT(0x71, gbc.d());
        EXPECT(0x18, gbc.e());
        EXPECT(0xa7, gbc.h());
        EXPECT(0xe9, gbc.l());
        EXPECT(0x4715, gbc.sp());
        EXPECT(0xf4b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 02B3
        gbc.setState(0xe2e1, 0x450d, 0x1510, 0x6679, 0x9dfc, 0x4cdb, 0x1, 0x0);
        gbc.writeMem(0xe2e1, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x15, gbc.a());
        EXPECT(0x66, gbc.b());
        EXPECT(0x79, gbc.c());
        EXPECT(0x9d, gbc.d());
        EXPECT(0xfc, gbc.e());
        EXPECT(0x4c, gbc.h());
        EXPECT(0xdb, gbc.l());
        EXPECT(0x450d, gbc.sp());
        EXPECT(0xe2e3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe2e1));
        EXPECT(0x95, gbc.readMem(0xe2e2));
        // CB 95 02B4
        gbc.setState(0x7010, 0x46dd, 0x13d0, 0x80b6, 0x60b5, 0x6a97, 0x1, 0x0);
        gbc.writeMem(0x7010, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x13, gbc.a());
        EXPECT(0x80, gbc.b());
        EXPECT(0xb6, gbc.c());
        EXPECT(0x60, gbc.d());
        EXPECT(0xb5, gbc.e());
        EXPECT(0x6a, gbc.h());
        EXPECT(0x93, gbc.l());
        EXPECT(0x46dd, gbc.sp());
        EXPECT(0x7012, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 02B5
        gbc.setState(0xafa, 0x97b5, 0xa7c0, 0x86cd, 0xddf1, 0x6e94, 0x0, 0x1);
        gbc.writeMem(0xafa, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xa7, gbc.a());
        EXPECT(0x86, gbc.b());
        EXPECT(0xcd, gbc.c());
        EXPECT(0xdd, gbc.d());
        EXPECT(0xf1, gbc.e());
        EXPECT(0x6e, gbc.h());
        EXPECT(0x90, gbc.l());
        EXPECT(0x97b5, gbc.sp());
        EXPECT(0xafc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 02B6
        gbc.setState(0x476a, 0x868f, 0x4920, 0x17dd, 0xf693, 0x4719, 0x1, 0x0);
        gbc.writeMem(0x476a, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x49, gbc.a());
        EXPECT(0x17, gbc.b());
        EXPECT(0xdd, gbc.c());
        EXPECT(0xf6, gbc.d());
        EXPECT(0x93, gbc.e());
        EXPECT(0x47, gbc.h());
        EXPECT(0x19, gbc.l());
        EXPECT(0x868f, gbc.sp());
        EXPECT(0x476c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 02B7
        gbc.setState(0xbe1b, 0xb8e4, 0xd750, 0x47, 0xe651, 0x288a, 0x0, 0x0);
        gbc.writeMem(0xbe1b, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xd7, gbc.a());
        EXPECT(0x0, gbc.b());
        EXPECT(0x47, gbc.c());
        EXPECT(0xe6, gbc.d());
        EXPECT(0x51, gbc.e());
        EXPECT(0x28, gbc.h());
        EXPECT(0x8a, gbc.l());
        EXPECT(0xb8e4, gbc.sp());
        EXPECT(0xbe1d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbe1b));
        EXPECT(0x95, gbc.readMem(0xbe1c));
        // CB 95 02B8
        gbc.setState(0xe236, 0x18ed, 0xd8d0, 0xafec, 0x5e75, 0xbb72, 0x1, 0x1);
        gbc.writeMem(0xe236, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xd8, gbc.a());
        EXPECT(0xaf, gbc.b());
        EXPECT(0xec, gbc.c());
        EXPECT(0x5e, gbc.d());
        EXPECT(0x75, gbc.e());
        EXPECT(0xbb, gbc.h());
        EXPECT(0x72, gbc.l());
        EXPECT(0x18ed, gbc.sp());
        EXPECT(0xe238, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe236));
        EXPECT(0x95, gbc.readMem(0xe237));
        // CB 95 02B9
        gbc.setState(0x5a5b, 0x3591, 0x75d0, 0xf87a, 0x4920, 0x3a00, 0x0, 0x1);
        gbc.writeMem(0x5a5b, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x75, gbc.a());
        EXPECT(0xf8, gbc.b());
        EXPECT(0x7a, gbc.c());
        EXPECT(0x49, gbc.d());
        EXPECT(0x20, gbc.e());
        EXPECT(0x3a, gbc.h());
        EXPECT(0x0, gbc.l());
        EXPECT(0x3591, gbc.sp());
        EXPECT(0x5a5d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 02BA
        gbc.setState(0x2614, 0xa486, 0xf90, 0xa0b9, 0xa82e, 0x580, 0x1, 0x0);
        gbc.writeMem(0x2614, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xf, gbc.a());
        EXPECT(0xa0, gbc.b());
        EXPECT(0xb9, gbc.c());
        EXPECT(0xa8, gbc.d());
        EXPECT(0x2e, gbc.e());
        EXPECT(0x5, gbc.h());
        EXPECT(0x80, gbc.l());
        EXPECT(0xa486, gbc.sp());
        EXPECT(0x2616, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 02BB
        gbc.setState(0x86cb, 0x89c0, 0xcef0, 0x70d0, 0x744f, 0x1d75, 0x0, 0x1);
        gbc.writeMem(0x86cb, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xce, gbc.a());
        EXPECT(0x70, gbc.b());
        EXPECT(0xd0, gbc.c());
        EXPECT(0x74, gbc.d());
        EXPECT(0x4f, gbc.e());
        EXPECT(0x1d, gbc.h());
        EXPECT(0x71, gbc.l());
        EXPECT(0x89c0, gbc.sp());
        EXPECT(0x86cd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x86cb));
        EXPECT(0x95, gbc.readMem(0x86cc));
        // CB 95 02BC
        gbc.setState(0x9ed6, 0x14d4, 0x3500, 0xabb8, 0x57ad, 0xe6a5, 0x0, 0x1);
        gbc.writeMem(0x9ed6, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x35, gbc.a());
        EXPECT(0xab, gbc.b());
        EXPECT(0xb8, gbc.c());
        EXPECT(0x57, gbc.d());
        EXPECT(0xad, gbc.e());
        EXPECT(0xe6, gbc.h());
        EXPECT(0xa1, gbc.l());
        EXPECT(0x14d4, gbc.sp());
        EXPECT(0x9ed8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9ed6));
        EXPECT(0x95, gbc.readMem(0x9ed7));
        // CB 95 02BD
        gbc.setState(0x306d, 0xc531, 0xdf10, 0xd1ff, 0x57c7, 0x73a4, 0x0, 0x0);
        gbc.writeMem(0x306d, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xdf, gbc.a());
        EXPECT(0xd1, gbc.b());
        EXPECT(0xff, gbc.c());
        EXPECT(0x57, gbc.d());
        EXPECT(0xc7, gbc.e());
        EXPECT(0x73, gbc.h());
        EXPECT(0xa0, gbc.l());
        EXPECT(0xc531, gbc.sp());
        EXPECT(0x306f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 02BE
        gbc.setState(0xac9d, 0x485c, 0x7750, 0x42cb, 0xc4d1, 0x4b6f, 0x1, 0x1);
        gbc.writeMem(0xac9d, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x77, gbc.a());
        EXPECT(0x42, gbc.b());
        EXPECT(0xcb, gbc.c());
        EXPECT(0xc4, gbc.d());
        EXPECT(0xd1, gbc.e());
        EXPECT(0x4b, gbc.h());
        EXPECT(0x6b, gbc.l());
        EXPECT(0x485c, gbc.sp());
        EXPECT(0xac9f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xac9d));
        EXPECT(0x95, gbc.readMem(0xac9e));
        // CB 95 02BF
        gbc.setState(0x8e7e, 0xfe43, 0x9930, 0x838c, 0x988c, 0xff19, 0x1, 0x0);
        gbc.writeMem(0x8e7e, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x99, gbc.a());
        EXPECT(0x83, gbc.b());
        EXPECT(0x8c, gbc.c());
        EXPECT(0x98, gbc.d());
        EXPECT(0x8c, gbc.e());
        EXPECT(0xff, gbc.h());
        EXPECT(0x19, gbc.l());
        EXPECT(0xfe43, gbc.sp());
        EXPECT(0x8e80, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8e7e));
        EXPECT(0x95, gbc.readMem(0x8e7f));
        // CB 95 02C0
        gbc.setState(0x2fd6, 0x7cca, 0x1540, 0x9f17, 0x80d1, 0x4c83, 0x0, 0x1);
        gbc.writeMem(0x2fd6, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x15, gbc.a());
        EXPECT(0x9f, gbc.b());
        EXPECT(0x17, gbc.c());
        EXPECT(0x80, gbc.d());
        EXPECT(0xd1, gbc.e());
        EXPECT(0x4c, gbc.h());
        EXPECT(0x83, gbc.l());
        EXPECT(0x7cca, gbc.sp());
        EXPECT(0x2fd8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 02C1
        gbc.setState(0x6bfb, 0x7bde, 0xfe70, 0xff01, 0xaaa5, 0xdebe, 0x1, 0x1);
        gbc.writeMem(0x6bfb, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xfe, gbc.a());
        EXPECT(0xff, gbc.b());
        EXPECT(0x1, gbc.c());
        EXPECT(0xaa, gbc.d());
        EXPECT(0xa5, gbc.e());
        EXPECT(0xde, gbc.h());
        EXPECT(0xba, gbc.l());
        EXPECT(0x7bde, gbc.sp());
        EXPECT(0x6bfd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 02C2
        gbc.setState(0x815, 0x891, 0xb490, 0xd614, 0x2aa8, 0x7ad5, 0x1, 0x1);
        gbc.writeMem(0x815, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xb4, gbc.a());
        EXPECT(0xd6, gbc.b());
        EXPECT(0x14, gbc.c());
        EXPECT(0x2a, gbc.d());
        EXPECT(0xa8, gbc.e());
        EXPECT(0x7a, gbc.h());
        EXPECT(0xd1, gbc.l());
        EXPECT(0x891, gbc.sp());
        EXPECT(0x817, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 02C3
        gbc.setState(0xd608, 0x78f4, 0x7d0, 0xd818, 0xb377, 0x84df, 0x1, 0x1);
        gbc.writeMem(0xd608, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x7, gbc.a());
        EXPECT(0xd8, gbc.b());
        EXPECT(0x18, gbc.c());
        EXPECT(0xb3, gbc.d());
        EXPECT(0x77, gbc.e());
        EXPECT(0x84, gbc.h());
        EXPECT(0xdb, gbc.l());
        EXPECT(0x78f4, gbc.sp());
        EXPECT(0xd60a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd608));
        EXPECT(0x95, gbc.readMem(0xd609));
        // CB 95 02C4
        gbc.setState(0x4aa9, 0xb4d0, 0x3960, 0x8441, 0x37b2, 0xf755, 0x1, 0x0);
        gbc.writeMem(0x4aa9, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x39, gbc.a());
        EXPECT(0x84, gbc.b());
        EXPECT(0x41, gbc.c());
        EXPECT(0x37, gbc.d());
        EXPECT(0xb2, gbc.e());
        EXPECT(0xf7, gbc.h());
        EXPECT(0x51, gbc.l());
        EXPECT(0xb4d0, gbc.sp());
        EXPECT(0x4aab, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 02C5
        gbc.setState(0x3495, 0x5df3, 0x4080, 0x658d, 0x6688, 0x5ec3, 0x1, 0x0);
        gbc.writeMem(0x3495, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x40, gbc.a());
        EXPECT(0x65, gbc.b());
        EXPECT(0x8d, gbc.c());
        EXPECT(0x66, gbc.d());
        EXPECT(0x88, gbc.e());
        EXPECT(0x5e, gbc.h());
        EXPECT(0xc3, gbc.l());
        EXPECT(0x5df3, gbc.sp());
        EXPECT(0x3497, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 02C6
        gbc.setState(0x1d44, 0x6a5e, 0xa8b0, 0xd358, 0x1b76, 0x7a3d, 0x1, 0x1);
        gbc.writeMem(0x1d44, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xa8, gbc.a());
        EXPECT(0xd3, gbc.b());
        EXPECT(0x58, gbc.c());
        EXPECT(0x1b, gbc.d());
        EXPECT(0x76, gbc.e());
        EXPECT(0x7a, gbc.h());
        EXPECT(0x39, gbc.l());
        EXPECT(0x6a5e, gbc.sp());
        EXPECT(0x1d46, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 02C7
        gbc.setState(0xa4a5, 0xc303, 0x1380, 0xb891, 0xcbc6, 0x87d3, 0x1, 0x1);
        gbc.writeMem(0xa4a5, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x13, gbc.a());
        EXPECT(0xb8, gbc.b());
        EXPECT(0x91, gbc.c());
        EXPECT(0xcb, gbc.d());
        EXPECT(0xc6, gbc.e());
        EXPECT(0x87, gbc.h());
        EXPECT(0xd3, gbc.l());
        EXPECT(0xc303, gbc.sp());
        EXPECT(0xa4a7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa4a5));
        EXPECT(0x95, gbc.readMem(0xa4a6));
        // CB 95 02C8
        gbc.setState(0x3606, 0x1963, 0x4920, 0xd3ca, 0x12df, 0xe26d, 0x1, 0x0);
        gbc.writeMem(0x3606, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x49, gbc.a());
        EXPECT(0xd3, gbc.b());
        EXPECT(0xca, gbc.c());
        EXPECT(0x12, gbc.d());
        EXPECT(0xdf, gbc.e());
        EXPECT(0xe2, gbc.h());
        EXPECT(0x69, gbc.l());
        EXPECT(0x1963, gbc.sp());
        EXPECT(0x3608, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 02C9
        gbc.setState(0x2010, 0x5efc, 0xce50, 0x9892, 0x6f71, 0x9f9b, 0x1, 0x1);
        gbc.writeMem(0x2010, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xce, gbc.a());
        EXPECT(0x98, gbc.b());
        EXPECT(0x92, gbc.c());
        EXPECT(0x6f, gbc.d());
        EXPECT(0x71, gbc.e());
        EXPECT(0x9f, gbc.h());
        EXPECT(0x9b, gbc.l());
        EXPECT(0x5efc, gbc.sp());
        EXPECT(0x2012, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 02CA
        gbc.setState(0x9022, 0x4b03, 0xa10, 0x346a, 0x155f, 0xa439, 0x0, 0x1);
        gbc.writeMem(0x9022, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xa, gbc.a());
        EXPECT(0x34, gbc.b());
        EXPECT(0x6a, gbc.c());
        EXPECT(0x15, gbc.d());
        EXPECT(0x5f, gbc.e());
        EXPECT(0xa4, gbc.h());
        EXPECT(0x39, gbc.l());
        EXPECT(0x4b03, gbc.sp());
        EXPECT(0x9024, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9022));
        EXPECT(0x95, gbc.readMem(0x9023));
        // CB 95 02CB
        gbc.setState(0x651c, 0x9db0, 0xd9c0, 0xb389, 0x1d26, 0x77d7, 0x1, 0x1);
        gbc.writeMem(0x651c, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xd9, gbc.a());
        EXPECT(0xb3, gbc.b());
        EXPECT(0x89, gbc.c());
        EXPECT(0x1d, gbc.d());
        EXPECT(0x26, gbc.e());
        EXPECT(0x77, gbc.h());
        EXPECT(0xd3, gbc.l());
        EXPECT(0x9db0, gbc.sp());
        EXPECT(0x651e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 02CC
        gbc.setState(0xab27, 0x3f18, 0xb7a0, 0xdbb, 0x9504, 0xa8fd, 0x0, 0x1);
        gbc.writeMem(0xab27, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xb7, gbc.a());
        EXPECT(0xd, gbc.b());
        EXPECT(0xbb, gbc.c());
        EXPECT(0x95, gbc.d());
        EXPECT(0x4, gbc.e());
        EXPECT(0xa8, gbc.h());
        EXPECT(0xf9, gbc.l());
        EXPECT(0x3f18, gbc.sp());
        EXPECT(0xab29, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xab27));
        EXPECT(0x95, gbc.readMem(0xab28));
        // CB 95 02CD
        gbc.setState(0x71ed, 0x991c, 0x7ac0, 0x11f5, 0x41ad, 0x62d4, 0x0, 0x0);
        gbc.writeMem(0x71ed, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x7a, gbc.a());
        EXPECT(0x11, gbc.b());
        EXPECT(0xf5, gbc.c());
        EXPECT(0x41, gbc.d());
        EXPECT(0xad, gbc.e());
        EXPECT(0x62, gbc.h());
        EXPECT(0xd0, gbc.l());
        EXPECT(0x991c, gbc.sp());
        EXPECT(0x71ef, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 02CE
        gbc.setState(0xe9d2, 0xa227, 0xf200, 0x5f5c, 0x7201, 0xf6df, 0x0, 0x1);
        gbc.writeMem(0xe9d2, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xf2, gbc.a());
        EXPECT(0x5f, gbc.b());
        EXPECT(0x5c, gbc.c());
        EXPECT(0x72, gbc.d());
        EXPECT(0x1, gbc.e());
        EXPECT(0xf6, gbc.h());
        EXPECT(0xdb, gbc.l());
        EXPECT(0xa227, gbc.sp());
        EXPECT(0xe9d4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe9d2));
        EXPECT(0x95, gbc.readMem(0xe9d3));
        // CB 95 02CF
        gbc.setState(0xad93, 0x7736, 0x7240, 0xd98d, 0x687e, 0xe834, 0x0, 0x1);
        gbc.writeMem(0xad93, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x72, gbc.a());
        EXPECT(0xd9, gbc.b());
        EXPECT(0x8d, gbc.c());
        EXPECT(0x68, gbc.d());
        EXPECT(0x7e, gbc.e());
        EXPECT(0xe8, gbc.h());
        EXPECT(0x30, gbc.l());
        EXPECT(0x7736, gbc.sp());
        EXPECT(0xad95, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xad93));
        EXPECT(0x95, gbc.readMem(0xad94));
        // CB 95 02D0
        gbc.setState(0x545e, 0xe5b9, 0x7790, 0x36dc, 0x2e8e, 0x74fb, 0x0, 0x0);
        gbc.writeMem(0x545e, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x77, gbc.a());
        EXPECT(0x36, gbc.b());
        EXPECT(0xdc, gbc.c());
        EXPECT(0x2e, gbc.d());
        EXPECT(0x8e, gbc.e());
        EXPECT(0x74, gbc.h());
        EXPECT(0xfb, gbc.l());
        EXPECT(0xe5b9, gbc.sp());
        EXPECT(0x5460, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 02D1
        gbc.setState(0x9e99, 0xca08, 0xee20, 0x2fae, 0xaaa9, 0x99dd, 0x0, 0x1);
        gbc.writeMem(0x9e99, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xee, gbc.a());
        EXPECT(0x2f, gbc.b());
        EXPECT(0xae, gbc.c());
        EXPECT(0xaa, gbc.d());
        EXPECT(0xa9, gbc.e());
        EXPECT(0x99, gbc.h());
        EXPECT(0xd9, gbc.l());
        EXPECT(0xca08, gbc.sp());
        EXPECT(0x9e9b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9e99));
        EXPECT(0x95, gbc.readMem(0x9e9a));
        // CB 95 02D2
        gbc.setState(0xdc0, 0x87be, 0xf7d0, 0x5a7d, 0x105f, 0xed82, 0x1, 0x1);
        gbc.writeMem(0xdc0, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xf7, gbc.a());
        EXPECT(0x5a, gbc.b());
        EXPECT(0x7d, gbc.c());
        EXPECT(0x10, gbc.d());
        EXPECT(0x5f, gbc.e());
        EXPECT(0xed, gbc.h());
        EXPECT(0x82, gbc.l());
        EXPECT(0x87be, gbc.sp());
        EXPECT(0xdc2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 02D3
        gbc.setState(0x6add, 0x1106, 0x88a0, 0x1c04, 0x4634, 0x24ce, 0x1, 0x0);
        gbc.writeMem(0x6add, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x88, gbc.a());
        EXPECT(0x1c, gbc.b());
        EXPECT(0x4, gbc.c());
        EXPECT(0x46, gbc.d());
        EXPECT(0x34, gbc.e());
        EXPECT(0x24, gbc.h());
        EXPECT(0xca, gbc.l());
        EXPECT(0x1106, gbc.sp());
        EXPECT(0x6adf, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 02D4
        gbc.setState(0x788f, 0x728e, 0xb190, 0xbaba, 0xd59, 0xfd31, 0x0, 0x0);
        gbc.writeMem(0x788f, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xb1, gbc.a());
        EXPECT(0xba, gbc.b());
        EXPECT(0xba, gbc.c());
        EXPECT(0xd, gbc.d());
        EXPECT(0x59, gbc.e());
        EXPECT(0xfd, gbc.h());
        EXPECT(0x31, gbc.l());
        EXPECT(0x728e, gbc.sp());
        EXPECT(0x7891, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 02D5
        gbc.setState(0xe30a, 0x216e, 0xe1d0, 0xcc71, 0xa036, 0xb2be, 0x1, 0x1);
        gbc.writeMem(0xe30a, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xe1, gbc.a());
        EXPECT(0xcc, gbc.b());
        EXPECT(0x71, gbc.c());
        EXPECT(0xa0, gbc.d());
        EXPECT(0x36, gbc.e());
        EXPECT(0xb2, gbc.h());
        EXPECT(0xba, gbc.l());
        EXPECT(0x216e, gbc.sp());
        EXPECT(0xe30c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe30a));
        EXPECT(0x95, gbc.readMem(0xe30b));
        // CB 95 02D6
        gbc.setState(0xa1c2, 0xe564, 0x7ec0, 0x84d1, 0xbd79, 0x8f2e, 0x1, 0x0);
        gbc.writeMem(0xa1c2, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x7e, gbc.a());
        EXPECT(0x84, gbc.b());
        EXPECT(0xd1, gbc.c());
        EXPECT(0xbd, gbc.d());
        EXPECT(0x79, gbc.e());
        EXPECT(0x8f, gbc.h());
        EXPECT(0x2a, gbc.l());
        EXPECT(0xe564, gbc.sp());
        EXPECT(0xa1c4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa1c2));
        EXPECT(0x95, gbc.readMem(0xa1c3));
        // CB 95 02D8
        gbc.setState(0x1a8a, 0x7f06, 0x7f30, 0x9201, 0x26ea, 0x7b08, 0x1, 0x0);
        gbc.writeMem(0x1a8a, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x7f, gbc.a());
        EXPECT(0x92, gbc.b());
        EXPECT(0x1, gbc.c());
        EXPECT(0x26, gbc.d());
        EXPECT(0xea, gbc.e());
        EXPECT(0x7b, gbc.h());
        EXPECT(0x8, gbc.l());
        EXPECT(0x7f06, gbc.sp());
        EXPECT(0x1a8c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 02D9
        gbc.setState(0x9f2b, 0x9651, 0x97f0, 0xc023, 0x532c, 0x5157, 0x1, 0x1);
        gbc.writeMem(0x9f2b, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x97, gbc.a());
        EXPECT(0xc0, gbc.b());
        EXPECT(0x23, gbc.c());
        EXPECT(0x53, gbc.d());
        EXPECT(0x2c, gbc.e());
        EXPECT(0x51, gbc.h());
        EXPECT(0x53, gbc.l());
        EXPECT(0x9651, gbc.sp());
        EXPECT(0x9f2d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9f2b));
        EXPECT(0x95, gbc.readMem(0x9f2c));
        // CB 95 02DA
        gbc.setState(0x93dd, 0x8180, 0xd310, 0x9386, 0xe2b2, 0x129f, 0x0, 0x1);
        gbc.writeMem(0x93dd, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xd3, gbc.a());
        EXPECT(0x93, gbc.b());
        EXPECT(0x86, gbc.c());
        EXPECT(0xe2, gbc.d());
        EXPECT(0xb2, gbc.e());
        EXPECT(0x12, gbc.h());
        EXPECT(0x9b, gbc.l());
        EXPECT(0x8180, gbc.sp());
        EXPECT(0x93df, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x93dd));
        EXPECT(0x95, gbc.readMem(0x93de));
        // CB 95 02DB
        gbc.setState(0x389, 0xf362, 0xaf20, 0x8fb0, 0x9637, 0x6189, 0x0, 0x1);
        gbc.writeMem(0x389, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xaf, gbc.a());
        EXPECT(0x8f, gbc.b());
        EXPECT(0xb0, gbc.c());
        EXPECT(0x96, gbc.d());
        EXPECT(0x37, gbc.e());
        EXPECT(0x61, gbc.h());
        EXPECT(0x89, gbc.l());
        EXPECT(0xf362, gbc.sp());
        EXPECT(0x38b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 02DC
        gbc.setState(0xed3d, 0x3ed1, 0x3290, 0x458c, 0xe3b2, 0xdb8b, 0x1, 0x1);
        gbc.writeMem(0xed3d, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x32, gbc.a());
        EXPECT(0x45, gbc.b());
        EXPECT(0x8c, gbc.c());
        EXPECT(0xe3, gbc.d());
        EXPECT(0xb2, gbc.e());
        EXPECT(0xdb, gbc.h());
        EXPECT(0x8b, gbc.l());
        EXPECT(0x3ed1, gbc.sp());
        EXPECT(0xed3f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xed3d));
        EXPECT(0x95, gbc.readMem(0xed3e));
        // CB 95 02DD
        gbc.setState(0xe036, 0xbae, 0x9ca0, 0x326c, 0x6c82, 0xa1e6, 0x0, 0x1);
        gbc.writeMem(0xe036, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x9c, gbc.a());
        EXPECT(0x32, gbc.b());
        EXPECT(0x6c, gbc.c());
        EXPECT(0x6c, gbc.d());
        EXPECT(0x82, gbc.e());
        EXPECT(0xa1, gbc.h());
        EXPECT(0xe2, gbc.l());
        EXPECT(0xbae, gbc.sp());
        EXPECT(0xe038, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe036));
        EXPECT(0x95, gbc.readMem(0xe037));
        // CB 95 02DE
        gbc.setState(0x68d5, 0x1d37, 0x710, 0x9c45, 0x3d33, 0xdf12, 0x0, 0x0);
        gbc.writeMem(0x68d5, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x7, gbc.a());
        EXPECT(0x9c, gbc.b());
        EXPECT(0x45, gbc.c());
        EXPECT(0x3d, gbc.d());
        EXPECT(0x33, gbc.e());
        EXPECT(0xdf, gbc.h());
        EXPECT(0x12, gbc.l());
        EXPECT(0x1d37, gbc.sp());
        EXPECT(0x68d7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 02DF
        gbc.setState(0xc1b9, 0x378f, 0x7e30, 0xdd29, 0x6e79, 0xfcc, 0x1, 0x0);
        gbc.writeMem(0xc1b9, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x7e, gbc.a());
        EXPECT(0xdd, gbc.b());
        EXPECT(0x29, gbc.c());
        EXPECT(0x6e, gbc.d());
        EXPECT(0x79, gbc.e());
        EXPECT(0xf, gbc.h());
        EXPECT(0xc8, gbc.l());
        EXPECT(0x378f, gbc.sp());
        EXPECT(0xc1bb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc1b9));
        EXPECT(0x95, gbc.readMem(0xc1ba));
        // CB 95 02E0
        gbc.setState(0x5f28, 0x6606, 0x63a0, 0x6bd4, 0xd53e, 0xdb53, 0x1, 0x1);
        gbc.writeMem(0x5f28, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x63, gbc.a());
        EXPECT(0x6b, gbc.b());
        EXPECT(0xd4, gbc.c());
        EXPECT(0xd5, gbc.d());
        EXPECT(0x3e, gbc.e());
        EXPECT(0xdb, gbc.h());
        EXPECT(0x53, gbc.l());
        EXPECT(0x6606, gbc.sp());
        EXPECT(0x5f2a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 02E1
        gbc.setState(0x7ee5, 0x7c50, 0xc830, 0x7e8, 0xbc24, 0xf2ac, 0x1, 0x0);
        gbc.writeMem(0x7ee5, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xc8, gbc.a());
        EXPECT(0x7, gbc.b());
        EXPECT(0xe8, gbc.c());
        EXPECT(0xbc, gbc.d());
        EXPECT(0x24, gbc.e());
        EXPECT(0xf2, gbc.h());
        EXPECT(0xa8, gbc.l());
        EXPECT(0x7c50, gbc.sp());
        EXPECT(0x7ee7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 02E2
        gbc.setState(0xabe3, 0xa660, 0xe320, 0x601e, 0x58f2, 0x619d, 0x0, 0x0);
        gbc.writeMem(0xabe3, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xe3, gbc.a());
        EXPECT(0x60, gbc.b());
        EXPECT(0x1e, gbc.c());
        EXPECT(0x58, gbc.d());
        EXPECT(0xf2, gbc.e());
        EXPECT(0x61, gbc.h());
        EXPECT(0x99, gbc.l());
        EXPECT(0xa660, gbc.sp());
        EXPECT(0xabe5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xabe3));
        EXPECT(0x95, gbc.readMem(0xabe4));
        // CB 95 02E3
        gbc.setState(0xbfa, 0xf9d, 0x1520, 0xb22d, 0xc559, 0xd40, 0x0, 0x1);
        gbc.writeMem(0xbfa, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x15, gbc.a());
        EXPECT(0xb2, gbc.b());
        EXPECT(0x2d, gbc.c());
        EXPECT(0xc5, gbc.d());
        EXPECT(0x59, gbc.e());
        EXPECT(0xd, gbc.h());
        EXPECT(0x40, gbc.l());
        EXPECT(0xf9d, gbc.sp());
        EXPECT(0xbfc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 02E4
        gbc.setState(0x9639, 0xfce3, 0xacd0, 0x25c5, 0x56d4, 0xb090, 0x1, 0x0);
        gbc.writeMem(0x9639, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xac, gbc.a());
        EXPECT(0x25, gbc.b());
        EXPECT(0xc5, gbc.c());
        EXPECT(0x56, gbc.d());
        EXPECT(0xd4, gbc.e());
        EXPECT(0xb0, gbc.h());
        EXPECT(0x90, gbc.l());
        EXPECT(0xfce3, gbc.sp());
        EXPECT(0x963b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9639));
        EXPECT(0x95, gbc.readMem(0x963a));
        // CB 95 02E5
        gbc.setState(0x5eda, 0x81e0, 0x7e00, 0x5252, 0x1930, 0x24b2, 0x1, 0x1);
        gbc.writeMem(0x5eda, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x7e, gbc.a());
        EXPECT(0x52, gbc.b());
        EXPECT(0x52, gbc.c());
        EXPECT(0x19, gbc.d());
        EXPECT(0x30, gbc.e());
        EXPECT(0x24, gbc.h());
        EXPECT(0xb2, gbc.l());
        EXPECT(0x81e0, gbc.sp());
        EXPECT(0x5edc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 02E7
        gbc.setState(0xe51, 0xb599, 0xbb80, 0x74aa, 0x8580, 0xe5f0, 0x0, 0x0);
        gbc.writeMem(0xe51, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xbb, gbc.a());
        EXPECT(0x74, gbc.b());
        EXPECT(0xaa, gbc.c());
        EXPECT(0x85, gbc.d());
        EXPECT(0x80, gbc.e());
        EXPECT(0xe5, gbc.h());
        EXPECT(0xf0, gbc.l());
        EXPECT(0xb599, gbc.sp());
        EXPECT(0xe53, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 02E8
        gbc.setState(0xa400, 0x50bf, 0x6760, 0x304, 0x2ade, 0x3903, 0x0, 0x1);
        gbc.writeMem(0xa400, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x67, gbc.a());
        EXPECT(0x3, gbc.b());
        EXPECT(0x4, gbc.c());
        EXPECT(0x2a, gbc.d());
        EXPECT(0xde, gbc.e());
        EXPECT(0x39, gbc.h());
        EXPECT(0x3, gbc.l());
        EXPECT(0x50bf, gbc.sp());
        EXPECT(0xa402, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa400));
        EXPECT(0x95, gbc.readMem(0xa401));
        // CB 95 02E9
        gbc.setState(0x4ed1, 0x243b, 0x6980, 0x689e, 0x1542, 0x20a5, 0x1, 0x1);
        gbc.writeMem(0x4ed1, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x69, gbc.a());
        EXPECT(0x68, gbc.b());
        EXPECT(0x9e, gbc.c());
        EXPECT(0x15, gbc.d());
        EXPECT(0x42, gbc.e());
        EXPECT(0x20, gbc.h());
        EXPECT(0xa1, gbc.l());
        EXPECT(0x243b, gbc.sp());
        EXPECT(0x4ed3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 02EA
        gbc.setState(0x9929, 0xe135, 0x7fb0, 0x5dd1, 0x15c8, 0xa, 0x1, 0x0);
        gbc.writeMem(0x9929, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x7f, gbc.a());
        EXPECT(0x5d, gbc.b());
        EXPECT(0xd1, gbc.c());
        EXPECT(0x15, gbc.d());
        EXPECT(0xc8, gbc.e());
        EXPECT(0x0, gbc.h());
        EXPECT(0xa, gbc.l());
        EXPECT(0xe135, gbc.sp());
        EXPECT(0x992b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9929));
        EXPECT(0x95, gbc.readMem(0x992a));
        // CB 95 02EB
        gbc.setState(0xacca, 0x638b, 0x3be0, 0x2bfa, 0xcf31, 0xbab6, 0x0, 0x1);
        gbc.writeMem(0xacca, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x3b, gbc.a());
        EXPECT(0x2b, gbc.b());
        EXPECT(0xfa, gbc.c());
        EXPECT(0xcf, gbc.d());
        EXPECT(0x31, gbc.e());
        EXPECT(0xba, gbc.h());
        EXPECT(0xb2, gbc.l());
        EXPECT(0x638b, gbc.sp());
        EXPECT(0xaccc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xacca));
        EXPECT(0x95, gbc.readMem(0xaccb));
        // CB 95 02EC
        gbc.setState(0x6946, 0xfbe9, 0x89d0, 0xd61c, 0xcba9, 0xa216, 0x1, 0x1);
        gbc.writeMem(0x6946, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x89, gbc.a());
        EXPECT(0xd6, gbc.b());
        EXPECT(0x1c, gbc.c());
        EXPECT(0xcb, gbc.d());
        EXPECT(0xa9, gbc.e());
        EXPECT(0xa2, gbc.h());
        EXPECT(0x12, gbc.l());
        EXPECT(0xfbe9, gbc.sp());
        EXPECT(0x6948, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 02ED
        gbc.setState(0x1257, 0x1caa, 0x8aa0, 0x294f, 0xf56b, 0x1b36, 0x0, 0x1);
        gbc.writeMem(0x1257, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x8a, gbc.a());
        EXPECT(0x29, gbc.b());
        EXPECT(0x4f, gbc.c());
        EXPECT(0xf5, gbc.d());
        EXPECT(0x6b, gbc.e());
        EXPECT(0x1b, gbc.h());
        EXPECT(0x32, gbc.l());
        EXPECT(0x1caa, gbc.sp());
        EXPECT(0x1259, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 02EE
        gbc.setState(0x4026, 0xf871, 0xbd30, 0x6b65, 0x5470, 0x4e17, 0x1, 0x0);
        gbc.writeMem(0x4026, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xbd, gbc.a());
        EXPECT(0x6b, gbc.b());
        EXPECT(0x65, gbc.c());
        EXPECT(0x54, gbc.d());
        EXPECT(0x70, gbc.e());
        EXPECT(0x4e, gbc.h());
        EXPECT(0x13, gbc.l());
        EXPECT(0xf871, gbc.sp());
        EXPECT(0x4028, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 02EF
        gbc.setState(0xeb95, 0x47e4, 0xb810, 0xdca8, 0x41c, 0x8ba2, 0x0, 0x1);
        gbc.writeMem(0xeb95, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xb8, gbc.a());
        EXPECT(0xdc, gbc.b());
        EXPECT(0xa8, gbc.c());
        EXPECT(0x4, gbc.d());
        EXPECT(0x1c, gbc.e());
        EXPECT(0x8b, gbc.h());
        EXPECT(0xa2, gbc.l());
        EXPECT(0x47e4, gbc.sp());
        EXPECT(0xeb97, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xeb95));
        EXPECT(0x95, gbc.readMem(0xeb96));
        // CB 95 02F0
        gbc.setState(0xe676, 0x3a25, 0x2700, 0x731, 0x3966, 0x8612, 0x1, 0x0);
        gbc.writeMem(0xe676, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x27, gbc.a());
        EXPECT(0x7, gbc.b());
        EXPECT(0x31, gbc.c());
        EXPECT(0x39, gbc.d());
        EXPECT(0x66, gbc.e());
        EXPECT(0x86, gbc.h());
        EXPECT(0x12, gbc.l());
        EXPECT(0x3a25, gbc.sp());
        EXPECT(0xe678, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe676));
        EXPECT(0x95, gbc.readMem(0xe677));
        // CB 95 02F2
        gbc.setState(0x1f49, 0x427a, 0xff90, 0xc121, 0x267d, 0xd11b, 0x1, 0x0);
        gbc.writeMem(0x1f49, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xff, gbc.a());
        EXPECT(0xc1, gbc.b());
        EXPECT(0x21, gbc.c());
        EXPECT(0x26, gbc.d());
        EXPECT(0x7d, gbc.e());
        EXPECT(0xd1, gbc.h());
        EXPECT(0x1b, gbc.l());
        EXPECT(0x427a, gbc.sp());
        EXPECT(0x1f4b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 02F3
        gbc.setState(0x9007, 0xf657, 0xcfc0, 0x1700, 0xb22a, 0xf3ce, 0x0, 0x0);
        gbc.writeMem(0x9007, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xcf, gbc.a());
        EXPECT(0x17, gbc.b());
        EXPECT(0x0, gbc.c());
        EXPECT(0xb2, gbc.d());
        EXPECT(0x2a, gbc.e());
        EXPECT(0xf3, gbc.h());
        EXPECT(0xca, gbc.l());
        EXPECT(0xf657, gbc.sp());
        EXPECT(0x9009, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9007));
        EXPECT(0x95, gbc.readMem(0x9008));
        // CB 95 02F4
        gbc.setState(0xc0da, 0xa44, 0x41c0, 0xe6b7, 0x2c72, 0x2b06, 0x1, 0x1);
        gbc.writeMem(0xc0da, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x41, gbc.a());
        EXPECT(0xe6, gbc.b());
        EXPECT(0xb7, gbc.c());
        EXPECT(0x2c, gbc.d());
        EXPECT(0x72, gbc.e());
        EXPECT(0x2b, gbc.h());
        EXPECT(0x2, gbc.l());
        EXPECT(0xa44, gbc.sp());
        EXPECT(0xc0dc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc0da));
        EXPECT(0x95, gbc.readMem(0xc0db));
        // CB 95 02F5
        gbc.setState(0xbaa7, 0x5de8, 0xdf20, 0x18c6, 0x7773, 0xe71d, 0x1, 0x0);
        gbc.writeMem(0xbaa7, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xdf, gbc.a());
        EXPECT(0x18, gbc.b());
        EXPECT(0xc6, gbc.c());
        EXPECT(0x77, gbc.d());
        EXPECT(0x73, gbc.e());
        EXPECT(0xe7, gbc.h());
        EXPECT(0x19, gbc.l());
        EXPECT(0x5de8, gbc.sp());
        EXPECT(0xbaa9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbaa7));
        EXPECT(0x95, gbc.readMem(0xbaa8));
        // CB 95 02F6
        gbc.setState(0x94a, 0xab46, 0x8bc0, 0x3ce5, 0xd08b, 0xe211, 0x1, 0x1);
        gbc.writeMem(0x94a, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x8b, gbc.a());
        EXPECT(0x3c, gbc.b());
        EXPECT(0xe5, gbc.c());
        EXPECT(0xd0, gbc.d());
        EXPECT(0x8b, gbc.e());
        EXPECT(0xe2, gbc.h());
        EXPECT(0x11, gbc.l());
        EXPECT(0xab46, gbc.sp());
        EXPECT(0x94c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 02F7
        gbc.setState(0xabf0, 0x347a, 0xd580, 0x3c6d, 0x63fd, 0xbce4, 0x1, 0x1);
        gbc.writeMem(0xabf0, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xd5, gbc.a());
        EXPECT(0x3c, gbc.b());
        EXPECT(0x6d, gbc.c());
        EXPECT(0x63, gbc.d());
        EXPECT(0xfd, gbc.e());
        EXPECT(0xbc, gbc.h());
        EXPECT(0xe0, gbc.l());
        EXPECT(0x347a, gbc.sp());
        EXPECT(0xabf2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xabf0));
        EXPECT(0x95, gbc.readMem(0xabf1));
        // CB 95 02F8
        gbc.setState(0x3110, 0x6144, 0x1110, 0x4d8d, 0xb298, 0x2019, 0x1, 0x0);
        gbc.writeMem(0x3110, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x11, gbc.a());
        EXPECT(0x4d, gbc.b());
        EXPECT(0x8d, gbc.c());
        EXPECT(0xb2, gbc.d());
        EXPECT(0x98, gbc.e());
        EXPECT(0x20, gbc.h());
        EXPECT(0x19, gbc.l());
        EXPECT(0x6144, gbc.sp());
        EXPECT(0x3112, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 02F9
        gbc.setState(0x9f18, 0x82f8, 0x1200, 0xc54d, 0x76c1, 0x43ad, 0x1, 0x1);
        gbc.writeMem(0x9f18, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x12, gbc.a());
        EXPECT(0xc5, gbc.b());
        EXPECT(0x4d, gbc.c());
        EXPECT(0x76, gbc.d());
        EXPECT(0xc1, gbc.e());
        EXPECT(0x43, gbc.h());
        EXPECT(0xa9, gbc.l());
        EXPECT(0x82f8, gbc.sp());
        EXPECT(0x9f1a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9f18));
        EXPECT(0x95, gbc.readMem(0x9f19));
        // CB 95 02FA
        gbc.setState(0xdea6, 0xc80e, 0xfbd0, 0xeef6, 0x34b8, 0x2e7a, 0x0, 0x1);
        gbc.writeMem(0xdea6, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xfb, gbc.a());
        EXPECT(0xee, gbc.b());
        EXPECT(0xf6, gbc.c());
        EXPECT(0x34, gbc.d());
        EXPECT(0xb8, gbc.e());
        EXPECT(0x2e, gbc.h());
        EXPECT(0x7a, gbc.l());
        EXPECT(0xc80e, gbc.sp());
        EXPECT(0xdea8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdea6));
        EXPECT(0x95, gbc.readMem(0xdea7));
        // CB 95 02FC
        gbc.setState(0x855f, 0x112b, 0x33e0, 0x67d8, 0x6dab, 0xe878, 0x0, 0x0);
        gbc.writeMem(0x855f, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x33, gbc.a());
        EXPECT(0x67, gbc.b());
        EXPECT(0xd8, gbc.c());
        EXPECT(0x6d, gbc.d());
        EXPECT(0xab, gbc.e());
        EXPECT(0xe8, gbc.h());
        EXPECT(0x78, gbc.l());
        EXPECT(0x112b, gbc.sp());
        EXPECT(0x8561, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x855f));
        EXPECT(0x95, gbc.readMem(0x8560));
        // CB 95 02FD
        gbc.setState(0xa29d, 0x9900, 0x2170, 0xf6d1, 0x98a4, 0x35e9, 0x1, 0x0);
        gbc.writeMem(0xa29d, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x21, gbc.a());
        EXPECT(0xf6, gbc.b());
        EXPECT(0xd1, gbc.c());
        EXPECT(0x98, gbc.d());
        EXPECT(0xa4, gbc.e());
        EXPECT(0x35, gbc.h());
        EXPECT(0xe9, gbc.l());
        EXPECT(0x9900, gbc.sp());
        EXPECT(0xa29f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa29d));
        EXPECT(0x95, gbc.readMem(0xa29e));
        // CB 95 02FF
        gbc.setState(0xd175, 0xbd1a, 0x6120, 0x670c, 0xb88d, 0x9433, 0x0, 0x1);
        gbc.writeMem(0xd175, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x61, gbc.a());
        EXPECT(0x67, gbc.b());
        EXPECT(0xc, gbc.c());
        EXPECT(0xb8, gbc.d());
        EXPECT(0x8d, gbc.e());
        EXPECT(0x94, gbc.h());
        EXPECT(0x33, gbc.l());
        EXPECT(0xbd1a, gbc.sp());
        EXPECT(0xd177, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd175));
        EXPECT(0x95, gbc.readMem(0xd176));
        // CB 95 0300
        gbc.setState(0x7632, 0x10cd, 0x28e0, 0xb311, 0x6ba9, 0x52d1, 0x1, 0x0);
        gbc.writeMem(0x7632, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x28, gbc.a());
        EXPECT(0xb3, gbc.b());
        EXPECT(0x11, gbc.c());
        EXPECT(0x6b, gbc.d());
        EXPECT(0xa9, gbc.e());
        EXPECT(0x52, gbc.h());
        EXPECT(0xd1, gbc.l());
        EXPECT(0x10cd, gbc.sp());
        EXPECT(0x7634, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 0301
        gbc.setState(0xe4ef, 0xf26, 0x2b80, 0x134, 0xcee5, 0xf93, 0x0, 0x0);
        gbc.writeMem(0xe4ef, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x2b, gbc.a());
        EXPECT(0x1, gbc.b());
        EXPECT(0x34, gbc.c());
        EXPECT(0xce, gbc.d());
        EXPECT(0xe5, gbc.e());
        EXPECT(0xf, gbc.h());
        EXPECT(0x93, gbc.l());
        EXPECT(0xf26, gbc.sp());
        EXPECT(0xe4f1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe4ef));
        EXPECT(0x95, gbc.readMem(0xe4f0));
        // CB 95 0302
        gbc.setState(0x9ca3, 0xd56, 0xe3b0, 0xea61, 0x2a88, 0x9417, 0x0, 0x0);
        gbc.writeMem(0x9ca3, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xe3, gbc.a());
        EXPECT(0xea, gbc.b());
        EXPECT(0x61, gbc.c());
        EXPECT(0x2a, gbc.d());
        EXPECT(0x88, gbc.e());
        EXPECT(0x94, gbc.h());
        EXPECT(0x13, gbc.l());
        EXPECT(0xd56, gbc.sp());
        EXPECT(0x9ca5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9ca3));
        EXPECT(0x95, gbc.readMem(0x9ca4));
        // CB 95 0303
        gbc.setState(0x9d0e, 0xc86e, 0xad40, 0xe52d, 0xdf5, 0x5524, 0x0, 0x0);
        gbc.writeMem(0x9d0e, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xad, gbc.a());
        EXPECT(0xe5, gbc.b());
        EXPECT(0x2d, gbc.c());
        EXPECT(0xd, gbc.d());
        EXPECT(0xf5, gbc.e());
        EXPECT(0x55, gbc.h());
        EXPECT(0x20, gbc.l());
        EXPECT(0xc86e, gbc.sp());
        EXPECT(0x9d10, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9d0e));
        EXPECT(0x95, gbc.readMem(0x9d0f));
        // CB 95 0304
        gbc.setState(0xe42a, 0x7c76, 0xd30, 0x942e, 0x830d, 0x84f6, 0x1, 0x1);
        gbc.writeMem(0xe42a, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xd, gbc.a());
        EXPECT(0x94, gbc.b());
        EXPECT(0x2e, gbc.c());
        EXPECT(0x83, gbc.d());
        EXPECT(0xd, gbc.e());
        EXPECT(0x84, gbc.h());
        EXPECT(0xf2, gbc.l());
        EXPECT(0x7c76, gbc.sp());
        EXPECT(0xe42c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe42a));
        EXPECT(0x95, gbc.readMem(0xe42b));
        // CB 95 0305
        gbc.setState(0xaa2c, 0x720b, 0x96a0, 0xc455, 0xc557, 0xe9cc, 0x1, 0x0);
        gbc.writeMem(0xaa2c, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x96, gbc.a());
        EXPECT(0xc4, gbc.b());
        EXPECT(0x55, gbc.c());
        EXPECT(0xc5, gbc.d());
        EXPECT(0x57, gbc.e());
        EXPECT(0xe9, gbc.h());
        EXPECT(0xc8, gbc.l());
        EXPECT(0x720b, gbc.sp());
        EXPECT(0xaa2e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaa2c));
        EXPECT(0x95, gbc.readMem(0xaa2d));
        // CB 95 0306
        gbc.setState(0x9ced, 0xa738, 0xc910, 0xafb6, 0xa8f2, 0xa926, 0x0, 0x0);
        gbc.writeMem(0x9ced, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xc9, gbc.a());
        EXPECT(0xaf, gbc.b());
        EXPECT(0xb6, gbc.c());
        EXPECT(0xa8, gbc.d());
        EXPECT(0xf2, gbc.e());
        EXPECT(0xa9, gbc.h());
        EXPECT(0x22, gbc.l());
        EXPECT(0xa738, gbc.sp());
        EXPECT(0x9cef, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9ced));
        EXPECT(0x95, gbc.readMem(0x9cee));
        // CB 95 0307
        gbc.setState(0x3d3c, 0xe9ba, 0xd830, 0xde95, 0x829e, 0x73a6, 0x0, 0x1);
        gbc.writeMem(0x3d3c, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xd8, gbc.a());
        EXPECT(0xde, gbc.b());
        EXPECT(0x95, gbc.c());
        EXPECT(0x82, gbc.d());
        EXPECT(0x9e, gbc.e());
        EXPECT(0x73, gbc.h());
        EXPECT(0xa2, gbc.l());
        EXPECT(0xe9ba, gbc.sp());
        EXPECT(0x3d3e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 0308
        gbc.setState(0x29d0, 0x5929, 0x2780, 0xc09, 0xfa45, 0x5ebb, 0x1, 0x1);
        gbc.writeMem(0x29d0, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x27, gbc.a());
        EXPECT(0xc, gbc.b());
        EXPECT(0x9, gbc.c());
        EXPECT(0xfa, gbc.d());
        EXPECT(0x45, gbc.e());
        EXPECT(0x5e, gbc.h());
        EXPECT(0xbb, gbc.l());
        EXPECT(0x5929, gbc.sp());
        EXPECT(0x29d2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 0309
        gbc.setState(0x404e, 0x684f, 0xa200, 0xdb84, 0x6479, 0x1676, 0x0, 0x0);
        gbc.writeMem(0x404e, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xa2, gbc.a());
        EXPECT(0xdb, gbc.b());
        EXPECT(0x84, gbc.c());
        EXPECT(0x64, gbc.d());
        EXPECT(0x79, gbc.e());
        EXPECT(0x16, gbc.h());
        EXPECT(0x72, gbc.l());
        EXPECT(0x684f, gbc.sp());
        EXPECT(0x4050, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 030B
        gbc.setState(0xbb8e, 0x9267, 0xba70, 0xcc35, 0x33fc, 0xeb71, 0x1, 0x0);
        gbc.writeMem(0xbb8e, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xba, gbc.a());
        EXPECT(0xcc, gbc.b());
        EXPECT(0x35, gbc.c());
        EXPECT(0x33, gbc.d());
        EXPECT(0xfc, gbc.e());
        EXPECT(0xeb, gbc.h());
        EXPECT(0x71, gbc.l());
        EXPECT(0x9267, gbc.sp());
        EXPECT(0xbb90, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbb8e));
        EXPECT(0x95, gbc.readMem(0xbb8f));
        // CB 95 030C
        gbc.setState(0xbd02, 0x656b, 0xbad0, 0x4b1d, 0x75f8, 0xbf76, 0x0, 0x1);
        gbc.writeMem(0xbd02, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xba, gbc.a());
        EXPECT(0x4b, gbc.b());
        EXPECT(0x1d, gbc.c());
        EXPECT(0x75, gbc.d());
        EXPECT(0xf8, gbc.e());
        EXPECT(0xbf, gbc.h());
        EXPECT(0x72, gbc.l());
        EXPECT(0x656b, gbc.sp());
        EXPECT(0xbd04, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbd02));
        EXPECT(0x95, gbc.readMem(0xbd03));
        // CB 95 030D
        gbc.setState(0x50fe, 0xebe1, 0x4230, 0x50ad, 0x412e, 0x8c31, 0x0, 0x1);
        gbc.writeMem(0x50fe, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x42, gbc.a());
        EXPECT(0x50, gbc.b());
        EXPECT(0xad, gbc.c());
        EXPECT(0x41, gbc.d());
        EXPECT(0x2e, gbc.e());
        EXPECT(0x8c, gbc.h());
        EXPECT(0x31, gbc.l());
        EXPECT(0xebe1, gbc.sp());
        EXPECT(0x5100, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 030E
        gbc.setState(0x9b14, 0x4d57, 0xd3a0, 0xd30, 0x1405, 0x545c, 0x1, 0x0);
        gbc.writeMem(0x9b14, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xd3, gbc.a());
        EXPECT(0xd, gbc.b());
        EXPECT(0x30, gbc.c());
        EXPECT(0x14, gbc.d());
        EXPECT(0x5, gbc.e());
        EXPECT(0x54, gbc.h());
        EXPECT(0x58, gbc.l());
        EXPECT(0x4d57, gbc.sp());
        EXPECT(0x9b16, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9b14));
        EXPECT(0x95, gbc.readMem(0x9b15));
        // CB 95 030F
        gbc.setState(0x4d99, 0xd7fe, 0xa3f0, 0x75c6, 0x9c87, 0x9f0a, 0x1, 0x0);
        gbc.writeMem(0x4d99, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xa3, gbc.a());
        EXPECT(0x75, gbc.b());
        EXPECT(0xc6, gbc.c());
        EXPECT(0x9c, gbc.d());
        EXPECT(0x87, gbc.e());
        EXPECT(0x9f, gbc.h());
        EXPECT(0xa, gbc.l());
        EXPECT(0xd7fe, gbc.sp());
        EXPECT(0x4d9b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 0310
        gbc.setState(0x7a6a, 0xeba, 0x7b90, 0x4176, 0x5e55, 0x94b7, 0x1, 0x1);
        gbc.writeMem(0x7a6a, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x7b, gbc.a());
        EXPECT(0x41, gbc.b());
        EXPECT(0x76, gbc.c());
        EXPECT(0x5e, gbc.d());
        EXPECT(0x55, gbc.e());
        EXPECT(0x94, gbc.h());
        EXPECT(0xb3, gbc.l());
        EXPECT(0xeba, gbc.sp());
        EXPECT(0x7a6c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 0311
        gbc.setState(0x327d, 0x3d95, 0x4f80, 0xdd7, 0x2ccc, 0x9daf, 0x0, 0x1);
        gbc.writeMem(0x327d, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x4f, gbc.a());
        EXPECT(0xd, gbc.b());
        EXPECT(0xd7, gbc.c());
        EXPECT(0x2c, gbc.d());
        EXPECT(0xcc, gbc.e());
        EXPECT(0x9d, gbc.h());
        EXPECT(0xab, gbc.l());
        EXPECT(0x3d95, gbc.sp());
        EXPECT(0x327f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 0312
        gbc.setState(0x6195, 0x7870, 0x5890, 0xa2f7, 0x6d3f, 0xfe1e, 0x0, 0x1);
        gbc.writeMem(0x6195, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x58, gbc.a());
        EXPECT(0xa2, gbc.b());
        EXPECT(0xf7, gbc.c());
        EXPECT(0x6d, gbc.d());
        EXPECT(0x3f, gbc.e());
        EXPECT(0xfe, gbc.h());
        EXPECT(0x1a, gbc.l());
        EXPECT(0x7870, gbc.sp());
        EXPECT(0x6197, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 0313
        gbc.setState(0x28b2, 0xc561, 0xbb80, 0x46ea, 0x3de5, 0x7d93, 0x1, 0x0);
        gbc.writeMem(0x28b2, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xbb, gbc.a());
        EXPECT(0x46, gbc.b());
        EXPECT(0xea, gbc.c());
        EXPECT(0x3d, gbc.d());
        EXPECT(0xe5, gbc.e());
        EXPECT(0x7d, gbc.h());
        EXPECT(0x93, gbc.l());
        EXPECT(0xc561, gbc.sp());
        EXPECT(0x28b4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 0314
        gbc.setState(0x7b65, 0xf425, 0xbee0, 0xd8cf, 0x13ca, 0x5547, 0x0, 0x1);
        gbc.writeMem(0x7b65, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xbe, gbc.a());
        EXPECT(0xd8, gbc.b());
        EXPECT(0xcf, gbc.c());
        EXPECT(0x13, gbc.d());
        EXPECT(0xca, gbc.e());
        EXPECT(0x55, gbc.h());
        EXPECT(0x43, gbc.l());
        EXPECT(0xf425, gbc.sp());
        EXPECT(0x7b67, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 0315
        gbc.setState(0x94a3, 0xe373, 0xd850, 0xe61d, 0x23cb, 0x7fdb, 0x0, 0x0);
        gbc.writeMem(0x94a3, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xd8, gbc.a());
        EXPECT(0xe6, gbc.b());
        EXPECT(0x1d, gbc.c());
        EXPECT(0x23, gbc.d());
        EXPECT(0xcb, gbc.e());
        EXPECT(0x7f, gbc.h());
        EXPECT(0xdb, gbc.l());
        EXPECT(0xe373, gbc.sp());
        EXPECT(0x94a5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x94a3));
        EXPECT(0x95, gbc.readMem(0x94a4));
        // CB 95 0316
        gbc.setState(0x7edf, 0xe502, 0x5220, 0xf182, 0xc21, 0x71e4, 0x0, 0x1);
        gbc.writeMem(0x7edf, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x52, gbc.a());
        EXPECT(0xf1, gbc.b());
        EXPECT(0x82, gbc.c());
        EXPECT(0xc, gbc.d());
        EXPECT(0x21, gbc.e());
        EXPECT(0x71, gbc.h());
        EXPECT(0xe0, gbc.l());
        EXPECT(0xe502, gbc.sp());
        EXPECT(0x7ee1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 0317
        gbc.setState(0x5df6, 0x8139, 0x75a0, 0x4a44, 0x8373, 0xed82, 0x1, 0x0);
        gbc.writeMem(0x5df6, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x75, gbc.a());
        EXPECT(0x4a, gbc.b());
        EXPECT(0x44, gbc.c());
        EXPECT(0x83, gbc.d());
        EXPECT(0x73, gbc.e());
        EXPECT(0xed, gbc.h());
        EXPECT(0x82, gbc.l());
        EXPECT(0x8139, gbc.sp());
        EXPECT(0x5df8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 0318
        gbc.setState(0x7625, 0x32be, 0x1b10, 0xc2d, 0xba5c, 0xf83b, 0x0, 0x0);
        gbc.writeMem(0x7625, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x1b, gbc.a());
        EXPECT(0xc, gbc.b());
        EXPECT(0x2d, gbc.c());
        EXPECT(0xba, gbc.d());
        EXPECT(0x5c, gbc.e());
        EXPECT(0xf8, gbc.h());
        EXPECT(0x3b, gbc.l());
        EXPECT(0x32be, gbc.sp());
        EXPECT(0x7627, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 0319
        gbc.setState(0xb995, 0x9cdb, 0xc210, 0xff0c, 0xfabb, 0x6ce3, 0x1, 0x0);
        gbc.writeMem(0xb995, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xc2, gbc.a());
        EXPECT(0xff, gbc.b());
        EXPECT(0xc, gbc.c());
        EXPECT(0xfa, gbc.d());
        EXPECT(0xbb, gbc.e());
        EXPECT(0x6c, gbc.h());
        EXPECT(0xe3, gbc.l());
        EXPECT(0x9cdb, gbc.sp());
        EXPECT(0xb997, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb995));
        EXPECT(0x95, gbc.readMem(0xb996));
        // CB 95 031A
        gbc.setState(0x9f1d, 0x85fa, 0x990, 0x17eb, 0x2224, 0x57eb, 0x1, 0x1);
        gbc.writeMem(0x9f1d, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x9, gbc.a());
        EXPECT(0x17, gbc.b());
        EXPECT(0xeb, gbc.c());
        EXPECT(0x22, gbc.d());
        EXPECT(0x24, gbc.e());
        EXPECT(0x57, gbc.h());
        EXPECT(0xeb, gbc.l());
        EXPECT(0x85fa, gbc.sp());
        EXPECT(0x9f1f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9f1d));
        EXPECT(0x95, gbc.readMem(0x9f1e));
        // CB 95 031B
        gbc.setState(0x39dc, 0x99f0, 0x5530, 0x837f, 0x8881, 0xc8d3, 0x1, 0x0);
        gbc.writeMem(0x39dc, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x55, gbc.a());
        EXPECT(0x83, gbc.b());
        EXPECT(0x7f, gbc.c());
        EXPECT(0x88, gbc.d());
        EXPECT(0x81, gbc.e());
        EXPECT(0xc8, gbc.h());
        EXPECT(0xd3, gbc.l());
        EXPECT(0x99f0, gbc.sp());
        EXPECT(0x39de, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 031C
        gbc.setState(0xc22f, 0x6037, 0xde30, 0x9407, 0x4293, 0xa107, 0x1, 0x0);
        gbc.writeMem(0xc22f, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xde, gbc.a());
        EXPECT(0x94, gbc.b());
        EXPECT(0x7, gbc.c());
        EXPECT(0x42, gbc.d());
        EXPECT(0x93, gbc.e());
        EXPECT(0xa1, gbc.h());
        EXPECT(0x3, gbc.l());
        EXPECT(0x6037, gbc.sp());
        EXPECT(0xc231, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc22f));
        EXPECT(0x95, gbc.readMem(0xc230));
        // CB 95 031D
        gbc.setState(0x52d3, 0x1c67, 0x9ca0, 0xbe97, 0x604f, 0x3015, 0x1, 0x0);
        gbc.writeMem(0x52d3, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x9c, gbc.a());
        EXPECT(0xbe, gbc.b());
        EXPECT(0x97, gbc.c());
        EXPECT(0x60, gbc.d());
        EXPECT(0x4f, gbc.e());
        EXPECT(0x30, gbc.h());
        EXPECT(0x11, gbc.l());
        EXPECT(0x1c67, gbc.sp());
        EXPECT(0x52d5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 031E
        gbc.setState(0xd594, 0x1fba, 0x46c0, 0xbc87, 0x1190, 0xb1f6, 0x1, 0x1);
        gbc.writeMem(0xd594, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x46, gbc.a());
        EXPECT(0xbc, gbc.b());
        EXPECT(0x87, gbc.c());
        EXPECT(0x11, gbc.d());
        EXPECT(0x90, gbc.e());
        EXPECT(0xb1, gbc.h());
        EXPECT(0xf2, gbc.l());
        EXPECT(0x1fba, gbc.sp());
        EXPECT(0xd596, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd594));
        EXPECT(0x95, gbc.readMem(0xd595));
        // CB 95 031F
        gbc.setState(0xc23f, 0xcdc2, 0x35c0, 0xbe3d, 0xa30, 0x8d2, 0x1, 0x0);
        gbc.writeMem(0xc23f, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x35, gbc.a());
        EXPECT(0xbe, gbc.b());
        EXPECT(0x3d, gbc.c());
        EXPECT(0xa, gbc.d());
        EXPECT(0x30, gbc.e());
        EXPECT(0x8, gbc.h());
        EXPECT(0xd2, gbc.l());
        EXPECT(0xcdc2, gbc.sp());
        EXPECT(0xc241, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc23f));
        EXPECT(0x95, gbc.readMem(0xc240));
        // CB 95 0320
        gbc.setState(0x7746, 0x89f5, 0xf520, 0x2ae6, 0x1c9c, 0x6186, 0x1, 0x1);
        gbc.writeMem(0x7746, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xf5, gbc.a());
        EXPECT(0x2a, gbc.b());
        EXPECT(0xe6, gbc.c());
        EXPECT(0x1c, gbc.d());
        EXPECT(0x9c, gbc.e());
        EXPECT(0x61, gbc.h());
        EXPECT(0x82, gbc.l());
        EXPECT(0x89f5, gbc.sp());
        EXPECT(0x7748, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 0321
        gbc.setState(0xe87e, 0x3b40, 0x9040, 0x80c7, 0xb01e, 0xf21a, 0x0, 0x1);
        gbc.writeMem(0xe87e, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x90, gbc.a());
        EXPECT(0x80, gbc.b());
        EXPECT(0xc7, gbc.c());
        EXPECT(0xb0, gbc.d());
        EXPECT(0x1e, gbc.e());
        EXPECT(0xf2, gbc.h());
        EXPECT(0x1a, gbc.l());
        EXPECT(0x3b40, gbc.sp());
        EXPECT(0xe880, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe87e));
        EXPECT(0x95, gbc.readMem(0xe87f));
        // CB 95 0322
        gbc.setState(0x3999, 0x3546, 0x7c00, 0x310e, 0xaf17, 0x5b28, 0x1, 0x0);
        gbc.writeMem(0x3999, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x7c, gbc.a());
        EXPECT(0x31, gbc.b());
        EXPECT(0xe, gbc.c());
        EXPECT(0xaf, gbc.d());
        EXPECT(0x17, gbc.e());
        EXPECT(0x5b, gbc.h());
        EXPECT(0x28, gbc.l());
        EXPECT(0x3546, gbc.sp());
        EXPECT(0x399b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 0323
        gbc.setState(0xc1fc, 0x5105, 0x87b0, 0x6606, 0x3bce, 0xb08b, 0x1, 0x1);
        gbc.writeMem(0xc1fc, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x87, gbc.a());
        EXPECT(0x66, gbc.b());
        EXPECT(0x6, gbc.c());
        EXPECT(0x3b, gbc.d());
        EXPECT(0xce, gbc.e());
        EXPECT(0xb0, gbc.h());
        EXPECT(0x8b, gbc.l());
        EXPECT(0x5105, gbc.sp());
        EXPECT(0xc1fe, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc1fc));
        EXPECT(0x95, gbc.readMem(0xc1fd));
        // CB 95 0324
        gbc.setState(0xdff2, 0xfd05, 0xc2b0, 0x826e, 0x8e81, 0x2473, 0x0, 0x0);
        gbc.writeMem(0xdff2, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xc2, gbc.a());
        EXPECT(0x82, gbc.b());
        EXPECT(0x6e, gbc.c());
        EXPECT(0x8e, gbc.d());
        EXPECT(0x81, gbc.e());
        EXPECT(0x24, gbc.h());
        EXPECT(0x73, gbc.l());
        EXPECT(0xfd05, gbc.sp());
        EXPECT(0xdff4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdff2));
        EXPECT(0x95, gbc.readMem(0xdff3));
        // CB 95 0325
        gbc.setState(0x4211, 0x94eb, 0x1eb0, 0x93ca, 0x6d6, 0x259a, 0x0, 0x0);
        gbc.writeMem(0x4211, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x1e, gbc.a());
        EXPECT(0x93, gbc.b());
        EXPECT(0xca, gbc.c());
        EXPECT(0x6, gbc.d());
        EXPECT(0xd6, gbc.e());
        EXPECT(0x25, gbc.h());
        EXPECT(0x9a, gbc.l());
        EXPECT(0x94eb, gbc.sp());
        EXPECT(0x4213, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 0326
        gbc.setState(0x12d0, 0x1d88, 0x4bb0, 0x8d92, 0x611d, 0xe8a4, 0x1, 0x0);
        gbc.writeMem(0x12d0, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x4b, gbc.a());
        EXPECT(0x8d, gbc.b());
        EXPECT(0x92, gbc.c());
        EXPECT(0x61, gbc.d());
        EXPECT(0x1d, gbc.e());
        EXPECT(0xe8, gbc.h());
        EXPECT(0xa0, gbc.l());
        EXPECT(0x1d88, gbc.sp());
        EXPECT(0x12d2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 0328
        gbc.setState(0x624d, 0xd62c, 0x1b30, 0x49cd, 0xe92, 0x938f, 0x0, 0x1);
        gbc.writeMem(0x624d, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x1b, gbc.a());
        EXPECT(0x49, gbc.b());
        EXPECT(0xcd, gbc.c());
        EXPECT(0xe, gbc.d());
        EXPECT(0x92, gbc.e());
        EXPECT(0x93, gbc.h());
        EXPECT(0x8b, gbc.l());
        EXPECT(0xd62c, gbc.sp());
        EXPECT(0x624f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 0329
        gbc.setState(0x9b79, 0x925a, 0x6fa0, 0xdda6, 0x1178, 0x2f35, 0x1, 0x1);
        gbc.writeMem(0x9b79, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x6f, gbc.a());
        EXPECT(0xdd, gbc.b());
        EXPECT(0xa6, gbc.c());
        EXPECT(0x11, gbc.d());
        EXPECT(0x78, gbc.e());
        EXPECT(0x2f, gbc.h());
        EXPECT(0x31, gbc.l());
        EXPECT(0x925a, gbc.sp());
        EXPECT(0x9b7b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9b79));
        EXPECT(0x95, gbc.readMem(0x9b7a));
        // CB 95 032A
        gbc.setState(0x6127, 0x2ad7, 0x2af0, 0x8808, 0xe751, 0xa67a, 0x1, 0x1);
        gbc.writeMem(0x6127, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x2a, gbc.a());
        EXPECT(0x88, gbc.b());
        EXPECT(0x8, gbc.c());
        EXPECT(0xe7, gbc.d());
        EXPECT(0x51, gbc.e());
        EXPECT(0xa6, gbc.h());
        EXPECT(0x7a, gbc.l());
        EXPECT(0x2ad7, gbc.sp());
        EXPECT(0x6129, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 032B
        gbc.setState(0xc9ec, 0x66ce, 0xae10, 0xca97, 0x3924, 0x441d, 0x0, 0x1);
        gbc.writeMem(0xc9ec, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xae, gbc.a());
        EXPECT(0xca, gbc.b());
        EXPECT(0x97, gbc.c());
        EXPECT(0x39, gbc.d());
        EXPECT(0x24, gbc.e());
        EXPECT(0x44, gbc.h());
        EXPECT(0x19, gbc.l());
        EXPECT(0x66ce, gbc.sp());
        EXPECT(0xc9ee, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc9ec));
        EXPECT(0x95, gbc.readMem(0xc9ed));
        // CB 95 032C
        gbc.setState(0x2f96, 0xa30f, 0x51b0, 0xb93d, 0x3ba1, 0xee6f, 0x1, 0x0);
        gbc.writeMem(0x2f96, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x51, gbc.a());
        EXPECT(0xb9, gbc.b());
        EXPECT(0x3d, gbc.c());
        EXPECT(0x3b, gbc.d());
        EXPECT(0xa1, gbc.e());
        EXPECT(0xee, gbc.h());
        EXPECT(0x6b, gbc.l());
        EXPECT(0xa30f, gbc.sp());
        EXPECT(0x2f98, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 032D
        gbc.setState(0x1a, 0x2486, 0x1680, 0x5573, 0xef98, 0x45e6, 0x0, 0x0);
        gbc.writeMem(0x1a, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x16, gbc.a());
        EXPECT(0x55, gbc.b());
        EXPECT(0x73, gbc.c());
        EXPECT(0xef, gbc.d());
        EXPECT(0x98, gbc.e());
        EXPECT(0x45, gbc.h());
        EXPECT(0xe2, gbc.l());
        EXPECT(0x2486, gbc.sp());
        EXPECT(0x1c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 032E
        gbc.setState(0xd7cc, 0xc599, 0xe230, 0xab8d, 0x33a1, 0xde1d, 0x1, 0x1);
        gbc.writeMem(0xd7cc, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xe2, gbc.a());
        EXPECT(0xab, gbc.b());
        EXPECT(0x8d, gbc.c());
        EXPECT(0x33, gbc.d());
        EXPECT(0xa1, gbc.e());
        EXPECT(0xde, gbc.h());
        EXPECT(0x19, gbc.l());
        EXPECT(0xc599, gbc.sp());
        EXPECT(0xd7ce, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd7cc));
        EXPECT(0x95, gbc.readMem(0xd7cd));
        // CB 95 032F
        gbc.setState(0xe22d, 0xcc3c, 0x91b0, 0xc05b, 0xbbcc, 0x1a3c, 0x0, 0x1);
        gbc.writeMem(0xe22d, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x91, gbc.a());
        EXPECT(0xc0, gbc.b());
        EXPECT(0x5b, gbc.c());
        EXPECT(0xbb, gbc.d());
        EXPECT(0xcc, gbc.e());
        EXPECT(0x1a, gbc.h());
        EXPECT(0x38, gbc.l());
        EXPECT(0xcc3c, gbc.sp());
        EXPECT(0xe22f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe22d));
        EXPECT(0x95, gbc.readMem(0xe22e));
        // CB 95 0330
        gbc.setState(0x2895, 0x3dd0, 0x8840, 0x31f1, 0x71ed, 0x671e, 0x0, 0x0);
        gbc.writeMem(0x2895, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x88, gbc.a());
        EXPECT(0x31, gbc.b());
        EXPECT(0xf1, gbc.c());
        EXPECT(0x71, gbc.d());
        EXPECT(0xed, gbc.e());
        EXPECT(0x67, gbc.h());
        EXPECT(0x1a, gbc.l());
        EXPECT(0x3dd0, gbc.sp());
        EXPECT(0x2897, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 0331
        gbc.setState(0x82df, 0x7913, 0xf000, 0xb48c, 0xf805, 0xbeac, 0x1, 0x1);
        gbc.writeMem(0x82df, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xf0, gbc.a());
        EXPECT(0xb4, gbc.b());
        EXPECT(0x8c, gbc.c());
        EXPECT(0xf8, gbc.d());
        EXPECT(0x5, gbc.e());
        EXPECT(0xbe, gbc.h());
        EXPECT(0xa8, gbc.l());
        EXPECT(0x7913, gbc.sp());
        EXPECT(0x82e1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x82df));
        EXPECT(0x95, gbc.readMem(0x82e0));
        // CB 95 0332
        gbc.setState(0xa51, 0x2f27, 0x9d00, 0xd0b7, 0x1d99, 0xb2ff, 0x1, 0x1);
        gbc.writeMem(0xa51, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x9d, gbc.a());
        EXPECT(0xd0, gbc.b());
        EXPECT(0xb7, gbc.c());
        EXPECT(0x1d, gbc.d());
        EXPECT(0x99, gbc.e());
        EXPECT(0xb2, gbc.h());
        EXPECT(0xfb, gbc.l());
        EXPECT(0x2f27, gbc.sp());
        EXPECT(0xa53, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 0333
        gbc.setState(0xe47b, 0x73d, 0x38f0, 0xcabd, 0x4643, 0x3a18, 0x0, 0x0);
        gbc.writeMem(0xe47b, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x38, gbc.a());
        EXPECT(0xca, gbc.b());
        EXPECT(0xbd, gbc.c());
        EXPECT(0x46, gbc.d());
        EXPECT(0x43, gbc.e());
        EXPECT(0x3a, gbc.h());
        EXPECT(0x18, gbc.l());
        EXPECT(0x73d, gbc.sp());
        EXPECT(0xe47d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe47b));
        EXPECT(0x95, gbc.readMem(0xe47c));
        // CB 95 0335
        gbc.setState(0xe3, 0x3793, 0x8490, 0x469b, 0x970d, 0xbf57, 0x1, 0x0);
        gbc.writeMem(0xe3, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x84, gbc.a());
        EXPECT(0x46, gbc.b());
        EXPECT(0x9b, gbc.c());
        EXPECT(0x97, gbc.d());
        EXPECT(0xd, gbc.e());
        EXPECT(0xbf, gbc.h());
        EXPECT(0x53, gbc.l());
        EXPECT(0x3793, gbc.sp());
        EXPECT(0xe5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 0336
        gbc.setState(0x3db, 0x2bfb, 0x5b60, 0x16e6, 0x114d, 0x3569, 0x1, 0x0);
        gbc.writeMem(0x3db, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x5b, gbc.a());
        EXPECT(0x16, gbc.b());
        EXPECT(0xe6, gbc.c());
        EXPECT(0x11, gbc.d());
        EXPECT(0x4d, gbc.e());
        EXPECT(0x35, gbc.h());
        EXPECT(0x69, gbc.l());
        EXPECT(0x2bfb, gbc.sp());
        EXPECT(0x3dd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 0337
        gbc.setState(0x615a, 0xd5cf, 0x69b0, 0x3ff5, 0x827d, 0x1f0b, 0x0, 0x0);
        gbc.writeMem(0x615a, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x69, gbc.a());
        EXPECT(0x3f, gbc.b());
        EXPECT(0xf5, gbc.c());
        EXPECT(0x82, gbc.d());
        EXPECT(0x7d, gbc.e());
        EXPECT(0x1f, gbc.h());
        EXPECT(0xb, gbc.l());
        EXPECT(0xd5cf, gbc.sp());
        EXPECT(0x615c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 0339
        gbc.setState(0x9dd0, 0xbeb6, 0x3450, 0xe779, 0x323d, 0x86a8, 0x1, 0x0);
        gbc.writeMem(0x9dd0, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x34, gbc.a());
        EXPECT(0xe7, gbc.b());
        EXPECT(0x79, gbc.c());
        EXPECT(0x32, gbc.d());
        EXPECT(0x3d, gbc.e());
        EXPECT(0x86, gbc.h());
        EXPECT(0xa8, gbc.l());
        EXPECT(0xbeb6, gbc.sp());
        EXPECT(0x9dd2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9dd0));
        EXPECT(0x95, gbc.readMem(0x9dd1));
        // CB 95 033A
        gbc.setState(0xca49, 0x81f2, 0x4940, 0xe99d, 0xc508, 0xb54f, 0x1, 0x1);
        gbc.writeMem(0xca49, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x49, gbc.a());
        EXPECT(0xe9, gbc.b());
        EXPECT(0x9d, gbc.c());
        EXPECT(0xc5, gbc.d());
        EXPECT(0x8, gbc.e());
        EXPECT(0xb5, gbc.h());
        EXPECT(0x4b, gbc.l());
        EXPECT(0x81f2, gbc.sp());
        EXPECT(0xca4b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xca49));
        EXPECT(0x95, gbc.readMem(0xca4a));
        // CB 95 033B
        gbc.setState(0xeea5, 0x7980, 0x8720, 0x8e0a, 0x64d7, 0x4151, 0x1, 0x1);
        gbc.writeMem(0xeea5, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x87, gbc.a());
        EXPECT(0x8e, gbc.b());
        EXPECT(0xa, gbc.c());
        EXPECT(0x64, gbc.d());
        EXPECT(0xd7, gbc.e());
        EXPECT(0x41, gbc.h());
        EXPECT(0x51, gbc.l());
        EXPECT(0x7980, gbc.sp());
        EXPECT(0xeea7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xeea5));
        EXPECT(0x95, gbc.readMem(0xeea6));
        // CB 95 033C
        gbc.setState(0x42bb, 0xb0e1, 0x6a0, 0x5c5e, 0x3af5, 0xb3f0, 0x1, 0x1);
        gbc.writeMem(0x42bb, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x6, gbc.a());
        EXPECT(0x5c, gbc.b());
        EXPECT(0x5e, gbc.c());
        EXPECT(0x3a, gbc.d());
        EXPECT(0xf5, gbc.e());
        EXPECT(0xb3, gbc.h());
        EXPECT(0xf0, gbc.l());
        EXPECT(0xb0e1, gbc.sp());
        EXPECT(0x42bd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 033D
        gbc.setState(0xb03e, 0x646b, 0x5560, 0xfedb, 0x172f, 0x6eed, 0x0, 0x1);
        gbc.writeMem(0xb03e, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x55, gbc.a());
        EXPECT(0xfe, gbc.b());
        EXPECT(0xdb, gbc.c());
        EXPECT(0x17, gbc.d());
        EXPECT(0x2f, gbc.e());
        EXPECT(0x6e, gbc.h());
        EXPECT(0xe9, gbc.l());
        EXPECT(0x646b, gbc.sp());
        EXPECT(0xb040, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb03e));
        EXPECT(0x95, gbc.readMem(0xb03f));
        // CB 95 033E
        gbc.setState(0x749d, 0x9c75, 0xb020, 0x6da4, 0xf39c, 0x513c, 0x1, 0x0);
        gbc.writeMem(0x749d, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xb0, gbc.a());
        EXPECT(0x6d, gbc.b());
        EXPECT(0xa4, gbc.c());
        EXPECT(0xf3, gbc.d());
        EXPECT(0x9c, gbc.e());
        EXPECT(0x51, gbc.h());
        EXPECT(0x38, gbc.l());
        EXPECT(0x9c75, gbc.sp());
        EXPECT(0x749f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 033F
        gbc.setState(0x13da, 0x83b8, 0x8f60, 0x4364, 0x28da, 0x1cd8, 0x0, 0x1);
        gbc.writeMem(0x13da, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x8f, gbc.a());
        EXPECT(0x43, gbc.b());
        EXPECT(0x64, gbc.c());
        EXPECT(0x28, gbc.d());
        EXPECT(0xda, gbc.e());
        EXPECT(0x1c, gbc.h());
        EXPECT(0xd8, gbc.l());
        EXPECT(0x83b8, gbc.sp());
        EXPECT(0x13dc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 0340
        gbc.setState(0xd4cd, 0x2a9f, 0x96b0, 0xdedc, 0xcd29, 0xcc01, 0x0, 0x0);
        gbc.writeMem(0xd4cd, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x96, gbc.a());
        EXPECT(0xde, gbc.b());
        EXPECT(0xdc, gbc.c());
        EXPECT(0xcd, gbc.d());
        EXPECT(0x29, gbc.e());
        EXPECT(0xcc, gbc.h());
        EXPECT(0x1, gbc.l());
        EXPECT(0x2a9f, gbc.sp());
        EXPECT(0xd4cf, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd4cd));
        EXPECT(0x95, gbc.readMem(0xd4ce));
        // CB 95 0341
        gbc.setState(0xd44d, 0x5d08, 0x97e0, 0x32e9, 0xed85, 0x68f4, 0x0, 0x0);
        gbc.writeMem(0xd44d, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x97, gbc.a());
        EXPECT(0x32, gbc.b());
        EXPECT(0xe9, gbc.c());
        EXPECT(0xed, gbc.d());
        EXPECT(0x85, gbc.e());
        EXPECT(0x68, gbc.h());
        EXPECT(0xf0, gbc.l());
        EXPECT(0x5d08, gbc.sp());
        EXPECT(0xd44f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd44d));
        EXPECT(0x95, gbc.readMem(0xd44e));
        // CB 95 0342
        gbc.setState(0x74c1, 0x9d5a, 0xb780, 0x988f, 0x46af, 0xabbb, 0x1, 0x0);
        gbc.writeMem(0x74c1, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xb7, gbc.a());
        EXPECT(0x98, gbc.b());
        EXPECT(0x8f, gbc.c());
        EXPECT(0x46, gbc.d());
        EXPECT(0xaf, gbc.e());
        EXPECT(0xab, gbc.h());
        EXPECT(0xbb, gbc.l());
        EXPECT(0x9d5a, gbc.sp());
        EXPECT(0x74c3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 0343
        gbc.setState(0x451f, 0x1975, 0x69d0, 0xfae5, 0x54ef, 0xcf2e, 0x1, 0x1);
        gbc.writeMem(0x451f, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x69, gbc.a());
        EXPECT(0xfa, gbc.b());
        EXPECT(0xe5, gbc.c());
        EXPECT(0x54, gbc.d());
        EXPECT(0xef, gbc.e());
        EXPECT(0xcf, gbc.h());
        EXPECT(0x2a, gbc.l());
        EXPECT(0x1975, gbc.sp());
        EXPECT(0x4521, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 0344
        gbc.setState(0x3c87, 0x5070, 0xdf10, 0x21ca, 0xabb4, 0xc24, 0x1, 0x0);
        gbc.writeMem(0x3c87, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xdf, gbc.a());
        EXPECT(0x21, gbc.b());
        EXPECT(0xca, gbc.c());
        EXPECT(0xab, gbc.d());
        EXPECT(0xb4, gbc.e());
        EXPECT(0xc, gbc.h());
        EXPECT(0x20, gbc.l());
        EXPECT(0x5070, gbc.sp());
        EXPECT(0x3c89, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 0345
        gbc.setState(0x8104, 0xb0ef, 0x98a0, 0x5b1e, 0xbe5, 0x86d4, 0x1, 0x1);
        gbc.writeMem(0x8104, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x98, gbc.a());
        EXPECT(0x5b, gbc.b());
        EXPECT(0x1e, gbc.c());
        EXPECT(0xb, gbc.d());
        EXPECT(0xe5, gbc.e());
        EXPECT(0x86, gbc.h());
        EXPECT(0xd0, gbc.l());
        EXPECT(0xb0ef, gbc.sp());
        EXPECT(0x8106, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8104));
        EXPECT(0x95, gbc.readMem(0x8105));
        // CB 95 0346
        gbc.setState(0x5d5a, 0xf6a6, 0x94b0, 0xdebd, 0x115f, 0x8873, 0x1, 0x1);
        gbc.writeMem(0x5d5a, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x94, gbc.a());
        EXPECT(0xde, gbc.b());
        EXPECT(0xbd, gbc.c());
        EXPECT(0x11, gbc.d());
        EXPECT(0x5f, gbc.e());
        EXPECT(0x88, gbc.h());
        EXPECT(0x73, gbc.l());
        EXPECT(0xf6a6, gbc.sp());
        EXPECT(0x5d5c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 0347
        gbc.setState(0x4025, 0xcd98, 0x4d00, 0x4d09, 0xeb0a, 0x4ec1, 0x0, 0x0);
        gbc.writeMem(0x4025, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x4d, gbc.a());
        EXPECT(0x4d, gbc.b());
        EXPECT(0x9, gbc.c());
        EXPECT(0xeb, gbc.d());
        EXPECT(0xa, gbc.e());
        EXPECT(0x4e, gbc.h());
        EXPECT(0xc1, gbc.l());
        EXPECT(0xcd98, gbc.sp());
        EXPECT(0x4027, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 0348
        gbc.setState(0xb9da, 0x7bb0, 0x12b0, 0xcee, 0xed31, 0xbe8c, 0x1, 0x0);
        gbc.writeMem(0xb9da, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x12, gbc.a());
        EXPECT(0xc, gbc.b());
        EXPECT(0xee, gbc.c());
        EXPECT(0xed, gbc.d());
        EXPECT(0x31, gbc.e());
        EXPECT(0xbe, gbc.h());
        EXPECT(0x88, gbc.l());
        EXPECT(0x7bb0, gbc.sp());
        EXPECT(0xb9dc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb9da));
        EXPECT(0x95, gbc.readMem(0xb9db));
        // CB 95 0349
        gbc.setState(0x520, 0x41b2, 0x24f0, 0x1a0f, 0x7101, 0x3f4f, 0x1, 0x1);
        gbc.writeMem(0x520, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x24, gbc.a());
        EXPECT(0x1a, gbc.b());
        EXPECT(0xf, gbc.c());
        EXPECT(0x71, gbc.d());
        EXPECT(0x1, gbc.e());
        EXPECT(0x3f, gbc.h());
        EXPECT(0x4b, gbc.l());
        EXPECT(0x41b2, gbc.sp());
        EXPECT(0x522, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 034A
        gbc.setState(0xcd9f, 0x8543, 0xeeb0, 0x173f, 0x1064, 0xace3, 0x0, 0x0);
        gbc.writeMem(0xcd9f, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xee, gbc.a());
        EXPECT(0x17, gbc.b());
        EXPECT(0x3f, gbc.c());
        EXPECT(0x10, gbc.d());
        EXPECT(0x64, gbc.e());
        EXPECT(0xac, gbc.h());
        EXPECT(0xe3, gbc.l());
        EXPECT(0x8543, gbc.sp());
        EXPECT(0xcda1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcd9f));
        EXPECT(0x95, gbc.readMem(0xcda0));
        // CB 95 034B
        gbc.setState(0x58e9, 0x4d0d, 0x3fe0, 0x925f, 0xef03, 0xd8a7, 0x1, 0x0);
        gbc.writeMem(0x58e9, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x3f, gbc.a());
        EXPECT(0x92, gbc.b());
        EXPECT(0x5f, gbc.c());
        EXPECT(0xef, gbc.d());
        EXPECT(0x3, gbc.e());
        EXPECT(0xd8, gbc.h());
        EXPECT(0xa3, gbc.l());
        EXPECT(0x4d0d, gbc.sp());
        EXPECT(0x58eb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 034D
        gbc.setState(0xaa01, 0x6d63, 0x2bd0, 0xded1, 0x810d, 0x3047, 0x0, 0x0);
        gbc.writeMem(0xaa01, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x2b, gbc.a());
        EXPECT(0xde, gbc.b());
        EXPECT(0xd1, gbc.c());
        EXPECT(0x81, gbc.d());
        EXPECT(0xd, gbc.e());
        EXPECT(0x30, gbc.h());
        EXPECT(0x43, gbc.l());
        EXPECT(0x6d63, gbc.sp());
        EXPECT(0xaa03, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaa01));
        EXPECT(0x95, gbc.readMem(0xaa02));
        // CB 95 034E
        gbc.setState(0x63d0, 0x4882, 0xef60, 0xfece, 0x4793, 0xd9aa, 0x0, 0x1);
        gbc.writeMem(0x63d0, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xef, gbc.a());
        EXPECT(0xfe, gbc.b());
        EXPECT(0xce, gbc.c());
        EXPECT(0x47, gbc.d());
        EXPECT(0x93, gbc.e());
        EXPECT(0xd9, gbc.h());
        EXPECT(0xaa, gbc.l());
        EXPECT(0x4882, gbc.sp());
        EXPECT(0x63d2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 034F
        gbc.setState(0x4fda, 0x8a3, 0x4ea0, 0x491a, 0x1467, 0xe8db, 0x1, 0x1);
        gbc.writeMem(0x4fda, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x4e, gbc.a());
        EXPECT(0x49, gbc.b());
        EXPECT(0x1a, gbc.c());
        EXPECT(0x14, gbc.d());
        EXPECT(0x67, gbc.e());
        EXPECT(0xe8, gbc.h());
        EXPECT(0xdb, gbc.l());
        EXPECT(0x8a3, gbc.sp());
        EXPECT(0x4fdc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 0350
        gbc.setState(0x169f, 0xf0ef, 0xff70, 0xad86, 0xd813, 0xdf87, 0x1, 0x1);
        gbc.writeMem(0x169f, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xff, gbc.a());
        EXPECT(0xad, gbc.b());
        EXPECT(0x86, gbc.c());
        EXPECT(0xd8, gbc.d());
        EXPECT(0x13, gbc.e());
        EXPECT(0xdf, gbc.h());
        EXPECT(0x83, gbc.l());
        EXPECT(0xf0ef, gbc.sp());
        EXPECT(0x16a1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 0352
        gbc.setState(0x54ca, 0xc32f, 0xd750, 0xcdb6, 0x7150, 0xe753, 0x0, 0x0);
        gbc.writeMem(0x54ca, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xd7, gbc.a());
        EXPECT(0xcd, gbc.b());
        EXPECT(0xb6, gbc.c());
        EXPECT(0x71, gbc.d());
        EXPECT(0x50, gbc.e());
        EXPECT(0xe7, gbc.h());
        EXPECT(0x53, gbc.l());
        EXPECT(0xc32f, gbc.sp());
        EXPECT(0x54cc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 0353
        gbc.setState(0x1b0e, 0xd499, 0x6460, 0xe04c, 0x3fc3, 0xf0da, 0x0, 0x0);
        gbc.writeMem(0x1b0e, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x64, gbc.a());
        EXPECT(0xe0, gbc.b());
        EXPECT(0x4c, gbc.c());
        EXPECT(0x3f, gbc.d());
        EXPECT(0xc3, gbc.e());
        EXPECT(0xf0, gbc.h());
        EXPECT(0xda, gbc.l());
        EXPECT(0xd499, gbc.sp());
        EXPECT(0x1b10, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 0354
        gbc.setState(0xacba, 0x2b90, 0x70a0, 0x2a54, 0xe5c2, 0xd3f2, 0x0, 0x1);
        gbc.writeMem(0xacba, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x70, gbc.a());
        EXPECT(0x2a, gbc.b());
        EXPECT(0x54, gbc.c());
        EXPECT(0xe5, gbc.d());
        EXPECT(0xc2, gbc.e());
        EXPECT(0xd3, gbc.h());
        EXPECT(0xf2, gbc.l());
        EXPECT(0x2b90, gbc.sp());
        EXPECT(0xacbc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xacba));
        EXPECT(0x95, gbc.readMem(0xacbb));
        // CB 95 0355
        gbc.setState(0xe700, 0x9aba, 0x9830, 0x513f, 0x650d, 0x4bb6, 0x0, 0x1);
        gbc.writeMem(0xe700, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x98, gbc.a());
        EXPECT(0x51, gbc.b());
        EXPECT(0x3f, gbc.c());
        EXPECT(0x65, gbc.d());
        EXPECT(0xd, gbc.e());
        EXPECT(0x4b, gbc.h());
        EXPECT(0xb2, gbc.l());
        EXPECT(0x9aba, gbc.sp());
        EXPECT(0xe702, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe700));
        EXPECT(0x95, gbc.readMem(0xe701));
        // CB 95 0356
        gbc.setState(0x3571, 0xd9a5, 0x3560, 0xa63b, 0x13e0, 0x6073, 0x0, 0x0);
        gbc.writeMem(0x3571, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x35, gbc.a());
        EXPECT(0xa6, gbc.b());
        EXPECT(0x3b, gbc.c());
        EXPECT(0x13, gbc.d());
        EXPECT(0xe0, gbc.e());
        EXPECT(0x60, gbc.h());
        EXPECT(0x73, gbc.l());
        EXPECT(0xd9a5, gbc.sp());
        EXPECT(0x3573, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 0357
        gbc.setState(0x40e3, 0xca2f, 0x35e0, 0x8d24, 0x3022, 0x31e8, 0x1, 0x0);
        gbc.writeMem(0x40e3, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x35, gbc.a());
        EXPECT(0x8d, gbc.b());
        EXPECT(0x24, gbc.c());
        EXPECT(0x30, gbc.d());
        EXPECT(0x22, gbc.e());
        EXPECT(0x31, gbc.h());
        EXPECT(0xe8, gbc.l());
        EXPECT(0xca2f, gbc.sp());
        EXPECT(0x40e5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 0358
        gbc.setState(0x1d88, 0xf6bd, 0x47d0, 0xfd2c, 0x9ed6, 0x6a4c, 0x1, 0x1);
        gbc.writeMem(0x1d88, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x47, gbc.a());
        EXPECT(0xfd, gbc.b());
        EXPECT(0x2c, gbc.c());
        EXPECT(0x9e, gbc.d());
        EXPECT(0xd6, gbc.e());
        EXPECT(0x6a, gbc.h());
        EXPECT(0x48, gbc.l());
        EXPECT(0xf6bd, gbc.sp());
        EXPECT(0x1d8a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 035A
        gbc.setState(0xe31b, 0xc56b, 0x1120, 0xfab9, 0x7160, 0x8e0d, 0x0, 0x0);
        gbc.writeMem(0xe31b, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x11, gbc.a());
        EXPECT(0xfa, gbc.b());
        EXPECT(0xb9, gbc.c());
        EXPECT(0x71, gbc.d());
        EXPECT(0x60, gbc.e());
        EXPECT(0x8e, gbc.h());
        EXPECT(0x9, gbc.l());
        EXPECT(0xc56b, gbc.sp());
        EXPECT(0xe31d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe31b));
        EXPECT(0x95, gbc.readMem(0xe31c));
        // CB 95 035B
        gbc.setState(0x6bcc, 0xb422, 0xd430, 0x80dd, 0xbef6, 0x5f13, 0x0, 0x1);
        gbc.writeMem(0x6bcc, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xd4, gbc.a());
        EXPECT(0x80, gbc.b());
        EXPECT(0xdd, gbc.c());
        EXPECT(0xbe, gbc.d());
        EXPECT(0xf6, gbc.e());
        EXPECT(0x5f, gbc.h());
        EXPECT(0x13, gbc.l());
        EXPECT(0xb422, gbc.sp());
        EXPECT(0x6bce, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 035C
        gbc.setState(0xa90d, 0x6202, 0xdb80, 0xf618, 0x7c22, 0xca87, 0x1, 0x0);
        gbc.writeMem(0xa90d, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xdb, gbc.a());
        EXPECT(0xf6, gbc.b());
        EXPECT(0x18, gbc.c());
        EXPECT(0x7c, gbc.d());
        EXPECT(0x22, gbc.e());
        EXPECT(0xca, gbc.h());
        EXPECT(0x83, gbc.l());
        EXPECT(0x6202, gbc.sp());
        EXPECT(0xa90f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa90d));
        EXPECT(0x95, gbc.readMem(0xa90e));
        // CB 95 035D
        gbc.setState(0xa0e5, 0x43da, 0xaaf0, 0x295e, 0xff8f, 0xa830, 0x1, 0x0);
        gbc.writeMem(0xa0e5, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xaa, gbc.a());
        EXPECT(0x29, gbc.b());
        EXPECT(0x5e, gbc.c());
        EXPECT(0xff, gbc.d());
        EXPECT(0x8f, gbc.e());
        EXPECT(0xa8, gbc.h());
        EXPECT(0x30, gbc.l());
        EXPECT(0x43da, gbc.sp());
        EXPECT(0xa0e7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa0e5));
        EXPECT(0x95, gbc.readMem(0xa0e6));
        // CB 95 035E
        gbc.setState(0xaab1, 0x3e83, 0x9390, 0x8df1, 0xdd7f, 0xfed2, 0x1, 0x0);
        gbc.writeMem(0xaab1, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x93, gbc.a());
        EXPECT(0x8d, gbc.b());
        EXPECT(0xf1, gbc.c());
        EXPECT(0xdd, gbc.d());
        EXPECT(0x7f, gbc.e());
        EXPECT(0xfe, gbc.h());
        EXPECT(0xd2, gbc.l());
        EXPECT(0x3e83, gbc.sp());
        EXPECT(0xaab3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaab1));
        EXPECT(0x95, gbc.readMem(0xaab2));
        // CB 95 035F
        gbc.setState(0x4858, 0x55de, 0x26b0, 0x7e1f, 0x3421, 0xb420, 0x1, 0x0);
        gbc.writeMem(0x4858, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x26, gbc.a());
        EXPECT(0x7e, gbc.b());
        EXPECT(0x1f, gbc.c());
        EXPECT(0x34, gbc.d());
        EXPECT(0x21, gbc.e());
        EXPECT(0xb4, gbc.h());
        EXPECT(0x20, gbc.l());
        EXPECT(0x55de, gbc.sp());
        EXPECT(0x485a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 0360
        gbc.setState(0xac05, 0x2b89, 0xb570, 0x495a, 0x1ac9, 0x2dc4, 0x0, 0x1);
        gbc.writeMem(0xac05, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xb5, gbc.a());
        EXPECT(0x49, gbc.b());
        EXPECT(0x5a, gbc.c());
        EXPECT(0x1a, gbc.d());
        EXPECT(0xc9, gbc.e());
        EXPECT(0x2d, gbc.h());
        EXPECT(0xc0, gbc.l());
        EXPECT(0x2b89, gbc.sp());
        EXPECT(0xac07, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xac05));
        EXPECT(0x95, gbc.readMem(0xac06));
        // CB 95 0361
        gbc.setState(0xe6d7, 0xb986, 0x7bd0, 0x1d9b, 0xd01e, 0x54fd, 0x0, 0x1);
        gbc.writeMem(0xe6d7, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x7b, gbc.a());
        EXPECT(0x1d, gbc.b());
        EXPECT(0x9b, gbc.c());
        EXPECT(0xd0, gbc.d());
        EXPECT(0x1e, gbc.e());
        EXPECT(0x54, gbc.h());
        EXPECT(0xf9, gbc.l());
        EXPECT(0xb986, gbc.sp());
        EXPECT(0xe6d9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe6d7));
        EXPECT(0x95, gbc.readMem(0xe6d8));
        // CB 95 0362
        gbc.setState(0x35b3, 0xc187, 0xe570, 0x3560, 0x2387, 0xfe9b, 0x1, 0x1);
        gbc.writeMem(0x35b3, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xe5, gbc.a());
        EXPECT(0x35, gbc.b());
        EXPECT(0x60, gbc.c());
        EXPECT(0x23, gbc.d());
        EXPECT(0x87, gbc.e());
        EXPECT(0xfe, gbc.h());
        EXPECT(0x9b, gbc.l());
        EXPECT(0xc187, gbc.sp());
        EXPECT(0x35b5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 0363
        gbc.setState(0xdb69, 0x3b16, 0xb9b0, 0x9b2f, 0xdfe6, 0x43e, 0x1, 0x1);
        gbc.writeMem(0xdb69, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xb9, gbc.a());
        EXPECT(0x9b, gbc.b());
        EXPECT(0x2f, gbc.c());
        EXPECT(0xdf, gbc.d());
        EXPECT(0xe6, gbc.e());
        EXPECT(0x4, gbc.h());
        EXPECT(0x3a, gbc.l());
        EXPECT(0x3b16, gbc.sp());
        EXPECT(0xdb6b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdb69));
        EXPECT(0x95, gbc.readMem(0xdb6a));
        // CB 95 0364
        gbc.setState(0x9a16, 0x5bda, 0x830, 0x8170, 0x7006, 0xa8a4, 0x0, 0x1);
        gbc.writeMem(0x9a16, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x8, gbc.a());
        EXPECT(0x81, gbc.b());
        EXPECT(0x70, gbc.c());
        EXPECT(0x70, gbc.d());
        EXPECT(0x6, gbc.e());
        EXPECT(0xa8, gbc.h());
        EXPECT(0xa0, gbc.l());
        EXPECT(0x5bda, gbc.sp());
        EXPECT(0x9a18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9a16));
        EXPECT(0x95, gbc.readMem(0x9a17));
        // CB 95 0365
        gbc.setState(0x6ed1, 0x8e86, 0x7430, 0x2c12, 0xb12f, 0xf20e, 0x1, 0x1);
        gbc.writeMem(0x6ed1, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x74, gbc.a());
        EXPECT(0x2c, gbc.b());
        EXPECT(0x12, gbc.c());
        EXPECT(0xb1, gbc.d());
        EXPECT(0x2f, gbc.e());
        EXPECT(0xf2, gbc.h());
        EXPECT(0xa, gbc.l());
        EXPECT(0x8e86, gbc.sp());
        EXPECT(0x6ed3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 0367
        gbc.setState(0x4b33, 0xdc50, 0xdad0, 0xc8dd, 0x1c58, 0xe918, 0x0, 0x0);
        gbc.writeMem(0x4b33, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xda, gbc.a());
        EXPECT(0xc8, gbc.b());
        EXPECT(0xdd, gbc.c());
        EXPECT(0x1c, gbc.d());
        EXPECT(0x58, gbc.e());
        EXPECT(0xe9, gbc.h());
        EXPECT(0x18, gbc.l());
        EXPECT(0xdc50, gbc.sp());
        EXPECT(0x4b35, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 0368
        gbc.setState(0x3145, 0x905a, 0x8a50, 0x364b, 0xe05b, 0x5342, 0x0, 0x0);
        gbc.writeMem(0x3145, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x8a, gbc.a());
        EXPECT(0x36, gbc.b());
        EXPECT(0x4b, gbc.c());
        EXPECT(0xe0, gbc.d());
        EXPECT(0x5b, gbc.e());
        EXPECT(0x53, gbc.h());
        EXPECT(0x42, gbc.l());
        EXPECT(0x905a, gbc.sp());
        EXPECT(0x3147, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 0369
        gbc.setState(0xeecb, 0xd9c6, 0x4730, 0xb85a, 0xd614, 0x28f, 0x0, 0x0);
        gbc.writeMem(0xeecb, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x47, gbc.a());
        EXPECT(0xb8, gbc.b());
        EXPECT(0x5a, gbc.c());
        EXPECT(0xd6, gbc.d());
        EXPECT(0x14, gbc.e());
        EXPECT(0x2, gbc.h());
        EXPECT(0x8b, gbc.l());
        EXPECT(0xd9c6, gbc.sp());
        EXPECT(0xeecd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xeecb));
        EXPECT(0x95, gbc.readMem(0xeecc));
        // CB 95 036A
        gbc.setState(0xc831, 0xedd3, 0x76e0, 0xedc3, 0xf5f7, 0xfb93, 0x0, 0x1);
        gbc.writeMem(0xc831, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x76, gbc.a());
        EXPECT(0xed, gbc.b());
        EXPECT(0xc3, gbc.c());
        EXPECT(0xf5, gbc.d());
        EXPECT(0xf7, gbc.e());
        EXPECT(0xfb, gbc.h());
        EXPECT(0x93, gbc.l());
        EXPECT(0xedd3, gbc.sp());
        EXPECT(0xc833, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc831));
        EXPECT(0x95, gbc.readMem(0xc832));
        // CB 95 036B
        gbc.setState(0xcff, 0x3a97, 0x56a0, 0xb7e7, 0xf1bd, 0x54bc, 0x0, 0x0);
        gbc.writeMem(0xcff, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x56, gbc.a());
        EXPECT(0xb7, gbc.b());
        EXPECT(0xe7, gbc.c());
        EXPECT(0xf1, gbc.d());
        EXPECT(0xbd, gbc.e());
        EXPECT(0x54, gbc.h());
        EXPECT(0xb8, gbc.l());
        EXPECT(0x3a97, gbc.sp());
        EXPECT(0xd01, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 036C
        gbc.setState(0xa4d8, 0xf851, 0xcd00, 0xa8ba, 0x3d37, 0xe9a5, 0x0, 0x0);
        gbc.writeMem(0xa4d8, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xcd, gbc.a());
        EXPECT(0xa8, gbc.b());
        EXPECT(0xba, gbc.c());
        EXPECT(0x3d, gbc.d());
        EXPECT(0x37, gbc.e());
        EXPECT(0xe9, gbc.h());
        EXPECT(0xa1, gbc.l());
        EXPECT(0xf851, gbc.sp());
        EXPECT(0xa4da, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa4d8));
        EXPECT(0x95, gbc.readMem(0xa4d9));
        // CB 95 036E
        gbc.setState(0x7503, 0x57d6, 0xa510, 0x81f9, 0x7c81, 0xe469, 0x0, 0x0);
        gbc.writeMem(0x7503, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xa5, gbc.a());
        EXPECT(0x81, gbc.b());
        EXPECT(0xf9, gbc.c());
        EXPECT(0x7c, gbc.d());
        EXPECT(0x81, gbc.e());
        EXPECT(0xe4, gbc.h());
        EXPECT(0x69, gbc.l());
        EXPECT(0x57d6, gbc.sp());
        EXPECT(0x7505, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 036F
        gbc.setState(0x6c58, 0x29dd, 0xfc20, 0xd006, 0x8996, 0xd986, 0x1, 0x1);
        gbc.writeMem(0x6c58, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xfc, gbc.a());
        EXPECT(0xd0, gbc.b());
        EXPECT(0x6, gbc.c());
        EXPECT(0x89, gbc.d());
        EXPECT(0x96, gbc.e());
        EXPECT(0xd9, gbc.h());
        EXPECT(0x82, gbc.l());
        EXPECT(0x29dd, gbc.sp());
        EXPECT(0x6c5a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 0370
        gbc.setState(0x2e0a, 0xdebc, 0xafd0, 0x6430, 0xf6b2, 0xb23f, 0x1, 0x1);
        gbc.writeMem(0x2e0a, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xaf, gbc.a());
        EXPECT(0x64, gbc.b());
        EXPECT(0x30, gbc.c());
        EXPECT(0xf6, gbc.d());
        EXPECT(0xb2, gbc.e());
        EXPECT(0xb2, gbc.h());
        EXPECT(0x3b, gbc.l());
        EXPECT(0xdebc, gbc.sp());
        EXPECT(0x2e0c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 0371
        gbc.setState(0x1f57, 0x2e94, 0x81f0, 0x47b5, 0xf5b3, 0xe5a2, 0x0, 0x0);
        gbc.writeMem(0x1f57, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x81, gbc.a());
        EXPECT(0x47, gbc.b());
        EXPECT(0xb5, gbc.c());
        EXPECT(0xf5, gbc.d());
        EXPECT(0xb3, gbc.e());
        EXPECT(0xe5, gbc.h());
        EXPECT(0xa2, gbc.l());
        EXPECT(0x2e94, gbc.sp());
        EXPECT(0x1f59, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 0372
        gbc.setState(0xac26, 0xa7ee, 0x7410, 0xa51, 0xd7a2, 0xbe14, 0x0, 0x0);
        gbc.writeMem(0xac26, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x74, gbc.a());
        EXPECT(0xa, gbc.b());
        EXPECT(0x51, gbc.c());
        EXPECT(0xd7, gbc.d());
        EXPECT(0xa2, gbc.e());
        EXPECT(0xbe, gbc.h());
        EXPECT(0x10, gbc.l());
        EXPECT(0xa7ee, gbc.sp());
        EXPECT(0xac28, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xac26));
        EXPECT(0x95, gbc.readMem(0xac27));
        // CB 95 0373
        gbc.setState(0x9bbe, 0xe7f5, 0x5340, 0x4c4, 0xf5b6, 0x1d72, 0x1, 0x0);
        gbc.writeMem(0x9bbe, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x53, gbc.a());
        EXPECT(0x4, gbc.b());
        EXPECT(0xc4, gbc.c());
        EXPECT(0xf5, gbc.d());
        EXPECT(0xb6, gbc.e());
        EXPECT(0x1d, gbc.h());
        EXPECT(0x72, gbc.l());
        EXPECT(0xe7f5, gbc.sp());
        EXPECT(0x9bc0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9bbe));
        EXPECT(0x95, gbc.readMem(0x9bbf));
        // CB 95 0374
        gbc.setState(0x7410, 0x3d15, 0xd890, 0xe03b, 0x1df7, 0x9b84, 0x1, 0x0);
        gbc.writeMem(0x7410, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xd8, gbc.a());
        EXPECT(0xe0, gbc.b());
        EXPECT(0x3b, gbc.c());
        EXPECT(0x1d, gbc.d());
        EXPECT(0xf7, gbc.e());
        EXPECT(0x9b, gbc.h());
        EXPECT(0x80, gbc.l());
        EXPECT(0x3d15, gbc.sp());
        EXPECT(0x7412, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 0375
        gbc.setState(0xd3fa, 0x6273, 0xd310, 0x22ec, 0xf287, 0x7eea, 0x0, 0x1);
        gbc.writeMem(0xd3fa, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xd3, gbc.a());
        EXPECT(0x22, gbc.b());
        EXPECT(0xec, gbc.c());
        EXPECT(0xf2, gbc.d());
        EXPECT(0x87, gbc.e());
        EXPECT(0x7e, gbc.h());
        EXPECT(0xea, gbc.l());
        EXPECT(0x6273, gbc.sp());
        EXPECT(0xd3fc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd3fa));
        EXPECT(0x95, gbc.readMem(0xd3fb));
        // CB 95 0376
        gbc.setState(0x55, 0x81be, 0x9070, 0x2350, 0x9747, 0xa8f, 0x1, 0x0);
        gbc.writeMem(0x55, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x90, gbc.a());
        EXPECT(0x23, gbc.b());
        EXPECT(0x50, gbc.c());
        EXPECT(0x97, gbc.d());
        EXPECT(0x47, gbc.e());
        EXPECT(0xa, gbc.h());
        EXPECT(0x8b, gbc.l());
        EXPECT(0x81be, gbc.sp());
        EXPECT(0x57, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 0377
        gbc.setState(0x20b1, 0x6b95, 0x3fd0, 0x7073, 0x3662, 0x7f45, 0x1, 0x0);
        gbc.writeMem(0x20b1, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x3f, gbc.a());
        EXPECT(0x70, gbc.b());
        EXPECT(0x73, gbc.c());
        EXPECT(0x36, gbc.d());
        EXPECT(0x62, gbc.e());
        EXPECT(0x7f, gbc.h());
        EXPECT(0x41, gbc.l());
        EXPECT(0x6b95, gbc.sp());
        EXPECT(0x20b3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 0378
        gbc.setState(0x87db, 0xd849, 0x5d00, 0x7311, 0x4d85, 0xfe8e, 0x1, 0x1);
        gbc.writeMem(0x87db, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x5d, gbc.a());
        EXPECT(0x73, gbc.b());
        EXPECT(0x11, gbc.c());
        EXPECT(0x4d, gbc.d());
        EXPECT(0x85, gbc.e());
        EXPECT(0xfe, gbc.h());
        EXPECT(0x8a, gbc.l());
        EXPECT(0xd849, gbc.sp());
        EXPECT(0x87dd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x87db));
        EXPECT(0x95, gbc.readMem(0x87dc));
        // CB 95 0379
        gbc.setState(0x7ec8, 0x1513, 0x29a0, 0x2051, 0x42c3, 0x502a, 0x0, 0x0);
        gbc.writeMem(0x7ec8, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x29, gbc.a());
        EXPECT(0x20, gbc.b());
        EXPECT(0x51, gbc.c());
        EXPECT(0x42, gbc.d());
        EXPECT(0xc3, gbc.e());
        EXPECT(0x50, gbc.h());
        EXPECT(0x2a, gbc.l());
        EXPECT(0x1513, gbc.sp());
        EXPECT(0x7eca, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 037A
        gbc.setState(0x6b6a, 0xe4f1, 0x9cc0, 0x310c, 0x54ad, 0x4930, 0x1, 0x0);
        gbc.writeMem(0x6b6a, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x9c, gbc.a());
        EXPECT(0x31, gbc.b());
        EXPECT(0xc, gbc.c());
        EXPECT(0x54, gbc.d());
        EXPECT(0xad, gbc.e());
        EXPECT(0x49, gbc.h());
        EXPECT(0x30, gbc.l());
        EXPECT(0xe4f1, gbc.sp());
        EXPECT(0x6b6c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 037B
        gbc.setState(0x1f66, 0xa8b8, 0x4250, 0x13cf, 0xf705, 0x779d, 0x0, 0x1);
        gbc.writeMem(0x1f66, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x42, gbc.a());
        EXPECT(0x13, gbc.b());
        EXPECT(0xcf, gbc.c());
        EXPECT(0xf7, gbc.d());
        EXPECT(0x5, gbc.e());
        EXPECT(0x77, gbc.h());
        EXPECT(0x99, gbc.l());
        EXPECT(0xa8b8, gbc.sp());
        EXPECT(0x1f68, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 037C
        gbc.setState(0x3e51, 0xd3e7, 0xe250, 0xba62, 0x653c, 0xfaa7, 0x1, 0x1);
        gbc.writeMem(0x3e51, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xe2, gbc.a());
        EXPECT(0xba, gbc.b());
        EXPECT(0x62, gbc.c());
        EXPECT(0x65, gbc.d());
        EXPECT(0x3c, gbc.e());
        EXPECT(0xfa, gbc.h());
        EXPECT(0xa3, gbc.l());
        EXPECT(0xd3e7, gbc.sp());
        EXPECT(0x3e53, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 037D
        gbc.setState(0x6b32, 0xd06a, 0xf230, 0x5b36, 0x4f57, 0xcc1c, 0x0, 0x0);
        gbc.writeMem(0x6b32, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xf2, gbc.a());
        EXPECT(0x5b, gbc.b());
        EXPECT(0x36, gbc.c());
        EXPECT(0x4f, gbc.d());
        EXPECT(0x57, gbc.e());
        EXPECT(0xcc, gbc.h());
        EXPECT(0x18, gbc.l());
        EXPECT(0xd06a, gbc.sp());
        EXPECT(0x6b34, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 037E
        gbc.setState(0x9866, 0x9270, 0x1910, 0xa933, 0xc8bc, 0x7b8a, 0x0, 0x0);
        gbc.writeMem(0x9866, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x19, gbc.a());
        EXPECT(0xa9, gbc.b());
        EXPECT(0x33, gbc.c());
        EXPECT(0xc8, gbc.d());
        EXPECT(0xbc, gbc.e());
        EXPECT(0x7b, gbc.h());
        EXPECT(0x8a, gbc.l());
        EXPECT(0x9270, gbc.sp());
        EXPECT(0x9868, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9866));
        EXPECT(0x95, gbc.readMem(0x9867));
        // CB 95 037F
        gbc.setState(0x40b2, 0x10cb, 0x41c0, 0xedce, 0xc607, 0xdc1f, 0x1, 0x1);
        gbc.writeMem(0x40b2, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x41, gbc.a());
        EXPECT(0xed, gbc.b());
        EXPECT(0xce, gbc.c());
        EXPECT(0xc6, gbc.d());
        EXPECT(0x7, gbc.e());
        EXPECT(0xdc, gbc.h());
        EXPECT(0x1b, gbc.l());
        EXPECT(0x10cb, gbc.sp());
        EXPECT(0x40b4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 0380
        gbc.setState(0x3734, 0x6489, 0x4570, 0x8477, 0x2df7, 0x8577, 0x0, 0x1);
        gbc.writeMem(0x3734, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x45, gbc.a());
        EXPECT(0x84, gbc.b());
        EXPECT(0x77, gbc.c());
        EXPECT(0x2d, gbc.d());
        EXPECT(0xf7, gbc.e());
        EXPECT(0x85, gbc.h());
        EXPECT(0x73, gbc.l());
        EXPECT(0x6489, gbc.sp());
        EXPECT(0x3736, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 0381
        gbc.setState(0x68ce, 0xafdd, 0xca30, 0x35bb, 0x9f0f, 0x1141, 0x1, 0x1);
        gbc.writeMem(0x68ce, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xca, gbc.a());
        EXPECT(0x35, gbc.b());
        EXPECT(0xbb, gbc.c());
        EXPECT(0x9f, gbc.d());
        EXPECT(0xf, gbc.e());
        EXPECT(0x11, gbc.h());
        EXPECT(0x41, gbc.l());
        EXPECT(0xafdd, gbc.sp());
        EXPECT(0x68d0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 0382
        gbc.setState(0xdeb6, 0x3c19, 0xef90, 0x8fe2, 0x405e, 0x7f69, 0x0, 0x0);
        gbc.writeMem(0xdeb6, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xef, gbc.a());
        EXPECT(0x8f, gbc.b());
        EXPECT(0xe2, gbc.c());
        EXPECT(0x40, gbc.d());
        EXPECT(0x5e, gbc.e());
        EXPECT(0x7f, gbc.h());
        EXPECT(0x69, gbc.l());
        EXPECT(0x3c19, gbc.sp());
        EXPECT(0xdeb8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdeb6));
        EXPECT(0x95, gbc.readMem(0xdeb7));
        // CB 95 0383
        gbc.setState(0x20fb, 0x4c11, 0x7380, 0x1c68, 0xd2f, 0xd044, 0x1, 0x1);
        gbc.writeMem(0x20fb, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x73, gbc.a());
        EXPECT(0x1c, gbc.b());
        EXPECT(0x68, gbc.c());
        EXPECT(0xd, gbc.d());
        EXPECT(0x2f, gbc.e());
        EXPECT(0xd0, gbc.h());
        EXPECT(0x40, gbc.l());
        EXPECT(0x4c11, gbc.sp());
        EXPECT(0x20fd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 0384
        gbc.setState(0x7dc9, 0x4474, 0xd690, 0xaeca, 0xfd4, 0xb97e, 0x1, 0x0);
        gbc.writeMem(0x7dc9, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xd6, gbc.a());
        EXPECT(0xae, gbc.b());
        EXPECT(0xca, gbc.c());
        EXPECT(0xf, gbc.d());
        EXPECT(0xd4, gbc.e());
        EXPECT(0xb9, gbc.h());
        EXPECT(0x7a, gbc.l());
        EXPECT(0x4474, gbc.sp());
        EXPECT(0x7dcb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 0385
        gbc.setState(0xe9d8, 0xbe2e, 0x6a30, 0xc1f1, 0xa5b7, 0x50b4, 0x1, 0x1);
        gbc.writeMem(0xe9d8, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x6a, gbc.a());
        EXPECT(0xc1, gbc.b());
        EXPECT(0xf1, gbc.c());
        EXPECT(0xa5, gbc.d());
        EXPECT(0xb7, gbc.e());
        EXPECT(0x50, gbc.h());
        EXPECT(0xb0, gbc.l());
        EXPECT(0xbe2e, gbc.sp());
        EXPECT(0xe9da, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe9d8));
        EXPECT(0x95, gbc.readMem(0xe9d9));
        // CB 95 0386
        gbc.setState(0xb8bb, 0x875e, 0xbb30, 0x135b, 0xb4f2, 0x1e87, 0x1, 0x1);
        gbc.writeMem(0xb8bb, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xbb, gbc.a());
        EXPECT(0x13, gbc.b());
        EXPECT(0x5b, gbc.c());
        EXPECT(0xb4, gbc.d());
        EXPECT(0xf2, gbc.e());
        EXPECT(0x1e, gbc.h());
        EXPECT(0x83, gbc.l());
        EXPECT(0x875e, gbc.sp());
        EXPECT(0xb8bd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb8bb));
        EXPECT(0x95, gbc.readMem(0xb8bc));
        // CB 95 0387
        gbc.setState(0x88d6, 0x553e, 0x62e0, 0xcd54, 0xbf0f, 0x6ad, 0x1, 0x0);
        gbc.writeMem(0x88d6, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x62, gbc.a());
        EXPECT(0xcd, gbc.b());
        EXPECT(0x54, gbc.c());
        EXPECT(0xbf, gbc.d());
        EXPECT(0xf, gbc.e());
        EXPECT(0x6, gbc.h());
        EXPECT(0xa9, gbc.l());
        EXPECT(0x553e, gbc.sp());
        EXPECT(0x88d8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x88d6));
        EXPECT(0x95, gbc.readMem(0x88d7));
        // CB 95 0388
        gbc.setState(0x2469, 0xf1d9, 0x1870, 0xd02, 0x8dbb, 0x9429, 0x1, 0x1);
        gbc.writeMem(0x2469, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x18, gbc.a());
        EXPECT(0xd, gbc.b());
        EXPECT(0x2, gbc.c());
        EXPECT(0x8d, gbc.d());
        EXPECT(0xbb, gbc.e());
        EXPECT(0x94, gbc.h());
        EXPECT(0x29, gbc.l());
        EXPECT(0xf1d9, gbc.sp());
        EXPECT(0x246b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 0389
        gbc.setState(0xa983, 0x478b, 0xb7f0, 0x7f05, 0x41f0, 0x1e71, 0x1, 0x1);
        gbc.writeMem(0xa983, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xb7, gbc.a());
        EXPECT(0x7f, gbc.b());
        EXPECT(0x5, gbc.c());
        EXPECT(0x41, gbc.d());
        EXPECT(0xf0, gbc.e());
        EXPECT(0x1e, gbc.h());
        EXPECT(0x71, gbc.l());
        EXPECT(0x478b, gbc.sp());
        EXPECT(0xa985, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa983));
        EXPECT(0x95, gbc.readMem(0xa984));
        // CB 95 038A
        gbc.setState(0x8bfb, 0x4dc1, 0x33f0, 0x9887, 0xfc5e, 0xad0d, 0x1, 0x1);
        gbc.writeMem(0x8bfb, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x33, gbc.a());
        EXPECT(0x98, gbc.b());
        EXPECT(0x87, gbc.c());
        EXPECT(0xfc, gbc.d());
        EXPECT(0x5e, gbc.e());
        EXPECT(0xad, gbc.h());
        EXPECT(0x9, gbc.l());
        EXPECT(0x4dc1, gbc.sp());
        EXPECT(0x8bfd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8bfb));
        EXPECT(0x95, gbc.readMem(0x8bfc));
        // CB 95 038B
        gbc.setState(0x9965, 0x5431, 0x8420, 0xe47d, 0x33d2, 0xf904, 0x0, 0x0);
        gbc.writeMem(0x9965, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x84, gbc.a());
        EXPECT(0xe4, gbc.b());
        EXPECT(0x7d, gbc.c());
        EXPECT(0x33, gbc.d());
        EXPECT(0xd2, gbc.e());
        EXPECT(0xf9, gbc.h());
        EXPECT(0x0, gbc.l());
        EXPECT(0x5431, gbc.sp());
        EXPECT(0x9967, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9965));
        EXPECT(0x95, gbc.readMem(0x9966));
        // CB 95 038C
        gbc.setState(0x30c8, 0x1de1, 0xb8b0, 0xdf0b, 0x8e3f, 0x376d, 0x0, 0x1);
        gbc.writeMem(0x30c8, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xb8, gbc.a());
        EXPECT(0xdf, gbc.b());
        EXPECT(0xb, gbc.c());
        EXPECT(0x8e, gbc.d());
        EXPECT(0x3f, gbc.e());
        EXPECT(0x37, gbc.h());
        EXPECT(0x69, gbc.l());
        EXPECT(0x1de1, gbc.sp());
        EXPECT(0x30ca, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 038D
        gbc.setState(0x6a6f, 0x9d27, 0xe140, 0xbcac, 0xddbd, 0x40cf, 0x0, 0x1);
        gbc.writeMem(0x6a6f, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xe1, gbc.a());
        EXPECT(0xbc, gbc.b());
        EXPECT(0xac, gbc.c());
        EXPECT(0xdd, gbc.d());
        EXPECT(0xbd, gbc.e());
        EXPECT(0x40, gbc.h());
        EXPECT(0xcb, gbc.l());
        EXPECT(0x9d27, gbc.sp());
        EXPECT(0x6a71, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 038E
        gbc.setState(0x11e5, 0x6877, 0x2cb0, 0xdc18, 0x61ff, 0x48c3, 0x0, 0x1);
        gbc.writeMem(0x11e5, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x2c, gbc.a());
        EXPECT(0xdc, gbc.b());
        EXPECT(0x18, gbc.c());
        EXPECT(0x61, gbc.d());
        EXPECT(0xff, gbc.e());
        EXPECT(0x48, gbc.h());
        EXPECT(0xc3, gbc.l());
        EXPECT(0x6877, gbc.sp());
        EXPECT(0x11e7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 038F
        gbc.setState(0xd007, 0x6bcf, 0x83d0, 0x8af9, 0xc4cb, 0xa54e, 0x0, 0x0);
        gbc.writeMem(0xd007, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x83, gbc.a());
        EXPECT(0x8a, gbc.b());
        EXPECT(0xf9, gbc.c());
        EXPECT(0xc4, gbc.d());
        EXPECT(0xcb, gbc.e());
        EXPECT(0xa5, gbc.h());
        EXPECT(0x4a, gbc.l());
        EXPECT(0x6bcf, gbc.sp());
        EXPECT(0xd009, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd007));
        EXPECT(0x95, gbc.readMem(0xd008));
        // CB 95 0390
        gbc.setState(0x8985, 0x874, 0xb7e0, 0x569e, 0x7fa0, 0x82a7, 0x0, 0x0);
        gbc.writeMem(0x8985, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xb7, gbc.a());
        EXPECT(0x56, gbc.b());
        EXPECT(0x9e, gbc.c());
        EXPECT(0x7f, gbc.d());
        EXPECT(0xa0, gbc.e());
        EXPECT(0x82, gbc.h());
        EXPECT(0xa3, gbc.l());
        EXPECT(0x874, gbc.sp());
        EXPECT(0x8987, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8985));
        EXPECT(0x95, gbc.readMem(0x8986));
        // CB 95 0391
        gbc.setState(0xa630, 0xc62b, 0xf980, 0xc3be, 0x92c2, 0xe3af, 0x1, 0x1);
        gbc.writeMem(0xa630, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xf9, gbc.a());
        EXPECT(0xc3, gbc.b());
        EXPECT(0xbe, gbc.c());
        EXPECT(0x92, gbc.d());
        EXPECT(0xc2, gbc.e());
        EXPECT(0xe3, gbc.h());
        EXPECT(0xab, gbc.l());
        EXPECT(0xc62b, gbc.sp());
        EXPECT(0xa632, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xa630));
        EXPECT(0x95, gbc.readMem(0xa631));
        // CB 95 0392
        gbc.setState(0x35c0, 0x2a75, 0xd160, 0xef63, 0x7d78, 0x77bc, 0x1, 0x0);
        gbc.writeMem(0x35c0, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xd1, gbc.a());
        EXPECT(0xef, gbc.b());
        EXPECT(0x63, gbc.c());
        EXPECT(0x7d, gbc.d());
        EXPECT(0x78, gbc.e());
        EXPECT(0x77, gbc.h());
        EXPECT(0xb8, gbc.l());
        EXPECT(0x2a75, gbc.sp());
        EXPECT(0x35c2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 0393
        gbc.setState(0x3d74, 0x3efd, 0xaa90, 0x5e19, 0xeff4, 0x8440, 0x1, 0x0);
        gbc.writeMem(0x3d74, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xaa, gbc.a());
        EXPECT(0x5e, gbc.b());
        EXPECT(0x19, gbc.c());
        EXPECT(0xef, gbc.d());
        EXPECT(0xf4, gbc.e());
        EXPECT(0x84, gbc.h());
        EXPECT(0x40, gbc.l());
        EXPECT(0x3efd, gbc.sp());
        EXPECT(0x3d76, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 0394
        gbc.setState(0xb930, 0xf82a, 0xbaa0, 0xdfc9, 0x3d3f, 0x121d, 0x1, 0x1);
        gbc.writeMem(0xb930, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xba, gbc.a());
        EXPECT(0xdf, gbc.b());
        EXPECT(0xc9, gbc.c());
        EXPECT(0x3d, gbc.d());
        EXPECT(0x3f, gbc.e());
        EXPECT(0x12, gbc.h());
        EXPECT(0x19, gbc.l());
        EXPECT(0xf82a, gbc.sp());
        EXPECT(0xb932, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb930));
        EXPECT(0x95, gbc.readMem(0xb931));
        // CB 95 0395
        gbc.setState(0xb69a, 0xc9e7, 0xf460, 0x48ad, 0x8462, 0x3755, 0x0, 0x1);
        gbc.writeMem(0xb69a, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xf4, gbc.a());
        EXPECT(0x48, gbc.b());
        EXPECT(0xad, gbc.c());
        EXPECT(0x84, gbc.d());
        EXPECT(0x62, gbc.e());
        EXPECT(0x37, gbc.h());
        EXPECT(0x51, gbc.l());
        EXPECT(0xc9e7, gbc.sp());
        EXPECT(0xb69c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb69a));
        EXPECT(0x95, gbc.readMem(0xb69b));
        // CB 95 0396
        gbc.setState(0x22c6, 0xceb, 0x90b0, 0xfdc1, 0x6e07, 0x8926, 0x0, 0x0);
        gbc.writeMem(0x22c6, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x90, gbc.a());
        EXPECT(0xfd, gbc.b());
        EXPECT(0xc1, gbc.c());
        EXPECT(0x6e, gbc.d());
        EXPECT(0x7, gbc.e());
        EXPECT(0x89, gbc.h());
        EXPECT(0x22, gbc.l());
        EXPECT(0xceb, gbc.sp());
        EXPECT(0x22c8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 0397
        gbc.setState(0x49f0, 0x751b, 0xecf0, 0xce34, 0x1e83, 0x3cf1, 0x0, 0x1);
        gbc.writeMem(0x49f0, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xec, gbc.a());
        EXPECT(0xce, gbc.b());
        EXPECT(0x34, gbc.c());
        EXPECT(0x1e, gbc.d());
        EXPECT(0x83, gbc.e());
        EXPECT(0x3c, gbc.h());
        EXPECT(0xf1, gbc.l());
        EXPECT(0x751b, gbc.sp());
        EXPECT(0x49f2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 0398
        gbc.setState(0xd7f9, 0x16aa, 0xe850, 0x973, 0xfa7d, 0x7f1e, 0x0, 0x0);
        gbc.writeMem(0xd7f9, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xe8, gbc.a());
        EXPECT(0x9, gbc.b());
        EXPECT(0x73, gbc.c());
        EXPECT(0xfa, gbc.d());
        EXPECT(0x7d, gbc.e());
        EXPECT(0x7f, gbc.h());
        EXPECT(0x1a, gbc.l());
        EXPECT(0x16aa, gbc.sp());
        EXPECT(0xd7fb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd7f9));
        EXPECT(0x95, gbc.readMem(0xd7fa));
        // CB 95 0399
        gbc.setState(0xd7da, 0xe41a, 0x3880, 0xac57, 0xb3d9, 0x6998, 0x0, 0x0);
        gbc.writeMem(0xd7da, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x38, gbc.a());
        EXPECT(0xac, gbc.b());
        EXPECT(0x57, gbc.c());
        EXPECT(0xb3, gbc.d());
        EXPECT(0xd9, gbc.e());
        EXPECT(0x69, gbc.h());
        EXPECT(0x98, gbc.l());
        EXPECT(0xe41a, gbc.sp());
        EXPECT(0xd7dc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd7da));
        EXPECT(0x95, gbc.readMem(0xd7db));
        // CB 95 039A
        gbc.setState(0x1fe0, 0x6521, 0x8050, 0x1344, 0x7b86, 0x9df7, 0x1, 0x1);
        gbc.writeMem(0x1fe0, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x80, gbc.a());
        EXPECT(0x13, gbc.b());
        EXPECT(0x44, gbc.c());
        EXPECT(0x7b, gbc.d());
        EXPECT(0x86, gbc.e());
        EXPECT(0x9d, gbc.h());
        EXPECT(0xf3, gbc.l());
        EXPECT(0x6521, gbc.sp());
        EXPECT(0x1fe2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 039B
        gbc.setState(0x28bf, 0x47fd, 0x5220, 0xecb0, 0x777a, 0x1a8c, 0x1, 0x0);
        gbc.writeMem(0x28bf, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x52, gbc.a());
        EXPECT(0xec, gbc.b());
        EXPECT(0xb0, gbc.c());
        EXPECT(0x77, gbc.d());
        EXPECT(0x7a, gbc.e());
        EXPECT(0x1a, gbc.h());
        EXPECT(0x88, gbc.l());
        EXPECT(0x47fd, gbc.sp());
        EXPECT(0x28c1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 039C
        gbc.setState(0x4f00, 0x9213, 0x1dc0, 0x4adb, 0x708f, 0xd1ad, 0x1, 0x1);
        gbc.writeMem(0x4f00, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x1d, gbc.a());
        EXPECT(0x4a, gbc.b());
        EXPECT(0xdb, gbc.c());
        EXPECT(0x70, gbc.d());
        EXPECT(0x8f, gbc.e());
        EXPECT(0xd1, gbc.h());
        EXPECT(0xa9, gbc.l());
        EXPECT(0x9213, gbc.sp());
        EXPECT(0x4f02, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 039D
        gbc.setState(0xf23, 0xaf1b, 0x6d40, 0xa097, 0x87c2, 0xf944, 0x1, 0x0);
        gbc.writeMem(0xf23, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x6d, gbc.a());
        EXPECT(0xa0, gbc.b());
        EXPECT(0x97, gbc.c());
        EXPECT(0x87, gbc.d());
        EXPECT(0xc2, gbc.e());
        EXPECT(0xf9, gbc.h());
        EXPECT(0x40, gbc.l());
        EXPECT(0xaf1b, gbc.sp());
        EXPECT(0xf25, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 039E
        gbc.setState(0x5893, 0x67e4, 0xfdf0, 0xc6e9, 0xa594, 0x40cb, 0x0, 0x1);
        gbc.writeMem(0x5893, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xfd, gbc.a());
        EXPECT(0xc6, gbc.b());
        EXPECT(0xe9, gbc.c());
        EXPECT(0xa5, gbc.d());
        EXPECT(0x94, gbc.e());
        EXPECT(0x40, gbc.h());
        EXPECT(0xcb, gbc.l());
        EXPECT(0x67e4, gbc.sp());
        EXPECT(0x5895, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 039F
        gbc.setState(0x6438, 0xe7d, 0x8e20, 0xb8a, 0x895a, 0x19d2, 0x0, 0x1);
        gbc.writeMem(0x6438, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x8e, gbc.a());
        EXPECT(0xb, gbc.b());
        EXPECT(0x8a, gbc.c());
        EXPECT(0x89, gbc.d());
        EXPECT(0x5a, gbc.e());
        EXPECT(0x19, gbc.h());
        EXPECT(0xd2, gbc.l());
        EXPECT(0xe7d, gbc.sp());
        EXPECT(0x643a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 03A0
        gbc.setState(0x5328, 0x59e2, 0xa130, 0x7dda, 0xaf11, 0x365b, 0x1, 0x1);
        gbc.writeMem(0x5328, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xa1, gbc.a());
        EXPECT(0x7d, gbc.b());
        EXPECT(0xda, gbc.c());
        EXPECT(0xaf, gbc.d());
        EXPECT(0x11, gbc.e());
        EXPECT(0x36, gbc.h());
        EXPECT(0x5b, gbc.l());
        EXPECT(0x59e2, gbc.sp());
        EXPECT(0x532a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 03A1
        gbc.setState(0xe5c6, 0x34db, 0x8290, 0x8b0, 0xea75, 0xde79, 0x0, 0x1);
        gbc.writeMem(0xe5c6, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x82, gbc.a());
        EXPECT(0x8, gbc.b());
        EXPECT(0xb0, gbc.c());
        EXPECT(0xea, gbc.d());
        EXPECT(0x75, gbc.e());
        EXPECT(0xde, gbc.h());
        EXPECT(0x79, gbc.l());
        EXPECT(0x34db, gbc.sp());
        EXPECT(0xe5c8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe5c6));
        EXPECT(0x95, gbc.readMem(0xe5c7));
        // CB 95 03A2
        gbc.setState(0xeccd, 0x21df, 0x5b30, 0x306c, 0xd6bc, 0xf4f3, 0x0, 0x0);
        gbc.writeMem(0xeccd, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x5b, gbc.a());
        EXPECT(0x30, gbc.b());
        EXPECT(0x6c, gbc.c());
        EXPECT(0xd6, gbc.d());
        EXPECT(0xbc, gbc.e());
        EXPECT(0xf4, gbc.h());
        EXPECT(0xf3, gbc.l());
        EXPECT(0x21df, gbc.sp());
        EXPECT(0xeccf, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xeccd));
        EXPECT(0x95, gbc.readMem(0xecce));
        // CB 95 03A3
        gbc.setState(0x336e, 0x15ee, 0x2420, 0x3ea4, 0x6e45, 0x342, 0x1, 0x1);
        gbc.writeMem(0x336e, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x24, gbc.a());
        EXPECT(0x3e, gbc.b());
        EXPECT(0xa4, gbc.c());
        EXPECT(0x6e, gbc.d());
        EXPECT(0x45, gbc.e());
        EXPECT(0x3, gbc.h());
        EXPECT(0x42, gbc.l());
        EXPECT(0x15ee, gbc.sp());
        EXPECT(0x3370, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 03A4
        gbc.setState(0x3eb6, 0xb48a, 0x79e0, 0x1aca, 0x618a, 0xa282, 0x1, 0x0);
        gbc.writeMem(0x3eb6, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x79, gbc.a());
        EXPECT(0x1a, gbc.b());
        EXPECT(0xca, gbc.c());
        EXPECT(0x61, gbc.d());
        EXPECT(0x8a, gbc.e());
        EXPECT(0xa2, gbc.h());
        EXPECT(0x82, gbc.l());
        EXPECT(0xb48a, gbc.sp());
        EXPECT(0x3eb8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 03A5
        gbc.setState(0x770b, 0x26e5, 0xe250, 0xc11c, 0x68c2, 0x2dd1, 0x0, 0x0);
        gbc.writeMem(0x770b, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xe2, gbc.a());
        EXPECT(0xc1, gbc.b());
        EXPECT(0x1c, gbc.c());
        EXPECT(0x68, gbc.d());
        EXPECT(0xc2, gbc.e());
        EXPECT(0x2d, gbc.h());
        EXPECT(0xd1, gbc.l());
        EXPECT(0x26e5, gbc.sp());
        EXPECT(0x770d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 03A6
        gbc.setState(0x1129, 0xa2e4, 0x1ca0, 0xc0f2, 0xb310, 0x5382, 0x1, 0x1);
        gbc.writeMem(0x1129, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x1c, gbc.a());
        EXPECT(0xc0, gbc.b());
        EXPECT(0xf2, gbc.c());
        EXPECT(0xb3, gbc.d());
        EXPECT(0x10, gbc.e());
        EXPECT(0x53, gbc.h());
        EXPECT(0x82, gbc.l());
        EXPECT(0xa2e4, gbc.sp());
        EXPECT(0x112b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 03A8
        gbc.setState(0xaec9, 0x3ffd, 0xf5f0, 0x6a5, 0xc779, 0xe79d, 0x1, 0x0);
        gbc.writeMem(0xaec9, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xf5, gbc.a());
        EXPECT(0x6, gbc.b());
        EXPECT(0xa5, gbc.c());
        EXPECT(0xc7, gbc.d());
        EXPECT(0x79, gbc.e());
        EXPECT(0xe7, gbc.h());
        EXPECT(0x99, gbc.l());
        EXPECT(0x3ffd, gbc.sp());
        EXPECT(0xaecb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xaec9));
        EXPECT(0x95, gbc.readMem(0xaeca));
        // CB 95 03A9
        gbc.setState(0xb671, 0x1a7d, 0xd0c0, 0x6281, 0x8c6d, 0xa9a4, 0x0, 0x1);
        gbc.writeMem(0xb671, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xd0, gbc.a());
        EXPECT(0x62, gbc.b());
        EXPECT(0x81, gbc.c());
        EXPECT(0x8c, gbc.d());
        EXPECT(0x6d, gbc.e());
        EXPECT(0xa9, gbc.h());
        EXPECT(0xa0, gbc.l());
        EXPECT(0x1a7d, gbc.sp());
        EXPECT(0xb673, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb671));
        EXPECT(0x95, gbc.readMem(0xb672));
        // CB 95 03AA
        gbc.setState(0xd4db, 0x346e, 0x14f0, 0xb95b, 0x2b6a, 0xf0d2, 0x0, 0x0);
        gbc.writeMem(0xd4db, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x14, gbc.a());
        EXPECT(0xb9, gbc.b());
        EXPECT(0x5b, gbc.c());
        EXPECT(0x2b, gbc.d());
        EXPECT(0x6a, gbc.e());
        EXPECT(0xf0, gbc.h());
        EXPECT(0xd2, gbc.l());
        EXPECT(0x346e, gbc.sp());
        EXPECT(0xd4dd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd4db));
        EXPECT(0x95, gbc.readMem(0xd4dc));
        // CB 95 03AB
        gbc.setState(0x63b, 0xa57e, 0xb9c0, 0xa5f8, 0x3b5f, 0x547a, 0x1, 0x1);
        gbc.writeMem(0x63b, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xb9, gbc.a());
        EXPECT(0xa5, gbc.b());
        EXPECT(0xf8, gbc.c());
        EXPECT(0x3b, gbc.d());
        EXPECT(0x5f, gbc.e());
        EXPECT(0x54, gbc.h());
        EXPECT(0x7a, gbc.l());
        EXPECT(0xa57e, gbc.sp());
        EXPECT(0x63d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 03AC
        gbc.setState(0xef18, 0x7245, 0xf0c0, 0x7130, 0xda9, 0x5e2c, 0x1, 0x1);
        gbc.writeMem(0xef18, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xf0, gbc.a());
        EXPECT(0x71, gbc.b());
        EXPECT(0x30, gbc.c());
        EXPECT(0xd, gbc.d());
        EXPECT(0xa9, gbc.e());
        EXPECT(0x5e, gbc.h());
        EXPECT(0x28, gbc.l());
        EXPECT(0x7245, gbc.sp());
        EXPECT(0xef1a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xef18));
        EXPECT(0x95, gbc.readMem(0xef19));
        // CB 95 03AD
        gbc.setState(0x5bf3, 0xe757, 0xf5c0, 0x72c2, 0xd277, 0xacf5, 0x0, 0x1);
        gbc.writeMem(0x5bf3, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xf5, gbc.a());
        EXPECT(0x72, gbc.b());
        EXPECT(0xc2, gbc.c());
        EXPECT(0xd2, gbc.d());
        EXPECT(0x77, gbc.e());
        EXPECT(0xac, gbc.h());
        EXPECT(0xf1, gbc.l());
        EXPECT(0xe757, gbc.sp());
        EXPECT(0x5bf5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 03AE
        gbc.setState(0xe88b, 0x9af7, 0xb730, 0x9010, 0x331c, 0x4ad7, 0x0, 0x1);
        gbc.writeMem(0xe88b, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xb7, gbc.a());
        EXPECT(0x90, gbc.b());
        EXPECT(0x10, gbc.c());
        EXPECT(0x33, gbc.d());
        EXPECT(0x1c, gbc.e());
        EXPECT(0x4a, gbc.h());
        EXPECT(0xd3, gbc.l());
        EXPECT(0x9af7, gbc.sp());
        EXPECT(0xe88d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe88b));
        EXPECT(0x95, gbc.readMem(0xe88c));
        // CB 95 03AF
        gbc.setState(0x926b, 0xd1e, 0x6a70, 0x6fcc, 0xdffc, 0xde2d, 0x1, 0x0);
        gbc.writeMem(0x926b, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x6a, gbc.a());
        EXPECT(0x6f, gbc.b());
        EXPECT(0xcc, gbc.c());
        EXPECT(0xdf, gbc.d());
        EXPECT(0xfc, gbc.e());
        EXPECT(0xde, gbc.h());
        EXPECT(0x29, gbc.l());
        EXPECT(0xd1e, gbc.sp());
        EXPECT(0x926d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x926b));
        EXPECT(0x95, gbc.readMem(0x926c));
        // CB 95 03B0
        gbc.setState(0xd69c, 0x1329, 0xe810, 0xedf7, 0x8c10, 0x1b66, 0x0, 0x0);
        gbc.writeMem(0xd69c, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xe8, gbc.a());
        EXPECT(0xed, gbc.b());
        EXPECT(0xf7, gbc.c());
        EXPECT(0x8c, gbc.d());
        EXPECT(0x10, gbc.e());
        EXPECT(0x1b, gbc.h());
        EXPECT(0x62, gbc.l());
        EXPECT(0x1329, gbc.sp());
        EXPECT(0xd69e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd69c));
        EXPECT(0x95, gbc.readMem(0xd69d));
        // CB 95 03B1
        gbc.setState(0xb907, 0xa9c, 0x9d40, 0x8d9a, 0x30ab, 0xf0bd, 0x1, 0x1);
        gbc.writeMem(0xb907, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x9d, gbc.a());
        EXPECT(0x8d, gbc.b());
        EXPECT(0x9a, gbc.c());
        EXPECT(0x30, gbc.d());
        EXPECT(0xab, gbc.e());
        EXPECT(0xf0, gbc.h());
        EXPECT(0xb9, gbc.l());
        EXPECT(0xa9c, gbc.sp());
        EXPECT(0xb909, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb907));
        EXPECT(0x95, gbc.readMem(0xb908));
        // CB 95 03B2
        gbc.setState(0x467b, 0x95f2, 0xbd00, 0xea6e, 0x7345, 0x4f02, 0x0, 0x1);
        gbc.writeMem(0x467b, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xbd, gbc.a());
        EXPECT(0xea, gbc.b());
        EXPECT(0x6e, gbc.c());
        EXPECT(0x73, gbc.d());
        EXPECT(0x45, gbc.e());
        EXPECT(0x4f, gbc.h());
        EXPECT(0x2, gbc.l());
        EXPECT(0x95f2, gbc.sp());
        EXPECT(0x467d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 03B3
        gbc.setState(0xd3c, 0xc44a, 0x6f50, 0xa015, 0x6a6b, 0x9bc0, 0x1, 0x0);
        gbc.writeMem(0xd3c, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x6f, gbc.a());
        EXPECT(0xa0, gbc.b());
        EXPECT(0x15, gbc.c());
        EXPECT(0x6a, gbc.d());
        EXPECT(0x6b, gbc.e());
        EXPECT(0x9b, gbc.h());
        EXPECT(0xc0, gbc.l());
        EXPECT(0xc44a, gbc.sp());
        EXPECT(0xd3e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 03B4
        gbc.setState(0xbe7e, 0x778d, 0xdcc0, 0xd0c8, 0xe0ba, 0xd37b, 0x0, 0x0);
        gbc.writeMem(0xbe7e, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xdc, gbc.a());
        EXPECT(0xd0, gbc.b());
        EXPECT(0xc8, gbc.c());
        EXPECT(0xe0, gbc.d());
        EXPECT(0xba, gbc.e());
        EXPECT(0xd3, gbc.h());
        EXPECT(0x7b, gbc.l());
        EXPECT(0x778d, gbc.sp());
        EXPECT(0xbe80, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbe7e));
        EXPECT(0x95, gbc.readMem(0xbe7f));
        // CB 95 03B5
        gbc.setState(0x2a84, 0x6d00, 0x7050, 0xf581, 0x622b, 0xa89e, 0x1, 0x0);
        gbc.writeMem(0x2a84, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x70, gbc.a());
        EXPECT(0xf5, gbc.b());
        EXPECT(0x81, gbc.c());
        EXPECT(0x62, gbc.d());
        EXPECT(0x2b, gbc.e());
        EXPECT(0xa8, gbc.h());
        EXPECT(0x9a, gbc.l());
        EXPECT(0x6d00, gbc.sp());
        EXPECT(0x2a86, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 03B6
        gbc.setState(0x6588, 0x2d01, 0xbd10, 0xb98a, 0x9efc, 0x15dc, 0x0, 0x0);
        gbc.writeMem(0x6588, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xbd, gbc.a());
        EXPECT(0xb9, gbc.b());
        EXPECT(0x8a, gbc.c());
        EXPECT(0x9e, gbc.d());
        EXPECT(0xfc, gbc.e());
        EXPECT(0x15, gbc.h());
        EXPECT(0xd8, gbc.l());
        EXPECT(0x2d01, gbc.sp());
        EXPECT(0x658a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 03B7
        gbc.setState(0xb011, 0x895e, 0x1860, 0xa947, 0x4403, 0x16bb, 0x1, 0x1);
        gbc.writeMem(0xb011, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x18, gbc.a());
        EXPECT(0xa9, gbc.b());
        EXPECT(0x47, gbc.c());
        EXPECT(0x44, gbc.d());
        EXPECT(0x3, gbc.e());
        EXPECT(0x16, gbc.h());
        EXPECT(0xbb, gbc.l());
        EXPECT(0x895e, gbc.sp());
        EXPECT(0xb013, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb011));
        EXPECT(0x95, gbc.readMem(0xb012));
        // CB 95 03B8
        gbc.setState(0xdbf3, 0x31c, 0xeba0, 0x6ee8, 0xff7c, 0x8d30, 0x0, 0x1);
        gbc.writeMem(0xdbf3, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xeb, gbc.a());
        EXPECT(0x6e, gbc.b());
        EXPECT(0xe8, gbc.c());
        EXPECT(0xff, gbc.d());
        EXPECT(0x7c, gbc.e());
        EXPECT(0x8d, gbc.h());
        EXPECT(0x30, gbc.l());
        EXPECT(0x31c, gbc.sp());
        EXPECT(0xdbf5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xdbf3));
        EXPECT(0x95, gbc.readMem(0xdbf4));
        // CB 95 03B9
        gbc.setState(0xcd1f, 0x9517, 0x7590, 0x3dae, 0xc8e7, 0x33b9, 0x0, 0x1);
        gbc.writeMem(0xcd1f, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x75, gbc.a());
        EXPECT(0x3d, gbc.b());
        EXPECT(0xae, gbc.c());
        EXPECT(0xc8, gbc.d());
        EXPECT(0xe7, gbc.e());
        EXPECT(0x33, gbc.h());
        EXPECT(0xb9, gbc.l());
        EXPECT(0x9517, gbc.sp());
        EXPECT(0xcd21, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcd1f));
        EXPECT(0x95, gbc.readMem(0xcd20));
        // CB 95 03BA
        gbc.setState(0x268b, 0xfe83, 0xe3a0, 0x937f, 0x630e, 0x76ec, 0x1, 0x1);
        gbc.writeMem(0x268b, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xe3, gbc.a());
        EXPECT(0x93, gbc.b());
        EXPECT(0x7f, gbc.c());
        EXPECT(0x63, gbc.d());
        EXPECT(0xe, gbc.e());
        EXPECT(0x76, gbc.h());
        EXPECT(0xe8, gbc.l());
        EXPECT(0xfe83, gbc.sp());
        EXPECT(0x268d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 03BB
        gbc.setState(0x6374, 0xa57b, 0x1620, 0xa1de, 0x442e, 0x1102, 0x0, 0x1);
        gbc.writeMem(0x6374, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x16, gbc.a());
        EXPECT(0xa1, gbc.b());
        EXPECT(0xde, gbc.c());
        EXPECT(0x44, gbc.d());
        EXPECT(0x2e, gbc.e());
        EXPECT(0x11, gbc.h());
        EXPECT(0x2, gbc.l());
        EXPECT(0xa57b, gbc.sp());
        EXPECT(0x6376, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 03BC
        gbc.setState(0x55d9, 0x15ff, 0x3490, 0x39db, 0x64b7, 0x4505, 0x0, 0x1);
        gbc.writeMem(0x55d9, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x34, gbc.a());
        EXPECT(0x39, gbc.b());
        EXPECT(0xdb, gbc.c());
        EXPECT(0x64, gbc.d());
        EXPECT(0xb7, gbc.e());
        EXPECT(0x45, gbc.h());
        EXPECT(0x1, gbc.l());
        EXPECT(0x15ff, gbc.sp());
        EXPECT(0x55db, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 03BD
        gbc.setState(0x1f09, 0x27bc, 0x8cf0, 0xd6c, 0x74f0, 0x96b3, 0x0, 0x1);
        gbc.writeMem(0x1f09, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x8c, gbc.a());
        EXPECT(0xd, gbc.b());
        EXPECT(0x6c, gbc.c());
        EXPECT(0x74, gbc.d());
        EXPECT(0xf0, gbc.e());
        EXPECT(0x96, gbc.h());
        EXPECT(0xb3, gbc.l());
        EXPECT(0x27bc, gbc.sp());
        EXPECT(0x1f0b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 03BE
        gbc.setState(0xbaef, 0xa5c8, 0xc750, 0xcdb7, 0xb23b, 0xcef9, 0x0, 0x1);
        gbc.writeMem(0xbaef, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xc7, gbc.a());
        EXPECT(0xcd, gbc.b());
        EXPECT(0xb7, gbc.c());
        EXPECT(0xb2, gbc.d());
        EXPECT(0x3b, gbc.e());
        EXPECT(0xce, gbc.h());
        EXPECT(0xf9, gbc.l());
        EXPECT(0xa5c8, gbc.sp());
        EXPECT(0xbaf1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbaef));
        EXPECT(0x95, gbc.readMem(0xbaf0));
        // CB 95 03BF
        gbc.setState(0xc6ec, 0x9000, 0x8830, 0x94d2, 0xc007, 0x49f2, 0x0, 0x0);
        gbc.writeMem(0xc6ec, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x88, gbc.a());
        EXPECT(0x94, gbc.b());
        EXPECT(0xd2, gbc.c());
        EXPECT(0xc0, gbc.d());
        EXPECT(0x7, gbc.e());
        EXPECT(0x49, gbc.h());
        EXPECT(0xf2, gbc.l());
        EXPECT(0x9000, gbc.sp());
        EXPECT(0xc6ee, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xc6ec));
        EXPECT(0x95, gbc.readMem(0xc6ed));
        // CB 95 03C0
        gbc.setState(0x7719, 0x8313, 0xb7b0, 0xe931, 0x2353, 0x429c, 0x0, 0x0);
        gbc.writeMem(0x7719, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xb7, gbc.a());
        EXPECT(0xe9, gbc.b());
        EXPECT(0x31, gbc.c());
        EXPECT(0x23, gbc.d());
        EXPECT(0x53, gbc.e());
        EXPECT(0x42, gbc.h());
        EXPECT(0x98, gbc.l());
        EXPECT(0x8313, gbc.sp());
        EXPECT(0x771b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 03C2
        gbc.setState(0x6ca6, 0xeb81, 0x9340, 0x8266, 0x5887, 0x610e, 0x0, 0x1);
        gbc.writeMem(0x6ca6, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x93, gbc.a());
        EXPECT(0x82, gbc.b());
        EXPECT(0x66, gbc.c());
        EXPECT(0x58, gbc.d());
        EXPECT(0x87, gbc.e());
        EXPECT(0x61, gbc.h());
        EXPECT(0xa, gbc.l());
        EXPECT(0xeb81, gbc.sp());
        EXPECT(0x6ca8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 03C3
        gbc.setState(0x211d, 0x2ab2, 0x2760, 0xe628, 0x5d32, 0xf454, 0x0, 0x0);
        gbc.writeMem(0x211d, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x27, gbc.a());
        EXPECT(0xe6, gbc.b());
        EXPECT(0x28, gbc.c());
        EXPECT(0x5d, gbc.d());
        EXPECT(0x32, gbc.e());
        EXPECT(0xf4, gbc.h());
        EXPECT(0x50, gbc.l());
        EXPECT(0x2ab2, gbc.sp());
        EXPECT(0x211f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 03C4
        gbc.setState(0xe8db, 0x205b, 0x4df0, 0xf5c1, 0x9748, 0x873e, 0x1, 0x0);
        gbc.writeMem(0xe8db, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x4d, gbc.a());
        EXPECT(0xf5, gbc.b());
        EXPECT(0xc1, gbc.c());
        EXPECT(0x97, gbc.d());
        EXPECT(0x48, gbc.e());
        EXPECT(0x87, gbc.h());
        EXPECT(0x3a, gbc.l());
        EXPECT(0x205b, gbc.sp());
        EXPECT(0xe8dd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe8db));
        EXPECT(0x95, gbc.readMem(0xe8dc));
        // CB 95 03C5
        gbc.setState(0x121e, 0x4d77, 0x47a0, 0x2942, 0x6fb3, 0x9cdf, 0x1, 0x0);
        gbc.writeMem(0x121e, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x47, gbc.a());
        EXPECT(0x29, gbc.b());
        EXPECT(0x42, gbc.c());
        EXPECT(0x6f, gbc.d());
        EXPECT(0xb3, gbc.e());
        EXPECT(0x9c, gbc.h());
        EXPECT(0xdb, gbc.l());
        EXPECT(0x4d77, gbc.sp());
        EXPECT(0x1220, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 03C6
        gbc.setState(0x2ee, 0xb545, 0x6d20, 0xb2c5, 0xbf25, 0x4fb4, 0x1, 0x0);
        gbc.writeMem(0x2ee, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x6d, gbc.a());
        EXPECT(0xb2, gbc.b());
        EXPECT(0xc5, gbc.c());
        EXPECT(0xbf, gbc.d());
        EXPECT(0x25, gbc.e());
        EXPECT(0x4f, gbc.h());
        EXPECT(0xb0, gbc.l());
        EXPECT(0xb545, gbc.sp());
        EXPECT(0x2f0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 03C7
        gbc.setState(0x7609, 0x80d9, 0x7c80, 0x40cf, 0x5fa7, 0xc6f8, 0x0, 0x0);
        gbc.writeMem(0x7609, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x7c, gbc.a());
        EXPECT(0x40, gbc.b());
        EXPECT(0xcf, gbc.c());
        EXPECT(0x5f, gbc.d());
        EXPECT(0xa7, gbc.e());
        EXPECT(0xc6, gbc.h());
        EXPECT(0xf8, gbc.l());
        EXPECT(0x80d9, gbc.sp());
        EXPECT(0x760b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 03C8
        gbc.setState(0x74ec, 0x9dd5, 0x35c0, 0x7a36, 0x6d0b, 0x8500, 0x0, 0x1);
        gbc.writeMem(0x74ec, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x35, gbc.a());
        EXPECT(0x7a, gbc.b());
        EXPECT(0x36, gbc.c());
        EXPECT(0x6d, gbc.d());
        EXPECT(0xb, gbc.e());
        EXPECT(0x85, gbc.h());
        EXPECT(0x0, gbc.l());
        EXPECT(0x9dd5, gbc.sp());
        EXPECT(0x74ee, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 03C9
        gbc.setState(0x40f9, 0x9f30, 0xf4a0, 0xab13, 0xa72f, 0x79d2, 0x0, 0x1);
        gbc.writeMem(0x40f9, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xf4, gbc.a());
        EXPECT(0xab, gbc.b());
        EXPECT(0x13, gbc.c());
        EXPECT(0xa7, gbc.d());
        EXPECT(0x2f, gbc.e());
        EXPECT(0x79, gbc.h());
        EXPECT(0xd2, gbc.l());
        EXPECT(0x9f30, gbc.sp());
        EXPECT(0x40fb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 03CA
        gbc.setState(0xb456, 0x796, 0x2290, 0x7c32, 0xb38c, 0x65b7, 0x0, 0x1);
        gbc.writeMem(0xb456, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x22, gbc.a());
        EXPECT(0x7c, gbc.b());
        EXPECT(0x32, gbc.c());
        EXPECT(0xb3, gbc.d());
        EXPECT(0x8c, gbc.e());
        EXPECT(0x65, gbc.h());
        EXPECT(0xb3, gbc.l());
        EXPECT(0x796, gbc.sp());
        EXPECT(0xb458, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb456));
        EXPECT(0x95, gbc.readMem(0xb457));
        // CB 95 03CC
        gbc.setState(0x2683, 0x4bba, 0xfe80, 0x1693, 0x45c7, 0xb98d, 0x1, 0x0);
        gbc.writeMem(0x2683, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xfe, gbc.a());
        EXPECT(0x16, gbc.b());
        EXPECT(0x93, gbc.c());
        EXPECT(0x45, gbc.d());
        EXPECT(0xc7, gbc.e());
        EXPECT(0xb9, gbc.h());
        EXPECT(0x89, gbc.l());
        EXPECT(0x4bba, gbc.sp());
        EXPECT(0x2685, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 03CD
        gbc.setState(0x68aa, 0x68f8, 0x7f50, 0xf146, 0x95db, 0x431e, 0x1, 0x1);
        gbc.writeMem(0x68aa, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x7f, gbc.a());
        EXPECT(0xf1, gbc.b());
        EXPECT(0x46, gbc.c());
        EXPECT(0x95, gbc.d());
        EXPECT(0xdb, gbc.e());
        EXPECT(0x43, gbc.h());
        EXPECT(0x1a, gbc.l());
        EXPECT(0x68f8, gbc.sp());
        EXPECT(0x68ac, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 03CE
        gbc.setState(0x2243, 0xc, 0x95b0, 0xb08c, 0x5b5, 0x4d5f, 0x1, 0x1);
        gbc.writeMem(0x2243, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x95, gbc.a());
        EXPECT(0xb0, gbc.b());
        EXPECT(0x8c, gbc.c());
        EXPECT(0x5, gbc.d());
        EXPECT(0xb5, gbc.e());
        EXPECT(0x4d, gbc.h());
        EXPECT(0x5b, gbc.l());
        EXPECT(0xc, gbc.sp());
        EXPECT(0x2245, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 03CF
        gbc.setState(0x6e13, 0xa0f8, 0x53c0, 0x194b, 0x2280, 0x112f, 0x1, 0x0);
        gbc.writeMem(0x6e13, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x53, gbc.a());
        EXPECT(0x19, gbc.b());
        EXPECT(0x4b, gbc.c());
        EXPECT(0x22, gbc.d());
        EXPECT(0x80, gbc.e());
        EXPECT(0x11, gbc.h());
        EXPECT(0x2b, gbc.l());
        EXPECT(0xa0f8, gbc.sp());
        EXPECT(0x6e15, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 03D0
        gbc.setState(0x2ac2, 0x64be, 0x6d50, 0xe9d, 0xf115, 0x4a0b, 0x1, 0x0);
        gbc.writeMem(0x2ac2, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x6d, gbc.a());
        EXPECT(0xe, gbc.b());
        EXPECT(0x9d, gbc.c());
        EXPECT(0xf1, gbc.d());
        EXPECT(0x15, gbc.e());
        EXPECT(0x4a, gbc.h());
        EXPECT(0xb, gbc.l());
        EXPECT(0x64be, gbc.sp());
        EXPECT(0x2ac4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 03D1
        gbc.setState(0x3ead, 0x2f66, 0x9bd0, 0x6718, 0xc8a7, 0x5a96, 0x0, 0x1);
        gbc.writeMem(0x3ead, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x9b, gbc.a());
        EXPECT(0x67, gbc.b());
        EXPECT(0x18, gbc.c());
        EXPECT(0xc8, gbc.d());
        EXPECT(0xa7, gbc.e());
        EXPECT(0x5a, gbc.h());
        EXPECT(0x92, gbc.l());
        EXPECT(0x2f66, gbc.sp());
        EXPECT(0x3eaf, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 03D2
        gbc.setState(0x3807, 0xe968, 0x7560, 0x57c1, 0x7c48, 0xfcc3, 0x1, 0x0);
        gbc.writeMem(0x3807, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x75, gbc.a());
        EXPECT(0x57, gbc.b());
        EXPECT(0xc1, gbc.c());
        EXPECT(0x7c, gbc.d());
        EXPECT(0x48, gbc.e());
        EXPECT(0xfc, gbc.h());
        EXPECT(0xc3, gbc.l());
        EXPECT(0xe968, gbc.sp());
        EXPECT(0x3809, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 03D3
        gbc.setState(0x79e4, 0xe340, 0x9ef0, 0xc8ea, 0x6383, 0xfdf7, 0x0, 0x0);
        gbc.writeMem(0x79e4, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x9e, gbc.a());
        EXPECT(0xc8, gbc.b());
        EXPECT(0xea, gbc.c());
        EXPECT(0x63, gbc.d());
        EXPECT(0x83, gbc.e());
        EXPECT(0xfd, gbc.h());
        EXPECT(0xf3, gbc.l());
        EXPECT(0xe340, gbc.sp());
        EXPECT(0x79e6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 03D4
        gbc.setState(0x44fe, 0xc3ad, 0xdef0, 0x26fe, 0xd4f3, 0x36a2, 0x0, 0x0);
        gbc.writeMem(0x44fe, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xde, gbc.a());
        EXPECT(0x26, gbc.b());
        EXPECT(0xfe, gbc.c());
        EXPECT(0xd4, gbc.d());
        EXPECT(0xf3, gbc.e());
        EXPECT(0x36, gbc.h());
        EXPECT(0xa2, gbc.l());
        EXPECT(0xc3ad, gbc.sp());
        EXPECT(0x4500, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 03D5
        gbc.setState(0x234a, 0xa7a9, 0x4eb0, 0xaf15, 0x2343, 0xe04a, 0x1, 0x1);
        gbc.writeMem(0x234a, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x4e, gbc.a());
        EXPECT(0xaf, gbc.b());
        EXPECT(0x15, gbc.c());
        EXPECT(0x23, gbc.d());
        EXPECT(0x43, gbc.e());
        EXPECT(0xe0, gbc.h());
        EXPECT(0x4a, gbc.l());
        EXPECT(0xa7a9, gbc.sp());
        EXPECT(0x234c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 03D6
        gbc.setState(0x36b8, 0xd9d1, 0x5f40, 0x5010, 0x8462, 0xba6a, 0x0, 0x0);
        gbc.writeMem(0x36b8, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x5f, gbc.a());
        EXPECT(0x50, gbc.b());
        EXPECT(0x10, gbc.c());
        EXPECT(0x84, gbc.d());
        EXPECT(0x62, gbc.e());
        EXPECT(0xba, gbc.h());
        EXPECT(0x6a, gbc.l());
        EXPECT(0xd9d1, gbc.sp());
        EXPECT(0x36ba, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 03D7
        gbc.setState(0xcfb6, 0xec27, 0xf660, 0x51f0, 0xb1c2, 0x8710, 0x0, 0x1);
        gbc.writeMem(0xcfb6, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xf6, gbc.a());
        EXPECT(0x51, gbc.b());
        EXPECT(0xf0, gbc.c());
        EXPECT(0xb1, gbc.d());
        EXPECT(0xc2, gbc.e());
        EXPECT(0x87, gbc.h());
        EXPECT(0x10, gbc.l());
        EXPECT(0xec27, gbc.sp());
        EXPECT(0xcfb8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xcfb6));
        EXPECT(0x95, gbc.readMem(0xcfb7));
        // CB 95 03D8
        gbc.setState(0x6a5d, 0x9fd3, 0x6fd0, 0x1790, 0xe133, 0x1423, 0x1, 0x0);
        gbc.writeMem(0x6a5d, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x6f, gbc.a());
        EXPECT(0x17, gbc.b());
        EXPECT(0x90, gbc.c());
        EXPECT(0xe1, gbc.d());
        EXPECT(0x33, gbc.e());
        EXPECT(0x14, gbc.h());
        EXPECT(0x23, gbc.l());
        EXPECT(0x9fd3, gbc.sp());
        EXPECT(0x6a5f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 03D9
        gbc.setState(0xb52a, 0x34b6, 0x5450, 0x68c1, 0x4d88, 0x3064, 0x0, 0x0);
        gbc.writeMem(0xb52a, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x54, gbc.a());
        EXPECT(0x68, gbc.b());
        EXPECT(0xc1, gbc.c());
        EXPECT(0x4d, gbc.d());
        EXPECT(0x88, gbc.e());
        EXPECT(0x30, gbc.h());
        EXPECT(0x60, gbc.l());
        EXPECT(0x34b6, gbc.sp());
        EXPECT(0xb52c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb52a));
        EXPECT(0x95, gbc.readMem(0xb52b));
        // CB 95 03DA
        gbc.setState(0x8d7d, 0xb295, 0x9c50, 0xcd98, 0xaff7, 0x6547, 0x0, 0x0);
        gbc.writeMem(0x8d7d, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x9c, gbc.a());
        EXPECT(0xcd, gbc.b());
        EXPECT(0x98, gbc.c());
        EXPECT(0xaf, gbc.d());
        EXPECT(0xf7, gbc.e());
        EXPECT(0x65, gbc.h());
        EXPECT(0x43, gbc.l());
        EXPECT(0xb295, gbc.sp());
        EXPECT(0x8d7f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8d7d));
        EXPECT(0x95, gbc.readMem(0x8d7e));
        // CB 95 03DC
        gbc.setState(0xb641, 0x17a3, 0xaaa0, 0xf46c, 0xebea, 0xa023, 0x0, 0x1);
        gbc.writeMem(0xb641, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xaa, gbc.a());
        EXPECT(0xf4, gbc.b());
        EXPECT(0x6c, gbc.c());
        EXPECT(0xeb, gbc.d());
        EXPECT(0xea, gbc.e());
        EXPECT(0xa0, gbc.h());
        EXPECT(0x23, gbc.l());
        EXPECT(0x17a3, gbc.sp());
        EXPECT(0xb643, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb641));
        EXPECT(0x95, gbc.readMem(0xb642));
        // CB 95 03DD
        gbc.setState(0xd252, 0x5f1b, 0x1eb0, 0xe84c, 0xd38f, 0x9d69, 0x1, 0x0);
        gbc.writeMem(0xd252, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x1e, gbc.a());
        EXPECT(0xe8, gbc.b());
        EXPECT(0x4c, gbc.c());
        EXPECT(0xd3, gbc.d());
        EXPECT(0x8f, gbc.e());
        EXPECT(0x9d, gbc.h());
        EXPECT(0x69, gbc.l());
        EXPECT(0x5f1b, gbc.sp());
        EXPECT(0xd254, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xd252));
        EXPECT(0x95, gbc.readMem(0xd253));
        // CB 95 03DE
        gbc.setState(0x7899, 0x6e26, 0x80f0, 0xe1c7, 0x4883, 0xa740, 0x1, 0x1);
        gbc.writeMem(0x7899, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x80, gbc.a());
        EXPECT(0xe1, gbc.b());
        EXPECT(0xc7, gbc.c());
        EXPECT(0x48, gbc.d());
        EXPECT(0x83, gbc.e());
        EXPECT(0xa7, gbc.h());
        EXPECT(0x40, gbc.l());
        EXPECT(0x6e26, gbc.sp());
        EXPECT(0x789b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 03DF
        gbc.setState(0x8729, 0x3f6e, 0xa8e0, 0xba48, 0xd0d0, 0x7d2, 0x1, 0x1);
        gbc.writeMem(0x8729, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xa8, gbc.a());
        EXPECT(0xba, gbc.b());
        EXPECT(0x48, gbc.c());
        EXPECT(0xd0, gbc.d());
        EXPECT(0xd0, gbc.e());
        EXPECT(0x7, gbc.h());
        EXPECT(0xd2, gbc.l());
        EXPECT(0x3f6e, gbc.sp());
        EXPECT(0x872b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x8729));
        EXPECT(0x95, gbc.readMem(0x872a));
        // CB 95 03E0
        gbc.setState(0x9e8d, 0xaa62, 0xf870, 0x8ef8, 0x5234, 0xfc1c, 0x1, 0x1);
        gbc.writeMem(0x9e8d, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xf8, gbc.a());
        EXPECT(0x8e, gbc.b());
        EXPECT(0xf8, gbc.c());
        EXPECT(0x52, gbc.d());
        EXPECT(0x34, gbc.e());
        EXPECT(0xfc, gbc.h());
        EXPECT(0x18, gbc.l());
        EXPECT(0xaa62, gbc.sp());
        EXPECT(0x9e8f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9e8d));
        EXPECT(0x95, gbc.readMem(0x9e8e));
        // CB 95 03E1
        gbc.setState(0x3ead, 0x8533, 0x1520, 0x44d6, 0x3e1a, 0x2d5e, 0x0, 0x0);
        gbc.writeMem(0x3ead, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x15, gbc.a());
        EXPECT(0x44, gbc.b());
        EXPECT(0xd6, gbc.c());
        EXPECT(0x3e, gbc.d());
        EXPECT(0x1a, gbc.e());
        EXPECT(0x2d, gbc.h());
        EXPECT(0x5a, gbc.l());
        EXPECT(0x8533, gbc.sp());
        EXPECT(0x3eaf, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 03E3
        gbc.setState(0x6fe9, 0x30ac, 0xdd0, 0x8aaf, 0xe6fd, 0x8603, 0x1, 0x1);
        gbc.writeMem(0x6fe9, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xd, gbc.a());
        EXPECT(0x8a, gbc.b());
        EXPECT(0xaf, gbc.c());
        EXPECT(0xe6, gbc.d());
        EXPECT(0xfd, gbc.e());
        EXPECT(0x86, gbc.h());
        EXPECT(0x3, gbc.l());
        EXPECT(0x30ac, gbc.sp());
        EXPECT(0x6feb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CB 95 03E4
        gbc.setState(0xe5b5, 0xc331, 0x84b0, 0xc489, 0x7bb6, 0xc790, 0x1, 0x0);
        gbc.writeMem(0xe5b5, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x84, gbc.a());
        EXPECT(0xc4, gbc.b());
        EXPECT(0x89, gbc.c());
        EXPECT(0x7b, gbc.d());
        EXPECT(0xb6, gbc.e());
        EXPECT(0xc7, gbc.h());
        EXPECT(0x90, gbc.l());
        EXPECT(0xc331, gbc.sp());
        EXPECT(0xe5b7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe5b5));
        EXPECT(0x95, gbc.readMem(0xe5b6));
        // CB 95 03E5
        gbc.setState(0x834e, 0x5836, 0x7350, 0x1732, 0x4420, 0xe48c, 0x1, 0x0);
        gbc.writeMem(0x834e, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x73, gbc.a());
        EXPECT(0x17, gbc.b());
        EXPECT(0x32, gbc.c());
        EXPECT(0x44, gbc.d());
        EXPECT(0x20, gbc.e());
        EXPECT(0xe4, gbc.h());
        EXPECT(0x88, gbc.l());
        EXPECT(0x5836, gbc.sp());
        EXPECT(0x8350, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x834e));
        EXPECT(0x95, gbc.readMem(0x834f));
        // CB 95 03E6
        gbc.setState(0x46e, 0x979, 0xb6a0, 0x302d, 0x6039, 0x643a, 0x0, 0x1);
        gbc.writeMem(0x46e, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0xb6, gbc.a());
        EXPECT(0x30, gbc.b());
        EXPECT(0x2d, gbc.c());
        EXPECT(0x60, gbc.d());
        EXPECT(0x39, gbc.e());
        EXPECT(0x64, gbc.h());
        EXPECT(0x3a, gbc.l());
        EXPECT(0x979, gbc.sp());
        EXPECT(0x470, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CB 95 03E7
        gbc.setState(0x79f1, 0x8313, 0x40b0, 0x1565, 0x45ff, 0x250d, 0x1, 0x0);
        gbc.writeMem(0x79f1, { 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x40, gbc.a());
        EXPECT(0x15, gbc.b());
        EXPECT(0x65, gbc.c());
        EXPECT(0x45, gbc.d());
        EXPECT(0xff, gbc.e());
        EXPECT(0x25, gbc.h());
        EXPECT(0x9, gbc.l());
        EXPECT(0x8313, gbc.sp());
        EXPECT(0x79f3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
    }
