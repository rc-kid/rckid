    TEST(gbcemu, opcode_af) {
        GBCEmu gbc{"", nullptr};
        uint8_t cartridge[0x8000];
        cartridge[0x149] = 0x02; // 8kb external RAM
        gbc.loadCartridge(new FlashGamePak(cartridge));
        // AF 0000
        gbc.setState(0x4ef7, 0xa64c, 0xb400, 0x22b6, 0x5ae7, 0xc5e, 0x1, 0x1);
        gbc.writeMem(0x4ef7, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x22, gbc.b());
        EXPECT(0xb6, gbc.c());
        EXPECT(0x5a, gbc.d());
        EXPECT(0xe7, gbc.e());
        EXPECT(0xc, gbc.h());
        EXPECT(0x5e, gbc.l());
        EXPECT(0xa64c, gbc.sp());
        EXPECT(0x4ef8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0002
        gbc.setState(0x7663, 0xff6a, 0xa140, 0x8fa6, 0x4f66, 0x7f7d, 0x0, 0x1);
        gbc.writeMem(0x7663, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x8f, gbc.b());
        EXPECT(0xa6, gbc.c());
        EXPECT(0x4f, gbc.d());
        EXPECT(0x66, gbc.e());
        EXPECT(0x7f, gbc.h());
        EXPECT(0x7d, gbc.l());
        EXPECT(0xff6a, gbc.sp());
        EXPECT(0x7664, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0003
        gbc.setState(0x84ad, 0x2568, 0x6cf0, 0x9433, 0xc0ca, 0xe099, 0x1, 0x1);
        gbc.writeMem(0x84ad, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x94, gbc.b());
        EXPECT(0x33, gbc.c());
        EXPECT(0xc0, gbc.d());
        EXPECT(0xca, gbc.e());
        EXPECT(0xe0, gbc.h());
        EXPECT(0x99, gbc.l());
        EXPECT(0x2568, gbc.sp());
        EXPECT(0x84ae, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x84ad));
        // AF 0004
        gbc.setState(0x2146, 0x7636, 0xba10, 0x7ccc, 0xa023, 0xbb29, 0x1, 0x1);
        gbc.writeMem(0x2146, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x7c, gbc.b());
        EXPECT(0xcc, gbc.c());
        EXPECT(0xa0, gbc.d());
        EXPECT(0x23, gbc.e());
        EXPECT(0xbb, gbc.h());
        EXPECT(0x29, gbc.l());
        EXPECT(0x7636, gbc.sp());
        EXPECT(0x2147, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0005
        gbc.setState(0xd966, 0x38bd, 0x83c0, 0xc0d5, 0xefb9, 0xf8ba, 0x0, 0x1);
        gbc.writeMem(0xd966, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xc0, gbc.b());
        EXPECT(0xd5, gbc.c());
        EXPECT(0xef, gbc.d());
        EXPECT(0xb9, gbc.e());
        EXPECT(0xf8, gbc.h());
        EXPECT(0xba, gbc.l());
        EXPECT(0x38bd, gbc.sp());
        EXPECT(0xd967, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xd966));
        // AF 0006
        gbc.setState(0x2d07, 0x8b5b, 0x94f0, 0x228c, 0x37b8, 0x1edc, 0x0, 0x0);
        gbc.writeMem(0x2d07, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x22, gbc.b());
        EXPECT(0x8c, gbc.c());
        EXPECT(0x37, gbc.d());
        EXPECT(0xb8, gbc.e());
        EXPECT(0x1e, gbc.h());
        EXPECT(0xdc, gbc.l());
        EXPECT(0x8b5b, gbc.sp());
        EXPECT(0x2d08, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0007
        gbc.setState(0x15eb, 0x300d, 0x21d0, 0xc1ac, 0x9706, 0x3f1d, 0x0, 0x1);
        gbc.writeMem(0x15eb, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xc1, gbc.b());
        EXPECT(0xac, gbc.c());
        EXPECT(0x97, gbc.d());
        EXPECT(0x6, gbc.e());
        EXPECT(0x3f, gbc.h());
        EXPECT(0x1d, gbc.l());
        EXPECT(0x300d, gbc.sp());
        EXPECT(0x15ec, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0008
        gbc.setState(0x5671, 0xf2d8, 0xedc0, 0xb20, 0xf27d, 0x778c, 0x0, 0x0);
        gbc.writeMem(0x5671, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xb, gbc.b());
        EXPECT(0x20, gbc.c());
        EXPECT(0xf2, gbc.d());
        EXPECT(0x7d, gbc.e());
        EXPECT(0x77, gbc.h());
        EXPECT(0x8c, gbc.l());
        EXPECT(0xf2d8, gbc.sp());
        EXPECT(0x5672, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0009
        gbc.setState(0xc07a, 0xf77b, 0x32a0, 0x89c2, 0xe198, 0xca0d, 0x0, 0x1);
        gbc.writeMem(0xc07a, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x89, gbc.b());
        EXPECT(0xc2, gbc.c());
        EXPECT(0xe1, gbc.d());
        EXPECT(0x98, gbc.e());
        EXPECT(0xca, gbc.h());
        EXPECT(0xd, gbc.l());
        EXPECT(0xf77b, gbc.sp());
        EXPECT(0xc07b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xc07a));
        // AF 000A
        gbc.setState(0x755d, 0x3d26, 0xb460, 0xedab, 0x570, 0xf285, 0x1, 0x1);
        gbc.writeMem(0x755d, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xed, gbc.b());
        EXPECT(0xab, gbc.c());
        EXPECT(0x5, gbc.d());
        EXPECT(0x70, gbc.e());
        EXPECT(0xf2, gbc.h());
        EXPECT(0x85, gbc.l());
        EXPECT(0x3d26, gbc.sp());
        EXPECT(0x755e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 000B
        gbc.setState(0x174d, 0x9d6d, 0x1a30, 0x9e78, 0x3adc, 0x927a, 0x0, 0x1);
        gbc.writeMem(0x174d, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x9e, gbc.b());
        EXPECT(0x78, gbc.c());
        EXPECT(0x3a, gbc.d());
        EXPECT(0xdc, gbc.e());
        EXPECT(0x92, gbc.h());
        EXPECT(0x7a, gbc.l());
        EXPECT(0x9d6d, gbc.sp());
        EXPECT(0x174e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 000C
        gbc.setState(0xa2ff, 0x1702, 0x3040, 0xa4ea, 0xa4bf, 0xaf19, 0x1, 0x1);
        gbc.writeMem(0xa2ff, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xa4, gbc.b());
        EXPECT(0xea, gbc.c());
        EXPECT(0xa4, gbc.d());
        EXPECT(0xbf, gbc.e());
        EXPECT(0xaf, gbc.h());
        EXPECT(0x19, gbc.l());
        EXPECT(0x1702, gbc.sp());
        EXPECT(0xa300, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xa2ff));
        // AF 000D
        gbc.setState(0xb22a, 0x8a65, 0xfb30, 0xfc6, 0x99e2, 0x37c0, 0x1, 0x1);
        gbc.writeMem(0xb22a, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xf, gbc.b());
        EXPECT(0xc6, gbc.c());
        EXPECT(0x99, gbc.d());
        EXPECT(0xe2, gbc.e());
        EXPECT(0x37, gbc.h());
        EXPECT(0xc0, gbc.l());
        EXPECT(0x8a65, gbc.sp());
        EXPECT(0xb22b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xb22a));
        // AF 000E
        gbc.setState(0x2892, 0x2ea6, 0x3cc0, 0x4790, 0x5806, 0xbd92, 0x1, 0x1);
        gbc.writeMem(0x2892, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x47, gbc.b());
        EXPECT(0x90, gbc.c());
        EXPECT(0x58, gbc.d());
        EXPECT(0x6, gbc.e());
        EXPECT(0xbd, gbc.h());
        EXPECT(0x92, gbc.l());
        EXPECT(0x2ea6, gbc.sp());
        EXPECT(0x2893, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 000F
        gbc.setState(0x46c8, 0xadcb, 0xd090, 0xbfad, 0x3025, 0x6f36, 0x1, 0x1);
        gbc.writeMem(0x46c8, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xbf, gbc.b());
        EXPECT(0xad, gbc.c());
        EXPECT(0x30, gbc.d());
        EXPECT(0x25, gbc.e());
        EXPECT(0x6f, gbc.h());
        EXPECT(0x36, gbc.l());
        EXPECT(0xadcb, gbc.sp());
        EXPECT(0x46c9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0010
        gbc.setState(0xd7a5, 0xa020, 0x3bf0, 0x68e0, 0x9de4, 0xd579, 0x1, 0x1);
        gbc.writeMem(0xd7a5, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x68, gbc.b());
        EXPECT(0xe0, gbc.c());
        EXPECT(0x9d, gbc.d());
        EXPECT(0xe4, gbc.e());
        EXPECT(0xd5, gbc.h());
        EXPECT(0x79, gbc.l());
        EXPECT(0xa020, gbc.sp());
        EXPECT(0xd7a6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xd7a5));
        // AF 0011
        gbc.setState(0x856b, 0x68ae, 0xd250, 0x8967, 0xa6ec, 0xb4a0, 0x1, 0x1);
        gbc.writeMem(0x856b, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x89, gbc.b());
        EXPECT(0x67, gbc.c());
        EXPECT(0xa6, gbc.d());
        EXPECT(0xec, gbc.e());
        EXPECT(0xb4, gbc.h());
        EXPECT(0xa0, gbc.l());
        EXPECT(0x68ae, gbc.sp());
        EXPECT(0x856c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x856b));
        // AF 0012
        gbc.setState(0x92b8, 0xd942, 0x1f00, 0xc393, 0x6b5d, 0x2748, 0x0, 0x1);
        gbc.writeMem(0x92b8, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xc3, gbc.b());
        EXPECT(0x93, gbc.c());
        EXPECT(0x6b, gbc.d());
        EXPECT(0x5d, gbc.e());
        EXPECT(0x27, gbc.h());
        EXPECT(0x48, gbc.l());
        EXPECT(0xd942, gbc.sp());
        EXPECT(0x92b9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x92b8));
        // AF 0013
        gbc.setState(0xd1f5, 0x58ca, 0x2540, 0x6a76, 0xe7b0, 0x208a, 0x0, 0x0);
        gbc.writeMem(0xd1f5, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x6a, gbc.b());
        EXPECT(0x76, gbc.c());
        EXPECT(0xe7, gbc.d());
        EXPECT(0xb0, gbc.e());
        EXPECT(0x20, gbc.h());
        EXPECT(0x8a, gbc.l());
        EXPECT(0x58ca, gbc.sp());
        EXPECT(0xd1f6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xd1f5));
        // AF 0014
        gbc.setState(0x7e10, 0x19d4, 0x450, 0xe079, 0x37af, 0x2b54, 0x0, 0x1);
        gbc.writeMem(0x7e10, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xe0, gbc.b());
        EXPECT(0x79, gbc.c());
        EXPECT(0x37, gbc.d());
        EXPECT(0xaf, gbc.e());
        EXPECT(0x2b, gbc.h());
        EXPECT(0x54, gbc.l());
        EXPECT(0x19d4, gbc.sp());
        EXPECT(0x7e11, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0015
        gbc.setState(0x30d1, 0x5e90, 0xd750, 0xb6fc, 0x82f7, 0x30de, 0x1, 0x1);
        gbc.writeMem(0x30d1, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xb6, gbc.b());
        EXPECT(0xfc, gbc.c());
        EXPECT(0x82, gbc.d());
        EXPECT(0xf7, gbc.e());
        EXPECT(0x30, gbc.h());
        EXPECT(0xde, gbc.l());
        EXPECT(0x5e90, gbc.sp());
        EXPECT(0x30d2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0016
        gbc.setState(0xd5c1, 0x3ca2, 0xcf70, 0xd293, 0xc922, 0x614, 0x1, 0x0);
        gbc.writeMem(0xd5c1, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xd2, gbc.b());
        EXPECT(0x93, gbc.c());
        EXPECT(0xc9, gbc.d());
        EXPECT(0x22, gbc.e());
        EXPECT(0x6, gbc.h());
        EXPECT(0x14, gbc.l());
        EXPECT(0x3ca2, gbc.sp());
        EXPECT(0xd5c2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xd5c1));
        // AF 0017
        gbc.setState(0x10d1, 0xbe96, 0xea60, 0x2f26, 0x2ecc, 0x208a, 0x0, 0x1);
        gbc.writeMem(0x10d1, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x2f, gbc.b());
        EXPECT(0x26, gbc.c());
        EXPECT(0x2e, gbc.d());
        EXPECT(0xcc, gbc.e());
        EXPECT(0x20, gbc.h());
        EXPECT(0x8a, gbc.l());
        EXPECT(0xbe96, gbc.sp());
        EXPECT(0x10d2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0018
        gbc.setState(0x889c, 0x8823, 0xc3d0, 0x66b4, 0xdf91, 0xd6af, 0x1, 0x0);
        gbc.writeMem(0x889c, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x66, gbc.b());
        EXPECT(0xb4, gbc.c());
        EXPECT(0xdf, gbc.d());
        EXPECT(0x91, gbc.e());
        EXPECT(0xd6, gbc.h());
        EXPECT(0xaf, gbc.l());
        EXPECT(0x8823, gbc.sp());
        EXPECT(0x889d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x889c));
        // AF 0019
        gbc.setState(0x88bd, 0xbe1d, 0xab40, 0x6ab6, 0x6f62, 0x5e7b, 0x1, 0x1);
        gbc.writeMem(0x88bd, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x6a, gbc.b());
        EXPECT(0xb6, gbc.c());
        EXPECT(0x6f, gbc.d());
        EXPECT(0x62, gbc.e());
        EXPECT(0x5e, gbc.h());
        EXPECT(0x7b, gbc.l());
        EXPECT(0xbe1d, gbc.sp());
        EXPECT(0x88be, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x88bd));
        // AF 001A
        gbc.setState(0x5617, 0x386c, 0x2050, 0xbe26, 0xe145, 0xe464, 0x0, 0x1);
        gbc.writeMem(0x5617, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xbe, gbc.b());
        EXPECT(0x26, gbc.c());
        EXPECT(0xe1, gbc.d());
        EXPECT(0x45, gbc.e());
        EXPECT(0xe4, gbc.h());
        EXPECT(0x64, gbc.l());
        EXPECT(0x386c, gbc.sp());
        EXPECT(0x5618, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 001B
        gbc.setState(0x8d56, 0x769a, 0x8af0, 0x115a, 0xce6a, 0x2be2, 0x0, 0x0);
        gbc.writeMem(0x8d56, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x11, gbc.b());
        EXPECT(0x5a, gbc.c());
        EXPECT(0xce, gbc.d());
        EXPECT(0x6a, gbc.e());
        EXPECT(0x2b, gbc.h());
        EXPECT(0xe2, gbc.l());
        EXPECT(0x769a, gbc.sp());
        EXPECT(0x8d57, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x8d56));
        // AF 001C
        gbc.setState(0x669f, 0x24eb, 0x6f00, 0xb4b3, 0xd490, 0x6266, 0x0, 0x1);
        gbc.writeMem(0x669f, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xb4, gbc.b());
        EXPECT(0xb3, gbc.c());
        EXPECT(0xd4, gbc.d());
        EXPECT(0x90, gbc.e());
        EXPECT(0x62, gbc.h());
        EXPECT(0x66, gbc.l());
        EXPECT(0x24eb, gbc.sp());
        EXPECT(0x66a0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 001D
        gbc.setState(0xc41, 0x2e3b, 0x6050, 0x24e2, 0x3415, 0x155a, 0x0, 0x0);
        gbc.writeMem(0xc41, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x24, gbc.b());
        EXPECT(0xe2, gbc.c());
        EXPECT(0x34, gbc.d());
        EXPECT(0x15, gbc.e());
        EXPECT(0x15, gbc.h());
        EXPECT(0x5a, gbc.l());
        EXPECT(0x2e3b, gbc.sp());
        EXPECT(0xc42, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 001E
        gbc.setState(0xa4d4, 0xf75e, 0xf800, 0xffa4, 0xe24a, 0xe161, 0x1, 0x0);
        gbc.writeMem(0xa4d4, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xff, gbc.b());
        EXPECT(0xa4, gbc.c());
        EXPECT(0xe2, gbc.d());
        EXPECT(0x4a, gbc.e());
        EXPECT(0xe1, gbc.h());
        EXPECT(0x61, gbc.l());
        EXPECT(0xf75e, gbc.sp());
        EXPECT(0xa4d5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xa4d4));
        // AF 001F
        gbc.setState(0x3d6f, 0x4b56, 0xbe90, 0x722b, 0xf4e, 0x3ff9, 0x0, 0x1);
        gbc.writeMem(0x3d6f, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x72, gbc.b());
        EXPECT(0x2b, gbc.c());
        EXPECT(0xf, gbc.d());
        EXPECT(0x4e, gbc.e());
        EXPECT(0x3f, gbc.h());
        EXPECT(0xf9, gbc.l());
        EXPECT(0x4b56, gbc.sp());
        EXPECT(0x3d70, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0020
        gbc.setState(0x2773, 0x2382, 0xbda0, 0xff0c, 0x233, 0x3067, 0x0, 0x1);
        gbc.writeMem(0x2773, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xff, gbc.b());
        EXPECT(0xc, gbc.c());
        EXPECT(0x2, gbc.d());
        EXPECT(0x33, gbc.e());
        EXPECT(0x30, gbc.h());
        EXPECT(0x67, gbc.l());
        EXPECT(0x2382, gbc.sp());
        EXPECT(0x2774, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0022
        gbc.setState(0x5fb, 0x33d6, 0xa330, 0x3333, 0x1a63, 0x8b0f, 0x0, 0x1);
        gbc.writeMem(0x5fb, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x33, gbc.b());
        EXPECT(0x33, gbc.c());
        EXPECT(0x1a, gbc.d());
        EXPECT(0x63, gbc.e());
        EXPECT(0x8b, gbc.h());
        EXPECT(0xf, gbc.l());
        EXPECT(0x33d6, gbc.sp());
        EXPECT(0x5fc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0023
        gbc.setState(0xec70, 0x1bda, 0xe9f0, 0x1539, 0x764f, 0x5049, 0x0, 0x0);
        gbc.writeMem(0xec70, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x15, gbc.b());
        EXPECT(0x39, gbc.c());
        EXPECT(0x76, gbc.d());
        EXPECT(0x4f, gbc.e());
        EXPECT(0x50, gbc.h());
        EXPECT(0x49, gbc.l());
        EXPECT(0x1bda, gbc.sp());
        EXPECT(0xec71, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xec70));
        // AF 0024
        gbc.setState(0x5e0b, 0xeb7b, 0x96b0, 0xfc46, 0x63a0, 0x94f2, 0x1, 0x1);
        gbc.writeMem(0x5e0b, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xfc, gbc.b());
        EXPECT(0x46, gbc.c());
        EXPECT(0x63, gbc.d());
        EXPECT(0xa0, gbc.e());
        EXPECT(0x94, gbc.h());
        EXPECT(0xf2, gbc.l());
        EXPECT(0xeb7b, gbc.sp());
        EXPECT(0x5e0c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0025
        gbc.setState(0x408f, 0xf17f, 0xb5c0, 0x5866, 0x16d6, 0x4660, 0x1, 0x1);
        gbc.writeMem(0x408f, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x58, gbc.b());
        EXPECT(0x66, gbc.c());
        EXPECT(0x16, gbc.d());
        EXPECT(0xd6, gbc.e());
        EXPECT(0x46, gbc.h());
        EXPECT(0x60, gbc.l());
        EXPECT(0xf17f, gbc.sp());
        EXPECT(0x4090, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0027
        gbc.setState(0x20d0, 0xe127, 0x9c30, 0x6cea, 0xd556, 0xafc9, 0x1, 0x0);
        gbc.writeMem(0x20d0, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x6c, gbc.b());
        EXPECT(0xea, gbc.c());
        EXPECT(0xd5, gbc.d());
        EXPECT(0x56, gbc.e());
        EXPECT(0xaf, gbc.h());
        EXPECT(0xc9, gbc.l());
        EXPECT(0xe127, gbc.sp());
        EXPECT(0x20d1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0028
        gbc.setState(0xd3fe, 0xff1b, 0x62a0, 0x2928, 0x158, 0xa93d, 0x1, 0x0);
        gbc.writeMem(0xd3fe, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x29, gbc.b());
        EXPECT(0x28, gbc.c());
        EXPECT(0x1, gbc.d());
        EXPECT(0x58, gbc.e());
        EXPECT(0xa9, gbc.h());
        EXPECT(0x3d, gbc.l());
        EXPECT(0xff1b, gbc.sp());
        EXPECT(0xd3ff, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xd3fe));
        // AF 0029
        gbc.setState(0x6622, 0xb48c, 0xe40, 0xfbf1, 0xf375, 0xfa73, 0x1, 0x0);
        gbc.writeMem(0x6622, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xfb, gbc.b());
        EXPECT(0xf1, gbc.c());
        EXPECT(0xf3, gbc.d());
        EXPECT(0x75, gbc.e());
        EXPECT(0xfa, gbc.h());
        EXPECT(0x73, gbc.l());
        EXPECT(0xb48c, gbc.sp());
        EXPECT(0x6623, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 002B
        gbc.setState(0xdbbe, 0x6b71, 0x6160, 0x4406, 0x2589, 0xb1f9, 0x0, 0x1);
        gbc.writeMem(0xdbbe, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x44, gbc.b());
        EXPECT(0x6, gbc.c());
        EXPECT(0x25, gbc.d());
        EXPECT(0x89, gbc.e());
        EXPECT(0xb1, gbc.h());
        EXPECT(0xf9, gbc.l());
        EXPECT(0x6b71, gbc.sp());
        EXPECT(0xdbbf, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xdbbe));
        // AF 002C
        gbc.setState(0x6d6c, 0x1ccf, 0x8a40, 0xf5fe, 0x432e, 0xb7d, 0x0, 0x1);
        gbc.writeMem(0x6d6c, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xf5, gbc.b());
        EXPECT(0xfe, gbc.c());
        EXPECT(0x43, gbc.d());
        EXPECT(0x2e, gbc.e());
        EXPECT(0xb, gbc.h());
        EXPECT(0x7d, gbc.l());
        EXPECT(0x1ccf, gbc.sp());
        EXPECT(0x6d6d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 002D
        gbc.setState(0xdd77, 0x1411, 0xd590, 0x2de4, 0x2847, 0x256f, 0x1, 0x0);
        gbc.writeMem(0xdd77, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x2d, gbc.b());
        EXPECT(0xe4, gbc.c());
        EXPECT(0x28, gbc.d());
        EXPECT(0x47, gbc.e());
        EXPECT(0x25, gbc.h());
        EXPECT(0x6f, gbc.l());
        EXPECT(0x1411, gbc.sp());
        EXPECT(0xdd78, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xdd77));
        // AF 002E
        gbc.setState(0x5096, 0xc4f3, 0x92b0, 0xe7d3, 0x92cb, 0x8487, 0x1, 0x1);
        gbc.writeMem(0x5096, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xe7, gbc.b());
        EXPECT(0xd3, gbc.c());
        EXPECT(0x92, gbc.d());
        EXPECT(0xcb, gbc.e());
        EXPECT(0x84, gbc.h());
        EXPECT(0x87, gbc.l());
        EXPECT(0xc4f3, gbc.sp());
        EXPECT(0x5097, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 002F
        gbc.setState(0x8585, 0x2541, 0xf210, 0xe14, 0xdd6c, 0x48c6, 0x0, 0x0);
        gbc.writeMem(0x8585, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xe, gbc.b());
        EXPECT(0x14, gbc.c());
        EXPECT(0xdd, gbc.d());
        EXPECT(0x6c, gbc.e());
        EXPECT(0x48, gbc.h());
        EXPECT(0xc6, gbc.l());
        EXPECT(0x2541, gbc.sp());
        EXPECT(0x8586, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x8585));
        // AF 0030
        gbc.setState(0x438d, 0x96eb, 0x1f80, 0x2a93, 0x3020, 0x1bb2, 0x0, 0x1);
        gbc.writeMem(0x438d, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x2a, gbc.b());
        EXPECT(0x93, gbc.c());
        EXPECT(0x30, gbc.d());
        EXPECT(0x20, gbc.e());
        EXPECT(0x1b, gbc.h());
        EXPECT(0xb2, gbc.l());
        EXPECT(0x96eb, gbc.sp());
        EXPECT(0x438e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0031
        gbc.setState(0xa74f, 0xe166, 0xa260, 0x2ac5, 0xa424, 0x2bda, 0x0, 0x0);
        gbc.writeMem(0xa74f, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x2a, gbc.b());
        EXPECT(0xc5, gbc.c());
        EXPECT(0xa4, gbc.d());
        EXPECT(0x24, gbc.e());
        EXPECT(0x2b, gbc.h());
        EXPECT(0xda, gbc.l());
        EXPECT(0xe166, gbc.sp());
        EXPECT(0xa750, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xa74f));
        // AF 0032
        gbc.setState(0x7599, 0x1948, 0x5210, 0x6b96, 0xa287, 0xd181, 0x0, 0x1);
        gbc.writeMem(0x7599, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x6b, gbc.b());
        EXPECT(0x96, gbc.c());
        EXPECT(0xa2, gbc.d());
        EXPECT(0x87, gbc.e());
        EXPECT(0xd1, gbc.h());
        EXPECT(0x81, gbc.l());
        EXPECT(0x1948, gbc.sp());
        EXPECT(0x759a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0033
        gbc.setState(0xc3f2, 0x5df6, 0x1b20, 0x7b66, 0x2be8, 0xc7e2, 0x1, 0x0);
        gbc.writeMem(0xc3f2, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x7b, gbc.b());
        EXPECT(0x66, gbc.c());
        EXPECT(0x2b, gbc.d());
        EXPECT(0xe8, gbc.e());
        EXPECT(0xc7, gbc.h());
        EXPECT(0xe2, gbc.l());
        EXPECT(0x5df6, gbc.sp());
        EXPECT(0xc3f3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xc3f2));
        // AF 0034
        gbc.setState(0xcb4e, 0x4cac, 0xb450, 0x5b3, 0xf956, 0xf906, 0x1, 0x0);
        gbc.writeMem(0xcb4e, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x5, gbc.b());
        EXPECT(0xb3, gbc.c());
        EXPECT(0xf9, gbc.d());
        EXPECT(0x56, gbc.e());
        EXPECT(0xf9, gbc.h());
        EXPECT(0x6, gbc.l());
        EXPECT(0x4cac, gbc.sp());
        EXPECT(0xcb4f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xcb4e));
        // AF 0035
        gbc.setState(0x30e, 0x146f, 0x1ea0, 0x754, 0xdfa1, 0x7357, 0x0, 0x1);
        gbc.writeMem(0x30e, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x7, gbc.b());
        EXPECT(0x54, gbc.c());
        EXPECT(0xdf, gbc.d());
        EXPECT(0xa1, gbc.e());
        EXPECT(0x73, gbc.h());
        EXPECT(0x57, gbc.l());
        EXPECT(0x146f, gbc.sp());
        EXPECT(0x30f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0036
        gbc.setState(0x7c0a, 0x3247, 0x5a00, 0xfb96, 0x3529, 0xb7cb, 0x0, 0x1);
        gbc.writeMem(0x7c0a, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xfb, gbc.b());
        EXPECT(0x96, gbc.c());
        EXPECT(0x35, gbc.d());
        EXPECT(0x29, gbc.e());
        EXPECT(0xb7, gbc.h());
        EXPECT(0xcb, gbc.l());
        EXPECT(0x3247, gbc.sp());
        EXPECT(0x7c0b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0037
        gbc.setState(0x8c5c, 0x57cc, 0xf30, 0x813b, 0xa3b8, 0x282b, 0x0, 0x1);
        gbc.writeMem(0x8c5c, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x81, gbc.b());
        EXPECT(0x3b, gbc.c());
        EXPECT(0xa3, gbc.d());
        EXPECT(0xb8, gbc.e());
        EXPECT(0x28, gbc.h());
        EXPECT(0x2b, gbc.l());
        EXPECT(0x57cc, gbc.sp());
        EXPECT(0x8c5d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x8c5c));
        // AF 0038
        gbc.setState(0xe36f, 0x6a51, 0x9770, 0xcd14, 0x4ad6, 0xfc2, 0x1, 0x0);
        gbc.writeMem(0xe36f, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xcd, gbc.b());
        EXPECT(0x14, gbc.c());
        EXPECT(0x4a, gbc.d());
        EXPECT(0xd6, gbc.e());
        EXPECT(0xf, gbc.h());
        EXPECT(0xc2, gbc.l());
        EXPECT(0x6a51, gbc.sp());
        EXPECT(0xe370, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xe36f));
        // AF 0039
        gbc.setState(0xd642, 0x8949, 0xbe90, 0x24ce, 0x9fb7, 0xb402, 0x0, 0x0);
        gbc.writeMem(0xd642, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x24, gbc.b());
        EXPECT(0xce, gbc.c());
        EXPECT(0x9f, gbc.d());
        EXPECT(0xb7, gbc.e());
        EXPECT(0xb4, gbc.h());
        EXPECT(0x2, gbc.l());
        EXPECT(0x8949, gbc.sp());
        EXPECT(0xd643, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xd642));
        // AF 003A
        gbc.setState(0xc099, 0x1a5, 0x70a0, 0x94db, 0x6379, 0xe7be, 0x1, 0x1);
        gbc.writeMem(0xc099, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x94, gbc.b());
        EXPECT(0xdb, gbc.c());
        EXPECT(0x63, gbc.d());
        EXPECT(0x79, gbc.e());
        EXPECT(0xe7, gbc.h());
        EXPECT(0xbe, gbc.l());
        EXPECT(0x1a5, gbc.sp());
        EXPECT(0xc09a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xc099));
        // AF 003B
        gbc.setState(0x6659, 0x3c64, 0xfbb0, 0xd77e, 0x7c36, 0x8540, 0x0, 0x1);
        gbc.writeMem(0x6659, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xd7, gbc.b());
        EXPECT(0x7e, gbc.c());
        EXPECT(0x7c, gbc.d());
        EXPECT(0x36, gbc.e());
        EXPECT(0x85, gbc.h());
        EXPECT(0x40, gbc.l());
        EXPECT(0x3c64, gbc.sp());
        EXPECT(0x665a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 003C
        gbc.setState(0x9e36, 0xff19, 0x5470, 0x28ec, 0x9355, 0x7c1e, 0x0, 0x0);
        gbc.writeMem(0x9e36, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x28, gbc.b());
        EXPECT(0xec, gbc.c());
        EXPECT(0x93, gbc.d());
        EXPECT(0x55, gbc.e());
        EXPECT(0x7c, gbc.h());
        EXPECT(0x1e, gbc.l());
        EXPECT(0xff19, gbc.sp());
        EXPECT(0x9e37, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x9e36));
        // AF 003D
        gbc.setState(0x6a70, 0x2f1a, 0x45b0, 0x45, 0x117d, 0xfa4b, 0x1, 0x1);
        gbc.writeMem(0x6a70, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x0, gbc.b());
        EXPECT(0x45, gbc.c());
        EXPECT(0x11, gbc.d());
        EXPECT(0x7d, gbc.e());
        EXPECT(0xfa, gbc.h());
        EXPECT(0x4b, gbc.l());
        EXPECT(0x2f1a, gbc.sp());
        EXPECT(0x6a71, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 003F
        gbc.setState(0x405f, 0xc81d, 0xdf30, 0x1d14, 0xedd1, 0x1221, 0x0, 0x1);
        gbc.writeMem(0x405f, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x1d, gbc.b());
        EXPECT(0x14, gbc.c());
        EXPECT(0xed, gbc.d());
        EXPECT(0xd1, gbc.e());
        EXPECT(0x12, gbc.h());
        EXPECT(0x21, gbc.l());
        EXPECT(0xc81d, gbc.sp());
        EXPECT(0x4060, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0040
        gbc.setState(0x8753, 0xeede, 0xb570, 0x8240, 0xb042, 0xaa7e, 0x1, 0x1);
        gbc.writeMem(0x8753, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x82, gbc.b());
        EXPECT(0x40, gbc.c());
        EXPECT(0xb0, gbc.d());
        EXPECT(0x42, gbc.e());
        EXPECT(0xaa, gbc.h());
        EXPECT(0x7e, gbc.l());
        EXPECT(0xeede, gbc.sp());
        EXPECT(0x8754, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x8753));
        // AF 0041
        gbc.setState(0xee2e, 0x1d2, 0x7ef0, 0xec1b, 0x4824, 0xae4f, 0x0, 0x0);
        gbc.writeMem(0xee2e, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xec, gbc.b());
        EXPECT(0x1b, gbc.c());
        EXPECT(0x48, gbc.d());
        EXPECT(0x24, gbc.e());
        EXPECT(0xae, gbc.h());
        EXPECT(0x4f, gbc.l());
        EXPECT(0x1d2, gbc.sp());
        EXPECT(0xee2f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xee2e));
        // AF 0042
        gbc.setState(0x2a84, 0x940d, 0x2300, 0xb68d, 0xd7c1, 0x98fe, 0x0, 0x0);
        gbc.writeMem(0x2a84, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xb6, gbc.b());
        EXPECT(0x8d, gbc.c());
        EXPECT(0xd7, gbc.d());
        EXPECT(0xc1, gbc.e());
        EXPECT(0x98, gbc.h());
        EXPECT(0xfe, gbc.l());
        EXPECT(0x940d, gbc.sp());
        EXPECT(0x2a85, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0043
        gbc.setState(0xaa17, 0x9aae, 0x4b40, 0x80f8, 0x5e4d, 0x64fe, 0x0, 0x0);
        gbc.writeMem(0xaa17, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x80, gbc.b());
        EXPECT(0xf8, gbc.c());
        EXPECT(0x5e, gbc.d());
        EXPECT(0x4d, gbc.e());
        EXPECT(0x64, gbc.h());
        EXPECT(0xfe, gbc.l());
        EXPECT(0x9aae, gbc.sp());
        EXPECT(0xaa18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xaa17));
        // AF 0044
        gbc.setState(0x82c9, 0x1c54, 0x6ee0, 0x8d16, 0xf601, 0xeef9, 0x0, 0x1);
        gbc.writeMem(0x82c9, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x8d, gbc.b());
        EXPECT(0x16, gbc.c());
        EXPECT(0xf6, gbc.d());
        EXPECT(0x1, gbc.e());
        EXPECT(0xee, gbc.h());
        EXPECT(0xf9, gbc.l());
        EXPECT(0x1c54, gbc.sp());
        EXPECT(0x82ca, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x82c9));
        // AF 0045
        gbc.setState(0x644b, 0x9273, 0x11a0, 0xa434, 0x9e30, 0xb60a, 0x0, 0x1);
        gbc.writeMem(0x644b, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xa4, gbc.b());
        EXPECT(0x34, gbc.c());
        EXPECT(0x9e, gbc.d());
        EXPECT(0x30, gbc.e());
        EXPECT(0xb6, gbc.h());
        EXPECT(0xa, gbc.l());
        EXPECT(0x9273, gbc.sp());
        EXPECT(0x644c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0048
        gbc.setState(0x29f, 0x9677, 0x2a0, 0xf1ca, 0xa5ba, 0x665f, 0x1, 0x1);
        gbc.writeMem(0x29f, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xf1, gbc.b());
        EXPECT(0xca, gbc.c());
        EXPECT(0xa5, gbc.d());
        EXPECT(0xba, gbc.e());
        EXPECT(0x66, gbc.h());
        EXPECT(0x5f, gbc.l());
        EXPECT(0x9677, gbc.sp());
        EXPECT(0x2a0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0049
        gbc.setState(0x105b, 0xdd, 0xf850, 0xecd7, 0xa76d, 0x3087, 0x1, 0x1);
        gbc.writeMem(0x105b, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xec, gbc.b());
        EXPECT(0xd7, gbc.c());
        EXPECT(0xa7, gbc.d());
        EXPECT(0x6d, gbc.e());
        EXPECT(0x30, gbc.h());
        EXPECT(0x87, gbc.l());
        EXPECT(0xdd, gbc.sp());
        EXPECT(0x105c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 004A
        gbc.setState(0x7714, 0x915b, 0x3110, 0x2beb, 0x9420, 0x2b34, 0x1, 0x0);
        gbc.writeMem(0x7714, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x2b, gbc.b());
        EXPECT(0xeb, gbc.c());
        EXPECT(0x94, gbc.d());
        EXPECT(0x20, gbc.e());
        EXPECT(0x2b, gbc.h());
        EXPECT(0x34, gbc.l());
        EXPECT(0x915b, gbc.sp());
        EXPECT(0x7715, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 004B
        gbc.setState(0x2586, 0x6560, 0x6600, 0x2484, 0x64c2, 0x9274, 0x1, 0x1);
        gbc.writeMem(0x2586, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x24, gbc.b());
        EXPECT(0x84, gbc.c());
        EXPECT(0x64, gbc.d());
        EXPECT(0xc2, gbc.e());
        EXPECT(0x92, gbc.h());
        EXPECT(0x74, gbc.l());
        EXPECT(0x6560, gbc.sp());
        EXPECT(0x2587, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 004C
        gbc.setState(0x11d1, 0x13bb, 0x4370, 0xe2b2, 0x4ded, 0xe115, 0x0, 0x0);
        gbc.writeMem(0x11d1, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xe2, gbc.b());
        EXPECT(0xb2, gbc.c());
        EXPECT(0x4d, gbc.d());
        EXPECT(0xed, gbc.e());
        EXPECT(0xe1, gbc.h());
        EXPECT(0x15, gbc.l());
        EXPECT(0x13bb, gbc.sp());
        EXPECT(0x11d2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 004D
        gbc.setState(0x3513, 0xa150, 0xdcc0, 0xeee8, 0x2715, 0x3816, 0x1, 0x0);
        gbc.writeMem(0x3513, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xee, gbc.b());
        EXPECT(0xe8, gbc.c());
        EXPECT(0x27, gbc.d());
        EXPECT(0x15, gbc.e());
        EXPECT(0x38, gbc.h());
        EXPECT(0x16, gbc.l());
        EXPECT(0xa150, gbc.sp());
        EXPECT(0x3514, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 004E
        gbc.setState(0xdf4b, 0x7cc3, 0x4650, 0x699, 0xd96, 0x464d, 0x1, 0x0);
        gbc.writeMem(0xdf4b, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x6, gbc.b());
        EXPECT(0x99, gbc.c());
        EXPECT(0xd, gbc.d());
        EXPECT(0x96, gbc.e());
        EXPECT(0x46, gbc.h());
        EXPECT(0x4d, gbc.l());
        EXPECT(0x7cc3, gbc.sp());
        EXPECT(0xdf4c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xdf4b));
        // AF 004F
        gbc.setState(0x39d8, 0x5405, 0xce20, 0xde6c, 0xa802, 0x2437, 0x1, 0x0);
        gbc.writeMem(0x39d8, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xde, gbc.b());
        EXPECT(0x6c, gbc.c());
        EXPECT(0xa8, gbc.d());
        EXPECT(0x2, gbc.e());
        EXPECT(0x24, gbc.h());
        EXPECT(0x37, gbc.l());
        EXPECT(0x5405, gbc.sp());
        EXPECT(0x39d9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0050
        gbc.setState(0x6bfe, 0xb513, 0xbd0, 0x92b8, 0xfda4, 0x399f, 0x1, 0x0);
        gbc.writeMem(0x6bfe, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x92, gbc.b());
        EXPECT(0xb8, gbc.c());
        EXPECT(0xfd, gbc.d());
        EXPECT(0xa4, gbc.e());
        EXPECT(0x39, gbc.h());
        EXPECT(0x9f, gbc.l());
        EXPECT(0xb513, gbc.sp());
        EXPECT(0x6bff, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0051
        gbc.setState(0x6e12, 0x23fc, 0x25c0, 0xad0b, 0x724, 0x3584, 0x0, 0x1);
        gbc.writeMem(0x6e12, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xad, gbc.b());
        EXPECT(0xb, gbc.c());
        EXPECT(0x7, gbc.d());
        EXPECT(0x24, gbc.e());
        EXPECT(0x35, gbc.h());
        EXPECT(0x84, gbc.l());
        EXPECT(0x23fc, gbc.sp());
        EXPECT(0x6e13, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0052
        gbc.setState(0x206a, 0x73b9, 0x7f40, 0x8dfc, 0xbd3b, 0x6a57, 0x0, 0x1);
        gbc.writeMem(0x206a, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x8d, gbc.b());
        EXPECT(0xfc, gbc.c());
        EXPECT(0xbd, gbc.d());
        EXPECT(0x3b, gbc.e());
        EXPECT(0x6a, gbc.h());
        EXPECT(0x57, gbc.l());
        EXPECT(0x73b9, gbc.sp());
        EXPECT(0x206b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0054
        gbc.setState(0xef40, 0x2169, 0x73b0, 0x4427, 0x884a, 0x5f3e, 0x1, 0x1);
        gbc.writeMem(0xef40, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x44, gbc.b());
        EXPECT(0x27, gbc.c());
        EXPECT(0x88, gbc.d());
        EXPECT(0x4a, gbc.e());
        EXPECT(0x5f, gbc.h());
        EXPECT(0x3e, gbc.l());
        EXPECT(0x2169, gbc.sp());
        EXPECT(0xef41, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xef40));
        // AF 0055
        gbc.setState(0x6b81, 0xd6ff, 0x9430, 0xedb5, 0x6c3d, 0x6122, 0x1, 0x0);
        gbc.writeMem(0x6b81, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xed, gbc.b());
        EXPECT(0xb5, gbc.c());
        EXPECT(0x6c, gbc.d());
        EXPECT(0x3d, gbc.e());
        EXPECT(0x61, gbc.h());
        EXPECT(0x22, gbc.l());
        EXPECT(0xd6ff, gbc.sp());
        EXPECT(0x6b82, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0056
        gbc.setState(0xd9f3, 0x2c3c, 0xb000, 0x35c5, 0xc833, 0x20b, 0x0, 0x0);
        gbc.writeMem(0xd9f3, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x35, gbc.b());
        EXPECT(0xc5, gbc.c());
        EXPECT(0xc8, gbc.d());
        EXPECT(0x33, gbc.e());
        EXPECT(0x2, gbc.h());
        EXPECT(0xb, gbc.l());
        EXPECT(0x2c3c, gbc.sp());
        EXPECT(0xd9f4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xd9f3));
        // AF 0057
        gbc.setState(0xd9ac, 0xacfc, 0x3f20, 0x59a1, 0xcdb8, 0x9d7b, 0x1, 0x1);
        gbc.writeMem(0xd9ac, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x59, gbc.b());
        EXPECT(0xa1, gbc.c());
        EXPECT(0xcd, gbc.d());
        EXPECT(0xb8, gbc.e());
        EXPECT(0x9d, gbc.h());
        EXPECT(0x7b, gbc.l());
        EXPECT(0xacfc, gbc.sp());
        EXPECT(0xd9ad, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xd9ac));
        // AF 0058
        gbc.setState(0xe346, 0xd58e, 0x2ce0, 0x3c7c, 0xfe1d, 0x7b1e, 0x0, 0x0);
        gbc.writeMem(0xe346, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x3c, gbc.b());
        EXPECT(0x7c, gbc.c());
        EXPECT(0xfe, gbc.d());
        EXPECT(0x1d, gbc.e());
        EXPECT(0x7b, gbc.h());
        EXPECT(0x1e, gbc.l());
        EXPECT(0xd58e, gbc.sp());
        EXPECT(0xe347, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xe346));
        // AF 0059
        gbc.setState(0xe3b0, 0xb2cb, 0xb550, 0x118f, 0x7924, 0xb016, 0x0, 0x1);
        gbc.writeMem(0xe3b0, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x11, gbc.b());
        EXPECT(0x8f, gbc.c());
        EXPECT(0x79, gbc.d());
        EXPECT(0x24, gbc.e());
        EXPECT(0xb0, gbc.h());
        EXPECT(0x16, gbc.l());
        EXPECT(0xb2cb, gbc.sp());
        EXPECT(0xe3b1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xe3b0));
        // AF 005A
        gbc.setState(0xcb6c, 0xb6e, 0xff80, 0x1693, 0xb365, 0x7db5, 0x0, 0x0);
        gbc.writeMem(0xcb6c, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x16, gbc.b());
        EXPECT(0x93, gbc.c());
        EXPECT(0xb3, gbc.d());
        EXPECT(0x65, gbc.e());
        EXPECT(0x7d, gbc.h());
        EXPECT(0xb5, gbc.l());
        EXPECT(0xb6e, gbc.sp());
        EXPECT(0xcb6d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xcb6c));
        // AF 005B
        gbc.setState(0xc98d, 0xa70d, 0xe2e0, 0x4ac0, 0x1255, 0x8c7, 0x0, 0x1);
        gbc.writeMem(0xc98d, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x4a, gbc.b());
        EXPECT(0xc0, gbc.c());
        EXPECT(0x12, gbc.d());
        EXPECT(0x55, gbc.e());
        EXPECT(0x8, gbc.h());
        EXPECT(0xc7, gbc.l());
        EXPECT(0xa70d, gbc.sp());
        EXPECT(0xc98e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xc98d));
        // AF 005C
        gbc.setState(0x29cc, 0xa582, 0xa50, 0xe4d, 0xac12, 0x2241, 0x1, 0x0);
        gbc.writeMem(0x29cc, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xe, gbc.b());
        EXPECT(0x4d, gbc.c());
        EXPECT(0xac, gbc.d());
        EXPECT(0x12, gbc.e());
        EXPECT(0x22, gbc.h());
        EXPECT(0x41, gbc.l());
        EXPECT(0xa582, gbc.sp());
        EXPECT(0x29cd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 005D
        gbc.setState(0xbdac, 0xa255, 0xbc60, 0x736a, 0x9646, 0x1c7a, 0x1, 0x0);
        gbc.writeMem(0xbdac, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x73, gbc.b());
        EXPECT(0x6a, gbc.c());
        EXPECT(0x96, gbc.d());
        EXPECT(0x46, gbc.e());
        EXPECT(0x1c, gbc.h());
        EXPECT(0x7a, gbc.l());
        EXPECT(0xa255, gbc.sp());
        EXPECT(0xbdad, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xbdac));
        // AF 005E
        gbc.setState(0xc7c1, 0x65ac, 0x2110, 0xccf3, 0x2303, 0x686b, 0x0, 0x1);
        gbc.writeMem(0xc7c1, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xcc, gbc.b());
        EXPECT(0xf3, gbc.c());
        EXPECT(0x23, gbc.d());
        EXPECT(0x3, gbc.e());
        EXPECT(0x68, gbc.h());
        EXPECT(0x6b, gbc.l());
        EXPECT(0x65ac, gbc.sp());
        EXPECT(0xc7c2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xc7c1));
        // AF 0060
        gbc.setState(0x1804, 0x54d8, 0x6a00, 0x8036, 0x4ca, 0x31a6, 0x1, 0x0);
        gbc.writeMem(0x1804, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x80, gbc.b());
        EXPECT(0x36, gbc.c());
        EXPECT(0x4, gbc.d());
        EXPECT(0xca, gbc.e());
        EXPECT(0x31, gbc.h());
        EXPECT(0xa6, gbc.l());
        EXPECT(0x54d8, gbc.sp());
        EXPECT(0x1805, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0061
        gbc.setState(0xa420, 0x7035, 0x7a70, 0x7220, 0xc59a, 0x13f0, 0x1, 0x1);
        gbc.writeMem(0xa420, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x72, gbc.b());
        EXPECT(0x20, gbc.c());
        EXPECT(0xc5, gbc.d());
        EXPECT(0x9a, gbc.e());
        EXPECT(0x13, gbc.h());
        EXPECT(0xf0, gbc.l());
        EXPECT(0x7035, gbc.sp());
        EXPECT(0xa421, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xa420));
        // AF 0064
        gbc.setState(0x799d, 0xc956, 0x12a0, 0x7f29, 0xafee, 0xa03d, 0x1, 0x1);
        gbc.writeMem(0x799d, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x7f, gbc.b());
        EXPECT(0x29, gbc.c());
        EXPECT(0xaf, gbc.d());
        EXPECT(0xee, gbc.e());
        EXPECT(0xa0, gbc.h());
        EXPECT(0x3d, gbc.l());
        EXPECT(0xc956, gbc.sp());
        EXPECT(0x799e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0066
        gbc.setState(0xa780, 0x4daf, 0xd7f0, 0x347c, 0x46a5, 0x38f6, 0x1, 0x1);
        gbc.writeMem(0xa780, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x34, gbc.b());
        EXPECT(0x7c, gbc.c());
        EXPECT(0x46, gbc.d());
        EXPECT(0xa5, gbc.e());
        EXPECT(0x38, gbc.h());
        EXPECT(0xf6, gbc.l());
        EXPECT(0x4daf, gbc.sp());
        EXPECT(0xa781, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xa780));
        // AF 0067
        gbc.setState(0x77e, 0x154d, 0x8820, 0x689c, 0xfd66, 0x2a40, 0x0, 0x0);
        gbc.writeMem(0x77e, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x68, gbc.b());
        EXPECT(0x9c, gbc.c());
        EXPECT(0xfd, gbc.d());
        EXPECT(0x66, gbc.e());
        EXPECT(0x2a, gbc.h());
        EXPECT(0x40, gbc.l());
        EXPECT(0x154d, gbc.sp());
        EXPECT(0x77f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0068
        gbc.setState(0x3b89, 0x2ccb, 0x30a0, 0x3b1f, 0xd53e, 0x24bb, 0x1, 0x0);
        gbc.writeMem(0x3b89, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x3b, gbc.b());
        EXPECT(0x1f, gbc.c());
        EXPECT(0xd5, gbc.d());
        EXPECT(0x3e, gbc.e());
        EXPECT(0x24, gbc.h());
        EXPECT(0xbb, gbc.l());
        EXPECT(0x2ccb, gbc.sp());
        EXPECT(0x3b8a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0069
        gbc.setState(0x3b7f, 0x7150, 0x1030, 0x124, 0xa604, 0x1506, 0x0, 0x1);
        gbc.writeMem(0x3b7f, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x1, gbc.b());
        EXPECT(0x24, gbc.c());
        EXPECT(0xa6, gbc.d());
        EXPECT(0x4, gbc.e());
        EXPECT(0x15, gbc.h());
        EXPECT(0x6, gbc.l());
        EXPECT(0x7150, gbc.sp());
        EXPECT(0x3b80, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 006A
        gbc.setState(0x8d98, 0x24b4, 0x4fe0, 0xe4ec, 0x6f6a, 0xef58, 0x0, 0x0);
        gbc.writeMem(0x8d98, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xe4, gbc.b());
        EXPECT(0xec, gbc.c());
        EXPECT(0x6f, gbc.d());
        EXPECT(0x6a, gbc.e());
        EXPECT(0xef, gbc.h());
        EXPECT(0x58, gbc.l());
        EXPECT(0x24b4, gbc.sp());
        EXPECT(0x8d99, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x8d98));
        // AF 006B
        gbc.setState(0x87ae, 0xa834, 0xdcc0, 0x9a73, 0xd16a, 0x270e, 0x0, 0x0);
        gbc.writeMem(0x87ae, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x9a, gbc.b());
        EXPECT(0x73, gbc.c());
        EXPECT(0xd1, gbc.d());
        EXPECT(0x6a, gbc.e());
        EXPECT(0x27, gbc.h());
        EXPECT(0xe, gbc.l());
        EXPECT(0xa834, gbc.sp());
        EXPECT(0x87af, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x87ae));
        // AF 006C
        gbc.setState(0x8bc5, 0x60bf, 0x4d80, 0x3f9c, 0xff19, 0x1920, 0x1, 0x1);
        gbc.writeMem(0x8bc5, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x3f, gbc.b());
        EXPECT(0x9c, gbc.c());
        EXPECT(0xff, gbc.d());
        EXPECT(0x19, gbc.e());
        EXPECT(0x19, gbc.h());
        EXPECT(0x20, gbc.l());
        EXPECT(0x60bf, gbc.sp());
        EXPECT(0x8bc6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x8bc5));
        // AF 006D
        gbc.setState(0x87ef, 0x5995, 0xe320, 0x8f9f, 0x9012, 0x1352, 0x1, 0x1);
        gbc.writeMem(0x87ef, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x8f, gbc.b());
        EXPECT(0x9f, gbc.c());
        EXPECT(0x90, gbc.d());
        EXPECT(0x12, gbc.e());
        EXPECT(0x13, gbc.h());
        EXPECT(0x52, gbc.l());
        EXPECT(0x5995, gbc.sp());
        EXPECT(0x87f0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x87ef));
        // AF 006F
        gbc.setState(0xabac, 0xa1a7, 0x9670, 0xaf0c, 0xd0f, 0x8e7c, 0x1, 0x1);
        gbc.writeMem(0xabac, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xaf, gbc.b());
        EXPECT(0xc, gbc.c());
        EXPECT(0xd, gbc.d());
        EXPECT(0xf, gbc.e());
        EXPECT(0x8e, gbc.h());
        EXPECT(0x7c, gbc.l());
        EXPECT(0xa1a7, gbc.sp());
        EXPECT(0xabad, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xabac));
        // AF 0070
        gbc.setState(0x79f0, 0xecc6, 0x6430, 0xc6cc, 0xed46, 0xff7a, 0x1, 0x0);
        gbc.writeMem(0x79f0, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xc6, gbc.b());
        EXPECT(0xcc, gbc.c());
        EXPECT(0xed, gbc.d());
        EXPECT(0x46, gbc.e());
        EXPECT(0xff, gbc.h());
        EXPECT(0x7a, gbc.l());
        EXPECT(0xecc6, gbc.sp());
        EXPECT(0x79f1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0071
        gbc.setState(0xab32, 0x6a36, 0xc8b0, 0x6ad4, 0xf1a, 0x6b96, 0x0, 0x0);
        gbc.writeMem(0xab32, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x6a, gbc.b());
        EXPECT(0xd4, gbc.c());
        EXPECT(0xf, gbc.d());
        EXPECT(0x1a, gbc.e());
        EXPECT(0x6b, gbc.h());
        EXPECT(0x96, gbc.l());
        EXPECT(0x6a36, gbc.sp());
        EXPECT(0xab33, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xab32));
        // AF 0072
        gbc.setState(0x6a56, 0x58f0, 0x7380, 0xbcf5, 0xce7b, 0xac1d, 0x1, 0x1);
        gbc.writeMem(0x6a56, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xbc, gbc.b());
        EXPECT(0xf5, gbc.c());
        EXPECT(0xce, gbc.d());
        EXPECT(0x7b, gbc.e());
        EXPECT(0xac, gbc.h());
        EXPECT(0x1d, gbc.l());
        EXPECT(0x58f0, gbc.sp());
        EXPECT(0x6a57, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0073
        gbc.setState(0x2644, 0xc625, 0x4c50, 0x1d92, 0xb917, 0xe5b2, 0x0, 0x1);
        gbc.writeMem(0x2644, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x1d, gbc.b());
        EXPECT(0x92, gbc.c());
        EXPECT(0xb9, gbc.d());
        EXPECT(0x17, gbc.e());
        EXPECT(0xe5, gbc.h());
        EXPECT(0xb2, gbc.l());
        EXPECT(0xc625, gbc.sp());
        EXPECT(0x2645, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0074
        gbc.setState(0x54f1, 0xb1d1, 0x7d20, 0xa80f, 0xb79b, 0x7741, 0x1, 0x1);
        gbc.writeMem(0x54f1, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xa8, gbc.b());
        EXPECT(0xf, gbc.c());
        EXPECT(0xb7, gbc.d());
        EXPECT(0x9b, gbc.e());
        EXPECT(0x77, gbc.h());
        EXPECT(0x41, gbc.l());
        EXPECT(0xb1d1, gbc.sp());
        EXPECT(0x54f2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0075
        gbc.setState(0x60eb, 0x5c5a, 0xc5b0, 0xdcfe, 0x6311, 0x9114, 0x0, 0x1);
        gbc.writeMem(0x60eb, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xdc, gbc.b());
        EXPECT(0xfe, gbc.c());
        EXPECT(0x63, gbc.d());
        EXPECT(0x11, gbc.e());
        EXPECT(0x91, gbc.h());
        EXPECT(0x14, gbc.l());
        EXPECT(0x5c5a, gbc.sp());
        EXPECT(0x60ec, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0076
        gbc.setState(0xa8a2, 0x1b35, 0xd680, 0xd29, 0xead6, 0xf97a, 0x1, 0x1);
        gbc.writeMem(0xa8a2, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xd, gbc.b());
        EXPECT(0x29, gbc.c());
        EXPECT(0xea, gbc.d());
        EXPECT(0xd6, gbc.e());
        EXPECT(0xf9, gbc.h());
        EXPECT(0x7a, gbc.l());
        EXPECT(0x1b35, gbc.sp());
        EXPECT(0xa8a3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xa8a2));
        // AF 0077
        gbc.setState(0xd9cc, 0x4072, 0xa3d0, 0xbc1c, 0xd8ca, 0x5dd5, 0x1, 0x0);
        gbc.writeMem(0xd9cc, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xbc, gbc.b());
        EXPECT(0x1c, gbc.c());
        EXPECT(0xd8, gbc.d());
        EXPECT(0xca, gbc.e());
        EXPECT(0x5d, gbc.h());
        EXPECT(0xd5, gbc.l());
        EXPECT(0x4072, gbc.sp());
        EXPECT(0xd9cd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xd9cc));
        // AF 0078
        gbc.setState(0xbcb9, 0x42ee, 0x3ca0, 0xebfb, 0x1468, 0x6c91, 0x1, 0x1);
        gbc.writeMem(0xbcb9, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xeb, gbc.b());
        EXPECT(0xfb, gbc.c());
        EXPECT(0x14, gbc.d());
        EXPECT(0x68, gbc.e());
        EXPECT(0x6c, gbc.h());
        EXPECT(0x91, gbc.l());
        EXPECT(0x42ee, gbc.sp());
        EXPECT(0xbcba, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xbcb9));
        // AF 0079
        gbc.setState(0xbd9c, 0xf23c, 0xa630, 0x9781, 0x1505, 0xde89, 0x1, 0x1);
        gbc.writeMem(0xbd9c, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x97, gbc.b());
        EXPECT(0x81, gbc.c());
        EXPECT(0x15, gbc.d());
        EXPECT(0x5, gbc.e());
        EXPECT(0xde, gbc.h());
        EXPECT(0x89, gbc.l());
        EXPECT(0xf23c, gbc.sp());
        EXPECT(0xbd9d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xbd9c));
        // AF 007A
        gbc.setState(0xdc0a, 0x4232, 0xc7c0, 0xccac, 0xae, 0x6d3f, 0x1, 0x1);
        gbc.writeMem(0xdc0a, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xcc, gbc.b());
        EXPECT(0xac, gbc.c());
        EXPECT(0x0, gbc.d());
        EXPECT(0xae, gbc.e());
        EXPECT(0x6d, gbc.h());
        EXPECT(0x3f, gbc.l());
        EXPECT(0x4232, gbc.sp());
        EXPECT(0xdc0b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xdc0a));
        // AF 007B
        gbc.setState(0x4bb, 0x2fed, 0x55c0, 0xa4c9, 0x1342, 0x94fe, 0x1, 0x1);
        gbc.writeMem(0x4bb, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xa4, gbc.b());
        EXPECT(0xc9, gbc.c());
        EXPECT(0x13, gbc.d());
        EXPECT(0x42, gbc.e());
        EXPECT(0x94, gbc.h());
        EXPECT(0xfe, gbc.l());
        EXPECT(0x2fed, gbc.sp());
        EXPECT(0x4bc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 007C
        gbc.setState(0x26c0, 0x851, 0xdfa0, 0xe083, 0xae35, 0x7bbd, 0x1, 0x1);
        gbc.writeMem(0x26c0, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xe0, gbc.b());
        EXPECT(0x83, gbc.c());
        EXPECT(0xae, gbc.d());
        EXPECT(0x35, gbc.e());
        EXPECT(0x7b, gbc.h());
        EXPECT(0xbd, gbc.l());
        EXPECT(0x851, gbc.sp());
        EXPECT(0x26c1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 007D
        gbc.setState(0x399, 0x75a5, 0x1c0, 0x808e, 0x60ec, 0xccf2, 0x0, 0x1);
        gbc.writeMem(0x399, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x80, gbc.b());
        EXPECT(0x8e, gbc.c());
        EXPECT(0x60, gbc.d());
        EXPECT(0xec, gbc.e());
        EXPECT(0xcc, gbc.h());
        EXPECT(0xf2, gbc.l());
        EXPECT(0x75a5, gbc.sp());
        EXPECT(0x39a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 007E
        gbc.setState(0xa71d, 0x9db2, 0x9160, 0xbacd, 0x2bfc, 0xada4, 0x1, 0x1);
        gbc.writeMem(0xa71d, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xba, gbc.b());
        EXPECT(0xcd, gbc.c());
        EXPECT(0x2b, gbc.d());
        EXPECT(0xfc, gbc.e());
        EXPECT(0xad, gbc.h());
        EXPECT(0xa4, gbc.l());
        EXPECT(0x9db2, gbc.sp());
        EXPECT(0xa71e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xa71d));
        // AF 007F
        gbc.setState(0xe04a, 0xd506, 0x5570, 0x9ad4, 0xf814, 0x3032, 0x1, 0x0);
        gbc.writeMem(0xe04a, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x9a, gbc.b());
        EXPECT(0xd4, gbc.c());
        EXPECT(0xf8, gbc.d());
        EXPECT(0x14, gbc.e());
        EXPECT(0x30, gbc.h());
        EXPECT(0x32, gbc.l());
        EXPECT(0xd506, gbc.sp());
        EXPECT(0xe04b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xe04a));
        // AF 0080
        gbc.setState(0xb04e, 0xb90f, 0x40d0, 0x1539, 0xcae9, 0xfc7a, 0x1, 0x1);
        gbc.writeMem(0xb04e, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x15, gbc.b());
        EXPECT(0x39, gbc.c());
        EXPECT(0xca, gbc.d());
        EXPECT(0xe9, gbc.e());
        EXPECT(0xfc, gbc.h());
        EXPECT(0x7a, gbc.l());
        EXPECT(0xb90f, gbc.sp());
        EXPECT(0xb04f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xb04e));
        // AF 0081
        gbc.setState(0xee85, 0xbd66, 0x7130, 0xf317, 0x3272, 0x189c, 0x0, 0x0);
        gbc.writeMem(0xee85, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xf3, gbc.b());
        EXPECT(0x17, gbc.c());
        EXPECT(0x32, gbc.d());
        EXPECT(0x72, gbc.e());
        EXPECT(0x18, gbc.h());
        EXPECT(0x9c, gbc.l());
        EXPECT(0xbd66, gbc.sp());
        EXPECT(0xee86, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xee85));
        // AF 0082
        gbc.setState(0x58de, 0xde82, 0xd4e0, 0x3446, 0x9b36, 0x14a6, 0x1, 0x1);
        gbc.writeMem(0x58de, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x34, gbc.b());
        EXPECT(0x46, gbc.c());
        EXPECT(0x9b, gbc.d());
        EXPECT(0x36, gbc.e());
        EXPECT(0x14, gbc.h());
        EXPECT(0xa6, gbc.l());
        EXPECT(0xde82, gbc.sp());
        EXPECT(0x58df, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0083
        gbc.setState(0x9b6d, 0xed25, 0x8050, 0xd697, 0xdaa2, 0xc340, 0x0, 0x0);
        gbc.writeMem(0x9b6d, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xd6, gbc.b());
        EXPECT(0x97, gbc.c());
        EXPECT(0xda, gbc.d());
        EXPECT(0xa2, gbc.e());
        EXPECT(0xc3, gbc.h());
        EXPECT(0x40, gbc.l());
        EXPECT(0xed25, gbc.sp());
        EXPECT(0x9b6e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x9b6d));
        // AF 0084
        gbc.setState(0xc10f, 0x6a25, 0x5300, 0xe7e8, 0xee60, 0x938b, 0x0, 0x1);
        gbc.writeMem(0xc10f, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xe7, gbc.b());
        EXPECT(0xe8, gbc.c());
        EXPECT(0xee, gbc.d());
        EXPECT(0x60, gbc.e());
        EXPECT(0x93, gbc.h());
        EXPECT(0x8b, gbc.l());
        EXPECT(0x6a25, gbc.sp());
        EXPECT(0xc110, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xc10f));
        // AF 0085
        gbc.setState(0xc7e4, 0x62cb, 0xfda0, 0x77c9, 0x813b, 0x2b4b, 0x1, 0x1);
        gbc.writeMem(0xc7e4, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x77, gbc.b());
        EXPECT(0xc9, gbc.c());
        EXPECT(0x81, gbc.d());
        EXPECT(0x3b, gbc.e());
        EXPECT(0x2b, gbc.h());
        EXPECT(0x4b, gbc.l());
        EXPECT(0x62cb, gbc.sp());
        EXPECT(0xc7e5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xc7e4));
        // AF 0086
        gbc.setState(0xecd2, 0x98a, 0x7a00, 0xb38e, 0xc6c5, 0xd689, 0x0, 0x1);
        gbc.writeMem(0xecd2, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xb3, gbc.b());
        EXPECT(0x8e, gbc.c());
        EXPECT(0xc6, gbc.d());
        EXPECT(0xc5, gbc.e());
        EXPECT(0xd6, gbc.h());
        EXPECT(0x89, gbc.l());
        EXPECT(0x98a, gbc.sp());
        EXPECT(0xecd3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xecd2));
        // AF 0087
        gbc.setState(0xc224, 0x8dfd, 0x61a0, 0xbe9c, 0xb464, 0xb553, 0x0, 0x0);
        gbc.writeMem(0xc224, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xbe, gbc.b());
        EXPECT(0x9c, gbc.c());
        EXPECT(0xb4, gbc.d());
        EXPECT(0x64, gbc.e());
        EXPECT(0xb5, gbc.h());
        EXPECT(0x53, gbc.l());
        EXPECT(0x8dfd, gbc.sp());
        EXPECT(0xc225, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xc224));
        // AF 0088
        gbc.setState(0xe399, 0xac13, 0xf20, 0x76df, 0xafb3, 0xe229, 0x1, 0x1);
        gbc.writeMem(0xe399, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x76, gbc.b());
        EXPECT(0xdf, gbc.c());
        EXPECT(0xaf, gbc.d());
        EXPECT(0xb3, gbc.e());
        EXPECT(0xe2, gbc.h());
        EXPECT(0x29, gbc.l());
        EXPECT(0xac13, gbc.sp());
        EXPECT(0xe39a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xe399));
        // AF 0089
        gbc.setState(0xbc5d, 0xec42, 0x98a0, 0xc0b6, 0x1c65, 0x9997, 0x1, 0x1);
        gbc.writeMem(0xbc5d, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xc0, gbc.b());
        EXPECT(0xb6, gbc.c());
        EXPECT(0x1c, gbc.d());
        EXPECT(0x65, gbc.e());
        EXPECT(0x99, gbc.h());
        EXPECT(0x97, gbc.l());
        EXPECT(0xec42, gbc.sp());
        EXPECT(0xbc5e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xbc5d));
        // AF 008A
        gbc.setState(0xea0e, 0x1bbb, 0xd680, 0x22b4, 0xbe62, 0xb281, 0x1, 0x0);
        gbc.writeMem(0xea0e, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x22, gbc.b());
        EXPECT(0xb4, gbc.c());
        EXPECT(0xbe, gbc.d());
        EXPECT(0x62, gbc.e());
        EXPECT(0xb2, gbc.h());
        EXPECT(0x81, gbc.l());
        EXPECT(0x1bbb, gbc.sp());
        EXPECT(0xea0f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xea0e));
        // AF 008B
        gbc.setState(0x8be9, 0xc226, 0x9fa0, 0x2a98, 0xb431, 0x86e1, 0x1, 0x0);
        gbc.writeMem(0x8be9, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x2a, gbc.b());
        EXPECT(0x98, gbc.c());
        EXPECT(0xb4, gbc.d());
        EXPECT(0x31, gbc.e());
        EXPECT(0x86, gbc.h());
        EXPECT(0xe1, gbc.l());
        EXPECT(0xc226, gbc.sp());
        EXPECT(0x8bea, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x8be9));
        // AF 008D
        gbc.setState(0x94fc, 0x22d1, 0x1d60, 0x52c7, 0x5228, 0x8606, 0x0, 0x1);
        gbc.writeMem(0x94fc, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x52, gbc.b());
        EXPECT(0xc7, gbc.c());
        EXPECT(0x52, gbc.d());
        EXPECT(0x28, gbc.e());
        EXPECT(0x86, gbc.h());
        EXPECT(0x6, gbc.l());
        EXPECT(0x22d1, gbc.sp());
        EXPECT(0x94fd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x94fc));
        // AF 008E
        gbc.setState(0x9c26, 0x4362, 0xa4f0, 0x47b3, 0xfe5d, 0x1598, 0x0, 0x1);
        gbc.writeMem(0x9c26, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x47, gbc.b());
        EXPECT(0xb3, gbc.c());
        EXPECT(0xfe, gbc.d());
        EXPECT(0x5d, gbc.e());
        EXPECT(0x15, gbc.h());
        EXPECT(0x98, gbc.l());
        EXPECT(0x4362, gbc.sp());
        EXPECT(0x9c27, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x9c26));
        // AF 008F
        gbc.setState(0xb9e2, 0x38c5, 0x9c30, 0x1c3e, 0xf3a8, 0xf01d, 0x0, 0x1);
        gbc.writeMem(0xb9e2, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x1c, gbc.b());
        EXPECT(0x3e, gbc.c());
        EXPECT(0xf3, gbc.d());
        EXPECT(0xa8, gbc.e());
        EXPECT(0xf0, gbc.h());
        EXPECT(0x1d, gbc.l());
        EXPECT(0x38c5, gbc.sp());
        EXPECT(0xb9e3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xb9e2));
        // AF 0090
        gbc.setState(0x7457, 0x849f, 0x72e0, 0x41de, 0xeadd, 0xeed5, 0x0, 0x0);
        gbc.writeMem(0x7457, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x41, gbc.b());
        EXPECT(0xde, gbc.c());
        EXPECT(0xea, gbc.d());
        EXPECT(0xdd, gbc.e());
        EXPECT(0xee, gbc.h());
        EXPECT(0xd5, gbc.l());
        EXPECT(0x849f, gbc.sp());
        EXPECT(0x7458, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0091
        gbc.setState(0x7f90, 0x281b, 0x3c30, 0x6223, 0xd581, 0xf8e5, 0x1, 0x0);
        gbc.writeMem(0x7f90, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x62, gbc.b());
        EXPECT(0x23, gbc.c());
        EXPECT(0xd5, gbc.d());
        EXPECT(0x81, gbc.e());
        EXPECT(0xf8, gbc.h());
        EXPECT(0xe5, gbc.l());
        EXPECT(0x281b, gbc.sp());
        EXPECT(0x7f91, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0092
        gbc.setState(0x14a, 0xaa56, 0x8c20, 0xd52a, 0xd690, 0xae1d, 0x1, 0x0);
        gbc.writeMem(0x14a, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xd5, gbc.b());
        EXPECT(0x2a, gbc.c());
        EXPECT(0xd6, gbc.d());
        EXPECT(0x90, gbc.e());
        EXPECT(0xae, gbc.h());
        EXPECT(0x1d, gbc.l());
        EXPECT(0xaa56, gbc.sp());
        EXPECT(0x14b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0093
        gbc.setState(0xdbcb, 0xf3fa, 0x4a60, 0x15db, 0xf072, 0x314c, 0x1, 0x0);
        gbc.writeMem(0xdbcb, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x15, gbc.b());
        EXPECT(0xdb, gbc.c());
        EXPECT(0xf0, gbc.d());
        EXPECT(0x72, gbc.e());
        EXPECT(0x31, gbc.h());
        EXPECT(0x4c, gbc.l());
        EXPECT(0xf3fa, gbc.sp());
        EXPECT(0xdbcc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xdbcb));
        // AF 0094
        gbc.setState(0x9ce2, 0x7708, 0xc6e0, 0xdc7c, 0x8bc2, 0x1a42, 0x1, 0x1);
        gbc.writeMem(0x9ce2, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xdc, gbc.b());
        EXPECT(0x7c, gbc.c());
        EXPECT(0x8b, gbc.d());
        EXPECT(0xc2, gbc.e());
        EXPECT(0x1a, gbc.h());
        EXPECT(0x42, gbc.l());
        EXPECT(0x7708, gbc.sp());
        EXPECT(0x9ce3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x9ce2));
        // AF 0095
        gbc.setState(0xe575, 0xb99d, 0x8540, 0x1568, 0xe480, 0x57e0, 0x0, 0x1);
        gbc.writeMem(0xe575, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x15, gbc.b());
        EXPECT(0x68, gbc.c());
        EXPECT(0xe4, gbc.d());
        EXPECT(0x80, gbc.e());
        EXPECT(0x57, gbc.h());
        EXPECT(0xe0, gbc.l());
        EXPECT(0xb99d, gbc.sp());
        EXPECT(0xe576, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xe575));
        // AF 0096
        gbc.setState(0xc1aa, 0x1de2, 0x42b0, 0x12ef, 0x1ddc, 0xd6ad, 0x1, 0x1);
        gbc.writeMem(0xc1aa, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x12, gbc.b());
        EXPECT(0xef, gbc.c());
        EXPECT(0x1d, gbc.d());
        EXPECT(0xdc, gbc.e());
        EXPECT(0xd6, gbc.h());
        EXPECT(0xad, gbc.l());
        EXPECT(0x1de2, gbc.sp());
        EXPECT(0xc1ab, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xc1aa));
        // AF 0097
        gbc.setState(0x26e5, 0xbfa9, 0x8080, 0x1106, 0x50a9, 0x2761, 0x1, 0x0);
        gbc.writeMem(0x26e5, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x11, gbc.b());
        EXPECT(0x6, gbc.c());
        EXPECT(0x50, gbc.d());
        EXPECT(0xa9, gbc.e());
        EXPECT(0x27, gbc.h());
        EXPECT(0x61, gbc.l());
        EXPECT(0xbfa9, gbc.sp());
        EXPECT(0x26e6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0098
        gbc.setState(0xc961, 0xe64, 0xd7a0, 0xcccb, 0x797c, 0x303f, 0x1, 0x1);
        gbc.writeMem(0xc961, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xcc, gbc.b());
        EXPECT(0xcb, gbc.c());
        EXPECT(0x79, gbc.d());
        EXPECT(0x7c, gbc.e());
        EXPECT(0x30, gbc.h());
        EXPECT(0x3f, gbc.l());
        EXPECT(0xe64, gbc.sp());
        EXPECT(0xc962, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xc961));
        // AF 0099
        gbc.setState(0xce30, 0x415, 0x9010, 0x5f93, 0x16aa, 0x4e09, 0x1, 0x1);
        gbc.writeMem(0xce30, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x5f, gbc.b());
        EXPECT(0x93, gbc.c());
        EXPECT(0x16, gbc.d());
        EXPECT(0xaa, gbc.e());
        EXPECT(0x4e, gbc.h());
        EXPECT(0x9, gbc.l());
        EXPECT(0x415, gbc.sp());
        EXPECT(0xce31, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xce30));
        // AF 009A
        gbc.setState(0x836b, 0x2969, 0xa820, 0x4b20, 0x7ee8, 0xc12a, 0x1, 0x0);
        gbc.writeMem(0x836b, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x4b, gbc.b());
        EXPECT(0x20, gbc.c());
        EXPECT(0x7e, gbc.d());
        EXPECT(0xe8, gbc.e());
        EXPECT(0xc1, gbc.h());
        EXPECT(0x2a, gbc.l());
        EXPECT(0x2969, gbc.sp());
        EXPECT(0x836c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x836b));
        // AF 009C
        gbc.setState(0xe197, 0x14a8, 0x2fc0, 0xb464, 0x1268, 0xa22, 0x0, 0x1);
        gbc.writeMem(0xe197, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xb4, gbc.b());
        EXPECT(0x64, gbc.c());
        EXPECT(0x12, gbc.d());
        EXPECT(0x68, gbc.e());
        EXPECT(0xa, gbc.h());
        EXPECT(0x22, gbc.l());
        EXPECT(0x14a8, gbc.sp());
        EXPECT(0xe198, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xe197));
        // AF 009D
        gbc.setState(0x8292, 0x39a7, 0x78f0, 0x9a80, 0xe1ed, 0xbb9c, 0x0, 0x0);
        gbc.writeMem(0x8292, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x9a, gbc.b());
        EXPECT(0x80, gbc.c());
        EXPECT(0xe1, gbc.d());
        EXPECT(0xed, gbc.e());
        EXPECT(0xbb, gbc.h());
        EXPECT(0x9c, gbc.l());
        EXPECT(0x39a7, gbc.sp());
        EXPECT(0x8293, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x8292));
        // AF 009E
        gbc.setState(0x2781, 0x82a3, 0xe2d0, 0xae75, 0x6839, 0xa004, 0x0, 0x1);
        gbc.writeMem(0x2781, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xae, gbc.b());
        EXPECT(0x75, gbc.c());
        EXPECT(0x68, gbc.d());
        EXPECT(0x39, gbc.e());
        EXPECT(0xa0, gbc.h());
        EXPECT(0x4, gbc.l());
        EXPECT(0x82a3, gbc.sp());
        EXPECT(0x2782, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 009F
        gbc.setState(0x76c9, 0xeb62, 0xa00, 0xebd1, 0xe4c3, 0x8cc1, 0x1, 0x1);
        gbc.writeMem(0x76c9, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xeb, gbc.b());
        EXPECT(0xd1, gbc.c());
        EXPECT(0xe4, gbc.d());
        EXPECT(0xc3, gbc.e());
        EXPECT(0x8c, gbc.h());
        EXPECT(0xc1, gbc.l());
        EXPECT(0xeb62, gbc.sp());
        EXPECT(0x76ca, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 00A0
        gbc.setState(0xc8bc, 0x8845, 0xfbb0, 0x3fe6, 0xbc5c, 0x1d7b, 0x1, 0x0);
        gbc.writeMem(0xc8bc, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x3f, gbc.b());
        EXPECT(0xe6, gbc.c());
        EXPECT(0xbc, gbc.d());
        EXPECT(0x5c, gbc.e());
        EXPECT(0x1d, gbc.h());
        EXPECT(0x7b, gbc.l());
        EXPECT(0x8845, gbc.sp());
        EXPECT(0xc8bd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xc8bc));
        // AF 00A1
        gbc.setState(0xeecd, 0x1b12, 0x510, 0x9b80, 0xe460, 0x9b56, 0x1, 0x1);
        gbc.writeMem(0xeecd, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x9b, gbc.b());
        EXPECT(0x80, gbc.c());
        EXPECT(0xe4, gbc.d());
        EXPECT(0x60, gbc.e());
        EXPECT(0x9b, gbc.h());
        EXPECT(0x56, gbc.l());
        EXPECT(0x1b12, gbc.sp());
        EXPECT(0xeece, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xeecd));
        // AF 00A2
        gbc.setState(0x7607, 0x6080, 0x4d40, 0xb081, 0x3dd2, 0x431b, 0x0, 0x0);
        gbc.writeMem(0x7607, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xb0, gbc.b());
        EXPECT(0x81, gbc.c());
        EXPECT(0x3d, gbc.d());
        EXPECT(0xd2, gbc.e());
        EXPECT(0x43, gbc.h());
        EXPECT(0x1b, gbc.l());
        EXPECT(0x6080, gbc.sp());
        EXPECT(0x7608, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 00A3
        gbc.setState(0xa1ff, 0x6b2a, 0x9f10, 0x4ce9, 0xda6, 0x16d3, 0x1, 0x0);
        gbc.writeMem(0xa1ff, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x4c, gbc.b());
        EXPECT(0xe9, gbc.c());
        EXPECT(0xd, gbc.d());
        EXPECT(0xa6, gbc.e());
        EXPECT(0x16, gbc.h());
        EXPECT(0xd3, gbc.l());
        EXPECT(0x6b2a, gbc.sp());
        EXPECT(0xa200, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xa1ff));
        // AF 00A4
        gbc.setState(0x6d70, 0xd008, 0x9290, 0xab54, 0xd70f, 0x57f8, 0x1, 0x0);
        gbc.writeMem(0x6d70, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xab, gbc.b());
        EXPECT(0x54, gbc.c());
        EXPECT(0xd7, gbc.d());
        EXPECT(0xf, gbc.e());
        EXPECT(0x57, gbc.h());
        EXPECT(0xf8, gbc.l());
        EXPECT(0xd008, gbc.sp());
        EXPECT(0x6d71, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 00A5
        gbc.setState(0xcb1e, 0xe59, 0x6140, 0x6451, 0x6542, 0xd733, 0x0, 0x0);
        gbc.writeMem(0xcb1e, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x64, gbc.b());
        EXPECT(0x51, gbc.c());
        EXPECT(0x65, gbc.d());
        EXPECT(0x42, gbc.e());
        EXPECT(0xd7, gbc.h());
        EXPECT(0x33, gbc.l());
        EXPECT(0xe59, gbc.sp());
        EXPECT(0xcb1f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xcb1e));
        // AF 00A6
        gbc.setState(0xb5da, 0x2f25, 0x5290, 0x694, 0x52eb, 0xc91a, 0x0, 0x1);
        gbc.writeMem(0xb5da, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x6, gbc.b());
        EXPECT(0x94, gbc.c());
        EXPECT(0x52, gbc.d());
        EXPECT(0xeb, gbc.e());
        EXPECT(0xc9, gbc.h());
        EXPECT(0x1a, gbc.l());
        EXPECT(0x2f25, gbc.sp());
        EXPECT(0xb5db, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xb5da));
        // AF 00A7
        gbc.setState(0xbb5, 0xedcc, 0xc3a0, 0x9a26, 0xc2a1, 0xc178, 0x0, 0x1);
        gbc.writeMem(0xbb5, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x9a, gbc.b());
        EXPECT(0x26, gbc.c());
        EXPECT(0xc2, gbc.d());
        EXPECT(0xa1, gbc.e());
        EXPECT(0xc1, gbc.h());
        EXPECT(0x78, gbc.l());
        EXPECT(0xedcc, gbc.sp());
        EXPECT(0xbb6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 00A8
        gbc.setState(0xc78d, 0x7b0d, 0xfa0, 0xa536, 0xa02d, 0x6640, 0x0, 0x0);
        gbc.writeMem(0xc78d, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xa5, gbc.b());
        EXPECT(0x36, gbc.c());
        EXPECT(0xa0, gbc.d());
        EXPECT(0x2d, gbc.e());
        EXPECT(0x66, gbc.h());
        EXPECT(0x40, gbc.l());
        EXPECT(0x7b0d, gbc.sp());
        EXPECT(0xc78e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xc78d));
        // AF 00A9
        gbc.setState(0x42d2, 0x61d6, 0xba10, 0x8262, 0xbfba, 0x38e9, 0x1, 0x0);
        gbc.writeMem(0x42d2, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x82, gbc.b());
        EXPECT(0x62, gbc.c());
        EXPECT(0xbf, gbc.d());
        EXPECT(0xba, gbc.e());
        EXPECT(0x38, gbc.h());
        EXPECT(0xe9, gbc.l());
        EXPECT(0x61d6, gbc.sp());
        EXPECT(0x42d3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 00AA
        gbc.setState(0xe967, 0xea4d, 0xc680, 0x432f, 0xc317, 0xfbc8, 0x1, 0x1);
        gbc.writeMem(0xe967, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x43, gbc.b());
        EXPECT(0x2f, gbc.c());
        EXPECT(0xc3, gbc.d());
        EXPECT(0x17, gbc.e());
        EXPECT(0xfb, gbc.h());
        EXPECT(0xc8, gbc.l());
        EXPECT(0xea4d, gbc.sp());
        EXPECT(0xe968, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xe967));
        // AF 00AB
        gbc.setState(0x449e, 0x2a70, 0xa5a0, 0x2db4, 0x5638, 0x473c, 0x0, 0x1);
        gbc.writeMem(0x449e, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x2d, gbc.b());
        EXPECT(0xb4, gbc.c());
        EXPECT(0x56, gbc.d());
        EXPECT(0x38, gbc.e());
        EXPECT(0x47, gbc.h());
        EXPECT(0x3c, gbc.l());
        EXPECT(0x2a70, gbc.sp());
        EXPECT(0x449f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 00AC
        gbc.setState(0x7a99, 0x7827, 0xef10, 0x4cb7, 0xe535, 0xacf2, 0x1, 0x0);
        gbc.writeMem(0x7a99, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x4c, gbc.b());
        EXPECT(0xb7, gbc.c());
        EXPECT(0xe5, gbc.d());
        EXPECT(0x35, gbc.e());
        EXPECT(0xac, gbc.h());
        EXPECT(0xf2, gbc.l());
        EXPECT(0x7827, gbc.sp());
        EXPECT(0x7a9a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 00AD
        gbc.setState(0x6954, 0x16f9, 0x92d0, 0x22ce, 0xc3c2, 0xf5cb, 0x1, 0x0);
        gbc.writeMem(0x6954, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x22, gbc.b());
        EXPECT(0xce, gbc.c());
        EXPECT(0xc3, gbc.d());
        EXPECT(0xc2, gbc.e());
        EXPECT(0xf5, gbc.h());
        EXPECT(0xcb, gbc.l());
        EXPECT(0x16f9, gbc.sp());
        EXPECT(0x6955, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 00AE
        gbc.setState(0x9547, 0x1b9, 0x3790, 0xbb4b, 0x4550, 0xecd7, 0x0, 0x1);
        gbc.writeMem(0x9547, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xbb, gbc.b());
        EXPECT(0x4b, gbc.c());
        EXPECT(0x45, gbc.d());
        EXPECT(0x50, gbc.e());
        EXPECT(0xec, gbc.h());
        EXPECT(0xd7, gbc.l());
        EXPECT(0x1b9, gbc.sp());
        EXPECT(0x9548, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x9547));
        // AF 00AF
        gbc.setState(0x9601, 0xc8c4, 0xa9a0, 0xef41, 0x45fb, 0x8d79, 0x0, 0x1);
        gbc.writeMem(0x9601, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xef, gbc.b());
        EXPECT(0x41, gbc.c());
        EXPECT(0x45, gbc.d());
        EXPECT(0xfb, gbc.e());
        EXPECT(0x8d, gbc.h());
        EXPECT(0x79, gbc.l());
        EXPECT(0xc8c4, gbc.sp());
        EXPECT(0x9602, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x9601));
        // AF 00B0
        gbc.setState(0x4aa2, 0xfbd5, 0x7a10, 0x9b53, 0x46b1, 0x91ef, 0x1, 0x1);
        gbc.writeMem(0x4aa2, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x9b, gbc.b());
        EXPECT(0x53, gbc.c());
        EXPECT(0x46, gbc.d());
        EXPECT(0xb1, gbc.e());
        EXPECT(0x91, gbc.h());
        EXPECT(0xef, gbc.l());
        EXPECT(0xfbd5, gbc.sp());
        EXPECT(0x4aa3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 00B1
        gbc.setState(0x6e1f, 0x7eea, 0x2a30, 0xb85b, 0x80f1, 0x6c39, 0x1, 0x1);
        gbc.writeMem(0x6e1f, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xb8, gbc.b());
        EXPECT(0x5b, gbc.c());
        EXPECT(0x80, gbc.d());
        EXPECT(0xf1, gbc.e());
        EXPECT(0x6c, gbc.h());
        EXPECT(0x39, gbc.l());
        EXPECT(0x7eea, gbc.sp());
        EXPECT(0x6e20, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 00B2
        gbc.setState(0xbc31, 0x41bf, 0x8b0, 0xf203, 0x2b84, 0xc463, 0x1, 0x1);
        gbc.writeMem(0xbc31, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xf2, gbc.b());
        EXPECT(0x3, gbc.c());
        EXPECT(0x2b, gbc.d());
        EXPECT(0x84, gbc.e());
        EXPECT(0xc4, gbc.h());
        EXPECT(0x63, gbc.l());
        EXPECT(0x41bf, gbc.sp());
        EXPECT(0xbc32, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xbc31));
        // AF 00B3
        gbc.setState(0x9b8b, 0x7f44, 0xb880, 0x791d, 0x8788, 0x44a, 0x0, 0x1);
        gbc.writeMem(0x9b8b, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x79, gbc.b());
        EXPECT(0x1d, gbc.c());
        EXPECT(0x87, gbc.d());
        EXPECT(0x88, gbc.e());
        EXPECT(0x4, gbc.h());
        EXPECT(0x4a, gbc.l());
        EXPECT(0x7f44, gbc.sp());
        EXPECT(0x9b8c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x9b8b));
        // AF 00B6
        gbc.setState(0x9a16, 0x3056, 0x4610, 0xf264, 0x58ea, 0x79a4, 0x1, 0x0);
        gbc.writeMem(0x9a16, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xf2, gbc.b());
        EXPECT(0x64, gbc.c());
        EXPECT(0x58, gbc.d());
        EXPECT(0xea, gbc.e());
        EXPECT(0x79, gbc.h());
        EXPECT(0xa4, gbc.l());
        EXPECT(0x3056, gbc.sp());
        EXPECT(0x9a17, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x9a16));
        // AF 00B7
        gbc.setState(0x35d6, 0x2b47, 0xf950, 0xd6c6, 0x72b2, 0x99df, 0x1, 0x1);
        gbc.writeMem(0x35d6, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xd6, gbc.b());
        EXPECT(0xc6, gbc.c());
        EXPECT(0x72, gbc.d());
        EXPECT(0xb2, gbc.e());
        EXPECT(0x99, gbc.h());
        EXPECT(0xdf, gbc.l());
        EXPECT(0x2b47, gbc.sp());
        EXPECT(0x35d7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 00B9
        gbc.setState(0x2e15, 0x4967, 0x35a0, 0xcd1f, 0xde0, 0x5dfe, 0x0, 0x0);
        gbc.writeMem(0x2e15, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xcd, gbc.b());
        EXPECT(0x1f, gbc.c());
        EXPECT(0xd, gbc.d());
        EXPECT(0xe0, gbc.e());
        EXPECT(0x5d, gbc.h());
        EXPECT(0xfe, gbc.l());
        EXPECT(0x4967, gbc.sp());
        EXPECT(0x2e16, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 00BA
        gbc.setState(0x1b2e, 0x324e, 0xa0a0, 0x69d4, 0x7ef3, 0xac4c, 0x0, 0x1);
        gbc.writeMem(0x1b2e, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x69, gbc.b());
        EXPECT(0xd4, gbc.c());
        EXPECT(0x7e, gbc.d());
        EXPECT(0xf3, gbc.e());
        EXPECT(0xac, gbc.h());
        EXPECT(0x4c, gbc.l());
        EXPECT(0x324e, gbc.sp());
        EXPECT(0x1b2f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 00BB
        gbc.setState(0xd5c3, 0x769d, 0x5770, 0x3a39, 0x1f8d, 0x8d1c, 0x1, 0x0);
        gbc.writeMem(0xd5c3, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x3a, gbc.b());
        EXPECT(0x39, gbc.c());
        EXPECT(0x1f, gbc.d());
        EXPECT(0x8d, gbc.e());
        EXPECT(0x8d, gbc.h());
        EXPECT(0x1c, gbc.l());
        EXPECT(0x769d, gbc.sp());
        EXPECT(0xd5c4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xd5c3));
        // AF 00BC
        gbc.setState(0x9de4, 0xd29d, 0x97c0, 0xd91d, 0x9a4b, 0x92cb, 0x0, 0x1);
        gbc.writeMem(0x9de4, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xd9, gbc.b());
        EXPECT(0x1d, gbc.c());
        EXPECT(0x9a, gbc.d());
        EXPECT(0x4b, gbc.e());
        EXPECT(0x92, gbc.h());
        EXPECT(0xcb, gbc.l());
        EXPECT(0xd29d, gbc.sp());
        EXPECT(0x9de5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x9de4));
        // AF 00BD
        gbc.setState(0x2c8, 0x43, 0xdce0, 0xb698, 0x7bb, 0xf0cc, 0x1, 0x0);
        gbc.writeMem(0x2c8, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xb6, gbc.b());
        EXPECT(0x98, gbc.c());
        EXPECT(0x7, gbc.d());
        EXPECT(0xbb, gbc.e());
        EXPECT(0xf0, gbc.h());
        EXPECT(0xcc, gbc.l());
        EXPECT(0x43, gbc.sp());
        EXPECT(0x2c9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 00BE
        gbc.setState(0x6959, 0xf8e3, 0x4410, 0xd29a, 0x24d8, 0x3b6b, 0x0, 0x1);
        gbc.writeMem(0x6959, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xd2, gbc.b());
        EXPECT(0x9a, gbc.c());
        EXPECT(0x24, gbc.d());
        EXPECT(0xd8, gbc.e());
        EXPECT(0x3b, gbc.h());
        EXPECT(0x6b, gbc.l());
        EXPECT(0xf8e3, gbc.sp());
        EXPECT(0x695a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 00BF
        gbc.setState(0xe395, 0xbc32, 0x8090, 0xf340, 0x5f57, 0xf9d9, 0x0, 0x0);
        gbc.writeMem(0xe395, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xf3, gbc.b());
        EXPECT(0x40, gbc.c());
        EXPECT(0x5f, gbc.d());
        EXPECT(0x57, gbc.e());
        EXPECT(0xf9, gbc.h());
        EXPECT(0xd9, gbc.l());
        EXPECT(0xbc32, gbc.sp());
        EXPECT(0xe396, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xe395));
        // AF 00C0
        gbc.setState(0xecb9, 0x84b2, 0xc510, 0x2bfb, 0x5f82, 0x363a, 0x1, 0x1);
        gbc.writeMem(0xecb9, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x2b, gbc.b());
        EXPECT(0xfb, gbc.c());
        EXPECT(0x5f, gbc.d());
        EXPECT(0x82, gbc.e());
        EXPECT(0x36, gbc.h());
        EXPECT(0x3a, gbc.l());
        EXPECT(0x84b2, gbc.sp());
        EXPECT(0xecba, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xecb9));
        // AF 00C1
        gbc.setState(0x630e, 0xe5d7, 0x2210, 0x3598, 0x697, 0xe1eb, 0x1, 0x1);
        gbc.writeMem(0x630e, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x35, gbc.b());
        EXPECT(0x98, gbc.c());
        EXPECT(0x6, gbc.d());
        EXPECT(0x97, gbc.e());
        EXPECT(0xe1, gbc.h());
        EXPECT(0xeb, gbc.l());
        EXPECT(0xe5d7, gbc.sp());
        EXPECT(0x630f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 00C3
        gbc.setState(0x2c4f, 0x6ba2, 0x1580, 0x3fd9, 0xf168, 0xf0c4, 0x1, 0x0);
        gbc.writeMem(0x2c4f, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x3f, gbc.b());
        EXPECT(0xd9, gbc.c());
        EXPECT(0xf1, gbc.d());
        EXPECT(0x68, gbc.e());
        EXPECT(0xf0, gbc.h());
        EXPECT(0xc4, gbc.l());
        EXPECT(0x6ba2, gbc.sp());
        EXPECT(0x2c50, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 00C4
        gbc.setState(0x1753, 0xdf25, 0xf3d0, 0x3beb, 0x3c55, 0x97e5, 0x0, 0x1);
        gbc.writeMem(0x1753, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x3b, gbc.b());
        EXPECT(0xeb, gbc.c());
        EXPECT(0x3c, gbc.d());
        EXPECT(0x55, gbc.e());
        EXPECT(0x97, gbc.h());
        EXPECT(0xe5, gbc.l());
        EXPECT(0xdf25, gbc.sp());
        EXPECT(0x1754, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 00C5
        gbc.setState(0xddb, 0x4cff, 0xee10, 0xe6db, 0xec17, 0x6530, 0x1, 0x0);
        gbc.writeMem(0xddb, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xe6, gbc.b());
        EXPECT(0xdb, gbc.c());
        EXPECT(0xec, gbc.d());
        EXPECT(0x17, gbc.e());
        EXPECT(0x65, gbc.h());
        EXPECT(0x30, gbc.l());
        EXPECT(0x4cff, gbc.sp());
        EXPECT(0xddc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 00C6
        gbc.setState(0x893c, 0xfd44, 0x1870, 0x267a, 0x4527, 0x95cb, 0x1, 0x0);
        gbc.writeMem(0x893c, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x26, gbc.b());
        EXPECT(0x7a, gbc.c());
        EXPECT(0x45, gbc.d());
        EXPECT(0x27, gbc.e());
        EXPECT(0x95, gbc.h());
        EXPECT(0xcb, gbc.l());
        EXPECT(0xfd44, gbc.sp());
        EXPECT(0x893d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x893c));
        // AF 00C7
        gbc.setState(0x77, 0xa860, 0x2800, 0x4826, 0xda7a, 0xf473, 0x1, 0x0);
        gbc.writeMem(0x77, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x48, gbc.b());
        EXPECT(0x26, gbc.c());
        EXPECT(0xda, gbc.d());
        EXPECT(0x7a, gbc.e());
        EXPECT(0xf4, gbc.h());
        EXPECT(0x73, gbc.l());
        EXPECT(0xa860, gbc.sp());
        EXPECT(0x78, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 00C8
        gbc.setState(0xa515, 0xf8c, 0x4b50, 0x432f, 0x3d7a, 0x9c01, 0x0, 0x0);
        gbc.writeMem(0xa515, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x43, gbc.b());
        EXPECT(0x2f, gbc.c());
        EXPECT(0x3d, gbc.d());
        EXPECT(0x7a, gbc.e());
        EXPECT(0x9c, gbc.h());
        EXPECT(0x1, gbc.l());
        EXPECT(0xf8c, gbc.sp());
        EXPECT(0xa516, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xa515));
        // AF 00C9
        gbc.setState(0x310, 0x98f8, 0xb60, 0x10b5, 0xacf0, 0xbcc9, 0x0, 0x1);
        gbc.writeMem(0x310, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x10, gbc.b());
        EXPECT(0xb5, gbc.c());
        EXPECT(0xac, gbc.d());
        EXPECT(0xf0, gbc.e());
        EXPECT(0xbc, gbc.h());
        EXPECT(0xc9, gbc.l());
        EXPECT(0x98f8, gbc.sp());
        EXPECT(0x311, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 00CA
        gbc.setState(0x185e, 0xd610, 0xdb30, 0x6cda, 0x2815, 0x292b, 0x1, 0x0);
        gbc.writeMem(0x185e, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x6c, gbc.b());
        EXPECT(0xda, gbc.c());
        EXPECT(0x28, gbc.d());
        EXPECT(0x15, gbc.e());
        EXPECT(0x29, gbc.h());
        EXPECT(0x2b, gbc.l());
        EXPECT(0xd610, gbc.sp());
        EXPECT(0x185f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 00CB
        gbc.setState(0xe087, 0xeafe, 0x3a30, 0xf369, 0xa255, 0xd14f, 0x0, 0x1);
        gbc.writeMem(0xe087, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xf3, gbc.b());
        EXPECT(0x69, gbc.c());
        EXPECT(0xa2, gbc.d());
        EXPECT(0x55, gbc.e());
        EXPECT(0xd1, gbc.h());
        EXPECT(0x4f, gbc.l());
        EXPECT(0xeafe, gbc.sp());
        EXPECT(0xe088, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xe087));
        // AF 00CC
        gbc.setState(0x6eac, 0x3cb7, 0xd730, 0xeba, 0x45a5, 0xdbf7, 0x1, 0x1);
        gbc.writeMem(0x6eac, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xe, gbc.b());
        EXPECT(0xba, gbc.c());
        EXPECT(0x45, gbc.d());
        EXPECT(0xa5, gbc.e());
        EXPECT(0xdb, gbc.h());
        EXPECT(0xf7, gbc.l());
        EXPECT(0x3cb7, gbc.sp());
        EXPECT(0x6ead, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 00CD
        gbc.setState(0xe12, 0xf1f, 0x6990, 0x4c3b, 0x886, 0x485a, 0x0, 0x1);
        gbc.writeMem(0xe12, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x4c, gbc.b());
        EXPECT(0x3b, gbc.c());
        EXPECT(0x8, gbc.d());
        EXPECT(0x86, gbc.e());
        EXPECT(0x48, gbc.h());
        EXPECT(0x5a, gbc.l());
        EXPECT(0xf1f, gbc.sp());
        EXPECT(0xe13, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 00CE
        gbc.setState(0x3577, 0x267f, 0x23c0, 0xe4a2, 0xe590, 0x5946, 0x0, 0x0);
        gbc.writeMem(0x3577, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xe4, gbc.b());
        EXPECT(0xa2, gbc.c());
        EXPECT(0xe5, gbc.d());
        EXPECT(0x90, gbc.e());
        EXPECT(0x59, gbc.h());
        EXPECT(0x46, gbc.l());
        EXPECT(0x267f, gbc.sp());
        EXPECT(0x3578, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 00CF
        gbc.setState(0xaf4d, 0x5551, 0x7780, 0x4843, 0x325e, 0x3014, 0x1, 0x0);
        gbc.writeMem(0xaf4d, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x48, gbc.b());
        EXPECT(0x43, gbc.c());
        EXPECT(0x32, gbc.d());
        EXPECT(0x5e, gbc.e());
        EXPECT(0x30, gbc.h());
        EXPECT(0x14, gbc.l());
        EXPECT(0x5551, gbc.sp());
        EXPECT(0xaf4e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xaf4d));
        // AF 00D0
        gbc.setState(0x452b, 0xac71, 0xdbf0, 0xd290, 0x8263, 0xd50f, 0x1, 0x0);
        gbc.writeMem(0x452b, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xd2, gbc.b());
        EXPECT(0x90, gbc.c());
        EXPECT(0x82, gbc.d());
        EXPECT(0x63, gbc.e());
        EXPECT(0xd5, gbc.h());
        EXPECT(0xf, gbc.l());
        EXPECT(0xac71, gbc.sp());
        EXPECT(0x452c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 00D1
        gbc.setState(0xd79a, 0x178, 0x8430, 0xf3f2, 0x71fa, 0xc49b, 0x0, 0x0);
        gbc.writeMem(0xd79a, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xf3, gbc.b());
        EXPECT(0xf2, gbc.c());
        EXPECT(0x71, gbc.d());
        EXPECT(0xfa, gbc.e());
        EXPECT(0xc4, gbc.h());
        EXPECT(0x9b, gbc.l());
        EXPECT(0x178, gbc.sp());
        EXPECT(0xd79b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xd79a));
        // AF 00D2
        gbc.setState(0xc1e, 0xac12, 0xd110, 0x22ec, 0x7cb7, 0x5850, 0x1, 0x0);
        gbc.writeMem(0xc1e, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x22, gbc.b());
        EXPECT(0xec, gbc.c());
        EXPECT(0x7c, gbc.d());
        EXPECT(0xb7, gbc.e());
        EXPECT(0x58, gbc.h());
        EXPECT(0x50, gbc.l());
        EXPECT(0xac12, gbc.sp());
        EXPECT(0xc1f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 00D3
        gbc.setState(0xb590, 0xf9f, 0xa360, 0xbcf, 0x7a80, 0x31bc, 0x0, 0x0);
        gbc.writeMem(0xb590, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xb, gbc.b());
        EXPECT(0xcf, gbc.c());
        EXPECT(0x7a, gbc.d());
        EXPECT(0x80, gbc.e());
        EXPECT(0x31, gbc.h());
        EXPECT(0xbc, gbc.l());
        EXPECT(0xf9f, gbc.sp());
        EXPECT(0xb591, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xb590));
        // AF 00D4
        gbc.setState(0x8b90, 0xff9e, 0x93f0, 0xfc1b, 0x4b35, 0x72ca, 0x1, 0x1);
        gbc.writeMem(0x8b90, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xfc, gbc.b());
        EXPECT(0x1b, gbc.c());
        EXPECT(0x4b, gbc.d());
        EXPECT(0x35, gbc.e());
        EXPECT(0x72, gbc.h());
        EXPECT(0xca, gbc.l());
        EXPECT(0xff9e, gbc.sp());
        EXPECT(0x8b91, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x8b90));
        // AF 00D5
        gbc.setState(0xb327, 0x56e6, 0xbe0, 0x4134, 0x8a21, 0xf361, 0x1, 0x0);
        gbc.writeMem(0xb327, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x41, gbc.b());
        EXPECT(0x34, gbc.c());
        EXPECT(0x8a, gbc.d());
        EXPECT(0x21, gbc.e());
        EXPECT(0xf3, gbc.h());
        EXPECT(0x61, gbc.l());
        EXPECT(0x56e6, gbc.sp());
        EXPECT(0xb328, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xb327));
        // AF 00D7
        gbc.setState(0x7bc7, 0x6f6f, 0x8260, 0xd530, 0x19b4, 0xf139, 0x0, 0x0);
        gbc.writeMem(0x7bc7, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xd5, gbc.b());
        EXPECT(0x30, gbc.c());
        EXPECT(0x19, gbc.d());
        EXPECT(0xb4, gbc.e());
        EXPECT(0xf1, gbc.h());
        EXPECT(0x39, gbc.l());
        EXPECT(0x6f6f, gbc.sp());
        EXPECT(0x7bc8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 00D8
        gbc.setState(0x29ec, 0x3b57, 0xaaf0, 0xcb1, 0x7b3c, 0x7578, 0x1, 0x0);
        gbc.writeMem(0x29ec, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xc, gbc.b());
        EXPECT(0xb1, gbc.c());
        EXPECT(0x7b, gbc.d());
        EXPECT(0x3c, gbc.e());
        EXPECT(0x75, gbc.h());
        EXPECT(0x78, gbc.l());
        EXPECT(0x3b57, gbc.sp());
        EXPECT(0x29ed, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 00D9
        gbc.setState(0x50c, 0x42a5, 0xe7d0, 0x5d2a, 0xd02, 0x2ab3, 0x0, 0x1);
        gbc.writeMem(0x50c, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x5d, gbc.b());
        EXPECT(0x2a, gbc.c());
        EXPECT(0xd, gbc.d());
        EXPECT(0x2, gbc.e());
        EXPECT(0x2a, gbc.h());
        EXPECT(0xb3, gbc.l());
        EXPECT(0x42a5, gbc.sp());
        EXPECT(0x50d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 00DA
        gbc.setState(0xe60d, 0xd483, 0xaa00, 0x8573, 0x16ce, 0x4047, 0x1, 0x0);
        gbc.writeMem(0xe60d, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x85, gbc.b());
        EXPECT(0x73, gbc.c());
        EXPECT(0x16, gbc.d());
        EXPECT(0xce, gbc.e());
        EXPECT(0x40, gbc.h());
        EXPECT(0x47, gbc.l());
        EXPECT(0xd483, gbc.sp());
        EXPECT(0xe60e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xe60d));
        // AF 00DB
        gbc.setState(0x8936, 0xba9d, 0xaca0, 0x16a, 0xef29, 0x11f0, 0x0, 0x0);
        gbc.writeMem(0x8936, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x1, gbc.b());
        EXPECT(0x6a, gbc.c());
        EXPECT(0xef, gbc.d());
        EXPECT(0x29, gbc.e());
        EXPECT(0x11, gbc.h());
        EXPECT(0xf0, gbc.l());
        EXPECT(0xba9d, gbc.sp());
        EXPECT(0x8937, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x8936));
        // AF 00DC
        gbc.setState(0xdb71, 0x85c4, 0xf4e0, 0x88d7, 0xfba8, 0x656a, 0x0, 0x1);
        gbc.writeMem(0xdb71, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x88, gbc.b());
        EXPECT(0xd7, gbc.c());
        EXPECT(0xfb, gbc.d());
        EXPECT(0xa8, gbc.e());
        EXPECT(0x65, gbc.h());
        EXPECT(0x6a, gbc.l());
        EXPECT(0x85c4, gbc.sp());
        EXPECT(0xdb72, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xdb71));
        // AF 00DD
        gbc.setState(0xc4db, 0xaaa9, 0x81a0, 0x5cb1, 0xb4fa, 0xc8c8, 0x0, 0x1);
        gbc.writeMem(0xc4db, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x5c, gbc.b());
        EXPECT(0xb1, gbc.c());
        EXPECT(0xb4, gbc.d());
        EXPECT(0xfa, gbc.e());
        EXPECT(0xc8, gbc.h());
        EXPECT(0xc8, gbc.l());
        EXPECT(0xaaa9, gbc.sp());
        EXPECT(0xc4dc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xc4db));
        // AF 00DE
        gbc.setState(0x503a, 0xd619, 0x91b0, 0x641c, 0xaa70, 0x1ebc, 0x0, 0x1);
        gbc.writeMem(0x503a, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x64, gbc.b());
        EXPECT(0x1c, gbc.c());
        EXPECT(0xaa, gbc.d());
        EXPECT(0x70, gbc.e());
        EXPECT(0x1e, gbc.h());
        EXPECT(0xbc, gbc.l());
        EXPECT(0xd619, gbc.sp());
        EXPECT(0x503b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 00DF
        gbc.setState(0xe962, 0xc091, 0x83e0, 0xe1d, 0x8c9e, 0x3557, 0x0, 0x1);
        gbc.writeMem(0xe962, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xe, gbc.b());
        EXPECT(0x1d, gbc.c());
        EXPECT(0x8c, gbc.d());
        EXPECT(0x9e, gbc.e());
        EXPECT(0x35, gbc.h());
        EXPECT(0x57, gbc.l());
        EXPECT(0xc091, gbc.sp());
        EXPECT(0xe963, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xe962));
        // AF 00E0
        gbc.setState(0xe3f0, 0xbdca, 0x1360, 0x15ad, 0xcb37, 0xba11, 0x0, 0x0);
        gbc.writeMem(0xe3f0, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x15, gbc.b());
        EXPECT(0xad, gbc.c());
        EXPECT(0xcb, gbc.d());
        EXPECT(0x37, gbc.e());
        EXPECT(0xba, gbc.h());
        EXPECT(0x11, gbc.l());
        EXPECT(0xbdca, gbc.sp());
        EXPECT(0xe3f1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xe3f0));
        // AF 00E1
        gbc.setState(0x142a, 0xfb1a, 0x8000, 0x9df1, 0x1a2d, 0x8611, 0x1, 0x0);
        gbc.writeMem(0x142a, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x9d, gbc.b());
        EXPECT(0xf1, gbc.c());
        EXPECT(0x1a, gbc.d());
        EXPECT(0x2d, gbc.e());
        EXPECT(0x86, gbc.h());
        EXPECT(0x11, gbc.l());
        EXPECT(0xfb1a, gbc.sp());
        EXPECT(0x142b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 00E2
        gbc.setState(0xb9be, 0x188f, 0xdb90, 0xdea3, 0xb35b, 0xb52b, 0x1, 0x1);
        gbc.writeMem(0xb9be, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xde, gbc.b());
        EXPECT(0xa3, gbc.c());
        EXPECT(0xb3, gbc.d());
        EXPECT(0x5b, gbc.e());
        EXPECT(0xb5, gbc.h());
        EXPECT(0x2b, gbc.l());
        EXPECT(0x188f, gbc.sp());
        EXPECT(0xb9bf, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xb9be));
        // AF 00E3
        gbc.setState(0x9c73, 0x5461, 0xc0e0, 0x614e, 0x23f1, 0x310b, 0x0, 0x1);
        gbc.writeMem(0x9c73, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x61, gbc.b());
        EXPECT(0x4e, gbc.c());
        EXPECT(0x23, gbc.d());
        EXPECT(0xf1, gbc.e());
        EXPECT(0x31, gbc.h());
        EXPECT(0xb, gbc.l());
        EXPECT(0x5461, gbc.sp());
        EXPECT(0x9c74, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x9c73));
        // AF 00E4
        gbc.setState(0x9787, 0xfcbd, 0x3820, 0xd2f6, 0x7064, 0xc58a, 0x0, 0x0);
        gbc.writeMem(0x9787, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xd2, gbc.b());
        EXPECT(0xf6, gbc.c());
        EXPECT(0x70, gbc.d());
        EXPECT(0x64, gbc.e());
        EXPECT(0xc5, gbc.h());
        EXPECT(0x8a, gbc.l());
        EXPECT(0xfcbd, gbc.sp());
        EXPECT(0x9788, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x9787));
        // AF 00E5
        gbc.setState(0x7877, 0xad21, 0xa490, 0x3b5e, 0xbf93, 0x1766, 0x1, 0x1);
        gbc.writeMem(0x7877, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x3b, gbc.b());
        EXPECT(0x5e, gbc.c());
        EXPECT(0xbf, gbc.d());
        EXPECT(0x93, gbc.e());
        EXPECT(0x17, gbc.h());
        EXPECT(0x66, gbc.l());
        EXPECT(0xad21, gbc.sp());
        EXPECT(0x7878, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 00E6
        gbc.setState(0xa48, 0x2a33, 0x6670, 0xcd0f, 0x33ff, 0x99cb, 0x1, 0x0);
        gbc.writeMem(0xa48, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xcd, gbc.b());
        EXPECT(0xf, gbc.c());
        EXPECT(0x33, gbc.d());
        EXPECT(0xff, gbc.e());
        EXPECT(0x99, gbc.h());
        EXPECT(0xcb, gbc.l());
        EXPECT(0x2a33, gbc.sp());
        EXPECT(0xa49, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 00E7
        gbc.setState(0x9f18, 0x5e, 0x58f0, 0x6035, 0x17ce, 0x95a5, 0x1, 0x0);
        gbc.writeMem(0x9f18, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x60, gbc.b());
        EXPECT(0x35, gbc.c());
        EXPECT(0x17, gbc.d());
        EXPECT(0xce, gbc.e());
        EXPECT(0x95, gbc.h());
        EXPECT(0xa5, gbc.l());
        EXPECT(0x5e, gbc.sp());
        EXPECT(0x9f19, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x9f18));
        // AF 00E8
        gbc.setState(0x6af8, 0x46b0, 0xe720, 0x7e54, 0xd060, 0x6e48, 0x1, 0x1);
        gbc.writeMem(0x6af8, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x7e, gbc.b());
        EXPECT(0x54, gbc.c());
        EXPECT(0xd0, gbc.d());
        EXPECT(0x60, gbc.e());
        EXPECT(0x6e, gbc.h());
        EXPECT(0x48, gbc.l());
        EXPECT(0x46b0, gbc.sp());
        EXPECT(0x6af9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 00E9
        gbc.setState(0x1281, 0x21f0, 0x1680, 0x65a5, 0x1d95, 0x1bd0, 0x1, 0x0);
        gbc.writeMem(0x1281, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x65, gbc.b());
        EXPECT(0xa5, gbc.c());
        EXPECT(0x1d, gbc.d());
        EXPECT(0x95, gbc.e());
        EXPECT(0x1b, gbc.h());
        EXPECT(0xd0, gbc.l());
        EXPECT(0x21f0, gbc.sp());
        EXPECT(0x1282, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 00EA
        gbc.setState(0x6baf, 0x1598, 0x89a0, 0x7232, 0x1591, 0xafe6, 0x1, 0x0);
        gbc.writeMem(0x6baf, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x72, gbc.b());
        EXPECT(0x32, gbc.c());
        EXPECT(0x15, gbc.d());
        EXPECT(0x91, gbc.e());
        EXPECT(0xaf, gbc.h());
        EXPECT(0xe6, gbc.l());
        EXPECT(0x1598, gbc.sp());
        EXPECT(0x6bb0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 00EB
        gbc.setState(0x2962, 0x5dec, 0xec80, 0x2777, 0xf853, 0x79c9, 0x0, 0x1);
        gbc.writeMem(0x2962, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x27, gbc.b());
        EXPECT(0x77, gbc.c());
        EXPECT(0xf8, gbc.d());
        EXPECT(0x53, gbc.e());
        EXPECT(0x79, gbc.h());
        EXPECT(0xc9, gbc.l());
        EXPECT(0x5dec, gbc.sp());
        EXPECT(0x2963, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 00EC
        gbc.setState(0x3cd8, 0x9063, 0xb080, 0x6c2f, 0x5308, 0x2ec1, 0x1, 0x1);
        gbc.writeMem(0x3cd8, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x6c, gbc.b());
        EXPECT(0x2f, gbc.c());
        EXPECT(0x53, gbc.d());
        EXPECT(0x8, gbc.e());
        EXPECT(0x2e, gbc.h());
        EXPECT(0xc1, gbc.l());
        EXPECT(0x9063, gbc.sp());
        EXPECT(0x3cd9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 00ED
        gbc.setState(0xd1da, 0xee58, 0xb960, 0x8c87, 0x981, 0x1603, 0x1, 0x0);
        gbc.writeMem(0xd1da, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x8c, gbc.b());
        EXPECT(0x87, gbc.c());
        EXPECT(0x9, gbc.d());
        EXPECT(0x81, gbc.e());
        EXPECT(0x16, gbc.h());
        EXPECT(0x3, gbc.l());
        EXPECT(0xee58, gbc.sp());
        EXPECT(0xd1db, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xd1da));
        // AF 00EE
        gbc.setState(0x5ced, 0x3ffe, 0xeff0, 0xcec, 0x9c0c, 0xaa49, 0x1, 0x0);
        gbc.writeMem(0x5ced, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xc, gbc.b());
        EXPECT(0xec, gbc.c());
        EXPECT(0x9c, gbc.d());
        EXPECT(0xc, gbc.e());
        EXPECT(0xaa, gbc.h());
        EXPECT(0x49, gbc.l());
        EXPECT(0x3ffe, gbc.sp());
        EXPECT(0x5cee, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 00EF
        gbc.setState(0x316, 0x563c, 0xf6c0, 0x147b, 0x5ebc, 0x7acc, 0x1, 0x0);
        gbc.writeMem(0x316, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x14, gbc.b());
        EXPECT(0x7b, gbc.c());
        EXPECT(0x5e, gbc.d());
        EXPECT(0xbc, gbc.e());
        EXPECT(0x7a, gbc.h());
        EXPECT(0xcc, gbc.l());
        EXPECT(0x563c, gbc.sp());
        EXPECT(0x317, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 00F0
        gbc.setState(0x4e4d, 0x848c, 0x8880, 0x74d4, 0x6f31, 0x4373, 0x0, 0x0);
        gbc.writeMem(0x4e4d, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x74, gbc.b());
        EXPECT(0xd4, gbc.c());
        EXPECT(0x6f, gbc.d());
        EXPECT(0x31, gbc.e());
        EXPECT(0x43, gbc.h());
        EXPECT(0x73, gbc.l());
        EXPECT(0x848c, gbc.sp());
        EXPECT(0x4e4e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 00F1
        gbc.setState(0x2ec8, 0xa751, 0x70f0, 0x401, 0x3e8b, 0xb2b0, 0x1, 0x1);
        gbc.writeMem(0x2ec8, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x4, gbc.b());
        EXPECT(0x1, gbc.c());
        EXPECT(0x3e, gbc.d());
        EXPECT(0x8b, gbc.e());
        EXPECT(0xb2, gbc.h());
        EXPECT(0xb0, gbc.l());
        EXPECT(0xa751, gbc.sp());
        EXPECT(0x2ec9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 00F2
        gbc.setState(0xfed, 0xb596, 0x7a90, 0xaad2, 0x3f0d, 0x303b, 0x1, 0x1);
        gbc.writeMem(0xfed, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xaa, gbc.b());
        EXPECT(0xd2, gbc.c());
        EXPECT(0x3f, gbc.d());
        EXPECT(0xd, gbc.e());
        EXPECT(0x30, gbc.h());
        EXPECT(0x3b, gbc.l());
        EXPECT(0xb596, gbc.sp());
        EXPECT(0xfee, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 00F3
        gbc.setState(0xca96, 0x9ae3, 0x5fb0, 0xc7a8, 0xda6d, 0xe86e, 0x1, 0x1);
        gbc.writeMem(0xca96, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xc7, gbc.b());
        EXPECT(0xa8, gbc.c());
        EXPECT(0xda, gbc.d());
        EXPECT(0x6d, gbc.e());
        EXPECT(0xe8, gbc.h());
        EXPECT(0x6e, gbc.l());
        EXPECT(0x9ae3, gbc.sp());
        EXPECT(0xca97, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xca96));
        // AF 00F4
        gbc.setState(0x140b, 0x20ec, 0xdbf0, 0x3e8e, 0x658, 0xd86f, 0x0, 0x1);
        gbc.writeMem(0x140b, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x3e, gbc.b());
        EXPECT(0x8e, gbc.c());
        EXPECT(0x6, gbc.d());
        EXPECT(0x58, gbc.e());
        EXPECT(0xd8, gbc.h());
        EXPECT(0x6f, gbc.l());
        EXPECT(0x20ec, gbc.sp());
        EXPECT(0x140c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 00F5
        gbc.setState(0x4608, 0x3ff2, 0xc980, 0x87b7, 0xb26c, 0xac11, 0x0, 0x1);
        gbc.writeMem(0x4608, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x87, gbc.b());
        EXPECT(0xb7, gbc.c());
        EXPECT(0xb2, gbc.d());
        EXPECT(0x6c, gbc.e());
        EXPECT(0xac, gbc.h());
        EXPECT(0x11, gbc.l());
        EXPECT(0x3ff2, gbc.sp());
        EXPECT(0x4609, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 00F6
        gbc.setState(0x5aa4, 0x9157, 0x3de0, 0xf0a6, 0xbca0, 0x3d42, 0x1, 0x0);
        gbc.writeMem(0x5aa4, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xf0, gbc.b());
        EXPECT(0xa6, gbc.c());
        EXPECT(0xbc, gbc.d());
        EXPECT(0xa0, gbc.e());
        EXPECT(0x3d, gbc.h());
        EXPECT(0x42, gbc.l());
        EXPECT(0x9157, gbc.sp());
        EXPECT(0x5aa5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 00F7
        gbc.setState(0x311e, 0x6155, 0x1020, 0xf8ba, 0xb3fd, 0xd9a9, 0x0, 0x1);
        gbc.writeMem(0x311e, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xf8, gbc.b());
        EXPECT(0xba, gbc.c());
        EXPECT(0xb3, gbc.d());
        EXPECT(0xfd, gbc.e());
        EXPECT(0xd9, gbc.h());
        EXPECT(0xa9, gbc.l());
        EXPECT(0x6155, gbc.sp());
        EXPECT(0x311f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 00F8
        gbc.setState(0xa8f, 0x2119, 0xcf10, 0x8fd5, 0xe0c0, 0x163, 0x1, 0x0);
        gbc.writeMem(0xa8f, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x8f, gbc.b());
        EXPECT(0xd5, gbc.c());
        EXPECT(0xe0, gbc.d());
        EXPECT(0xc0, gbc.e());
        EXPECT(0x1, gbc.h());
        EXPECT(0x63, gbc.l());
        EXPECT(0x2119, gbc.sp());
        EXPECT(0xa90, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 00F9
        gbc.setState(0x2a71, 0x25f5, 0xa3c0, 0x141e, 0x1b29, 0xc45, 0x1, 0x0);
        gbc.writeMem(0x2a71, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x14, gbc.b());
        EXPECT(0x1e, gbc.c());
        EXPECT(0x1b, gbc.d());
        EXPECT(0x29, gbc.e());
        EXPECT(0xc, gbc.h());
        EXPECT(0x45, gbc.l());
        EXPECT(0x25f5, gbc.sp());
        EXPECT(0x2a72, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 00FA
        gbc.setState(0x2ba7, 0xc8f5, 0xb870, 0xba1e, 0x17b3, 0xf4a9, 0x1, 0x0);
        gbc.writeMem(0x2ba7, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xba, gbc.b());
        EXPECT(0x1e, gbc.c());
        EXPECT(0x17, gbc.d());
        EXPECT(0xb3, gbc.e());
        EXPECT(0xf4, gbc.h());
        EXPECT(0xa9, gbc.l());
        EXPECT(0xc8f5, gbc.sp());
        EXPECT(0x2ba8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 00FB
        gbc.setState(0x738a, 0x5ca1, 0x9ef0, 0xa689, 0x8914, 0x1b34, 0x1, 0x0);
        gbc.writeMem(0x738a, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xa6, gbc.b());
        EXPECT(0x89, gbc.c());
        EXPECT(0x89, gbc.d());
        EXPECT(0x14, gbc.e());
        EXPECT(0x1b, gbc.h());
        EXPECT(0x34, gbc.l());
        EXPECT(0x5ca1, gbc.sp());
        EXPECT(0x738b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 00FC
        gbc.setState(0xbe72, 0xb275, 0xda70, 0x480e, 0x873e, 0x9158, 0x0, 0x1);
        gbc.writeMem(0xbe72, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x48, gbc.b());
        EXPECT(0xe, gbc.c());
        EXPECT(0x87, gbc.d());
        EXPECT(0x3e, gbc.e());
        EXPECT(0x91, gbc.h());
        EXPECT(0x58, gbc.l());
        EXPECT(0xb275, gbc.sp());
        EXPECT(0xbe73, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xbe72));
        // AF 00FD
        gbc.setState(0x4bd2, 0xa30d, 0x9a0, 0x1140, 0x910, 0x85ac, 0x1, 0x0);
        gbc.writeMem(0x4bd2, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x11, gbc.b());
        EXPECT(0x40, gbc.c());
        EXPECT(0x9, gbc.d());
        EXPECT(0x10, gbc.e());
        EXPECT(0x85, gbc.h());
        EXPECT(0xac, gbc.l());
        EXPECT(0xa30d, gbc.sp());
        EXPECT(0x4bd3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 00FE
        gbc.setState(0xa9b7, 0x6fd7, 0x4bd0, 0xeb64, 0xd83d, 0xce3c, 0x0, 0x1);
        gbc.writeMem(0xa9b7, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xeb, gbc.b());
        EXPECT(0x64, gbc.c());
        EXPECT(0xd8, gbc.d());
        EXPECT(0x3d, gbc.e());
        EXPECT(0xce, gbc.h());
        EXPECT(0x3c, gbc.l());
        EXPECT(0x6fd7, gbc.sp());
        EXPECT(0xa9b8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xa9b7));
        // AF 00FF
        gbc.setState(0xd3c9, 0xccf4, 0x20d0, 0x1d63, 0x5c7, 0x4e6e, 0x1, 0x0);
        gbc.writeMem(0xd3c9, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x1d, gbc.b());
        EXPECT(0x63, gbc.c());
        EXPECT(0x5, gbc.d());
        EXPECT(0xc7, gbc.e());
        EXPECT(0x4e, gbc.h());
        EXPECT(0x6e, gbc.l());
        EXPECT(0xccf4, gbc.sp());
        EXPECT(0xd3ca, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xd3c9));
        // AF 0100
        gbc.setState(0xc8bd, 0x2595, 0xa1f0, 0xf5e8, 0x2bae, 0x659b, 0x0, 0x1);
        gbc.writeMem(0xc8bd, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xf5, gbc.b());
        EXPECT(0xe8, gbc.c());
        EXPECT(0x2b, gbc.d());
        EXPECT(0xae, gbc.e());
        EXPECT(0x65, gbc.h());
        EXPECT(0x9b, gbc.l());
        EXPECT(0x2595, gbc.sp());
        EXPECT(0xc8be, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xc8bd));
        // AF 0101
        gbc.setState(0xabf6, 0x316f, 0x8270, 0xdce5, 0x57b3, 0xb466, 0x0, 0x0);
        gbc.writeMem(0xabf6, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xdc, gbc.b());
        EXPECT(0xe5, gbc.c());
        EXPECT(0x57, gbc.d());
        EXPECT(0xb3, gbc.e());
        EXPECT(0xb4, gbc.h());
        EXPECT(0x66, gbc.l());
        EXPECT(0x316f, gbc.sp());
        EXPECT(0xabf7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xabf6));
        // AF 0102
        gbc.setState(0x30e3, 0xe149, 0xc420, 0x3e1c, 0x86f8, 0xd3d9, 0x0, 0x1);
        gbc.writeMem(0x30e3, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x3e, gbc.b());
        EXPECT(0x1c, gbc.c());
        EXPECT(0x86, gbc.d());
        EXPECT(0xf8, gbc.e());
        EXPECT(0xd3, gbc.h());
        EXPECT(0xd9, gbc.l());
        EXPECT(0xe149, gbc.sp());
        EXPECT(0x30e4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0103
        gbc.setState(0xb4f6, 0x21e6, 0xf580, 0x1362, 0xbdfa, 0x1b76, 0x0, 0x0);
        gbc.writeMem(0xb4f6, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x13, gbc.b());
        EXPECT(0x62, gbc.c());
        EXPECT(0xbd, gbc.d());
        EXPECT(0xfa, gbc.e());
        EXPECT(0x1b, gbc.h());
        EXPECT(0x76, gbc.l());
        EXPECT(0x21e6, gbc.sp());
        EXPECT(0xb4f7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xb4f6));
        // AF 0104
        gbc.setState(0x4c02, 0x4e86, 0xdf40, 0x8296, 0xc057, 0x6e09, 0x1, 0x1);
        gbc.writeMem(0x4c02, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x82, gbc.b());
        EXPECT(0x96, gbc.c());
        EXPECT(0xc0, gbc.d());
        EXPECT(0x57, gbc.e());
        EXPECT(0x6e, gbc.h());
        EXPECT(0x9, gbc.l());
        EXPECT(0x4e86, gbc.sp());
        EXPECT(0x4c03, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0105
        gbc.setState(0x7d1b, 0x1590, 0xb8f0, 0x847c, 0x529f, 0x2cb4, 0x1, 0x0);
        gbc.writeMem(0x7d1b, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x84, gbc.b());
        EXPECT(0x7c, gbc.c());
        EXPECT(0x52, gbc.d());
        EXPECT(0x9f, gbc.e());
        EXPECT(0x2c, gbc.h());
        EXPECT(0xb4, gbc.l());
        EXPECT(0x1590, gbc.sp());
        EXPECT(0x7d1c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0106
        gbc.setState(0xe69b, 0x311c, 0xff40, 0x9415, 0xbc8c, 0x6a18, 0x0, 0x1);
        gbc.writeMem(0xe69b, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x94, gbc.b());
        EXPECT(0x15, gbc.c());
        EXPECT(0xbc, gbc.d());
        EXPECT(0x8c, gbc.e());
        EXPECT(0x6a, gbc.h());
        EXPECT(0x18, gbc.l());
        EXPECT(0x311c, gbc.sp());
        EXPECT(0xe69c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xe69b));
        // AF 0107
        gbc.setState(0x3355, 0xf762, 0x9440, 0x891c, 0x826a, 0xef0f, 0x0, 0x0);
        gbc.writeMem(0x3355, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x89, gbc.b());
        EXPECT(0x1c, gbc.c());
        EXPECT(0x82, gbc.d());
        EXPECT(0x6a, gbc.e());
        EXPECT(0xef, gbc.h());
        EXPECT(0xf, gbc.l());
        EXPECT(0xf762, gbc.sp());
        EXPECT(0x3356, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0108
        gbc.setState(0x3e2, 0xf147, 0xc920, 0xf352, 0xc14e, 0x1f22, 0x0, 0x0);
        gbc.writeMem(0x3e2, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xf3, gbc.b());
        EXPECT(0x52, gbc.c());
        EXPECT(0xc1, gbc.d());
        EXPECT(0x4e, gbc.e());
        EXPECT(0x1f, gbc.h());
        EXPECT(0x22, gbc.l());
        EXPECT(0xf147, gbc.sp());
        EXPECT(0x3e3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 010A
        gbc.setState(0x286e, 0x7de2, 0x6ca0, 0x257f, 0x5e76, 0xfefc, 0x0, 0x1);
        gbc.writeMem(0x286e, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x25, gbc.b());
        EXPECT(0x7f, gbc.c());
        EXPECT(0x5e, gbc.d());
        EXPECT(0x76, gbc.e());
        EXPECT(0xfe, gbc.h());
        EXPECT(0xfc, gbc.l());
        EXPECT(0x7de2, gbc.sp());
        EXPECT(0x286f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 010B
        gbc.setState(0x684c, 0x580a, 0xb950, 0x802a, 0xd13e, 0x2859, 0x1, 0x0);
        gbc.writeMem(0x684c, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x80, gbc.b());
        EXPECT(0x2a, gbc.c());
        EXPECT(0xd1, gbc.d());
        EXPECT(0x3e, gbc.e());
        EXPECT(0x28, gbc.h());
        EXPECT(0x59, gbc.l());
        EXPECT(0x580a, gbc.sp());
        EXPECT(0x684d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 010C
        gbc.setState(0x77d9, 0x845c, 0x9c90, 0xda13, 0xd05b, 0xa331, 0x0, 0x0);
        gbc.writeMem(0x77d9, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xda, gbc.b());
        EXPECT(0x13, gbc.c());
        EXPECT(0xd0, gbc.d());
        EXPECT(0x5b, gbc.e());
        EXPECT(0xa3, gbc.h());
        EXPECT(0x31, gbc.l());
        EXPECT(0x845c, gbc.sp());
        EXPECT(0x77da, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 010D
        gbc.setState(0x29db, 0x40f3, 0xb1b0, 0xbc2b, 0x5151, 0xc250, 0x0, 0x1);
        gbc.writeMem(0x29db, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xbc, gbc.b());
        EXPECT(0x2b, gbc.c());
        EXPECT(0x51, gbc.d());
        EXPECT(0x51, gbc.e());
        EXPECT(0xc2, gbc.h());
        EXPECT(0x50, gbc.l());
        EXPECT(0x40f3, gbc.sp());
        EXPECT(0x29dc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 010E
        gbc.setState(0xc011, 0x5741, 0xa070, 0xe7c4, 0x6c8a, 0xdfa1, 0x1, 0x0);
        gbc.writeMem(0xc011, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xe7, gbc.b());
        EXPECT(0xc4, gbc.c());
        EXPECT(0x6c, gbc.d());
        EXPECT(0x8a, gbc.e());
        EXPECT(0xdf, gbc.h());
        EXPECT(0xa1, gbc.l());
        EXPECT(0x5741, gbc.sp());
        EXPECT(0xc012, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xc011));
        // AF 010F
        gbc.setState(0x6b72, 0x959a, 0xdec0, 0xff5b, 0x7df1, 0xc2cb, 0x0, 0x1);
        gbc.writeMem(0x6b72, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xff, gbc.b());
        EXPECT(0x5b, gbc.c());
        EXPECT(0x7d, gbc.d());
        EXPECT(0xf1, gbc.e());
        EXPECT(0xc2, gbc.h());
        EXPECT(0xcb, gbc.l());
        EXPECT(0x959a, gbc.sp());
        EXPECT(0x6b73, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0110
        gbc.setState(0x225a, 0x43f1, 0x1570, 0xc42a, 0x7eb, 0xc3c8, 0x1, 0x1);
        gbc.writeMem(0x225a, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xc4, gbc.b());
        EXPECT(0x2a, gbc.c());
        EXPECT(0x7, gbc.d());
        EXPECT(0xeb, gbc.e());
        EXPECT(0xc3, gbc.h());
        EXPECT(0xc8, gbc.l());
        EXPECT(0x43f1, gbc.sp());
        EXPECT(0x225b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0111
        gbc.setState(0xc28d, 0xe17d, 0xe530, 0x7cd6, 0x3d38, 0x8c0f, 0x1, 0x1);
        gbc.writeMem(0xc28d, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x7c, gbc.b());
        EXPECT(0xd6, gbc.c());
        EXPECT(0x3d, gbc.d());
        EXPECT(0x38, gbc.e());
        EXPECT(0x8c, gbc.h());
        EXPECT(0xf, gbc.l());
        EXPECT(0xe17d, gbc.sp());
        EXPECT(0xc28e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xc28d));
        // AF 0112
        gbc.setState(0x1712, 0x2052, 0x4780, 0xac57, 0xc1b6, 0x9eea, 0x0, 0x1);
        gbc.writeMem(0x1712, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xac, gbc.b());
        EXPECT(0x57, gbc.c());
        EXPECT(0xc1, gbc.d());
        EXPECT(0xb6, gbc.e());
        EXPECT(0x9e, gbc.h());
        EXPECT(0xea, gbc.l());
        EXPECT(0x2052, gbc.sp());
        EXPECT(0x1713, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0113
        gbc.setState(0x9438, 0x3304, 0xeca0, 0x1079, 0xe79e, 0xd46c, 0x0, 0x0);
        gbc.writeMem(0x9438, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x10, gbc.b());
        EXPECT(0x79, gbc.c());
        EXPECT(0xe7, gbc.d());
        EXPECT(0x9e, gbc.e());
        EXPECT(0xd4, gbc.h());
        EXPECT(0x6c, gbc.l());
        EXPECT(0x3304, gbc.sp());
        EXPECT(0x9439, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x9438));
        // AF 0114
        gbc.setState(0xb8a8, 0x8ccc, 0xb750, 0x932b, 0x1824, 0xaa84, 0x0, 0x1);
        gbc.writeMem(0xb8a8, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x93, gbc.b());
        EXPECT(0x2b, gbc.c());
        EXPECT(0x18, gbc.d());
        EXPECT(0x24, gbc.e());
        EXPECT(0xaa, gbc.h());
        EXPECT(0x84, gbc.l());
        EXPECT(0x8ccc, gbc.sp());
        EXPECT(0xb8a9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xb8a8));
        // AF 0115
        gbc.setState(0x4d38, 0x3dab, 0xc490, 0xd3e0, 0xc200, 0xcf2b, 0x1, 0x0);
        gbc.writeMem(0x4d38, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xd3, gbc.b());
        EXPECT(0xe0, gbc.c());
        EXPECT(0xc2, gbc.d());
        EXPECT(0x0, gbc.e());
        EXPECT(0xcf, gbc.h());
        EXPECT(0x2b, gbc.l());
        EXPECT(0x3dab, gbc.sp());
        EXPECT(0x4d39, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0116
        gbc.setState(0x1242, 0x5def, 0x2ef0, 0x4a10, 0x39cb, 0x5636, 0x0, 0x0);
        gbc.writeMem(0x1242, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x4a, gbc.b());
        EXPECT(0x10, gbc.c());
        EXPECT(0x39, gbc.d());
        EXPECT(0xcb, gbc.e());
        EXPECT(0x56, gbc.h());
        EXPECT(0x36, gbc.l());
        EXPECT(0x5def, gbc.sp());
        EXPECT(0x1243, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0117
        gbc.setState(0xad15, 0xba94, 0xe730, 0xf91d, 0xca61, 0xb84c, 0x1, 0x1);
        gbc.writeMem(0xad15, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xf9, gbc.b());
        EXPECT(0x1d, gbc.c());
        EXPECT(0xca, gbc.d());
        EXPECT(0x61, gbc.e());
        EXPECT(0xb8, gbc.h());
        EXPECT(0x4c, gbc.l());
        EXPECT(0xba94, gbc.sp());
        EXPECT(0xad16, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xad15));
        // AF 0118
        gbc.setState(0x496a, 0xa95c, 0x5330, 0x58fd, 0x356c, 0x45f9, 0x1, 0x0);
        gbc.writeMem(0x496a, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x58, gbc.b());
        EXPECT(0xfd, gbc.c());
        EXPECT(0x35, gbc.d());
        EXPECT(0x6c, gbc.e());
        EXPECT(0x45, gbc.h());
        EXPECT(0xf9, gbc.l());
        EXPECT(0xa95c, gbc.sp());
        EXPECT(0x496b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0119
        gbc.setState(0x4658, 0x70e2, 0x5d0, 0xf5f8, 0x7a50, 0x23c5, 0x0, 0x1);
        gbc.writeMem(0x4658, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xf5, gbc.b());
        EXPECT(0xf8, gbc.c());
        EXPECT(0x7a, gbc.d());
        EXPECT(0x50, gbc.e());
        EXPECT(0x23, gbc.h());
        EXPECT(0xc5, gbc.l());
        EXPECT(0x70e2, gbc.sp());
        EXPECT(0x4659, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 011A
        gbc.setState(0xa923, 0xf1, 0x6a20, 0x4e07, 0x2a77, 0xa942, 0x1, 0x1);
        gbc.writeMem(0xa923, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x4e, gbc.b());
        EXPECT(0x7, gbc.c());
        EXPECT(0x2a, gbc.d());
        EXPECT(0x77, gbc.e());
        EXPECT(0xa9, gbc.h());
        EXPECT(0x42, gbc.l());
        EXPECT(0xf1, gbc.sp());
        EXPECT(0xa924, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xa923));
        // AF 011B
        gbc.setState(0x9e4a, 0x5a41, 0xc520, 0xc519, 0x1705, 0x5b62, 0x0, 0x1);
        gbc.writeMem(0x9e4a, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xc5, gbc.b());
        EXPECT(0x19, gbc.c());
        EXPECT(0x17, gbc.d());
        EXPECT(0x5, gbc.e());
        EXPECT(0x5b, gbc.h());
        EXPECT(0x62, gbc.l());
        EXPECT(0x5a41, gbc.sp());
        EXPECT(0x9e4b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x9e4a));
        // AF 011C
        gbc.setState(0x9fe, 0x375c, 0xcd10, 0x35ed, 0x524f, 0xbe53, 0x0, 0x1);
        gbc.writeMem(0x9fe, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x35, gbc.b());
        EXPECT(0xed, gbc.c());
        EXPECT(0x52, gbc.d());
        EXPECT(0x4f, gbc.e());
        EXPECT(0xbe, gbc.h());
        EXPECT(0x53, gbc.l());
        EXPECT(0x375c, gbc.sp());
        EXPECT(0x9ff, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 011D
        gbc.setState(0x9e26, 0x2d, 0xdcd0, 0xa649, 0xd7ee, 0x3995, 0x0, 0x0);
        gbc.writeMem(0x9e26, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xa6, gbc.b());
        EXPECT(0x49, gbc.c());
        EXPECT(0xd7, gbc.d());
        EXPECT(0xee, gbc.e());
        EXPECT(0x39, gbc.h());
        EXPECT(0x95, gbc.l());
        EXPECT(0x2d, gbc.sp());
        EXPECT(0x9e27, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x9e26));
        // AF 011E
        gbc.setState(0xbc5e, 0xefba, 0x2090, 0x643f, 0x8f51, 0x7907, 0x0, 0x0);
        gbc.writeMem(0xbc5e, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x64, gbc.b());
        EXPECT(0x3f, gbc.c());
        EXPECT(0x8f, gbc.d());
        EXPECT(0x51, gbc.e());
        EXPECT(0x79, gbc.h());
        EXPECT(0x7, gbc.l());
        EXPECT(0xefba, gbc.sp());
        EXPECT(0xbc5f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xbc5e));
        // AF 011F
        gbc.setState(0xa154, 0x7ee9, 0xdf50, 0xaecb, 0x5c90, 0xd54, 0x1, 0x0);
        gbc.writeMem(0xa154, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xae, gbc.b());
        EXPECT(0xcb, gbc.c());
        EXPECT(0x5c, gbc.d());
        EXPECT(0x90, gbc.e());
        EXPECT(0xd, gbc.h());
        EXPECT(0x54, gbc.l());
        EXPECT(0x7ee9, gbc.sp());
        EXPECT(0xa155, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xa154));
        // AF 0121
        gbc.setState(0x1135, 0x64b9, 0x5c0, 0xee9, 0xa879, 0xb16f, 0x1, 0x0);
        gbc.writeMem(0x1135, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xe, gbc.b());
        EXPECT(0xe9, gbc.c());
        EXPECT(0xa8, gbc.d());
        EXPECT(0x79, gbc.e());
        EXPECT(0xb1, gbc.h());
        EXPECT(0x6f, gbc.l());
        EXPECT(0x64b9, gbc.sp());
        EXPECT(0x1136, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0122
        gbc.setState(0x9741, 0xaa99, 0x6ed0, 0x21ff, 0xcc66, 0x350a, 0x0, 0x0);
        gbc.writeMem(0x9741, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x21, gbc.b());
        EXPECT(0xff, gbc.c());
        EXPECT(0xcc, gbc.d());
        EXPECT(0x66, gbc.e());
        EXPECT(0x35, gbc.h());
        EXPECT(0xa, gbc.l());
        EXPECT(0xaa99, gbc.sp());
        EXPECT(0x9742, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x9741));
        // AF 0123
        gbc.setState(0x8350, 0x7421, 0x5b40, 0x89bc, 0x8874, 0xa98d, 0x0, 0x0);
        gbc.writeMem(0x8350, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x89, gbc.b());
        EXPECT(0xbc, gbc.c());
        EXPECT(0x88, gbc.d());
        EXPECT(0x74, gbc.e());
        EXPECT(0xa9, gbc.h());
        EXPECT(0x8d, gbc.l());
        EXPECT(0x7421, gbc.sp());
        EXPECT(0x8351, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x8350));
        // AF 0124
        gbc.setState(0xc608, 0x681f, 0xa20, 0x28c0, 0x97ff, 0xf3f6, 0x0, 0x0);
        gbc.writeMem(0xc608, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x28, gbc.b());
        EXPECT(0xc0, gbc.c());
        EXPECT(0x97, gbc.d());
        EXPECT(0xff, gbc.e());
        EXPECT(0xf3, gbc.h());
        EXPECT(0xf6, gbc.l());
        EXPECT(0x681f, gbc.sp());
        EXPECT(0xc609, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xc608));
        // AF 0126
        gbc.setState(0x65c1, 0x18fa, 0xf6a0, 0x20d3, 0x138, 0xb632, 0x1, 0x0);
        gbc.writeMem(0x65c1, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x20, gbc.b());
        EXPECT(0xd3, gbc.c());
        EXPECT(0x1, gbc.d());
        EXPECT(0x38, gbc.e());
        EXPECT(0xb6, gbc.h());
        EXPECT(0x32, gbc.l());
        EXPECT(0x18fa, gbc.sp());
        EXPECT(0x65c2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0127
        gbc.setState(0x918a, 0xa2f3, 0x7200, 0x29f, 0x67c1, 0xf5c1, 0x0, 0x0);
        gbc.writeMem(0x918a, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x2, gbc.b());
        EXPECT(0x9f, gbc.c());
        EXPECT(0x67, gbc.d());
        EXPECT(0xc1, gbc.e());
        EXPECT(0xf5, gbc.h());
        EXPECT(0xc1, gbc.l());
        EXPECT(0xa2f3, gbc.sp());
        EXPECT(0x918b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x918a));
        // AF 0128
        gbc.setState(0xa123, 0xabfd, 0xc640, 0x5de8, 0x137f, 0x8be2, 0x0, 0x1);
        gbc.writeMem(0xa123, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x5d, gbc.b());
        EXPECT(0xe8, gbc.c());
        EXPECT(0x13, gbc.d());
        EXPECT(0x7f, gbc.e());
        EXPECT(0x8b, gbc.h());
        EXPECT(0xe2, gbc.l());
        EXPECT(0xabfd, gbc.sp());
        EXPECT(0xa124, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xa123));
        // AF 0129
        gbc.setState(0xd3fe, 0xdb17, 0xf7c0, 0xa42, 0xa6e1, 0x6cca, 0x1, 0x0);
        gbc.writeMem(0xd3fe, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xa, gbc.b());
        EXPECT(0x42, gbc.c());
        EXPECT(0xa6, gbc.d());
        EXPECT(0xe1, gbc.e());
        EXPECT(0x6c, gbc.h());
        EXPECT(0xca, gbc.l());
        EXPECT(0xdb17, gbc.sp());
        EXPECT(0xd3ff, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xd3fe));
        // AF 012A
        gbc.setState(0xbf5b, 0xd813, 0x49f0, 0x92ce, 0x3cb7, 0x244, 0x0, 0x1);
        gbc.writeMem(0xbf5b, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x92, gbc.b());
        EXPECT(0xce, gbc.c());
        EXPECT(0x3c, gbc.d());
        EXPECT(0xb7, gbc.e());
        EXPECT(0x2, gbc.h());
        EXPECT(0x44, gbc.l());
        EXPECT(0xd813, gbc.sp());
        EXPECT(0xbf5c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xbf5b));
        // AF 012B
        gbc.setState(0xd6d9, 0x18f6, 0xe2f0, 0xe619, 0xa81b, 0x74fb, 0x0, 0x0);
        gbc.writeMem(0xd6d9, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xe6, gbc.b());
        EXPECT(0x19, gbc.c());
        EXPECT(0xa8, gbc.d());
        EXPECT(0x1b, gbc.e());
        EXPECT(0x74, gbc.h());
        EXPECT(0xfb, gbc.l());
        EXPECT(0x18f6, gbc.sp());
        EXPECT(0xd6da, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xd6d9));
        // AF 012C
        gbc.setState(0x30f7, 0xaf7, 0xaf30, 0x1a8e, 0x8a2e, 0xa4a, 0x1, 0x0);
        gbc.writeMem(0x30f7, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x1a, gbc.b());
        EXPECT(0x8e, gbc.c());
        EXPECT(0x8a, gbc.d());
        EXPECT(0x2e, gbc.e());
        EXPECT(0xa, gbc.h());
        EXPECT(0x4a, gbc.l());
        EXPECT(0xaf7, gbc.sp());
        EXPECT(0x30f8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 012D
        gbc.setState(0xa680, 0xe69d, 0x1460, 0xd6d0, 0x3df9, 0xd04a, 0x0, 0x1);
        gbc.writeMem(0xa680, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xd6, gbc.b());
        EXPECT(0xd0, gbc.c());
        EXPECT(0x3d, gbc.d());
        EXPECT(0xf9, gbc.e());
        EXPECT(0xd0, gbc.h());
        EXPECT(0x4a, gbc.l());
        EXPECT(0xe69d, gbc.sp());
        EXPECT(0xa681, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xa680));
        // AF 012E
        gbc.setState(0xabff, 0x5aad, 0x9940, 0x17c1, 0xd838, 0x2adc, 0x0, 0x0);
        gbc.writeMem(0xabff, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x17, gbc.b());
        EXPECT(0xc1, gbc.c());
        EXPECT(0xd8, gbc.d());
        EXPECT(0x38, gbc.e());
        EXPECT(0x2a, gbc.h());
        EXPECT(0xdc, gbc.l());
        EXPECT(0x5aad, gbc.sp());
        EXPECT(0xac00, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xabff));
        // AF 012F
        gbc.setState(0x6052, 0xd83d, 0x8950, 0x3ad6, 0xe1c3, 0x6825, 0x0, 0x0);
        gbc.writeMem(0x6052, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x3a, gbc.b());
        EXPECT(0xd6, gbc.c());
        EXPECT(0xe1, gbc.d());
        EXPECT(0xc3, gbc.e());
        EXPECT(0x68, gbc.h());
        EXPECT(0x25, gbc.l());
        EXPECT(0xd83d, gbc.sp());
        EXPECT(0x6053, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0130
        gbc.setState(0x8306, 0x45, 0x7930, 0xaa71, 0xba9d, 0x1e9f, 0x0, 0x0);
        gbc.writeMem(0x8306, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xaa, gbc.b());
        EXPECT(0x71, gbc.c());
        EXPECT(0xba, gbc.d());
        EXPECT(0x9d, gbc.e());
        EXPECT(0x1e, gbc.h());
        EXPECT(0x9f, gbc.l());
        EXPECT(0x45, gbc.sp());
        EXPECT(0x8307, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x8306));
        // AF 0131
        gbc.setState(0x30bf, 0xb2ca, 0x2270, 0xac7d, 0xb085, 0x71b2, 0x0, 0x0);
        gbc.writeMem(0x30bf, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xac, gbc.b());
        EXPECT(0x7d, gbc.c());
        EXPECT(0xb0, gbc.d());
        EXPECT(0x85, gbc.e());
        EXPECT(0x71, gbc.h());
        EXPECT(0xb2, gbc.l());
        EXPECT(0xb2ca, gbc.sp());
        EXPECT(0x30c0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0132
        gbc.setState(0xa95f, 0x7548, 0xa5d0, 0xd56f, 0xc534, 0x9a82, 0x0, 0x0);
        gbc.writeMem(0xa95f, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xd5, gbc.b());
        EXPECT(0x6f, gbc.c());
        EXPECT(0xc5, gbc.d());
        EXPECT(0x34, gbc.e());
        EXPECT(0x9a, gbc.h());
        EXPECT(0x82, gbc.l());
        EXPECT(0x7548, gbc.sp());
        EXPECT(0xa960, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xa95f));
        // AF 0133
        gbc.setState(0x1349, 0xc7d9, 0x6700, 0x7ce8, 0x3cd6, 0x8298, 0x0, 0x0);
        gbc.writeMem(0x1349, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x7c, gbc.b());
        EXPECT(0xe8, gbc.c());
        EXPECT(0x3c, gbc.d());
        EXPECT(0xd6, gbc.e());
        EXPECT(0x82, gbc.h());
        EXPECT(0x98, gbc.l());
        EXPECT(0xc7d9, gbc.sp());
        EXPECT(0x134a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0134
        gbc.setState(0x12c1, 0x12f3, 0xcb50, 0xc23a, 0xae15, 0x18db, 0x0, 0x0);
        gbc.writeMem(0x12c1, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xc2, gbc.b());
        EXPECT(0x3a, gbc.c());
        EXPECT(0xae, gbc.d());
        EXPECT(0x15, gbc.e());
        EXPECT(0x18, gbc.h());
        EXPECT(0xdb, gbc.l());
        EXPECT(0x12f3, gbc.sp());
        EXPECT(0x12c2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0135
        gbc.setState(0x8a78, 0xb89a, 0xcbb0, 0x549a, 0xa815, 0xf1b3, 0x0, 0x0);
        gbc.writeMem(0x8a78, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x54, gbc.b());
        EXPECT(0x9a, gbc.c());
        EXPECT(0xa8, gbc.d());
        EXPECT(0x15, gbc.e());
        EXPECT(0xf1, gbc.h());
        EXPECT(0xb3, gbc.l());
        EXPECT(0xb89a, gbc.sp());
        EXPECT(0x8a79, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x8a78));
        // AF 0136
        gbc.setState(0xe233, 0x86a1, 0x820, 0xa3e, 0xe1b2, 0x3532, 0x0, 0x0);
        gbc.writeMem(0xe233, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xa, gbc.b());
        EXPECT(0x3e, gbc.c());
        EXPECT(0xe1, gbc.d());
        EXPECT(0xb2, gbc.e());
        EXPECT(0x35, gbc.h());
        EXPECT(0x32, gbc.l());
        EXPECT(0x86a1, gbc.sp());
        EXPECT(0xe234, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xe233));
        // AF 0137
        gbc.setState(0xa4a1, 0xff29, 0xc6c0, 0xc502, 0x7c6f, 0xe9e7, 0x0, 0x1);
        gbc.writeMem(0xa4a1, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xc5, gbc.b());
        EXPECT(0x2, gbc.c());
        EXPECT(0x7c, gbc.d());
        EXPECT(0x6f, gbc.e());
        EXPECT(0xe9, gbc.h());
        EXPECT(0xe7, gbc.l());
        EXPECT(0xff29, gbc.sp());
        EXPECT(0xa4a2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xa4a1));
        // AF 0138
        gbc.setState(0x6ba, 0x373, 0x7ec0, 0x176, 0xffcf, 0x4391, 0x1, 0x1);
        gbc.writeMem(0x6ba, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x1, gbc.b());
        EXPECT(0x76, gbc.c());
        EXPECT(0xff, gbc.d());
        EXPECT(0xcf, gbc.e());
        EXPECT(0x43, gbc.h());
        EXPECT(0x91, gbc.l());
        EXPECT(0x373, gbc.sp());
        EXPECT(0x6bb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0139
        gbc.setState(0x734, 0x794a, 0x7490, 0x94ab, 0x5f25, 0x298d, 0x0, 0x0);
        gbc.writeMem(0x734, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x94, gbc.b());
        EXPECT(0xab, gbc.c());
        EXPECT(0x5f, gbc.d());
        EXPECT(0x25, gbc.e());
        EXPECT(0x29, gbc.h());
        EXPECT(0x8d, gbc.l());
        EXPECT(0x794a, gbc.sp());
        EXPECT(0x735, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 013A
        gbc.setState(0x75fc, 0x544, 0x6790, 0xf8be, 0x9b4, 0x6b20, 0x1, 0x1);
        gbc.writeMem(0x75fc, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xf8, gbc.b());
        EXPECT(0xbe, gbc.c());
        EXPECT(0x9, gbc.d());
        EXPECT(0xb4, gbc.e());
        EXPECT(0x6b, gbc.h());
        EXPECT(0x20, gbc.l());
        EXPECT(0x544, gbc.sp());
        EXPECT(0x75fd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 013B
        gbc.setState(0x8978, 0xbbb0, 0x18e0, 0x91c4, 0xe365, 0xbd5d, 0x0, 0x1);
        gbc.writeMem(0x8978, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x91, gbc.b());
        EXPECT(0xc4, gbc.c());
        EXPECT(0xe3, gbc.d());
        EXPECT(0x65, gbc.e());
        EXPECT(0xbd, gbc.h());
        EXPECT(0x5d, gbc.l());
        EXPECT(0xbbb0, gbc.sp());
        EXPECT(0x8979, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x8978));
        // AF 013C
        gbc.setState(0x5766, 0xf38e, 0xcbd0, 0x8172, 0xb7c5, 0xca9e, 0x1, 0x1);
        gbc.writeMem(0x5766, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x81, gbc.b());
        EXPECT(0x72, gbc.c());
        EXPECT(0xb7, gbc.d());
        EXPECT(0xc5, gbc.e());
        EXPECT(0xca, gbc.h());
        EXPECT(0x9e, gbc.l());
        EXPECT(0xf38e, gbc.sp());
        EXPECT(0x5767, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 013D
        gbc.setState(0xc5b8, 0xe609, 0x6900, 0x2d9d, 0x75f3, 0x720e, 0x1, 0x1);
        gbc.writeMem(0xc5b8, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x2d, gbc.b());
        EXPECT(0x9d, gbc.c());
        EXPECT(0x75, gbc.d());
        EXPECT(0xf3, gbc.e());
        EXPECT(0x72, gbc.h());
        EXPECT(0xe, gbc.l());
        EXPECT(0xe609, gbc.sp());
        EXPECT(0xc5b9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xc5b8));
        // AF 013E
        gbc.setState(0x1940, 0x84cc, 0xef40, 0x667c, 0x8edb, 0x200, 0x0, 0x1);
        gbc.writeMem(0x1940, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x66, gbc.b());
        EXPECT(0x7c, gbc.c());
        EXPECT(0x8e, gbc.d());
        EXPECT(0xdb, gbc.e());
        EXPECT(0x2, gbc.h());
        EXPECT(0x0, gbc.l());
        EXPECT(0x84cc, gbc.sp());
        EXPECT(0x1941, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0140
        gbc.setState(0x3288, 0xe6e7, 0xef20, 0x1859, 0xf09a, 0x2597, 0x1, 0x0);
        gbc.writeMem(0x3288, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x18, gbc.b());
        EXPECT(0x59, gbc.c());
        EXPECT(0xf0, gbc.d());
        EXPECT(0x9a, gbc.e());
        EXPECT(0x25, gbc.h());
        EXPECT(0x97, gbc.l());
        EXPECT(0xe6e7, gbc.sp());
        EXPECT(0x3289, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0141
        gbc.setState(0x7041, 0xc1ea, 0x140, 0xfe4a, 0x64bf, 0x7edc, 0x0, 0x0);
        gbc.writeMem(0x7041, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xfe, gbc.b());
        EXPECT(0x4a, gbc.c());
        EXPECT(0x64, gbc.d());
        EXPECT(0xbf, gbc.e());
        EXPECT(0x7e, gbc.h());
        EXPECT(0xdc, gbc.l());
        EXPECT(0xc1ea, gbc.sp());
        EXPECT(0x7042, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0142
        gbc.setState(0x670b, 0x92a9, 0x1060, 0xd7ac, 0x6a2d, 0xd503, 0x1, 0x0);
        gbc.writeMem(0x670b, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xd7, gbc.b());
        EXPECT(0xac, gbc.c());
        EXPECT(0x6a, gbc.d());
        EXPECT(0x2d, gbc.e());
        EXPECT(0xd5, gbc.h());
        EXPECT(0x3, gbc.l());
        EXPECT(0x92a9, gbc.sp());
        EXPECT(0x670c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0143
        gbc.setState(0x4e2b, 0x4815, 0xd080, 0xf35a, 0x4fa2, 0x8f0, 0x0, 0x1);
        gbc.writeMem(0x4e2b, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xf3, gbc.b());
        EXPECT(0x5a, gbc.c());
        EXPECT(0x4f, gbc.d());
        EXPECT(0xa2, gbc.e());
        EXPECT(0x8, gbc.h());
        EXPECT(0xf0, gbc.l());
        EXPECT(0x4815, gbc.sp());
        EXPECT(0x4e2c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0144
        gbc.setState(0x9fd2, 0xc7cc, 0x1ff0, 0x98fb, 0x58fd, 0x2f1c, 0x1, 0x0);
        gbc.writeMem(0x9fd2, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x98, gbc.b());
        EXPECT(0xfb, gbc.c());
        EXPECT(0x58, gbc.d());
        EXPECT(0xfd, gbc.e());
        EXPECT(0x2f, gbc.h());
        EXPECT(0x1c, gbc.l());
        EXPECT(0xc7cc, gbc.sp());
        EXPECT(0x9fd3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x9fd2));
        // AF 0145
        gbc.setState(0xe419, 0x8382, 0x3240, 0x585a, 0x4261, 0xe61f, 0x1, 0x0);
        gbc.writeMem(0xe419, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x58, gbc.b());
        EXPECT(0x5a, gbc.c());
        EXPECT(0x42, gbc.d());
        EXPECT(0x61, gbc.e());
        EXPECT(0xe6, gbc.h());
        EXPECT(0x1f, gbc.l());
        EXPECT(0x8382, gbc.sp());
        EXPECT(0xe41a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xe419));
        // AF 0146
        gbc.setState(0xe278, 0x8099, 0xaad0, 0xb36f, 0xd05, 0x367c, 0x1, 0x0);
        gbc.writeMem(0xe278, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xb3, gbc.b());
        EXPECT(0x6f, gbc.c());
        EXPECT(0xd, gbc.d());
        EXPECT(0x5, gbc.e());
        EXPECT(0x36, gbc.h());
        EXPECT(0x7c, gbc.l());
        EXPECT(0x8099, gbc.sp());
        EXPECT(0xe279, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xe278));
        // AF 0147
        gbc.setState(0xbdb9, 0xc82b, 0xdc60, 0x46ea, 0xabb6, 0x2441, 0x1, 0x1);
        gbc.writeMem(0xbdb9, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x46, gbc.b());
        EXPECT(0xea, gbc.c());
        EXPECT(0xab, gbc.d());
        EXPECT(0xb6, gbc.e());
        EXPECT(0x24, gbc.h());
        EXPECT(0x41, gbc.l());
        EXPECT(0xc82b, gbc.sp());
        EXPECT(0xbdba, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xbdb9));
        // AF 0148
        gbc.setState(0x796e, 0x4e63, 0x3f70, 0xec0d, 0xb66f, 0xa426, 0x1, 0x1);
        gbc.writeMem(0x796e, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xec, gbc.b());
        EXPECT(0xd, gbc.c());
        EXPECT(0xb6, gbc.d());
        EXPECT(0x6f, gbc.e());
        EXPECT(0xa4, gbc.h());
        EXPECT(0x26, gbc.l());
        EXPECT(0x4e63, gbc.sp());
        EXPECT(0x796f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0149
        gbc.setState(0xc421, 0x2360, 0xb400, 0x21d8, 0xeb57, 0x4d1d, 0x1, 0x1);
        gbc.writeMem(0xc421, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x21, gbc.b());
        EXPECT(0xd8, gbc.c());
        EXPECT(0xeb, gbc.d());
        EXPECT(0x57, gbc.e());
        EXPECT(0x4d, gbc.h());
        EXPECT(0x1d, gbc.l());
        EXPECT(0x2360, gbc.sp());
        EXPECT(0xc422, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xc421));
        // AF 014A
        gbc.setState(0x7bc3, 0x4b72, 0xc3c0, 0x3fa8, 0x2fdd, 0x93d1, 0x0, 0x1);
        gbc.writeMem(0x7bc3, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x3f, gbc.b());
        EXPECT(0xa8, gbc.c());
        EXPECT(0x2f, gbc.d());
        EXPECT(0xdd, gbc.e());
        EXPECT(0x93, gbc.h());
        EXPECT(0xd1, gbc.l());
        EXPECT(0x4b72, gbc.sp());
        EXPECT(0x7bc4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 014B
        gbc.setState(0xb664, 0xdc65, 0x8820, 0x8c2e, 0xe561, 0x4e83, 0x1, 0x0);
        gbc.writeMem(0xb664, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x8c, gbc.b());
        EXPECT(0x2e, gbc.c());
        EXPECT(0xe5, gbc.d());
        EXPECT(0x61, gbc.e());
        EXPECT(0x4e, gbc.h());
        EXPECT(0x83, gbc.l());
        EXPECT(0xdc65, gbc.sp());
        EXPECT(0xb665, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xb664));
        // AF 014C
        gbc.setState(0xe789, 0x8b08, 0x94c0, 0x2384, 0x95cd, 0x1096, 0x0, 0x0);
        gbc.writeMem(0xe789, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x23, gbc.b());
        EXPECT(0x84, gbc.c());
        EXPECT(0x95, gbc.d());
        EXPECT(0xcd, gbc.e());
        EXPECT(0x10, gbc.h());
        EXPECT(0x96, gbc.l());
        EXPECT(0x8b08, gbc.sp());
        EXPECT(0xe78a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xe789));
        // AF 014D
        gbc.setState(0x856f, 0x79f6, 0x3940, 0xe711, 0x75d0, 0xe72f, 0x1, 0x0);
        gbc.writeMem(0x856f, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xe7, gbc.b());
        EXPECT(0x11, gbc.c());
        EXPECT(0x75, gbc.d());
        EXPECT(0xd0, gbc.e());
        EXPECT(0xe7, gbc.h());
        EXPECT(0x2f, gbc.l());
        EXPECT(0x79f6, gbc.sp());
        EXPECT(0x8570, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x856f));
        // AF 014E
        gbc.setState(0x8b25, 0xecc1, 0xdb00, 0x779d, 0x3853, 0xac0, 0x0, 0x0);
        gbc.writeMem(0x8b25, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x77, gbc.b());
        EXPECT(0x9d, gbc.c());
        EXPECT(0x38, gbc.d());
        EXPECT(0x53, gbc.e());
        EXPECT(0xa, gbc.h());
        EXPECT(0xc0, gbc.l());
        EXPECT(0xecc1, gbc.sp());
        EXPECT(0x8b26, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x8b25));
        // AF 014F
        gbc.setState(0xb442, 0x9f3, 0x3470, 0x8be6, 0x266b, 0x5f26, 0x1, 0x0);
        gbc.writeMem(0xb442, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x8b, gbc.b());
        EXPECT(0xe6, gbc.c());
        EXPECT(0x26, gbc.d());
        EXPECT(0x6b, gbc.e());
        EXPECT(0x5f, gbc.h());
        EXPECT(0x26, gbc.l());
        EXPECT(0x9f3, gbc.sp());
        EXPECT(0xb443, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xb442));
        // AF 0150
        gbc.setState(0x21d3, 0x604c, 0x4900, 0x9ed7, 0x5ac1, 0x9874, 0x1, 0x1);
        gbc.writeMem(0x21d3, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x9e, gbc.b());
        EXPECT(0xd7, gbc.c());
        EXPECT(0x5a, gbc.d());
        EXPECT(0xc1, gbc.e());
        EXPECT(0x98, gbc.h());
        EXPECT(0x74, gbc.l());
        EXPECT(0x604c, gbc.sp());
        EXPECT(0x21d4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0151
        gbc.setState(0x6905, 0xfc3b, 0xdf70, 0xefc3, 0x389a, 0xeb89, 0x1, 0x0);
        gbc.writeMem(0x6905, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xef, gbc.b());
        EXPECT(0xc3, gbc.c());
        EXPECT(0x38, gbc.d());
        EXPECT(0x9a, gbc.e());
        EXPECT(0xeb, gbc.h());
        EXPECT(0x89, gbc.l());
        EXPECT(0xfc3b, gbc.sp());
        EXPECT(0x6906, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0152
        gbc.setState(0xcc7f, 0x6440, 0xc4d0, 0xc67a, 0x9612, 0x91c3, 0x1, 0x1);
        gbc.writeMem(0xcc7f, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xc6, gbc.b());
        EXPECT(0x7a, gbc.c());
        EXPECT(0x96, gbc.d());
        EXPECT(0x12, gbc.e());
        EXPECT(0x91, gbc.h());
        EXPECT(0xc3, gbc.l());
        EXPECT(0x6440, gbc.sp());
        EXPECT(0xcc80, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xcc7f));
        // AF 0153
        gbc.setState(0x3025, 0x308d, 0xd7b0, 0x5bce, 0xbca0, 0xc0a, 0x0, 0x0);
        gbc.writeMem(0x3025, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x5b, gbc.b());
        EXPECT(0xce, gbc.c());
        EXPECT(0xbc, gbc.d());
        EXPECT(0xa0, gbc.e());
        EXPECT(0xc, gbc.h());
        EXPECT(0xa, gbc.l());
        EXPECT(0x308d, gbc.sp());
        EXPECT(0x3026, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0154
        gbc.setState(0xdacc, 0x1c1d, 0x9c30, 0x1fe9, 0x70a8, 0x7b38, 0x0, 0x1);
        gbc.writeMem(0xdacc, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x1f, gbc.b());
        EXPECT(0xe9, gbc.c());
        EXPECT(0x70, gbc.d());
        EXPECT(0xa8, gbc.e());
        EXPECT(0x7b, gbc.h());
        EXPECT(0x38, gbc.l());
        EXPECT(0x1c1d, gbc.sp());
        EXPECT(0xdacd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xdacc));
        // AF 0155
        gbc.setState(0x7c2, 0x416, 0xd280, 0xa143, 0xdeeb, 0x6990, 0x0, 0x1);
        gbc.writeMem(0x7c2, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xa1, gbc.b());
        EXPECT(0x43, gbc.c());
        EXPECT(0xde, gbc.d());
        EXPECT(0xeb, gbc.e());
        EXPECT(0x69, gbc.h());
        EXPECT(0x90, gbc.l());
        EXPECT(0x416, gbc.sp());
        EXPECT(0x7c3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0156
        gbc.setState(0x9d29, 0x2ce3, 0x5e00, 0x499d, 0xc91f, 0x6bcd, 0x1, 0x0);
        gbc.writeMem(0x9d29, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x49, gbc.b());
        EXPECT(0x9d, gbc.c());
        EXPECT(0xc9, gbc.d());
        EXPECT(0x1f, gbc.e());
        EXPECT(0x6b, gbc.h());
        EXPECT(0xcd, gbc.l());
        EXPECT(0x2ce3, gbc.sp());
        EXPECT(0x9d2a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x9d29));
        // AF 0157
        gbc.setState(0x43cd, 0xf8dd, 0x7330, 0x1b6, 0x71db, 0x87a7, 0x0, 0x1);
        gbc.writeMem(0x43cd, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x1, gbc.b());
        EXPECT(0xb6, gbc.c());
        EXPECT(0x71, gbc.d());
        EXPECT(0xdb, gbc.e());
        EXPECT(0x87, gbc.h());
        EXPECT(0xa7, gbc.l());
        EXPECT(0xf8dd, gbc.sp());
        EXPECT(0x43ce, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0158
        gbc.setState(0x31dd, 0x97c6, 0x7610, 0x689e, 0x2c2, 0x6e24, 0x0, 0x1);
        gbc.writeMem(0x31dd, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x68, gbc.b());
        EXPECT(0x9e, gbc.c());
        EXPECT(0x2, gbc.d());
        EXPECT(0xc2, gbc.e());
        EXPECT(0x6e, gbc.h());
        EXPECT(0x24, gbc.l());
        EXPECT(0x97c6, gbc.sp());
        EXPECT(0x31de, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0159
        gbc.setState(0xd50b, 0x459d, 0xceb0, 0x8cd5, 0x8b0e, 0x34fa, 0x1, 0x1);
        gbc.writeMem(0xd50b, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x8c, gbc.b());
        EXPECT(0xd5, gbc.c());
        EXPECT(0x8b, gbc.d());
        EXPECT(0xe, gbc.e());
        EXPECT(0x34, gbc.h());
        EXPECT(0xfa, gbc.l());
        EXPECT(0x459d, gbc.sp());
        EXPECT(0xd50c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xd50b));
        // AF 015A
        gbc.setState(0xcd08, 0x9831, 0xf1e0, 0x19f4, 0x70c5, 0x37a7, 0x0, 0x1);
        gbc.writeMem(0xcd08, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x19, gbc.b());
        EXPECT(0xf4, gbc.c());
        EXPECT(0x70, gbc.d());
        EXPECT(0xc5, gbc.e());
        EXPECT(0x37, gbc.h());
        EXPECT(0xa7, gbc.l());
        EXPECT(0x9831, gbc.sp());
        EXPECT(0xcd09, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xcd08));
        // AF 015B
        gbc.setState(0xd881, 0x53eb, 0xa00, 0x6f96, 0x54d9, 0x61ba, 0x1, 0x1);
        gbc.writeMem(0xd881, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x6f, gbc.b());
        EXPECT(0x96, gbc.c());
        EXPECT(0x54, gbc.d());
        EXPECT(0xd9, gbc.e());
        EXPECT(0x61, gbc.h());
        EXPECT(0xba, gbc.l());
        EXPECT(0x53eb, gbc.sp());
        EXPECT(0xd882, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xd881));
        // AF 015C
        gbc.setState(0x714c, 0xe7aa, 0xd3e0, 0xf4d6, 0xd534, 0x9ba, 0x1, 0x1);
        gbc.writeMem(0x714c, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xf4, gbc.b());
        EXPECT(0xd6, gbc.c());
        EXPECT(0xd5, gbc.d());
        EXPECT(0x34, gbc.e());
        EXPECT(0x9, gbc.h());
        EXPECT(0xba, gbc.l());
        EXPECT(0xe7aa, gbc.sp());
        EXPECT(0x714d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 015D
        gbc.setState(0xbe21, 0xd2c0, 0xdb70, 0xe983, 0x620f, 0xb146, 0x0, 0x1);
        gbc.writeMem(0xbe21, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xe9, gbc.b());
        EXPECT(0x83, gbc.c());
        EXPECT(0x62, gbc.d());
        EXPECT(0xf, gbc.e());
        EXPECT(0xb1, gbc.h());
        EXPECT(0x46, gbc.l());
        EXPECT(0xd2c0, gbc.sp());
        EXPECT(0xbe22, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xbe21));
        // AF 015E
        gbc.setState(0x81c8, 0xee0d, 0x9b00, 0x9bf6, 0x1a82, 0x26ca, 0x0, 0x0);
        gbc.writeMem(0x81c8, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x9b, gbc.b());
        EXPECT(0xf6, gbc.c());
        EXPECT(0x1a, gbc.d());
        EXPECT(0x82, gbc.e());
        EXPECT(0x26, gbc.h());
        EXPECT(0xca, gbc.l());
        EXPECT(0xee0d, gbc.sp());
        EXPECT(0x81c9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x81c8));
        // AF 015F
        gbc.setState(0xe6c4, 0xab21, 0xa820, 0x1b9b, 0xfb96, 0x12ff, 0x0, 0x0);
        gbc.writeMem(0xe6c4, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x1b, gbc.b());
        EXPECT(0x9b, gbc.c());
        EXPECT(0xfb, gbc.d());
        EXPECT(0x96, gbc.e());
        EXPECT(0x12, gbc.h());
        EXPECT(0xff, gbc.l());
        EXPECT(0xab21, gbc.sp());
        EXPECT(0xe6c5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xe6c4));
        // AF 0160
        gbc.setState(0x18bf, 0xab30, 0xa670, 0xc219, 0x4b4b, 0x1678, 0x0, 0x0);
        gbc.writeMem(0x18bf, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xc2, gbc.b());
        EXPECT(0x19, gbc.c());
        EXPECT(0x4b, gbc.d());
        EXPECT(0x4b, gbc.e());
        EXPECT(0x16, gbc.h());
        EXPECT(0x78, gbc.l());
        EXPECT(0xab30, gbc.sp());
        EXPECT(0x18c0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0161
        gbc.setState(0xd183, 0x5db1, 0xa530, 0x33e0, 0x290a, 0x3276, 0x1, 0x1);
        gbc.writeMem(0xd183, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x33, gbc.b());
        EXPECT(0xe0, gbc.c());
        EXPECT(0x29, gbc.d());
        EXPECT(0xa, gbc.e());
        EXPECT(0x32, gbc.h());
        EXPECT(0x76, gbc.l());
        EXPECT(0x5db1, gbc.sp());
        EXPECT(0xd184, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xd183));
        // AF 0162
        gbc.setState(0x9255, 0x9f8d, 0xe010, 0x68d1, 0x695d, 0x7955, 0x1, 0x1);
        gbc.writeMem(0x9255, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x68, gbc.b());
        EXPECT(0xd1, gbc.c());
        EXPECT(0x69, gbc.d());
        EXPECT(0x5d, gbc.e());
        EXPECT(0x79, gbc.h());
        EXPECT(0x55, gbc.l());
        EXPECT(0x9f8d, gbc.sp());
        EXPECT(0x9256, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x9255));
        // AF 0163
        gbc.setState(0x9ae9, 0x9bb4, 0x8800, 0xc575, 0xfc60, 0xddc, 0x0, 0x1);
        gbc.writeMem(0x9ae9, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xc5, gbc.b());
        EXPECT(0x75, gbc.c());
        EXPECT(0xfc, gbc.d());
        EXPECT(0x60, gbc.e());
        EXPECT(0xd, gbc.h());
        EXPECT(0xdc, gbc.l());
        EXPECT(0x9bb4, gbc.sp());
        EXPECT(0x9aea, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x9ae9));
        // AF 0164
        gbc.setState(0x24a6, 0x55c7, 0x3750, 0x4a25, 0x7f27, 0x47ac, 0x0, 0x1);
        gbc.writeMem(0x24a6, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x4a, gbc.b());
        EXPECT(0x25, gbc.c());
        EXPECT(0x7f, gbc.d());
        EXPECT(0x27, gbc.e());
        EXPECT(0x47, gbc.h());
        EXPECT(0xac, gbc.l());
        EXPECT(0x55c7, gbc.sp());
        EXPECT(0x24a7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0165
        gbc.setState(0x217e, 0xd63e, 0x9cd0, 0x6367, 0x3284, 0xd0ff, 0x0, 0x1);
        gbc.writeMem(0x217e, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x63, gbc.b());
        EXPECT(0x67, gbc.c());
        EXPECT(0x32, gbc.d());
        EXPECT(0x84, gbc.e());
        EXPECT(0xd0, gbc.h());
        EXPECT(0xff, gbc.l());
        EXPECT(0xd63e, gbc.sp());
        EXPECT(0x217f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0166
        gbc.setState(0xc655, 0x2430, 0x2c70, 0x9319, 0xc0a9, 0x6368, 0x1, 0x0);
        gbc.writeMem(0xc655, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x93, gbc.b());
        EXPECT(0x19, gbc.c());
        EXPECT(0xc0, gbc.d());
        EXPECT(0xa9, gbc.e());
        EXPECT(0x63, gbc.h());
        EXPECT(0x68, gbc.l());
        EXPECT(0x2430, gbc.sp());
        EXPECT(0xc656, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xc655));
        // AF 0167
        gbc.setState(0x2293, 0xcf66, 0x83c0, 0x9c9e, 0xb796, 0xa26b, 0x0, 0x1);
        gbc.writeMem(0x2293, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x9c, gbc.b());
        EXPECT(0x9e, gbc.c());
        EXPECT(0xb7, gbc.d());
        EXPECT(0x96, gbc.e());
        EXPECT(0xa2, gbc.h());
        EXPECT(0x6b, gbc.l());
        EXPECT(0xcf66, gbc.sp());
        EXPECT(0x2294, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0168
        gbc.setState(0x89e7, 0xc3e3, 0x1270, 0x7670, 0x3b52, 0x28a8, 0x1, 0x0);
        gbc.writeMem(0x89e7, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x76, gbc.b());
        EXPECT(0x70, gbc.c());
        EXPECT(0x3b, gbc.d());
        EXPECT(0x52, gbc.e());
        EXPECT(0x28, gbc.h());
        EXPECT(0xa8, gbc.l());
        EXPECT(0xc3e3, gbc.sp());
        EXPECT(0x89e8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x89e7));
        // AF 0169
        gbc.setState(0x9cff, 0xd457, 0x2380, 0xdb4c, 0x8457, 0xf59f, 0x0, 0x0);
        gbc.writeMem(0x9cff, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xdb, gbc.b());
        EXPECT(0x4c, gbc.c());
        EXPECT(0x84, gbc.d());
        EXPECT(0x57, gbc.e());
        EXPECT(0xf5, gbc.h());
        EXPECT(0x9f, gbc.l());
        EXPECT(0xd457, gbc.sp());
        EXPECT(0x9d00, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x9cff));
        // AF 016A
        gbc.setState(0xcec5, 0x9cb1, 0x4b40, 0xf9d2, 0x904c, 0xdba1, 0x0, 0x0);
        gbc.writeMem(0xcec5, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xf9, gbc.b());
        EXPECT(0xd2, gbc.c());
        EXPECT(0x90, gbc.d());
        EXPECT(0x4c, gbc.e());
        EXPECT(0xdb, gbc.h());
        EXPECT(0xa1, gbc.l());
        EXPECT(0x9cb1, gbc.sp());
        EXPECT(0xcec6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xcec5));
        // AF 016B
        gbc.setState(0x8fbe, 0xae70, 0xb330, 0xec3b, 0x50ba, 0x961f, 0x1, 0x1);
        gbc.writeMem(0x8fbe, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xec, gbc.b());
        EXPECT(0x3b, gbc.c());
        EXPECT(0x50, gbc.d());
        EXPECT(0xba, gbc.e());
        EXPECT(0x96, gbc.h());
        EXPECT(0x1f, gbc.l());
        EXPECT(0xae70, gbc.sp());
        EXPECT(0x8fbf, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x8fbe));
        // AF 016D
        gbc.setState(0x10de, 0xbd, 0xf570, 0xcac6, 0xbdee, 0x7de2, 0x0, 0x0);
        gbc.writeMem(0x10de, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xca, gbc.b());
        EXPECT(0xc6, gbc.c());
        EXPECT(0xbd, gbc.d());
        EXPECT(0xee, gbc.e());
        EXPECT(0x7d, gbc.h());
        EXPECT(0xe2, gbc.l());
        EXPECT(0xbd, gbc.sp());
        EXPECT(0x10df, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 016E
        gbc.setState(0xce11, 0x1df1, 0xdfd0, 0x2cac, 0xbed0, 0x7658, 0x0, 0x1);
        gbc.writeMem(0xce11, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x2c, gbc.b());
        EXPECT(0xac, gbc.c());
        EXPECT(0xbe, gbc.d());
        EXPECT(0xd0, gbc.e());
        EXPECT(0x76, gbc.h());
        EXPECT(0x58, gbc.l());
        EXPECT(0x1df1, gbc.sp());
        EXPECT(0xce12, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xce11));
        // AF 016F
        gbc.setState(0x917d, 0xd043, 0x4440, 0x4693, 0xc82b, 0xbbb, 0x0, 0x1);
        gbc.writeMem(0x917d, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x46, gbc.b());
        EXPECT(0x93, gbc.c());
        EXPECT(0xc8, gbc.d());
        EXPECT(0x2b, gbc.e());
        EXPECT(0xb, gbc.h());
        EXPECT(0xbb, gbc.l());
        EXPECT(0xd043, gbc.sp());
        EXPECT(0x917e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x917d));
        // AF 0170
        gbc.setState(0xc01c, 0x73d7, 0x18a0, 0x7934, 0xab2, 0xec83, 0x1, 0x1);
        gbc.writeMem(0xc01c, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x79, gbc.b());
        EXPECT(0x34, gbc.c());
        EXPECT(0xa, gbc.d());
        EXPECT(0xb2, gbc.e());
        EXPECT(0xec, gbc.h());
        EXPECT(0x83, gbc.l());
        EXPECT(0x73d7, gbc.sp());
        EXPECT(0xc01d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xc01c));
        // AF 0171
        gbc.setState(0x54d3, 0x464a, 0x3960, 0xf162, 0x832b, 0xc221, 0x1, 0x1);
        gbc.writeMem(0x54d3, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xf1, gbc.b());
        EXPECT(0x62, gbc.c());
        EXPECT(0x83, gbc.d());
        EXPECT(0x2b, gbc.e());
        EXPECT(0xc2, gbc.h());
        EXPECT(0x21, gbc.l());
        EXPECT(0x464a, gbc.sp());
        EXPECT(0x54d4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0172
        gbc.setState(0x5c02, 0x2272, 0xe070, 0x291b, 0x3a6e, 0xafaa, 0x0, 0x0);
        gbc.writeMem(0x5c02, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x29, gbc.b());
        EXPECT(0x1b, gbc.c());
        EXPECT(0x3a, gbc.d());
        EXPECT(0x6e, gbc.e());
        EXPECT(0xaf, gbc.h());
        EXPECT(0xaa, gbc.l());
        EXPECT(0x2272, gbc.sp());
        EXPECT(0x5c03, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0173
        gbc.setState(0x219c, 0xadeb, 0xefe0, 0x23ff, 0xaca8, 0x542, 0x0, 0x0);
        gbc.writeMem(0x219c, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x23, gbc.b());
        EXPECT(0xff, gbc.c());
        EXPECT(0xac, gbc.d());
        EXPECT(0xa8, gbc.e());
        EXPECT(0x5, gbc.h());
        EXPECT(0x42, gbc.l());
        EXPECT(0xadeb, gbc.sp());
        EXPECT(0x219d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0174
        gbc.setState(0x1c2e, 0xe566, 0x6610, 0x934d, 0x842a, 0xa410, 0x1, 0x1);
        gbc.writeMem(0x1c2e, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x93, gbc.b());
        EXPECT(0x4d, gbc.c());
        EXPECT(0x84, gbc.d());
        EXPECT(0x2a, gbc.e());
        EXPECT(0xa4, gbc.h());
        EXPECT(0x10, gbc.l());
        EXPECT(0xe566, gbc.sp());
        EXPECT(0x1c2f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0175
        gbc.setState(0x2423, 0x243b, 0x9c70, 0x857c, 0x44cb, 0x8525, 0x1, 0x0);
        gbc.writeMem(0x2423, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x85, gbc.b());
        EXPECT(0x7c, gbc.c());
        EXPECT(0x44, gbc.d());
        EXPECT(0xcb, gbc.e());
        EXPECT(0x85, gbc.h());
        EXPECT(0x25, gbc.l());
        EXPECT(0x243b, gbc.sp());
        EXPECT(0x2424, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0176
        gbc.setState(0xf5a, 0xc090, 0x6830, 0x6127, 0x4989, 0x992b, 0x1, 0x1);
        gbc.writeMem(0xf5a, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x61, gbc.b());
        EXPECT(0x27, gbc.c());
        EXPECT(0x49, gbc.d());
        EXPECT(0x89, gbc.e());
        EXPECT(0x99, gbc.h());
        EXPECT(0x2b, gbc.l());
        EXPECT(0xc090, gbc.sp());
        EXPECT(0xf5b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0177
        gbc.setState(0xee1e, 0xb840, 0xfc50, 0x8dbc, 0x2e00, 0x4686, 0x0, 0x0);
        gbc.writeMem(0xee1e, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x8d, gbc.b());
        EXPECT(0xbc, gbc.c());
        EXPECT(0x2e, gbc.d());
        EXPECT(0x0, gbc.e());
        EXPECT(0x46, gbc.h());
        EXPECT(0x86, gbc.l());
        EXPECT(0xb840, gbc.sp());
        EXPECT(0xee1f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xee1e));
        // AF 0178
        gbc.setState(0x713, 0x6b17, 0x33a0, 0x6232, 0x1235, 0x7ce3, 0x0, 0x0);
        gbc.writeMem(0x713, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x62, gbc.b());
        EXPECT(0x32, gbc.c());
        EXPECT(0x12, gbc.d());
        EXPECT(0x35, gbc.e());
        EXPECT(0x7c, gbc.h());
        EXPECT(0xe3, gbc.l());
        EXPECT(0x6b17, gbc.sp());
        EXPECT(0x714, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0179
        gbc.setState(0x6035, 0x7ca8, 0x1990, 0x4642, 0xc3f3, 0x4836, 0x0, 0x0);
        gbc.writeMem(0x6035, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x46, gbc.b());
        EXPECT(0x42, gbc.c());
        EXPECT(0xc3, gbc.d());
        EXPECT(0xf3, gbc.e());
        EXPECT(0x48, gbc.h());
        EXPECT(0x36, gbc.l());
        EXPECT(0x7ca8, gbc.sp());
        EXPECT(0x6036, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 017A
        gbc.setState(0x9fab, 0x2dbe, 0xddd0, 0xeb82, 0xa496, 0x1a92, 0x1, 0x0);
        gbc.writeMem(0x9fab, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xeb, gbc.b());
        EXPECT(0x82, gbc.c());
        EXPECT(0xa4, gbc.d());
        EXPECT(0x96, gbc.e());
        EXPECT(0x1a, gbc.h());
        EXPECT(0x92, gbc.l());
        EXPECT(0x2dbe, gbc.sp());
        EXPECT(0x9fac, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x9fab));
        // AF 017B
        gbc.setState(0x37bf, 0x7a25, 0xde00, 0x20af, 0x6b59, 0xb897, 0x0, 0x1);
        gbc.writeMem(0x37bf, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x20, gbc.b());
        EXPECT(0xaf, gbc.c());
        EXPECT(0x6b, gbc.d());
        EXPECT(0x59, gbc.e());
        EXPECT(0xb8, gbc.h());
        EXPECT(0x97, gbc.l());
        EXPECT(0x7a25, gbc.sp());
        EXPECT(0x37c0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 017C
        gbc.setState(0x23d2, 0x7067, 0x8cc0, 0x6b9b, 0xfc6a, 0xa45c, 0x1, 0x1);
        gbc.writeMem(0x23d2, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x6b, gbc.b());
        EXPECT(0x9b, gbc.c());
        EXPECT(0xfc, gbc.d());
        EXPECT(0x6a, gbc.e());
        EXPECT(0xa4, gbc.h());
        EXPECT(0x5c, gbc.l());
        EXPECT(0x7067, gbc.sp());
        EXPECT(0x23d3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 017D
        gbc.setState(0x9b96, 0x5a07, 0xcbc0, 0x2177, 0x2d46, 0xbf0e, 0x0, 0x0);
        gbc.writeMem(0x9b96, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x21, gbc.b());
        EXPECT(0x77, gbc.c());
        EXPECT(0x2d, gbc.d());
        EXPECT(0x46, gbc.e());
        EXPECT(0xbf, gbc.h());
        EXPECT(0xe, gbc.l());
        EXPECT(0x5a07, gbc.sp());
        EXPECT(0x9b97, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x9b96));
        // AF 017E
        gbc.setState(0x4c1f, 0xd236, 0x4650, 0x7462, 0x663e, 0xdd36, 0x1, 0x0);
        gbc.writeMem(0x4c1f, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x74, gbc.b());
        EXPECT(0x62, gbc.c());
        EXPECT(0x66, gbc.d());
        EXPECT(0x3e, gbc.e());
        EXPECT(0xdd, gbc.h());
        EXPECT(0x36, gbc.l());
        EXPECT(0xd236, gbc.sp());
        EXPECT(0x4c20, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 017F
        gbc.setState(0xb2ff, 0x278f, 0x8880, 0x19ea, 0x9c97, 0xec18, 0x1, 0x1);
        gbc.writeMem(0xb2ff, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x19, gbc.b());
        EXPECT(0xea, gbc.c());
        EXPECT(0x9c, gbc.d());
        EXPECT(0x97, gbc.e());
        EXPECT(0xec, gbc.h());
        EXPECT(0x18, gbc.l());
        EXPECT(0x278f, gbc.sp());
        EXPECT(0xb300, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xb2ff));
        // AF 0180
        gbc.setState(0x9a54, 0x386a, 0xf950, 0x7032, 0x2b92, 0x314f, 0x0, 0x0);
        gbc.writeMem(0x9a54, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x70, gbc.b());
        EXPECT(0x32, gbc.c());
        EXPECT(0x2b, gbc.d());
        EXPECT(0x92, gbc.e());
        EXPECT(0x31, gbc.h());
        EXPECT(0x4f, gbc.l());
        EXPECT(0x386a, gbc.sp());
        EXPECT(0x9a55, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x9a54));
        // AF 0181
        gbc.setState(0x2217, 0x8eac, 0x5c30, 0xcce, 0xd10e, 0xdbe1, 0x0, 0x1);
        gbc.writeMem(0x2217, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xc, gbc.b());
        EXPECT(0xce, gbc.c());
        EXPECT(0xd1, gbc.d());
        EXPECT(0xe, gbc.e());
        EXPECT(0xdb, gbc.h());
        EXPECT(0xe1, gbc.l());
        EXPECT(0x8eac, gbc.sp());
        EXPECT(0x2218, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0182
        gbc.setState(0x6160, 0x34a0, 0x460, 0x2d1b, 0xbf21, 0x7c8b, 0x1, 0x0);
        gbc.writeMem(0x6160, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x2d, gbc.b());
        EXPECT(0x1b, gbc.c());
        EXPECT(0xbf, gbc.d());
        EXPECT(0x21, gbc.e());
        EXPECT(0x7c, gbc.h());
        EXPECT(0x8b, gbc.l());
        EXPECT(0x34a0, gbc.sp());
        EXPECT(0x6161, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0183
        gbc.setState(0xc7b, 0xc3bd, 0xc500, 0x5f54, 0x6770, 0xbeb5, 0x1, 0x0);
        gbc.writeMem(0xc7b, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x5f, gbc.b());
        EXPECT(0x54, gbc.c());
        EXPECT(0x67, gbc.d());
        EXPECT(0x70, gbc.e());
        EXPECT(0xbe, gbc.h());
        EXPECT(0xb5, gbc.l());
        EXPECT(0xc3bd, gbc.sp());
        EXPECT(0xc7c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0184
        gbc.setState(0xc385, 0xc472, 0xaad0, 0xe048, 0xfaa5, 0x554, 0x0, 0x0);
        gbc.writeMem(0xc385, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xe0, gbc.b());
        EXPECT(0x48, gbc.c());
        EXPECT(0xfa, gbc.d());
        EXPECT(0xa5, gbc.e());
        EXPECT(0x5, gbc.h());
        EXPECT(0x54, gbc.l());
        EXPECT(0xc472, gbc.sp());
        EXPECT(0xc386, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xc385));
        // AF 0185
        gbc.setState(0xdfb0, 0x45c4, 0x7110, 0xbf, 0x4666, 0xcb25, 0x1, 0x1);
        gbc.writeMem(0xdfb0, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x0, gbc.b());
        EXPECT(0xbf, gbc.c());
        EXPECT(0x46, gbc.d());
        EXPECT(0x66, gbc.e());
        EXPECT(0xcb, gbc.h());
        EXPECT(0x25, gbc.l());
        EXPECT(0x45c4, gbc.sp());
        EXPECT(0xdfb1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xdfb0));
        // AF 0186
        gbc.setState(0x94af, 0x71e5, 0xb730, 0xb62a, 0x1bdd, 0x1d55, 0x1, 0x0);
        gbc.writeMem(0x94af, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xb6, gbc.b());
        EXPECT(0x2a, gbc.c());
        EXPECT(0x1b, gbc.d());
        EXPECT(0xdd, gbc.e());
        EXPECT(0x1d, gbc.h());
        EXPECT(0x55, gbc.l());
        EXPECT(0x71e5, gbc.sp());
        EXPECT(0x94b0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x94af));
        // AF 0187
        gbc.setState(0xcaf9, 0xccf1, 0xade0, 0x22bf, 0x94ba, 0xb84f, 0x1, 0x1);
        gbc.writeMem(0xcaf9, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x22, gbc.b());
        EXPECT(0xbf, gbc.c());
        EXPECT(0x94, gbc.d());
        EXPECT(0xba, gbc.e());
        EXPECT(0xb8, gbc.h());
        EXPECT(0x4f, gbc.l());
        EXPECT(0xccf1, gbc.sp());
        EXPECT(0xcafa, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xcaf9));
        // AF 0188
        gbc.setState(0xcdbf, 0x3b47, 0x5470, 0xff31, 0xc3fe, 0x9ca, 0x1, 0x0);
        gbc.writeMem(0xcdbf, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xff, gbc.b());
        EXPECT(0x31, gbc.c());
        EXPECT(0xc3, gbc.d());
        EXPECT(0xfe, gbc.e());
        EXPECT(0x9, gbc.h());
        EXPECT(0xca, gbc.l());
        EXPECT(0x3b47, gbc.sp());
        EXPECT(0xcdc0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xcdbf));
        // AF 0189
        gbc.setState(0xe071, 0xd3e1, 0x760, 0x6641, 0x36d4, 0xc667, 0x0, 0x1);
        gbc.writeMem(0xe071, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x66, gbc.b());
        EXPECT(0x41, gbc.c());
        EXPECT(0x36, gbc.d());
        EXPECT(0xd4, gbc.e());
        EXPECT(0xc6, gbc.h());
        EXPECT(0x67, gbc.l());
        EXPECT(0xd3e1, gbc.sp());
        EXPECT(0xe072, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xe071));
        // AF 018A
        gbc.setState(0x91de, 0xac33, 0x2260, 0xb2d1, 0xfdb1, 0xfd43, 0x0, 0x0);
        gbc.writeMem(0x91de, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xb2, gbc.b());
        EXPECT(0xd1, gbc.c());
        EXPECT(0xfd, gbc.d());
        EXPECT(0xb1, gbc.e());
        EXPECT(0xfd, gbc.h());
        EXPECT(0x43, gbc.l());
        EXPECT(0xac33, gbc.sp());
        EXPECT(0x91df, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x91de));
        // AF 018B
        gbc.setState(0xee36, 0x46a4, 0x1ab0, 0x4c15, 0x7e9a, 0x9a65, 0x0, 0x1);
        gbc.writeMem(0xee36, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x4c, gbc.b());
        EXPECT(0x15, gbc.c());
        EXPECT(0x7e, gbc.d());
        EXPECT(0x9a, gbc.e());
        EXPECT(0x9a, gbc.h());
        EXPECT(0x65, gbc.l());
        EXPECT(0x46a4, gbc.sp());
        EXPECT(0xee37, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xee36));
        // AF 018D
        gbc.setState(0xad73, 0xd47, 0x1020, 0x46c7, 0x158f, 0x3c9d, 0x1, 0x0);
        gbc.writeMem(0xad73, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x46, gbc.b());
        EXPECT(0xc7, gbc.c());
        EXPECT(0x15, gbc.d());
        EXPECT(0x8f, gbc.e());
        EXPECT(0x3c, gbc.h());
        EXPECT(0x9d, gbc.l());
        EXPECT(0xd47, gbc.sp());
        EXPECT(0xad74, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xad73));
        // AF 018E
        gbc.setState(0x1698, 0x6961, 0x6dc0, 0xcfec, 0x8453, 0x6a4e, 0x0, 0x1);
        gbc.writeMem(0x1698, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xcf, gbc.b());
        EXPECT(0xec, gbc.c());
        EXPECT(0x84, gbc.d());
        EXPECT(0x53, gbc.e());
        EXPECT(0x6a, gbc.h());
        EXPECT(0x4e, gbc.l());
        EXPECT(0x6961, gbc.sp());
        EXPECT(0x1699, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 018F
        gbc.setState(0x37d1, 0x3e48, 0xbe20, 0xa291, 0xae92, 0xb5d3, 0x1, 0x1);
        gbc.writeMem(0x37d1, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xa2, gbc.b());
        EXPECT(0x91, gbc.c());
        EXPECT(0xae, gbc.d());
        EXPECT(0x92, gbc.e());
        EXPECT(0xb5, gbc.h());
        EXPECT(0xd3, gbc.l());
        EXPECT(0x3e48, gbc.sp());
        EXPECT(0x37d2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0190
        gbc.setState(0xb4ce, 0x194c, 0xdb90, 0xd48c, 0xc038, 0x1626, 0x1, 0x1);
        gbc.writeMem(0xb4ce, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xd4, gbc.b());
        EXPECT(0x8c, gbc.c());
        EXPECT(0xc0, gbc.d());
        EXPECT(0x38, gbc.e());
        EXPECT(0x16, gbc.h());
        EXPECT(0x26, gbc.l());
        EXPECT(0x194c, gbc.sp());
        EXPECT(0xb4cf, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xb4ce));
        // AF 0191
        gbc.setState(0x45df, 0xd061, 0x95b0, 0x1b73, 0xa2d4, 0x4756, 0x1, 0x0);
        gbc.writeMem(0x45df, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x1b, gbc.b());
        EXPECT(0x73, gbc.c());
        EXPECT(0xa2, gbc.d());
        EXPECT(0xd4, gbc.e());
        EXPECT(0x47, gbc.h());
        EXPECT(0x56, gbc.l());
        EXPECT(0xd061, gbc.sp());
        EXPECT(0x45e0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0192
        gbc.setState(0xd2da, 0x3ebd, 0x8ee0, 0xd27b, 0xc5f, 0x31e4, 0x1, 0x0);
        gbc.writeMem(0xd2da, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xd2, gbc.b());
        EXPECT(0x7b, gbc.c());
        EXPECT(0xc, gbc.d());
        EXPECT(0x5f, gbc.e());
        EXPECT(0x31, gbc.h());
        EXPECT(0xe4, gbc.l());
        EXPECT(0x3ebd, gbc.sp());
        EXPECT(0xd2db, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xd2da));
        // AF 0193
        gbc.setState(0x4d39, 0xa36c, 0x5560, 0x7f6e, 0x24df, 0xbeda, 0x1, 0x1);
        gbc.writeMem(0x4d39, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x7f, gbc.b());
        EXPECT(0x6e, gbc.c());
        EXPECT(0x24, gbc.d());
        EXPECT(0xdf, gbc.e());
        EXPECT(0xbe, gbc.h());
        EXPECT(0xda, gbc.l());
        EXPECT(0xa36c, gbc.sp());
        EXPECT(0x4d3a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0194
        gbc.setState(0x84e5, 0xecfa, 0x7780, 0x484d, 0x8fe9, 0x5a24, 0x1, 0x0);
        gbc.writeMem(0x84e5, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x48, gbc.b());
        EXPECT(0x4d, gbc.c());
        EXPECT(0x8f, gbc.d());
        EXPECT(0xe9, gbc.e());
        EXPECT(0x5a, gbc.h());
        EXPECT(0x24, gbc.l());
        EXPECT(0xecfa, gbc.sp());
        EXPECT(0x84e6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x84e5));
        // AF 0195
        gbc.setState(0x7b24, 0xd129, 0x60c0, 0xe496, 0x59da, 0x9294, 0x0, 0x0);
        gbc.writeMem(0x7b24, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xe4, gbc.b());
        EXPECT(0x96, gbc.c());
        EXPECT(0x59, gbc.d());
        EXPECT(0xda, gbc.e());
        EXPECT(0x92, gbc.h());
        EXPECT(0x94, gbc.l());
        EXPECT(0xd129, gbc.sp());
        EXPECT(0x7b25, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0196
        gbc.setState(0x475e, 0x21a5, 0x6530, 0x8f45, 0x7879, 0xc164, 0x0, 0x1);
        gbc.writeMem(0x475e, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x8f, gbc.b());
        EXPECT(0x45, gbc.c());
        EXPECT(0x78, gbc.d());
        EXPECT(0x79, gbc.e());
        EXPECT(0xc1, gbc.h());
        EXPECT(0x64, gbc.l());
        EXPECT(0x21a5, gbc.sp());
        EXPECT(0x475f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0197
        gbc.setState(0x814e, 0x8cf9, 0xd290, 0x10d2, 0x6b85, 0x5103, 0x1, 0x1);
        gbc.writeMem(0x814e, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x10, gbc.b());
        EXPECT(0xd2, gbc.c());
        EXPECT(0x6b, gbc.d());
        EXPECT(0x85, gbc.e());
        EXPECT(0x51, gbc.h());
        EXPECT(0x3, gbc.l());
        EXPECT(0x8cf9, gbc.sp());
        EXPECT(0x814f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x814e));
        // AF 0198
        gbc.setState(0x64c8, 0x7f27, 0xb5b0, 0x5ad6, 0x9cb9, 0x4f26, 0x0, 0x0);
        gbc.writeMem(0x64c8, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x5a, gbc.b());
        EXPECT(0xd6, gbc.c());
        EXPECT(0x9c, gbc.d());
        EXPECT(0xb9, gbc.e());
        EXPECT(0x4f, gbc.h());
        EXPECT(0x26, gbc.l());
        EXPECT(0x7f27, gbc.sp());
        EXPECT(0x64c9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0199
        gbc.setState(0xa2b1, 0x424f, 0x5890, 0x34ac, 0x4113, 0x55f1, 0x1, 0x0);
        gbc.writeMem(0xa2b1, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x34, gbc.b());
        EXPECT(0xac, gbc.c());
        EXPECT(0x41, gbc.d());
        EXPECT(0x13, gbc.e());
        EXPECT(0x55, gbc.h());
        EXPECT(0xf1, gbc.l());
        EXPECT(0x424f, gbc.sp());
        EXPECT(0xa2b2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xa2b1));
        // AF 019A
        gbc.setState(0x3b27, 0x97d8, 0x8e50, 0x608b, 0x1cd3, 0xff60, 0x0, 0x1);
        gbc.writeMem(0x3b27, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x60, gbc.b());
        EXPECT(0x8b, gbc.c());
        EXPECT(0x1c, gbc.d());
        EXPECT(0xd3, gbc.e());
        EXPECT(0xff, gbc.h());
        EXPECT(0x60, gbc.l());
        EXPECT(0x97d8, gbc.sp());
        EXPECT(0x3b28, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 019B
        gbc.setState(0xea78, 0xd998, 0x320, 0xb2d2, 0xfdf9, 0x1430, 0x0, 0x1);
        gbc.writeMem(0xea78, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xb2, gbc.b());
        EXPECT(0xd2, gbc.c());
        EXPECT(0xfd, gbc.d());
        EXPECT(0xf9, gbc.e());
        EXPECT(0x14, gbc.h());
        EXPECT(0x30, gbc.l());
        EXPECT(0xd998, gbc.sp());
        EXPECT(0xea79, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xea78));
        // AF 019C
        gbc.setState(0x1e6d, 0x5c85, 0x82d0, 0x204d, 0xdb0f, 0x5309, 0x1, 0x0);
        gbc.writeMem(0x1e6d, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x20, gbc.b());
        EXPECT(0x4d, gbc.c());
        EXPECT(0xdb, gbc.d());
        EXPECT(0xf, gbc.e());
        EXPECT(0x53, gbc.h());
        EXPECT(0x9, gbc.l());
        EXPECT(0x5c85, gbc.sp());
        EXPECT(0x1e6e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 019D
        gbc.setState(0x6881, 0xe8af, 0x3260, 0x69b4, 0xbe65, 0x4dcf, 0x0, 0x0);
        gbc.writeMem(0x6881, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x69, gbc.b());
        EXPECT(0xb4, gbc.c());
        EXPECT(0xbe, gbc.d());
        EXPECT(0x65, gbc.e());
        EXPECT(0x4d, gbc.h());
        EXPECT(0xcf, gbc.l());
        EXPECT(0xe8af, gbc.sp());
        EXPECT(0x6882, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 019E
        gbc.setState(0xb677, 0x5801, 0x2eb0, 0x418a, 0xcb63, 0x2604, 0x0, 0x0);
        gbc.writeMem(0xb677, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x41, gbc.b());
        EXPECT(0x8a, gbc.c());
        EXPECT(0xcb, gbc.d());
        EXPECT(0x63, gbc.e());
        EXPECT(0x26, gbc.h());
        EXPECT(0x4, gbc.l());
        EXPECT(0x5801, gbc.sp());
        EXPECT(0xb678, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xb677));
        // AF 019F
        gbc.setState(0xd8dc, 0x84f0, 0x1ae0, 0xd75a, 0x87d, 0x6a5a, 0x0, 0x1);
        gbc.writeMem(0xd8dc, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xd7, gbc.b());
        EXPECT(0x5a, gbc.c());
        EXPECT(0x8, gbc.d());
        EXPECT(0x7d, gbc.e());
        EXPECT(0x6a, gbc.h());
        EXPECT(0x5a, gbc.l());
        EXPECT(0x84f0, gbc.sp());
        EXPECT(0xd8dd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xd8dc));
        // AF 01A0
        gbc.setState(0x5228, 0xc735, 0x3710, 0x3131, 0x6122, 0xaaba, 0x1, 0x0);
        gbc.writeMem(0x5228, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x31, gbc.b());
        EXPECT(0x31, gbc.c());
        EXPECT(0x61, gbc.d());
        EXPECT(0x22, gbc.e());
        EXPECT(0xaa, gbc.h());
        EXPECT(0xba, gbc.l());
        EXPECT(0xc735, gbc.sp());
        EXPECT(0x5229, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 01A1
        gbc.setState(0x96a8, 0x41c, 0x57d0, 0x7bbc, 0x800f, 0x82, 0x1, 0x0);
        gbc.writeMem(0x96a8, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x7b, gbc.b());
        EXPECT(0xbc, gbc.c());
        EXPECT(0x80, gbc.d());
        EXPECT(0xf, gbc.e());
        EXPECT(0x0, gbc.h());
        EXPECT(0x82, gbc.l());
        EXPECT(0x41c, gbc.sp());
        EXPECT(0x96a9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x96a8));
        // AF 01A2
        gbc.setState(0xd579, 0x26ed, 0x7860, 0xf524, 0xd8e, 0xc46b, 0x1, 0x1);
        gbc.writeMem(0xd579, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xf5, gbc.b());
        EXPECT(0x24, gbc.c());
        EXPECT(0xd, gbc.d());
        EXPECT(0x8e, gbc.e());
        EXPECT(0xc4, gbc.h());
        EXPECT(0x6b, gbc.l());
        EXPECT(0x26ed, gbc.sp());
        EXPECT(0xd57a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xd579));
        // AF 01A3
        gbc.setState(0x814d, 0x159d, 0x1500, 0xcef0, 0xd213, 0x9f3e, 0x0, 0x1);
        gbc.writeMem(0x814d, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xce, gbc.b());
        EXPECT(0xf0, gbc.c());
        EXPECT(0xd2, gbc.d());
        EXPECT(0x13, gbc.e());
        EXPECT(0x9f, gbc.h());
        EXPECT(0x3e, gbc.l());
        EXPECT(0x159d, gbc.sp());
        EXPECT(0x814e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x814d));
        // AF 01A4
        gbc.setState(0xe47c, 0xfacd, 0x4c20, 0x6b35, 0x316a, 0x9e31, 0x1, 0x0);
        gbc.writeMem(0xe47c, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x6b, gbc.b());
        EXPECT(0x35, gbc.c());
        EXPECT(0x31, gbc.d());
        EXPECT(0x6a, gbc.e());
        EXPECT(0x9e, gbc.h());
        EXPECT(0x31, gbc.l());
        EXPECT(0xfacd, gbc.sp());
        EXPECT(0xe47d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xe47c));
        // AF 01A5
        gbc.setState(0x31d3, 0x7915, 0x52b0, 0x9e02, 0xc27d, 0xdcf7, 0x0, 0x1);
        gbc.writeMem(0x31d3, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x9e, gbc.b());
        EXPECT(0x2, gbc.c());
        EXPECT(0xc2, gbc.d());
        EXPECT(0x7d, gbc.e());
        EXPECT(0xdc, gbc.h());
        EXPECT(0xf7, gbc.l());
        EXPECT(0x7915, gbc.sp());
        EXPECT(0x31d4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 01A6
        gbc.setState(0x4da9, 0x9579, 0x1a70, 0x7c97, 0x39a6, 0x159, 0x1, 0x1);
        gbc.writeMem(0x4da9, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x7c, gbc.b());
        EXPECT(0x97, gbc.c());
        EXPECT(0x39, gbc.d());
        EXPECT(0xa6, gbc.e());
        EXPECT(0x1, gbc.h());
        EXPECT(0x59, gbc.l());
        EXPECT(0x9579, gbc.sp());
        EXPECT(0x4daa, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 01A7
        gbc.setState(0x4f31, 0x7b2e, 0xea00, 0x4f7, 0xc42a, 0xa994, 0x0, 0x1);
        gbc.writeMem(0x4f31, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x4, gbc.b());
        EXPECT(0xf7, gbc.c());
        EXPECT(0xc4, gbc.d());
        EXPECT(0x2a, gbc.e());
        EXPECT(0xa9, gbc.h());
        EXPECT(0x94, gbc.l());
        EXPECT(0x7b2e, gbc.sp());
        EXPECT(0x4f32, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 01A8
        gbc.setState(0x497c, 0xc7a8, 0x61b0, 0x9bcc, 0x498e, 0x5793, 0x1, 0x1);
        gbc.writeMem(0x497c, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x9b, gbc.b());
        EXPECT(0xcc, gbc.c());
        EXPECT(0x49, gbc.d());
        EXPECT(0x8e, gbc.e());
        EXPECT(0x57, gbc.h());
        EXPECT(0x93, gbc.l());
        EXPECT(0xc7a8, gbc.sp());
        EXPECT(0x497d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 01A9
        gbc.setState(0xbfa4, 0x64d1, 0x5cd0, 0x3b91, 0xf417, 0xdadc, 0x0, 0x1);
        gbc.writeMem(0xbfa4, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x3b, gbc.b());
        EXPECT(0x91, gbc.c());
        EXPECT(0xf4, gbc.d());
        EXPECT(0x17, gbc.e());
        EXPECT(0xda, gbc.h());
        EXPECT(0xdc, gbc.l());
        EXPECT(0x64d1, gbc.sp());
        EXPECT(0xbfa5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xbfa4));
        // AF 01AA
        gbc.setState(0x6795, 0xf38c, 0x60f0, 0x845f, 0xfe5a, 0xbc8e, 0x1, 0x0);
        gbc.writeMem(0x6795, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x84, gbc.b());
        EXPECT(0x5f, gbc.c());
        EXPECT(0xfe, gbc.d());
        EXPECT(0x5a, gbc.e());
        EXPECT(0xbc, gbc.h());
        EXPECT(0x8e, gbc.l());
        EXPECT(0xf38c, gbc.sp());
        EXPECT(0x6796, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 01AB
        gbc.setState(0x10ab, 0x8527, 0x40, 0x801b, 0x768a, 0x167a, 0x1, 0x1);
        gbc.writeMem(0x10ab, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x80, gbc.b());
        EXPECT(0x1b, gbc.c());
        EXPECT(0x76, gbc.d());
        EXPECT(0x8a, gbc.e());
        EXPECT(0x16, gbc.h());
        EXPECT(0x7a, gbc.l());
        EXPECT(0x8527, gbc.sp());
        EXPECT(0x10ac, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 01AC
        gbc.setState(0x8d18, 0x556f, 0xfe60, 0x4a39, 0x76e0, 0x3d8d, 0x0, 0x0);
        gbc.writeMem(0x8d18, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x4a, gbc.b());
        EXPECT(0x39, gbc.c());
        EXPECT(0x76, gbc.d());
        EXPECT(0xe0, gbc.e());
        EXPECT(0x3d, gbc.h());
        EXPECT(0x8d, gbc.l());
        EXPECT(0x556f, gbc.sp());
        EXPECT(0x8d19, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x8d18));
        // AF 01AD
        gbc.setState(0x3397, 0x3cdf, 0xf400, 0xc55a, 0xce45, 0xc437, 0x1, 0x0);
        gbc.writeMem(0x3397, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xc5, gbc.b());
        EXPECT(0x5a, gbc.c());
        EXPECT(0xce, gbc.d());
        EXPECT(0x45, gbc.e());
        EXPECT(0xc4, gbc.h());
        EXPECT(0x37, gbc.l());
        EXPECT(0x3cdf, gbc.sp());
        EXPECT(0x3398, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 01AE
        gbc.setState(0x3e0e, 0x37a5, 0x26f0, 0x2850, 0x9222, 0x2492, 0x1, 0x1);
        gbc.writeMem(0x3e0e, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x28, gbc.b());
        EXPECT(0x50, gbc.c());
        EXPECT(0x92, gbc.d());
        EXPECT(0x22, gbc.e());
        EXPECT(0x24, gbc.h());
        EXPECT(0x92, gbc.l());
        EXPECT(0x37a5, gbc.sp());
        EXPECT(0x3e0f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 01AF
        gbc.setState(0xc30, 0xcbd0, 0xd4c0, 0x5e16, 0xd439, 0x85db, 0x1, 0x1);
        gbc.writeMem(0xc30, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x5e, gbc.b());
        EXPECT(0x16, gbc.c());
        EXPECT(0xd4, gbc.d());
        EXPECT(0x39, gbc.e());
        EXPECT(0x85, gbc.h());
        EXPECT(0xdb, gbc.l());
        EXPECT(0xcbd0, gbc.sp());
        EXPECT(0xc31, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 01B0
        gbc.setState(0x6f7, 0x8da, 0xf790, 0xbae1, 0xdd4e, 0xafb7, 0x1, 0x0);
        gbc.writeMem(0x6f7, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xba, gbc.b());
        EXPECT(0xe1, gbc.c());
        EXPECT(0xdd, gbc.d());
        EXPECT(0x4e, gbc.e());
        EXPECT(0xaf, gbc.h());
        EXPECT(0xb7, gbc.l());
        EXPECT(0x8da, gbc.sp());
        EXPECT(0x6f8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 01B1
        gbc.setState(0x3dac, 0x2ec6, 0x3f00, 0xbcae, 0xb4d8, 0xf6dd, 0x0, 0x1);
        gbc.writeMem(0x3dac, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xbc, gbc.b());
        EXPECT(0xae, gbc.c());
        EXPECT(0xb4, gbc.d());
        EXPECT(0xd8, gbc.e());
        EXPECT(0xf6, gbc.h());
        EXPECT(0xdd, gbc.l());
        EXPECT(0x2ec6, gbc.sp());
        EXPECT(0x3dad, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 01B2
        gbc.setState(0x3c5d, 0xefe6, 0x8710, 0x9a64, 0xa4f0, 0x4edc, 0x1, 0x1);
        gbc.writeMem(0x3c5d, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x9a, gbc.b());
        EXPECT(0x64, gbc.c());
        EXPECT(0xa4, gbc.d());
        EXPECT(0xf0, gbc.e());
        EXPECT(0x4e, gbc.h());
        EXPECT(0xdc, gbc.l());
        EXPECT(0xefe6, gbc.sp());
        EXPECT(0x3c5e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 01B3
        gbc.setState(0x64b1, 0x4cbf, 0xef30, 0x70d3, 0xb201, 0xaa49, 0x1, 0x1);
        gbc.writeMem(0x64b1, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x70, gbc.b());
        EXPECT(0xd3, gbc.c());
        EXPECT(0xb2, gbc.d());
        EXPECT(0x1, gbc.e());
        EXPECT(0xaa, gbc.h());
        EXPECT(0x49, gbc.l());
        EXPECT(0x4cbf, gbc.sp());
        EXPECT(0x64b2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 01B4
        gbc.setState(0x9fad, 0xeec4, 0xb6e0, 0x9207, 0x26c7, 0x9c45, 0x0, 0x1);
        gbc.writeMem(0x9fad, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x92, gbc.b());
        EXPECT(0x7, gbc.c());
        EXPECT(0x26, gbc.d());
        EXPECT(0xc7, gbc.e());
        EXPECT(0x9c, gbc.h());
        EXPECT(0x45, gbc.l());
        EXPECT(0xeec4, gbc.sp());
        EXPECT(0x9fae, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x9fad));
        // AF 01B5
        gbc.setState(0x4088, 0x7973, 0x5bb0, 0x9443, 0x49f1, 0x917a, 0x1, 0x0);
        gbc.writeMem(0x4088, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x94, gbc.b());
        EXPECT(0x43, gbc.c());
        EXPECT(0x49, gbc.d());
        EXPECT(0xf1, gbc.e());
        EXPECT(0x91, gbc.h());
        EXPECT(0x7a, gbc.l());
        EXPECT(0x7973, gbc.sp());
        EXPECT(0x4089, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 01B6
        gbc.setState(0xe441, 0x2a5a, 0x3090, 0xa057, 0x8175, 0xc21f, 0x1, 0x0);
        gbc.writeMem(0xe441, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xa0, gbc.b());
        EXPECT(0x57, gbc.c());
        EXPECT(0x81, gbc.d());
        EXPECT(0x75, gbc.e());
        EXPECT(0xc2, gbc.h());
        EXPECT(0x1f, gbc.l());
        EXPECT(0x2a5a, gbc.sp());
        EXPECT(0xe442, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xe441));
        // AF 01B7
        gbc.setState(0x91bf, 0xa5f, 0xf360, 0x3171, 0xad4c, 0x7904, 0x1, 0x1);
        gbc.writeMem(0x91bf, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x31, gbc.b());
        EXPECT(0x71, gbc.c());
        EXPECT(0xad, gbc.d());
        EXPECT(0x4c, gbc.e());
        EXPECT(0x79, gbc.h());
        EXPECT(0x4, gbc.l());
        EXPECT(0xa5f, gbc.sp());
        EXPECT(0x91c0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x91bf));
        // AF 01B8
        gbc.setState(0x6c74, 0xbc8e, 0x5af0, 0xed03, 0xd76, 0x4a18, 0x0, 0x0);
        gbc.writeMem(0x6c74, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xed, gbc.b());
        EXPECT(0x3, gbc.c());
        EXPECT(0xd, gbc.d());
        EXPECT(0x76, gbc.e());
        EXPECT(0x4a, gbc.h());
        EXPECT(0x18, gbc.l());
        EXPECT(0xbc8e, gbc.sp());
        EXPECT(0x6c75, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 01B9
        gbc.setState(0x7b7a, 0x5443, 0x21d0, 0xf2a1, 0xdfe5, 0xd6a, 0x0, 0x1);
        gbc.writeMem(0x7b7a, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xf2, gbc.b());
        EXPECT(0xa1, gbc.c());
        EXPECT(0xdf, gbc.d());
        EXPECT(0xe5, gbc.e());
        EXPECT(0xd, gbc.h());
        EXPECT(0x6a, gbc.l());
        EXPECT(0x5443, gbc.sp());
        EXPECT(0x7b7b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 01BA
        gbc.setState(0x3181, 0xe5c, 0xd7e0, 0xa679, 0x98bc, 0x1650, 0x1, 0x0);
        gbc.writeMem(0x3181, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xa6, gbc.b());
        EXPECT(0x79, gbc.c());
        EXPECT(0x98, gbc.d());
        EXPECT(0xbc, gbc.e());
        EXPECT(0x16, gbc.h());
        EXPECT(0x50, gbc.l());
        EXPECT(0xe5c, gbc.sp());
        EXPECT(0x3182, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 01BB
        gbc.setState(0xddb7, 0x16b6, 0xae00, 0xd8e9, 0xfdff, 0xbbd5, 0x0, 0x0);
        gbc.writeMem(0xddb7, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xd8, gbc.b());
        EXPECT(0xe9, gbc.c());
        EXPECT(0xfd, gbc.d());
        EXPECT(0xff, gbc.e());
        EXPECT(0xbb, gbc.h());
        EXPECT(0xd5, gbc.l());
        EXPECT(0x16b6, gbc.sp());
        EXPECT(0xddb8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xddb7));
        // AF 01BC
        gbc.setState(0xe7dd, 0xc352, 0x7b20, 0xf355, 0x34af, 0x2ae1, 0x0, 0x0);
        gbc.writeMem(0xe7dd, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xf3, gbc.b());
        EXPECT(0x55, gbc.c());
        EXPECT(0x34, gbc.d());
        EXPECT(0xaf, gbc.e());
        EXPECT(0x2a, gbc.h());
        EXPECT(0xe1, gbc.l());
        EXPECT(0xc352, gbc.sp());
        EXPECT(0xe7de, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xe7dd));
        // AF 01BD
        gbc.setState(0x7cde, 0x311b, 0xaf10, 0xad0e, 0x5bf3, 0x7a1a, 0x1, 0x1);
        gbc.writeMem(0x7cde, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xad, gbc.b());
        EXPECT(0xe, gbc.c());
        EXPECT(0x5b, gbc.d());
        EXPECT(0xf3, gbc.e());
        EXPECT(0x7a, gbc.h());
        EXPECT(0x1a, gbc.l());
        EXPECT(0x311b, gbc.sp());
        EXPECT(0x7cdf, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 01BE
        gbc.setState(0xafe6, 0x4204, 0xe100, 0x9dbf, 0x28f5, 0x14f8, 0x1, 0x1);
        gbc.writeMem(0xafe6, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x9d, gbc.b());
        EXPECT(0xbf, gbc.c());
        EXPECT(0x28, gbc.d());
        EXPECT(0xf5, gbc.e());
        EXPECT(0x14, gbc.h());
        EXPECT(0xf8, gbc.l());
        EXPECT(0x4204, gbc.sp());
        EXPECT(0xafe7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xafe6));
        // AF 01BF
        gbc.setState(0x3d29, 0x4975, 0xed30, 0xcf63, 0xb1fb, 0xa3f5, 0x0, 0x0);
        gbc.writeMem(0x3d29, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xcf, gbc.b());
        EXPECT(0x63, gbc.c());
        EXPECT(0xb1, gbc.d());
        EXPECT(0xfb, gbc.e());
        EXPECT(0xa3, gbc.h());
        EXPECT(0xf5, gbc.l());
        EXPECT(0x4975, gbc.sp());
        EXPECT(0x3d2a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 01C0
        gbc.setState(0xaf1e, 0x9c3f, 0x43f0, 0x96c9, 0xd0f3, 0x4974, 0x1, 0x1);
        gbc.writeMem(0xaf1e, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x96, gbc.b());
        EXPECT(0xc9, gbc.c());
        EXPECT(0xd0, gbc.d());
        EXPECT(0xf3, gbc.e());
        EXPECT(0x49, gbc.h());
        EXPECT(0x74, gbc.l());
        EXPECT(0x9c3f, gbc.sp());
        EXPECT(0xaf1f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xaf1e));
        // AF 01C1
        gbc.setState(0xacf2, 0x6d9d, 0x6530, 0x10c2, 0xd89, 0x6cb6, 0x0, 0x1);
        gbc.writeMem(0xacf2, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x10, gbc.b());
        EXPECT(0xc2, gbc.c());
        EXPECT(0xd, gbc.d());
        EXPECT(0x89, gbc.e());
        EXPECT(0x6c, gbc.h());
        EXPECT(0xb6, gbc.l());
        EXPECT(0x6d9d, gbc.sp());
        EXPECT(0xacf3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xacf2));
        // AF 01C2
        gbc.setState(0x1674, 0xa743, 0x86b0, 0x884b, 0x7c5c, 0xa870, 0x0, 0x0);
        gbc.writeMem(0x1674, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x88, gbc.b());
        EXPECT(0x4b, gbc.c());
        EXPECT(0x7c, gbc.d());
        EXPECT(0x5c, gbc.e());
        EXPECT(0xa8, gbc.h());
        EXPECT(0x70, gbc.l());
        EXPECT(0xa743, gbc.sp());
        EXPECT(0x1675, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 01C3
        gbc.setState(0x676b, 0x34ac, 0x2600, 0x7861, 0x4911, 0x9a79, 0x0, 0x1);
        gbc.writeMem(0x676b, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x78, gbc.b());
        EXPECT(0x61, gbc.c());
        EXPECT(0x49, gbc.d());
        EXPECT(0x11, gbc.e());
        EXPECT(0x9a, gbc.h());
        EXPECT(0x79, gbc.l());
        EXPECT(0x34ac, gbc.sp());
        EXPECT(0x676c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 01C4
        gbc.setState(0x7552, 0xcad0, 0x2800, 0x1c52, 0xc4ab, 0xeffb, 0x1, 0x0);
        gbc.writeMem(0x7552, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x1c, gbc.b());
        EXPECT(0x52, gbc.c());
        EXPECT(0xc4, gbc.d());
        EXPECT(0xab, gbc.e());
        EXPECT(0xef, gbc.h());
        EXPECT(0xfb, gbc.l());
        EXPECT(0xcad0, gbc.sp());
        EXPECT(0x7553, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 01C5
        gbc.setState(0x558e, 0x37be, 0xb3c0, 0xffa8, 0xbecc, 0x6c99, 0x0, 0x1);
        gbc.writeMem(0x558e, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xff, gbc.b());
        EXPECT(0xa8, gbc.c());
        EXPECT(0xbe, gbc.d());
        EXPECT(0xcc, gbc.e());
        EXPECT(0x6c, gbc.h());
        EXPECT(0x99, gbc.l());
        EXPECT(0x37be, gbc.sp());
        EXPECT(0x558f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 01C6
        gbc.setState(0x38a3, 0x8770, 0x17e0, 0x685, 0x190f, 0xe88a, 0x0, 0x0);
        gbc.writeMem(0x38a3, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x6, gbc.b());
        EXPECT(0x85, gbc.c());
        EXPECT(0x19, gbc.d());
        EXPECT(0xf, gbc.e());
        EXPECT(0xe8, gbc.h());
        EXPECT(0x8a, gbc.l());
        EXPECT(0x8770, gbc.sp());
        EXPECT(0x38a4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 01C8
        gbc.setState(0xe28e, 0x16fe, 0xb520, 0x55cd, 0x4127, 0xd2b8, 0x1, 0x0);
        gbc.writeMem(0xe28e, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x55, gbc.b());
        EXPECT(0xcd, gbc.c());
        EXPECT(0x41, gbc.d());
        EXPECT(0x27, gbc.e());
        EXPECT(0xd2, gbc.h());
        EXPECT(0xb8, gbc.l());
        EXPECT(0x16fe, gbc.sp());
        EXPECT(0xe28f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xe28e));
        // AF 01C9
        gbc.setState(0x9fd6, 0x2764, 0xa000, 0x17f0, 0xc1cb, 0x5006, 0x0, 0x1);
        gbc.writeMem(0x9fd6, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x17, gbc.b());
        EXPECT(0xf0, gbc.c());
        EXPECT(0xc1, gbc.d());
        EXPECT(0xcb, gbc.e());
        EXPECT(0x50, gbc.h());
        EXPECT(0x6, gbc.l());
        EXPECT(0x2764, gbc.sp());
        EXPECT(0x9fd7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x9fd6));
        // AF 01CA
        gbc.setState(0xa64d, 0xd03b, 0xd2f0, 0x50b7, 0xd075, 0xab67, 0x0, 0x1);
        gbc.writeMem(0xa64d, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x50, gbc.b());
        EXPECT(0xb7, gbc.c());
        EXPECT(0xd0, gbc.d());
        EXPECT(0x75, gbc.e());
        EXPECT(0xab, gbc.h());
        EXPECT(0x67, gbc.l());
        EXPECT(0xd03b, gbc.sp());
        EXPECT(0xa64e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xa64d));
        // AF 01CB
        gbc.setState(0x5064, 0xf68a, 0x8920, 0x2652, 0x6db1, 0xbf96, 0x1, 0x1);
        gbc.writeMem(0x5064, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x26, gbc.b());
        EXPECT(0x52, gbc.c());
        EXPECT(0x6d, gbc.d());
        EXPECT(0xb1, gbc.e());
        EXPECT(0xbf, gbc.h());
        EXPECT(0x96, gbc.l());
        EXPECT(0xf68a, gbc.sp());
        EXPECT(0x5065, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 01CC
        gbc.setState(0xa87e, 0x15aa, 0x3dd0, 0x4d6e, 0x885b, 0x63f5, 0x1, 0x0);
        gbc.writeMem(0xa87e, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x4d, gbc.b());
        EXPECT(0x6e, gbc.c());
        EXPECT(0x88, gbc.d());
        EXPECT(0x5b, gbc.e());
        EXPECT(0x63, gbc.h());
        EXPECT(0xf5, gbc.l());
        EXPECT(0x15aa, gbc.sp());
        EXPECT(0xa87f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xa87e));
        // AF 01CD
        gbc.setState(0x8339, 0x5dd4, 0xdab0, 0xbf13, 0xe804, 0xe1ad, 0x1, 0x0);
        gbc.writeMem(0x8339, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xbf, gbc.b());
        EXPECT(0x13, gbc.c());
        EXPECT(0xe8, gbc.d());
        EXPECT(0x4, gbc.e());
        EXPECT(0xe1, gbc.h());
        EXPECT(0xad, gbc.l());
        EXPECT(0x5dd4, gbc.sp());
        EXPECT(0x833a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x8339));
        // AF 01CE
        gbc.setState(0x4f0a, 0xc000, 0x3fa0, 0x55eb, 0x7911, 0xf3e8, 0x1, 0x1);
        gbc.writeMem(0x4f0a, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x55, gbc.b());
        EXPECT(0xeb, gbc.c());
        EXPECT(0x79, gbc.d());
        EXPECT(0x11, gbc.e());
        EXPECT(0xf3, gbc.h());
        EXPECT(0xe8, gbc.l());
        EXPECT(0xc000, gbc.sp());
        EXPECT(0x4f0b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 01D1
        gbc.setState(0xdeac, 0x47e6, 0xda90, 0x21c1, 0xca69, 0xe96, 0x0, 0x1);
        gbc.writeMem(0xdeac, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x21, gbc.b());
        EXPECT(0xc1, gbc.c());
        EXPECT(0xca, gbc.d());
        EXPECT(0x69, gbc.e());
        EXPECT(0xe, gbc.h());
        EXPECT(0x96, gbc.l());
        EXPECT(0x47e6, gbc.sp());
        EXPECT(0xdead, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xdeac));
        // AF 01D2
        gbc.setState(0xe7f0, 0x823f, 0xac10, 0x9ada, 0x75ff, 0x72d8, 0x1, 0x0);
        gbc.writeMem(0xe7f0, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x9a, gbc.b());
        EXPECT(0xda, gbc.c());
        EXPECT(0x75, gbc.d());
        EXPECT(0xff, gbc.e());
        EXPECT(0x72, gbc.h());
        EXPECT(0xd8, gbc.l());
        EXPECT(0x823f, gbc.sp());
        EXPECT(0xe7f1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xe7f0));
        // AF 01D3
        gbc.setState(0xd32a, 0x57e2, 0xe310, 0x9530, 0x6bff, 0x41d6, 0x0, 0x0);
        gbc.writeMem(0xd32a, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x95, gbc.b());
        EXPECT(0x30, gbc.c());
        EXPECT(0x6b, gbc.d());
        EXPECT(0xff, gbc.e());
        EXPECT(0x41, gbc.h());
        EXPECT(0xd6, gbc.l());
        EXPECT(0x57e2, gbc.sp());
        EXPECT(0xd32b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xd32a));
        // AF 01D4
        gbc.setState(0xeaf7, 0xff29, 0x1840, 0x4998, 0x36e1, 0x45b, 0x0, 0x0);
        gbc.writeMem(0xeaf7, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x49, gbc.b());
        EXPECT(0x98, gbc.c());
        EXPECT(0x36, gbc.d());
        EXPECT(0xe1, gbc.e());
        EXPECT(0x4, gbc.h());
        EXPECT(0x5b, gbc.l());
        EXPECT(0xff29, gbc.sp());
        EXPECT(0xeaf8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xeaf7));
        // AF 01D5
        gbc.setState(0xa3bf, 0x8d09, 0x9bf0, 0xf9fe, 0x6d93, 0xbe15, 0x1, 0x1);
        gbc.writeMem(0xa3bf, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xf9, gbc.b());
        EXPECT(0xfe, gbc.c());
        EXPECT(0x6d, gbc.d());
        EXPECT(0x93, gbc.e());
        EXPECT(0xbe, gbc.h());
        EXPECT(0x15, gbc.l());
        EXPECT(0x8d09, gbc.sp());
        EXPECT(0xa3c0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xa3bf));
        // AF 01D6
        gbc.setState(0x211a, 0x13dd, 0x7cf0, 0x1af8, 0x8fb3, 0xf5c8, 0x1, 0x0);
        gbc.writeMem(0x211a, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x1a, gbc.b());
        EXPECT(0xf8, gbc.c());
        EXPECT(0x8f, gbc.d());
        EXPECT(0xb3, gbc.e());
        EXPECT(0xf5, gbc.h());
        EXPECT(0xc8, gbc.l());
        EXPECT(0x13dd, gbc.sp());
        EXPECT(0x211b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 01D7
        gbc.setState(0x5582, 0xbd27, 0x8220, 0xf81b, 0xad6c, 0xcb00, 0x0, 0x1);
        gbc.writeMem(0x5582, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xf8, gbc.b());
        EXPECT(0x1b, gbc.c());
        EXPECT(0xad, gbc.d());
        EXPECT(0x6c, gbc.e());
        EXPECT(0xcb, gbc.h());
        EXPECT(0x0, gbc.l());
        EXPECT(0xbd27, gbc.sp());
        EXPECT(0x5583, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 01D8
        gbc.setState(0xb938, 0x2bc2, 0x57b0, 0x216, 0x59da, 0x532c, 0x0, 0x0);
        gbc.writeMem(0xb938, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x2, gbc.b());
        EXPECT(0x16, gbc.c());
        EXPECT(0x59, gbc.d());
        EXPECT(0xda, gbc.e());
        EXPECT(0x53, gbc.h());
        EXPECT(0x2c, gbc.l());
        EXPECT(0x2bc2, gbc.sp());
        EXPECT(0xb939, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xb938));
        // AF 01D9
        gbc.setState(0x93bb, 0x1604, 0xd0, 0x7f03, 0x1bed, 0xf549, 0x1, 0x0);
        gbc.writeMem(0x93bb, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x7f, gbc.b());
        EXPECT(0x3, gbc.c());
        EXPECT(0x1b, gbc.d());
        EXPECT(0xed, gbc.e());
        EXPECT(0xf5, gbc.h());
        EXPECT(0x49, gbc.l());
        EXPECT(0x1604, gbc.sp());
        EXPECT(0x93bc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x93bb));
        // AF 01DA
        gbc.setState(0x9206, 0x102, 0x45a0, 0x7d5e, 0x6a36, 0x6e90, 0x0, 0x1);
        gbc.writeMem(0x9206, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x7d, gbc.b());
        EXPECT(0x5e, gbc.c());
        EXPECT(0x6a, gbc.d());
        EXPECT(0x36, gbc.e());
        EXPECT(0x6e, gbc.h());
        EXPECT(0x90, gbc.l());
        EXPECT(0x102, gbc.sp());
        EXPECT(0x9207, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x9206));
        // AF 01DB
        gbc.setState(0x621a, 0x6990, 0x8d70, 0xdf90, 0x1ce7, 0x700c, 0x1, 0x1);
        gbc.writeMem(0x621a, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xdf, gbc.b());
        EXPECT(0x90, gbc.c());
        EXPECT(0x1c, gbc.d());
        EXPECT(0xe7, gbc.e());
        EXPECT(0x70, gbc.h());
        EXPECT(0xc, gbc.l());
        EXPECT(0x6990, gbc.sp());
        EXPECT(0x621b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 01DC
        gbc.setState(0x54e7, 0xca8, 0xd000, 0xf8f7, 0x9006, 0x72fd, 0x1, 0x1);
        gbc.writeMem(0x54e7, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xf8, gbc.b());
        EXPECT(0xf7, gbc.c());
        EXPECT(0x90, gbc.d());
        EXPECT(0x6, gbc.e());
        EXPECT(0x72, gbc.h());
        EXPECT(0xfd, gbc.l());
        EXPECT(0xca8, gbc.sp());
        EXPECT(0x54e8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 01DD
        gbc.setState(0x5f8d, 0x70ca, 0xac20, 0x53b2, 0xd44b, 0xe35f, 0x1, 0x0);
        gbc.writeMem(0x5f8d, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x53, gbc.b());
        EXPECT(0xb2, gbc.c());
        EXPECT(0xd4, gbc.d());
        EXPECT(0x4b, gbc.e());
        EXPECT(0xe3, gbc.h());
        EXPECT(0x5f, gbc.l());
        EXPECT(0x70ca, gbc.sp());
        EXPECT(0x5f8e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 01DE
        gbc.setState(0xea26, 0x80a2, 0xed00, 0x51f4, 0xe99a, 0xbac1, 0x1, 0x0);
        gbc.writeMem(0xea26, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x51, gbc.b());
        EXPECT(0xf4, gbc.c());
        EXPECT(0xe9, gbc.d());
        EXPECT(0x9a, gbc.e());
        EXPECT(0xba, gbc.h());
        EXPECT(0xc1, gbc.l());
        EXPECT(0x80a2, gbc.sp());
        EXPECT(0xea27, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xea26));
        // AF 01DF
        gbc.setState(0x4c02, 0x6c0c, 0xca70, 0x20b1, 0x5bd8, 0x9a53, 0x0, 0x0);
        gbc.writeMem(0x4c02, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x20, gbc.b());
        EXPECT(0xb1, gbc.c());
        EXPECT(0x5b, gbc.d());
        EXPECT(0xd8, gbc.e());
        EXPECT(0x9a, gbc.h());
        EXPECT(0x53, gbc.l());
        EXPECT(0x6c0c, gbc.sp());
        EXPECT(0x4c03, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 01E0
        gbc.setState(0x986b, 0x6c3e, 0x9e10, 0xd3, 0xc923, 0xd4a9, 0x0, 0x0);
        gbc.writeMem(0x986b, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x0, gbc.b());
        EXPECT(0xd3, gbc.c());
        EXPECT(0xc9, gbc.d());
        EXPECT(0x23, gbc.e());
        EXPECT(0xd4, gbc.h());
        EXPECT(0xa9, gbc.l());
        EXPECT(0x6c3e, gbc.sp());
        EXPECT(0x986c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x986b));
        // AF 01E1
        gbc.setState(0x9f4c, 0xfc11, 0x7df0, 0xfff2, 0xc76e, 0xb571, 0x1, 0x0);
        gbc.writeMem(0x9f4c, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xff, gbc.b());
        EXPECT(0xf2, gbc.c());
        EXPECT(0xc7, gbc.d());
        EXPECT(0x6e, gbc.e());
        EXPECT(0xb5, gbc.h());
        EXPECT(0x71, gbc.l());
        EXPECT(0xfc11, gbc.sp());
        EXPECT(0x9f4d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x9f4c));
        // AF 01E2
        gbc.setState(0x52f7, 0x8187, 0xc400, 0xdc18, 0x3dd8, 0xe0c3, 0x1, 0x1);
        gbc.writeMem(0x52f7, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xdc, gbc.b());
        EXPECT(0x18, gbc.c());
        EXPECT(0x3d, gbc.d());
        EXPECT(0xd8, gbc.e());
        EXPECT(0xe0, gbc.h());
        EXPECT(0xc3, gbc.l());
        EXPECT(0x8187, gbc.sp());
        EXPECT(0x52f8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 01E3
        gbc.setState(0x28a1, 0xab9c, 0xde20, 0x6bc3, 0x3479, 0x8d94, 0x0, 0x0);
        gbc.writeMem(0x28a1, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x6b, gbc.b());
        EXPECT(0xc3, gbc.c());
        EXPECT(0x34, gbc.d());
        EXPECT(0x79, gbc.e());
        EXPECT(0x8d, gbc.h());
        EXPECT(0x94, gbc.l());
        EXPECT(0xab9c, gbc.sp());
        EXPECT(0x28a2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 01E4
        gbc.setState(0x2c34, 0xf55e, 0x5ac0, 0xb969, 0x85d8, 0xb43e, 0x0, 0x0);
        gbc.writeMem(0x2c34, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xb9, gbc.b());
        EXPECT(0x69, gbc.c());
        EXPECT(0x85, gbc.d());
        EXPECT(0xd8, gbc.e());
        EXPECT(0xb4, gbc.h());
        EXPECT(0x3e, gbc.l());
        EXPECT(0xf55e, gbc.sp());
        EXPECT(0x2c35, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 01E5
        gbc.setState(0x169f, 0x4973, 0x230, 0xbb02, 0x5aca, 0x9673, 0x1, 0x0);
        gbc.writeMem(0x169f, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xbb, gbc.b());
        EXPECT(0x2, gbc.c());
        EXPECT(0x5a, gbc.d());
        EXPECT(0xca, gbc.e());
        EXPECT(0x96, gbc.h());
        EXPECT(0x73, gbc.l());
        EXPECT(0x4973, gbc.sp());
        EXPECT(0x16a0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 01E6
        gbc.setState(0x20c2, 0x8195, 0xaed0, 0x52e6, 0x2cad, 0x26dc, 0x1, 0x0);
        gbc.writeMem(0x20c2, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x52, gbc.b());
        EXPECT(0xe6, gbc.c());
        EXPECT(0x2c, gbc.d());
        EXPECT(0xad, gbc.e());
        EXPECT(0x26, gbc.h());
        EXPECT(0xdc, gbc.l());
        EXPECT(0x8195, gbc.sp());
        EXPECT(0x20c3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 01E8
        gbc.setState(0x4cbb, 0x16f3, 0xaa70, 0x3933, 0x9c1b, 0x782d, 0x1, 0x0);
        gbc.writeMem(0x4cbb, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x39, gbc.b());
        EXPECT(0x33, gbc.c());
        EXPECT(0x9c, gbc.d());
        EXPECT(0x1b, gbc.e());
        EXPECT(0x78, gbc.h());
        EXPECT(0x2d, gbc.l());
        EXPECT(0x16f3, gbc.sp());
        EXPECT(0x4cbc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 01E9
        gbc.setState(0x8d34, 0x36d9, 0x3fb0, 0x2aaa, 0x993, 0xb6c7, 0x1, 0x1);
        gbc.writeMem(0x8d34, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x2a, gbc.b());
        EXPECT(0xaa, gbc.c());
        EXPECT(0x9, gbc.d());
        EXPECT(0x93, gbc.e());
        EXPECT(0xb6, gbc.h());
        EXPECT(0xc7, gbc.l());
        EXPECT(0x36d9, gbc.sp());
        EXPECT(0x8d35, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x8d34));
        // AF 01EA
        gbc.setState(0x822d, 0x5da1, 0x72f0, 0x78f5, 0x972, 0x6dba, 0x0, 0x0);
        gbc.writeMem(0x822d, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x78, gbc.b());
        EXPECT(0xf5, gbc.c());
        EXPECT(0x9, gbc.d());
        EXPECT(0x72, gbc.e());
        EXPECT(0x6d, gbc.h());
        EXPECT(0xba, gbc.l());
        EXPECT(0x5da1, gbc.sp());
        EXPECT(0x822e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x822d));
        // AF 01EB
        gbc.setState(0x3763, 0x33b8, 0x1b00, 0x7fd5, 0x6220, 0x85b4, 0x0, 0x0);
        gbc.writeMem(0x3763, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x7f, gbc.b());
        EXPECT(0xd5, gbc.c());
        EXPECT(0x62, gbc.d());
        EXPECT(0x20, gbc.e());
        EXPECT(0x85, gbc.h());
        EXPECT(0xb4, gbc.l());
        EXPECT(0x33b8, gbc.sp());
        EXPECT(0x3764, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 01EC
        gbc.setState(0xed4c, 0xe7ed, 0xe100, 0x729e, 0x4b42, 0x810a, 0x1, 0x1);
        gbc.writeMem(0xed4c, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x72, gbc.b());
        EXPECT(0x9e, gbc.c());
        EXPECT(0x4b, gbc.d());
        EXPECT(0x42, gbc.e());
        EXPECT(0x81, gbc.h());
        EXPECT(0xa, gbc.l());
        EXPECT(0xe7ed, gbc.sp());
        EXPECT(0xed4d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xed4c));
        // AF 01ED
        gbc.setState(0x9c1d, 0xe264, 0x7fd0, 0x539a, 0xa8e9, 0xd7f2, 0x1, 0x0);
        gbc.writeMem(0x9c1d, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x53, gbc.b());
        EXPECT(0x9a, gbc.c());
        EXPECT(0xa8, gbc.d());
        EXPECT(0xe9, gbc.e());
        EXPECT(0xd7, gbc.h());
        EXPECT(0xf2, gbc.l());
        EXPECT(0xe264, gbc.sp());
        EXPECT(0x9c1e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x9c1d));
        // AF 01EE
        gbc.setState(0x1eca, 0xe617, 0x7da0, 0xa1ea, 0xd240, 0x769e, 0x0, 0x1);
        gbc.writeMem(0x1eca, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xa1, gbc.b());
        EXPECT(0xea, gbc.c());
        EXPECT(0xd2, gbc.d());
        EXPECT(0x40, gbc.e());
        EXPECT(0x76, gbc.h());
        EXPECT(0x9e, gbc.l());
        EXPECT(0xe617, gbc.sp());
        EXPECT(0x1ecb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 01EF
        gbc.setState(0x3e42, 0xc78d, 0x8c40, 0xd85, 0x2534, 0x12c7, 0x1, 0x1);
        gbc.writeMem(0x3e42, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xd, gbc.b());
        EXPECT(0x85, gbc.c());
        EXPECT(0x25, gbc.d());
        EXPECT(0x34, gbc.e());
        EXPECT(0x12, gbc.h());
        EXPECT(0xc7, gbc.l());
        EXPECT(0xc78d, gbc.sp());
        EXPECT(0x3e43, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 01F0
        gbc.setState(0x3696, 0x64bd, 0xae00, 0x5bac, 0xd5f3, 0x2e, 0x0, 0x1);
        gbc.writeMem(0x3696, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x5b, gbc.b());
        EXPECT(0xac, gbc.c());
        EXPECT(0xd5, gbc.d());
        EXPECT(0xf3, gbc.e());
        EXPECT(0x0, gbc.h());
        EXPECT(0x2e, gbc.l());
        EXPECT(0x64bd, gbc.sp());
        EXPECT(0x3697, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 01F1
        gbc.setState(0x9cd8, 0xe56b, 0xf720, 0x9247, 0x681f, 0xa887, 0x0, 0x0);
        gbc.writeMem(0x9cd8, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x92, gbc.b());
        EXPECT(0x47, gbc.c());
        EXPECT(0x68, gbc.d());
        EXPECT(0x1f, gbc.e());
        EXPECT(0xa8, gbc.h());
        EXPECT(0x87, gbc.l());
        EXPECT(0xe56b, gbc.sp());
        EXPECT(0x9cd9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x9cd8));
        // AF 01F2
        gbc.setState(0x2a42, 0x16f1, 0x6890, 0xe6f0, 0x41ac, 0xa103, 0x1, 0x1);
        gbc.writeMem(0x2a42, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xe6, gbc.b());
        EXPECT(0xf0, gbc.c());
        EXPECT(0x41, gbc.d());
        EXPECT(0xac, gbc.e());
        EXPECT(0xa1, gbc.h());
        EXPECT(0x3, gbc.l());
        EXPECT(0x16f1, gbc.sp());
        EXPECT(0x2a43, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 01F3
        gbc.setState(0x7adb, 0x8feb, 0x5000, 0x4f01, 0x1407, 0x93e6, 0x1, 0x0);
        gbc.writeMem(0x7adb, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x4f, gbc.b());
        EXPECT(0x1, gbc.c());
        EXPECT(0x14, gbc.d());
        EXPECT(0x7, gbc.e());
        EXPECT(0x93, gbc.h());
        EXPECT(0xe6, gbc.l());
        EXPECT(0x8feb, gbc.sp());
        EXPECT(0x7adc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 01F4
        gbc.setState(0xa368, 0x8405, 0x2c10, 0xd6f6, 0xa1f9, 0x800c, 0x0, 0x0);
        gbc.writeMem(0xa368, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xd6, gbc.b());
        EXPECT(0xf6, gbc.c());
        EXPECT(0xa1, gbc.d());
        EXPECT(0xf9, gbc.e());
        EXPECT(0x80, gbc.h());
        EXPECT(0xc, gbc.l());
        EXPECT(0x8405, gbc.sp());
        EXPECT(0xa369, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xa368));
        // AF 01F5
        gbc.setState(0x11ee, 0x43fd, 0x2e90, 0xf15d, 0xafde, 0x9099, 0x0, 0x0);
        gbc.writeMem(0x11ee, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xf1, gbc.b());
        EXPECT(0x5d, gbc.c());
        EXPECT(0xaf, gbc.d());
        EXPECT(0xde, gbc.e());
        EXPECT(0x90, gbc.h());
        EXPECT(0x99, gbc.l());
        EXPECT(0x43fd, gbc.sp());
        EXPECT(0x11ef, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 01F6
        gbc.setState(0x9a1b, 0x2fc8, 0x1780, 0xd411, 0x6bf0, 0xe5d3, 0x0, 0x0);
        gbc.writeMem(0x9a1b, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xd4, gbc.b());
        EXPECT(0x11, gbc.c());
        EXPECT(0x6b, gbc.d());
        EXPECT(0xf0, gbc.e());
        EXPECT(0xe5, gbc.h());
        EXPECT(0xd3, gbc.l());
        EXPECT(0x2fc8, gbc.sp());
        EXPECT(0x9a1c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x9a1b));
        // AF 01F7
        gbc.setState(0x3e38, 0x5681, 0x9ed0, 0x3837, 0xe7, 0xec15, 0x0, 0x1);
        gbc.writeMem(0x3e38, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x38, gbc.b());
        EXPECT(0x37, gbc.c());
        EXPECT(0x0, gbc.d());
        EXPECT(0xe7, gbc.e());
        EXPECT(0xec, gbc.h());
        EXPECT(0x15, gbc.l());
        EXPECT(0x5681, gbc.sp());
        EXPECT(0x3e39, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 01FA
        gbc.setState(0x392d, 0xa9ee, 0x9dd0, 0x4b61, 0xd6e5, 0x20ae, 0x1, 0x0);
        gbc.writeMem(0x392d, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x4b, gbc.b());
        EXPECT(0x61, gbc.c());
        EXPECT(0xd6, gbc.d());
        EXPECT(0xe5, gbc.e());
        EXPECT(0x20, gbc.h());
        EXPECT(0xae, gbc.l());
        EXPECT(0xa9ee, gbc.sp());
        EXPECT(0x392e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 01FB
        gbc.setState(0x90, 0xa87b, 0x81d0, 0x30af, 0x5229, 0xfcf1, 0x0, 0x0);
        gbc.writeMem(0x90, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x30, gbc.b());
        EXPECT(0xaf, gbc.c());
        EXPECT(0x52, gbc.d());
        EXPECT(0x29, gbc.e());
        EXPECT(0xfc, gbc.h());
        EXPECT(0xf1, gbc.l());
        EXPECT(0xa87b, gbc.sp());
        EXPECT(0x91, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 01FD
        gbc.setState(0x6e96, 0xf4e2, 0x2500, 0x1381, 0x4e88, 0x4b85, 0x0, 0x0);
        gbc.writeMem(0x6e96, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x13, gbc.b());
        EXPECT(0x81, gbc.c());
        EXPECT(0x4e, gbc.d());
        EXPECT(0x88, gbc.e());
        EXPECT(0x4b, gbc.h());
        EXPECT(0x85, gbc.l());
        EXPECT(0xf4e2, gbc.sp());
        EXPECT(0x6e97, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 01FE
        gbc.setState(0xf47, 0xf400, 0xe870, 0x6fc9, 0x9606, 0xf5e6, 0x1, 0x1);
        gbc.writeMem(0xf47, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x6f, gbc.b());
        EXPECT(0xc9, gbc.c());
        EXPECT(0x96, gbc.d());
        EXPECT(0x6, gbc.e());
        EXPECT(0xf5, gbc.h());
        EXPECT(0xe6, gbc.l());
        EXPECT(0xf400, gbc.sp());
        EXPECT(0xf48, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 01FF
        gbc.setState(0xdd38, 0x8743, 0xe5e0, 0x483f, 0xd193, 0xd50b, 0x1, 0x1);
        gbc.writeMem(0xdd38, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x48, gbc.b());
        EXPECT(0x3f, gbc.c());
        EXPECT(0xd1, gbc.d());
        EXPECT(0x93, gbc.e());
        EXPECT(0xd5, gbc.h());
        EXPECT(0xb, gbc.l());
        EXPECT(0x8743, gbc.sp());
        EXPECT(0xdd39, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xdd38));
        // AF 0200
        gbc.setState(0xe7e2, 0xa852, 0xed10, 0x9b11, 0xb846, 0xab47, 0x0, 0x0);
        gbc.writeMem(0xe7e2, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x9b, gbc.b());
        EXPECT(0x11, gbc.c());
        EXPECT(0xb8, gbc.d());
        EXPECT(0x46, gbc.e());
        EXPECT(0xab, gbc.h());
        EXPECT(0x47, gbc.l());
        EXPECT(0xa852, gbc.sp());
        EXPECT(0xe7e3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xe7e2));
        // AF 0202
        gbc.setState(0x71b3, 0x65ed, 0x4060, 0x4b41, 0x24f8, 0x76f9, 0x1, 0x1);
        gbc.writeMem(0x71b3, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x4b, gbc.b());
        EXPECT(0x41, gbc.c());
        EXPECT(0x24, gbc.d());
        EXPECT(0xf8, gbc.e());
        EXPECT(0x76, gbc.h());
        EXPECT(0xf9, gbc.l());
        EXPECT(0x65ed, gbc.sp());
        EXPECT(0x71b4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0203
        gbc.setState(0xe77, 0x5aa1, 0xdae0, 0x3b9e, 0xd823, 0x90c7, 0x1, 0x0);
        gbc.writeMem(0xe77, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x3b, gbc.b());
        EXPECT(0x9e, gbc.c());
        EXPECT(0xd8, gbc.d());
        EXPECT(0x23, gbc.e());
        EXPECT(0x90, gbc.h());
        EXPECT(0xc7, gbc.l());
        EXPECT(0x5aa1, gbc.sp());
        EXPECT(0xe78, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0204
        gbc.setState(0x95b6, 0x3d1e, 0xd8b0, 0xafac, 0xfd2d, 0x86d3, 0x1, 0x1);
        gbc.writeMem(0x95b6, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xaf, gbc.b());
        EXPECT(0xac, gbc.c());
        EXPECT(0xfd, gbc.d());
        EXPECT(0x2d, gbc.e());
        EXPECT(0x86, gbc.h());
        EXPECT(0xd3, gbc.l());
        EXPECT(0x3d1e, gbc.sp());
        EXPECT(0x95b7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x95b6));
        // AF 0205
        gbc.setState(0x4714, 0x4835, 0x1c0, 0xa6bb, 0x530a, 0xbe14, 0x1, 0x0);
        gbc.writeMem(0x4714, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xa6, gbc.b());
        EXPECT(0xbb, gbc.c());
        EXPECT(0x53, gbc.d());
        EXPECT(0xa, gbc.e());
        EXPECT(0xbe, gbc.h());
        EXPECT(0x14, gbc.l());
        EXPECT(0x4835, gbc.sp());
        EXPECT(0x4715, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0206
        gbc.setState(0x62fd, 0x779c, 0xfd0, 0x3b65, 0xb3cc, 0xacf4, 0x1, 0x1);
        gbc.writeMem(0x62fd, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x3b, gbc.b());
        EXPECT(0x65, gbc.c());
        EXPECT(0xb3, gbc.d());
        EXPECT(0xcc, gbc.e());
        EXPECT(0xac, gbc.h());
        EXPECT(0xf4, gbc.l());
        EXPECT(0x779c, gbc.sp());
        EXPECT(0x62fe, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0207
        gbc.setState(0xa915, 0x25a6, 0xab00, 0x2c, 0x4a4, 0x5941, 0x1, 0x0);
        gbc.writeMem(0xa915, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x0, gbc.b());
        EXPECT(0x2c, gbc.c());
        EXPECT(0x4, gbc.d());
        EXPECT(0xa4, gbc.e());
        EXPECT(0x59, gbc.h());
        EXPECT(0x41, gbc.l());
        EXPECT(0x25a6, gbc.sp());
        EXPECT(0xa916, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xa915));
        // AF 020A
        gbc.setState(0x9944, 0xde68, 0xef90, 0xb55b, 0xf399, 0x4dc3, 0x0, 0x1);
        gbc.writeMem(0x9944, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xb5, gbc.b());
        EXPECT(0x5b, gbc.c());
        EXPECT(0xf3, gbc.d());
        EXPECT(0x99, gbc.e());
        EXPECT(0x4d, gbc.h());
        EXPECT(0xc3, gbc.l());
        EXPECT(0xde68, gbc.sp());
        EXPECT(0x9945, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x9944));
        // AF 020B
        gbc.setState(0x4791, 0x47ac, 0xa40, 0xc48d, 0x2179, 0x8dde, 0x0, 0x1);
        gbc.writeMem(0x4791, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xc4, gbc.b());
        EXPECT(0x8d, gbc.c());
        EXPECT(0x21, gbc.d());
        EXPECT(0x79, gbc.e());
        EXPECT(0x8d, gbc.h());
        EXPECT(0xde, gbc.l());
        EXPECT(0x47ac, gbc.sp());
        EXPECT(0x4792, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 020C
        gbc.setState(0x3097, 0xe9a, 0xa8a0, 0x656b, 0xc71, 0x2581, 0x1, 0x0);
        gbc.writeMem(0x3097, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x65, gbc.b());
        EXPECT(0x6b, gbc.c());
        EXPECT(0xc, gbc.d());
        EXPECT(0x71, gbc.e());
        EXPECT(0x25, gbc.h());
        EXPECT(0x81, gbc.l());
        EXPECT(0xe9a, gbc.sp());
        EXPECT(0x3098, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 020D
        gbc.setState(0xd201, 0xf3a8, 0x2380, 0x2c9e, 0x2fdc, 0x662b, 0x0, 0x0);
        gbc.writeMem(0xd201, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x2c, gbc.b());
        EXPECT(0x9e, gbc.c());
        EXPECT(0x2f, gbc.d());
        EXPECT(0xdc, gbc.e());
        EXPECT(0x66, gbc.h());
        EXPECT(0x2b, gbc.l());
        EXPECT(0xf3a8, gbc.sp());
        EXPECT(0xd202, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xd201));
        // AF 020E
        gbc.setState(0x9a2b, 0x1e02, 0xf430, 0x73d8, 0x8e5c, 0x7f67, 0x0, 0x1);
        gbc.writeMem(0x9a2b, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x73, gbc.b());
        EXPECT(0xd8, gbc.c());
        EXPECT(0x8e, gbc.d());
        EXPECT(0x5c, gbc.e());
        EXPECT(0x7f, gbc.h());
        EXPECT(0x67, gbc.l());
        EXPECT(0x1e02, gbc.sp());
        EXPECT(0x9a2c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x9a2b));
        // AF 020F
        gbc.setState(0xd019, 0x61c4, 0xfbe0, 0xbd28, 0xb87b, 0x47bb, 0x0, 0x1);
        gbc.writeMem(0xd019, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xbd, gbc.b());
        EXPECT(0x28, gbc.c());
        EXPECT(0xb8, gbc.d());
        EXPECT(0x7b, gbc.e());
        EXPECT(0x47, gbc.h());
        EXPECT(0xbb, gbc.l());
        EXPECT(0x61c4, gbc.sp());
        EXPECT(0xd01a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xd019));
        // AF 0210
        gbc.setState(0x66bd, 0xb130, 0xec0, 0xe516, 0x7432, 0xb45d, 0x1, 0x1);
        gbc.writeMem(0x66bd, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xe5, gbc.b());
        EXPECT(0x16, gbc.c());
        EXPECT(0x74, gbc.d());
        EXPECT(0x32, gbc.e());
        EXPECT(0xb4, gbc.h());
        EXPECT(0x5d, gbc.l());
        EXPECT(0xb130, gbc.sp());
        EXPECT(0x66be, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0211
        gbc.setState(0x3bf7, 0x323c, 0x4a00, 0xf47e, 0xc5f8, 0xda9b, 0x0, 0x0);
        gbc.writeMem(0x3bf7, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xf4, gbc.b());
        EXPECT(0x7e, gbc.c());
        EXPECT(0xc5, gbc.d());
        EXPECT(0xf8, gbc.e());
        EXPECT(0xda, gbc.h());
        EXPECT(0x9b, gbc.l());
        EXPECT(0x323c, gbc.sp());
        EXPECT(0x3bf8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0212
        gbc.setState(0x9588, 0xf8ba, 0xc060, 0xdb3c, 0x7468, 0x4b78, 0x0, 0x1);
        gbc.writeMem(0x9588, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xdb, gbc.b());
        EXPECT(0x3c, gbc.c());
        EXPECT(0x74, gbc.d());
        EXPECT(0x68, gbc.e());
        EXPECT(0x4b, gbc.h());
        EXPECT(0x78, gbc.l());
        EXPECT(0xf8ba, gbc.sp());
        EXPECT(0x9589, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x9588));
        // AF 0213
        gbc.setState(0x79a4, 0xd59d, 0xbd50, 0x1634, 0xb24e, 0x75aa, 0x1, 0x0);
        gbc.writeMem(0x79a4, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x16, gbc.b());
        EXPECT(0x34, gbc.c());
        EXPECT(0xb2, gbc.d());
        EXPECT(0x4e, gbc.e());
        EXPECT(0x75, gbc.h());
        EXPECT(0xaa, gbc.l());
        EXPECT(0xd59d, gbc.sp());
        EXPECT(0x79a5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0214
        gbc.setState(0xe510, 0xc201, 0xff70, 0xca83, 0xc1d4, 0x77b2, 0x1, 0x1);
        gbc.writeMem(0xe510, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xca, gbc.b());
        EXPECT(0x83, gbc.c());
        EXPECT(0xc1, gbc.d());
        EXPECT(0xd4, gbc.e());
        EXPECT(0x77, gbc.h());
        EXPECT(0xb2, gbc.l());
        EXPECT(0xc201, gbc.sp());
        EXPECT(0xe511, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xe510));
        // AF 0215
        gbc.setState(0x27cc, 0x38fb, 0x3060, 0x4a03, 0xf8b3, 0x9dd2, 0x0, 0x1);
        gbc.writeMem(0x27cc, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x4a, gbc.b());
        EXPECT(0x3, gbc.c());
        EXPECT(0xf8, gbc.d());
        EXPECT(0xb3, gbc.e());
        EXPECT(0x9d, gbc.h());
        EXPECT(0xd2, gbc.l());
        EXPECT(0x38fb, gbc.sp());
        EXPECT(0x27cd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0216
        gbc.setState(0xbc2c, 0x401, 0x2d60, 0xc16a, 0xbd73, 0x31ea, 0x1, 0x0);
        gbc.writeMem(0xbc2c, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xc1, gbc.b());
        EXPECT(0x6a, gbc.c());
        EXPECT(0xbd, gbc.d());
        EXPECT(0x73, gbc.e());
        EXPECT(0x31, gbc.h());
        EXPECT(0xea, gbc.l());
        EXPECT(0x401, gbc.sp());
        EXPECT(0xbc2d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xbc2c));
        // AF 0217
        gbc.setState(0x4265, 0x463d, 0x9e40, 0x8632, 0x1b75, 0x758e, 0x0, 0x0);
        gbc.writeMem(0x4265, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x86, gbc.b());
        EXPECT(0x32, gbc.c());
        EXPECT(0x1b, gbc.d());
        EXPECT(0x75, gbc.e());
        EXPECT(0x75, gbc.h());
        EXPECT(0x8e, gbc.l());
        EXPECT(0x463d, gbc.sp());
        EXPECT(0x4266, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0218
        gbc.setState(0x7228, 0x3ba9, 0x8ae0, 0x5e91, 0xc0f2, 0xd5b0, 0x0, 0x1);
        gbc.writeMem(0x7228, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x5e, gbc.b());
        EXPECT(0x91, gbc.c());
        EXPECT(0xc0, gbc.d());
        EXPECT(0xf2, gbc.e());
        EXPECT(0xd5, gbc.h());
        EXPECT(0xb0, gbc.l());
        EXPECT(0x3ba9, gbc.sp());
        EXPECT(0x7229, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0219
        gbc.setState(0x40fb, 0x39d3, 0x44e0, 0x2b9a, 0x6727, 0x89ec, 0x1, 0x0);
        gbc.writeMem(0x40fb, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x2b, gbc.b());
        EXPECT(0x9a, gbc.c());
        EXPECT(0x67, gbc.d());
        EXPECT(0x27, gbc.e());
        EXPECT(0x89, gbc.h());
        EXPECT(0xec, gbc.l());
        EXPECT(0x39d3, gbc.sp());
        EXPECT(0x40fc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 021A
        gbc.setState(0xabcb, 0xd979, 0x9f90, 0x5726, 0x8263, 0xa0a8, 0x0, 0x1);
        gbc.writeMem(0xabcb, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x57, gbc.b());
        EXPECT(0x26, gbc.c());
        EXPECT(0x82, gbc.d());
        EXPECT(0x63, gbc.e());
        EXPECT(0xa0, gbc.h());
        EXPECT(0xa8, gbc.l());
        EXPECT(0xd979, gbc.sp());
        EXPECT(0xabcc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xabcb));
        // AF 021B
        gbc.setState(0xd84e, 0xac3a, 0x5700, 0x6619, 0x132e, 0xca98, 0x1, 0x0);
        gbc.writeMem(0xd84e, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x66, gbc.b());
        EXPECT(0x19, gbc.c());
        EXPECT(0x13, gbc.d());
        EXPECT(0x2e, gbc.e());
        EXPECT(0xca, gbc.h());
        EXPECT(0x98, gbc.l());
        EXPECT(0xac3a, gbc.sp());
        EXPECT(0xd84f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xd84e));
        // AF 021C
        gbc.setState(0x9f20, 0x9e14, 0x9900, 0xdd8a, 0x7ebb, 0xc1e4, 0x0, 0x1);
        gbc.writeMem(0x9f20, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xdd, gbc.b());
        EXPECT(0x8a, gbc.c());
        EXPECT(0x7e, gbc.d());
        EXPECT(0xbb, gbc.e());
        EXPECT(0xc1, gbc.h());
        EXPECT(0xe4, gbc.l());
        EXPECT(0x9e14, gbc.sp());
        EXPECT(0x9f21, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x9f20));
        // AF 021D
        gbc.setState(0x9a3c, 0xc1db, 0xd780, 0xd01a, 0xa3a4, 0xcd1f, 0x1, 0x1);
        gbc.writeMem(0x9a3c, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xd0, gbc.b());
        EXPECT(0x1a, gbc.c());
        EXPECT(0xa3, gbc.d());
        EXPECT(0xa4, gbc.e());
        EXPECT(0xcd, gbc.h());
        EXPECT(0x1f, gbc.l());
        EXPECT(0xc1db, gbc.sp());
        EXPECT(0x9a3d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x9a3c));
        // AF 021E
        gbc.setState(0x14b5, 0xe433, 0x9a40, 0x709f, 0x43eb, 0xb748, 0x0, 0x0);
        gbc.writeMem(0x14b5, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x70, gbc.b());
        EXPECT(0x9f, gbc.c());
        EXPECT(0x43, gbc.d());
        EXPECT(0xeb, gbc.e());
        EXPECT(0xb7, gbc.h());
        EXPECT(0x48, gbc.l());
        EXPECT(0xe433, gbc.sp());
        EXPECT(0x14b6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 021F
        gbc.setState(0x62ff, 0x75bb, 0xd4a0, 0xcac9, 0x7de0, 0xe40c, 0x1, 0x0);
        gbc.writeMem(0x62ff, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xca, gbc.b());
        EXPECT(0xc9, gbc.c());
        EXPECT(0x7d, gbc.d());
        EXPECT(0xe0, gbc.e());
        EXPECT(0xe4, gbc.h());
        EXPECT(0xc, gbc.l());
        EXPECT(0x75bb, gbc.sp());
        EXPECT(0x6300, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0220
        gbc.setState(0xcccd, 0xe948, 0xe690, 0x8ba0, 0x639, 0x8d9, 0x0, 0x0);
        gbc.writeMem(0xcccd, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x8b, gbc.b());
        EXPECT(0xa0, gbc.c());
        EXPECT(0x6, gbc.d());
        EXPECT(0x39, gbc.e());
        EXPECT(0x8, gbc.h());
        EXPECT(0xd9, gbc.l());
        EXPECT(0xe948, gbc.sp());
        EXPECT(0xccce, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xcccd));
        // AF 0221
        gbc.setState(0x4b36, 0xc6c4, 0x8c70, 0x3076, 0x8b33, 0x2243, 0x1, 0x1);
        gbc.writeMem(0x4b36, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x30, gbc.b());
        EXPECT(0x76, gbc.c());
        EXPECT(0x8b, gbc.d());
        EXPECT(0x33, gbc.e());
        EXPECT(0x22, gbc.h());
        EXPECT(0x43, gbc.l());
        EXPECT(0xc6c4, gbc.sp());
        EXPECT(0x4b37, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0222
        gbc.setState(0x7492, 0x34ee, 0xb500, 0x6cda, 0x45e7, 0xc041, 0x1, 0x1);
        gbc.writeMem(0x7492, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x6c, gbc.b());
        EXPECT(0xda, gbc.c());
        EXPECT(0x45, gbc.d());
        EXPECT(0xe7, gbc.e());
        EXPECT(0xc0, gbc.h());
        EXPECT(0x41, gbc.l());
        EXPECT(0x34ee, gbc.sp());
        EXPECT(0x7493, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0223
        gbc.setState(0xcfd8, 0x76f0, 0xa4f0, 0xde05, 0x383a, 0x8479, 0x1, 0x1);
        gbc.writeMem(0xcfd8, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xde, gbc.b());
        EXPECT(0x5, gbc.c());
        EXPECT(0x38, gbc.d());
        EXPECT(0x3a, gbc.e());
        EXPECT(0x84, gbc.h());
        EXPECT(0x79, gbc.l());
        EXPECT(0x76f0, gbc.sp());
        EXPECT(0xcfd9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xcfd8));
        // AF 0224
        gbc.setState(0xce1c, 0x6efb, 0x8ea0, 0x63fa, 0x47f3, 0x632c, 0x0, 0x1);
        gbc.writeMem(0xce1c, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x63, gbc.b());
        EXPECT(0xfa, gbc.c());
        EXPECT(0x47, gbc.d());
        EXPECT(0xf3, gbc.e());
        EXPECT(0x63, gbc.h());
        EXPECT(0x2c, gbc.l());
        EXPECT(0x6efb, gbc.sp());
        EXPECT(0xce1d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xce1c));
        // AF 0225
        gbc.setState(0x782b, 0xd229, 0x8b00, 0x1be6, 0xddeb, 0xdbad, 0x0, 0x0);
        gbc.writeMem(0x782b, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x1b, gbc.b());
        EXPECT(0xe6, gbc.c());
        EXPECT(0xdd, gbc.d());
        EXPECT(0xeb, gbc.e());
        EXPECT(0xdb, gbc.h());
        EXPECT(0xad, gbc.l());
        EXPECT(0xd229, gbc.sp());
        EXPECT(0x782c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0226
        gbc.setState(0xd0aa, 0xdb21, 0x1370, 0x65bc, 0x7295, 0x8831, 0x1, 0x1);
        gbc.writeMem(0xd0aa, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x65, gbc.b());
        EXPECT(0xbc, gbc.c());
        EXPECT(0x72, gbc.d());
        EXPECT(0x95, gbc.e());
        EXPECT(0x88, gbc.h());
        EXPECT(0x31, gbc.l());
        EXPECT(0xdb21, gbc.sp());
        EXPECT(0xd0ab, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xd0aa));
        // AF 0227
        gbc.setState(0xc0e2, 0xe26c, 0xe180, 0x10cb, 0x882e, 0x75f6, 0x0, 0x1);
        gbc.writeMem(0xc0e2, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x10, gbc.b());
        EXPECT(0xcb, gbc.c());
        EXPECT(0x88, gbc.d());
        EXPECT(0x2e, gbc.e());
        EXPECT(0x75, gbc.h());
        EXPECT(0xf6, gbc.l());
        EXPECT(0xe26c, gbc.sp());
        EXPECT(0xc0e3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xc0e2));
        // AF 0228
        gbc.setState(0xd25b, 0x2b73, 0x230, 0xd35b, 0x51ea, 0x56a3, 0x0, 0x0);
        gbc.writeMem(0xd25b, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xd3, gbc.b());
        EXPECT(0x5b, gbc.c());
        EXPECT(0x51, gbc.d());
        EXPECT(0xea, gbc.e());
        EXPECT(0x56, gbc.h());
        EXPECT(0xa3, gbc.l());
        EXPECT(0x2b73, gbc.sp());
        EXPECT(0xd25c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xd25b));
        // AF 022A
        gbc.setState(0xda5c, 0xcb86, 0x25a0, 0xf103, 0x8cf, 0x79fd, 0x1, 0x0);
        gbc.writeMem(0xda5c, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xf1, gbc.b());
        EXPECT(0x3, gbc.c());
        EXPECT(0x8, gbc.d());
        EXPECT(0xcf, gbc.e());
        EXPECT(0x79, gbc.h());
        EXPECT(0xfd, gbc.l());
        EXPECT(0xcb86, gbc.sp());
        EXPECT(0xda5d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xda5c));
        // AF 022B
        gbc.setState(0xb786, 0x5611, 0x130, 0x4d17, 0x960, 0x4f02, 0x0, 0x0);
        gbc.writeMem(0xb786, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x4d, gbc.b());
        EXPECT(0x17, gbc.c());
        EXPECT(0x9, gbc.d());
        EXPECT(0x60, gbc.e());
        EXPECT(0x4f, gbc.h());
        EXPECT(0x2, gbc.l());
        EXPECT(0x5611, gbc.sp());
        EXPECT(0xb787, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xb786));
        // AF 022D
        gbc.setState(0x49d8, 0x74eb, 0xd590, 0x3e49, 0x11d2, 0xb3f9, 0x1, 0x1);
        gbc.writeMem(0x49d8, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x3e, gbc.b());
        EXPECT(0x49, gbc.c());
        EXPECT(0x11, gbc.d());
        EXPECT(0xd2, gbc.e());
        EXPECT(0xb3, gbc.h());
        EXPECT(0xf9, gbc.l());
        EXPECT(0x74eb, gbc.sp());
        EXPECT(0x49d9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 022E
        gbc.setState(0x9dfe, 0xced6, 0xb790, 0xe8a1, 0xaa8a, 0xbd64, 0x0, 0x1);
        gbc.writeMem(0x9dfe, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xe8, gbc.b());
        EXPECT(0xa1, gbc.c());
        EXPECT(0xaa, gbc.d());
        EXPECT(0x8a, gbc.e());
        EXPECT(0xbd, gbc.h());
        EXPECT(0x64, gbc.l());
        EXPECT(0xced6, gbc.sp());
        EXPECT(0x9dff, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x9dfe));
        // AF 022F
        gbc.setState(0x7cbd, 0x8ef1, 0x8b80, 0xb7f1, 0x872a, 0x5ee2, 0x1, 0x1);
        gbc.writeMem(0x7cbd, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xb7, gbc.b());
        EXPECT(0xf1, gbc.c());
        EXPECT(0x87, gbc.d());
        EXPECT(0x2a, gbc.e());
        EXPECT(0x5e, gbc.h());
        EXPECT(0xe2, gbc.l());
        EXPECT(0x8ef1, gbc.sp());
        EXPECT(0x7cbe, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0230
        gbc.setState(0x8184, 0xf0b6, 0xb40, 0x4a62, 0x1db1, 0x3bad, 0x1, 0x0);
        gbc.writeMem(0x8184, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x4a, gbc.b());
        EXPECT(0x62, gbc.c());
        EXPECT(0x1d, gbc.d());
        EXPECT(0xb1, gbc.e());
        EXPECT(0x3b, gbc.h());
        EXPECT(0xad, gbc.l());
        EXPECT(0xf0b6, gbc.sp());
        EXPECT(0x8185, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x8184));
        // AF 0231
        gbc.setState(0x2c28, 0x4e6f, 0xedd0, 0x4995, 0x404e, 0x9300, 0x0, 0x1);
        gbc.writeMem(0x2c28, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x49, gbc.b());
        EXPECT(0x95, gbc.c());
        EXPECT(0x40, gbc.d());
        EXPECT(0x4e, gbc.e());
        EXPECT(0x93, gbc.h());
        EXPECT(0x0, gbc.l());
        EXPECT(0x4e6f, gbc.sp());
        EXPECT(0x2c29, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0232
        gbc.setState(0x3888, 0xde69, 0x1790, 0xfd26, 0x7769, 0xdf76, 0x1, 0x1);
        gbc.writeMem(0x3888, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xfd, gbc.b());
        EXPECT(0x26, gbc.c());
        EXPECT(0x77, gbc.d());
        EXPECT(0x69, gbc.e());
        EXPECT(0xdf, gbc.h());
        EXPECT(0x76, gbc.l());
        EXPECT(0xde69, gbc.sp());
        EXPECT(0x3889, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0233
        gbc.setState(0x420d, 0x8f1e, 0xa370, 0x9c4c, 0x2736, 0xfb2b, 0x1, 0x0);
        gbc.writeMem(0x420d, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x9c, gbc.b());
        EXPECT(0x4c, gbc.c());
        EXPECT(0x27, gbc.d());
        EXPECT(0x36, gbc.e());
        EXPECT(0xfb, gbc.h());
        EXPECT(0x2b, gbc.l());
        EXPECT(0x8f1e, gbc.sp());
        EXPECT(0x420e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0234
        gbc.setState(0x1ba6, 0xe80a, 0x6620, 0x70cb, 0x9ec4, 0x7b33, 0x1, 0x1);
        gbc.writeMem(0x1ba6, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x70, gbc.b());
        EXPECT(0xcb, gbc.c());
        EXPECT(0x9e, gbc.d());
        EXPECT(0xc4, gbc.e());
        EXPECT(0x7b, gbc.h());
        EXPECT(0x33, gbc.l());
        EXPECT(0xe80a, gbc.sp());
        EXPECT(0x1ba7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0235
        gbc.setState(0x7163, 0x2386, 0xafb0, 0x337, 0xa6e2, 0x4b70, 0x0, 0x0);
        gbc.writeMem(0x7163, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x3, gbc.b());
        EXPECT(0x37, gbc.c());
        EXPECT(0xa6, gbc.d());
        EXPECT(0xe2, gbc.e());
        EXPECT(0x4b, gbc.h());
        EXPECT(0x70, gbc.l());
        EXPECT(0x2386, gbc.sp());
        EXPECT(0x7164, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0236
        gbc.setState(0xaa7f, 0x91ea, 0xb3d0, 0x4a30, 0xde50, 0x8cc8, 0x1, 0x0);
        gbc.writeMem(0xaa7f, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x4a, gbc.b());
        EXPECT(0x30, gbc.c());
        EXPECT(0xde, gbc.d());
        EXPECT(0x50, gbc.e());
        EXPECT(0x8c, gbc.h());
        EXPECT(0xc8, gbc.l());
        EXPECT(0x91ea, gbc.sp());
        EXPECT(0xaa80, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xaa7f));
        // AF 0238
        gbc.setState(0x170, 0xb8ca, 0x2f20, 0x29e9, 0x31be, 0xa439, 0x1, 0x1);
        gbc.writeMem(0x170, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x29, gbc.b());
        EXPECT(0xe9, gbc.c());
        EXPECT(0x31, gbc.d());
        EXPECT(0xbe, gbc.e());
        EXPECT(0xa4, gbc.h());
        EXPECT(0x39, gbc.l());
        EXPECT(0xb8ca, gbc.sp());
        EXPECT(0x171, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0239
        gbc.setState(0x102a, 0x3e34, 0x150, 0x49c8, 0xf840, 0xb456, 0x0, 0x0);
        gbc.writeMem(0x102a, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x49, gbc.b());
        EXPECT(0xc8, gbc.c());
        EXPECT(0xf8, gbc.d());
        EXPECT(0x40, gbc.e());
        EXPECT(0xb4, gbc.h());
        EXPECT(0x56, gbc.l());
        EXPECT(0x3e34, gbc.sp());
        EXPECT(0x102b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 023A
        gbc.setState(0xc38f, 0x102, 0x16f0, 0xd605, 0x4897, 0x13e8, 0x1, 0x0);
        gbc.writeMem(0xc38f, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xd6, gbc.b());
        EXPECT(0x5, gbc.c());
        EXPECT(0x48, gbc.d());
        EXPECT(0x97, gbc.e());
        EXPECT(0x13, gbc.h());
        EXPECT(0xe8, gbc.l());
        EXPECT(0x102, gbc.sp());
        EXPECT(0xc390, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xc38f));
        // AF 023B
        gbc.setState(0x968d, 0xc65f, 0xcb20, 0x5e33, 0x8e24, 0x4910, 0x0, 0x1);
        gbc.writeMem(0x968d, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x5e, gbc.b());
        EXPECT(0x33, gbc.c());
        EXPECT(0x8e, gbc.d());
        EXPECT(0x24, gbc.e());
        EXPECT(0x49, gbc.h());
        EXPECT(0x10, gbc.l());
        EXPECT(0xc65f, gbc.sp());
        EXPECT(0x968e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x968d));
        // AF 023C
        gbc.setState(0x6129, 0x2330, 0x1fc0, 0x5743, 0x152e, 0xea4a, 0x1, 0x0);
        gbc.writeMem(0x6129, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x57, gbc.b());
        EXPECT(0x43, gbc.c());
        EXPECT(0x15, gbc.d());
        EXPECT(0x2e, gbc.e());
        EXPECT(0xea, gbc.h());
        EXPECT(0x4a, gbc.l());
        EXPECT(0x2330, gbc.sp());
        EXPECT(0x612a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 023D
        gbc.setState(0xe94a, 0xba0d, 0xe680, 0x4ff3, 0x163d, 0xf0d5, 0x0, 0x1);
        gbc.writeMem(0xe94a, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x4f, gbc.b());
        EXPECT(0xf3, gbc.c());
        EXPECT(0x16, gbc.d());
        EXPECT(0x3d, gbc.e());
        EXPECT(0xf0, gbc.h());
        EXPECT(0xd5, gbc.l());
        EXPECT(0xba0d, gbc.sp());
        EXPECT(0xe94b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xe94a));
        // AF 023E
        gbc.setState(0x2b85, 0x18fa, 0x7ae0, 0x56fa, 0x4378, 0x8089, 0x1, 0x1);
        gbc.writeMem(0x2b85, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x56, gbc.b());
        EXPECT(0xfa, gbc.c());
        EXPECT(0x43, gbc.d());
        EXPECT(0x78, gbc.e());
        EXPECT(0x80, gbc.h());
        EXPECT(0x89, gbc.l());
        EXPECT(0x18fa, gbc.sp());
        EXPECT(0x2b86, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 023F
        gbc.setState(0xcbbf, 0x5c79, 0xb9a0, 0x784f, 0x3daf, 0x4d20, 0x0, 0x0);
        gbc.writeMem(0xcbbf, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x78, gbc.b());
        EXPECT(0x4f, gbc.c());
        EXPECT(0x3d, gbc.d());
        EXPECT(0xaf, gbc.e());
        EXPECT(0x4d, gbc.h());
        EXPECT(0x20, gbc.l());
        EXPECT(0x5c79, gbc.sp());
        EXPECT(0xcbc0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xcbbf));
        // AF 0240
        gbc.setState(0xd695, 0xbfe0, 0x2ef0, 0xecd0, 0xc1e0, 0x235f, 0x1, 0x1);
        gbc.writeMem(0xd695, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xec, gbc.b());
        EXPECT(0xd0, gbc.c());
        EXPECT(0xc1, gbc.d());
        EXPECT(0xe0, gbc.e());
        EXPECT(0x23, gbc.h());
        EXPECT(0x5f, gbc.l());
        EXPECT(0xbfe0, gbc.sp());
        EXPECT(0xd696, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xd695));
        // AF 0241
        gbc.setState(0x8a7, 0xf57c, 0x5190, 0x897f, 0xf2da, 0x1ad1, 0x1, 0x0);
        gbc.writeMem(0x8a7, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x89, gbc.b());
        EXPECT(0x7f, gbc.c());
        EXPECT(0xf2, gbc.d());
        EXPECT(0xda, gbc.e());
        EXPECT(0x1a, gbc.h());
        EXPECT(0xd1, gbc.l());
        EXPECT(0xf57c, gbc.sp());
        EXPECT(0x8a8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0242
        gbc.setState(0x5915, 0x5251, 0x5a20, 0x511f, 0xee26, 0xbba9, 0x0, 0x1);
        gbc.writeMem(0x5915, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x51, gbc.b());
        EXPECT(0x1f, gbc.c());
        EXPECT(0xee, gbc.d());
        EXPECT(0x26, gbc.e());
        EXPECT(0xbb, gbc.h());
        EXPECT(0xa9, gbc.l());
        EXPECT(0x5251, gbc.sp());
        EXPECT(0x5916, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0243
        gbc.setState(0xc7b7, 0xf5d, 0xd020, 0x3f45, 0xb3d3, 0xcea5, 0x0, 0x1);
        gbc.writeMem(0xc7b7, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x3f, gbc.b());
        EXPECT(0x45, gbc.c());
        EXPECT(0xb3, gbc.d());
        EXPECT(0xd3, gbc.e());
        EXPECT(0xce, gbc.h());
        EXPECT(0xa5, gbc.l());
        EXPECT(0xf5d, gbc.sp());
        EXPECT(0xc7b8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xc7b7));
        // AF 0244
        gbc.setState(0x55c1, 0x9579, 0x23d0, 0x2bc0, 0xae3e, 0xd1d7, 0x0, 0x0);
        gbc.writeMem(0x55c1, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x2b, gbc.b());
        EXPECT(0xc0, gbc.c());
        EXPECT(0xae, gbc.d());
        EXPECT(0x3e, gbc.e());
        EXPECT(0xd1, gbc.h());
        EXPECT(0xd7, gbc.l());
        EXPECT(0x9579, gbc.sp());
        EXPECT(0x55c2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0245
        gbc.setState(0x5c43, 0x1812, 0x7600, 0xa6da, 0x89ee, 0xa81, 0x0, 0x1);
        gbc.writeMem(0x5c43, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xa6, gbc.b());
        EXPECT(0xda, gbc.c());
        EXPECT(0x89, gbc.d());
        EXPECT(0xee, gbc.e());
        EXPECT(0xa, gbc.h());
        EXPECT(0x81, gbc.l());
        EXPECT(0x1812, gbc.sp());
        EXPECT(0x5c44, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0246
        gbc.setState(0xbc7f, 0x63f7, 0xf260, 0x8ac, 0xa1e5, 0x7614, 0x1, 0x1);
        gbc.writeMem(0xbc7f, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x8, gbc.b());
        EXPECT(0xac, gbc.c());
        EXPECT(0xa1, gbc.d());
        EXPECT(0xe5, gbc.e());
        EXPECT(0x76, gbc.h());
        EXPECT(0x14, gbc.l());
        EXPECT(0x63f7, gbc.sp());
        EXPECT(0xbc80, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xbc7f));
        // AF 0247
        gbc.setState(0x42d6, 0xcbd4, 0xcca0, 0xda04, 0xc623, 0x1187, 0x0, 0x1);
        gbc.writeMem(0x42d6, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xda, gbc.b());
        EXPECT(0x4, gbc.c());
        EXPECT(0xc6, gbc.d());
        EXPECT(0x23, gbc.e());
        EXPECT(0x11, gbc.h());
        EXPECT(0x87, gbc.l());
        EXPECT(0xcbd4, gbc.sp());
        EXPECT(0x42d7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0248
        gbc.setState(0x988f, 0xcb1f, 0x4130, 0x7080, 0xd4f3, 0xf8aa, 0x1, 0x0);
        gbc.writeMem(0x988f, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x70, gbc.b());
        EXPECT(0x80, gbc.c());
        EXPECT(0xd4, gbc.d());
        EXPECT(0xf3, gbc.e());
        EXPECT(0xf8, gbc.h());
        EXPECT(0xaa, gbc.l());
        EXPECT(0xcb1f, gbc.sp());
        EXPECT(0x9890, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x988f));
        // AF 0249
        gbc.setState(0x2233, 0xa71d, 0xbe10, 0xbd34, 0x5afa, 0x8131, 0x0, 0x1);
        gbc.writeMem(0x2233, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xbd, gbc.b());
        EXPECT(0x34, gbc.c());
        EXPECT(0x5a, gbc.d());
        EXPECT(0xfa, gbc.e());
        EXPECT(0x81, gbc.h());
        EXPECT(0x31, gbc.l());
        EXPECT(0xa71d, gbc.sp());
        EXPECT(0x2234, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 024A
        gbc.setState(0xa021, 0x2479, 0x2b30, 0xfc44, 0xe847, 0xdcbb, 0x1, 0x0);
        gbc.writeMem(0xa021, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xfc, gbc.b());
        EXPECT(0x44, gbc.c());
        EXPECT(0xe8, gbc.d());
        EXPECT(0x47, gbc.e());
        EXPECT(0xdc, gbc.h());
        EXPECT(0xbb, gbc.l());
        EXPECT(0x2479, gbc.sp());
        EXPECT(0xa022, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xa021));
        // AF 024B
        gbc.setState(0x3716, 0x3c1e, 0x9980, 0xbf35, 0xd394, 0x4e38, 0x1, 0x0);
        gbc.writeMem(0x3716, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xbf, gbc.b());
        EXPECT(0x35, gbc.c());
        EXPECT(0xd3, gbc.d());
        EXPECT(0x94, gbc.e());
        EXPECT(0x4e, gbc.h());
        EXPECT(0x38, gbc.l());
        EXPECT(0x3c1e, gbc.sp());
        EXPECT(0x3717, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 024C
        gbc.setState(0xc4b4, 0xee35, 0x8d20, 0xa7ca, 0x43d3, 0x550f, 0x0, 0x1);
        gbc.writeMem(0xc4b4, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xa7, gbc.b());
        EXPECT(0xca, gbc.c());
        EXPECT(0x43, gbc.d());
        EXPECT(0xd3, gbc.e());
        EXPECT(0x55, gbc.h());
        EXPECT(0xf, gbc.l());
        EXPECT(0xee35, gbc.sp());
        EXPECT(0xc4b5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xc4b4));
        // AF 024D
        gbc.setState(0x9e8, 0x93a7, 0xc910, 0xada3, 0x4a37, 0xde91, 0x1, 0x1);
        gbc.writeMem(0x9e8, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xad, gbc.b());
        EXPECT(0xa3, gbc.c());
        EXPECT(0x4a, gbc.d());
        EXPECT(0x37, gbc.e());
        EXPECT(0xde, gbc.h());
        EXPECT(0x91, gbc.l());
        EXPECT(0x93a7, gbc.sp());
        EXPECT(0x9e9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 024E
        gbc.setState(0xc6e1, 0x4681, 0xe6a0, 0x2ce4, 0x1710, 0xc60e, 0x1, 0x0);
        gbc.writeMem(0xc6e1, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x2c, gbc.b());
        EXPECT(0xe4, gbc.c());
        EXPECT(0x17, gbc.d());
        EXPECT(0x10, gbc.e());
        EXPECT(0xc6, gbc.h());
        EXPECT(0xe, gbc.l());
        EXPECT(0x4681, gbc.sp());
        EXPECT(0xc6e2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xc6e1));
        // AF 024F
        gbc.setState(0x3327, 0x55e6, 0x5ed0, 0xd77c, 0x8895, 0x1c7c, 0x0, 0x0);
        gbc.writeMem(0x3327, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xd7, gbc.b());
        EXPECT(0x7c, gbc.c());
        EXPECT(0x88, gbc.d());
        EXPECT(0x95, gbc.e());
        EXPECT(0x1c, gbc.h());
        EXPECT(0x7c, gbc.l());
        EXPECT(0x55e6, gbc.sp());
        EXPECT(0x3328, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0250
        gbc.setState(0x8db, 0x8593, 0x95b0, 0x31c6, 0x626, 0x417e, 0x0, 0x1);
        gbc.writeMem(0x8db, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x31, gbc.b());
        EXPECT(0xc6, gbc.c());
        EXPECT(0x6, gbc.d());
        EXPECT(0x26, gbc.e());
        EXPECT(0x41, gbc.h());
        EXPECT(0x7e, gbc.l());
        EXPECT(0x8593, gbc.sp());
        EXPECT(0x8dc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0251
        gbc.setState(0xf79, 0xc4e9, 0x1600, 0x4649, 0x6478, 0x5311, 0x0, 0x0);
        gbc.writeMem(0xf79, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x46, gbc.b());
        EXPECT(0x49, gbc.c());
        EXPECT(0x64, gbc.d());
        EXPECT(0x78, gbc.e());
        EXPECT(0x53, gbc.h());
        EXPECT(0x11, gbc.l());
        EXPECT(0xc4e9, gbc.sp());
        EXPECT(0xf7a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0252
        gbc.setState(0xca68, 0x67db, 0x6d00, 0xe539, 0x8cac, 0xd1fe, 0x1, 0x0);
        gbc.writeMem(0xca68, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xe5, gbc.b());
        EXPECT(0x39, gbc.c());
        EXPECT(0x8c, gbc.d());
        EXPECT(0xac, gbc.e());
        EXPECT(0xd1, gbc.h());
        EXPECT(0xfe, gbc.l());
        EXPECT(0x67db, gbc.sp());
        EXPECT(0xca69, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xca68));
        // AF 0253
        gbc.setState(0xaab8, 0x2f0d, 0xc250, 0xd241, 0xba3c, 0x91ed, 0x1, 0x0);
        gbc.writeMem(0xaab8, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xd2, gbc.b());
        EXPECT(0x41, gbc.c());
        EXPECT(0xba, gbc.d());
        EXPECT(0x3c, gbc.e());
        EXPECT(0x91, gbc.h());
        EXPECT(0xed, gbc.l());
        EXPECT(0x2f0d, gbc.sp());
        EXPECT(0xaab9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xaab8));
        // AF 0254
        gbc.setState(0xd035, 0x8c50, 0x3170, 0xfa6b, 0x8c82, 0xbf58, 0x0, 0x1);
        gbc.writeMem(0xd035, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xfa, gbc.b());
        EXPECT(0x6b, gbc.c());
        EXPECT(0x8c, gbc.d());
        EXPECT(0x82, gbc.e());
        EXPECT(0xbf, gbc.h());
        EXPECT(0x58, gbc.l());
        EXPECT(0x8c50, gbc.sp());
        EXPECT(0xd036, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xd035));
        // AF 0255
        gbc.setState(0x9aa7, 0x4b41, 0x310, 0xe28c, 0xd63e, 0x88a, 0x0, 0x0);
        gbc.writeMem(0x9aa7, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xe2, gbc.b());
        EXPECT(0x8c, gbc.c());
        EXPECT(0xd6, gbc.d());
        EXPECT(0x3e, gbc.e());
        EXPECT(0x8, gbc.h());
        EXPECT(0x8a, gbc.l());
        EXPECT(0x4b41, gbc.sp());
        EXPECT(0x9aa8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x9aa7));
        // AF 0256
        gbc.setState(0xc098, 0xe4d, 0x1b10, 0xe27, 0x843e, 0xb84f, 0x1, 0x1);
        gbc.writeMem(0xc098, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xe, gbc.b());
        EXPECT(0x27, gbc.c());
        EXPECT(0x84, gbc.d());
        EXPECT(0x3e, gbc.e());
        EXPECT(0xb8, gbc.h());
        EXPECT(0x4f, gbc.l());
        EXPECT(0xe4d, gbc.sp());
        EXPECT(0xc099, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xc098));
        // AF 0257
        gbc.setState(0xb6ca, 0x7cc3, 0x5b80, 0x4d41, 0xef3e, 0xbe53, 0x1, 0x1);
        gbc.writeMem(0xb6ca, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x4d, gbc.b());
        EXPECT(0x41, gbc.c());
        EXPECT(0xef, gbc.d());
        EXPECT(0x3e, gbc.e());
        EXPECT(0xbe, gbc.h());
        EXPECT(0x53, gbc.l());
        EXPECT(0x7cc3, gbc.sp());
        EXPECT(0xb6cb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xb6ca));
        // AF 0258
        gbc.setState(0x4df9, 0x3c76, 0x9b10, 0xfbda, 0x7e0f, 0xabd3, 0x1, 0x1);
        gbc.writeMem(0x4df9, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xfb, gbc.b());
        EXPECT(0xda, gbc.c());
        EXPECT(0x7e, gbc.d());
        EXPECT(0xf, gbc.e());
        EXPECT(0xab, gbc.h());
        EXPECT(0xd3, gbc.l());
        EXPECT(0x3c76, gbc.sp());
        EXPECT(0x4dfa, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0259
        gbc.setState(0x7499, 0xc8c4, 0x4700, 0x5490, 0x1a4c, 0x3c5d, 0x1, 0x1);
        gbc.writeMem(0x7499, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x54, gbc.b());
        EXPECT(0x90, gbc.c());
        EXPECT(0x1a, gbc.d());
        EXPECT(0x4c, gbc.e());
        EXPECT(0x3c, gbc.h());
        EXPECT(0x5d, gbc.l());
        EXPECT(0xc8c4, gbc.sp());
        EXPECT(0x749a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 025A
        gbc.setState(0x2696, 0x1c5b, 0x4db0, 0x253a, 0x2e0f, 0x9791, 0x0, 0x1);
        gbc.writeMem(0x2696, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x25, gbc.b());
        EXPECT(0x3a, gbc.c());
        EXPECT(0x2e, gbc.d());
        EXPECT(0xf, gbc.e());
        EXPECT(0x97, gbc.h());
        EXPECT(0x91, gbc.l());
        EXPECT(0x1c5b, gbc.sp());
        EXPECT(0x2697, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 025B
        gbc.setState(0xbf77, 0xeabc, 0xbcb0, 0xc78, 0xa12, 0x3e11, 0x1, 0x0);
        gbc.writeMem(0xbf77, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xc, gbc.b());
        EXPECT(0x78, gbc.c());
        EXPECT(0xa, gbc.d());
        EXPECT(0x12, gbc.e());
        EXPECT(0x3e, gbc.h());
        EXPECT(0x11, gbc.l());
        EXPECT(0xeabc, gbc.sp());
        EXPECT(0xbf78, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xbf77));
        // AF 025C
        gbc.setState(0x3b29, 0x621f, 0xc0a0, 0x44c8, 0xc74b, 0xc3b1, 0x0, 0x1);
        gbc.writeMem(0x3b29, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x44, gbc.b());
        EXPECT(0xc8, gbc.c());
        EXPECT(0xc7, gbc.d());
        EXPECT(0x4b, gbc.e());
        EXPECT(0xc3, gbc.h());
        EXPECT(0xb1, gbc.l());
        EXPECT(0x621f, gbc.sp());
        EXPECT(0x3b2a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 025D
        gbc.setState(0xb445, 0x190, 0x3c50, 0xf2c, 0x36f7, 0x8ba8, 0x0, 0x1);
        gbc.writeMem(0xb445, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xf, gbc.b());
        EXPECT(0x2c, gbc.c());
        EXPECT(0x36, gbc.d());
        EXPECT(0xf7, gbc.e());
        EXPECT(0x8b, gbc.h());
        EXPECT(0xa8, gbc.l());
        EXPECT(0x190, gbc.sp());
        EXPECT(0xb446, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xb445));
        // AF 025E
        gbc.setState(0x896b, 0xfca8, 0xefa0, 0x48f0, 0x6d3f, 0xc42d, 0x1, 0x0);
        gbc.writeMem(0x896b, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x48, gbc.b());
        EXPECT(0xf0, gbc.c());
        EXPECT(0x6d, gbc.d());
        EXPECT(0x3f, gbc.e());
        EXPECT(0xc4, gbc.h());
        EXPECT(0x2d, gbc.l());
        EXPECT(0xfca8, gbc.sp());
        EXPECT(0x896c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x896b));
        // AF 025F
        gbc.setState(0x965, 0x221c, 0x2c40, 0xc22c, 0x6ecd, 0x66c7, 0x1, 0x0);
        gbc.writeMem(0x965, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xc2, gbc.b());
        EXPECT(0x2c, gbc.c());
        EXPECT(0x6e, gbc.d());
        EXPECT(0xcd, gbc.e());
        EXPECT(0x66, gbc.h());
        EXPECT(0xc7, gbc.l());
        EXPECT(0x221c, gbc.sp());
        EXPECT(0x966, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0260
        gbc.setState(0x7faa, 0x6d23, 0xa3d0, 0x1470, 0x1e58, 0x8dc1, 0x1, 0x0);
        gbc.writeMem(0x7faa, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x14, gbc.b());
        EXPECT(0x70, gbc.c());
        EXPECT(0x1e, gbc.d());
        EXPECT(0x58, gbc.e());
        EXPECT(0x8d, gbc.h());
        EXPECT(0xc1, gbc.l());
        EXPECT(0x6d23, gbc.sp());
        EXPECT(0x7fab, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0261
        gbc.setState(0x2481, 0xf48b, 0xbcc0, 0x1cc, 0x8530, 0xa54a, 0x0, 0x1);
        gbc.writeMem(0x2481, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x1, gbc.b());
        EXPECT(0xcc, gbc.c());
        EXPECT(0x85, gbc.d());
        EXPECT(0x30, gbc.e());
        EXPECT(0xa5, gbc.h());
        EXPECT(0x4a, gbc.l());
        EXPECT(0xf48b, gbc.sp());
        EXPECT(0x2482, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0262
        gbc.setState(0x4fdb, 0xc478, 0x3d10, 0xeee, 0xea3c, 0x41f4, 0x0, 0x1);
        gbc.writeMem(0x4fdb, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xe, gbc.b());
        EXPECT(0xee, gbc.c());
        EXPECT(0xea, gbc.d());
        EXPECT(0x3c, gbc.e());
        EXPECT(0x41, gbc.h());
        EXPECT(0xf4, gbc.l());
        EXPECT(0xc478, gbc.sp());
        EXPECT(0x4fdc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0263
        gbc.setState(0x7f3f, 0x7eef, 0x3810, 0xf6cd, 0x3b13, 0xfb51, 0x0, 0x1);
        gbc.writeMem(0x7f3f, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xf6, gbc.b());
        EXPECT(0xcd, gbc.c());
        EXPECT(0x3b, gbc.d());
        EXPECT(0x13, gbc.e());
        EXPECT(0xfb, gbc.h());
        EXPECT(0x51, gbc.l());
        EXPECT(0x7eef, gbc.sp());
        EXPECT(0x7f40, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0264
        gbc.setState(0xcd0d, 0x8ba0, 0xf450, 0xb248, 0x52e9, 0x5c22, 0x1, 0x1);
        gbc.writeMem(0xcd0d, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xb2, gbc.b());
        EXPECT(0x48, gbc.c());
        EXPECT(0x52, gbc.d());
        EXPECT(0xe9, gbc.e());
        EXPECT(0x5c, gbc.h());
        EXPECT(0x22, gbc.l());
        EXPECT(0x8ba0, gbc.sp());
        EXPECT(0xcd0e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xcd0d));
        // AF 0265
        gbc.setState(0x2346, 0x30c8, 0x5100, 0x257c, 0xeb7b, 0xe263, 0x1, 0x1);
        gbc.writeMem(0x2346, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x25, gbc.b());
        EXPECT(0x7c, gbc.c());
        EXPECT(0xeb, gbc.d());
        EXPECT(0x7b, gbc.e());
        EXPECT(0xe2, gbc.h());
        EXPECT(0x63, gbc.l());
        EXPECT(0x30c8, gbc.sp());
        EXPECT(0x2347, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0266
        gbc.setState(0xf95, 0x8823, 0xc50, 0xa86, 0xc7cf, 0xd58c, 0x0, 0x1);
        gbc.writeMem(0xf95, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xa, gbc.b());
        EXPECT(0x86, gbc.c());
        EXPECT(0xc7, gbc.d());
        EXPECT(0xcf, gbc.e());
        EXPECT(0xd5, gbc.h());
        EXPECT(0x8c, gbc.l());
        EXPECT(0x8823, gbc.sp());
        EXPECT(0xf96, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0267
        gbc.setState(0xc6f6, 0x9259, 0x1420, 0xe245, 0x20a4, 0x78d4, 0x1, 0x1);
        gbc.writeMem(0xc6f6, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xe2, gbc.b());
        EXPECT(0x45, gbc.c());
        EXPECT(0x20, gbc.d());
        EXPECT(0xa4, gbc.e());
        EXPECT(0x78, gbc.h());
        EXPECT(0xd4, gbc.l());
        EXPECT(0x9259, gbc.sp());
        EXPECT(0xc6f7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xc6f6));
        // AF 0268
        gbc.setState(0x48b7, 0x8ed2, 0xfdb0, 0x6d0e, 0x2966, 0x80c0, 0x1, 0x1);
        gbc.writeMem(0x48b7, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x6d, gbc.b());
        EXPECT(0xe, gbc.c());
        EXPECT(0x29, gbc.d());
        EXPECT(0x66, gbc.e());
        EXPECT(0x80, gbc.h());
        EXPECT(0xc0, gbc.l());
        EXPECT(0x8ed2, gbc.sp());
        EXPECT(0x48b8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0269
        gbc.setState(0x2e2, 0x456, 0x6610, 0xde50, 0x5e4f, 0x2e58, 0x0, 0x1);
        gbc.writeMem(0x2e2, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xde, gbc.b());
        EXPECT(0x50, gbc.c());
        EXPECT(0x5e, gbc.d());
        EXPECT(0x4f, gbc.e());
        EXPECT(0x2e, gbc.h());
        EXPECT(0x58, gbc.l());
        EXPECT(0x456, gbc.sp());
        EXPECT(0x2e3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 026A
        gbc.setState(0x3b5f, 0xb286, 0x2ef0, 0x70e1, 0x1d7f, 0x4fce, 0x1, 0x0);
        gbc.writeMem(0x3b5f, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x70, gbc.b());
        EXPECT(0xe1, gbc.c());
        EXPECT(0x1d, gbc.d());
        EXPECT(0x7f, gbc.e());
        EXPECT(0x4f, gbc.h());
        EXPECT(0xce, gbc.l());
        EXPECT(0xb286, gbc.sp());
        EXPECT(0x3b60, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 026B
        gbc.setState(0x7e43, 0xdafc, 0x360, 0xd932, 0x2b6e, 0x43d2, 0x1, 0x0);
        gbc.writeMem(0x7e43, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xd9, gbc.b());
        EXPECT(0x32, gbc.c());
        EXPECT(0x2b, gbc.d());
        EXPECT(0x6e, gbc.e());
        EXPECT(0x43, gbc.h());
        EXPECT(0xd2, gbc.l());
        EXPECT(0xdafc, gbc.sp());
        EXPECT(0x7e44, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 026C
        gbc.setState(0x6cfa, 0x6836, 0x33e0, 0xa130, 0x3579, 0x403d, 0x1, 0x1);
        gbc.writeMem(0x6cfa, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xa1, gbc.b());
        EXPECT(0x30, gbc.c());
        EXPECT(0x35, gbc.d());
        EXPECT(0x79, gbc.e());
        EXPECT(0x40, gbc.h());
        EXPECT(0x3d, gbc.l());
        EXPECT(0x6836, gbc.sp());
        EXPECT(0x6cfb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 026D
        gbc.setState(0x200, 0xb075, 0x5900, 0xab6d, 0x3f3, 0xf8be, 0x1, 0x0);
        gbc.writeMem(0x200, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xab, gbc.b());
        EXPECT(0x6d, gbc.c());
        EXPECT(0x3, gbc.d());
        EXPECT(0xf3, gbc.e());
        EXPECT(0xf8, gbc.h());
        EXPECT(0xbe, gbc.l());
        EXPECT(0xb075, gbc.sp());
        EXPECT(0x201, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 026E
        gbc.setState(0x6aaa, 0x606, 0x22e0, 0x3b5f, 0x925e, 0xbc22, 0x1, 0x0);
        gbc.writeMem(0x6aaa, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x3b, gbc.b());
        EXPECT(0x5f, gbc.c());
        EXPECT(0x92, gbc.d());
        EXPECT(0x5e, gbc.e());
        EXPECT(0xbc, gbc.h());
        EXPECT(0x22, gbc.l());
        EXPECT(0x606, gbc.sp());
        EXPECT(0x6aab, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 026F
        gbc.setState(0x9dda, 0x39a, 0xa880, 0xd193, 0xbc37, 0x21d8, 0x0, 0x1);
        gbc.writeMem(0x9dda, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xd1, gbc.b());
        EXPECT(0x93, gbc.c());
        EXPECT(0xbc, gbc.d());
        EXPECT(0x37, gbc.e());
        EXPECT(0x21, gbc.h());
        EXPECT(0xd8, gbc.l());
        EXPECT(0x39a, gbc.sp());
        EXPECT(0x9ddb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x9dda));
        // AF 0270
        gbc.setState(0x18cd, 0x7e57, 0xf4b0, 0xef4d, 0xdc50, 0x3980, 0x1, 0x0);
        gbc.writeMem(0x18cd, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xef, gbc.b());
        EXPECT(0x4d, gbc.c());
        EXPECT(0xdc, gbc.d());
        EXPECT(0x50, gbc.e());
        EXPECT(0x39, gbc.h());
        EXPECT(0x80, gbc.l());
        EXPECT(0x7e57, gbc.sp());
        EXPECT(0x18ce, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0271
        gbc.setState(0x66c1, 0x7e7, 0x6f20, 0xa29b, 0xc8c1, 0x750d, 0x0, 0x0);
        gbc.writeMem(0x66c1, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xa2, gbc.b());
        EXPECT(0x9b, gbc.c());
        EXPECT(0xc8, gbc.d());
        EXPECT(0xc1, gbc.e());
        EXPECT(0x75, gbc.h());
        EXPECT(0xd, gbc.l());
        EXPECT(0x7e7, gbc.sp());
        EXPECT(0x66c2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0272
        gbc.setState(0x5351, 0x2078, 0x2440, 0xdc2a, 0xab73, 0xf80f, 0x0, 0x1);
        gbc.writeMem(0x5351, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xdc, gbc.b());
        EXPECT(0x2a, gbc.c());
        EXPECT(0xab, gbc.d());
        EXPECT(0x73, gbc.e());
        EXPECT(0xf8, gbc.h());
        EXPECT(0xf, gbc.l());
        EXPECT(0x2078, gbc.sp());
        EXPECT(0x5352, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0273
        gbc.setState(0xe9d, 0x1aed, 0x19c0, 0x7282, 0x9bc3, 0x7853, 0x1, 0x0);
        gbc.writeMem(0xe9d, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x72, gbc.b());
        EXPECT(0x82, gbc.c());
        EXPECT(0x9b, gbc.d());
        EXPECT(0xc3, gbc.e());
        EXPECT(0x78, gbc.h());
        EXPECT(0x53, gbc.l());
        EXPECT(0x1aed, gbc.sp());
        EXPECT(0xe9e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0274
        gbc.setState(0x38c4, 0x201f, 0x5080, 0xe2c0, 0x7d1e, 0xa1fa, 0x0, 0x1);
        gbc.writeMem(0x38c4, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xe2, gbc.b());
        EXPECT(0xc0, gbc.c());
        EXPECT(0x7d, gbc.d());
        EXPECT(0x1e, gbc.e());
        EXPECT(0xa1, gbc.h());
        EXPECT(0xfa, gbc.l());
        EXPECT(0x201f, gbc.sp());
        EXPECT(0x38c5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0275
        gbc.setState(0x7f2b, 0x43a2, 0x3100, 0x53be, 0x959e, 0xb982, 0x1, 0x1);
        gbc.writeMem(0x7f2b, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x53, gbc.b());
        EXPECT(0xbe, gbc.c());
        EXPECT(0x95, gbc.d());
        EXPECT(0x9e, gbc.e());
        EXPECT(0xb9, gbc.h());
        EXPECT(0x82, gbc.l());
        EXPECT(0x43a2, gbc.sp());
        EXPECT(0x7f2c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0277
        gbc.setState(0xe9ca, 0x5b24, 0xaa80, 0x6894, 0x8c0e, 0x5000, 0x1, 0x1);
        gbc.writeMem(0xe9ca, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x68, gbc.b());
        EXPECT(0x94, gbc.c());
        EXPECT(0x8c, gbc.d());
        EXPECT(0xe, gbc.e());
        EXPECT(0x50, gbc.h());
        EXPECT(0x0, gbc.l());
        EXPECT(0x5b24, gbc.sp());
        EXPECT(0xe9cb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xe9ca));
        // AF 0278
        gbc.setState(0x69, 0x3f3f, 0xdda0, 0x9083, 0x3341, 0xfc13, 0x0, 0x0);
        gbc.writeMem(0x69, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x90, gbc.b());
        EXPECT(0x83, gbc.c());
        EXPECT(0x33, gbc.d());
        EXPECT(0x41, gbc.e());
        EXPECT(0xfc, gbc.h());
        EXPECT(0x13, gbc.l());
        EXPECT(0x3f3f, gbc.sp());
        EXPECT(0x6a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0279
        gbc.setState(0xbcd6, 0xa005, 0xf160, 0x6399, 0x3845, 0x5633, 0x1, 0x1);
        gbc.writeMem(0xbcd6, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x63, gbc.b());
        EXPECT(0x99, gbc.c());
        EXPECT(0x38, gbc.d());
        EXPECT(0x45, gbc.e());
        EXPECT(0x56, gbc.h());
        EXPECT(0x33, gbc.l());
        EXPECT(0xa005, gbc.sp());
        EXPECT(0xbcd7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xbcd6));
        // AF 027A
        gbc.setState(0x6d65, 0x7d25, 0x9970, 0xe26e, 0x574c, 0xdcad, 0x0, 0x0);
        gbc.writeMem(0x6d65, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xe2, gbc.b());
        EXPECT(0x6e, gbc.c());
        EXPECT(0x57, gbc.d());
        EXPECT(0x4c, gbc.e());
        EXPECT(0xdc, gbc.h());
        EXPECT(0xad, gbc.l());
        EXPECT(0x7d25, gbc.sp());
        EXPECT(0x6d66, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 027B
        gbc.setState(0x93f0, 0xab33, 0xbba0, 0x775c, 0x65a7, 0x2f9e, 0x0, 0x1);
        gbc.writeMem(0x93f0, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x77, gbc.b());
        EXPECT(0x5c, gbc.c());
        EXPECT(0x65, gbc.d());
        EXPECT(0xa7, gbc.e());
        EXPECT(0x2f, gbc.h());
        EXPECT(0x9e, gbc.l());
        EXPECT(0xab33, gbc.sp());
        EXPECT(0x93f1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x93f0));
        // AF 027C
        gbc.setState(0x74d7, 0x3ce2, 0xe110, 0x24da, 0xe01c, 0xd754, 0x0, 0x0);
        gbc.writeMem(0x74d7, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x24, gbc.b());
        EXPECT(0xda, gbc.c());
        EXPECT(0xe0, gbc.d());
        EXPECT(0x1c, gbc.e());
        EXPECT(0xd7, gbc.h());
        EXPECT(0x54, gbc.l());
        EXPECT(0x3ce2, gbc.sp());
        EXPECT(0x74d8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 027D
        gbc.setState(0x35aa, 0xefe5, 0xf760, 0x8ec3, 0xa33b, 0x503e, 0x1, 0x1);
        gbc.writeMem(0x35aa, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x8e, gbc.b());
        EXPECT(0xc3, gbc.c());
        EXPECT(0xa3, gbc.d());
        EXPECT(0x3b, gbc.e());
        EXPECT(0x50, gbc.h());
        EXPECT(0x3e, gbc.l());
        EXPECT(0xefe5, gbc.sp());
        EXPECT(0x35ab, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 027E
        gbc.setState(0x1353, 0xc4af, 0xf2a0, 0x33e4, 0x88b0, 0x213c, 0x1, 0x0);
        gbc.writeMem(0x1353, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x33, gbc.b());
        EXPECT(0xe4, gbc.c());
        EXPECT(0x88, gbc.d());
        EXPECT(0xb0, gbc.e());
        EXPECT(0x21, gbc.h());
        EXPECT(0x3c, gbc.l());
        EXPECT(0xc4af, gbc.sp());
        EXPECT(0x1354, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 027F
        gbc.setState(0xde41, 0xcfa9, 0x9350, 0xf91, 0x4b36, 0xbdb4, 0x1, 0x0);
        gbc.writeMem(0xde41, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xf, gbc.b());
        EXPECT(0x91, gbc.c());
        EXPECT(0x4b, gbc.d());
        EXPECT(0x36, gbc.e());
        EXPECT(0xbd, gbc.h());
        EXPECT(0xb4, gbc.l());
        EXPECT(0xcfa9, gbc.sp());
        EXPECT(0xde42, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xde41));
        // AF 0280
        gbc.setState(0x380, 0xf263, 0x8c80, 0x8ff9, 0x3751, 0x95a3, 0x1, 0x0);
        gbc.writeMem(0x380, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x8f, gbc.b());
        EXPECT(0xf9, gbc.c());
        EXPECT(0x37, gbc.d());
        EXPECT(0x51, gbc.e());
        EXPECT(0x95, gbc.h());
        EXPECT(0xa3, gbc.l());
        EXPECT(0xf263, gbc.sp());
        EXPECT(0x381, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0281
        gbc.setState(0x4d60, 0xe9f9, 0x5e40, 0x57cf, 0x4793, 0x7529, 0x0, 0x1);
        gbc.writeMem(0x4d60, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x57, gbc.b());
        EXPECT(0xcf, gbc.c());
        EXPECT(0x47, gbc.d());
        EXPECT(0x93, gbc.e());
        EXPECT(0x75, gbc.h());
        EXPECT(0x29, gbc.l());
        EXPECT(0xe9f9, gbc.sp());
        EXPECT(0x4d61, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0282
        gbc.setState(0x5a42, 0x78ad, 0x29c0, 0xcb62, 0x21ec, 0x49d2, 0x1, 0x0);
        gbc.writeMem(0x5a42, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xcb, gbc.b());
        EXPECT(0x62, gbc.c());
        EXPECT(0x21, gbc.d());
        EXPECT(0xec, gbc.e());
        EXPECT(0x49, gbc.h());
        EXPECT(0xd2, gbc.l());
        EXPECT(0x78ad, gbc.sp());
        EXPECT(0x5a43, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0283
        gbc.setState(0xaea6, 0x575a, 0x3fc0, 0xb81d, 0xfc3c, 0xd0a6, 0x0, 0x1);
        gbc.writeMem(0xaea6, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xb8, gbc.b());
        EXPECT(0x1d, gbc.c());
        EXPECT(0xfc, gbc.d());
        EXPECT(0x3c, gbc.e());
        EXPECT(0xd0, gbc.h());
        EXPECT(0xa6, gbc.l());
        EXPECT(0x575a, gbc.sp());
        EXPECT(0xaea7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xaea6));
        // AF 0284
        gbc.setState(0x675c, 0xaf8d, 0x9ce0, 0xf102, 0xf5e7, 0x512f, 0x0, 0x0);
        gbc.writeMem(0x675c, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xf1, gbc.b());
        EXPECT(0x2, gbc.c());
        EXPECT(0xf5, gbc.d());
        EXPECT(0xe7, gbc.e());
        EXPECT(0x51, gbc.h());
        EXPECT(0x2f, gbc.l());
        EXPECT(0xaf8d, gbc.sp());
        EXPECT(0x675d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0285
        gbc.setState(0xf92, 0x77e4, 0xfc90, 0x5578, 0xfd21, 0x2ca1, 0x0, 0x0);
        gbc.writeMem(0xf92, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x55, gbc.b());
        EXPECT(0x78, gbc.c());
        EXPECT(0xfd, gbc.d());
        EXPECT(0x21, gbc.e());
        EXPECT(0x2c, gbc.h());
        EXPECT(0xa1, gbc.l());
        EXPECT(0x77e4, gbc.sp());
        EXPECT(0xf93, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0286
        gbc.setState(0x7f43, 0x64f7, 0x8ca0, 0x547e, 0x17f6, 0x631d, 0x0, 0x1);
        gbc.writeMem(0x7f43, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x54, gbc.b());
        EXPECT(0x7e, gbc.c());
        EXPECT(0x17, gbc.d());
        EXPECT(0xf6, gbc.e());
        EXPECT(0x63, gbc.h());
        EXPECT(0x1d, gbc.l());
        EXPECT(0x64f7, gbc.sp());
        EXPECT(0x7f44, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0287
        gbc.setState(0x6144, 0x288c, 0xda50, 0xf168, 0x8f45, 0x2457, 0x0, 0x1);
        gbc.writeMem(0x6144, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xf1, gbc.b());
        EXPECT(0x68, gbc.c());
        EXPECT(0x8f, gbc.d());
        EXPECT(0x45, gbc.e());
        EXPECT(0x24, gbc.h());
        EXPECT(0x57, gbc.l());
        EXPECT(0x288c, gbc.sp());
        EXPECT(0x6145, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0288
        gbc.setState(0xd283, 0x78c9, 0x9bd0, 0x77, 0x76cb, 0xcc01, 0x1, 0x0);
        gbc.writeMem(0xd283, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x0, gbc.b());
        EXPECT(0x77, gbc.c());
        EXPECT(0x76, gbc.d());
        EXPECT(0xcb, gbc.e());
        EXPECT(0xcc, gbc.h());
        EXPECT(0x1, gbc.l());
        EXPECT(0x78c9, gbc.sp());
        EXPECT(0xd284, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xd283));
        // AF 0289
        gbc.setState(0xd5b3, 0x8fa9, 0x4af0, 0x9a75, 0x7d15, 0x9e57, 0x1, 0x1);
        gbc.writeMem(0xd5b3, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x9a, gbc.b());
        EXPECT(0x75, gbc.c());
        EXPECT(0x7d, gbc.d());
        EXPECT(0x15, gbc.e());
        EXPECT(0x9e, gbc.h());
        EXPECT(0x57, gbc.l());
        EXPECT(0x8fa9, gbc.sp());
        EXPECT(0xd5b4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xd5b3));
        // AF 028A
        gbc.setState(0x17a7, 0xcb5, 0xa940, 0x6ac0, 0x9056, 0xf3cf, 0x1, 0x0);
        gbc.writeMem(0x17a7, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x6a, gbc.b());
        EXPECT(0xc0, gbc.c());
        EXPECT(0x90, gbc.d());
        EXPECT(0x56, gbc.e());
        EXPECT(0xf3, gbc.h());
        EXPECT(0xcf, gbc.l());
        EXPECT(0xcb5, gbc.sp());
        EXPECT(0x17a8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 028B
        gbc.setState(0x4557, 0xa918, 0xaf90, 0x4141, 0x1ee4, 0xddf4, 0x1, 0x0);
        gbc.writeMem(0x4557, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x41, gbc.b());
        EXPECT(0x41, gbc.c());
        EXPECT(0x1e, gbc.d());
        EXPECT(0xe4, gbc.e());
        EXPECT(0xdd, gbc.h());
        EXPECT(0xf4, gbc.l());
        EXPECT(0xa918, gbc.sp());
        EXPECT(0x4558, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 028C
        gbc.setState(0x1ccd, 0x3892, 0x6cb0, 0x5271, 0xeba9, 0x24d6, 0x0, 0x0);
        gbc.writeMem(0x1ccd, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x52, gbc.b());
        EXPECT(0x71, gbc.c());
        EXPECT(0xeb, gbc.d());
        EXPECT(0xa9, gbc.e());
        EXPECT(0x24, gbc.h());
        EXPECT(0xd6, gbc.l());
        EXPECT(0x3892, gbc.sp());
        EXPECT(0x1cce, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 028D
        gbc.setState(0xba80, 0xa09d, 0xf2c0, 0x1ec7, 0x7121, 0xae79, 0x1, 0x1);
        gbc.writeMem(0xba80, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x1e, gbc.b());
        EXPECT(0xc7, gbc.c());
        EXPECT(0x71, gbc.d());
        EXPECT(0x21, gbc.e());
        EXPECT(0xae, gbc.h());
        EXPECT(0x79, gbc.l());
        EXPECT(0xa09d, gbc.sp());
        EXPECT(0xba81, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xba80));
        // AF 028E
        gbc.setState(0xb90f, 0x7676, 0xa7e0, 0x51a8, 0x551d, 0x4d57, 0x0, 0x1);
        gbc.writeMem(0xb90f, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x51, gbc.b());
        EXPECT(0xa8, gbc.c());
        EXPECT(0x55, gbc.d());
        EXPECT(0x1d, gbc.e());
        EXPECT(0x4d, gbc.h());
        EXPECT(0x57, gbc.l());
        EXPECT(0x7676, gbc.sp());
        EXPECT(0xb910, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xb90f));
        // AF 0290
        gbc.setState(0xdbbc, 0x8557, 0x90a0, 0x634, 0x5db6, 0x719, 0x0, 0x0);
        gbc.writeMem(0xdbbc, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x6, gbc.b());
        EXPECT(0x34, gbc.c());
        EXPECT(0x5d, gbc.d());
        EXPECT(0xb6, gbc.e());
        EXPECT(0x7, gbc.h());
        EXPECT(0x19, gbc.l());
        EXPECT(0x8557, gbc.sp());
        EXPECT(0xdbbd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xdbbc));
        // AF 0291
        gbc.setState(0xbeaa, 0x370c, 0x3880, 0x3b19, 0x5209, 0x2d64, 0x0, 0x1);
        gbc.writeMem(0xbeaa, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x3b, gbc.b());
        EXPECT(0x19, gbc.c());
        EXPECT(0x52, gbc.d());
        EXPECT(0x9, gbc.e());
        EXPECT(0x2d, gbc.h());
        EXPECT(0x64, gbc.l());
        EXPECT(0x370c, gbc.sp());
        EXPECT(0xbeab, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xbeaa));
        // AF 0292
        gbc.setState(0x9968, 0x5557, 0x4700, 0x88f2, 0x1d40, 0x916c, 0x0, 0x0);
        gbc.writeMem(0x9968, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x88, gbc.b());
        EXPECT(0xf2, gbc.c());
        EXPECT(0x1d, gbc.d());
        EXPECT(0x40, gbc.e());
        EXPECT(0x91, gbc.h());
        EXPECT(0x6c, gbc.l());
        EXPECT(0x5557, gbc.sp());
        EXPECT(0x9969, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x9968));
        // AF 0293
        gbc.setState(0x8ee2, 0x7237, 0xe900, 0xf00c, 0x642, 0x7922, 0x1, 0x0);
        gbc.writeMem(0x8ee2, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xf0, gbc.b());
        EXPECT(0xc, gbc.c());
        EXPECT(0x6, gbc.d());
        EXPECT(0x42, gbc.e());
        EXPECT(0x79, gbc.h());
        EXPECT(0x22, gbc.l());
        EXPECT(0x7237, gbc.sp());
        EXPECT(0x8ee3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x8ee2));
        // AF 0294
        gbc.setState(0xb343, 0x6761, 0xa480, 0x196, 0xe163, 0xd3e3, 0x0, 0x1);
        gbc.writeMem(0xb343, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x1, gbc.b());
        EXPECT(0x96, gbc.c());
        EXPECT(0xe1, gbc.d());
        EXPECT(0x63, gbc.e());
        EXPECT(0xd3, gbc.h());
        EXPECT(0xe3, gbc.l());
        EXPECT(0x6761, gbc.sp());
        EXPECT(0xb344, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xb343));
        // AF 0295
        gbc.setState(0x74de, 0x2f53, 0x4f60, 0x393f, 0x6c33, 0xc52d, 0x1, 0x1);
        gbc.writeMem(0x74de, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x39, gbc.b());
        EXPECT(0x3f, gbc.c());
        EXPECT(0x6c, gbc.d());
        EXPECT(0x33, gbc.e());
        EXPECT(0xc5, gbc.h());
        EXPECT(0x2d, gbc.l());
        EXPECT(0x2f53, gbc.sp());
        EXPECT(0x74df, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0296
        gbc.setState(0xc24c, 0x3a0d, 0xc60, 0xc1ab, 0x5fbc, 0xb3a5, 0x1, 0x0);
        gbc.writeMem(0xc24c, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xc1, gbc.b());
        EXPECT(0xab, gbc.c());
        EXPECT(0x5f, gbc.d());
        EXPECT(0xbc, gbc.e());
        EXPECT(0xb3, gbc.h());
        EXPECT(0xa5, gbc.l());
        EXPECT(0x3a0d, gbc.sp());
        EXPECT(0xc24d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xc24c));
        // AF 0297
        gbc.setState(0xae3, 0x11c5, 0x1090, 0x896b, 0x1ed, 0xd753, 0x0, 0x0);
        gbc.writeMem(0xae3, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x89, gbc.b());
        EXPECT(0x6b, gbc.c());
        EXPECT(0x1, gbc.d());
        EXPECT(0xed, gbc.e());
        EXPECT(0xd7, gbc.h());
        EXPECT(0x53, gbc.l());
        EXPECT(0x11c5, gbc.sp());
        EXPECT(0xae4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0298
        gbc.setState(0x4acf, 0x8f1e, 0x3630, 0xc269, 0x1f5, 0x9d02, 0x1, 0x1);
        gbc.writeMem(0x4acf, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xc2, gbc.b());
        EXPECT(0x69, gbc.c());
        EXPECT(0x1, gbc.d());
        EXPECT(0xf5, gbc.e());
        EXPECT(0x9d, gbc.h());
        EXPECT(0x2, gbc.l());
        EXPECT(0x8f1e, gbc.sp());
        EXPECT(0x4ad0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0299
        gbc.setState(0x39df, 0x7c73, 0xd250, 0xeb74, 0xf14d, 0x580c, 0x1, 0x0);
        gbc.writeMem(0x39df, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xeb, gbc.b());
        EXPECT(0x74, gbc.c());
        EXPECT(0xf1, gbc.d());
        EXPECT(0x4d, gbc.e());
        EXPECT(0x58, gbc.h());
        EXPECT(0xc, gbc.l());
        EXPECT(0x7c73, gbc.sp());
        EXPECT(0x39e0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 029A
        gbc.setState(0x16f1, 0xed00, 0x1cc0, 0xdbf2, 0xc5db, 0x3ed0, 0x0, 0x0);
        gbc.writeMem(0x16f1, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xdb, gbc.b());
        EXPECT(0xf2, gbc.c());
        EXPECT(0xc5, gbc.d());
        EXPECT(0xdb, gbc.e());
        EXPECT(0x3e, gbc.h());
        EXPECT(0xd0, gbc.l());
        EXPECT(0xed00, gbc.sp());
        EXPECT(0x16f2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 029C
        gbc.setState(0x55a5, 0x2956, 0xb4c0, 0x70d4, 0x8523, 0xc274, 0x0, 0x0);
        gbc.writeMem(0x55a5, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x70, gbc.b());
        EXPECT(0xd4, gbc.c());
        EXPECT(0x85, gbc.d());
        EXPECT(0x23, gbc.e());
        EXPECT(0xc2, gbc.h());
        EXPECT(0x74, gbc.l());
        EXPECT(0x2956, gbc.sp());
        EXPECT(0x55a6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 029D
        gbc.setState(0x3138, 0x60cb, 0x1cc0, 0xdd01, 0x2233, 0xb69d, 0x1, 0x0);
        gbc.writeMem(0x3138, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xdd, gbc.b());
        EXPECT(0x1, gbc.c());
        EXPECT(0x22, gbc.d());
        EXPECT(0x33, gbc.e());
        EXPECT(0xb6, gbc.h());
        EXPECT(0x9d, gbc.l());
        EXPECT(0x60cb, gbc.sp());
        EXPECT(0x3139, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 029E
        gbc.setState(0xb29b, 0xc9c2, 0xfc80, 0xb157, 0xfe5b, 0xa86, 0x0, 0x0);
        gbc.writeMem(0xb29b, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xb1, gbc.b());
        EXPECT(0x57, gbc.c());
        EXPECT(0xfe, gbc.d());
        EXPECT(0x5b, gbc.e());
        EXPECT(0xa, gbc.h());
        EXPECT(0x86, gbc.l());
        EXPECT(0xc9c2, gbc.sp());
        EXPECT(0xb29c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xb29b));
        // AF 029F
        gbc.setState(0x7463, 0x3576, 0x6050, 0xd05c, 0x767e, 0xe952, 0x0, 0x1);
        gbc.writeMem(0x7463, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xd0, gbc.b());
        EXPECT(0x5c, gbc.c());
        EXPECT(0x76, gbc.d());
        EXPECT(0x7e, gbc.e());
        EXPECT(0xe9, gbc.h());
        EXPECT(0x52, gbc.l());
        EXPECT(0x3576, gbc.sp());
        EXPECT(0x7464, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 02A0
        gbc.setState(0x4df3, 0x661e, 0x6610, 0x9e82, 0xe1a0, 0x46c6, 0x0, 0x0);
        gbc.writeMem(0x4df3, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x9e, gbc.b());
        EXPECT(0x82, gbc.c());
        EXPECT(0xe1, gbc.d());
        EXPECT(0xa0, gbc.e());
        EXPECT(0x46, gbc.h());
        EXPECT(0xc6, gbc.l());
        EXPECT(0x661e, gbc.sp());
        EXPECT(0x4df4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 02A1
        gbc.setState(0x22af, 0xf29c, 0x3f60, 0x7767, 0xbb37, 0x577c, 0x1, 0x0);
        gbc.writeMem(0x22af, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x77, gbc.b());
        EXPECT(0x67, gbc.c());
        EXPECT(0xbb, gbc.d());
        EXPECT(0x37, gbc.e());
        EXPECT(0x57, gbc.h());
        EXPECT(0x7c, gbc.l());
        EXPECT(0xf29c, gbc.sp());
        EXPECT(0x22b0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 02A2
        gbc.setState(0x42f0, 0xffb0, 0xa740, 0xa297, 0xae9f, 0xe2d8, 0x0, 0x0);
        gbc.writeMem(0x42f0, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xa2, gbc.b());
        EXPECT(0x97, gbc.c());
        EXPECT(0xae, gbc.d());
        EXPECT(0x9f, gbc.e());
        EXPECT(0xe2, gbc.h());
        EXPECT(0xd8, gbc.l());
        EXPECT(0xffb0, gbc.sp());
        EXPECT(0x42f1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 02A3
        gbc.setState(0xd17b, 0x16a6, 0xb4e0, 0x4fb, 0x420a, 0x7e5e, 0x0, 0x0);
        gbc.writeMem(0xd17b, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x4, gbc.b());
        EXPECT(0xfb, gbc.c());
        EXPECT(0x42, gbc.d());
        EXPECT(0xa, gbc.e());
        EXPECT(0x7e, gbc.h());
        EXPECT(0x5e, gbc.l());
        EXPECT(0x16a6, gbc.sp());
        EXPECT(0xd17c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xd17b));
        // AF 02A4
        gbc.setState(0x7625, 0x9d9e, 0x47d0, 0xc019, 0x90ed, 0x5448, 0x0, 0x0);
        gbc.writeMem(0x7625, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xc0, gbc.b());
        EXPECT(0x19, gbc.c());
        EXPECT(0x90, gbc.d());
        EXPECT(0xed, gbc.e());
        EXPECT(0x54, gbc.h());
        EXPECT(0x48, gbc.l());
        EXPECT(0x9d9e, gbc.sp());
        EXPECT(0x7626, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 02A5
        gbc.setState(0xe230, 0x97f2, 0xac20, 0x23fe, 0xedc0, 0xcc93, 0x1, 0x1);
        gbc.writeMem(0xe230, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x23, gbc.b());
        EXPECT(0xfe, gbc.c());
        EXPECT(0xed, gbc.d());
        EXPECT(0xc0, gbc.e());
        EXPECT(0xcc, gbc.h());
        EXPECT(0x93, gbc.l());
        EXPECT(0x97f2, gbc.sp());
        EXPECT(0xe231, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xe230));
        // AF 02A6
        gbc.setState(0x76d8, 0x42d3, 0xba20, 0x8630, 0xa1d, 0x6bfa, 0x0, 0x1);
        gbc.writeMem(0x76d8, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x86, gbc.b());
        EXPECT(0x30, gbc.c());
        EXPECT(0xa, gbc.d());
        EXPECT(0x1d, gbc.e());
        EXPECT(0x6b, gbc.h());
        EXPECT(0xfa, gbc.l());
        EXPECT(0x42d3, gbc.sp());
        EXPECT(0x76d9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 02A7
        gbc.setState(0xbeba, 0x5654, 0xd910, 0x2609, 0xe68c, 0x812b, 0x1, 0x1);
        gbc.writeMem(0xbeba, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x26, gbc.b());
        EXPECT(0x9, gbc.c());
        EXPECT(0xe6, gbc.d());
        EXPECT(0x8c, gbc.e());
        EXPECT(0x81, gbc.h());
        EXPECT(0x2b, gbc.l());
        EXPECT(0x5654, gbc.sp());
        EXPECT(0xbebb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xbeba));
        // AF 02A8
        gbc.setState(0xa570, 0x7430, 0x8760, 0xdfcf, 0xf6a9, 0x1ef7, 0x1, 0x0);
        gbc.writeMem(0xa570, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xdf, gbc.b());
        EXPECT(0xcf, gbc.c());
        EXPECT(0xf6, gbc.d());
        EXPECT(0xa9, gbc.e());
        EXPECT(0x1e, gbc.h());
        EXPECT(0xf7, gbc.l());
        EXPECT(0x7430, gbc.sp());
        EXPECT(0xa571, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xa570));
        // AF 02A9
        gbc.setState(0x28f7, 0xf9bd, 0xb950, 0xe7bf, 0x38b8, 0xf83a, 0x1, 0x0);
        gbc.writeMem(0x28f7, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xe7, gbc.b());
        EXPECT(0xbf, gbc.c());
        EXPECT(0x38, gbc.d());
        EXPECT(0xb8, gbc.e());
        EXPECT(0xf8, gbc.h());
        EXPECT(0x3a, gbc.l());
        EXPECT(0xf9bd, gbc.sp());
        EXPECT(0x28f8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 02AA
        gbc.setState(0xe423, 0x8001, 0xdf90, 0x41af, 0x48ae, 0x975b, 0x1, 0x1);
        gbc.writeMem(0xe423, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x41, gbc.b());
        EXPECT(0xaf, gbc.c());
        EXPECT(0x48, gbc.d());
        EXPECT(0xae, gbc.e());
        EXPECT(0x97, gbc.h());
        EXPECT(0x5b, gbc.l());
        EXPECT(0x8001, gbc.sp());
        EXPECT(0xe424, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xe423));
        // AF 02AB
        gbc.setState(0x1d5e, 0xd50f, 0x3b30, 0xf52, 0xc3b8, 0x3fe3, 0x1, 0x1);
        gbc.writeMem(0x1d5e, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xf, gbc.b());
        EXPECT(0x52, gbc.c());
        EXPECT(0xc3, gbc.d());
        EXPECT(0xb8, gbc.e());
        EXPECT(0x3f, gbc.h());
        EXPECT(0xe3, gbc.l());
        EXPECT(0xd50f, gbc.sp());
        EXPECT(0x1d5f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 02AC
        gbc.setState(0x5a3b, 0x4847, 0x1920, 0xa2da, 0x5ec7, 0x5c5e, 0x1, 0x0);
        gbc.writeMem(0x5a3b, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xa2, gbc.b());
        EXPECT(0xda, gbc.c());
        EXPECT(0x5e, gbc.d());
        EXPECT(0xc7, gbc.e());
        EXPECT(0x5c, gbc.h());
        EXPECT(0x5e, gbc.l());
        EXPECT(0x4847, gbc.sp());
        EXPECT(0x5a3c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 02AD
        gbc.setState(0x21c, 0x58b1, 0x6c20, 0xdecf, 0x536, 0x8a58, 0x0, 0x0);
        gbc.writeMem(0x21c, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xde, gbc.b());
        EXPECT(0xcf, gbc.c());
        EXPECT(0x5, gbc.d());
        EXPECT(0x36, gbc.e());
        EXPECT(0x8a, gbc.h());
        EXPECT(0x58, gbc.l());
        EXPECT(0x58b1, gbc.sp());
        EXPECT(0x21d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 02AE
        gbc.setState(0x3554, 0xe33a, 0xa5a0, 0x5d8d, 0xb52e, 0x4446, 0x1, 0x0);
        gbc.writeMem(0x3554, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x5d, gbc.b());
        EXPECT(0x8d, gbc.c());
        EXPECT(0xb5, gbc.d());
        EXPECT(0x2e, gbc.e());
        EXPECT(0x44, gbc.h());
        EXPECT(0x46, gbc.l());
        EXPECT(0xe33a, gbc.sp());
        EXPECT(0x3555, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 02AF
        gbc.setState(0x62ec, 0xf8ca, 0x33c0, 0x7bc7, 0xa243, 0x5dec, 0x0, 0x0);
        gbc.writeMem(0x62ec, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x7b, gbc.b());
        EXPECT(0xc7, gbc.c());
        EXPECT(0xa2, gbc.d());
        EXPECT(0x43, gbc.e());
        EXPECT(0x5d, gbc.h());
        EXPECT(0xec, gbc.l());
        EXPECT(0xf8ca, gbc.sp());
        EXPECT(0x62ed, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 02B0
        gbc.setState(0x2fb8, 0xee38, 0x63b0, 0xb4a2, 0x561c, 0xc6c, 0x0, 0x0);
        gbc.writeMem(0x2fb8, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xb4, gbc.b());
        EXPECT(0xa2, gbc.c());
        EXPECT(0x56, gbc.d());
        EXPECT(0x1c, gbc.e());
        EXPECT(0xc, gbc.h());
        EXPECT(0x6c, gbc.l());
        EXPECT(0xee38, gbc.sp());
        EXPECT(0x2fb9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 02B1
        gbc.setState(0xca46, 0xd07d, 0x5930, 0x85c1, 0x586d, 0xf22a, 0x1, 0x1);
        gbc.writeMem(0xca46, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x85, gbc.b());
        EXPECT(0xc1, gbc.c());
        EXPECT(0x58, gbc.d());
        EXPECT(0x6d, gbc.e());
        EXPECT(0xf2, gbc.h());
        EXPECT(0x2a, gbc.l());
        EXPECT(0xd07d, gbc.sp());
        EXPECT(0xca47, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xca46));
        // AF 02B2
        gbc.setState(0x1e3a, 0x9f6c, 0xe060, 0xf42e, 0x22f9, 0x1356, 0x1, 0x1);
        gbc.writeMem(0x1e3a, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xf4, gbc.b());
        EXPECT(0x2e, gbc.c());
        EXPECT(0x22, gbc.d());
        EXPECT(0xf9, gbc.e());
        EXPECT(0x13, gbc.h());
        EXPECT(0x56, gbc.l());
        EXPECT(0x9f6c, gbc.sp());
        EXPECT(0x1e3b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 02B3
        gbc.setState(0x3c9b, 0xfa73, 0xac50, 0xb986, 0x58d9, 0x4c4c, 0x1, 0x0);
        gbc.writeMem(0x3c9b, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xb9, gbc.b());
        EXPECT(0x86, gbc.c());
        EXPECT(0x58, gbc.d());
        EXPECT(0xd9, gbc.e());
        EXPECT(0x4c, gbc.h());
        EXPECT(0x4c, gbc.l());
        EXPECT(0xfa73, gbc.sp());
        EXPECT(0x3c9c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 02B4
        gbc.setState(0x4cfe, 0x2762, 0x93d0, 0xf1b5, 0x3aad, 0x5b4d, 0x1, 0x0);
        gbc.writeMem(0x4cfe, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xf1, gbc.b());
        EXPECT(0xb5, gbc.c());
        EXPECT(0x3a, gbc.d());
        EXPECT(0xad, gbc.e());
        EXPECT(0x5b, gbc.h());
        EXPECT(0x4d, gbc.l());
        EXPECT(0x2762, gbc.sp());
        EXPECT(0x4cff, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 02B5
        gbc.setState(0xcea6, 0x3562, 0x5bb0, 0xa556, 0xd1c4, 0x7218, 0x1, 0x1);
        gbc.writeMem(0xcea6, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xa5, gbc.b());
        EXPECT(0x56, gbc.c());
        EXPECT(0xd1, gbc.d());
        EXPECT(0xc4, gbc.e());
        EXPECT(0x72, gbc.h());
        EXPECT(0x18, gbc.l());
        EXPECT(0x3562, gbc.sp());
        EXPECT(0xcea7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xcea6));
        // AF 02B6
        gbc.setState(0x905c, 0x2bc3, 0x3570, 0x581d, 0xb26f, 0xbc9e, 0x0, 0x1);
        gbc.writeMem(0x905c, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x58, gbc.b());
        EXPECT(0x1d, gbc.c());
        EXPECT(0xb2, gbc.d());
        EXPECT(0x6f, gbc.e());
        EXPECT(0xbc, gbc.h());
        EXPECT(0x9e, gbc.l());
        EXPECT(0x2bc3, gbc.sp());
        EXPECT(0x905d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x905c));
        // AF 02B7
        gbc.setState(0x5b57, 0x5720, 0x8d10, 0x9ebd, 0x990c, 0x49d1, 0x0, 0x0);
        gbc.writeMem(0x5b57, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x9e, gbc.b());
        EXPECT(0xbd, gbc.c());
        EXPECT(0x99, gbc.d());
        EXPECT(0xc, gbc.e());
        EXPECT(0x49, gbc.h());
        EXPECT(0xd1, gbc.l());
        EXPECT(0x5720, gbc.sp());
        EXPECT(0x5b58, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 02B8
        gbc.setState(0x61f4, 0x9037, 0xedf0, 0x9273, 0xfceb, 0xcc19, 0x1, 0x1);
        gbc.writeMem(0x61f4, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x92, gbc.b());
        EXPECT(0x73, gbc.c());
        EXPECT(0xfc, gbc.d());
        EXPECT(0xeb, gbc.e());
        EXPECT(0xcc, gbc.h());
        EXPECT(0x19, gbc.l());
        EXPECT(0x9037, gbc.sp());
        EXPECT(0x61f5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 02B9
        gbc.setState(0xfff, 0x3dc7, 0xcec0, 0x63a5, 0x115, 0xd029, 0x0, 0x0);
        gbc.writeMem(0xfff, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x63, gbc.b());
        EXPECT(0xa5, gbc.c());
        EXPECT(0x1, gbc.d());
        EXPECT(0x15, gbc.e());
        EXPECT(0xd0, gbc.h());
        EXPECT(0x29, gbc.l());
        EXPECT(0x3dc7, gbc.sp());
        EXPECT(0x1000, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 02BB
        gbc.setState(0x8229, 0x7541, 0xc9f0, 0xf552, 0x1da2, 0x6763, 0x1, 0x0);
        gbc.writeMem(0x8229, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xf5, gbc.b());
        EXPECT(0x52, gbc.c());
        EXPECT(0x1d, gbc.d());
        EXPECT(0xa2, gbc.e());
        EXPECT(0x67, gbc.h());
        EXPECT(0x63, gbc.l());
        EXPECT(0x7541, gbc.sp());
        EXPECT(0x822a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x8229));
        // AF 02BC
        gbc.setState(0xcf90, 0xc3ea, 0x9260, 0x38bf, 0x1397, 0xa50f, 0x1, 0x0);
        gbc.writeMem(0xcf90, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x38, gbc.b());
        EXPECT(0xbf, gbc.c());
        EXPECT(0x13, gbc.d());
        EXPECT(0x97, gbc.e());
        EXPECT(0xa5, gbc.h());
        EXPECT(0xf, gbc.l());
        EXPECT(0xc3ea, gbc.sp());
        EXPECT(0xcf91, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xcf90));
        // AF 02BD
        gbc.setState(0x6a92, 0x3157, 0x6700, 0xc4cc, 0xa58a, 0x580c, 0x1, 0x0);
        gbc.writeMem(0x6a92, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xc4, gbc.b());
        EXPECT(0xcc, gbc.c());
        EXPECT(0xa5, gbc.d());
        EXPECT(0x8a, gbc.e());
        EXPECT(0x58, gbc.h());
        EXPECT(0xc, gbc.l());
        EXPECT(0x3157, gbc.sp());
        EXPECT(0x6a93, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 02BE
        gbc.setState(0x9426, 0x8582, 0xa970, 0xf9d5, 0x36d0, 0x5f7e, 0x1, 0x0);
        gbc.writeMem(0x9426, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xf9, gbc.b());
        EXPECT(0xd5, gbc.c());
        EXPECT(0x36, gbc.d());
        EXPECT(0xd0, gbc.e());
        EXPECT(0x5f, gbc.h());
        EXPECT(0x7e, gbc.l());
        EXPECT(0x8582, gbc.sp());
        EXPECT(0x9427, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x9426));
        // AF 02BF
        gbc.setState(0x7606, 0x95e7, 0xb930, 0x9b4c, 0xe258, 0xa5ef, 0x1, 0x1);
        gbc.writeMem(0x7606, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x9b, gbc.b());
        EXPECT(0x4c, gbc.c());
        EXPECT(0xe2, gbc.d());
        EXPECT(0x58, gbc.e());
        EXPECT(0xa5, gbc.h());
        EXPECT(0xef, gbc.l());
        EXPECT(0x95e7, gbc.sp());
        EXPECT(0x7607, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 02C0
        gbc.setState(0x8343, 0xfa85, 0x95c0, 0x3e62, 0x8c9a, 0x9dbe, 0x1, 0x0);
        gbc.writeMem(0x8343, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x3e, gbc.b());
        EXPECT(0x62, gbc.c());
        EXPECT(0x8c, gbc.d());
        EXPECT(0x9a, gbc.e());
        EXPECT(0x9d, gbc.h());
        EXPECT(0xbe, gbc.l());
        EXPECT(0xfa85, gbc.sp());
        EXPECT(0x8344, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x8343));
        // AF 02C1
        gbc.setState(0x189, 0x530e, 0xf2e0, 0x58e4, 0x286d, 0xa5f3, 0x0, 0x1);
        gbc.writeMem(0x189, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x58, gbc.b());
        EXPECT(0xe4, gbc.c());
        EXPECT(0x28, gbc.d());
        EXPECT(0x6d, gbc.e());
        EXPECT(0xa5, gbc.h());
        EXPECT(0xf3, gbc.l());
        EXPECT(0x530e, gbc.sp());
        EXPECT(0x18a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 02C2
        gbc.setState(0xb0cb, 0x5e4c, 0xfe20, 0xd390, 0x2e40, 0xa284, 0x1, 0x0);
        gbc.writeMem(0xb0cb, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xd3, gbc.b());
        EXPECT(0x90, gbc.c());
        EXPECT(0x2e, gbc.d());
        EXPECT(0x40, gbc.e());
        EXPECT(0xa2, gbc.h());
        EXPECT(0x84, gbc.l());
        EXPECT(0x5e4c, gbc.sp());
        EXPECT(0xb0cc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xb0cb));
        // AF 02C3
        gbc.setState(0xee6f, 0x4217, 0x3f10, 0xb7f0, 0x195b, 0x7444, 0x1, 0x1);
        gbc.writeMem(0xee6f, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xb7, gbc.b());
        EXPECT(0xf0, gbc.c());
        EXPECT(0x19, gbc.d());
        EXPECT(0x5b, gbc.e());
        EXPECT(0x74, gbc.h());
        EXPECT(0x44, gbc.l());
        EXPECT(0x4217, gbc.sp());
        EXPECT(0xee70, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xee6f));
        // AF 02C4
        gbc.setState(0x1b49, 0xa2a8, 0x3870, 0xb1e9, 0x47b, 0xd5e9, 0x1, 0x1);
        gbc.writeMem(0x1b49, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xb1, gbc.b());
        EXPECT(0xe9, gbc.c());
        EXPECT(0x4, gbc.d());
        EXPECT(0x7b, gbc.e());
        EXPECT(0xd5, gbc.h());
        EXPECT(0xe9, gbc.l());
        EXPECT(0xa2a8, gbc.sp());
        EXPECT(0x1b4a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 02C5
        gbc.setState(0x5f9, 0xa5d8, 0xad60, 0xfb45, 0x6b39, 0xe420, 0x0, 0x0);
        gbc.writeMem(0x5f9, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xfb, gbc.b());
        EXPECT(0x45, gbc.c());
        EXPECT(0x6b, gbc.d());
        EXPECT(0x39, gbc.e());
        EXPECT(0xe4, gbc.h());
        EXPECT(0x20, gbc.l());
        EXPECT(0xa5d8, gbc.sp());
        EXPECT(0x5fa, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 02C6
        gbc.setState(0xc728, 0x7d7, 0xf210, 0xb71b, 0x7a90, 0xe750, 0x1, 0x0);
        gbc.writeMem(0xc728, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xb7, gbc.b());
        EXPECT(0x1b, gbc.c());
        EXPECT(0x7a, gbc.d());
        EXPECT(0x90, gbc.e());
        EXPECT(0xe7, gbc.h());
        EXPECT(0x50, gbc.l());
        EXPECT(0x7d7, gbc.sp());
        EXPECT(0xc729, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xc728));
        // AF 02C7
        gbc.setState(0x5d38, 0xb034, 0x2530, 0x84ed, 0xc0af, 0x74e8, 0x0, 0x0);
        gbc.writeMem(0x5d38, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x84, gbc.b());
        EXPECT(0xed, gbc.c());
        EXPECT(0xc0, gbc.d());
        EXPECT(0xaf, gbc.e());
        EXPECT(0x74, gbc.h());
        EXPECT(0xe8, gbc.l());
        EXPECT(0xb034, gbc.sp());
        EXPECT(0x5d39, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 02C8
        gbc.setState(0x8bbb, 0x3ac3, 0x6300, 0x3c76, 0xb0af, 0x38c, 0x0, 0x0);
        gbc.writeMem(0x8bbb, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x3c, gbc.b());
        EXPECT(0x76, gbc.c());
        EXPECT(0xb0, gbc.d());
        EXPECT(0xaf, gbc.e());
        EXPECT(0x3, gbc.h());
        EXPECT(0x8c, gbc.l());
        EXPECT(0x3ac3, gbc.sp());
        EXPECT(0x8bbc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x8bbb));
        // AF 02C9
        gbc.setState(0x45eb, 0xdb58, 0x8430, 0xe977, 0xa9ab, 0x40e4, 0x0, 0x0);
        gbc.writeMem(0x45eb, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xe9, gbc.b());
        EXPECT(0x77, gbc.c());
        EXPECT(0xa9, gbc.d());
        EXPECT(0xab, gbc.e());
        EXPECT(0x40, gbc.h());
        EXPECT(0xe4, gbc.l());
        EXPECT(0xdb58, gbc.sp());
        EXPECT(0x45ec, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 02CA
        gbc.setState(0xdbb, 0xc321, 0x99b0, 0x67b2, 0x2225, 0xf02b, 0x0, 0x1);
        gbc.writeMem(0xdbb, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x67, gbc.b());
        EXPECT(0xb2, gbc.c());
        EXPECT(0x22, gbc.d());
        EXPECT(0x25, gbc.e());
        EXPECT(0xf0, gbc.h());
        EXPECT(0x2b, gbc.l());
        EXPECT(0xc321, gbc.sp());
        EXPECT(0xdbc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 02CB
        gbc.setState(0xc278, 0xf278, 0xc2d0, 0x411f, 0xebd7, 0xfd75, 0x0, 0x0);
        gbc.writeMem(0xc278, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x41, gbc.b());
        EXPECT(0x1f, gbc.c());
        EXPECT(0xeb, gbc.d());
        EXPECT(0xd7, gbc.e());
        EXPECT(0xfd, gbc.h());
        EXPECT(0x75, gbc.l());
        EXPECT(0xf278, gbc.sp());
        EXPECT(0xc279, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xc278));
        // AF 02CC
        gbc.setState(0x7fc6, 0xfcf2, 0xd800, 0x417, 0x8fc0, 0xb05, 0x1, 0x1);
        gbc.writeMem(0x7fc6, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x4, gbc.b());
        EXPECT(0x17, gbc.c());
        EXPECT(0x8f, gbc.d());
        EXPECT(0xc0, gbc.e());
        EXPECT(0xb, gbc.h());
        EXPECT(0x5, gbc.l());
        EXPECT(0xfcf2, gbc.sp());
        EXPECT(0x7fc7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 02CD
        gbc.setState(0x36f2, 0x3281, 0xb80, 0xc25d, 0xae6a, 0x9eca, 0x1, 0x1);
        gbc.writeMem(0x36f2, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xc2, gbc.b());
        EXPECT(0x5d, gbc.c());
        EXPECT(0xae, gbc.d());
        EXPECT(0x6a, gbc.e());
        EXPECT(0x9e, gbc.h());
        EXPECT(0xca, gbc.l());
        EXPECT(0x3281, gbc.sp());
        EXPECT(0x36f3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 02CE
        gbc.setState(0xb130, 0x27af, 0x25d0, 0xb73a, 0x4c43, 0x71fa, 0x0, 0x1);
        gbc.writeMem(0xb130, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xb7, gbc.b());
        EXPECT(0x3a, gbc.c());
        EXPECT(0x4c, gbc.d());
        EXPECT(0x43, gbc.e());
        EXPECT(0x71, gbc.h());
        EXPECT(0xfa, gbc.l());
        EXPECT(0x27af, gbc.sp());
        EXPECT(0xb131, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xb130));
        // AF 02CF
        gbc.setState(0xee9b, 0x17be, 0xfea0, 0x1141, 0xfe7f, 0x1949, 0x1, 0x1);
        gbc.writeMem(0xee9b, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x11, gbc.b());
        EXPECT(0x41, gbc.c());
        EXPECT(0xfe, gbc.d());
        EXPECT(0x7f, gbc.e());
        EXPECT(0x19, gbc.h());
        EXPECT(0x49, gbc.l());
        EXPECT(0x17be, gbc.sp());
        EXPECT(0xee9c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xee9b));
        // AF 02D0
        gbc.setState(0xd263, 0x2fd1, 0x9c0, 0x66d3, 0x425c, 0x510f, 0x0, 0x0);
        gbc.writeMem(0xd263, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x66, gbc.b());
        EXPECT(0xd3, gbc.c());
        EXPECT(0x42, gbc.d());
        EXPECT(0x5c, gbc.e());
        EXPECT(0x51, gbc.h());
        EXPECT(0xf, gbc.l());
        EXPECT(0x2fd1, gbc.sp());
        EXPECT(0xd264, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xd263));
        // AF 02D1
        gbc.setState(0x340e, 0x6626, 0x1c10, 0x8dfa, 0x9177, 0xb41c, 0x1, 0x0);
        gbc.writeMem(0x340e, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x8d, gbc.b());
        EXPECT(0xfa, gbc.c());
        EXPECT(0x91, gbc.d());
        EXPECT(0x77, gbc.e());
        EXPECT(0xb4, gbc.h());
        EXPECT(0x1c, gbc.l());
        EXPECT(0x6626, gbc.sp());
        EXPECT(0x340f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 02D2
        gbc.setState(0xbadb, 0xe3aa, 0x85b0, 0xf23c, 0x6226, 0x77ff, 0x1, 0x0);
        gbc.writeMem(0xbadb, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xf2, gbc.b());
        EXPECT(0x3c, gbc.c());
        EXPECT(0x62, gbc.d());
        EXPECT(0x26, gbc.e());
        EXPECT(0x77, gbc.h());
        EXPECT(0xff, gbc.l());
        EXPECT(0xe3aa, gbc.sp());
        EXPECT(0xbadc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xbadb));
        // AF 02D3
        gbc.setState(0x9a24, 0xb029, 0xc30, 0xf71a, 0x15b8, 0x200d, 0x1, 0x0);
        gbc.writeMem(0x9a24, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xf7, gbc.b());
        EXPECT(0x1a, gbc.c());
        EXPECT(0x15, gbc.d());
        EXPECT(0xb8, gbc.e());
        EXPECT(0x20, gbc.h());
        EXPECT(0xd, gbc.l());
        EXPECT(0xb029, gbc.sp());
        EXPECT(0x9a25, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x9a24));
        // AF 02D4
        gbc.setState(0x5c8, 0x34f0, 0xe00, 0x1a59, 0xceb7, 0xaa7c, 0x0, 0x0);
        gbc.writeMem(0x5c8, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x1a, gbc.b());
        EXPECT(0x59, gbc.c());
        EXPECT(0xce, gbc.d());
        EXPECT(0xb7, gbc.e());
        EXPECT(0xaa, gbc.h());
        EXPECT(0x7c, gbc.l());
        EXPECT(0x34f0, gbc.sp());
        EXPECT(0x5c9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 02D5
        gbc.setState(0x76f1, 0xff18, 0xea90, 0xfdc4, 0x95fa, 0xf3df, 0x1, 0x1);
        gbc.writeMem(0x76f1, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xfd, gbc.b());
        EXPECT(0xc4, gbc.c());
        EXPECT(0x95, gbc.d());
        EXPECT(0xfa, gbc.e());
        EXPECT(0xf3, gbc.h());
        EXPECT(0xdf, gbc.l());
        EXPECT(0xff18, gbc.sp());
        EXPECT(0x76f2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 02D6
        gbc.setState(0x7338, 0x4862, 0x4b0, 0x3da8, 0xc6ce, 0x77cd, 0x1, 0x0);
        gbc.writeMem(0x7338, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x3d, gbc.b());
        EXPECT(0xa8, gbc.c());
        EXPECT(0xc6, gbc.d());
        EXPECT(0xce, gbc.e());
        EXPECT(0x77, gbc.h());
        EXPECT(0xcd, gbc.l());
        EXPECT(0x4862, gbc.sp());
        EXPECT(0x7339, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 02D7
        gbc.setState(0x4830, 0x9647, 0x48d0, 0x4bb3, 0x6a59, 0x123c, 0x1, 0x0);
        gbc.writeMem(0x4830, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x4b, gbc.b());
        EXPECT(0xb3, gbc.c());
        EXPECT(0x6a, gbc.d());
        EXPECT(0x59, gbc.e());
        EXPECT(0x12, gbc.h());
        EXPECT(0x3c, gbc.l());
        EXPECT(0x9647, gbc.sp());
        EXPECT(0x4831, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 02D8
        gbc.setState(0x4916, 0x49cd, 0xdcf0, 0x69be, 0x4e49, 0x9b29, 0x0, 0x1);
        gbc.writeMem(0x4916, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x69, gbc.b());
        EXPECT(0xbe, gbc.c());
        EXPECT(0x4e, gbc.d());
        EXPECT(0x49, gbc.e());
        EXPECT(0x9b, gbc.h());
        EXPECT(0x29, gbc.l());
        EXPECT(0x49cd, gbc.sp());
        EXPECT(0x4917, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 02D9
        gbc.setState(0x76b7, 0xa3b8, 0x2740, 0x745e, 0x1508, 0x7729, 0x1, 0x0);
        gbc.writeMem(0x76b7, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x74, gbc.b());
        EXPECT(0x5e, gbc.c());
        EXPECT(0x15, gbc.d());
        EXPECT(0x8, gbc.e());
        EXPECT(0x77, gbc.h());
        EXPECT(0x29, gbc.l());
        EXPECT(0xa3b8, gbc.sp());
        EXPECT(0x76b8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 02DA
        gbc.setState(0x6071, 0xfee9, 0x890, 0x3973, 0x4871, 0x46ad, 0x1, 0x0);
        gbc.writeMem(0x6071, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x39, gbc.b());
        EXPECT(0x73, gbc.c());
        EXPECT(0x48, gbc.d());
        EXPECT(0x71, gbc.e());
        EXPECT(0x46, gbc.h());
        EXPECT(0xad, gbc.l());
        EXPECT(0xfee9, gbc.sp());
        EXPECT(0x6072, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 02DB
        gbc.setState(0xc72c, 0xa37c, 0x3800, 0x6412, 0x7010, 0xfdb9, 0x0, 0x0);
        gbc.writeMem(0xc72c, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x64, gbc.b());
        EXPECT(0x12, gbc.c());
        EXPECT(0x70, gbc.d());
        EXPECT(0x10, gbc.e());
        EXPECT(0xfd, gbc.h());
        EXPECT(0xb9, gbc.l());
        EXPECT(0xa37c, gbc.sp());
        EXPECT(0xc72d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xc72c));
        // AF 02DC
        gbc.setState(0xdab3, 0xd81c, 0x53a0, 0xb74e, 0xe5b6, 0xc2ca, 0x0, 0x1);
        gbc.writeMem(0xdab3, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xb7, gbc.b());
        EXPECT(0x4e, gbc.c());
        EXPECT(0xe5, gbc.d());
        EXPECT(0xb6, gbc.e());
        EXPECT(0xc2, gbc.h());
        EXPECT(0xca, gbc.l());
        EXPECT(0xd81c, gbc.sp());
        EXPECT(0xdab4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xdab3));
        // AF 02DD
        gbc.setState(0xa3c, 0xcb24, 0xab40, 0xc8a3, 0x7143, 0x5f40, 0x1, 0x1);
        gbc.writeMem(0xa3c, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xc8, gbc.b());
        EXPECT(0xa3, gbc.c());
        EXPECT(0x71, gbc.d());
        EXPECT(0x43, gbc.e());
        EXPECT(0x5f, gbc.h());
        EXPECT(0x40, gbc.l());
        EXPECT(0xcb24, gbc.sp());
        EXPECT(0xa3d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 02DE
        gbc.setState(0x4d12, 0x8f93, 0xa2b0, 0x135e, 0x7757, 0x5ffe, 0x1, 0x1);
        gbc.writeMem(0x4d12, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x13, gbc.b());
        EXPECT(0x5e, gbc.c());
        EXPECT(0x77, gbc.d());
        EXPECT(0x57, gbc.e());
        EXPECT(0x5f, gbc.h());
        EXPECT(0xfe, gbc.l());
        EXPECT(0x8f93, gbc.sp());
        EXPECT(0x4d13, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 02DF
        gbc.setState(0x9431, 0x99b0, 0xeae0, 0x6f14, 0x40ad, 0x895d, 0x1, 0x0);
        gbc.writeMem(0x9431, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x6f, gbc.b());
        EXPECT(0x14, gbc.c());
        EXPECT(0x40, gbc.d());
        EXPECT(0xad, gbc.e());
        EXPECT(0x89, gbc.h());
        EXPECT(0x5d, gbc.l());
        EXPECT(0x99b0, gbc.sp());
        EXPECT(0x9432, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x9431));
        // AF 02E0
        gbc.setState(0xa6f5, 0x8d74, 0x8d0, 0xdf9a, 0xb2a9, 0xbdf0, 0x1, 0x1);
        gbc.writeMem(0xa6f5, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xdf, gbc.b());
        EXPECT(0x9a, gbc.c());
        EXPECT(0xb2, gbc.d());
        EXPECT(0xa9, gbc.e());
        EXPECT(0xbd, gbc.h());
        EXPECT(0xf0, gbc.l());
        EXPECT(0x8d74, gbc.sp());
        EXPECT(0xa6f6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xa6f5));
        // AF 02E1
        gbc.setState(0x62e4, 0x5b91, 0xa970, 0x30ec, 0xfca, 0xb3f5, 0x1, 0x0);
        gbc.writeMem(0x62e4, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x30, gbc.b());
        EXPECT(0xec, gbc.c());
        EXPECT(0xf, gbc.d());
        EXPECT(0xca, gbc.e());
        EXPECT(0xb3, gbc.h());
        EXPECT(0xf5, gbc.l());
        EXPECT(0x5b91, gbc.sp());
        EXPECT(0x62e5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 02E2
        gbc.setState(0xace2, 0x1e1d, 0xf10, 0xfe92, 0xb19a, 0x75fe, 0x1, 0x0);
        gbc.writeMem(0xace2, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xfe, gbc.b());
        EXPECT(0x92, gbc.c());
        EXPECT(0xb1, gbc.d());
        EXPECT(0x9a, gbc.e());
        EXPECT(0x75, gbc.h());
        EXPECT(0xfe, gbc.l());
        EXPECT(0x1e1d, gbc.sp());
        EXPECT(0xace3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xace2));
        // AF 02E3
        gbc.setState(0x728e, 0xa4fd, 0x9d10, 0xdef9, 0xcf65, 0x3da2, 0x1, 0x0);
        gbc.writeMem(0x728e, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xde, gbc.b());
        EXPECT(0xf9, gbc.c());
        EXPECT(0xcf, gbc.d());
        EXPECT(0x65, gbc.e());
        EXPECT(0x3d, gbc.h());
        EXPECT(0xa2, gbc.l());
        EXPECT(0xa4fd, gbc.sp());
        EXPECT(0x728f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 02E4
        gbc.setState(0xeae1, 0x3f35, 0xb370, 0xe3e5, 0x667f, 0x5302, 0x0, 0x1);
        gbc.writeMem(0xeae1, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xe3, gbc.b());
        EXPECT(0xe5, gbc.c());
        EXPECT(0x66, gbc.d());
        EXPECT(0x7f, gbc.e());
        EXPECT(0x53, gbc.h());
        EXPECT(0x2, gbc.l());
        EXPECT(0x3f35, gbc.sp());
        EXPECT(0xeae2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xeae1));
        // AF 02E5
        gbc.setState(0xcefe, 0x6ec9, 0xa380, 0x42a0, 0x73f5, 0x8bd, 0x1, 0x1);
        gbc.writeMem(0xcefe, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x42, gbc.b());
        EXPECT(0xa0, gbc.c());
        EXPECT(0x73, gbc.d());
        EXPECT(0xf5, gbc.e());
        EXPECT(0x8, gbc.h());
        EXPECT(0xbd, gbc.l());
        EXPECT(0x6ec9, gbc.sp());
        EXPECT(0xceff, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xcefe));
        // AF 02E6
        gbc.setState(0xef4d, 0xfedb, 0x70f0, 0x26ef, 0x589d, 0xf447, 0x1, 0x0);
        gbc.writeMem(0xef4d, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x26, gbc.b());
        EXPECT(0xef, gbc.c());
        EXPECT(0x58, gbc.d());
        EXPECT(0x9d, gbc.e());
        EXPECT(0xf4, gbc.h());
        EXPECT(0x47, gbc.l());
        EXPECT(0xfedb, gbc.sp());
        EXPECT(0xef4e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xef4d));
        // AF 02E7
        gbc.setState(0x9989, 0x8eed, 0x8c60, 0x370e, 0xe454, 0x6235, 0x1, 0x1);
        gbc.writeMem(0x9989, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x37, gbc.b());
        EXPECT(0xe, gbc.c());
        EXPECT(0xe4, gbc.d());
        EXPECT(0x54, gbc.e());
        EXPECT(0x62, gbc.h());
        EXPECT(0x35, gbc.l());
        EXPECT(0x8eed, gbc.sp());
        EXPECT(0x998a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x9989));
        // AF 02E8
        gbc.setState(0x5020, 0x35a1, 0x6fa0, 0xc976, 0x6b9f, 0xf8fe, 0x1, 0x1);
        gbc.writeMem(0x5020, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xc9, gbc.b());
        EXPECT(0x76, gbc.c());
        EXPECT(0x6b, gbc.d());
        EXPECT(0x9f, gbc.e());
        EXPECT(0xf8, gbc.h());
        EXPECT(0xfe, gbc.l());
        EXPECT(0x35a1, gbc.sp());
        EXPECT(0x5021, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 02E9
        gbc.setState(0x340c, 0x7a17, 0x5c00, 0x6442, 0xc0d4, 0x75b5, 0x0, 0x0);
        gbc.writeMem(0x340c, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x64, gbc.b());
        EXPECT(0x42, gbc.c());
        EXPECT(0xc0, gbc.d());
        EXPECT(0xd4, gbc.e());
        EXPECT(0x75, gbc.h());
        EXPECT(0xb5, gbc.l());
        EXPECT(0x7a17, gbc.sp());
        EXPECT(0x340d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 02EA
        gbc.setState(0x2997, 0x84f3, 0xab10, 0x7b1e, 0x6eaf, 0x374b, 0x1, 0x1);
        gbc.writeMem(0x2997, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x7b, gbc.b());
        EXPECT(0x1e, gbc.c());
        EXPECT(0x6e, gbc.d());
        EXPECT(0xaf, gbc.e());
        EXPECT(0x37, gbc.h());
        EXPECT(0x4b, gbc.l());
        EXPECT(0x84f3, gbc.sp());
        EXPECT(0x2998, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 02EB
        gbc.setState(0x5b0a, 0x8dfd, 0xf680, 0xf1c7, 0x5932, 0x77e6, 0x1, 0x1);
        gbc.writeMem(0x5b0a, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xf1, gbc.b());
        EXPECT(0xc7, gbc.c());
        EXPECT(0x59, gbc.d());
        EXPECT(0x32, gbc.e());
        EXPECT(0x77, gbc.h());
        EXPECT(0xe6, gbc.l());
        EXPECT(0x8dfd, gbc.sp());
        EXPECT(0x5b0b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 02EC
        gbc.setState(0x62e6, 0x950, 0x1480, 0xbe9b, 0x9142, 0x61b3, 0x0, 0x0);
        gbc.writeMem(0x62e6, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xbe, gbc.b());
        EXPECT(0x9b, gbc.c());
        EXPECT(0x91, gbc.d());
        EXPECT(0x42, gbc.e());
        EXPECT(0x61, gbc.h());
        EXPECT(0xb3, gbc.l());
        EXPECT(0x950, gbc.sp());
        EXPECT(0x62e7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 02ED
        gbc.setState(0x165c, 0x674f, 0x29d0, 0x2bc6, 0x3673, 0x404f, 0x1, 0x1);
        gbc.writeMem(0x165c, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x2b, gbc.b());
        EXPECT(0xc6, gbc.c());
        EXPECT(0x36, gbc.d());
        EXPECT(0x73, gbc.e());
        EXPECT(0x40, gbc.h());
        EXPECT(0x4f, gbc.l());
        EXPECT(0x674f, gbc.sp());
        EXPECT(0x165d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 02EE
        gbc.setState(0x8836, 0x5509, 0x52a0, 0xed55, 0xe1fd, 0xeb03, 0x0, 0x0);
        gbc.writeMem(0x8836, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xed, gbc.b());
        EXPECT(0x55, gbc.c());
        EXPECT(0xe1, gbc.d());
        EXPECT(0xfd, gbc.e());
        EXPECT(0xeb, gbc.h());
        EXPECT(0x3, gbc.l());
        EXPECT(0x5509, gbc.sp());
        EXPECT(0x8837, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x8836));
        // AF 02EF
        gbc.setState(0xb67d, 0xf66c, 0x5b20, 0xf275, 0xca33, 0xb997, 0x1, 0x0);
        gbc.writeMem(0xb67d, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xf2, gbc.b());
        EXPECT(0x75, gbc.c());
        EXPECT(0xca, gbc.d());
        EXPECT(0x33, gbc.e());
        EXPECT(0xb9, gbc.h());
        EXPECT(0x97, gbc.l());
        EXPECT(0xf66c, gbc.sp());
        EXPECT(0xb67e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xb67d));
        // AF 02F0
        gbc.setState(0x3a76, 0x2cb4, 0x2850, 0xe5bb, 0x5e8a, 0xda70, 0x1, 0x0);
        gbc.writeMem(0x3a76, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xe5, gbc.b());
        EXPECT(0xbb, gbc.c());
        EXPECT(0x5e, gbc.d());
        EXPECT(0x8a, gbc.e());
        EXPECT(0xda, gbc.h());
        EXPECT(0x70, gbc.l());
        EXPECT(0x2cb4, gbc.sp());
        EXPECT(0x3a77, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 02F2
        gbc.setState(0x8c69, 0x7bd4, 0x2b50, 0xb1ff, 0x3239, 0xafa3, 0x0, 0x0);
        gbc.writeMem(0x8c69, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xb1, gbc.b());
        EXPECT(0xff, gbc.c());
        EXPECT(0x32, gbc.d());
        EXPECT(0x39, gbc.e());
        EXPECT(0xaf, gbc.h());
        EXPECT(0xa3, gbc.l());
        EXPECT(0x7bd4, gbc.sp());
        EXPECT(0x8c6a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x8c69));
        // AF 02F3
        gbc.setState(0x7ed5, 0x2a17, 0xa5c0, 0x336c, 0x4107, 0xad41, 0x1, 0x0);
        gbc.writeMem(0x7ed5, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x33, gbc.b());
        EXPECT(0x6c, gbc.c());
        EXPECT(0x41, gbc.d());
        EXPECT(0x7, gbc.e());
        EXPECT(0xad, gbc.h());
        EXPECT(0x41, gbc.l());
        EXPECT(0x2a17, gbc.sp());
        EXPECT(0x7ed6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 02F4
        gbc.setState(0x1451, 0x4341, 0x3e20, 0xf2a1, 0xa96b, 0x1ee7, 0x0, 0x0);
        gbc.writeMem(0x1451, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xf2, gbc.b());
        EXPECT(0xa1, gbc.c());
        EXPECT(0xa9, gbc.d());
        EXPECT(0x6b, gbc.e());
        EXPECT(0x1e, gbc.h());
        EXPECT(0xe7, gbc.l());
        EXPECT(0x4341, gbc.sp());
        EXPECT(0x1452, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 02F5
        gbc.setState(0x35af, 0x59c6, 0xc5a0, 0x9121, 0x7513, 0x9444, 0x1, 0x1);
        gbc.writeMem(0x35af, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x91, gbc.b());
        EXPECT(0x21, gbc.c());
        EXPECT(0x75, gbc.d());
        EXPECT(0x13, gbc.e());
        EXPECT(0x94, gbc.h());
        EXPECT(0x44, gbc.l());
        EXPECT(0x59c6, gbc.sp());
        EXPECT(0x35b0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 02F6
        gbc.setState(0x9b45, 0xfdd0, 0xccb0, 0xf5d2, 0x1645, 0x9b8b, 0x1, 0x0);
        gbc.writeMem(0x9b45, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xf5, gbc.b());
        EXPECT(0xd2, gbc.c());
        EXPECT(0x16, gbc.d());
        EXPECT(0x45, gbc.e());
        EXPECT(0x9b, gbc.h());
        EXPECT(0x8b, gbc.l());
        EXPECT(0xfdd0, gbc.sp());
        EXPECT(0x9b46, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x9b45));
        // AF 02F7
        gbc.setState(0x23f5, 0x1faa, 0x12a0, 0xc79b, 0xe189, 0xbb84, 0x0, 0x1);
        gbc.writeMem(0x23f5, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xc7, gbc.b());
        EXPECT(0x9b, gbc.c());
        EXPECT(0xe1, gbc.d());
        EXPECT(0x89, gbc.e());
        EXPECT(0xbb, gbc.h());
        EXPECT(0x84, gbc.l());
        EXPECT(0x1faa, gbc.sp());
        EXPECT(0x23f6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 02F8
        gbc.setState(0xdd81, 0x3a09, 0x1320, 0xcb82, 0x864, 0xa9a, 0x0, 0x1);
        gbc.writeMem(0xdd81, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xcb, gbc.b());
        EXPECT(0x82, gbc.c());
        EXPECT(0x8, gbc.d());
        EXPECT(0x64, gbc.e());
        EXPECT(0xa, gbc.h());
        EXPECT(0x9a, gbc.l());
        EXPECT(0x3a09, gbc.sp());
        EXPECT(0xdd82, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xdd81));
        // AF 02FA
        gbc.setState(0x4484, 0x3444, 0x2b30, 0x89f0, 0x7001, 0x11e7, 0x1, 0x0);
        gbc.writeMem(0x4484, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x89, gbc.b());
        EXPECT(0xf0, gbc.c());
        EXPECT(0x70, gbc.d());
        EXPECT(0x1, gbc.e());
        EXPECT(0x11, gbc.h());
        EXPECT(0xe7, gbc.l());
        EXPECT(0x3444, gbc.sp());
        EXPECT(0x4485, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 02FB
        gbc.setState(0xc6b5, 0xb1fa, 0x5fc0, 0x2afd, 0x4d25, 0xf3fd, 0x0, 0x0);
        gbc.writeMem(0xc6b5, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x2a, gbc.b());
        EXPECT(0xfd, gbc.c());
        EXPECT(0x4d, gbc.d());
        EXPECT(0x25, gbc.e());
        EXPECT(0xf3, gbc.h());
        EXPECT(0xfd, gbc.l());
        EXPECT(0xb1fa, gbc.sp());
        EXPECT(0xc6b6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xc6b5));
        // AF 02FC
        gbc.setState(0xe6, 0xd3dc, 0x38e0, 0xd810, 0x3ff, 0x5141, 0x1, 0x0);
        gbc.writeMem(0xe6, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xd8, gbc.b());
        EXPECT(0x10, gbc.c());
        EXPECT(0x3, gbc.d());
        EXPECT(0xff, gbc.e());
        EXPECT(0x51, gbc.h());
        EXPECT(0x41, gbc.l());
        EXPECT(0xd3dc, gbc.sp());
        EXPECT(0xe7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 02FD
        gbc.setState(0x7f8b, 0x82d9, 0xcf00, 0xdff5, 0x8481, 0x5473, 0x0, 0x0);
        gbc.writeMem(0x7f8b, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xdf, gbc.b());
        EXPECT(0xf5, gbc.c());
        EXPECT(0x84, gbc.d());
        EXPECT(0x81, gbc.e());
        EXPECT(0x54, gbc.h());
        EXPECT(0x73, gbc.l());
        EXPECT(0x82d9, gbc.sp());
        EXPECT(0x7f8c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 02FE
        gbc.setState(0x9410, 0x30f2, 0x7ce0, 0x601d, 0x8fa6, 0xf412, 0x0, 0x1);
        gbc.writeMem(0x9410, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x60, gbc.b());
        EXPECT(0x1d, gbc.c());
        EXPECT(0x8f, gbc.d());
        EXPECT(0xa6, gbc.e());
        EXPECT(0xf4, gbc.h());
        EXPECT(0x12, gbc.l());
        EXPECT(0x30f2, gbc.sp());
        EXPECT(0x9411, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x9410));
        // AF 02FF
        gbc.setState(0xd359, 0xf59e, 0x3ce0, 0x4e62, 0xba8b, 0xfa74, 0x0, 0x0);
        gbc.writeMem(0xd359, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x4e, gbc.b());
        EXPECT(0x62, gbc.c());
        EXPECT(0xba, gbc.d());
        EXPECT(0x8b, gbc.e());
        EXPECT(0xfa, gbc.h());
        EXPECT(0x74, gbc.l());
        EXPECT(0xf59e, gbc.sp());
        EXPECT(0xd35a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xd359));
        // AF 0302
        gbc.setState(0x9328, 0xf6ed, 0x5bc0, 0xd0eb, 0x82e9, 0x4c5f, 0x1, 0x1);
        gbc.writeMem(0x9328, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xd0, gbc.b());
        EXPECT(0xeb, gbc.c());
        EXPECT(0x82, gbc.d());
        EXPECT(0xe9, gbc.e());
        EXPECT(0x4c, gbc.h());
        EXPECT(0x5f, gbc.l());
        EXPECT(0xf6ed, gbc.sp());
        EXPECT(0x9329, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x9328));
        // AF 0303
        gbc.setState(0x7fae, 0x9a0e, 0x54d0, 0xcd81, 0xc22, 0xddcd, 0x1, 0x0);
        gbc.writeMem(0x7fae, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xcd, gbc.b());
        EXPECT(0x81, gbc.c());
        EXPECT(0xc, gbc.d());
        EXPECT(0x22, gbc.e());
        EXPECT(0xdd, gbc.h());
        EXPECT(0xcd, gbc.l());
        EXPECT(0x9a0e, gbc.sp());
        EXPECT(0x7faf, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0304
        gbc.setState(0x4c9a, 0x17ec, 0x6f40, 0xfa03, 0x71f0, 0xe358, 0x0, 0x1);
        gbc.writeMem(0x4c9a, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xfa, gbc.b());
        EXPECT(0x3, gbc.c());
        EXPECT(0x71, gbc.d());
        EXPECT(0xf0, gbc.e());
        EXPECT(0xe3, gbc.h());
        EXPECT(0x58, gbc.l());
        EXPECT(0x17ec, gbc.sp());
        EXPECT(0x4c9b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0305
        gbc.setState(0x9ff9, 0x5af9, 0xe4f0, 0xdf, 0x52c5, 0xf534, 0x1, 0x1);
        gbc.writeMem(0x9ff9, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x0, gbc.b());
        EXPECT(0xdf, gbc.c());
        EXPECT(0x52, gbc.d());
        EXPECT(0xc5, gbc.e());
        EXPECT(0xf5, gbc.h());
        EXPECT(0x34, gbc.l());
        EXPECT(0x5af9, gbc.sp());
        EXPECT(0x9ffa, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x9ff9));
        // AF 0306
        gbc.setState(0x663a, 0x94d7, 0x5730, 0x4bb6, 0x26bd, 0x8fb9, 0x0, 0x0);
        gbc.writeMem(0x663a, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x4b, gbc.b());
        EXPECT(0xb6, gbc.c());
        EXPECT(0x26, gbc.d());
        EXPECT(0xbd, gbc.e());
        EXPECT(0x8f, gbc.h());
        EXPECT(0xb9, gbc.l());
        EXPECT(0x94d7, gbc.sp());
        EXPECT(0x663b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0307
        gbc.setState(0xa8a1, 0x48ea, 0xf330, 0x9c71, 0xfc51, 0xba82, 0x1, 0x0);
        gbc.writeMem(0xa8a1, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x9c, gbc.b());
        EXPECT(0x71, gbc.c());
        EXPECT(0xfc, gbc.d());
        EXPECT(0x51, gbc.e());
        EXPECT(0xba, gbc.h());
        EXPECT(0x82, gbc.l());
        EXPECT(0x48ea, gbc.sp());
        EXPECT(0xa8a2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xa8a1));
        // AF 0308
        gbc.setState(0xce4e, 0xb36e, 0xa920, 0xe332, 0x36a4, 0x6cf6, 0x0, 0x1);
        gbc.writeMem(0xce4e, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xe3, gbc.b());
        EXPECT(0x32, gbc.c());
        EXPECT(0x36, gbc.d());
        EXPECT(0xa4, gbc.e());
        EXPECT(0x6c, gbc.h());
        EXPECT(0xf6, gbc.l());
        EXPECT(0xb36e, gbc.sp());
        EXPECT(0xce4f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xce4e));
        // AF 0309
        gbc.setState(0x641, 0xf93f, 0xa6f0, 0x3383, 0xcc36, 0x474e, 0x0, 0x1);
        gbc.writeMem(0x641, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x33, gbc.b());
        EXPECT(0x83, gbc.c());
        EXPECT(0xcc, gbc.d());
        EXPECT(0x36, gbc.e());
        EXPECT(0x47, gbc.h());
        EXPECT(0x4e, gbc.l());
        EXPECT(0xf93f, gbc.sp());
        EXPECT(0x642, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 030A
        gbc.setState(0x44d5, 0x4ec4, 0x56c0, 0xcafd, 0x57fb, 0x7d86, 0x1, 0x0);
        gbc.writeMem(0x44d5, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xca, gbc.b());
        EXPECT(0xfd, gbc.c());
        EXPECT(0x57, gbc.d());
        EXPECT(0xfb, gbc.e());
        EXPECT(0x7d, gbc.h());
        EXPECT(0x86, gbc.l());
        EXPECT(0x4ec4, gbc.sp());
        EXPECT(0x44d6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 030B
        gbc.setState(0x2023, 0x2389, 0x1d40, 0xf463, 0x5730, 0xf896, 0x1, 0x1);
        gbc.writeMem(0x2023, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xf4, gbc.b());
        EXPECT(0x63, gbc.c());
        EXPECT(0x57, gbc.d());
        EXPECT(0x30, gbc.e());
        EXPECT(0xf8, gbc.h());
        EXPECT(0x96, gbc.l());
        EXPECT(0x2389, gbc.sp());
        EXPECT(0x2024, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 030C
        gbc.setState(0xb735, 0xf59a, 0x75b0, 0xceb0, 0x7ff9, 0xe4b3, 0x1, 0x0);
        gbc.writeMem(0xb735, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xce, gbc.b());
        EXPECT(0xb0, gbc.c());
        EXPECT(0x7f, gbc.d());
        EXPECT(0xf9, gbc.e());
        EXPECT(0xe4, gbc.h());
        EXPECT(0xb3, gbc.l());
        EXPECT(0xf59a, gbc.sp());
        EXPECT(0xb736, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xb735));
        // AF 030D
        gbc.setState(0x9889, 0xa2d, 0xb2b0, 0xabd5, 0x31c1, 0x4f0e, 0x1, 0x1);
        gbc.writeMem(0x9889, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xab, gbc.b());
        EXPECT(0xd5, gbc.c());
        EXPECT(0x31, gbc.d());
        EXPECT(0xc1, gbc.e());
        EXPECT(0x4f, gbc.h());
        EXPECT(0xe, gbc.l());
        EXPECT(0xa2d, gbc.sp());
        EXPECT(0x988a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x9889));
        // AF 030E
        gbc.setState(0x727a, 0x5939, 0xc380, 0xd86f, 0x7689, 0x1526, 0x0, 0x0);
        gbc.writeMem(0x727a, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xd8, gbc.b());
        EXPECT(0x6f, gbc.c());
        EXPECT(0x76, gbc.d());
        EXPECT(0x89, gbc.e());
        EXPECT(0x15, gbc.h());
        EXPECT(0x26, gbc.l());
        EXPECT(0x5939, gbc.sp());
        EXPECT(0x727b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 030F
        gbc.setState(0x1d40, 0x11f8, 0xc430, 0x9529, 0x5086, 0xa57e, 0x0, 0x1);
        gbc.writeMem(0x1d40, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x95, gbc.b());
        EXPECT(0x29, gbc.c());
        EXPECT(0x50, gbc.d());
        EXPECT(0x86, gbc.e());
        EXPECT(0xa5, gbc.h());
        EXPECT(0x7e, gbc.l());
        EXPECT(0x11f8, gbc.sp());
        EXPECT(0x1d41, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0310
        gbc.setState(0x8c58, 0x825d, 0x5fc0, 0xb441, 0x48a4, 0xeec, 0x1, 0x1);
        gbc.writeMem(0x8c58, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xb4, gbc.b());
        EXPECT(0x41, gbc.c());
        EXPECT(0x48, gbc.d());
        EXPECT(0xa4, gbc.e());
        EXPECT(0xe, gbc.h());
        EXPECT(0xec, gbc.l());
        EXPECT(0x825d, gbc.sp());
        EXPECT(0x8c59, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x8c58));
        // AF 0311
        gbc.setState(0x59c8, 0xe544, 0x10e0, 0xc6c8, 0xc25a, 0x993, 0x0, 0x0);
        gbc.writeMem(0x59c8, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xc6, gbc.b());
        EXPECT(0xc8, gbc.c());
        EXPECT(0xc2, gbc.d());
        EXPECT(0x5a, gbc.e());
        EXPECT(0x9, gbc.h());
        EXPECT(0x93, gbc.l());
        EXPECT(0xe544, gbc.sp());
        EXPECT(0x59c9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0312
        gbc.setState(0x2176, 0xe945, 0x3910, 0x784a, 0xb048, 0x7cd7, 0x1, 0x1);
        gbc.writeMem(0x2176, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x78, gbc.b());
        EXPECT(0x4a, gbc.c());
        EXPECT(0xb0, gbc.d());
        EXPECT(0x48, gbc.e());
        EXPECT(0x7c, gbc.h());
        EXPECT(0xd7, gbc.l());
        EXPECT(0xe945, gbc.sp());
        EXPECT(0x2177, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0313
        gbc.setState(0x9750, 0x7f3d, 0xeb80, 0xccf6, 0x5abb, 0xed16, 0x0, 0x0);
        gbc.writeMem(0x9750, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xcc, gbc.b());
        EXPECT(0xf6, gbc.c());
        EXPECT(0x5a, gbc.d());
        EXPECT(0xbb, gbc.e());
        EXPECT(0xed, gbc.h());
        EXPECT(0x16, gbc.l());
        EXPECT(0x7f3d, gbc.sp());
        EXPECT(0x9751, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x9750));
        // AF 0314
        gbc.setState(0x1c44, 0xe843, 0xfd80, 0x44ec, 0x8abd, 0xde15, 0x0, 0x0);
        gbc.writeMem(0x1c44, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x44, gbc.b());
        EXPECT(0xec, gbc.c());
        EXPECT(0x8a, gbc.d());
        EXPECT(0xbd, gbc.e());
        EXPECT(0xde, gbc.h());
        EXPECT(0x15, gbc.l());
        EXPECT(0xe843, gbc.sp());
        EXPECT(0x1c45, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0315
        gbc.setState(0x4b48, 0x95e, 0x3910, 0xb528, 0xe015, 0x2c54, 0x1, 0x0);
        gbc.writeMem(0x4b48, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xb5, gbc.b());
        EXPECT(0x28, gbc.c());
        EXPECT(0xe0, gbc.d());
        EXPECT(0x15, gbc.e());
        EXPECT(0x2c, gbc.h());
        EXPECT(0x54, gbc.l());
        EXPECT(0x95e, gbc.sp());
        EXPECT(0x4b49, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0316
        gbc.setState(0xc170, 0xf060, 0xab40, 0x451a, 0xddc4, 0xecb, 0x0, 0x0);
        gbc.writeMem(0xc170, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x45, gbc.b());
        EXPECT(0x1a, gbc.c());
        EXPECT(0xdd, gbc.d());
        EXPECT(0xc4, gbc.e());
        EXPECT(0xe, gbc.h());
        EXPECT(0xcb, gbc.l());
        EXPECT(0xf060, gbc.sp());
        EXPECT(0xc171, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xc170));
        // AF 0317
        gbc.setState(0x3e4a, 0xdcb2, 0xb940, 0x7499, 0x8d1c, 0x4b6e, 0x1, 0x0);
        gbc.writeMem(0x3e4a, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x74, gbc.b());
        EXPECT(0x99, gbc.c());
        EXPECT(0x8d, gbc.d());
        EXPECT(0x1c, gbc.e());
        EXPECT(0x4b, gbc.h());
        EXPECT(0x6e, gbc.l());
        EXPECT(0xdcb2, gbc.sp());
        EXPECT(0x3e4b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0318
        gbc.setState(0x8578, 0x77ed, 0x48d0, 0xac62, 0xb78f, 0x8b45, 0x1, 0x0);
        gbc.writeMem(0x8578, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xac, gbc.b());
        EXPECT(0x62, gbc.c());
        EXPECT(0xb7, gbc.d());
        EXPECT(0x8f, gbc.e());
        EXPECT(0x8b, gbc.h());
        EXPECT(0x45, gbc.l());
        EXPECT(0x77ed, gbc.sp());
        EXPECT(0x8579, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x8578));
        // AF 0319
        gbc.setState(0xb61c, 0xa11a, 0xf1d0, 0x108b, 0x4dc5, 0x74b7, 0x1, 0x1);
        gbc.writeMem(0xb61c, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x10, gbc.b());
        EXPECT(0x8b, gbc.c());
        EXPECT(0x4d, gbc.d());
        EXPECT(0xc5, gbc.e());
        EXPECT(0x74, gbc.h());
        EXPECT(0xb7, gbc.l());
        EXPECT(0xa11a, gbc.sp());
        EXPECT(0xb61d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xb61c));
        // AF 031A
        gbc.setState(0x944b, 0xf5a3, 0x12a0, 0xd41d, 0xa805, 0x9f11, 0x0, 0x1);
        gbc.writeMem(0x944b, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xd4, gbc.b());
        EXPECT(0x1d, gbc.c());
        EXPECT(0xa8, gbc.d());
        EXPECT(0x5, gbc.e());
        EXPECT(0x9f, gbc.h());
        EXPECT(0x11, gbc.l());
        EXPECT(0xf5a3, gbc.sp());
        EXPECT(0x944c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x944b));
        // AF 031B
        gbc.setState(0xa568, 0x86b6, 0x1e0, 0x8bd8, 0x11bc, 0x9215, 0x1, 0x0);
        gbc.writeMem(0xa568, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x8b, gbc.b());
        EXPECT(0xd8, gbc.c());
        EXPECT(0x11, gbc.d());
        EXPECT(0xbc, gbc.e());
        EXPECT(0x92, gbc.h());
        EXPECT(0x15, gbc.l());
        EXPECT(0x86b6, gbc.sp());
        EXPECT(0xa569, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xa568));
        // AF 031C
        gbc.setState(0xa218, 0x95e5, 0xebe0, 0xed59, 0x4813, 0xc4af, 0x1, 0x0);
        gbc.writeMem(0xa218, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xed, gbc.b());
        EXPECT(0x59, gbc.c());
        EXPECT(0x48, gbc.d());
        EXPECT(0x13, gbc.e());
        EXPECT(0xc4, gbc.h());
        EXPECT(0xaf, gbc.l());
        EXPECT(0x95e5, gbc.sp());
        EXPECT(0xa219, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xa218));
        // AF 031D
        gbc.setState(0x127, 0xa732, 0x88a0, 0xfca1, 0x36b9, 0xeeef, 0x0, 0x0);
        gbc.writeMem(0x127, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xfc, gbc.b());
        EXPECT(0xa1, gbc.c());
        EXPECT(0x36, gbc.d());
        EXPECT(0xb9, gbc.e());
        EXPECT(0xee, gbc.h());
        EXPECT(0xef, gbc.l());
        EXPECT(0xa732, gbc.sp());
        EXPECT(0x128, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 031E
        gbc.setState(0x8b88, 0xe2d, 0x8eb0, 0x3321, 0xb50c, 0x4f6f, 0x0, 0x0);
        gbc.writeMem(0x8b88, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x33, gbc.b());
        EXPECT(0x21, gbc.c());
        EXPECT(0xb5, gbc.d());
        EXPECT(0xc, gbc.e());
        EXPECT(0x4f, gbc.h());
        EXPECT(0x6f, gbc.l());
        EXPECT(0xe2d, gbc.sp());
        EXPECT(0x8b89, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x8b88));
        // AF 031F
        gbc.setState(0x536e, 0x9e2b, 0x9120, 0x8895, 0xeafe, 0x956a, 0x0, 0x1);
        gbc.writeMem(0x536e, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x88, gbc.b());
        EXPECT(0x95, gbc.c());
        EXPECT(0xea, gbc.d());
        EXPECT(0xfe, gbc.e());
        EXPECT(0x95, gbc.h());
        EXPECT(0x6a, gbc.l());
        EXPECT(0x9e2b, gbc.sp());
        EXPECT(0x536f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0320
        gbc.setState(0x9424, 0x44cf, 0x69d0, 0xab23, 0x722, 0xa1e1, 0x1, 0x0);
        gbc.writeMem(0x9424, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xab, gbc.b());
        EXPECT(0x23, gbc.c());
        EXPECT(0x7, gbc.d());
        EXPECT(0x22, gbc.e());
        EXPECT(0xa1, gbc.h());
        EXPECT(0xe1, gbc.l());
        EXPECT(0x44cf, gbc.sp());
        EXPECT(0x9425, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x9424));
        // AF 0321
        gbc.setState(0xbde6, 0x9d7a, 0x48e0, 0x8670, 0xce45, 0x7087, 0x1, 0x1);
        gbc.writeMem(0xbde6, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x86, gbc.b());
        EXPECT(0x70, gbc.c());
        EXPECT(0xce, gbc.d());
        EXPECT(0x45, gbc.e());
        EXPECT(0x70, gbc.h());
        EXPECT(0x87, gbc.l());
        EXPECT(0x9d7a, gbc.sp());
        EXPECT(0xbde7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xbde6));
        // AF 0323
        gbc.setState(0x9278, 0x9804, 0xfc60, 0x311f, 0x6b61, 0x1081, 0x1, 0x1);
        gbc.writeMem(0x9278, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x31, gbc.b());
        EXPECT(0x1f, gbc.c());
        EXPECT(0x6b, gbc.d());
        EXPECT(0x61, gbc.e());
        EXPECT(0x10, gbc.h());
        EXPECT(0x81, gbc.l());
        EXPECT(0x9804, gbc.sp());
        EXPECT(0x9279, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x9278));
        // AF 0324
        gbc.setState(0x8c6e, 0xcc81, 0xfce0, 0x441a, 0xec17, 0xdfcc, 0x0, 0x1);
        gbc.writeMem(0x8c6e, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x44, gbc.b());
        EXPECT(0x1a, gbc.c());
        EXPECT(0xec, gbc.d());
        EXPECT(0x17, gbc.e());
        EXPECT(0xdf, gbc.h());
        EXPECT(0xcc, gbc.l());
        EXPECT(0xcc81, gbc.sp());
        EXPECT(0x8c6f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x8c6e));
        // AF 0325
        gbc.setState(0xe103, 0x3f56, 0x1df0, 0xd24b, 0xd0eb, 0xbfb9, 0x0, 0x1);
        gbc.writeMem(0xe103, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xd2, gbc.b());
        EXPECT(0x4b, gbc.c());
        EXPECT(0xd0, gbc.d());
        EXPECT(0xeb, gbc.e());
        EXPECT(0xbf, gbc.h());
        EXPECT(0xb9, gbc.l());
        EXPECT(0x3f56, gbc.sp());
        EXPECT(0xe104, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xe103));
        // AF 0326
        gbc.setState(0xcba5, 0x9efd, 0x4140, 0x7a87, 0x6623, 0xa53d, 0x0, 0x0);
        gbc.writeMem(0xcba5, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x7a, gbc.b());
        EXPECT(0x87, gbc.c());
        EXPECT(0x66, gbc.d());
        EXPECT(0x23, gbc.e());
        EXPECT(0xa5, gbc.h());
        EXPECT(0x3d, gbc.l());
        EXPECT(0x9efd, gbc.sp());
        EXPECT(0xcba6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xcba5));
        // AF 0327
        gbc.setState(0x443d, 0x57e1, 0xd940, 0xb82, 0x8797, 0xa585, 0x1, 0x0);
        gbc.writeMem(0x443d, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xb, gbc.b());
        EXPECT(0x82, gbc.c());
        EXPECT(0x87, gbc.d());
        EXPECT(0x97, gbc.e());
        EXPECT(0xa5, gbc.h());
        EXPECT(0x85, gbc.l());
        EXPECT(0x57e1, gbc.sp());
        EXPECT(0x443e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0328
        gbc.setState(0x21eb, 0x64a0, 0x9ca0, 0x8551, 0x71e4, 0xdcb9, 0x1, 0x1);
        gbc.writeMem(0x21eb, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x85, gbc.b());
        EXPECT(0x51, gbc.c());
        EXPECT(0x71, gbc.d());
        EXPECT(0xe4, gbc.e());
        EXPECT(0xdc, gbc.h());
        EXPECT(0xb9, gbc.l());
        EXPECT(0x64a0, gbc.sp());
        EXPECT(0x21ec, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0329
        gbc.setState(0x9d94, 0xde18, 0x72b0, 0xfb6e, 0x7cd8, 0x2fec, 0x1, 0x0);
        gbc.writeMem(0x9d94, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xfb, gbc.b());
        EXPECT(0x6e, gbc.c());
        EXPECT(0x7c, gbc.d());
        EXPECT(0xd8, gbc.e());
        EXPECT(0x2f, gbc.h());
        EXPECT(0xec, gbc.l());
        EXPECT(0xde18, gbc.sp());
        EXPECT(0x9d95, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x9d94));
        // AF 032A
        gbc.setState(0x4676, 0x5991, 0x5920, 0xecf5, 0x73f1, 0xa330, 0x0, 0x1);
        gbc.writeMem(0x4676, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xec, gbc.b());
        EXPECT(0xf5, gbc.c());
        EXPECT(0x73, gbc.d());
        EXPECT(0xf1, gbc.e());
        EXPECT(0xa3, gbc.h());
        EXPECT(0x30, gbc.l());
        EXPECT(0x5991, gbc.sp());
        EXPECT(0x4677, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 032B
        gbc.setState(0xd89f, 0xdb2c, 0xab90, 0xebaf, 0x4afa, 0xc0e7, 0x0, 0x0);
        gbc.writeMem(0xd89f, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xeb, gbc.b());
        EXPECT(0xaf, gbc.c());
        EXPECT(0x4a, gbc.d());
        EXPECT(0xfa, gbc.e());
        EXPECT(0xc0, gbc.h());
        EXPECT(0xe7, gbc.l());
        EXPECT(0xdb2c, gbc.sp());
        EXPECT(0xd8a0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xd89f));
        // AF 032C
        gbc.setState(0x44b3, 0x2976, 0xb140, 0xac6c, 0x93b0, 0x513a, 0x0, 0x1);
        gbc.writeMem(0x44b3, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xac, gbc.b());
        EXPECT(0x6c, gbc.c());
        EXPECT(0x93, gbc.d());
        EXPECT(0xb0, gbc.e());
        EXPECT(0x51, gbc.h());
        EXPECT(0x3a, gbc.l());
        EXPECT(0x2976, gbc.sp());
        EXPECT(0x44b4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 032D
        gbc.setState(0xd4d1, 0x978f, 0x1580, 0xd835, 0x1b1a, 0x18d0, 0x0, 0x1);
        gbc.writeMem(0xd4d1, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xd8, gbc.b());
        EXPECT(0x35, gbc.c());
        EXPECT(0x1b, gbc.d());
        EXPECT(0x1a, gbc.e());
        EXPECT(0x18, gbc.h());
        EXPECT(0xd0, gbc.l());
        EXPECT(0x978f, gbc.sp());
        EXPECT(0xd4d2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xd4d1));
        // AF 032E
        gbc.setState(0x6afa, 0xb91c, 0x73f0, 0x3790, 0x9aa0, 0x9e9f, 0x1, 0x1);
        gbc.writeMem(0x6afa, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x37, gbc.b());
        EXPECT(0x90, gbc.c());
        EXPECT(0x9a, gbc.d());
        EXPECT(0xa0, gbc.e());
        EXPECT(0x9e, gbc.h());
        EXPECT(0x9f, gbc.l());
        EXPECT(0xb91c, gbc.sp());
        EXPECT(0x6afb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 032F
        gbc.setState(0x3570, 0x699e, 0x3f70, 0x1479, 0x9942, 0xaf8f, 0x0, 0x1);
        gbc.writeMem(0x3570, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x14, gbc.b());
        EXPECT(0x79, gbc.c());
        EXPECT(0x99, gbc.d());
        EXPECT(0x42, gbc.e());
        EXPECT(0xaf, gbc.h());
        EXPECT(0x8f, gbc.l());
        EXPECT(0x699e, gbc.sp());
        EXPECT(0x3571, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0330
        gbc.setState(0xdabf, 0x6dd1, 0x2aa0, 0xae92, 0x6e94, 0x10e7, 0x1, 0x0);
        gbc.writeMem(0xdabf, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xae, gbc.b());
        EXPECT(0x92, gbc.c());
        EXPECT(0x6e, gbc.d());
        EXPECT(0x94, gbc.e());
        EXPECT(0x10, gbc.h());
        EXPECT(0xe7, gbc.l());
        EXPECT(0x6dd1, gbc.sp());
        EXPECT(0xdac0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xdabf));
        // AF 0331
        gbc.setState(0xee8f, 0x1a26, 0x7880, 0xe6f, 0x9235, 0x3f5f, 0x1, 0x0);
        gbc.writeMem(0xee8f, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xe, gbc.b());
        EXPECT(0x6f, gbc.c());
        EXPECT(0x92, gbc.d());
        EXPECT(0x35, gbc.e());
        EXPECT(0x3f, gbc.h());
        EXPECT(0x5f, gbc.l());
        EXPECT(0x1a26, gbc.sp());
        EXPECT(0xee90, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xee8f));
        // AF 0332
        gbc.setState(0x8005, 0xf53d, 0x1da0, 0x85dc, 0x7791, 0x2cd8, 0x0, 0x0);
        gbc.writeMem(0x8005, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x85, gbc.b());
        EXPECT(0xdc, gbc.c());
        EXPECT(0x77, gbc.d());
        EXPECT(0x91, gbc.e());
        EXPECT(0x2c, gbc.h());
        EXPECT(0xd8, gbc.l());
        EXPECT(0xf53d, gbc.sp());
        EXPECT(0x8006, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x8005));
        // AF 0333
        gbc.setState(0x4f9a, 0xb5fe, 0x8e00, 0x1e1e, 0x9e47, 0xdafc, 0x0, 0x0);
        gbc.writeMem(0x4f9a, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x1e, gbc.b());
        EXPECT(0x1e, gbc.c());
        EXPECT(0x9e, gbc.d());
        EXPECT(0x47, gbc.e());
        EXPECT(0xda, gbc.h());
        EXPECT(0xfc, gbc.l());
        EXPECT(0xb5fe, gbc.sp());
        EXPECT(0x4f9b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0334
        gbc.setState(0xcad8, 0xca31, 0xcf80, 0x8459, 0xaed3, 0x3612, 0x1, 0x0);
        gbc.writeMem(0xcad8, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x84, gbc.b());
        EXPECT(0x59, gbc.c());
        EXPECT(0xae, gbc.d());
        EXPECT(0xd3, gbc.e());
        EXPECT(0x36, gbc.h());
        EXPECT(0x12, gbc.l());
        EXPECT(0xca31, gbc.sp());
        EXPECT(0xcad9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xcad8));
        // AF 0335
        gbc.setState(0x7cb4, 0xc8d1, 0xc690, 0xa230, 0x5d7c, 0x49f7, 0x0, 0x1);
        gbc.writeMem(0x7cb4, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xa2, gbc.b());
        EXPECT(0x30, gbc.c());
        EXPECT(0x5d, gbc.d());
        EXPECT(0x7c, gbc.e());
        EXPECT(0x49, gbc.h());
        EXPECT(0xf7, gbc.l());
        EXPECT(0xc8d1, gbc.sp());
        EXPECT(0x7cb5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0336
        gbc.setState(0xc6ee, 0xa4d6, 0xb970, 0xe01c, 0x4b48, 0x5943, 0x0, 0x0);
        gbc.writeMem(0xc6ee, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xe0, gbc.b());
        EXPECT(0x1c, gbc.c());
        EXPECT(0x4b, gbc.d());
        EXPECT(0x48, gbc.e());
        EXPECT(0x59, gbc.h());
        EXPECT(0x43, gbc.l());
        EXPECT(0xa4d6, gbc.sp());
        EXPECT(0xc6ef, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xc6ee));
        // AF 0337
        gbc.setState(0xbe69, 0xbe05, 0xfc0, 0xf341, 0x7ae5, 0x49c9, 0x1, 0x0);
        gbc.writeMem(0xbe69, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xf3, gbc.b());
        EXPECT(0x41, gbc.c());
        EXPECT(0x7a, gbc.d());
        EXPECT(0xe5, gbc.e());
        EXPECT(0x49, gbc.h());
        EXPECT(0xc9, gbc.l());
        EXPECT(0xbe05, gbc.sp());
        EXPECT(0xbe6a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xbe69));
        // AF 0338
        gbc.setState(0x28f7, 0xfa6a, 0xb840, 0x16d7, 0x8e68, 0xa0a3, 0x1, 0x0);
        gbc.writeMem(0x28f7, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x16, gbc.b());
        EXPECT(0xd7, gbc.c());
        EXPECT(0x8e, gbc.d());
        EXPECT(0x68, gbc.e());
        EXPECT(0xa0, gbc.h());
        EXPECT(0xa3, gbc.l());
        EXPECT(0xfa6a, gbc.sp());
        EXPECT(0x28f8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0339
        gbc.setState(0x8b62, 0x718c, 0xae0, 0x398e, 0xc68f, 0xb5d6, 0x0, 0x1);
        gbc.writeMem(0x8b62, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x39, gbc.b());
        EXPECT(0x8e, gbc.c());
        EXPECT(0xc6, gbc.d());
        EXPECT(0x8f, gbc.e());
        EXPECT(0xb5, gbc.h());
        EXPECT(0xd6, gbc.l());
        EXPECT(0x718c, gbc.sp());
        EXPECT(0x8b63, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x8b62));
        // AF 033A
        gbc.setState(0x3102, 0x4e93, 0xaca0, 0xb14d, 0x22ba, 0xf4e, 0x1, 0x1);
        gbc.writeMem(0x3102, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xb1, gbc.b());
        EXPECT(0x4d, gbc.c());
        EXPECT(0x22, gbc.d());
        EXPECT(0xba, gbc.e());
        EXPECT(0xf, gbc.h());
        EXPECT(0x4e, gbc.l());
        EXPECT(0x4e93, gbc.sp());
        EXPECT(0x3103, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 033B
        gbc.setState(0x3371, 0x1e13, 0xf3e0, 0xa74e, 0xd45f, 0x9367, 0x1, 0x0);
        gbc.writeMem(0x3371, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xa7, gbc.b());
        EXPECT(0x4e, gbc.c());
        EXPECT(0xd4, gbc.d());
        EXPECT(0x5f, gbc.e());
        EXPECT(0x93, gbc.h());
        EXPECT(0x67, gbc.l());
        EXPECT(0x1e13, gbc.sp());
        EXPECT(0x3372, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 033C
        gbc.setState(0x973c, 0xadc1, 0xd370, 0xcbe8, 0x8710, 0xa157, 0x0, 0x0);
        gbc.writeMem(0x973c, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xcb, gbc.b());
        EXPECT(0xe8, gbc.c());
        EXPECT(0x87, gbc.d());
        EXPECT(0x10, gbc.e());
        EXPECT(0xa1, gbc.h());
        EXPECT(0x57, gbc.l());
        EXPECT(0xadc1, gbc.sp());
        EXPECT(0x973d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x973c));
        // AF 033D
        gbc.setState(0xdc38, 0x1b2a, 0x79d0, 0x3c3, 0xe478, 0xbc3f, 0x1, 0x1);
        gbc.writeMem(0xdc38, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x3, gbc.b());
        EXPECT(0xc3, gbc.c());
        EXPECT(0xe4, gbc.d());
        EXPECT(0x78, gbc.e());
        EXPECT(0xbc, gbc.h());
        EXPECT(0x3f, gbc.l());
        EXPECT(0x1b2a, gbc.sp());
        EXPECT(0xdc39, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xdc38));
        // AF 033E
        gbc.setState(0x3748, 0x545d, 0xdf10, 0x95b3, 0xc71b, 0x711, 0x1, 0x1);
        gbc.writeMem(0x3748, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x95, gbc.b());
        EXPECT(0xb3, gbc.c());
        EXPECT(0xc7, gbc.d());
        EXPECT(0x1b, gbc.e());
        EXPECT(0x7, gbc.h());
        EXPECT(0x11, gbc.l());
        EXPECT(0x545d, gbc.sp());
        EXPECT(0x3749, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 033F
        gbc.setState(0xa672, 0x3fc6, 0x35d0, 0xc5d5, 0x15f5, 0x7a24, 0x1, 0x1);
        gbc.writeMem(0xa672, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xc5, gbc.b());
        EXPECT(0xd5, gbc.c());
        EXPECT(0x15, gbc.d());
        EXPECT(0xf5, gbc.e());
        EXPECT(0x7a, gbc.h());
        EXPECT(0x24, gbc.l());
        EXPECT(0x3fc6, gbc.sp());
        EXPECT(0xa673, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xa672));
        // AF 0341
        gbc.setState(0xe666, 0x7640, 0x54a0, 0x566c, 0x644b, 0xd736, 0x1, 0x0);
        gbc.writeMem(0xe666, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x56, gbc.b());
        EXPECT(0x6c, gbc.c());
        EXPECT(0x64, gbc.d());
        EXPECT(0x4b, gbc.e());
        EXPECT(0xd7, gbc.h());
        EXPECT(0x36, gbc.l());
        EXPECT(0x7640, gbc.sp());
        EXPECT(0xe667, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xe666));
        // AF 0342
        gbc.setState(0x1f14, 0xc874, 0x8680, 0x987c, 0x2ef5, 0xe5d8, 0x1, 0x0);
        gbc.writeMem(0x1f14, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x98, gbc.b());
        EXPECT(0x7c, gbc.c());
        EXPECT(0x2e, gbc.d());
        EXPECT(0xf5, gbc.e());
        EXPECT(0xe5, gbc.h());
        EXPECT(0xd8, gbc.l());
        EXPECT(0xc874, gbc.sp());
        EXPECT(0x1f15, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0343
        gbc.setState(0x47da, 0x4e9d, 0x2d00, 0x147c, 0x5f89, 0xb013, 0x1, 0x0);
        gbc.writeMem(0x47da, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x14, gbc.b());
        EXPECT(0x7c, gbc.c());
        EXPECT(0x5f, gbc.d());
        EXPECT(0x89, gbc.e());
        EXPECT(0xb0, gbc.h());
        EXPECT(0x13, gbc.l());
        EXPECT(0x4e9d, gbc.sp());
        EXPECT(0x47db, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0344
        gbc.setState(0x9ed4, 0x3e1c, 0xab50, 0x200a, 0xd800, 0xef8, 0x1, 0x1);
        gbc.writeMem(0x9ed4, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x20, gbc.b());
        EXPECT(0xa, gbc.c());
        EXPECT(0xd8, gbc.d());
        EXPECT(0x0, gbc.e());
        EXPECT(0xe, gbc.h());
        EXPECT(0xf8, gbc.l());
        EXPECT(0x3e1c, gbc.sp());
        EXPECT(0x9ed5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x9ed4));
        // AF 0345
        gbc.setState(0x9b4c, 0xb9e7, 0x2a40, 0xa7cc, 0xd773, 0xef6f, 0x0, 0x0);
        gbc.writeMem(0x9b4c, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xa7, gbc.b());
        EXPECT(0xcc, gbc.c());
        EXPECT(0xd7, gbc.d());
        EXPECT(0x73, gbc.e());
        EXPECT(0xef, gbc.h());
        EXPECT(0x6f, gbc.l());
        EXPECT(0xb9e7, gbc.sp());
        EXPECT(0x9b4d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x9b4c));
        // AF 0346
        gbc.setState(0xea2a, 0xf317, 0x4920, 0xd3b7, 0x1f51, 0x7bcd, 0x0, 0x0);
        gbc.writeMem(0xea2a, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xd3, gbc.b());
        EXPECT(0xb7, gbc.c());
        EXPECT(0x1f, gbc.d());
        EXPECT(0x51, gbc.e());
        EXPECT(0x7b, gbc.h());
        EXPECT(0xcd, gbc.l());
        EXPECT(0xf317, gbc.sp());
        EXPECT(0xea2b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xea2a));
        // AF 0347
        gbc.setState(0x98ad, 0xbf7b, 0x6d90, 0x4b43, 0xda58, 0xa3db, 0x1, 0x1);
        gbc.writeMem(0x98ad, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x4b, gbc.b());
        EXPECT(0x43, gbc.c());
        EXPECT(0xda, gbc.d());
        EXPECT(0x58, gbc.e());
        EXPECT(0xa3, gbc.h());
        EXPECT(0xdb, gbc.l());
        EXPECT(0xbf7b, gbc.sp());
        EXPECT(0x98ae, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x98ad));
        // AF 0348
        gbc.setState(0xdad1, 0x19a7, 0x5190, 0xb616, 0x2b07, 0x1a1f, 0x0, 0x0);
        gbc.writeMem(0xdad1, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xb6, gbc.b());
        EXPECT(0x16, gbc.c());
        EXPECT(0x2b, gbc.d());
        EXPECT(0x7, gbc.e());
        EXPECT(0x1a, gbc.h());
        EXPECT(0x1f, gbc.l());
        EXPECT(0x19a7, gbc.sp());
        EXPECT(0xdad2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xdad1));
        // AF 0349
        gbc.setState(0x914, 0x24da, 0x4d80, 0xbf8, 0x4ca7, 0x7728, 0x1, 0x1);
        gbc.writeMem(0x914, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xb, gbc.b());
        EXPECT(0xf8, gbc.c());
        EXPECT(0x4c, gbc.d());
        EXPECT(0xa7, gbc.e());
        EXPECT(0x77, gbc.h());
        EXPECT(0x28, gbc.l());
        EXPECT(0x24da, gbc.sp());
        EXPECT(0x915, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 034A
        gbc.setState(0xcc4, 0x35d5, 0x2e30, 0x86e3, 0xa74, 0x12ea, 0x0, 0x1);
        gbc.writeMem(0xcc4, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x86, gbc.b());
        EXPECT(0xe3, gbc.c());
        EXPECT(0xa, gbc.d());
        EXPECT(0x74, gbc.e());
        EXPECT(0x12, gbc.h());
        EXPECT(0xea, gbc.l());
        EXPECT(0x35d5, gbc.sp());
        EXPECT(0xcc5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 034B
        gbc.setState(0x1cd, 0x6f00, 0x9750, 0x7a43, 0xc194, 0xa551, 0x0, 0x0);
        gbc.writeMem(0x1cd, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x7a, gbc.b());
        EXPECT(0x43, gbc.c());
        EXPECT(0xc1, gbc.d());
        EXPECT(0x94, gbc.e());
        EXPECT(0xa5, gbc.h());
        EXPECT(0x51, gbc.l());
        EXPECT(0x6f00, gbc.sp());
        EXPECT(0x1ce, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 034C
        gbc.setState(0xe87f, 0xce16, 0x7bb0, 0x308a, 0x413, 0x5b86, 0x1, 0x1);
        gbc.writeMem(0xe87f, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x30, gbc.b());
        EXPECT(0x8a, gbc.c());
        EXPECT(0x4, gbc.d());
        EXPECT(0x13, gbc.e());
        EXPECT(0x5b, gbc.h());
        EXPECT(0x86, gbc.l());
        EXPECT(0xce16, gbc.sp());
        EXPECT(0xe880, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xe87f));
        // AF 034D
        gbc.setState(0xd9a5, 0x1041, 0x1030, 0x611e, 0x201c, 0x3f44, 0x0, 0x0);
        gbc.writeMem(0xd9a5, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x61, gbc.b());
        EXPECT(0x1e, gbc.c());
        EXPECT(0x20, gbc.d());
        EXPECT(0x1c, gbc.e());
        EXPECT(0x3f, gbc.h());
        EXPECT(0x44, gbc.l());
        EXPECT(0x1041, gbc.sp());
        EXPECT(0xd9a6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xd9a5));
        // AF 034E
        gbc.setState(0x2394, 0x5444, 0x6090, 0x97fb, 0x4a1a, 0xd993, 0x0, 0x1);
        gbc.writeMem(0x2394, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x97, gbc.b());
        EXPECT(0xfb, gbc.c());
        EXPECT(0x4a, gbc.d());
        EXPECT(0x1a, gbc.e());
        EXPECT(0xd9, gbc.h());
        EXPECT(0x93, gbc.l());
        EXPECT(0x5444, gbc.sp());
        EXPECT(0x2395, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 034F
        gbc.setState(0x8ea7, 0x15c2, 0xfac0, 0x1ec8, 0x9b48, 0xa431, 0x0, 0x0);
        gbc.writeMem(0x8ea7, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x1e, gbc.b());
        EXPECT(0xc8, gbc.c());
        EXPECT(0x9b, gbc.d());
        EXPECT(0x48, gbc.e());
        EXPECT(0xa4, gbc.h());
        EXPECT(0x31, gbc.l());
        EXPECT(0x15c2, gbc.sp());
        EXPECT(0x8ea8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x8ea7));
        // AF 0350
        gbc.setState(0x18bd, 0x7322, 0xfc00, 0xd47e, 0xcc4d, 0xca83, 0x1, 0x1);
        gbc.writeMem(0x18bd, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xd4, gbc.b());
        EXPECT(0x7e, gbc.c());
        EXPECT(0xcc, gbc.d());
        EXPECT(0x4d, gbc.e());
        EXPECT(0xca, gbc.h());
        EXPECT(0x83, gbc.l());
        EXPECT(0x7322, gbc.sp());
        EXPECT(0x18be, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0351
        gbc.setState(0x2e73, 0x9e8, 0x1290, 0xfb56, 0x27ff, 0x32ce, 0x0, 0x1);
        gbc.writeMem(0x2e73, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xfb, gbc.b());
        EXPECT(0x56, gbc.c());
        EXPECT(0x27, gbc.d());
        EXPECT(0xff, gbc.e());
        EXPECT(0x32, gbc.h());
        EXPECT(0xce, gbc.l());
        EXPECT(0x9e8, gbc.sp());
        EXPECT(0x2e74, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0352
        gbc.setState(0xe4a, 0x7f31, 0x8350, 0x57ef, 0xd56, 0xdb88, 0x1, 0x0);
        gbc.writeMem(0xe4a, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x57, gbc.b());
        EXPECT(0xef, gbc.c());
        EXPECT(0xd, gbc.d());
        EXPECT(0x56, gbc.e());
        EXPECT(0xdb, gbc.h());
        EXPECT(0x88, gbc.l());
        EXPECT(0x7f31, gbc.sp());
        EXPECT(0xe4b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0353
        gbc.setState(0x6f2a, 0xbdd3, 0x17c0, 0x372a, 0xf385, 0x686f, 0x1, 0x1);
        gbc.writeMem(0x6f2a, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x37, gbc.b());
        EXPECT(0x2a, gbc.c());
        EXPECT(0xf3, gbc.d());
        EXPECT(0x85, gbc.e());
        EXPECT(0x68, gbc.h());
        EXPECT(0x6f, gbc.l());
        EXPECT(0xbdd3, gbc.sp());
        EXPECT(0x6f2b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0354
        gbc.setState(0x877f, 0xee11, 0x3160, 0xd7d6, 0x22e5, 0xda1d, 0x1, 0x0);
        gbc.writeMem(0x877f, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xd7, gbc.b());
        EXPECT(0xd6, gbc.c());
        EXPECT(0x22, gbc.d());
        EXPECT(0xe5, gbc.e());
        EXPECT(0xda, gbc.h());
        EXPECT(0x1d, gbc.l());
        EXPECT(0xee11, gbc.sp());
        EXPECT(0x8780, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x877f));
        // AF 0355
        gbc.setState(0x1717, 0x5b1e, 0xf030, 0x8505, 0xc6fc, 0x20e5, 0x0, 0x1);
        gbc.writeMem(0x1717, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x85, gbc.b());
        EXPECT(0x5, gbc.c());
        EXPECT(0xc6, gbc.d());
        EXPECT(0xfc, gbc.e());
        EXPECT(0x20, gbc.h());
        EXPECT(0xe5, gbc.l());
        EXPECT(0x5b1e, gbc.sp());
        EXPECT(0x1718, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0356
        gbc.setState(0x24f4, 0xd89b, 0x44e0, 0x1091, 0xaa85, 0x3bd2, 0x1, 0x1);
        gbc.writeMem(0x24f4, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x10, gbc.b());
        EXPECT(0x91, gbc.c());
        EXPECT(0xaa, gbc.d());
        EXPECT(0x85, gbc.e());
        EXPECT(0x3b, gbc.h());
        EXPECT(0xd2, gbc.l());
        EXPECT(0xd89b, gbc.sp());
        EXPECT(0x24f5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0357
        gbc.setState(0x74a5, 0x9af6, 0x1210, 0xb4b4, 0x1b11, 0x32a, 0x0, 0x1);
        gbc.writeMem(0x74a5, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xb4, gbc.b());
        EXPECT(0xb4, gbc.c());
        EXPECT(0x1b, gbc.d());
        EXPECT(0x11, gbc.e());
        EXPECT(0x3, gbc.h());
        EXPECT(0x2a, gbc.l());
        EXPECT(0x9af6, gbc.sp());
        EXPECT(0x74a6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0358
        gbc.setState(0x82be, 0x138d, 0x6200, 0x8690, 0x58c7, 0xe2bb, 0x0, 0x0);
        gbc.writeMem(0x82be, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x86, gbc.b());
        EXPECT(0x90, gbc.c());
        EXPECT(0x58, gbc.d());
        EXPECT(0xc7, gbc.e());
        EXPECT(0xe2, gbc.h());
        EXPECT(0xbb, gbc.l());
        EXPECT(0x138d, gbc.sp());
        EXPECT(0x82bf, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x82be));
        // AF 0359
        gbc.setState(0x3e47, 0x640f, 0x63d0, 0x3967, 0xd9cb, 0x1c39, 0x0, 0x1);
        gbc.writeMem(0x3e47, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x39, gbc.b());
        EXPECT(0x67, gbc.c());
        EXPECT(0xd9, gbc.d());
        EXPECT(0xcb, gbc.e());
        EXPECT(0x1c, gbc.h());
        EXPECT(0x39, gbc.l());
        EXPECT(0x640f, gbc.sp());
        EXPECT(0x3e48, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 035A
        gbc.setState(0xd8a0, 0x4004, 0x5a90, 0xef7f, 0xaf5b, 0x17ba, 0x0, 0x0);
        gbc.writeMem(0xd8a0, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xef, gbc.b());
        EXPECT(0x7f, gbc.c());
        EXPECT(0xaf, gbc.d());
        EXPECT(0x5b, gbc.e());
        EXPECT(0x17, gbc.h());
        EXPECT(0xba, gbc.l());
        EXPECT(0x4004, gbc.sp());
        EXPECT(0xd8a1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xd8a0));
        // AF 035B
        gbc.setState(0x7625, 0x14c8, 0x3280, 0xe9e5, 0x9259, 0x2c62, 0x0, 0x1);
        gbc.writeMem(0x7625, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xe9, gbc.b());
        EXPECT(0xe5, gbc.c());
        EXPECT(0x92, gbc.d());
        EXPECT(0x59, gbc.e());
        EXPECT(0x2c, gbc.h());
        EXPECT(0x62, gbc.l());
        EXPECT(0x14c8, gbc.sp());
        EXPECT(0x7626, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 035C
        gbc.setState(0x9fa1, 0xc636, 0xaa00, 0xd0d4, 0x8e43, 0x456d, 0x1, 0x0);
        gbc.writeMem(0x9fa1, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xd0, gbc.b());
        EXPECT(0xd4, gbc.c());
        EXPECT(0x8e, gbc.d());
        EXPECT(0x43, gbc.e());
        EXPECT(0x45, gbc.h());
        EXPECT(0x6d, gbc.l());
        EXPECT(0xc636, gbc.sp());
        EXPECT(0x9fa2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x9fa1));
        // AF 035D
        gbc.setState(0x5879, 0x1ee4, 0xefa0, 0x1d20, 0xce6, 0xbd8b, 0x0, 0x1);
        gbc.writeMem(0x5879, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x1d, gbc.b());
        EXPECT(0x20, gbc.c());
        EXPECT(0xc, gbc.d());
        EXPECT(0xe6, gbc.e());
        EXPECT(0xbd, gbc.h());
        EXPECT(0x8b, gbc.l());
        EXPECT(0x1ee4, gbc.sp());
        EXPECT(0x587a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 035E
        gbc.setState(0xa9b3, 0x6c30, 0x3e0, 0xcf06, 0x9ee1, 0xec9d, 0x0, 0x1);
        gbc.writeMem(0xa9b3, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xcf, gbc.b());
        EXPECT(0x6, gbc.c());
        EXPECT(0x9e, gbc.d());
        EXPECT(0xe1, gbc.e());
        EXPECT(0xec, gbc.h());
        EXPECT(0x9d, gbc.l());
        EXPECT(0x6c30, gbc.sp());
        EXPECT(0xa9b4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xa9b3));
        // AF 035F
        gbc.setState(0x6ff0, 0x2cca, 0xa120, 0xd42, 0xc40, 0xbdff, 0x0, 0x1);
        gbc.writeMem(0x6ff0, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xd, gbc.b());
        EXPECT(0x42, gbc.c());
        EXPECT(0xc, gbc.d());
        EXPECT(0x40, gbc.e());
        EXPECT(0xbd, gbc.h());
        EXPECT(0xff, gbc.l());
        EXPECT(0x2cca, gbc.sp());
        EXPECT(0x6ff1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0360
        gbc.setState(0xb3eb, 0x5f0c, 0xd940, 0x2055, 0x923d, 0x536f, 0x0, 0x0);
        gbc.writeMem(0xb3eb, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x20, gbc.b());
        EXPECT(0x55, gbc.c());
        EXPECT(0x92, gbc.d());
        EXPECT(0x3d, gbc.e());
        EXPECT(0x53, gbc.h());
        EXPECT(0x6f, gbc.l());
        EXPECT(0x5f0c, gbc.sp());
        EXPECT(0xb3ec, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xb3eb));
        // AF 0361
        gbc.setState(0x5673, 0x80b0, 0x3940, 0xd702, 0x4b29, 0xb534, 0x1, 0x0);
        gbc.writeMem(0x5673, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xd7, gbc.b());
        EXPECT(0x2, gbc.c());
        EXPECT(0x4b, gbc.d());
        EXPECT(0x29, gbc.e());
        EXPECT(0xb5, gbc.h());
        EXPECT(0x34, gbc.l());
        EXPECT(0x80b0, gbc.sp());
        EXPECT(0x5674, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0362
        gbc.setState(0xec15, 0x5408, 0x4e30, 0xef24, 0x22be, 0x7da9, 0x0, 0x0);
        gbc.writeMem(0xec15, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xef, gbc.b());
        EXPECT(0x24, gbc.c());
        EXPECT(0x22, gbc.d());
        EXPECT(0xbe, gbc.e());
        EXPECT(0x7d, gbc.h());
        EXPECT(0xa9, gbc.l());
        EXPECT(0x5408, gbc.sp());
        EXPECT(0xec16, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xec15));
        // AF 0363
        gbc.setState(0x3162, 0xa042, 0x4dc0, 0xacb1, 0x712c, 0x95c6, 0x0, 0x0);
        gbc.writeMem(0x3162, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xac, gbc.b());
        EXPECT(0xb1, gbc.c());
        EXPECT(0x71, gbc.d());
        EXPECT(0x2c, gbc.e());
        EXPECT(0x95, gbc.h());
        EXPECT(0xc6, gbc.l());
        EXPECT(0xa042, gbc.sp());
        EXPECT(0x3163, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0364
        gbc.setState(0x604c, 0x5d12, 0xa740, 0xf8e9, 0xeb6f, 0x835f, 0x0, 0x1);
        gbc.writeMem(0x604c, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xf8, gbc.b());
        EXPECT(0xe9, gbc.c());
        EXPECT(0xeb, gbc.d());
        EXPECT(0x6f, gbc.e());
        EXPECT(0x83, gbc.h());
        EXPECT(0x5f, gbc.l());
        EXPECT(0x5d12, gbc.sp());
        EXPECT(0x604d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0365
        gbc.setState(0xc899, 0x2cff, 0xa810, 0x7915, 0xebe1, 0x1325, 0x1, 0x0);
        gbc.writeMem(0xc899, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x79, gbc.b());
        EXPECT(0x15, gbc.c());
        EXPECT(0xeb, gbc.d());
        EXPECT(0xe1, gbc.e());
        EXPECT(0x13, gbc.h());
        EXPECT(0x25, gbc.l());
        EXPECT(0x2cff, gbc.sp());
        EXPECT(0xc89a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xc899));
        // AF 0366
        gbc.setState(0xa6eb, 0x7bdf, 0xf630, 0x837d, 0x7a88, 0x21c7, 0x0, 0x1);
        gbc.writeMem(0xa6eb, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x83, gbc.b());
        EXPECT(0x7d, gbc.c());
        EXPECT(0x7a, gbc.d());
        EXPECT(0x88, gbc.e());
        EXPECT(0x21, gbc.h());
        EXPECT(0xc7, gbc.l());
        EXPECT(0x7bdf, gbc.sp());
        EXPECT(0xa6ec, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xa6eb));
        // AF 0367
        gbc.setState(0x66c3, 0xeff2, 0xd7a0, 0x1603, 0x3d7e, 0x31b1, 0x0, 0x0);
        gbc.writeMem(0x66c3, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x16, gbc.b());
        EXPECT(0x3, gbc.c());
        EXPECT(0x3d, gbc.d());
        EXPECT(0x7e, gbc.e());
        EXPECT(0x31, gbc.h());
        EXPECT(0xb1, gbc.l());
        EXPECT(0xeff2, gbc.sp());
        EXPECT(0x66c4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0368
        gbc.setState(0xa29a, 0xa2be, 0x2740, 0xb5f7, 0x8581, 0x83c9, 0x1, 0x1);
        gbc.writeMem(0xa29a, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xb5, gbc.b());
        EXPECT(0xf7, gbc.c());
        EXPECT(0x85, gbc.d());
        EXPECT(0x81, gbc.e());
        EXPECT(0x83, gbc.h());
        EXPECT(0xc9, gbc.l());
        EXPECT(0xa2be, gbc.sp());
        EXPECT(0xa29b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xa29a));
        // AF 0369
        gbc.setState(0x2cdb, 0xcffc, 0xda60, 0xf1f7, 0x30f3, 0xe941, 0x0, 0x0);
        gbc.writeMem(0x2cdb, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xf1, gbc.b());
        EXPECT(0xf7, gbc.c());
        EXPECT(0x30, gbc.d());
        EXPECT(0xf3, gbc.e());
        EXPECT(0xe9, gbc.h());
        EXPECT(0x41, gbc.l());
        EXPECT(0xcffc, gbc.sp());
        EXPECT(0x2cdc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 036A
        gbc.setState(0x1b5a, 0xd6dc, 0x2c00, 0x4ec2, 0x5b2d, 0xe18a, 0x1, 0x1);
        gbc.writeMem(0x1b5a, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x4e, gbc.b());
        EXPECT(0xc2, gbc.c());
        EXPECT(0x5b, gbc.d());
        EXPECT(0x2d, gbc.e());
        EXPECT(0xe1, gbc.h());
        EXPECT(0x8a, gbc.l());
        EXPECT(0xd6dc, gbc.sp());
        EXPECT(0x1b5b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 036B
        gbc.setState(0x9fae, 0x17f0, 0xbe30, 0x2eec, 0x188d, 0xf826, 0x1, 0x1);
        gbc.writeMem(0x9fae, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x2e, gbc.b());
        EXPECT(0xec, gbc.c());
        EXPECT(0x18, gbc.d());
        EXPECT(0x8d, gbc.e());
        EXPECT(0xf8, gbc.h());
        EXPECT(0x26, gbc.l());
        EXPECT(0x17f0, gbc.sp());
        EXPECT(0x9faf, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x9fae));
        // AF 036C
        gbc.setState(0x5d38, 0xd7f1, 0x9ec0, 0x19f5, 0xcba2, 0x388e, 0x0, 0x0);
        gbc.writeMem(0x5d38, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x19, gbc.b());
        EXPECT(0xf5, gbc.c());
        EXPECT(0xcb, gbc.d());
        EXPECT(0xa2, gbc.e());
        EXPECT(0x38, gbc.h());
        EXPECT(0x8e, gbc.l());
        EXPECT(0xd7f1, gbc.sp());
        EXPECT(0x5d39, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 036D
        gbc.setState(0x2b9f, 0xf112, 0xb440, 0x3294, 0xcc1, 0x396a, 0x1, 0x0);
        gbc.writeMem(0x2b9f, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x32, gbc.b());
        EXPECT(0x94, gbc.c());
        EXPECT(0xc, gbc.d());
        EXPECT(0xc1, gbc.e());
        EXPECT(0x39, gbc.h());
        EXPECT(0x6a, gbc.l());
        EXPECT(0xf112, gbc.sp());
        EXPECT(0x2ba0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 036E
        gbc.setState(0xc52f, 0x7e46, 0x3870, 0x584a, 0xcdba, 0xaeda, 0x0, 0x0);
        gbc.writeMem(0xc52f, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x58, gbc.b());
        EXPECT(0x4a, gbc.c());
        EXPECT(0xcd, gbc.d());
        EXPECT(0xba, gbc.e());
        EXPECT(0xae, gbc.h());
        EXPECT(0xda, gbc.l());
        EXPECT(0x7e46, gbc.sp());
        EXPECT(0xc530, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xc52f));
        // AF 036F
        gbc.setState(0x3d3c, 0xa8bd, 0x8ae0, 0xefd0, 0xb1c9, 0xb8a6, 0x1, 0x0);
        gbc.writeMem(0x3d3c, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xef, gbc.b());
        EXPECT(0xd0, gbc.c());
        EXPECT(0xb1, gbc.d());
        EXPECT(0xc9, gbc.e());
        EXPECT(0xb8, gbc.h());
        EXPECT(0xa6, gbc.l());
        EXPECT(0xa8bd, gbc.sp());
        EXPECT(0x3d3d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0370
        gbc.setState(0x7bb5, 0xe2a0, 0xdd50, 0x7abd, 0x63fc, 0x82a0, 0x1, 0x0);
        gbc.writeMem(0x7bb5, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x7a, gbc.b());
        EXPECT(0xbd, gbc.c());
        EXPECT(0x63, gbc.d());
        EXPECT(0xfc, gbc.e());
        EXPECT(0x82, gbc.h());
        EXPECT(0xa0, gbc.l());
        EXPECT(0xe2a0, gbc.sp());
        EXPECT(0x7bb6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0371
        gbc.setState(0x8aa0, 0xf6bd, 0x2040, 0x2ae1, 0x628d, 0xd4b4, 0x1, 0x1);
        gbc.writeMem(0x8aa0, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x2a, gbc.b());
        EXPECT(0xe1, gbc.c());
        EXPECT(0x62, gbc.d());
        EXPECT(0x8d, gbc.e());
        EXPECT(0xd4, gbc.h());
        EXPECT(0xb4, gbc.l());
        EXPECT(0xf6bd, gbc.sp());
        EXPECT(0x8aa1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x8aa0));
        // AF 0372
        gbc.setState(0x9942, 0x89af, 0x2520, 0x6193, 0xdc88, 0x849e, 0x0, 0x0);
        gbc.writeMem(0x9942, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x61, gbc.b());
        EXPECT(0x93, gbc.c());
        EXPECT(0xdc, gbc.d());
        EXPECT(0x88, gbc.e());
        EXPECT(0x84, gbc.h());
        EXPECT(0x9e, gbc.l());
        EXPECT(0x89af, gbc.sp());
        EXPECT(0x9943, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x9942));
        // AF 0373
        gbc.setState(0x228, 0x8b51, 0x2ed0, 0x77d9, 0x268a, 0xf598, 0x0, 0x1);
        gbc.writeMem(0x228, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x77, gbc.b());
        EXPECT(0xd9, gbc.c());
        EXPECT(0x26, gbc.d());
        EXPECT(0x8a, gbc.e());
        EXPECT(0xf5, gbc.h());
        EXPECT(0x98, gbc.l());
        EXPECT(0x8b51, gbc.sp());
        EXPECT(0x229, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0374
        gbc.setState(0x62cb, 0x7737, 0x6980, 0x9eac, 0x72ed, 0x5c2, 0x1, 0x0);
        gbc.writeMem(0x62cb, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x9e, gbc.b());
        EXPECT(0xac, gbc.c());
        EXPECT(0x72, gbc.d());
        EXPECT(0xed, gbc.e());
        EXPECT(0x5, gbc.h());
        EXPECT(0xc2, gbc.l());
        EXPECT(0x7737, gbc.sp());
        EXPECT(0x62cc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0375
        gbc.setState(0xc7e4, 0x16a2, 0x12f0, 0x7f81, 0xcb46, 0x2c89, 0x1, 0x0);
        gbc.writeMem(0xc7e4, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x7f, gbc.b());
        EXPECT(0x81, gbc.c());
        EXPECT(0xcb, gbc.d());
        EXPECT(0x46, gbc.e());
        EXPECT(0x2c, gbc.h());
        EXPECT(0x89, gbc.l());
        EXPECT(0x16a2, gbc.sp());
        EXPECT(0xc7e5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xc7e4));
        // AF 0376
        gbc.setState(0x5f2a, 0xd534, 0x5820, 0xe7a8, 0xeff9, 0x543f, 0x0, 0x1);
        gbc.writeMem(0x5f2a, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xe7, gbc.b());
        EXPECT(0xa8, gbc.c());
        EXPECT(0xef, gbc.d());
        EXPECT(0xf9, gbc.e());
        EXPECT(0x54, gbc.h());
        EXPECT(0x3f, gbc.l());
        EXPECT(0xd534, gbc.sp());
        EXPECT(0x5f2b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0377
        gbc.setState(0x7ef5, 0xfc98, 0xe850, 0x29ac, 0x943, 0xb933, 0x1, 0x1);
        gbc.writeMem(0x7ef5, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x29, gbc.b());
        EXPECT(0xac, gbc.c());
        EXPECT(0x9, gbc.d());
        EXPECT(0x43, gbc.e());
        EXPECT(0xb9, gbc.h());
        EXPECT(0x33, gbc.l());
        EXPECT(0xfc98, gbc.sp());
        EXPECT(0x7ef6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0379
        gbc.setState(0xd081, 0xab14, 0x4fe0, 0x3d17, 0x5045, 0xb04e, 0x0, 0x1);
        gbc.writeMem(0xd081, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x3d, gbc.b());
        EXPECT(0x17, gbc.c());
        EXPECT(0x50, gbc.d());
        EXPECT(0x45, gbc.e());
        EXPECT(0xb0, gbc.h());
        EXPECT(0x4e, gbc.l());
        EXPECT(0xab14, gbc.sp());
        EXPECT(0xd082, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xd081));
        // AF 037A
        gbc.setState(0x639c, 0x6482, 0xdad0, 0x7245, 0x1903, 0xeff7, 0x1, 0x1);
        gbc.writeMem(0x639c, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x72, gbc.b());
        EXPECT(0x45, gbc.c());
        EXPECT(0x19, gbc.d());
        EXPECT(0x3, gbc.e());
        EXPECT(0xef, gbc.h());
        EXPECT(0xf7, gbc.l());
        EXPECT(0x6482, gbc.sp());
        EXPECT(0x639d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 037B
        gbc.setState(0xc821, 0x21b, 0xf370, 0x75db, 0x1140, 0x882c, 0x1, 0x1);
        gbc.writeMem(0xc821, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x75, gbc.b());
        EXPECT(0xdb, gbc.c());
        EXPECT(0x11, gbc.d());
        EXPECT(0x40, gbc.e());
        EXPECT(0x88, gbc.h());
        EXPECT(0x2c, gbc.l());
        EXPECT(0x21b, gbc.sp());
        EXPECT(0xc822, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xc821));
        // AF 037C
        gbc.setState(0x96ab, 0x9190, 0xc9d0, 0x9b1d, 0xe418, 0x3abe, 0x0, 0x0);
        gbc.writeMem(0x96ab, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x9b, gbc.b());
        EXPECT(0x1d, gbc.c());
        EXPECT(0xe4, gbc.d());
        EXPECT(0x18, gbc.e());
        EXPECT(0x3a, gbc.h());
        EXPECT(0xbe, gbc.l());
        EXPECT(0x9190, gbc.sp());
        EXPECT(0x96ac, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x96ab));
        // AF 037D
        gbc.setState(0x3342, 0x83f8, 0x8c50, 0xcf23, 0x25a3, 0xb1ae, 0x1, 0x0);
        gbc.writeMem(0x3342, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xcf, gbc.b());
        EXPECT(0x23, gbc.c());
        EXPECT(0x25, gbc.d());
        EXPECT(0xa3, gbc.e());
        EXPECT(0xb1, gbc.h());
        EXPECT(0xae, gbc.l());
        EXPECT(0x83f8, gbc.sp());
        EXPECT(0x3343, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 037E
        gbc.setState(0x9a28, 0x8d30, 0x8e90, 0xa472, 0x4ded, 0x804a, 0x0, 0x0);
        gbc.writeMem(0x9a28, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xa4, gbc.b());
        EXPECT(0x72, gbc.c());
        EXPECT(0x4d, gbc.d());
        EXPECT(0xed, gbc.e());
        EXPECT(0x80, gbc.h());
        EXPECT(0x4a, gbc.l());
        EXPECT(0x8d30, gbc.sp());
        EXPECT(0x9a29, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x9a28));
        // AF 037F
        gbc.setState(0xb858, 0xb3ba, 0xb4c0, 0x7816, 0x770d, 0x5276, 0x1, 0x0);
        gbc.writeMem(0xb858, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x78, gbc.b());
        EXPECT(0x16, gbc.c());
        EXPECT(0x77, gbc.d());
        EXPECT(0xd, gbc.e());
        EXPECT(0x52, gbc.h());
        EXPECT(0x76, gbc.l());
        EXPECT(0xb3ba, gbc.sp());
        EXPECT(0xb859, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xb858));
        // AF 0380
        gbc.setState(0xebf8, 0xf119, 0xc9a0, 0xfd28, 0xbf24, 0x11eb, 0x0, 0x0);
        gbc.writeMem(0xebf8, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xfd, gbc.b());
        EXPECT(0x28, gbc.c());
        EXPECT(0xbf, gbc.d());
        EXPECT(0x24, gbc.e());
        EXPECT(0x11, gbc.h());
        EXPECT(0xeb, gbc.l());
        EXPECT(0xf119, gbc.sp());
        EXPECT(0xebf9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xebf8));
        // AF 0381
        gbc.setState(0xc8ee, 0x11e7, 0x1b70, 0x1353, 0xfddd, 0x8ef9, 0x1, 0x0);
        gbc.writeMem(0xc8ee, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x13, gbc.b());
        EXPECT(0x53, gbc.c());
        EXPECT(0xfd, gbc.d());
        EXPECT(0xdd, gbc.e());
        EXPECT(0x8e, gbc.h());
        EXPECT(0xf9, gbc.l());
        EXPECT(0x11e7, gbc.sp());
        EXPECT(0xc8ef, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xc8ee));
        // AF 0382
        gbc.setState(0xbfe8, 0x88b2, 0x3870, 0xb033, 0xa0f5, 0xca2c, 0x0, 0x0);
        gbc.writeMem(0xbfe8, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xb0, gbc.b());
        EXPECT(0x33, gbc.c());
        EXPECT(0xa0, gbc.d());
        EXPECT(0xf5, gbc.e());
        EXPECT(0xca, gbc.h());
        EXPECT(0x2c, gbc.l());
        EXPECT(0x88b2, gbc.sp());
        EXPECT(0xbfe9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xbfe8));
        // AF 0383
        gbc.setState(0xa79a, 0x1009, 0x84f0, 0xc095, 0xad15, 0xb075, 0x0, 0x1);
        gbc.writeMem(0xa79a, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xc0, gbc.b());
        EXPECT(0x95, gbc.c());
        EXPECT(0xad, gbc.d());
        EXPECT(0x15, gbc.e());
        EXPECT(0xb0, gbc.h());
        EXPECT(0x75, gbc.l());
        EXPECT(0x1009, gbc.sp());
        EXPECT(0xa79b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xa79a));
        // AF 0384
        gbc.setState(0x4eca, 0x4572, 0x6870, 0x60b1, 0x9258, 0xf3fd, 0x1, 0x0);
        gbc.writeMem(0x4eca, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x60, gbc.b());
        EXPECT(0xb1, gbc.c());
        EXPECT(0x92, gbc.d());
        EXPECT(0x58, gbc.e());
        EXPECT(0xf3, gbc.h());
        EXPECT(0xfd, gbc.l());
        EXPECT(0x4572, gbc.sp());
        EXPECT(0x4ecb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0385
        gbc.setState(0x8061, 0xda83, 0x270, 0x3fd2, 0x1dee, 0xeca2, 0x0, 0x1);
        gbc.writeMem(0x8061, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x3f, gbc.b());
        EXPECT(0xd2, gbc.c());
        EXPECT(0x1d, gbc.d());
        EXPECT(0xee, gbc.e());
        EXPECT(0xec, gbc.h());
        EXPECT(0xa2, gbc.l());
        EXPECT(0xda83, gbc.sp());
        EXPECT(0x8062, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x8061));
        // AF 0386
        gbc.setState(0x7981, 0xd198, 0xda80, 0x66a6, 0x1552, 0x3609, 0x0, 0x0);
        gbc.writeMem(0x7981, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x66, gbc.b());
        EXPECT(0xa6, gbc.c());
        EXPECT(0x15, gbc.d());
        EXPECT(0x52, gbc.e());
        EXPECT(0x36, gbc.h());
        EXPECT(0x9, gbc.l());
        EXPECT(0xd198, gbc.sp());
        EXPECT(0x7982, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0387
        gbc.setState(0x3a8c, 0x74ac, 0xd210, 0x315f, 0x46be, 0x1a6e, 0x1, 0x0);
        gbc.writeMem(0x3a8c, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x31, gbc.b());
        EXPECT(0x5f, gbc.c());
        EXPECT(0x46, gbc.d());
        EXPECT(0xbe, gbc.e());
        EXPECT(0x1a, gbc.h());
        EXPECT(0x6e, gbc.l());
        EXPECT(0x74ac, gbc.sp());
        EXPECT(0x3a8d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0388
        gbc.setState(0xad89, 0xb21a, 0xdb40, 0xdb95, 0x82a9, 0x36a4, 0x0, 0x0);
        gbc.writeMem(0xad89, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xdb, gbc.b());
        EXPECT(0x95, gbc.c());
        EXPECT(0x82, gbc.d());
        EXPECT(0xa9, gbc.e());
        EXPECT(0x36, gbc.h());
        EXPECT(0xa4, gbc.l());
        EXPECT(0xb21a, gbc.sp());
        EXPECT(0xad8a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xad89));
        // AF 0389
        gbc.setState(0x7fcb, 0x2c8, 0x3db0, 0xe98a, 0x38e, 0xa947, 0x1, 0x0);
        gbc.writeMem(0x7fcb, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xe9, gbc.b());
        EXPECT(0x8a, gbc.c());
        EXPECT(0x3, gbc.d());
        EXPECT(0x8e, gbc.e());
        EXPECT(0xa9, gbc.h());
        EXPECT(0x47, gbc.l());
        EXPECT(0x2c8, gbc.sp());
        EXPECT(0x7fcc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 038A
        gbc.setState(0xa736, 0x44a5, 0x6cf0, 0x6bd9, 0xe065, 0x615a, 0x1, 0x1);
        gbc.writeMem(0xa736, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x6b, gbc.b());
        EXPECT(0xd9, gbc.c());
        EXPECT(0xe0, gbc.d());
        EXPECT(0x65, gbc.e());
        EXPECT(0x61, gbc.h());
        EXPECT(0x5a, gbc.l());
        EXPECT(0x44a5, gbc.sp());
        EXPECT(0xa737, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xa736));
        // AF 038B
        gbc.setState(0xac2e, 0x1f02, 0x3120, 0xd94f, 0xebb5, 0x56a4, 0x1, 0x0);
        gbc.writeMem(0xac2e, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xd9, gbc.b());
        EXPECT(0x4f, gbc.c());
        EXPECT(0xeb, gbc.d());
        EXPECT(0xb5, gbc.e());
        EXPECT(0x56, gbc.h());
        EXPECT(0xa4, gbc.l());
        EXPECT(0x1f02, gbc.sp());
        EXPECT(0xac2f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xac2e));
        // AF 038C
        gbc.setState(0x3f40, 0xf6d5, 0xb280, 0x90eb, 0x224b, 0xd2b9, 0x1, 0x1);
        gbc.writeMem(0x3f40, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x90, gbc.b());
        EXPECT(0xeb, gbc.c());
        EXPECT(0x22, gbc.d());
        EXPECT(0x4b, gbc.e());
        EXPECT(0xd2, gbc.h());
        EXPECT(0xb9, gbc.l());
        EXPECT(0xf6d5, gbc.sp());
        EXPECT(0x3f41, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 038D
        gbc.setState(0x99b1, 0xbf5a, 0x3810, 0xa54f, 0x756b, 0xf388, 0x1, 0x0);
        gbc.writeMem(0x99b1, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xa5, gbc.b());
        EXPECT(0x4f, gbc.c());
        EXPECT(0x75, gbc.d());
        EXPECT(0x6b, gbc.e());
        EXPECT(0xf3, gbc.h());
        EXPECT(0x88, gbc.l());
        EXPECT(0xbf5a, gbc.sp());
        EXPECT(0x99b2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x99b1));
        // AF 038E
        gbc.setState(0x5420, 0xab28, 0x23c0, 0x2c1d, 0xeffc, 0xa11d, 0x0, 0x1);
        gbc.writeMem(0x5420, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x2c, gbc.b());
        EXPECT(0x1d, gbc.c());
        EXPECT(0xef, gbc.d());
        EXPECT(0xfc, gbc.e());
        EXPECT(0xa1, gbc.h());
        EXPECT(0x1d, gbc.l());
        EXPECT(0xab28, gbc.sp());
        EXPECT(0x5421, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 038F
        gbc.setState(0xa0fc, 0x486e, 0xbde0, 0xeb0e, 0xe576, 0x38d, 0x0, 0x1);
        gbc.writeMem(0xa0fc, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xeb, gbc.b());
        EXPECT(0xe, gbc.c());
        EXPECT(0xe5, gbc.d());
        EXPECT(0x76, gbc.e());
        EXPECT(0x3, gbc.h());
        EXPECT(0x8d, gbc.l());
        EXPECT(0x486e, gbc.sp());
        EXPECT(0xa0fd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xa0fc));
        // AF 0390
        gbc.setState(0x6111, 0x4ddc, 0x8800, 0xc6f3, 0x3aa0, 0x4c89, 0x1, 0x1);
        gbc.writeMem(0x6111, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xc6, gbc.b());
        EXPECT(0xf3, gbc.c());
        EXPECT(0x3a, gbc.d());
        EXPECT(0xa0, gbc.e());
        EXPECT(0x4c, gbc.h());
        EXPECT(0x89, gbc.l());
        EXPECT(0x4ddc, gbc.sp());
        EXPECT(0x6112, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0392
        gbc.setState(0x3741, 0x67aa, 0x7ee0, 0xdb32, 0x93bd, 0x8549, 0x0, 0x1);
        gbc.writeMem(0x3741, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xdb, gbc.b());
        EXPECT(0x32, gbc.c());
        EXPECT(0x93, gbc.d());
        EXPECT(0xbd, gbc.e());
        EXPECT(0x85, gbc.h());
        EXPECT(0x49, gbc.l());
        EXPECT(0x67aa, gbc.sp());
        EXPECT(0x3742, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0393
        gbc.setState(0x8211, 0x5826, 0xb940, 0x696a, 0xdd17, 0xaa05, 0x0, 0x0);
        gbc.writeMem(0x8211, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x69, gbc.b());
        EXPECT(0x6a, gbc.c());
        EXPECT(0xdd, gbc.d());
        EXPECT(0x17, gbc.e());
        EXPECT(0xaa, gbc.h());
        EXPECT(0x5, gbc.l());
        EXPECT(0x5826, gbc.sp());
        EXPECT(0x8212, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x8211));
        // AF 0394
        gbc.setState(0xc3ca, 0xaaeb, 0x8cd0, 0x6a57, 0xa95e, 0x74cb, 0x1, 0x0);
        gbc.writeMem(0xc3ca, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x6a, gbc.b());
        EXPECT(0x57, gbc.c());
        EXPECT(0xa9, gbc.d());
        EXPECT(0x5e, gbc.e());
        EXPECT(0x74, gbc.h());
        EXPECT(0xcb, gbc.l());
        EXPECT(0xaaeb, gbc.sp());
        EXPECT(0xc3cb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xc3ca));
        // AF 0395
        gbc.setState(0xa74, 0x7af9, 0xceb0, 0x472e, 0xeeab, 0x851c, 0x0, 0x1);
        gbc.writeMem(0xa74, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x47, gbc.b());
        EXPECT(0x2e, gbc.c());
        EXPECT(0xee, gbc.d());
        EXPECT(0xab, gbc.e());
        EXPECT(0x85, gbc.h());
        EXPECT(0x1c, gbc.l());
        EXPECT(0x7af9, gbc.sp());
        EXPECT(0xa75, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0396
        gbc.setState(0x5def, 0xcf62, 0xa9f0, 0xded8, 0xe220, 0xf12a, 0x0, 0x1);
        gbc.writeMem(0x5def, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xde, gbc.b());
        EXPECT(0xd8, gbc.c());
        EXPECT(0xe2, gbc.d());
        EXPECT(0x20, gbc.e());
        EXPECT(0xf1, gbc.h());
        EXPECT(0x2a, gbc.l());
        EXPECT(0xcf62, gbc.sp());
        EXPECT(0x5df0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 0397
        gbc.setState(0x85cd, 0x60db, 0xa6c0, 0x5e99, 0xf700, 0xe89b, 0x1, 0x1);
        gbc.writeMem(0x85cd, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x5e, gbc.b());
        EXPECT(0x99, gbc.c());
        EXPECT(0xf7, gbc.d());
        EXPECT(0x0, gbc.e());
        EXPECT(0xe8, gbc.h());
        EXPECT(0x9b, gbc.l());
        EXPECT(0x60db, gbc.sp());
        EXPECT(0x85ce, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x85cd));
        // AF 0398
        gbc.setState(0xc405, 0x4220, 0x6010, 0xdb3f, 0xf820, 0xc679, 0x0, 0x1);
        gbc.writeMem(0xc405, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xdb, gbc.b());
        EXPECT(0x3f, gbc.c());
        EXPECT(0xf8, gbc.d());
        EXPECT(0x20, gbc.e());
        EXPECT(0xc6, gbc.h());
        EXPECT(0x79, gbc.l());
        EXPECT(0x4220, gbc.sp());
        EXPECT(0xc406, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xc405));
        // AF 0399
        gbc.setState(0x983, 0x254b, 0x7760, 0x3937, 0xbe13, 0x5c52, 0x0, 0x1);
        gbc.writeMem(0x983, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x39, gbc.b());
        EXPECT(0x37, gbc.c());
        EXPECT(0xbe, gbc.d());
        EXPECT(0x13, gbc.e());
        EXPECT(0x5c, gbc.h());
        EXPECT(0x52, gbc.l());
        EXPECT(0x254b, gbc.sp());
        EXPECT(0x984, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 039B
        gbc.setState(0xccd8, 0x14ec, 0xdd60, 0xe792, 0x305f, 0xf3f9, 0x0, 0x0);
        gbc.writeMem(0xccd8, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xe7, gbc.b());
        EXPECT(0x92, gbc.c());
        EXPECT(0x30, gbc.d());
        EXPECT(0x5f, gbc.e());
        EXPECT(0xf3, gbc.h());
        EXPECT(0xf9, gbc.l());
        EXPECT(0x14ec, gbc.sp());
        EXPECT(0xccd9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xccd8));
        // AF 039C
        gbc.setState(0x100a, 0xec96, 0xf920, 0x9005, 0x98e1, 0x36da, 0x1, 0x1);
        gbc.writeMem(0x100a, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x90, gbc.b());
        EXPECT(0x5, gbc.c());
        EXPECT(0x98, gbc.d());
        EXPECT(0xe1, gbc.e());
        EXPECT(0x36, gbc.h());
        EXPECT(0xda, gbc.l());
        EXPECT(0xec96, gbc.sp());
        EXPECT(0x100b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 039D
        gbc.setState(0x4f07, 0x17b7, 0x2640, 0x48a7, 0x3f4, 0x47fc, 0x1, 0x1);
        gbc.writeMem(0x4f07, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x48, gbc.b());
        EXPECT(0xa7, gbc.c());
        EXPECT(0x3, gbc.d());
        EXPECT(0xf4, gbc.e());
        EXPECT(0x47, gbc.h());
        EXPECT(0xfc, gbc.l());
        EXPECT(0x17b7, gbc.sp());
        EXPECT(0x4f08, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 039E
        gbc.setState(0x9a7, 0xd5fa, 0x24e0, 0xce15, 0x6686, 0xde01, 0x0, 0x0);
        gbc.writeMem(0x9a7, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xce, gbc.b());
        EXPECT(0x15, gbc.c());
        EXPECT(0x66, gbc.d());
        EXPECT(0x86, gbc.e());
        EXPECT(0xde, gbc.h());
        EXPECT(0x1, gbc.l());
        EXPECT(0xd5fa, gbc.sp());
        EXPECT(0x9a8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 039F
        gbc.setState(0xe463, 0xb314, 0xb4a0, 0xe490, 0x3deb, 0xb501, 0x0, 0x0);
        gbc.writeMem(0xe463, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xe4, gbc.b());
        EXPECT(0x90, gbc.c());
        EXPECT(0x3d, gbc.d());
        EXPECT(0xeb, gbc.e());
        EXPECT(0xb5, gbc.h());
        EXPECT(0x1, gbc.l());
        EXPECT(0xb314, gbc.sp());
        EXPECT(0xe464, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xe463));
        // AF 03A0
        gbc.setState(0x9ec, 0x778e, 0x3500, 0xe7f2, 0xb97b, 0x5b94, 0x1, 0x1);
        gbc.writeMem(0x9ec, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xe7, gbc.b());
        EXPECT(0xf2, gbc.c());
        EXPECT(0xb9, gbc.d());
        EXPECT(0x7b, gbc.e());
        EXPECT(0x5b, gbc.h());
        EXPECT(0x94, gbc.l());
        EXPECT(0x778e, gbc.sp());
        EXPECT(0x9ed, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 03A1
        gbc.setState(0x5771, 0xd34c, 0xfc40, 0xf300, 0xff5, 0x92a7, 0x0, 0x0);
        gbc.writeMem(0x5771, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xf3, gbc.b());
        EXPECT(0x0, gbc.c());
        EXPECT(0xf, gbc.d());
        EXPECT(0xf5, gbc.e());
        EXPECT(0x92, gbc.h());
        EXPECT(0xa7, gbc.l());
        EXPECT(0xd34c, gbc.sp());
        EXPECT(0x5772, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 03A2
        gbc.setState(0xa043, 0x5276, 0xfe30, 0x506f, 0x7cfd, 0xd874, 0x1, 0x0);
        gbc.writeMem(0xa043, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x50, gbc.b());
        EXPECT(0x6f, gbc.c());
        EXPECT(0x7c, gbc.d());
        EXPECT(0xfd, gbc.e());
        EXPECT(0xd8, gbc.h());
        EXPECT(0x74, gbc.l());
        EXPECT(0x5276, gbc.sp());
        EXPECT(0xa044, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xa043));
        // AF 03A3
        gbc.setState(0x161, 0xb7fb, 0xe950, 0x7181, 0xa7dc, 0x5f0c, 0x1, 0x0);
        gbc.writeMem(0x161, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x71, gbc.b());
        EXPECT(0x81, gbc.c());
        EXPECT(0xa7, gbc.d());
        EXPECT(0xdc, gbc.e());
        EXPECT(0x5f, gbc.h());
        EXPECT(0xc, gbc.l());
        EXPECT(0xb7fb, gbc.sp());
        EXPECT(0x162, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 03A4
        gbc.setState(0x2f58, 0x5a5, 0xe730, 0xe9, 0xd4e6, 0x2817, 0x0, 0x0);
        gbc.writeMem(0x2f58, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x0, gbc.b());
        EXPECT(0xe9, gbc.c());
        EXPECT(0xd4, gbc.d());
        EXPECT(0xe6, gbc.e());
        EXPECT(0x28, gbc.h());
        EXPECT(0x17, gbc.l());
        EXPECT(0x5a5, gbc.sp());
        EXPECT(0x2f59, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 03A5
        gbc.setState(0xab59, 0x9e06, 0x19c0, 0x84b, 0x92f8, 0x9cf3, 0x1, 0x1);
        gbc.writeMem(0xab59, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x8, gbc.b());
        EXPECT(0x4b, gbc.c());
        EXPECT(0x92, gbc.d());
        EXPECT(0xf8, gbc.e());
        EXPECT(0x9c, gbc.h());
        EXPECT(0xf3, gbc.l());
        EXPECT(0x9e06, gbc.sp());
        EXPECT(0xab5a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xab59));
        // AF 03A6
        gbc.setState(0xe25d, 0x512c, 0x5e90, 0x446e, 0x5a7e, 0xe756, 0x0, 0x0);
        gbc.writeMem(0xe25d, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x44, gbc.b());
        EXPECT(0x6e, gbc.c());
        EXPECT(0x5a, gbc.d());
        EXPECT(0x7e, gbc.e());
        EXPECT(0xe7, gbc.h());
        EXPECT(0x56, gbc.l());
        EXPECT(0x512c, gbc.sp());
        EXPECT(0xe25e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xe25d));
        // AF 03A7
        gbc.setState(0xd0e4, 0x8062, 0x8d50, 0xc3a8, 0xddee, 0x6e4a, 0x0, 0x1);
        gbc.writeMem(0xd0e4, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xc3, gbc.b());
        EXPECT(0xa8, gbc.c());
        EXPECT(0xdd, gbc.d());
        EXPECT(0xee, gbc.e());
        EXPECT(0x6e, gbc.h());
        EXPECT(0x4a, gbc.l());
        EXPECT(0x8062, gbc.sp());
        EXPECT(0xd0e5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xd0e4));
        // AF 03A8
        gbc.setState(0xf57, 0xd329, 0xa950, 0x2125, 0xe759, 0xd184, 0x0, 0x0);
        gbc.writeMem(0xf57, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x21, gbc.b());
        EXPECT(0x25, gbc.c());
        EXPECT(0xe7, gbc.d());
        EXPECT(0x59, gbc.e());
        EXPECT(0xd1, gbc.h());
        EXPECT(0x84, gbc.l());
        EXPECT(0xd329, gbc.sp());
        EXPECT(0xf58, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 03A9
        gbc.setState(0xef20, 0x10b2, 0x4ee0, 0xe436, 0x83e1, 0x3b72, 0x1, 0x1);
        gbc.writeMem(0xef20, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xe4, gbc.b());
        EXPECT(0x36, gbc.c());
        EXPECT(0x83, gbc.d());
        EXPECT(0xe1, gbc.e());
        EXPECT(0x3b, gbc.h());
        EXPECT(0x72, gbc.l());
        EXPECT(0x10b2, gbc.sp());
        EXPECT(0xef21, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xef20));
        // AF 03AA
        gbc.setState(0xe1cd, 0x6262, 0x1310, 0x1da7, 0xc542, 0x8787, 0x1, 0x1);
        gbc.writeMem(0xe1cd, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x1d, gbc.b());
        EXPECT(0xa7, gbc.c());
        EXPECT(0xc5, gbc.d());
        EXPECT(0x42, gbc.e());
        EXPECT(0x87, gbc.h());
        EXPECT(0x87, gbc.l());
        EXPECT(0x6262, gbc.sp());
        EXPECT(0xe1ce, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xe1cd));
        // AF 03AB
        gbc.setState(0xcba7, 0xdaeb, 0x5290, 0x4f1e, 0x19a, 0x7006, 0x1, 0x0);
        gbc.writeMem(0xcba7, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x4f, gbc.b());
        EXPECT(0x1e, gbc.c());
        EXPECT(0x1, gbc.d());
        EXPECT(0x9a, gbc.e());
        EXPECT(0x70, gbc.h());
        EXPECT(0x6, gbc.l());
        EXPECT(0xdaeb, gbc.sp());
        EXPECT(0xcba8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xcba7));
        // AF 03AC
        gbc.setState(0x8f2e, 0x8991, 0xc100, 0x7686, 0x98c6, 0x2eca, 0x0, 0x1);
        gbc.writeMem(0x8f2e, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x76, gbc.b());
        EXPECT(0x86, gbc.c());
        EXPECT(0x98, gbc.d());
        EXPECT(0xc6, gbc.e());
        EXPECT(0x2e, gbc.h());
        EXPECT(0xca, gbc.l());
        EXPECT(0x8991, gbc.sp());
        EXPECT(0x8f2f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x8f2e));
        // AF 03AD
        gbc.setState(0x605a, 0x2c2d, 0xa5b0, 0xea7f, 0x8658, 0x5b17, 0x0, 0x0);
        gbc.writeMem(0x605a, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xea, gbc.b());
        EXPECT(0x7f, gbc.c());
        EXPECT(0x86, gbc.d());
        EXPECT(0x58, gbc.e());
        EXPECT(0x5b, gbc.h());
        EXPECT(0x17, gbc.l());
        EXPECT(0x2c2d, gbc.sp());
        EXPECT(0x605b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 03AE
        gbc.setState(0xae36, 0xe13e, 0xa2f0, 0x5628, 0xe541, 0xcb79, 0x1, 0x1);
        gbc.writeMem(0xae36, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x56, gbc.b());
        EXPECT(0x28, gbc.c());
        EXPECT(0xe5, gbc.d());
        EXPECT(0x41, gbc.e());
        EXPECT(0xcb, gbc.h());
        EXPECT(0x79, gbc.l());
        EXPECT(0xe13e, gbc.sp());
        EXPECT(0xae37, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xae36));
        // AF 03AF
        gbc.setState(0xb0de, 0x7d07, 0x28f0, 0x3a12, 0x900, 0x564a, 0x0, 0x1);
        gbc.writeMem(0xb0de, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x3a, gbc.b());
        EXPECT(0x12, gbc.c());
        EXPECT(0x9, gbc.d());
        EXPECT(0x0, gbc.e());
        EXPECT(0x56, gbc.h());
        EXPECT(0x4a, gbc.l());
        EXPECT(0x7d07, gbc.sp());
        EXPECT(0xb0df, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xb0de));
        // AF 03B0
        gbc.setState(0xbbf0, 0xb974, 0x2030, 0x30a7, 0xa1bc, 0x4604, 0x1, 0x0);
        gbc.writeMem(0xbbf0, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x30, gbc.b());
        EXPECT(0xa7, gbc.c());
        EXPECT(0xa1, gbc.d());
        EXPECT(0xbc, gbc.e());
        EXPECT(0x46, gbc.h());
        EXPECT(0x4, gbc.l());
        EXPECT(0xb974, gbc.sp());
        EXPECT(0xbbf1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xbbf0));
        // AF 03B1
        gbc.setState(0xb3a1, 0xe71c, 0x180, 0xee97, 0x4ddc, 0xeb2d, 0x0, 0x1);
        gbc.writeMem(0xb3a1, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xee, gbc.b());
        EXPECT(0x97, gbc.c());
        EXPECT(0x4d, gbc.d());
        EXPECT(0xdc, gbc.e());
        EXPECT(0xeb, gbc.h());
        EXPECT(0x2d, gbc.l());
        EXPECT(0xe71c, gbc.sp());
        EXPECT(0xb3a2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xb3a1));
        // AF 03B2
        gbc.setState(0xae0d, 0xa55a, 0xf450, 0x4da7, 0xc690, 0x3d6d, 0x1, 0x1);
        gbc.writeMem(0xae0d, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x4d, gbc.b());
        EXPECT(0xa7, gbc.c());
        EXPECT(0xc6, gbc.d());
        EXPECT(0x90, gbc.e());
        EXPECT(0x3d, gbc.h());
        EXPECT(0x6d, gbc.l());
        EXPECT(0xa55a, gbc.sp());
        EXPECT(0xae0e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xae0d));
        // AF 03B3
        gbc.setState(0xb029, 0x1491, 0x3090, 0x37f3, 0xd553, 0xb1e5, 0x1, 0x1);
        gbc.writeMem(0xb029, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x37, gbc.b());
        EXPECT(0xf3, gbc.c());
        EXPECT(0xd5, gbc.d());
        EXPECT(0x53, gbc.e());
        EXPECT(0xb1, gbc.h());
        EXPECT(0xe5, gbc.l());
        EXPECT(0x1491, gbc.sp());
        EXPECT(0xb02a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xb029));
        // AF 03B4
        gbc.setState(0x9c17, 0x2dc8, 0x840, 0xb474, 0xe1a1, 0x473a, 0x0, 0x0);
        gbc.writeMem(0x9c17, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xb4, gbc.b());
        EXPECT(0x74, gbc.c());
        EXPECT(0xe1, gbc.d());
        EXPECT(0xa1, gbc.e());
        EXPECT(0x47, gbc.h());
        EXPECT(0x3a, gbc.l());
        EXPECT(0x2dc8, gbc.sp());
        EXPECT(0x9c18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x9c17));
        // AF 03B5
        gbc.setState(0xc0b7, 0x33cd, 0x4650, 0x9297, 0x778d, 0xf32c, 0x0, 0x1);
        gbc.writeMem(0xc0b7, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x92, gbc.b());
        EXPECT(0x97, gbc.c());
        EXPECT(0x77, gbc.d());
        EXPECT(0x8d, gbc.e());
        EXPECT(0xf3, gbc.h());
        EXPECT(0x2c, gbc.l());
        EXPECT(0x33cd, gbc.sp());
        EXPECT(0xc0b8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xc0b7));
        // AF 03B6
        gbc.setState(0x6a0f, 0x41ef, 0x60e0, 0x393b, 0xf760, 0x62c, 0x1, 0x1);
        gbc.writeMem(0x6a0f, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x39, gbc.b());
        EXPECT(0x3b, gbc.c());
        EXPECT(0xf7, gbc.d());
        EXPECT(0x60, gbc.e());
        EXPECT(0x6, gbc.h());
        EXPECT(0x2c, gbc.l());
        EXPECT(0x41ef, gbc.sp());
        EXPECT(0x6a10, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 03B7
        gbc.setState(0xed10, 0x2616, 0x5240, 0x8f81, 0x6a41, 0xeba1, 0x1, 0x1);
        gbc.writeMem(0xed10, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x8f, gbc.b());
        EXPECT(0x81, gbc.c());
        EXPECT(0x6a, gbc.d());
        EXPECT(0x41, gbc.e());
        EXPECT(0xeb, gbc.h());
        EXPECT(0xa1, gbc.l());
        EXPECT(0x2616, gbc.sp());
        EXPECT(0xed11, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xed10));
        // AF 03B8
        gbc.setState(0x4746, 0xd555, 0xe1f0, 0xa329, 0x441d, 0xba48, 0x0, 0x1);
        gbc.writeMem(0x4746, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xa3, gbc.b());
        EXPECT(0x29, gbc.c());
        EXPECT(0x44, gbc.d());
        EXPECT(0x1d, gbc.e());
        EXPECT(0xba, gbc.h());
        EXPECT(0x48, gbc.l());
        EXPECT(0xd555, gbc.sp());
        EXPECT(0x4747, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 03B9
        gbc.setState(0xbb03, 0x9b01, 0xb4a0, 0x1a46, 0xcfa8, 0xf42, 0x0, 0x1);
        gbc.writeMem(0xbb03, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x1a, gbc.b());
        EXPECT(0x46, gbc.c());
        EXPECT(0xcf, gbc.d());
        EXPECT(0xa8, gbc.e());
        EXPECT(0xf, gbc.h());
        EXPECT(0x42, gbc.l());
        EXPECT(0x9b01, gbc.sp());
        EXPECT(0xbb04, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xbb03));
        // AF 03BA
        gbc.setState(0x289a, 0x5681, 0x7a00, 0x8e03, 0xfa49, 0xcb0, 0x1, 0x1);
        gbc.writeMem(0x289a, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x8e, gbc.b());
        EXPECT(0x3, gbc.c());
        EXPECT(0xfa, gbc.d());
        EXPECT(0x49, gbc.e());
        EXPECT(0xc, gbc.h());
        EXPECT(0xb0, gbc.l());
        EXPECT(0x5681, gbc.sp());
        EXPECT(0x289b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 03BB
        gbc.setState(0x672e, 0xe562, 0xcc50, 0xd0b4, 0x50a, 0xa14a, 0x0, 0x1);
        gbc.writeMem(0x672e, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xd0, gbc.b());
        EXPECT(0xb4, gbc.c());
        EXPECT(0x5, gbc.d());
        EXPECT(0xa, gbc.e());
        EXPECT(0xa1, gbc.h());
        EXPECT(0x4a, gbc.l());
        EXPECT(0xe562, gbc.sp());
        EXPECT(0x672f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 03BD
        gbc.setState(0x5ea9, 0x6486, 0x2ff0, 0x5edb, 0x6a76, 0xd1b5, 0x0, 0x1);
        gbc.writeMem(0x5ea9, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x5e, gbc.b());
        EXPECT(0xdb, gbc.c());
        EXPECT(0x6a, gbc.d());
        EXPECT(0x76, gbc.e());
        EXPECT(0xd1, gbc.h());
        EXPECT(0xb5, gbc.l());
        EXPECT(0x6486, gbc.sp());
        EXPECT(0x5eaa, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 03BE
        gbc.setState(0x4e4a, 0x2ec9, 0x6e20, 0xe18a, 0x12eb, 0x3f85, 0x0, 0x1);
        gbc.writeMem(0x4e4a, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xe1, gbc.b());
        EXPECT(0x8a, gbc.c());
        EXPECT(0x12, gbc.d());
        EXPECT(0xeb, gbc.e());
        EXPECT(0x3f, gbc.h());
        EXPECT(0x85, gbc.l());
        EXPECT(0x2ec9, gbc.sp());
        EXPECT(0x4e4b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 03BF
        gbc.setState(0x4f12, 0xb73, 0x2a90, 0xd70b, 0xf122, 0xfef5, 0x1, 0x1);
        gbc.writeMem(0x4f12, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xd7, gbc.b());
        EXPECT(0xb, gbc.c());
        EXPECT(0xf1, gbc.d());
        EXPECT(0x22, gbc.e());
        EXPECT(0xfe, gbc.h());
        EXPECT(0xf5, gbc.l());
        EXPECT(0xb73, gbc.sp());
        EXPECT(0x4f13, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 03C0
        gbc.setState(0x5c56, 0xbda6, 0xd730, 0xc468, 0x80db, 0xcea0, 0x1, 0x0);
        gbc.writeMem(0x5c56, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xc4, gbc.b());
        EXPECT(0x68, gbc.c());
        EXPECT(0x80, gbc.d());
        EXPECT(0xdb, gbc.e());
        EXPECT(0xce, gbc.h());
        EXPECT(0xa0, gbc.l());
        EXPECT(0xbda6, gbc.sp());
        EXPECT(0x5c57, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 03C1
        gbc.setState(0xa72b, 0xfa9f, 0xdf40, 0x352c, 0xd6a, 0xbb0e, 0x1, 0x0);
        gbc.writeMem(0xa72b, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x35, gbc.b());
        EXPECT(0x2c, gbc.c());
        EXPECT(0xd, gbc.d());
        EXPECT(0x6a, gbc.e());
        EXPECT(0xbb, gbc.h());
        EXPECT(0xe, gbc.l());
        EXPECT(0xfa9f, gbc.sp());
        EXPECT(0xa72c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xa72b));
        // AF 03C2
        gbc.setState(0x275e, 0x22ce, 0xf9e0, 0xba6c, 0x3ab, 0xa544, 0x1, 0x1);
        gbc.writeMem(0x275e, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xba, gbc.b());
        EXPECT(0x6c, gbc.c());
        EXPECT(0x3, gbc.d());
        EXPECT(0xab, gbc.e());
        EXPECT(0xa5, gbc.h());
        EXPECT(0x44, gbc.l());
        EXPECT(0x22ce, gbc.sp());
        EXPECT(0x275f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 03C3
        gbc.setState(0xa4ce, 0x6df0, 0x2d00, 0x92ba, 0xfd79, 0xff53, 0x0, 0x0);
        gbc.writeMem(0xa4ce, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x92, gbc.b());
        EXPECT(0xba, gbc.c());
        EXPECT(0xfd, gbc.d());
        EXPECT(0x79, gbc.e());
        EXPECT(0xff, gbc.h());
        EXPECT(0x53, gbc.l());
        EXPECT(0x6df0, gbc.sp());
        EXPECT(0xa4cf, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xa4ce));
        // AF 03C4
        gbc.setState(0x6251, 0xf2e0, 0xeaf0, 0x62f, 0x2de, 0x2dcb, 0x1, 0x0);
        gbc.writeMem(0x6251, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x6, gbc.b());
        EXPECT(0x2f, gbc.c());
        EXPECT(0x2, gbc.d());
        EXPECT(0xde, gbc.e());
        EXPECT(0x2d, gbc.h());
        EXPECT(0xcb, gbc.l());
        EXPECT(0xf2e0, gbc.sp());
        EXPECT(0x6252, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 03C5
        gbc.setState(0xc27d, 0xf6cb, 0x8070, 0x1e45, 0x35a9, 0x30eb, 0x1, 0x1);
        gbc.writeMem(0xc27d, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x1e, gbc.b());
        EXPECT(0x45, gbc.c());
        EXPECT(0x35, gbc.d());
        EXPECT(0xa9, gbc.e());
        EXPECT(0x30, gbc.h());
        EXPECT(0xeb, gbc.l());
        EXPECT(0xf6cb, gbc.sp());
        EXPECT(0xc27e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xc27d));
        // AF 03C7
        gbc.setState(0xaaf9, 0x5c8c, 0x2530, 0x4f9, 0x2cbd, 0x3802, 0x1, 0x1);
        gbc.writeMem(0xaaf9, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x4, gbc.b());
        EXPECT(0xf9, gbc.c());
        EXPECT(0x2c, gbc.d());
        EXPECT(0xbd, gbc.e());
        EXPECT(0x38, gbc.h());
        EXPECT(0x2, gbc.l());
        EXPECT(0x5c8c, gbc.sp());
        EXPECT(0xaafa, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xaaf9));
        // AF 03C8
        gbc.setState(0xae0d, 0x6406, 0x31b0, 0x4e86, 0xe8eb, 0x311d, 0x0, 0x0);
        gbc.writeMem(0xae0d, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x4e, gbc.b());
        EXPECT(0x86, gbc.c());
        EXPECT(0xe8, gbc.d());
        EXPECT(0xeb, gbc.e());
        EXPECT(0x31, gbc.h());
        EXPECT(0x1d, gbc.l());
        EXPECT(0x6406, gbc.sp());
        EXPECT(0xae0e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xae0d));
        // AF 03C9
        gbc.setState(0xe654, 0x486, 0x67a0, 0x995d, 0x335d, 0x6669, 0x1, 0x0);
        gbc.writeMem(0xe654, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x99, gbc.b());
        EXPECT(0x5d, gbc.c());
        EXPECT(0x33, gbc.d());
        EXPECT(0x5d, gbc.e());
        EXPECT(0x66, gbc.h());
        EXPECT(0x69, gbc.l());
        EXPECT(0x486, gbc.sp());
        EXPECT(0xe655, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xe654));
        // AF 03CA
        gbc.setState(0xb152, 0xbd3c, 0x7dd0, 0x3089, 0xb314, 0x1649, 0x1, 0x1);
        gbc.writeMem(0xb152, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x30, gbc.b());
        EXPECT(0x89, gbc.c());
        EXPECT(0xb3, gbc.d());
        EXPECT(0x14, gbc.e());
        EXPECT(0x16, gbc.h());
        EXPECT(0x49, gbc.l());
        EXPECT(0xbd3c, gbc.sp());
        EXPECT(0xb153, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xb152));
        // AF 03CB
        gbc.setState(0x8f2a, 0x4c0f, 0x4ab0, 0x4dc5, 0x9ddd, 0xb331, 0x1, 0x0);
        gbc.writeMem(0x8f2a, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x4d, gbc.b());
        EXPECT(0xc5, gbc.c());
        EXPECT(0x9d, gbc.d());
        EXPECT(0xdd, gbc.e());
        EXPECT(0xb3, gbc.h());
        EXPECT(0x31, gbc.l());
        EXPECT(0x4c0f, gbc.sp());
        EXPECT(0x8f2b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x8f2a));
        // AF 03CC
        gbc.setState(0x7a6e, 0x55d0, 0x2b90, 0x8037, 0x9124, 0x3a4a, 0x1, 0x0);
        gbc.writeMem(0x7a6e, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x80, gbc.b());
        EXPECT(0x37, gbc.c());
        EXPECT(0x91, gbc.d());
        EXPECT(0x24, gbc.e());
        EXPECT(0x3a, gbc.h());
        EXPECT(0x4a, gbc.l());
        EXPECT(0x55d0, gbc.sp());
        EXPECT(0x7a6f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 03CD
        gbc.setState(0x9998, 0xc353, 0xa230, 0x8013, 0x9c53, 0x1672, 0x0, 0x1);
        gbc.writeMem(0x9998, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x80, gbc.b());
        EXPECT(0x13, gbc.c());
        EXPECT(0x9c, gbc.d());
        EXPECT(0x53, gbc.e());
        EXPECT(0x16, gbc.h());
        EXPECT(0x72, gbc.l());
        EXPECT(0xc353, gbc.sp());
        EXPECT(0x9999, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x9998));
        // AF 03CE
        gbc.setState(0x52a, 0xe91f, 0xb060, 0xa5c8, 0xdc7a, 0x7a6, 0x0, 0x0);
        gbc.writeMem(0x52a, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xa5, gbc.b());
        EXPECT(0xc8, gbc.c());
        EXPECT(0xdc, gbc.d());
        EXPECT(0x7a, gbc.e());
        EXPECT(0x7, gbc.h());
        EXPECT(0xa6, gbc.l());
        EXPECT(0xe91f, gbc.sp());
        EXPECT(0x52b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 03CF
        gbc.setState(0xc1ea, 0x73a3, 0x21a0, 0x4547, 0xd6a, 0x2237, 0x0, 0x1);
        gbc.writeMem(0xc1ea, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x45, gbc.b());
        EXPECT(0x47, gbc.c());
        EXPECT(0xd, gbc.d());
        EXPECT(0x6a, gbc.e());
        EXPECT(0x22, gbc.h());
        EXPECT(0x37, gbc.l());
        EXPECT(0x73a3, gbc.sp());
        EXPECT(0xc1eb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xc1ea));
        // AF 03D0
        gbc.setState(0x3cab, 0xee98, 0x33a0, 0xf444, 0xa55c, 0x2ed3, 0x0, 0x1);
        gbc.writeMem(0x3cab, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xf4, gbc.b());
        EXPECT(0x44, gbc.c());
        EXPECT(0xa5, gbc.d());
        EXPECT(0x5c, gbc.e());
        EXPECT(0x2e, gbc.h());
        EXPECT(0xd3, gbc.l());
        EXPECT(0xee98, gbc.sp());
        EXPECT(0x3cac, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 03D1
        gbc.setState(0x445, 0x48d, 0x9cc0, 0xcc22, 0x68ea, 0xda3f, 0x1, 0x1);
        gbc.writeMem(0x445, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xcc, gbc.b());
        EXPECT(0x22, gbc.c());
        EXPECT(0x68, gbc.d());
        EXPECT(0xea, gbc.e());
        EXPECT(0xda, gbc.h());
        EXPECT(0x3f, gbc.l());
        EXPECT(0x48d, gbc.sp());
        EXPECT(0x446, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 03D2
        gbc.setState(0x81ad, 0x6401, 0x3510, 0xa03, 0x5a53, 0xec74, 0x0, 0x1);
        gbc.writeMem(0x81ad, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xa, gbc.b());
        EXPECT(0x3, gbc.c());
        EXPECT(0x5a, gbc.d());
        EXPECT(0x53, gbc.e());
        EXPECT(0xec, gbc.h());
        EXPECT(0x74, gbc.l());
        EXPECT(0x6401, gbc.sp());
        EXPECT(0x81ae, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x81ad));
        // AF 03D3
        gbc.setState(0xdd27, 0xcdcd, 0xaa80, 0x607d, 0xd76f, 0x64cc, 0x0, 0x0);
        gbc.writeMem(0xdd27, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x60, gbc.b());
        EXPECT(0x7d, gbc.c());
        EXPECT(0xd7, gbc.d());
        EXPECT(0x6f, gbc.e());
        EXPECT(0x64, gbc.h());
        EXPECT(0xcc, gbc.l());
        EXPECT(0xcdcd, gbc.sp());
        EXPECT(0xdd28, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xdd27));
        // AF 03D4
        gbc.setState(0xaefb, 0x605e, 0x7a00, 0x42f3, 0xe18a, 0x7dc2, 0x1, 0x1);
        gbc.writeMem(0xaefb, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x42, gbc.b());
        EXPECT(0xf3, gbc.c());
        EXPECT(0xe1, gbc.d());
        EXPECT(0x8a, gbc.e());
        EXPECT(0x7d, gbc.h());
        EXPECT(0xc2, gbc.l());
        EXPECT(0x605e, gbc.sp());
        EXPECT(0xaefc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xaefb));
        // AF 03D5
        gbc.setState(0x2562, 0x3759, 0xd8a0, 0x87d5, 0xebe2, 0x5fd7, 0x1, 0x1);
        gbc.writeMem(0x2562, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x87, gbc.b());
        EXPECT(0xd5, gbc.c());
        EXPECT(0xeb, gbc.d());
        EXPECT(0xe2, gbc.e());
        EXPECT(0x5f, gbc.h());
        EXPECT(0xd7, gbc.l());
        EXPECT(0x3759, gbc.sp());
        EXPECT(0x2563, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 03D6
        gbc.setState(0x799e, 0xb917, 0x2be0, 0x218c, 0x5a4, 0xc4f6, 0x0, 0x1);
        gbc.writeMem(0x799e, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x21, gbc.b());
        EXPECT(0x8c, gbc.c());
        EXPECT(0x5, gbc.d());
        EXPECT(0xa4, gbc.e());
        EXPECT(0xc4, gbc.h());
        EXPECT(0xf6, gbc.l());
        EXPECT(0xb917, gbc.sp());
        EXPECT(0x799f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 03D7
        gbc.setState(0x7284, 0x3765, 0x2ef0, 0x13a7, 0x5da2, 0xff54, 0x0, 0x0);
        gbc.writeMem(0x7284, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x13, gbc.b());
        EXPECT(0xa7, gbc.c());
        EXPECT(0x5d, gbc.d());
        EXPECT(0xa2, gbc.e());
        EXPECT(0xff, gbc.h());
        EXPECT(0x54, gbc.l());
        EXPECT(0x3765, gbc.sp());
        EXPECT(0x7285, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 03D8
        gbc.setState(0x9ca6, 0xfb6e, 0x2960, 0xfb5c, 0x3df0, 0x301c, 0x1, 0x1);
        gbc.writeMem(0x9ca6, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xfb, gbc.b());
        EXPECT(0x5c, gbc.c());
        EXPECT(0x3d, gbc.d());
        EXPECT(0xf0, gbc.e());
        EXPECT(0x30, gbc.h());
        EXPECT(0x1c, gbc.l());
        EXPECT(0xfb6e, gbc.sp());
        EXPECT(0x9ca7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0x9ca6));
        // AF 03D9
        gbc.setState(0x47c9, 0x2ae7, 0x5390, 0xa466, 0x7f4c, 0xde29, 0x1, 0x0);
        gbc.writeMem(0x47c9, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xa4, gbc.b());
        EXPECT(0x66, gbc.c());
        EXPECT(0x7f, gbc.d());
        EXPECT(0x4c, gbc.e());
        EXPECT(0xde, gbc.h());
        EXPECT(0x29, gbc.l());
        EXPECT(0x2ae7, gbc.sp());
        EXPECT(0x47ca, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 03DB
        gbc.setState(0xb71a, 0x8249, 0x86e0, 0x12cb, 0x49c, 0x9740, 0x0, 0x1);
        gbc.writeMem(0xb71a, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x12, gbc.b());
        EXPECT(0xcb, gbc.c());
        EXPECT(0x4, gbc.d());
        EXPECT(0x9c, gbc.e());
        EXPECT(0x97, gbc.h());
        EXPECT(0x40, gbc.l());
        EXPECT(0x8249, gbc.sp());
        EXPECT(0xb71b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xb71a));
        // AF 03DC
        gbc.setState(0x3ab4, 0xe203, 0xb50, 0x780f, 0xc52e, 0x2f2, 0x1, 0x1);
        gbc.writeMem(0x3ab4, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x78, gbc.b());
        EXPECT(0xf, gbc.c());
        EXPECT(0xc5, gbc.d());
        EXPECT(0x2e, gbc.e());
        EXPECT(0x2, gbc.h());
        EXPECT(0xf2, gbc.l());
        EXPECT(0xe203, gbc.sp());
        EXPECT(0x3ab5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 03DD
        gbc.setState(0xaf3f, 0x223c, 0x7860, 0x5473, 0x220, 0x2195, 0x1, 0x1);
        gbc.writeMem(0xaf3f, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x54, gbc.b());
        EXPECT(0x73, gbc.c());
        EXPECT(0x2, gbc.d());
        EXPECT(0x20, gbc.e());
        EXPECT(0x21, gbc.h());
        EXPECT(0x95, gbc.l());
        EXPECT(0x223c, gbc.sp());
        EXPECT(0xaf40, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xaf3f));
        // AF 03DE
        gbc.setState(0x4b1a, 0x645, 0xde00, 0x651d, 0x25f, 0x4238, 0x0, 0x1);
        gbc.writeMem(0x4b1a, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x65, gbc.b());
        EXPECT(0x1d, gbc.c());
        EXPECT(0x2, gbc.d());
        EXPECT(0x5f, gbc.e());
        EXPECT(0x42, gbc.h());
        EXPECT(0x38, gbc.l());
        EXPECT(0x645, gbc.sp());
        EXPECT(0x4b1b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 03DF
        gbc.setState(0x310a, 0x3402, 0xde90, 0x60b9, 0x657e, 0x1b97, 0x1, 0x0);
        gbc.writeMem(0x310a, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x60, gbc.b());
        EXPECT(0xb9, gbc.c());
        EXPECT(0x65, gbc.d());
        EXPECT(0x7e, gbc.e());
        EXPECT(0x1b, gbc.h());
        EXPECT(0x97, gbc.l());
        EXPECT(0x3402, gbc.sp());
        EXPECT(0x310b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 03E0
        gbc.setState(0x5fc3, 0x15d1, 0x6c70, 0x9ac7, 0xa2b2, 0x4172, 0x1, 0x0);
        gbc.writeMem(0x5fc3, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x9a, gbc.b());
        EXPECT(0xc7, gbc.c());
        EXPECT(0xa2, gbc.d());
        EXPECT(0xb2, gbc.e());
        EXPECT(0x41, gbc.h());
        EXPECT(0x72, gbc.l());
        EXPECT(0x15d1, gbc.sp());
        EXPECT(0x5fc4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 03E1
        gbc.setState(0xd67e, 0xb0d8, 0x7ac0, 0x8bf4, 0xa984, 0xcf2f, 0x1, 0x0);
        gbc.writeMem(0xd67e, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x8b, gbc.b());
        EXPECT(0xf4, gbc.c());
        EXPECT(0xa9, gbc.d());
        EXPECT(0x84, gbc.e());
        EXPECT(0xcf, gbc.h());
        EXPECT(0x2f, gbc.l());
        EXPECT(0xb0d8, gbc.sp());
        EXPECT(0xd67f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xd67e));
        // AF 03E2
        gbc.setState(0xb104, 0x4c64, 0xe7d0, 0x799d, 0x2fd8, 0x68b9, 0x0, 0x0);
        gbc.writeMem(0xb104, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x79, gbc.b());
        EXPECT(0x9d, gbc.c());
        EXPECT(0x2f, gbc.d());
        EXPECT(0xd8, gbc.e());
        EXPECT(0x68, gbc.h());
        EXPECT(0xb9, gbc.l());
        EXPECT(0x4c64, gbc.sp());
        EXPECT(0xb105, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xb104));
        // AF 03E3
        gbc.setState(0x106c, 0x4fdf, 0xc3a0, 0x9be5, 0x8a1f, 0x1864, 0x0, 0x1);
        gbc.writeMem(0x106c, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x9b, gbc.b());
        EXPECT(0xe5, gbc.c());
        EXPECT(0x8a, gbc.d());
        EXPECT(0x1f, gbc.e());
        EXPECT(0x18, gbc.h());
        EXPECT(0x64, gbc.l());
        EXPECT(0x4fdf, gbc.sp());
        EXPECT(0x106d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 03E4
        gbc.setState(0x425, 0x7a1c, 0x23f0, 0x35b1, 0xea99, 0x1d38, 0x1, 0x1);
        gbc.writeMem(0x425, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x35, gbc.b());
        EXPECT(0xb1, gbc.c());
        EXPECT(0xea, gbc.d());
        EXPECT(0x99, gbc.e());
        EXPECT(0x1d, gbc.h());
        EXPECT(0x38, gbc.l());
        EXPECT(0x7a1c, gbc.sp());
        EXPECT(0x426, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // AF 03E5
        gbc.setState(0xe759, 0xb8e4, 0xd550, 0x2bb5, 0x3c5b, 0x8efc, 0x0, 0x1);
        gbc.writeMem(0xe759, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x2b, gbc.b());
        EXPECT(0xb5, gbc.c());
        EXPECT(0x3c, gbc.d());
        EXPECT(0x5b, gbc.e());
        EXPECT(0x8e, gbc.h());
        EXPECT(0xfc, gbc.l());
        EXPECT(0xb8e4, gbc.sp());
        EXPECT(0xe75a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xe759));
        // AF 03E6
        gbc.setState(0xb128, 0xba15, 0x6f50, 0x43b9, 0x5bde, 0x93b, 0x1, 0x0);
        gbc.writeMem(0xb128, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x43, gbc.b());
        EXPECT(0xb9, gbc.c());
        EXPECT(0x5b, gbc.d());
        EXPECT(0xde, gbc.e());
        EXPECT(0x9, gbc.h());
        EXPECT(0x3b, gbc.l());
        EXPECT(0xba15, gbc.sp());
        EXPECT(0xb129, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xb128));
        // AF 03E7
        gbc.setState(0x253c, 0xb11f, 0xa9b0, 0xf1b8, 0xd197, 0xef41, 0x1, 0x0);
        gbc.writeMem(0x253c, { 0xaf });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xf1, gbc.b());
        EXPECT(0xb8, gbc.c());
        EXPECT(0xd1, gbc.d());
        EXPECT(0x97, gbc.e());
        EXPECT(0xef, gbc.h());
        EXPECT(0x41, gbc.l());
        EXPECT(0xb11f, gbc.sp());
        EXPECT(0x253d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
    }
