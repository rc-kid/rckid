    TEST(gbcemu, opcode_cc) {
        GBCEmu gbc{};
        uint8_t cartridge[0x8000];
        cartridge[0x149] = 0x02; // 8kb external RAM
        gbc.loadCartridge(new FlashGamePak(cartridge));
        // CC 0000
        gbc.setState(0x8a19, 0xd84b, 0x220, 0x593a, 0x8c61, 0xcd75, 0x0, 0x1);
        gbc.writeMem(0x8a19, { 0xcc, 0x32, 0xc1 });
        gbc.step();
        EXPECT(0x2, gbc.a());
        EXPECT(0x59, gbc.b());
        EXPECT(0x3a, gbc.c());
        EXPECT(0x8c, gbc.d());
        EXPECT(0x61, gbc.e());
        EXPECT(0xcd, gbc.h());
        EXPECT(0x75, gbc.l());
        EXPECT(0xd84b, gbc.sp());
        EXPECT(0x8a1c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0x8a19));
        EXPECT(0x32, gbc.readMem(0x8a1a));
        EXPECT(0xc1, gbc.readMem(0x8a1b));
        // CC 0003
        gbc.setState(0x390f, 0xc948, 0xc300, 0x8269, 0x1d91, 0xe01e, 0x1, 0x0);
        gbc.writeMem(0x390f, { 0xcc, 0x1b, 0x10 });
        gbc.step();
        EXPECT(0xc3, gbc.a());
        EXPECT(0x82, gbc.b());
        EXPECT(0x69, gbc.c());
        EXPECT(0x1d, gbc.d());
        EXPECT(0x91, gbc.e());
        EXPECT(0xe0, gbc.h());
        EXPECT(0x1e, gbc.l());
        EXPECT(0xc948, gbc.sp());
        EXPECT(0x3912, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 0004
        gbc.setState(0x5e22, 0x530c, 0xe830, 0x191c, 0x550d, 0xd1df, 0x1, 0x1);
        gbc.writeMem(0x5e22, { 0xcc, 0x4f, 0xd6 });
        gbc.step();
        EXPECT(0xe8, gbc.a());
        EXPECT(0x19, gbc.b());
        EXPECT(0x1c, gbc.c());
        EXPECT(0x55, gbc.d());
        EXPECT(0xd, gbc.e());
        EXPECT(0xd1, gbc.h());
        EXPECT(0xdf, gbc.l());
        EXPECT(0x530c, gbc.sp());
        EXPECT(0x5e25, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 0005
        gbc.setState(0x6d82, 0x2446, 0xc410, 0xe4f8, 0x710a, 0xa9b5, 0x1, 0x0);
        gbc.writeMem(0x6d82, { 0xcc, 0x59, 0x9 });
        gbc.step();
        EXPECT(0xc4, gbc.a());
        EXPECT(0xe4, gbc.b());
        EXPECT(0xf8, gbc.c());
        EXPECT(0x71, gbc.d());
        EXPECT(0xa, gbc.e());
        EXPECT(0xa9, gbc.h());
        EXPECT(0xb5, gbc.l());
        EXPECT(0x2446, gbc.sp());
        EXPECT(0x6d85, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 0006
        gbc.setState(0xb0f2, 0x1077, 0x8d40, 0x9c74, 0xeee8, 0xa5c8, 0x1, 0x0);
        gbc.writeMem(0xb0f2, { 0xcc, 0x8e, 0x33 });
        gbc.step();
        EXPECT(0x8d, gbc.a());
        EXPECT(0x9c, gbc.b());
        EXPECT(0x74, gbc.c());
        EXPECT(0xee, gbc.d());
        EXPECT(0xe8, gbc.e());
        EXPECT(0xa5, gbc.h());
        EXPECT(0xc8, gbc.l());
        EXPECT(0x1077, gbc.sp());
        EXPECT(0xb0f5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xb0f2));
        EXPECT(0x8e, gbc.readMem(0xb0f3));
        EXPECT(0x33, gbc.readMem(0xb0f4));
        // CC 0008
        gbc.setState(0xbd00, 0xff9d, 0xcd0, 0xd8c5, 0x7786, 0x2a48, 0x1, 0x1);
        gbc.writeMem(0xbd00, { 0xcc, 0x3e, 0x7f });
        gbc.writeMem(0xff9b, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xc, gbc.a());
        EXPECT(0xd8, gbc.b());
        EXPECT(0xc5, gbc.c());
        EXPECT(0x77, gbc.d());
        EXPECT(0x86, gbc.e());
        EXPECT(0x2a, gbc.h());
        EXPECT(0x48, gbc.l());
        EXPECT(0xff9b, gbc.sp());
        EXPECT(0x7f3e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xbd00));
        EXPECT(0x3e, gbc.readMem(0xbd01));
        EXPECT(0x7f, gbc.readMem(0xbd02));
        EXPECT(0x3, gbc.readMem(0xff9b));
        EXPECT(0xbd, gbc.readMem(0xff9c));
        // CC 0009
        gbc.setState(0xea6f, 0xd205, 0xad30, 0x1950, 0xfd54, 0x8814, 0x1, 0x0);
        gbc.writeMem(0xea6f, { 0xcc, 0xd4, 0xf7 });
        gbc.step();
        EXPECT(0xad, gbc.a());
        EXPECT(0x19, gbc.b());
        EXPECT(0x50, gbc.c());
        EXPECT(0xfd, gbc.d());
        EXPECT(0x54, gbc.e());
        EXPECT(0x88, gbc.h());
        EXPECT(0x14, gbc.l());
        EXPECT(0xd205, gbc.sp());
        EXPECT(0xea72, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xea6f));
        EXPECT(0xd4, gbc.readMem(0xea70));
        EXPECT(0xf7, gbc.readMem(0xea71));
        // CC 000B
        gbc.setState(0x4c30, 0x928e, 0xe6f0, 0x41e7, 0x615a, 0xd67f, 0x0, 0x1);
        gbc.writeMem(0x4c30, { 0xcc, 0xe9, 0xfa });
        gbc.writeMem(0x928c, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xe6, gbc.a());
        EXPECT(0x41, gbc.b());
        EXPECT(0xe7, gbc.c());
        EXPECT(0x61, gbc.d());
        EXPECT(0x5a, gbc.e());
        EXPECT(0xd6, gbc.h());
        EXPECT(0x7f, gbc.l());
        EXPECT(0x928c, gbc.sp());
        EXPECT(0xfae9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x33, gbc.readMem(0x928c));
        EXPECT(0x4c, gbc.readMem(0x928d));
        // CC 000C
        gbc.setState(0x421e, 0x8f8c, 0x5210, 0xa094, 0x49c, 0x719f, 0x1, 0x1);
        gbc.writeMem(0x421e, { 0xcc, 0x24, 0xe0 });
        gbc.step();
        EXPECT(0x52, gbc.a());
        EXPECT(0xa0, gbc.b());
        EXPECT(0x94, gbc.c());
        EXPECT(0x4, gbc.d());
        EXPECT(0x9c, gbc.e());
        EXPECT(0x71, gbc.h());
        EXPECT(0x9f, gbc.l());
        EXPECT(0x8f8c, gbc.sp());
        EXPECT(0x4221, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 000E
        gbc.setState(0x684d, 0x2772, 0xdc20, 0x9cdf, 0xa2dc, 0xcb09, 0x0, 0x0);
        gbc.writeMem(0x684d, { 0xcc, 0xf8, 0xe7 });
        gbc.step();
        EXPECT(0xdc, gbc.a());
        EXPECT(0x9c, gbc.b());
        EXPECT(0xdf, gbc.c());
        EXPECT(0xa2, gbc.d());
        EXPECT(0xdc, gbc.e());
        EXPECT(0xcb, gbc.h());
        EXPECT(0x9, gbc.l());
        EXPECT(0x2772, gbc.sp());
        EXPECT(0x6850, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 000F
        gbc.setState(0xd662, 0xef4e, 0xd230, 0x34ad, 0x2e6f, 0x405c, 0x1, 0x1);
        gbc.writeMem(0xd662, { 0xcc, 0xcf, 0x75 });
        gbc.step();
        EXPECT(0xd2, gbc.a());
        EXPECT(0x34, gbc.b());
        EXPECT(0xad, gbc.c());
        EXPECT(0x2e, gbc.d());
        EXPECT(0x6f, gbc.e());
        EXPECT(0x40, gbc.h());
        EXPECT(0x5c, gbc.l());
        EXPECT(0xef4e, gbc.sp());
        EXPECT(0xd665, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xd662));
        EXPECT(0xcf, gbc.readMem(0xd663));
        EXPECT(0x75, gbc.readMem(0xd664));
        // CC 0010
        gbc.setState(0x173, 0x7cde, 0x6550, 0x6e35, 0x628f, 0x4d3e, 0x1, 0x1);
        gbc.writeMem(0x173, { 0xcc, 0x4a, 0x59 });
        gbc.step();
        EXPECT(0x65, gbc.a());
        EXPECT(0x6e, gbc.b());
        EXPECT(0x35, gbc.c());
        EXPECT(0x62, gbc.d());
        EXPECT(0x8f, gbc.e());
        EXPECT(0x4d, gbc.h());
        EXPECT(0x3e, gbc.l());
        EXPECT(0x7cde, gbc.sp());
        EXPECT(0x176, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 0011
        gbc.setState(0x77a2, 0xb9a8, 0xa060, 0xd393, 0x483a, 0xe2e4, 0x0, 0x0);
        gbc.writeMem(0x77a2, { 0xcc, 0xd6, 0x65 });
        gbc.step();
        EXPECT(0xa0, gbc.a());
        EXPECT(0xd3, gbc.b());
        EXPECT(0x93, gbc.c());
        EXPECT(0x48, gbc.d());
        EXPECT(0x3a, gbc.e());
        EXPECT(0xe2, gbc.h());
        EXPECT(0xe4, gbc.l());
        EXPECT(0xb9a8, gbc.sp());
        EXPECT(0x77a5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 0012
        gbc.setState(0x1c28, 0xa787, 0x5f80, 0x183b, 0x8790, 0xc6fa, 0x0, 0x0);
        gbc.writeMem(0x1c28, { 0xcc, 0x7f, 0x57 });
        gbc.writeMem(0xa785, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x5f, gbc.a());
        EXPECT(0x18, gbc.b());
        EXPECT(0x3b, gbc.c());
        EXPECT(0x87, gbc.d());
        EXPECT(0x90, gbc.e());
        EXPECT(0xc6, gbc.h());
        EXPECT(0xfa, gbc.l());
        EXPECT(0xa785, gbc.sp());
        EXPECT(0x577f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x2b, gbc.readMem(0xa785));
        EXPECT(0x1c, gbc.readMem(0xa786));
        // CC 0013
        gbc.setState(0x4827, 0x8c3e, 0xde50, 0x8f77, 0x8e93, 0xfdb4, 0x0, 0x0);
        gbc.writeMem(0x4827, { 0xcc, 0x96, 0xf5 });
        gbc.step();
        EXPECT(0xde, gbc.a());
        EXPECT(0x8f, gbc.b());
        EXPECT(0x77, gbc.c());
        EXPECT(0x8e, gbc.d());
        EXPECT(0x93, gbc.e());
        EXPECT(0xfd, gbc.h());
        EXPECT(0xb4, gbc.l());
        EXPECT(0x8c3e, gbc.sp());
        EXPECT(0x482a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 0015
        gbc.setState(0x7df8, 0xc04d, 0x3980, 0x5a19, 0xf0ad, 0x9ee, 0x0, 0x0);
        gbc.writeMem(0x7df8, { 0xcc, 0x2b, 0x96 });
        gbc.writeMem(0xc04b, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x39, gbc.a());
        EXPECT(0x5a, gbc.b());
        EXPECT(0x19, gbc.c());
        EXPECT(0xf0, gbc.d());
        EXPECT(0xad, gbc.e());
        EXPECT(0x9, gbc.h());
        EXPECT(0xee, gbc.l());
        EXPECT(0xc04b, gbc.sp());
        EXPECT(0x962b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xfb, gbc.readMem(0xc04b));
        EXPECT(0x7d, gbc.readMem(0xc04c));
        // CC 0016
        gbc.setState(0xcd28, 0xec90, 0x7e80, 0x1ac3, 0x426d, 0x63ac, 0x0, 0x1);
        gbc.writeMem(0xcd28, { 0xcc, 0xe7, 0x81 });
        gbc.writeMem(0xec8e, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x7e, gbc.a());
        EXPECT(0x1a, gbc.b());
        EXPECT(0xc3, gbc.c());
        EXPECT(0x42, gbc.d());
        EXPECT(0x6d, gbc.e());
        EXPECT(0x63, gbc.h());
        EXPECT(0xac, gbc.l());
        EXPECT(0xec8e, gbc.sp());
        EXPECT(0x81e7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xcd28));
        EXPECT(0xe7, gbc.readMem(0xcd29));
        EXPECT(0x81, gbc.readMem(0xcd2a));
        EXPECT(0x2b, gbc.readMem(0xec8e));
        EXPECT(0xcd, gbc.readMem(0xec8f));
        // CC 0017
        gbc.setState(0x48de, 0xf0ed, 0xf700, 0x884c, 0xec84, 0x49e7, 0x1, 0x1);
        gbc.writeMem(0x48de, { 0xcc, 0xb0, 0x5e });
        gbc.step();
        EXPECT(0xf7, gbc.a());
        EXPECT(0x88, gbc.b());
        EXPECT(0x4c, gbc.c());
        EXPECT(0xec, gbc.d());
        EXPECT(0x84, gbc.e());
        EXPECT(0x49, gbc.h());
        EXPECT(0xe7, gbc.l());
        EXPECT(0xf0ed, gbc.sp());
        EXPECT(0x48e1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 0018
        gbc.setState(0x5dcb, 0xfa66, 0xac50, 0x9de0, 0xb6d5, 0x54c6, 0x0, 0x0);
        gbc.writeMem(0x5dcb, { 0xcc, 0xe6, 0x3a });
        gbc.step();
        EXPECT(0xac, gbc.a());
        EXPECT(0x9d, gbc.b());
        EXPECT(0xe0, gbc.c());
        EXPECT(0xb6, gbc.d());
        EXPECT(0xd5, gbc.e());
        EXPECT(0x54, gbc.h());
        EXPECT(0xc6, gbc.l());
        EXPECT(0xfa66, gbc.sp());
        EXPECT(0x5dce, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 0019
        gbc.setState(0x2cd0, 0x4eb3, 0xae20, 0x21a9, 0xcd9a, 0x65fc, 0x1, 0x0);
        gbc.writeMem(0x2cd0, { 0xcc, 0x31, 0xc6 });
        gbc.step();
        EXPECT(0xae, gbc.a());
        EXPECT(0x21, gbc.b());
        EXPECT(0xa9, gbc.c());
        EXPECT(0xcd, gbc.d());
        EXPECT(0x9a, gbc.e());
        EXPECT(0x65, gbc.h());
        EXPECT(0xfc, gbc.l());
        EXPECT(0x4eb3, gbc.sp());
        EXPECT(0x2cd3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 001B
        gbc.setState(0xd296, 0x6297, 0x3150, 0xbd0d, 0xbe5f, 0x7242, 0x0, 0x1);
        gbc.writeMem(0xd296, { 0xcc, 0xf, 0xb8 });
        gbc.step();
        EXPECT(0x31, gbc.a());
        EXPECT(0xbd, gbc.b());
        EXPECT(0xd, gbc.c());
        EXPECT(0xbe, gbc.d());
        EXPECT(0x5f, gbc.e());
        EXPECT(0x72, gbc.h());
        EXPECT(0x42, gbc.l());
        EXPECT(0x6297, gbc.sp());
        EXPECT(0xd299, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xd296));
        EXPECT(0xf, gbc.readMem(0xd297));
        EXPECT(0xb8, gbc.readMem(0xd298));
        // CC 001C
        gbc.setState(0xc23c, 0xb61b, 0xe450, 0xc349, 0x9dd2, 0x32af, 0x1, 0x1);
        gbc.writeMem(0xc23c, { 0xcc, 0x5a, 0xf4 });
        gbc.step();
        EXPECT(0xe4, gbc.a());
        EXPECT(0xc3, gbc.b());
        EXPECT(0x49, gbc.c());
        EXPECT(0x9d, gbc.d());
        EXPECT(0xd2, gbc.e());
        EXPECT(0x32, gbc.h());
        EXPECT(0xaf, gbc.l());
        EXPECT(0xb61b, gbc.sp());
        EXPECT(0xc23f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xc23c));
        EXPECT(0x5a, gbc.readMem(0xc23d));
        EXPECT(0xf4, gbc.readMem(0xc23e));
        // CC 001D
        gbc.setState(0xd2d0, 0x6b52, 0x2610, 0x2215, 0xd253, 0x9245, 0x1, 0x0);
        gbc.writeMem(0xd2d0, { 0xcc, 0xb2, 0x2b });
        gbc.step();
        EXPECT(0x26, gbc.a());
        EXPECT(0x22, gbc.b());
        EXPECT(0x15, gbc.c());
        EXPECT(0xd2, gbc.d());
        EXPECT(0x53, gbc.e());
        EXPECT(0x92, gbc.h());
        EXPECT(0x45, gbc.l());
        EXPECT(0x6b52, gbc.sp());
        EXPECT(0xd2d3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xd2d0));
        EXPECT(0xb2, gbc.readMem(0xd2d1));
        EXPECT(0x2b, gbc.readMem(0xd2d2));
        // CC 001E
        gbc.setState(0xc786, 0x22c7, 0xf500, 0xd9e3, 0xb429, 0xa8e3, 0x1, 0x1);
        gbc.writeMem(0xc786, { 0xcc, 0x91, 0x22 });
        gbc.step();
        EXPECT(0xf5, gbc.a());
        EXPECT(0xd9, gbc.b());
        EXPECT(0xe3, gbc.c());
        EXPECT(0xb4, gbc.d());
        EXPECT(0x29, gbc.e());
        EXPECT(0xa8, gbc.h());
        EXPECT(0xe3, gbc.l());
        EXPECT(0x22c7, gbc.sp());
        EXPECT(0xc789, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xc786));
        EXPECT(0x91, gbc.readMem(0xc787));
        EXPECT(0x22, gbc.readMem(0xc788));
        // CC 001F
        gbc.setState(0x1c5b, 0xe3ff, 0x54d0, 0x6cc9, 0x3e8a, 0xecbb, 0x1, 0x0);
        gbc.writeMem(0x1c5b, { 0xcc, 0xf6, 0x45 });
        gbc.writeMem(0xe3fd, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x54, gbc.a());
        EXPECT(0x6c, gbc.b());
        EXPECT(0xc9, gbc.c());
        EXPECT(0x3e, gbc.d());
        EXPECT(0x8a, gbc.e());
        EXPECT(0xec, gbc.h());
        EXPECT(0xbb, gbc.l());
        EXPECT(0xe3fd, gbc.sp());
        EXPECT(0x45f6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x5e, gbc.readMem(0xe3fd));
        EXPECT(0x1c, gbc.readMem(0xe3fe));
        // CC 0022
        gbc.setState(0x27df, 0xb3f1, 0x8040, 0x7ca5, 0x324, 0xdee5, 0x0, 0x1);
        gbc.writeMem(0x27df, { 0xcc, 0x7d, 0xa6 });
        gbc.step();
        EXPECT(0x80, gbc.a());
        EXPECT(0x7c, gbc.b());
        EXPECT(0xa5, gbc.c());
        EXPECT(0x3, gbc.d());
        EXPECT(0x24, gbc.e());
        EXPECT(0xde, gbc.h());
        EXPECT(0xe5, gbc.l());
        EXPECT(0xb3f1, gbc.sp());
        EXPECT(0x27e2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 0023
        gbc.setState(0xbad, 0xa600, 0x2640, 0x85aa, 0x6ebb, 0x5a92, 0x0, 0x1);
        gbc.writeMem(0xbad, { 0xcc, 0x8d, 0x9a });
        gbc.step();
        EXPECT(0x26, gbc.a());
        EXPECT(0x85, gbc.b());
        EXPECT(0xaa, gbc.c());
        EXPECT(0x6e, gbc.d());
        EXPECT(0xbb, gbc.e());
        EXPECT(0x5a, gbc.h());
        EXPECT(0x92, gbc.l());
        EXPECT(0xa600, gbc.sp());
        EXPECT(0xbb0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 0025
        gbc.setState(0x679b, 0x8b2c, 0x8410, 0x7e44, 0x9bc, 0x4df8, 0x0, 0x1);
        gbc.writeMem(0x679b, { 0xcc, 0xc8, 0x32 });
        gbc.step();
        EXPECT(0x84, gbc.a());
        EXPECT(0x7e, gbc.b());
        EXPECT(0x44, gbc.c());
        EXPECT(0x9, gbc.d());
        EXPECT(0xbc, gbc.e());
        EXPECT(0x4d, gbc.h());
        EXPECT(0xf8, gbc.l());
        EXPECT(0x8b2c, gbc.sp());
        EXPECT(0x679e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 0026
        gbc.setState(0xa190, 0xc8eb, 0x97f0, 0x8bff, 0x1256, 0x1d6d, 0x1, 0x0);
        gbc.writeMem(0xa190, { 0xcc, 0xbe, 0x49 });
        gbc.writeMem(0xc8e9, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x97, gbc.a());
        EXPECT(0x8b, gbc.b());
        EXPECT(0xff, gbc.c());
        EXPECT(0x12, gbc.d());
        EXPECT(0x56, gbc.e());
        EXPECT(0x1d, gbc.h());
        EXPECT(0x6d, gbc.l());
        EXPECT(0xc8e9, gbc.sp());
        EXPECT(0x49be, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xa190));
        EXPECT(0xbe, gbc.readMem(0xa191));
        EXPECT(0x49, gbc.readMem(0xa192));
        EXPECT(0x93, gbc.readMem(0xc8e9));
        EXPECT(0xa1, gbc.readMem(0xc8ea));
        // CC 0027
        gbc.setState(0x4c47, 0x92ee, 0x5610, 0x790e, 0xa2c, 0x14e7, 0x0, 0x1);
        gbc.writeMem(0x4c47, { 0xcc, 0xa5, 0x9e });
        gbc.step();
        EXPECT(0x56, gbc.a());
        EXPECT(0x79, gbc.b());
        EXPECT(0xe, gbc.c());
        EXPECT(0xa, gbc.d());
        EXPECT(0x2c, gbc.e());
        EXPECT(0x14, gbc.h());
        EXPECT(0xe7, gbc.l());
        EXPECT(0x92ee, gbc.sp());
        EXPECT(0x4c4a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 002A
        gbc.setState(0x3d09, 0x8067, 0xf420, 0x6448, 0x575e, 0xd8ac, 0x0, 0x0);
        gbc.writeMem(0x3d09, { 0xcc, 0x95, 0xa0 });
        gbc.step();
        EXPECT(0xf4, gbc.a());
        EXPECT(0x64, gbc.b());
        EXPECT(0x48, gbc.c());
        EXPECT(0x57, gbc.d());
        EXPECT(0x5e, gbc.e());
        EXPECT(0xd8, gbc.h());
        EXPECT(0xac, gbc.l());
        EXPECT(0x8067, gbc.sp());
        EXPECT(0x3d0c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 002C
        gbc.setState(0x5823, 0xc32c, 0x1b90, 0x9ff7, 0xc7b5, 0xde90, 0x1, 0x0);
        gbc.writeMem(0x5823, { 0xcc, 0xd, 0x4a });
        gbc.writeMem(0xc32a, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x1b, gbc.a());
        EXPECT(0x9f, gbc.b());
        EXPECT(0xf7, gbc.c());
        EXPECT(0xc7, gbc.d());
        EXPECT(0xb5, gbc.e());
        EXPECT(0xde, gbc.h());
        EXPECT(0x90, gbc.l());
        EXPECT(0xc32a, gbc.sp());
        EXPECT(0x4a0d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x26, gbc.readMem(0xc32a));
        EXPECT(0x58, gbc.readMem(0xc32b));
        // CC 002E
        gbc.setState(0xda58, 0xb2a3, 0xf890, 0x3373, 0xd050, 0x4f69, 0x1, 0x0);
        gbc.writeMem(0xb2a1, { 0x0, 0x0 });
        gbc.writeMem(0xda58, { 0xcc, 0xf6, 0x5a });
        gbc.step();
        EXPECT(0xf8, gbc.a());
        EXPECT(0x33, gbc.b());
        EXPECT(0x73, gbc.c());
        EXPECT(0xd0, gbc.d());
        EXPECT(0x50, gbc.e());
        EXPECT(0x4f, gbc.h());
        EXPECT(0x69, gbc.l());
        EXPECT(0xb2a1, gbc.sp());
        EXPECT(0x5af6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x5b, gbc.readMem(0xb2a1));
        EXPECT(0xda, gbc.readMem(0xb2a2));
        EXPECT(0xcc, gbc.readMem(0xda58));
        EXPECT(0xf6, gbc.readMem(0xda59));
        EXPECT(0x5a, gbc.readMem(0xda5a));
        // CC 002F
        gbc.setState(0x1466, 0x404e, 0x5920, 0x1043, 0x1d32, 0xf70b, 0x1, 0x1);
        gbc.writeMem(0x1466, { 0xcc, 0x2d, 0x4e });
        gbc.step();
        EXPECT(0x59, gbc.a());
        EXPECT(0x10, gbc.b());
        EXPECT(0x43, gbc.c());
        EXPECT(0x1d, gbc.d());
        EXPECT(0x32, gbc.e());
        EXPECT(0xf7, gbc.h());
        EXPECT(0xb, gbc.l());
        EXPECT(0x404e, gbc.sp());
        EXPECT(0x1469, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 0030
        gbc.setState(0x34d9, 0xd0f6, 0x6b40, 0x1a02, 0x4a5b, 0xa452, 0x0, 0x0);
        gbc.writeMem(0x34d9, { 0xcc, 0x2d, 0x9a });
        gbc.step();
        EXPECT(0x6b, gbc.a());
        EXPECT(0x1a, gbc.b());
        EXPECT(0x2, gbc.c());
        EXPECT(0x4a, gbc.d());
        EXPECT(0x5b, gbc.e());
        EXPECT(0xa4, gbc.h());
        EXPECT(0x52, gbc.l());
        EXPECT(0xd0f6, gbc.sp());
        EXPECT(0x34dc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 0031
        gbc.setState(0xe765, 0x2f2c, 0xd660, 0x9097, 0x870a, 0xaebf, 0x1, 0x0);
        gbc.writeMem(0xe765, { 0xcc, 0xf, 0x2c });
        gbc.step();
        EXPECT(0xd6, gbc.a());
        EXPECT(0x90, gbc.b());
        EXPECT(0x97, gbc.c());
        EXPECT(0x87, gbc.d());
        EXPECT(0xa, gbc.e());
        EXPECT(0xae, gbc.h());
        EXPECT(0xbf, gbc.l());
        EXPECT(0x2f2c, gbc.sp());
        EXPECT(0xe768, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xe765));
        EXPECT(0xf, gbc.readMem(0xe766));
        EXPECT(0x2c, gbc.readMem(0xe767));
        // CC 0032
        gbc.setState(0xdaff, 0x4817, 0x6770, 0x1177, 0xcdf7, 0x4e76, 0x0, 0x1);
        gbc.writeMem(0xdaff, { 0xcc, 0x75, 0xee });
        gbc.step();
        EXPECT(0x67, gbc.a());
        EXPECT(0x11, gbc.b());
        EXPECT(0x77, gbc.c());
        EXPECT(0xcd, gbc.d());
        EXPECT(0xf7, gbc.e());
        EXPECT(0x4e, gbc.h());
        EXPECT(0x76, gbc.l());
        EXPECT(0x4817, gbc.sp());
        EXPECT(0xdb02, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xdaff));
        EXPECT(0x75, gbc.readMem(0xdb00));
        EXPECT(0xee, gbc.readMem(0xdb01));
        // CC 0034
        gbc.setState(0x4048, 0x4f, 0xdd00, 0xb700, 0x9b39, 0x80b5, 0x0, 0x1);
        gbc.writeMem(0x4048, { 0xcc, 0x65, 0x1e });
        gbc.step();
        EXPECT(0xdd, gbc.a());
        EXPECT(0xb7, gbc.b());
        EXPECT(0x0, gbc.c());
        EXPECT(0x9b, gbc.d());
        EXPECT(0x39, gbc.e());
        EXPECT(0x80, gbc.h());
        EXPECT(0xb5, gbc.l());
        EXPECT(0x4f, gbc.sp());
        EXPECT(0x404b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 0036
        gbc.setState(0x2297, 0x1fce, 0x6a00, 0x71ed, 0x24f, 0x56a0, 0x0, 0x0);
        gbc.writeMem(0x2297, { 0xcc, 0xb, 0x49 });
        gbc.step();
        EXPECT(0x6a, gbc.a());
        EXPECT(0x71, gbc.b());
        EXPECT(0xed, gbc.c());
        EXPECT(0x2, gbc.d());
        EXPECT(0x4f, gbc.e());
        EXPECT(0x56, gbc.h());
        EXPECT(0xa0, gbc.l());
        EXPECT(0x1fce, gbc.sp());
        EXPECT(0x229a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 0038
        gbc.setState(0x6922, 0xf8bd, 0x9c00, 0xc0eb, 0x9bb5, 0x8d02, 0x1, 0x1);
        gbc.writeMem(0x6922, { 0xcc, 0xb4, 0xf3 });
        gbc.step();
        EXPECT(0x9c, gbc.a());
        EXPECT(0xc0, gbc.b());
        EXPECT(0xeb, gbc.c());
        EXPECT(0x9b, gbc.d());
        EXPECT(0xb5, gbc.e());
        EXPECT(0x8d, gbc.h());
        EXPECT(0x2, gbc.l());
        EXPECT(0xf8bd, gbc.sp());
        EXPECT(0x6925, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 0039
        gbc.setState(0xeadf, 0x9ab4, 0x1600, 0x5b44, 0x5948, 0x37db, 0x0, 0x1);
        gbc.writeMem(0xeadf, { 0xcc, 0xde, 0x8a });
        gbc.step();
        EXPECT(0x16, gbc.a());
        EXPECT(0x5b, gbc.b());
        EXPECT(0x44, gbc.c());
        EXPECT(0x59, gbc.d());
        EXPECT(0x48, gbc.e());
        EXPECT(0x37, gbc.h());
        EXPECT(0xdb, gbc.l());
        EXPECT(0x9ab4, gbc.sp());
        EXPECT(0xeae2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xeadf));
        EXPECT(0xde, gbc.readMem(0xeae0));
        EXPECT(0x8a, gbc.readMem(0xeae1));
        // CC 003A
        gbc.setState(0xed90, 0xfcf3, 0xf5c0, 0x90cc, 0x7915, 0xb43e, 0x0, 0x1);
        gbc.writeMem(0xed90, { 0xcc, 0xdb, 0xbe });
        gbc.writeMem(0xfcf1, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xf5, gbc.a());
        EXPECT(0x90, gbc.b());
        EXPECT(0xcc, gbc.c());
        EXPECT(0x79, gbc.d());
        EXPECT(0x15, gbc.e());
        EXPECT(0xb4, gbc.h());
        EXPECT(0x3e, gbc.l());
        EXPECT(0xfcf1, gbc.sp());
        EXPECT(0xbedb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xed90));
        EXPECT(0xdb, gbc.readMem(0xed91));
        EXPECT(0xbe, gbc.readMem(0xed92));
        EXPECT(0x93, gbc.readMem(0xfcf1));
        EXPECT(0xed, gbc.readMem(0xfcf2));
        // CC 003B
        gbc.setState(0xe94e, 0x87ec, 0xfa0, 0x5aab, 0x7277, 0xf360, 0x1, 0x0);
        gbc.writeMem(0x87ea, { 0x0, 0x0 });
        gbc.writeMem(0xe94e, { 0xcc, 0x54, 0x2c });
        gbc.step();
        EXPECT(0xf, gbc.a());
        EXPECT(0x5a, gbc.b());
        EXPECT(0xab, gbc.c());
        EXPECT(0x72, gbc.d());
        EXPECT(0x77, gbc.e());
        EXPECT(0xf3, gbc.h());
        EXPECT(0x60, gbc.l());
        EXPECT(0x87ea, gbc.sp());
        EXPECT(0x2c54, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x51, gbc.readMem(0x87ea));
        EXPECT(0xe9, gbc.readMem(0x87eb));
        EXPECT(0xcc, gbc.readMem(0xe94e));
        EXPECT(0x54, gbc.readMem(0xe94f));
        EXPECT(0x2c, gbc.readMem(0xe950));
        // CC 003C
        gbc.setState(0x2e49, 0xa513, 0x1620, 0xf82d, 0x3993, 0xb2a4, 0x1, 0x0);
        gbc.writeMem(0x2e49, { 0xcc, 0x9, 0x25 });
        gbc.step();
        EXPECT(0x16, gbc.a());
        EXPECT(0xf8, gbc.b());
        EXPECT(0x2d, gbc.c());
        EXPECT(0x39, gbc.d());
        EXPECT(0x93, gbc.e());
        EXPECT(0xb2, gbc.h());
        EXPECT(0xa4, gbc.l());
        EXPECT(0xa513, gbc.sp());
        EXPECT(0x2e4c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 003D
        gbc.setState(0xbad2, 0x858a, 0xdc30, 0xfdcd, 0x5217, 0x3d7a, 0x0, 0x1);
        gbc.writeMem(0xbad2, { 0xcc, 0xdf, 0x39 });
        gbc.step();
        EXPECT(0xdc, gbc.a());
        EXPECT(0xfd, gbc.b());
        EXPECT(0xcd, gbc.c());
        EXPECT(0x52, gbc.d());
        EXPECT(0x17, gbc.e());
        EXPECT(0x3d, gbc.h());
        EXPECT(0x7a, gbc.l());
        EXPECT(0x858a, gbc.sp());
        EXPECT(0xbad5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xbad2));
        EXPECT(0xdf, gbc.readMem(0xbad3));
        EXPECT(0x39, gbc.readMem(0xbad4));
        // CC 003E
        gbc.setState(0x7a4e, 0x9984, 0x7710, 0xc4f2, 0xdd26, 0x34b6, 0x0, 0x1);
        gbc.writeMem(0x7a4e, { 0xcc, 0x62, 0x96 });
        gbc.step();
        EXPECT(0x77, gbc.a());
        EXPECT(0xc4, gbc.b());
        EXPECT(0xf2, gbc.c());
        EXPECT(0xdd, gbc.d());
        EXPECT(0x26, gbc.e());
        EXPECT(0x34, gbc.h());
        EXPECT(0xb6, gbc.l());
        EXPECT(0x9984, gbc.sp());
        EXPECT(0x7a51, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 003F
        gbc.setState(0xc03a, 0xb154, 0x79f0, 0xfffb, 0xcb42, 0x201d, 0x0, 0x1);
        gbc.writeMem(0xb152, { 0x0, 0x0 });
        gbc.writeMem(0xc03a, { 0xcc, 0x41, 0x9b });
        gbc.step();
        EXPECT(0x79, gbc.a());
        EXPECT(0xff, gbc.b());
        EXPECT(0xfb, gbc.c());
        EXPECT(0xcb, gbc.d());
        EXPECT(0x42, gbc.e());
        EXPECT(0x20, gbc.h());
        EXPECT(0x1d, gbc.l());
        EXPECT(0xb152, gbc.sp());
        EXPECT(0x9b41, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x3d, gbc.readMem(0xb152));
        EXPECT(0xc0, gbc.readMem(0xb153));
        EXPECT(0xcc, gbc.readMem(0xc03a));
        EXPECT(0x41, gbc.readMem(0xc03b));
        EXPECT(0x9b, gbc.readMem(0xc03c));
        // CC 0040
        gbc.setState(0xece2, 0xf63f, 0x5da0, 0x644e, 0xd1ca, 0x6cd8, 0x1, 0x0);
        gbc.writeMem(0xece2, { 0xcc, 0x66, 0xf8 });
        gbc.writeMem(0xf63d, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x5d, gbc.a());
        EXPECT(0x64, gbc.b());
        EXPECT(0x4e, gbc.c());
        EXPECT(0xd1, gbc.d());
        EXPECT(0xca, gbc.e());
        EXPECT(0x6c, gbc.h());
        EXPECT(0xd8, gbc.l());
        EXPECT(0xf63d, gbc.sp());
        EXPECT(0xf866, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xece2));
        EXPECT(0x66, gbc.readMem(0xece3));
        EXPECT(0xf8, gbc.readMem(0xece4));
        EXPECT(0xe5, gbc.readMem(0xf63d));
        EXPECT(0xec, gbc.readMem(0xf63e));
        // CC 0041
        gbc.setState(0x9029, 0xf532, 0x38c0, 0x272d, 0x73fc, 0xa132, 0x1, 0x0);
        gbc.writeMem(0x9029, { 0xcc, 0x8a, 0xf3 });
        gbc.writeMem(0xf530, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x38, gbc.a());
        EXPECT(0x27, gbc.b());
        EXPECT(0x2d, gbc.c());
        EXPECT(0x73, gbc.d());
        EXPECT(0xfc, gbc.e());
        EXPECT(0xa1, gbc.h());
        EXPECT(0x32, gbc.l());
        EXPECT(0xf530, gbc.sp());
        EXPECT(0xf38a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0x9029));
        EXPECT(0x8a, gbc.readMem(0x902a));
        EXPECT(0xf3, gbc.readMem(0x902b));
        EXPECT(0x2c, gbc.readMem(0xf530));
        EXPECT(0x90, gbc.readMem(0xf531));
        // CC 0042
        gbc.setState(0x2616, 0x3585, 0xa750, 0x95e5, 0xa72, 0xc67f, 0x0, 0x0);
        gbc.writeMem(0x2616, { 0xcc, 0x47, 0x42 });
        gbc.step();
        EXPECT(0xa7, gbc.a());
        EXPECT(0x95, gbc.b());
        EXPECT(0xe5, gbc.c());
        EXPECT(0xa, gbc.d());
        EXPECT(0x72, gbc.e());
        EXPECT(0xc6, gbc.h());
        EXPECT(0x7f, gbc.l());
        EXPECT(0x3585, gbc.sp());
        EXPECT(0x2619, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 0043
        gbc.setState(0x678a, 0x5fc8, 0x9730, 0x5d5a, 0x9548, 0x3458, 0x0, 0x1);
        gbc.writeMem(0x678a, { 0xcc, 0x42, 0xa8 });
        gbc.step();
        EXPECT(0x97, gbc.a());
        EXPECT(0x5d, gbc.b());
        EXPECT(0x5a, gbc.c());
        EXPECT(0x95, gbc.d());
        EXPECT(0x48, gbc.e());
        EXPECT(0x34, gbc.h());
        EXPECT(0x58, gbc.l());
        EXPECT(0x5fc8, gbc.sp());
        EXPECT(0x678d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 0045
        gbc.setState(0x3f6, 0xdb89, 0xfea0, 0x40eb, 0x85fb, 0x4047, 0x0, 0x1);
        gbc.writeMem(0x3f6, { 0xcc, 0xf2, 0x61 });
        gbc.writeMem(0xdb87, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xfe, gbc.a());
        EXPECT(0x40, gbc.b());
        EXPECT(0xeb, gbc.c());
        EXPECT(0x85, gbc.d());
        EXPECT(0xfb, gbc.e());
        EXPECT(0x40, gbc.h());
        EXPECT(0x47, gbc.l());
        EXPECT(0xdb87, gbc.sp());
        EXPECT(0x61f2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xf9, gbc.readMem(0xdb87));
        EXPECT(0x3, gbc.readMem(0xdb88));
        // CC 0046
        gbc.setState(0xad6a, 0x179a, 0x1540, 0x6a21, 0xbf73, 0xffac, 0x1, 0x1);
        gbc.writeMem(0xad6a, { 0xcc, 0xda, 0x31 });
        gbc.step();
        EXPECT(0x15, gbc.a());
        EXPECT(0x6a, gbc.b());
        EXPECT(0x21, gbc.c());
        EXPECT(0xbf, gbc.d());
        EXPECT(0x73, gbc.e());
        EXPECT(0xff, gbc.h());
        EXPECT(0xac, gbc.l());
        EXPECT(0x179a, gbc.sp());
        EXPECT(0xad6d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xad6a));
        EXPECT(0xda, gbc.readMem(0xad6b));
        EXPECT(0x31, gbc.readMem(0xad6c));
        // CC 0047
        gbc.setState(0x6b5, 0xc6e5, 0xca80, 0x1923, 0xfa85, 0x4242, 0x1, 0x1);
        gbc.writeMem(0x6b5, { 0xcc, 0xb1, 0xcb });
        gbc.writeMem(0xc6e3, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xca, gbc.a());
        EXPECT(0x19, gbc.b());
        EXPECT(0x23, gbc.c());
        EXPECT(0xfa, gbc.d());
        EXPECT(0x85, gbc.e());
        EXPECT(0x42, gbc.h());
        EXPECT(0x42, gbc.l());
        EXPECT(0xc6e3, gbc.sp());
        EXPECT(0xcbb1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xb8, gbc.readMem(0xc6e3));
        EXPECT(0x6, gbc.readMem(0xc6e4));
        // CC 004B
        gbc.setState(0xc9f7, 0xf3bc, 0x9f00, 0x3510, 0xcd7a, 0x26ab, 0x1, 0x1);
        gbc.writeMem(0xc9f7, { 0xcc, 0x7, 0xc6 });
        gbc.step();
        EXPECT(0x9f, gbc.a());
        EXPECT(0x35, gbc.b());
        EXPECT(0x10, gbc.c());
        EXPECT(0xcd, gbc.d());
        EXPECT(0x7a, gbc.e());
        EXPECT(0x26, gbc.h());
        EXPECT(0xab, gbc.l());
        EXPECT(0xf3bc, gbc.sp());
        EXPECT(0xc9fa, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xc9f7));
        EXPECT(0x7, gbc.readMem(0xc9f8));
        EXPECT(0xc6, gbc.readMem(0xc9f9));
        // CC 004C
        gbc.setState(0x8915, 0xf2e5, 0xdff0, 0x9908, 0xaefe, 0xb711, 0x1, 0x1);
        gbc.writeMem(0x8915, { 0xcc, 0x71, 0x8d });
        gbc.writeMem(0xf2e3, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xdf, gbc.a());
        EXPECT(0x99, gbc.b());
        EXPECT(0x8, gbc.c());
        EXPECT(0xae, gbc.d());
        EXPECT(0xfe, gbc.e());
        EXPECT(0xb7, gbc.h());
        EXPECT(0x11, gbc.l());
        EXPECT(0xf2e3, gbc.sp());
        EXPECT(0x8d71, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0x8915));
        EXPECT(0x71, gbc.readMem(0x8916));
        EXPECT(0x8d, gbc.readMem(0x8917));
        EXPECT(0x18, gbc.readMem(0xf2e3));
        EXPECT(0x89, gbc.readMem(0xf2e4));
        // CC 004E
        gbc.setState(0x8771, 0xf677, 0xe760, 0xe3a7, 0x25f2, 0x166b, 0x0, 0x1);
        gbc.writeMem(0x8771, { 0xcc, 0xb, 0x35 });
        gbc.step();
        EXPECT(0xe7, gbc.a());
        EXPECT(0xe3, gbc.b());
        EXPECT(0xa7, gbc.c());
        EXPECT(0x25, gbc.d());
        EXPECT(0xf2, gbc.e());
        EXPECT(0x16, gbc.h());
        EXPECT(0x6b, gbc.l());
        EXPECT(0xf677, gbc.sp());
        EXPECT(0x8774, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0x8771));
        EXPECT(0xb, gbc.readMem(0x8772));
        EXPECT(0x35, gbc.readMem(0x8773));
        // CC 0050
        gbc.setState(0x519, 0xbad7, 0x97d0, 0x4dc2, 0x15bd, 0xdb4, 0x0, 0x0);
        gbc.writeMem(0x519, { 0xcc, 0x42, 0x78 });
        gbc.writeMem(0xbad5, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x97, gbc.a());
        EXPECT(0x4d, gbc.b());
        EXPECT(0xc2, gbc.c());
        EXPECT(0x15, gbc.d());
        EXPECT(0xbd, gbc.e());
        EXPECT(0xd, gbc.h());
        EXPECT(0xb4, gbc.l());
        EXPECT(0xbad5, gbc.sp());
        EXPECT(0x7842, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x1c, gbc.readMem(0xbad5));
        EXPECT(0x5, gbc.readMem(0xbad6));
        // CC 0051
        gbc.setState(0xc97d, 0x41bb, 0x6100, 0x13b1, 0xfc99, 0x22e6, 0x0, 0x1);
        gbc.writeMem(0xc97d, { 0xcc, 0x7f, 0xbf });
        gbc.step();
        EXPECT(0x61, gbc.a());
        EXPECT(0x13, gbc.b());
        EXPECT(0xb1, gbc.c());
        EXPECT(0xfc, gbc.d());
        EXPECT(0x99, gbc.e());
        EXPECT(0x22, gbc.h());
        EXPECT(0xe6, gbc.l());
        EXPECT(0x41bb, gbc.sp());
        EXPECT(0xc980, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xc97d));
        EXPECT(0x7f, gbc.readMem(0xc97e));
        EXPECT(0xbf, gbc.readMem(0xc97f));
        // CC 0053
        gbc.setState(0xb15f, 0xd0b6, 0xa420, 0x3789, 0xbb38, 0x9f9d, 0x0, 0x0);
        gbc.writeMem(0xb15f, { 0xcc, 0xb5, 0xef });
        gbc.step();
        EXPECT(0xa4, gbc.a());
        EXPECT(0x37, gbc.b());
        EXPECT(0x89, gbc.c());
        EXPECT(0xbb, gbc.d());
        EXPECT(0x38, gbc.e());
        EXPECT(0x9f, gbc.h());
        EXPECT(0x9d, gbc.l());
        EXPECT(0xd0b6, gbc.sp());
        EXPECT(0xb162, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xb15f));
        EXPECT(0xb5, gbc.readMem(0xb160));
        EXPECT(0xef, gbc.readMem(0xb161));
        // CC 0054
        gbc.setState(0x5df8, 0xb440, 0xde60, 0xb97e, 0x53a4, 0x84a2, 0x1, 0x0);
        gbc.writeMem(0x5df8, { 0xcc, 0xcd, 0x10 });
        gbc.step();
        EXPECT(0xde, gbc.a());
        EXPECT(0xb9, gbc.b());
        EXPECT(0x7e, gbc.c());
        EXPECT(0x53, gbc.d());
        EXPECT(0xa4, gbc.e());
        EXPECT(0x84, gbc.h());
        EXPECT(0xa2, gbc.l());
        EXPECT(0xb440, gbc.sp());
        EXPECT(0x5dfb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 0055
        gbc.setState(0xc36f, 0x8705, 0x2270, 0xa5d2, 0x5f90, 0x7365, 0x1, 0x1);
        gbc.writeMem(0xc36f, { 0xcc, 0xa7, 0xe3 });
        gbc.step();
        EXPECT(0x22, gbc.a());
        EXPECT(0xa5, gbc.b());
        EXPECT(0xd2, gbc.c());
        EXPECT(0x5f, gbc.d());
        EXPECT(0x90, gbc.e());
        EXPECT(0x73, gbc.h());
        EXPECT(0x65, gbc.l());
        EXPECT(0x8705, gbc.sp());
        EXPECT(0xc372, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xc36f));
        EXPECT(0xa7, gbc.readMem(0xc370));
        EXPECT(0xe3, gbc.readMem(0xc371));
        // CC 0056
        gbc.setState(0xa5a8, 0xee49, 0x1fb0, 0x7d7b, 0xa81c, 0xec04, 0x0, 0x1);
        gbc.writeMem(0xa5a8, { 0xcc, 0xc4, 0x22 });
        gbc.writeMem(0xee47, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x1f, gbc.a());
        EXPECT(0x7d, gbc.b());
        EXPECT(0x7b, gbc.c());
        EXPECT(0xa8, gbc.d());
        EXPECT(0x1c, gbc.e());
        EXPECT(0xec, gbc.h());
        EXPECT(0x4, gbc.l());
        EXPECT(0xee47, gbc.sp());
        EXPECT(0x22c4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xa5a8));
        EXPECT(0xc4, gbc.readMem(0xa5a9));
        EXPECT(0x22, gbc.readMem(0xa5aa));
        EXPECT(0xab, gbc.readMem(0xee47));
        EXPECT(0xa5, gbc.readMem(0xee48));
        // CC 0057
        gbc.setState(0xab52, 0xd2c8, 0xea50, 0x1580, 0x660f, 0x2941, 0x0, 0x1);
        gbc.writeMem(0xab52, { 0xcc, 0xda, 0xb1 });
        gbc.step();
        EXPECT(0xea, gbc.a());
        EXPECT(0x15, gbc.b());
        EXPECT(0x80, gbc.c());
        EXPECT(0x66, gbc.d());
        EXPECT(0xf, gbc.e());
        EXPECT(0x29, gbc.h());
        EXPECT(0x41, gbc.l());
        EXPECT(0xd2c8, gbc.sp());
        EXPECT(0xab55, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xab52));
        EXPECT(0xda, gbc.readMem(0xab53));
        EXPECT(0xb1, gbc.readMem(0xab54));
        // CC 0059
        gbc.setState(0x5f5d, 0xedde, 0x64d0, 0xba7c, 0xb574, 0x9c2, 0x1, 0x1);
        gbc.writeMem(0x5f5d, { 0xcc, 0x7c, 0x5d });
        gbc.writeMem(0xeddc, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x64, gbc.a());
        EXPECT(0xba, gbc.b());
        EXPECT(0x7c, gbc.c());
        EXPECT(0xb5, gbc.d());
        EXPECT(0x74, gbc.e());
        EXPECT(0x9, gbc.h());
        EXPECT(0xc2, gbc.l());
        EXPECT(0xeddc, gbc.sp());
        EXPECT(0x5d7c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x60, gbc.readMem(0xeddc));
        EXPECT(0x5f, gbc.readMem(0xeddd));
        // CC 005A
        gbc.setState(0x1d28, 0xea54, 0x2f30, 0x4f64, 0x2d63, 0xc68f, 0x0, 0x0);
        gbc.writeMem(0x1d28, { 0xcc, 0xa, 0xa3 });
        gbc.step();
        EXPECT(0x2f, gbc.a());
        EXPECT(0x4f, gbc.b());
        EXPECT(0x64, gbc.c());
        EXPECT(0x2d, gbc.d());
        EXPECT(0x63, gbc.e());
        EXPECT(0xc6, gbc.h());
        EXPECT(0x8f, gbc.l());
        EXPECT(0xea54, gbc.sp());
        EXPECT(0x1d2b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 005C
        gbc.setState(0x9d36, 0xef17, 0x1120, 0x886a, 0xe30d, 0x5ca9, 0x0, 0x1);
        gbc.writeMem(0x9d36, { 0xcc, 0x61, 0xd6 });
        gbc.step();
        EXPECT(0x11, gbc.a());
        EXPECT(0x88, gbc.b());
        EXPECT(0x6a, gbc.c());
        EXPECT(0xe3, gbc.d());
        EXPECT(0xd, gbc.e());
        EXPECT(0x5c, gbc.h());
        EXPECT(0xa9, gbc.l());
        EXPECT(0xef17, gbc.sp());
        EXPECT(0x9d39, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0x9d36));
        EXPECT(0x61, gbc.readMem(0x9d37));
        EXPECT(0xd6, gbc.readMem(0x9d38));
        // CC 005D
        gbc.setState(0x6b9c, 0x9404, 0xb960, 0x1b0c, 0x51c5, 0x7f8e, 0x0, 0x0);
        gbc.writeMem(0x6b9c, { 0xcc, 0x9c, 0xc7 });
        gbc.step();
        EXPECT(0xb9, gbc.a());
        EXPECT(0x1b, gbc.b());
        EXPECT(0xc, gbc.c());
        EXPECT(0x51, gbc.d());
        EXPECT(0xc5, gbc.e());
        EXPECT(0x7f, gbc.h());
        EXPECT(0x8e, gbc.l());
        EXPECT(0x9404, gbc.sp());
        EXPECT(0x6b9f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 005F
        gbc.setState(0x6bdf, 0xb221, 0xab70, 0xede4, 0x2cbb, 0x47a5, 0x1, 0x0);
        gbc.writeMem(0x6bdf, { 0xcc, 0xe, 0x83 });
        gbc.step();
        EXPECT(0xab, gbc.a());
        EXPECT(0xed, gbc.b());
        EXPECT(0xe4, gbc.c());
        EXPECT(0x2c, gbc.d());
        EXPECT(0xbb, gbc.e());
        EXPECT(0x47, gbc.h());
        EXPECT(0xa5, gbc.l());
        EXPECT(0xb221, gbc.sp());
        EXPECT(0x6be2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 0060
        gbc.setState(0x5a2, 0xf473, 0xa1b0, 0x7d2e, 0xbf6d, 0x894, 0x0, 0x0);
        gbc.writeMem(0x5a2, { 0xcc, 0xb4, 0xef });
        gbc.writeMem(0xf471, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xa1, gbc.a());
        EXPECT(0x7d, gbc.b());
        EXPECT(0x2e, gbc.c());
        EXPECT(0xbf, gbc.d());
        EXPECT(0x6d, gbc.e());
        EXPECT(0x8, gbc.h());
        EXPECT(0x94, gbc.l());
        EXPECT(0xf471, gbc.sp());
        EXPECT(0xefb4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xa5, gbc.readMem(0xf471));
        EXPECT(0x5, gbc.readMem(0xf472));
        // CC 0062
        gbc.setState(0x9fe9, 0xcd16, 0xb5a0, 0x6fb5, 0x28e6, 0xfe32, 0x1, 0x1);
        gbc.writeMem(0x9fe9, { 0xcc, 0x1d, 0x62 });
        gbc.writeMem(0xcd14, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xb5, gbc.a());
        EXPECT(0x6f, gbc.b());
        EXPECT(0xb5, gbc.c());
        EXPECT(0x28, gbc.d());
        EXPECT(0xe6, gbc.e());
        EXPECT(0xfe, gbc.h());
        EXPECT(0x32, gbc.l());
        EXPECT(0xcd14, gbc.sp());
        EXPECT(0x621d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0x9fe9));
        EXPECT(0x1d, gbc.readMem(0x9fea));
        EXPECT(0x62, gbc.readMem(0x9feb));
        EXPECT(0xec, gbc.readMem(0xcd14));
        EXPECT(0x9f, gbc.readMem(0xcd15));
        // CC 0063
        gbc.setState(0x8997, 0x8045, 0x2ec0, 0x7803, 0x46d4, 0xf9f6, 0x1, 0x0);
        gbc.writeMem(0x8043, { 0x0, 0x0 });
        gbc.writeMem(0x8997, { 0xcc, 0xe3, 0x90 });
        gbc.step();
        EXPECT(0x2e, gbc.a());
        EXPECT(0x78, gbc.b());
        EXPECT(0x3, gbc.c());
        EXPECT(0x46, gbc.d());
        EXPECT(0xd4, gbc.e());
        EXPECT(0xf9, gbc.h());
        EXPECT(0xf6, gbc.l());
        EXPECT(0x8043, gbc.sp());
        EXPECT(0x90e3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x9a, gbc.readMem(0x8043));
        EXPECT(0x89, gbc.readMem(0x8044));
        EXPECT(0xcc, gbc.readMem(0x8997));
        EXPECT(0xe3, gbc.readMem(0x8998));
        EXPECT(0x90, gbc.readMem(0x8999));
        // CC 0064
        gbc.setState(0xad5f, 0x6aa4, 0xec40, 0x76cd, 0x829, 0x1705, 0x1, 0x0);
        gbc.writeMem(0xad5f, { 0xcc, 0x5d, 0xf6 });
        gbc.step();
        EXPECT(0xec, gbc.a());
        EXPECT(0x76, gbc.b());
        EXPECT(0xcd, gbc.c());
        EXPECT(0x8, gbc.d());
        EXPECT(0x29, gbc.e());
        EXPECT(0x17, gbc.h());
        EXPECT(0x5, gbc.l());
        EXPECT(0x6aa4, gbc.sp());
        EXPECT(0xad62, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xad5f));
        EXPECT(0x5d, gbc.readMem(0xad60));
        EXPECT(0xf6, gbc.readMem(0xad61));
        // CC 0065
        gbc.setState(0x5f42, 0xc8b2, 0xbc40, 0xc062, 0x2271, 0x653f, 0x1, 0x1);
        gbc.writeMem(0x5f42, { 0xcc, 0x9c, 0xe1 });
        gbc.step();
        EXPECT(0xbc, gbc.a());
        EXPECT(0xc0, gbc.b());
        EXPECT(0x62, gbc.c());
        EXPECT(0x22, gbc.d());
        EXPECT(0x71, gbc.e());
        EXPECT(0x65, gbc.h());
        EXPECT(0x3f, gbc.l());
        EXPECT(0xc8b2, gbc.sp());
        EXPECT(0x5f45, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 0066
        gbc.setState(0xad68, 0x85f1, 0x8200, 0x20d5, 0xe498, 0x6e99, 0x0, 0x1);
        gbc.writeMem(0xad68, { 0xcc, 0x3e, 0x18 });
        gbc.step();
        EXPECT(0x82, gbc.a());
        EXPECT(0x20, gbc.b());
        EXPECT(0xd5, gbc.c());
        EXPECT(0xe4, gbc.d());
        EXPECT(0x98, gbc.e());
        EXPECT(0x6e, gbc.h());
        EXPECT(0x99, gbc.l());
        EXPECT(0x85f1, gbc.sp());
        EXPECT(0xad6b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xad68));
        EXPECT(0x3e, gbc.readMem(0xad69));
        EXPECT(0x18, gbc.readMem(0xad6a));
        // CC 0067
        gbc.setState(0x3ad4, 0xa325, 0x5980, 0xdec0, 0xa88, 0x8a62, 0x1, 0x0);
        gbc.writeMem(0x3ad4, { 0xcc, 0x24, 0x67 });
        gbc.writeMem(0xa323, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x59, gbc.a());
        EXPECT(0xde, gbc.b());
        EXPECT(0xc0, gbc.c());
        EXPECT(0xa, gbc.d());
        EXPECT(0x88, gbc.e());
        EXPECT(0x8a, gbc.h());
        EXPECT(0x62, gbc.l());
        EXPECT(0xa323, gbc.sp());
        EXPECT(0x6724, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xd7, gbc.readMem(0xa323));
        EXPECT(0x3a, gbc.readMem(0xa324));
        // CC 0068
        gbc.setState(0xbf30, 0x38cf, 0x5650, 0xb753, 0x799d, 0x8846, 0x0, 0x1);
        gbc.writeMem(0xbf30, { 0xcc, 0x4f, 0x32 });
        gbc.step();
        EXPECT(0x56, gbc.a());
        EXPECT(0xb7, gbc.b());
        EXPECT(0x53, gbc.c());
        EXPECT(0x79, gbc.d());
        EXPECT(0x9d, gbc.e());
        EXPECT(0x88, gbc.h());
        EXPECT(0x46, gbc.l());
        EXPECT(0x38cf, gbc.sp());
        EXPECT(0xbf33, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xbf30));
        EXPECT(0x4f, gbc.readMem(0xbf31));
        EXPECT(0x32, gbc.readMem(0xbf32));
        // CC 0069
        gbc.setState(0x5e28, 0xc2d7, 0xc330, 0xfde5, 0xe6c0, 0x5dcf, 0x0, 0x1);
        gbc.writeMem(0x5e28, { 0xcc, 0x10, 0x40 });
        gbc.step();
        EXPECT(0xc3, gbc.a());
        EXPECT(0xfd, gbc.b());
        EXPECT(0xe5, gbc.c());
        EXPECT(0xe6, gbc.d());
        EXPECT(0xc0, gbc.e());
        EXPECT(0x5d, gbc.h());
        EXPECT(0xcf, gbc.l());
        EXPECT(0xc2d7, gbc.sp());
        EXPECT(0x5e2b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 006A
        gbc.setState(0x244b, 0xda8c, 0xe170, 0x3c1d, 0x948f, 0x42be, 0x1, 0x1);
        gbc.writeMem(0x244b, { 0xcc, 0x49, 0xa });
        gbc.step();
        EXPECT(0xe1, gbc.a());
        EXPECT(0x3c, gbc.b());
        EXPECT(0x1d, gbc.c());
        EXPECT(0x94, gbc.d());
        EXPECT(0x8f, gbc.e());
        EXPECT(0x42, gbc.h());
        EXPECT(0xbe, gbc.l());
        EXPECT(0xda8c, gbc.sp());
        EXPECT(0x244e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 006B
        gbc.setState(0x685f, 0x3739, 0xa430, 0xf4f3, 0x7c2c, 0xd2f1, 0x1, 0x0);
        gbc.writeMem(0x685f, { 0xcc, 0x83, 0xd1 });
        gbc.step();
        EXPECT(0xa4, gbc.a());
        EXPECT(0xf4, gbc.b());
        EXPECT(0xf3, gbc.c());
        EXPECT(0x7c, gbc.d());
        EXPECT(0x2c, gbc.e());
        EXPECT(0xd2, gbc.h());
        EXPECT(0xf1, gbc.l());
        EXPECT(0x3739, gbc.sp());
        EXPECT(0x6862, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 006D
        gbc.setState(0x5cc5, 0x435e, 0x4900, 0x1640, 0x5f2f, 0xefc6, 0x1, 0x0);
        gbc.writeMem(0x5cc5, { 0xcc, 0x5f, 0x10 });
        gbc.step();
        EXPECT(0x49, gbc.a());
        EXPECT(0x16, gbc.b());
        EXPECT(0x40, gbc.c());
        EXPECT(0x5f, gbc.d());
        EXPECT(0x2f, gbc.e());
        EXPECT(0xef, gbc.h());
        EXPECT(0xc6, gbc.l());
        EXPECT(0x435e, gbc.sp());
        EXPECT(0x5cc8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 006E
        gbc.setState(0xa17f, 0xa7a4, 0x14a0, 0xde2a, 0xaa3f, 0xc3da, 0x1, 0x1);
        gbc.writeMem(0xa17f, { 0xcc, 0xf1, 0xa7 });
        gbc.writeMem(0xa7a2, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x14, gbc.a());
        EXPECT(0xde, gbc.b());
        EXPECT(0x2a, gbc.c());
        EXPECT(0xaa, gbc.d());
        EXPECT(0x3f, gbc.e());
        EXPECT(0xc3, gbc.h());
        EXPECT(0xda, gbc.l());
        EXPECT(0xa7a2, gbc.sp());
        EXPECT(0xa7f1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xa17f));
        EXPECT(0xf1, gbc.readMem(0xa180));
        EXPECT(0xa7, gbc.readMem(0xa181));
        EXPECT(0x82, gbc.readMem(0xa7a2));
        EXPECT(0xa1, gbc.readMem(0xa7a3));
        // CC 0070
        gbc.setState(0x3ee8, 0xecf2, 0xccc0, 0x676f, 0x29a5, 0x8e4b, 0x1, 0x0);
        gbc.writeMem(0x3ee8, { 0xcc, 0xc7, 0x83 });
        gbc.writeMem(0xecf0, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xcc, gbc.a());
        EXPECT(0x67, gbc.b());
        EXPECT(0x6f, gbc.c());
        EXPECT(0x29, gbc.d());
        EXPECT(0xa5, gbc.e());
        EXPECT(0x8e, gbc.h());
        EXPECT(0x4b, gbc.l());
        EXPECT(0xecf0, gbc.sp());
        EXPECT(0x83c7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xeb, gbc.readMem(0xecf0));
        EXPECT(0x3e, gbc.readMem(0xecf1));
        // CC 0071
        gbc.setState(0xcdc7, 0xb2b8, 0x3ff0, 0x1d5f, 0x9fe6, 0x2aba, 0x0, 0x1);
        gbc.writeMem(0xb2b6, { 0x0, 0x0 });
        gbc.writeMem(0xcdc7, { 0xcc, 0x94, 0x9b });
        gbc.step();
        EXPECT(0x3f, gbc.a());
        EXPECT(0x1d, gbc.b());
        EXPECT(0x5f, gbc.c());
        EXPECT(0x9f, gbc.d());
        EXPECT(0xe6, gbc.e());
        EXPECT(0x2a, gbc.h());
        EXPECT(0xba, gbc.l());
        EXPECT(0xb2b6, gbc.sp());
        EXPECT(0x9b94, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xca, gbc.readMem(0xb2b6));
        EXPECT(0xcd, gbc.readMem(0xb2b7));
        EXPECT(0xcc, gbc.readMem(0xcdc7));
        EXPECT(0x94, gbc.readMem(0xcdc8));
        EXPECT(0x9b, gbc.readMem(0xcdc9));
        // CC 0072
        gbc.setState(0x1063, 0x922c, 0xb090, 0xe8ac, 0xb5b7, 0x6a8b, 0x1, 0x0);
        gbc.writeMem(0x1063, { 0xcc, 0x36, 0xaf });
        gbc.writeMem(0x922a, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xb0, gbc.a());
        EXPECT(0xe8, gbc.b());
        EXPECT(0xac, gbc.c());
        EXPECT(0xb5, gbc.d());
        EXPECT(0xb7, gbc.e());
        EXPECT(0x6a, gbc.h());
        EXPECT(0x8b, gbc.l());
        EXPECT(0x922a, gbc.sp());
        EXPECT(0xaf36, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x66, gbc.readMem(0x922a));
        EXPECT(0x10, gbc.readMem(0x922b));
        // CC 0073
        gbc.setState(0x5beb, 0x6399, 0x7820, 0x4e07, 0x465e, 0x312b, 0x0, 0x1);
        gbc.writeMem(0x5beb, { 0xcc, 0x97, 0x28 });
        gbc.step();
        EXPECT(0x78, gbc.a());
        EXPECT(0x4e, gbc.b());
        EXPECT(0x7, gbc.c());
        EXPECT(0x46, gbc.d());
        EXPECT(0x5e, gbc.e());
        EXPECT(0x31, gbc.h());
        EXPECT(0x2b, gbc.l());
        EXPECT(0x6399, gbc.sp());
        EXPECT(0x5bee, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 0074
        gbc.setState(0x9227, 0xf122, 0x11e0, 0x2845, 0xc47c, 0xc55e, 0x0, 0x0);
        gbc.writeMem(0x9227, { 0xcc, 0xb2, 0xfa });
        gbc.writeMem(0xf120, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x11, gbc.a());
        EXPECT(0x28, gbc.b());
        EXPECT(0x45, gbc.c());
        EXPECT(0xc4, gbc.d());
        EXPECT(0x7c, gbc.e());
        EXPECT(0xc5, gbc.h());
        EXPECT(0x5e, gbc.l());
        EXPECT(0xf120, gbc.sp());
        EXPECT(0xfab2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0x9227));
        EXPECT(0xb2, gbc.readMem(0x9228));
        EXPECT(0xfa, gbc.readMem(0x9229));
        EXPECT(0x2a, gbc.readMem(0xf120));
        EXPECT(0x92, gbc.readMem(0xf121));
        // CC 0075
        gbc.setState(0x1107, 0x30e1, 0xc430, 0x158f, 0x3d9a, 0x13c7, 0x0, 0x1);
        gbc.writeMem(0x1107, { 0xcc, 0xc3, 0x7 });
        gbc.step();
        EXPECT(0xc4, gbc.a());
        EXPECT(0x15, gbc.b());
        EXPECT(0x8f, gbc.c());
        EXPECT(0x3d, gbc.d());
        EXPECT(0x9a, gbc.e());
        EXPECT(0x13, gbc.h());
        EXPECT(0xc7, gbc.l());
        EXPECT(0x30e1, gbc.sp());
        EXPECT(0x110a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 0077
        gbc.setState(0x239c, 0xd575, 0xc8c0, 0x7b82, 0xac5a, 0x3cd8, 0x0, 0x1);
        gbc.writeMem(0x239c, { 0xcc, 0xae, 0x2d });
        gbc.writeMem(0xd573, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xc8, gbc.a());
        EXPECT(0x7b, gbc.b());
        EXPECT(0x82, gbc.c());
        EXPECT(0xac, gbc.d());
        EXPECT(0x5a, gbc.e());
        EXPECT(0x3c, gbc.h());
        EXPECT(0xd8, gbc.l());
        EXPECT(0xd573, gbc.sp());
        EXPECT(0x2dae, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x9f, gbc.readMem(0xd573));
        EXPECT(0x23, gbc.readMem(0xd574));
        // CC 0078
        gbc.setState(0x3606, 0xef84, 0x4290, 0x456e, 0x92a5, 0x84c7, 0x1, 0x0);
        gbc.writeMem(0x3606, { 0xcc, 0xeb, 0x3b });
        gbc.writeMem(0xef82, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x42, gbc.a());
        EXPECT(0x45, gbc.b());
        EXPECT(0x6e, gbc.c());
        EXPECT(0x92, gbc.d());
        EXPECT(0xa5, gbc.e());
        EXPECT(0x84, gbc.h());
        EXPECT(0xc7, gbc.l());
        EXPECT(0xef82, gbc.sp());
        EXPECT(0x3beb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x9, gbc.readMem(0xef82));
        EXPECT(0x36, gbc.readMem(0xef83));
        // CC 0079
        gbc.setState(0xb97e, 0x4bb3, 0x1b30, 0x331a, 0xc5f, 0xc03a, 0x1, 0x0);
        gbc.writeMem(0xb97e, { 0xcc, 0x5b, 0x94 });
        gbc.step();
        EXPECT(0x1b, gbc.a());
        EXPECT(0x33, gbc.b());
        EXPECT(0x1a, gbc.c());
        EXPECT(0xc, gbc.d());
        EXPECT(0x5f, gbc.e());
        EXPECT(0xc0, gbc.h());
        EXPECT(0x3a, gbc.l());
        EXPECT(0x4bb3, gbc.sp());
        EXPECT(0xb981, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xb97e));
        EXPECT(0x5b, gbc.readMem(0xb97f));
        EXPECT(0x94, gbc.readMem(0xb980));
        // CC 007A
        gbc.setState(0xc880, 0x1b53, 0xd860, 0xbc7b, 0x3a2a, 0x5285, 0x0, 0x1);
        gbc.writeMem(0xc880, { 0xcc, 0x1f, 0x98 });
        gbc.step();
        EXPECT(0xd8, gbc.a());
        EXPECT(0xbc, gbc.b());
        EXPECT(0x7b, gbc.c());
        EXPECT(0x3a, gbc.d());
        EXPECT(0x2a, gbc.e());
        EXPECT(0x52, gbc.h());
        EXPECT(0x85, gbc.l());
        EXPECT(0x1b53, gbc.sp());
        EXPECT(0xc883, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xc880));
        EXPECT(0x1f, gbc.readMem(0xc881));
        EXPECT(0x98, gbc.readMem(0xc882));
        // CC 007B
        gbc.setState(0xd044, 0x4e0a, 0x9970, 0x3ef4, 0xcb0e, 0x535c, 0x0, 0x0);
        gbc.writeMem(0xd044, { 0xcc, 0x28, 0x33 });
        gbc.step();
        EXPECT(0x99, gbc.a());
        EXPECT(0x3e, gbc.b());
        EXPECT(0xf4, gbc.c());
        EXPECT(0xcb, gbc.d());
        EXPECT(0xe, gbc.e());
        EXPECT(0x53, gbc.h());
        EXPECT(0x5c, gbc.l());
        EXPECT(0x4e0a, gbc.sp());
        EXPECT(0xd047, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xd044));
        EXPECT(0x28, gbc.readMem(0xd045));
        EXPECT(0x33, gbc.readMem(0xd046));
        // CC 007D
        gbc.setState(0xe1ab, 0x72b6, 0x1840, 0x6cf3, 0x6570, 0x457f, 0x1, 0x1);
        gbc.writeMem(0xe1ab, { 0xcc, 0x8b, 0x6a });
        gbc.step();
        EXPECT(0x18, gbc.a());
        EXPECT(0x6c, gbc.b());
        EXPECT(0xf3, gbc.c());
        EXPECT(0x65, gbc.d());
        EXPECT(0x70, gbc.e());
        EXPECT(0x45, gbc.h());
        EXPECT(0x7f, gbc.l());
        EXPECT(0x72b6, gbc.sp());
        EXPECT(0xe1ae, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xe1ab));
        EXPECT(0x8b, gbc.readMem(0xe1ac));
        EXPECT(0x6a, gbc.readMem(0xe1ad));
        // CC 007E
        gbc.setState(0xe5d3, 0x71e1, 0x4640, 0xaec, 0x357b, 0x3a99, 0x1, 0x1);
        gbc.writeMem(0xe5d3, { 0xcc, 0x23, 0x50 });
        gbc.step();
        EXPECT(0x46, gbc.a());
        EXPECT(0xa, gbc.b());
        EXPECT(0xec, gbc.c());
        EXPECT(0x35, gbc.d());
        EXPECT(0x7b, gbc.e());
        EXPECT(0x3a, gbc.h());
        EXPECT(0x99, gbc.l());
        EXPECT(0x71e1, gbc.sp());
        EXPECT(0xe5d6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xe5d3));
        EXPECT(0x23, gbc.readMem(0xe5d4));
        EXPECT(0x50, gbc.readMem(0xe5d5));
        // CC 007F
        gbc.setState(0x6f9, 0x6466, 0xe310, 0x4b15, 0x3e41, 0x2e81, 0x0, 0x0);
        gbc.writeMem(0x6f9, { 0xcc, 0xe8, 0x41 });
        gbc.step();
        EXPECT(0xe3, gbc.a());
        EXPECT(0x4b, gbc.b());
        EXPECT(0x15, gbc.c());
        EXPECT(0x3e, gbc.d());
        EXPECT(0x41, gbc.e());
        EXPECT(0x2e, gbc.h());
        EXPECT(0x81, gbc.l());
        EXPECT(0x6466, gbc.sp());
        EXPECT(0x6fc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 0081
        gbc.setState(0xb5bc, 0xa03b, 0x3ae0, 0x7efe, 0x2f10, 0x5522, 0x1, 0x1);
        gbc.writeMem(0xa039, { 0x0, 0x0 });
        gbc.writeMem(0xb5bc, { 0xcc, 0xa4, 0xf });
        gbc.step();
        EXPECT(0x3a, gbc.a());
        EXPECT(0x7e, gbc.b());
        EXPECT(0xfe, gbc.c());
        EXPECT(0x2f, gbc.d());
        EXPECT(0x10, gbc.e());
        EXPECT(0x55, gbc.h());
        EXPECT(0x22, gbc.l());
        EXPECT(0xa039, gbc.sp());
        EXPECT(0xfa4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xbf, gbc.readMem(0xa039));
        EXPECT(0xb5, gbc.readMem(0xa03a));
        EXPECT(0xcc, gbc.readMem(0xb5bc));
        EXPECT(0xa4, gbc.readMem(0xb5bd));
        EXPECT(0xf, gbc.readMem(0xb5be));
        // CC 0082
        gbc.setState(0xd2df, 0x36e4, 0x7d00, 0x2d2b, 0x7c7, 0x2b60, 0x0, 0x1);
        gbc.writeMem(0xd2df, { 0xcc, 0xeb, 0x5a });
        gbc.step();
        EXPECT(0x7d, gbc.a());
        EXPECT(0x2d, gbc.b());
        EXPECT(0x2b, gbc.c());
        EXPECT(0x7, gbc.d());
        EXPECT(0xc7, gbc.e());
        EXPECT(0x2b, gbc.h());
        EXPECT(0x60, gbc.l());
        EXPECT(0x36e4, gbc.sp());
        EXPECT(0xd2e2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xd2df));
        EXPECT(0xeb, gbc.readMem(0xd2e0));
        EXPECT(0x5a, gbc.readMem(0xd2e1));
        // CC 0083
        gbc.setState(0x915f, 0xc486, 0xf660, 0x9812, 0xb801, 0x3db3, 0x0, 0x1);
        gbc.writeMem(0x915f, { 0xcc, 0x54, 0xb9 });
        gbc.step();
        EXPECT(0xf6, gbc.a());
        EXPECT(0x98, gbc.b());
        EXPECT(0x12, gbc.c());
        EXPECT(0xb8, gbc.d());
        EXPECT(0x1, gbc.e());
        EXPECT(0x3d, gbc.h());
        EXPECT(0xb3, gbc.l());
        EXPECT(0xc486, gbc.sp());
        EXPECT(0x9162, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0x915f));
        EXPECT(0x54, gbc.readMem(0x9160));
        EXPECT(0xb9, gbc.readMem(0x9161));
        // CC 0084
        gbc.setState(0xa306, 0xc20e, 0xcf20, 0xdcff, 0x13f7, 0xe03d, 0x0, 0x1);
        gbc.writeMem(0xa306, { 0xcc, 0x90, 0x65 });
        gbc.step();
        EXPECT(0xcf, gbc.a());
        EXPECT(0xdc, gbc.b());
        EXPECT(0xff, gbc.c());
        EXPECT(0x13, gbc.d());
        EXPECT(0xf7, gbc.e());
        EXPECT(0xe0, gbc.h());
        EXPECT(0x3d, gbc.l());
        EXPECT(0xc20e, gbc.sp());
        EXPECT(0xa309, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xa306));
        EXPECT(0x90, gbc.readMem(0xa307));
        EXPECT(0x65, gbc.readMem(0xa308));
        // CC 0085
        gbc.setState(0x69d4, 0xffba, 0xbdf0, 0xdac4, 0x8913, 0x7a9f, 0x0, 0x0);
        gbc.writeMem(0x69d4, { 0xcc, 0x2f, 0xd9 });
        gbc.writeMem(0xffb8, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xbd, gbc.a());
        EXPECT(0xda, gbc.b());
        EXPECT(0xc4, gbc.c());
        EXPECT(0x89, gbc.d());
        EXPECT(0x13, gbc.e());
        EXPECT(0x7a, gbc.h());
        EXPECT(0x9f, gbc.l());
        EXPECT(0xffb8, gbc.sp());
        EXPECT(0xd92f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xd7, gbc.readMem(0xffb8));
        EXPECT(0x69, gbc.readMem(0xffb9));
        // CC 0086
        gbc.setState(0x6176, 0x93f9, 0xffe0, 0xdc9c, 0x65b0, 0x1bda, 0x1, 0x0);
        gbc.writeMem(0x6176, { 0xcc, 0xb9, 0x13 });
        gbc.writeMem(0x93f7, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xff, gbc.a());
        EXPECT(0xdc, gbc.b());
        EXPECT(0x9c, gbc.c());
        EXPECT(0x65, gbc.d());
        EXPECT(0xb0, gbc.e());
        EXPECT(0x1b, gbc.h());
        EXPECT(0xda, gbc.l());
        EXPECT(0x93f7, gbc.sp());
        EXPECT(0x13b9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x79, gbc.readMem(0x93f7));
        EXPECT(0x61, gbc.readMem(0x93f8));
        // CC 0087
        gbc.setState(0xb29a, 0xd41b, 0x2f00, 0xb19d, 0x2c55, 0x79e6, 0x0, 0x1);
        gbc.writeMem(0xb29a, { 0xcc, 0x56, 0x9f });
        gbc.step();
        EXPECT(0x2f, gbc.a());
        EXPECT(0xb1, gbc.b());
        EXPECT(0x9d, gbc.c());
        EXPECT(0x2c, gbc.d());
        EXPECT(0x55, gbc.e());
        EXPECT(0x79, gbc.h());
        EXPECT(0xe6, gbc.l());
        EXPECT(0xd41b, gbc.sp());
        EXPECT(0xb29d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xb29a));
        EXPECT(0x56, gbc.readMem(0xb29b));
        EXPECT(0x9f, gbc.readMem(0xb29c));
        // CC 0088
        gbc.setState(0x7e0d, 0xfe8c, 0xd330, 0xa423, 0x2049, 0x60b, 0x1, 0x1);
        gbc.writeMem(0x7e0d, { 0xcc, 0xd2, 0xc9 });
        gbc.step();
        EXPECT(0xd3, gbc.a());
        EXPECT(0xa4, gbc.b());
        EXPECT(0x23, gbc.c());
        EXPECT(0x20, gbc.d());
        EXPECT(0x49, gbc.e());
        EXPECT(0x6, gbc.h());
        EXPECT(0xb, gbc.l());
        EXPECT(0xfe8c, gbc.sp());
        EXPECT(0x7e10, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 0089
        gbc.setState(0x8b5a, 0x9586, 0x5e60, 0x2c71, 0xc043, 0x31f0, 0x1, 0x0);
        gbc.writeMem(0x8b5a, { 0xcc, 0xd, 0xd });
        gbc.step();
        EXPECT(0x5e, gbc.a());
        EXPECT(0x2c, gbc.b());
        EXPECT(0x71, gbc.c());
        EXPECT(0xc0, gbc.d());
        EXPECT(0x43, gbc.e());
        EXPECT(0x31, gbc.h());
        EXPECT(0xf0, gbc.l());
        EXPECT(0x9586, gbc.sp());
        EXPECT(0x8b5d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0x8b5a));
        EXPECT(0xd, gbc.readMem(0x8b5b));
        EXPECT(0xd, gbc.readMem(0x8b5c));
        // CC 008A
        gbc.setState(0x4eff, 0xe6d1, 0x4580, 0x462b, 0xd371, 0x2a88, 0x0, 0x1);
        gbc.writeMem(0x4eff, { 0xcc, 0x25, 0xc1 });
        gbc.writeMem(0xe6cf, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x45, gbc.a());
        EXPECT(0x46, gbc.b());
        EXPECT(0x2b, gbc.c());
        EXPECT(0xd3, gbc.d());
        EXPECT(0x71, gbc.e());
        EXPECT(0x2a, gbc.h());
        EXPECT(0x88, gbc.l());
        EXPECT(0xe6cf, gbc.sp());
        EXPECT(0xc125, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x2, gbc.readMem(0xe6cf));
        EXPECT(0x4f, gbc.readMem(0xe6d0));
        // CC 008B
        gbc.setState(0x1041, 0x59c5, 0x9730, 0x1a3, 0x1e05, 0xadb6, 0x0, 0x1);
        gbc.writeMem(0x1041, { 0xcc, 0x21, 0xe6 });
        gbc.step();
        EXPECT(0x97, gbc.a());
        EXPECT(0x1, gbc.b());
        EXPECT(0xa3, gbc.c());
        EXPECT(0x1e, gbc.d());
        EXPECT(0x5, gbc.e());
        EXPECT(0xad, gbc.h());
        EXPECT(0xb6, gbc.l());
        EXPECT(0x59c5, gbc.sp());
        EXPECT(0x1044, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 008D
        gbc.setState(0xca24, 0xff97, 0x74e0, 0xfeb7, 0xf440, 0xbed9, 0x1, 0x0);
        gbc.writeMem(0xca24, { 0xcc, 0x9e, 0xf0 });
        gbc.writeMem(0xff95, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x74, gbc.a());
        EXPECT(0xfe, gbc.b());
        EXPECT(0xb7, gbc.c());
        EXPECT(0xf4, gbc.d());
        EXPECT(0x40, gbc.e());
        EXPECT(0xbe, gbc.h());
        EXPECT(0xd9, gbc.l());
        EXPECT(0xff95, gbc.sp());
        EXPECT(0xf09e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xca24));
        EXPECT(0x9e, gbc.readMem(0xca25));
        EXPECT(0xf0, gbc.readMem(0xca26));
        EXPECT(0x27, gbc.readMem(0xff95));
        EXPECT(0xca, gbc.readMem(0xff96));
        // CC 008E
        gbc.setState(0xc2ab, 0xa543, 0x6830, 0x8c86, 0x9732, 0x89c5, 0x0, 0x0);
        gbc.writeMem(0xc2ab, { 0xcc, 0x39, 0x3b });
        gbc.step();
        EXPECT(0x68, gbc.a());
        EXPECT(0x8c, gbc.b());
        EXPECT(0x86, gbc.c());
        EXPECT(0x97, gbc.d());
        EXPECT(0x32, gbc.e());
        EXPECT(0x89, gbc.h());
        EXPECT(0xc5, gbc.l());
        EXPECT(0xa543, gbc.sp());
        EXPECT(0xc2ae, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xc2ab));
        EXPECT(0x39, gbc.readMem(0xc2ac));
        EXPECT(0x3b, gbc.readMem(0xc2ad));
        // CC 008F
        gbc.setState(0xb022, 0xa319, 0x38e0, 0x4746, 0x16d2, 0xaf79, 0x1, 0x0);
        gbc.writeMem(0xa317, { 0x0, 0x0 });
        gbc.writeMem(0xb022, { 0xcc, 0xe4, 0x6c });
        gbc.step();
        EXPECT(0x38, gbc.a());
        EXPECT(0x47, gbc.b());
        EXPECT(0x46, gbc.c());
        EXPECT(0x16, gbc.d());
        EXPECT(0xd2, gbc.e());
        EXPECT(0xaf, gbc.h());
        EXPECT(0x79, gbc.l());
        EXPECT(0xa317, gbc.sp());
        EXPECT(0x6ce4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x25, gbc.readMem(0xa317));
        EXPECT(0xb0, gbc.readMem(0xa318));
        EXPECT(0xcc, gbc.readMem(0xb022));
        EXPECT(0xe4, gbc.readMem(0xb023));
        EXPECT(0x6c, gbc.readMem(0xb024));
        // CC 0091
        gbc.setState(0x649b, 0x8f8f, 0xdc80, 0xc047, 0x46ee, 0x60e6, 0x1, 0x0);
        gbc.writeMem(0x649b, { 0xcc, 0x4e, 0x45 });
        gbc.writeMem(0x8f8d, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xdc, gbc.a());
        EXPECT(0xc0, gbc.b());
        EXPECT(0x47, gbc.c());
        EXPECT(0x46, gbc.d());
        EXPECT(0xee, gbc.e());
        EXPECT(0x60, gbc.h());
        EXPECT(0xe6, gbc.l());
        EXPECT(0x8f8d, gbc.sp());
        EXPECT(0x454e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x9e, gbc.readMem(0x8f8d));
        EXPECT(0x64, gbc.readMem(0x8f8e));
        // CC 0092
        gbc.setState(0xca86, 0x82c3, 0xcbf0, 0x1ddb, 0x905d, 0xf1f5, 0x0, 0x0);
        gbc.writeMem(0x82c1, { 0x0, 0x0 });
        gbc.writeMem(0xca86, { 0xcc, 0x2f, 0xb7 });
        gbc.step();
        EXPECT(0xcb, gbc.a());
        EXPECT(0x1d, gbc.b());
        EXPECT(0xdb, gbc.c());
        EXPECT(0x90, gbc.d());
        EXPECT(0x5d, gbc.e());
        EXPECT(0xf1, gbc.h());
        EXPECT(0xf5, gbc.l());
        EXPECT(0x82c1, gbc.sp());
        EXPECT(0xb72f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x89, gbc.readMem(0x82c1));
        EXPECT(0xca, gbc.readMem(0x82c2));
        EXPECT(0xcc, gbc.readMem(0xca86));
        EXPECT(0x2f, gbc.readMem(0xca87));
        EXPECT(0xb7, gbc.readMem(0xca88));
        // CC 0093
        gbc.setState(0x1103, 0xb923, 0x8ca0, 0x3912, 0xb730, 0x5297, 0x0, 0x0);
        gbc.writeMem(0x1103, { 0xcc, 0xe4, 0x8b });
        gbc.writeMem(0xb921, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x8c, gbc.a());
        EXPECT(0x39, gbc.b());
        EXPECT(0x12, gbc.c());
        EXPECT(0xb7, gbc.d());
        EXPECT(0x30, gbc.e());
        EXPECT(0x52, gbc.h());
        EXPECT(0x97, gbc.l());
        EXPECT(0xb921, gbc.sp());
        EXPECT(0x8be4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x6, gbc.readMem(0xb921));
        EXPECT(0x11, gbc.readMem(0xb922));
        // CC 0094
        gbc.setState(0xb3a, 0x3072, 0xe320, 0xdca5, 0x4310, 0x8b08, 0x0, 0x0);
        gbc.writeMem(0xb3a, { 0xcc, 0x1c, 0x9f });
        gbc.step();
        EXPECT(0xe3, gbc.a());
        EXPECT(0xdc, gbc.b());
        EXPECT(0xa5, gbc.c());
        EXPECT(0x43, gbc.d());
        EXPECT(0x10, gbc.e());
        EXPECT(0x8b, gbc.h());
        EXPECT(0x8, gbc.l());
        EXPECT(0x3072, gbc.sp());
        EXPECT(0xb3d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 0095
        gbc.setState(0x4dd2, 0x2e91, 0x9230, 0x4acb, 0xb7b8, 0x7926, 0x1, 0x0);
        gbc.writeMem(0x4dd2, { 0xcc, 0x12, 0xd7 });
        gbc.step();
        EXPECT(0x92, gbc.a());
        EXPECT(0x4a, gbc.b());
        EXPECT(0xcb, gbc.c());
        EXPECT(0xb7, gbc.d());
        EXPECT(0xb8, gbc.e());
        EXPECT(0x79, gbc.h());
        EXPECT(0x26, gbc.l());
        EXPECT(0x2e91, gbc.sp());
        EXPECT(0x4dd5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 0096
        gbc.setState(0x577c, 0x7225, 0xe370, 0xc35f, 0xdd2a, 0x454c, 0x1, 0x1);
        gbc.writeMem(0x577c, { 0xcc, 0xef, 0x3c });
        gbc.step();
        EXPECT(0xe3, gbc.a());
        EXPECT(0xc3, gbc.b());
        EXPECT(0x5f, gbc.c());
        EXPECT(0xdd, gbc.d());
        EXPECT(0x2a, gbc.e());
        EXPECT(0x45, gbc.h());
        EXPECT(0x4c, gbc.l());
        EXPECT(0x7225, gbc.sp());
        EXPECT(0x577f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 0098
        gbc.setState(0xb34, 0x84af, 0xa430, 0x362e, 0x353a, 0xc341, 0x1, 0x1);
        gbc.writeMem(0xb34, { 0xcc, 0xb3, 0xe6 });
        gbc.step();
        EXPECT(0xa4, gbc.a());
        EXPECT(0x36, gbc.b());
        EXPECT(0x2e, gbc.c());
        EXPECT(0x35, gbc.d());
        EXPECT(0x3a, gbc.e());
        EXPECT(0xc3, gbc.h());
        EXPECT(0x41, gbc.l());
        EXPECT(0x84af, gbc.sp());
        EXPECT(0xb37, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 009E
        gbc.setState(0x52e2, 0xdfd9, 0xab60, 0x1688, 0x145a, 0x1b73, 0x0, 0x1);
        gbc.writeMem(0x52e2, { 0xcc, 0xa6, 0x59 });
        gbc.step();
        EXPECT(0xab, gbc.a());
        EXPECT(0x16, gbc.b());
        EXPECT(0x88, gbc.c());
        EXPECT(0x14, gbc.d());
        EXPECT(0x5a, gbc.e());
        EXPECT(0x1b, gbc.h());
        EXPECT(0x73, gbc.l());
        EXPECT(0xdfd9, gbc.sp());
        EXPECT(0x52e5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 009F
        gbc.setState(0x2ae4, 0x6424, 0xf000, 0xbc1, 0x2317, 0x429, 0x0, 0x1);
        gbc.writeMem(0x2ae4, { 0xcc, 0x6d, 0xf0 });
        gbc.step();
        EXPECT(0xf0, gbc.a());
        EXPECT(0xb, gbc.b());
        EXPECT(0xc1, gbc.c());
        EXPECT(0x23, gbc.d());
        EXPECT(0x17, gbc.e());
        EXPECT(0x4, gbc.h());
        EXPECT(0x29, gbc.l());
        EXPECT(0x6424, gbc.sp());
        EXPECT(0x2ae7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 00A0
        gbc.setState(0xded4, 0x9114, 0x5d60, 0xa3e5, 0x48aa, 0xd31f, 0x1, 0x0);
        gbc.writeMem(0xded4, { 0xcc, 0xa8, 0xb8 });
        gbc.step();
        EXPECT(0x5d, gbc.a());
        EXPECT(0xa3, gbc.b());
        EXPECT(0xe5, gbc.c());
        EXPECT(0x48, gbc.d());
        EXPECT(0xaa, gbc.e());
        EXPECT(0xd3, gbc.h());
        EXPECT(0x1f, gbc.l());
        EXPECT(0x9114, gbc.sp());
        EXPECT(0xded7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xded4));
        EXPECT(0xa8, gbc.readMem(0xded5));
        EXPECT(0xb8, gbc.readMem(0xded6));
        // CC 00A1
        gbc.setState(0x589, 0xbeb0, 0x8c50, 0xda58, 0xec24, 0xe590, 0x1, 0x0);
        gbc.writeMem(0x589, { 0xcc, 0x42, 0xc9 });
        gbc.step();
        EXPECT(0x8c, gbc.a());
        EXPECT(0xda, gbc.b());
        EXPECT(0x58, gbc.c());
        EXPECT(0xec, gbc.d());
        EXPECT(0x24, gbc.e());
        EXPECT(0xe5, gbc.h());
        EXPECT(0x90, gbc.l());
        EXPECT(0xbeb0, gbc.sp());
        EXPECT(0x58c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 00A5
        gbc.setState(0xbe69, 0xcf89, 0xf2f0, 0x9f38, 0xfa81, 0x3a52, 0x0, 0x0);
        gbc.writeMem(0xbe69, { 0xcc, 0x7c, 0x73 });
        gbc.writeMem(0xcf87, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xf2, gbc.a());
        EXPECT(0x9f, gbc.b());
        EXPECT(0x38, gbc.c());
        EXPECT(0xfa, gbc.d());
        EXPECT(0x81, gbc.e());
        EXPECT(0x3a, gbc.h());
        EXPECT(0x52, gbc.l());
        EXPECT(0xcf87, gbc.sp());
        EXPECT(0x737c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xbe69));
        EXPECT(0x7c, gbc.readMem(0xbe6a));
        EXPECT(0x73, gbc.readMem(0xbe6b));
        EXPECT(0x6c, gbc.readMem(0xcf87));
        EXPECT(0xbe, gbc.readMem(0xcf88));
        // CC 00A6
        gbc.setState(0xdd54, 0xdfdd, 0x2900, 0x1161, 0x24f5, 0xf872, 0x1, 0x0);
        gbc.writeMem(0xdd54, { 0xcc, 0xd9, 0xf0 });
        gbc.step();
        EXPECT(0x29, gbc.a());
        EXPECT(0x11, gbc.b());
        EXPECT(0x61, gbc.c());
        EXPECT(0x24, gbc.d());
        EXPECT(0xf5, gbc.e());
        EXPECT(0xf8, gbc.h());
        EXPECT(0x72, gbc.l());
        EXPECT(0xdfdd, gbc.sp());
        EXPECT(0xdd57, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xdd54));
        EXPECT(0xd9, gbc.readMem(0xdd55));
        EXPECT(0xf0, gbc.readMem(0xdd56));
        // CC 00A7
        gbc.setState(0x57cc, 0xb912, 0xb3a0, 0xe4a9, 0xd12f, 0x5060, 0x0, 0x1);
        gbc.writeMem(0x57cc, { 0xcc, 0xa8, 0xcf });
        gbc.writeMem(0xb910, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xb3, gbc.a());
        EXPECT(0xe4, gbc.b());
        EXPECT(0xa9, gbc.c());
        EXPECT(0xd1, gbc.d());
        EXPECT(0x2f, gbc.e());
        EXPECT(0x50, gbc.h());
        EXPECT(0x60, gbc.l());
        EXPECT(0xb910, gbc.sp());
        EXPECT(0xcfa8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0xb910));
        EXPECT(0x57, gbc.readMem(0xb911));
        // CC 00A8
        gbc.setState(0xa117, 0xff16, 0x98d0, 0x48d1, 0x4ae3, 0xdc49, 0x1, 0x0);
        gbc.writeMem(0xa117, { 0xcc, 0x3e, 0x3c });
        gbc.writeMem(0xff14, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x98, gbc.a());
        EXPECT(0x48, gbc.b());
        EXPECT(0xd1, gbc.c());
        EXPECT(0x4a, gbc.d());
        EXPECT(0xe3, gbc.e());
        EXPECT(0xdc, gbc.h());
        EXPECT(0x49, gbc.l());
        EXPECT(0xff14, gbc.sp());
        EXPECT(0x3c3e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xa117));
        EXPECT(0x3e, gbc.readMem(0xa118));
        EXPECT(0x3c, gbc.readMem(0xa119));
        EXPECT(0x1a, gbc.readMem(0xff14));
        EXPECT(0xa1, gbc.readMem(0xff15));
        // CC 00A9
        gbc.setState(0xa492, 0xb78e, 0x8a50, 0x1bba, 0xd8f0, 0x3e6a, 0x0, 0x0);
        gbc.writeMem(0xa492, { 0xcc, 0x31, 0xc9 });
        gbc.step();
        EXPECT(0x8a, gbc.a());
        EXPECT(0x1b, gbc.b());
        EXPECT(0xba, gbc.c());
        EXPECT(0xd8, gbc.d());
        EXPECT(0xf0, gbc.e());
        EXPECT(0x3e, gbc.h());
        EXPECT(0x6a, gbc.l());
        EXPECT(0xb78e, gbc.sp());
        EXPECT(0xa495, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xa492));
        EXPECT(0x31, gbc.readMem(0xa493));
        EXPECT(0xc9, gbc.readMem(0xa494));
        // CC 00AA
        gbc.setState(0xc98d, 0x76be, 0x6830, 0x5038, 0xbef0, 0xae12, 0x1, 0x0);
        gbc.writeMem(0xc98d, { 0xcc, 0x82, 0x4a });
        gbc.step();
        EXPECT(0x68, gbc.a());
        EXPECT(0x50, gbc.b());
        EXPECT(0x38, gbc.c());
        EXPECT(0xbe, gbc.d());
        EXPECT(0xf0, gbc.e());
        EXPECT(0xae, gbc.h());
        EXPECT(0x12, gbc.l());
        EXPECT(0x76be, gbc.sp());
        EXPECT(0xc990, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xc98d));
        EXPECT(0x82, gbc.readMem(0xc98e));
        EXPECT(0x4a, gbc.readMem(0xc98f));
        // CC 00AB
        gbc.setState(0xb6e5, 0x60cc, 0x2320, 0xc64a, 0xd475, 0x455d, 0x1, 0x1);
        gbc.writeMem(0xb6e5, { 0xcc, 0xd3, 0x76 });
        gbc.step();
        EXPECT(0x23, gbc.a());
        EXPECT(0xc6, gbc.b());
        EXPECT(0x4a, gbc.c());
        EXPECT(0xd4, gbc.d());
        EXPECT(0x75, gbc.e());
        EXPECT(0x45, gbc.h());
        EXPECT(0x5d, gbc.l());
        EXPECT(0x60cc, gbc.sp());
        EXPECT(0xb6e8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xb6e5));
        EXPECT(0xd3, gbc.readMem(0xb6e6));
        EXPECT(0x76, gbc.readMem(0xb6e7));
        // CC 00AC
        gbc.setState(0x1c29, 0x3f6c, 0x40, 0x8a72, 0x1010, 0xa54d, 0x0, 0x0);
        gbc.writeMem(0x1c29, { 0xcc, 0x57, 0xd5 });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x8a, gbc.b());
        EXPECT(0x72, gbc.c());
        EXPECT(0x10, gbc.d());
        EXPECT(0x10, gbc.e());
        EXPECT(0xa5, gbc.h());
        EXPECT(0x4d, gbc.l());
        EXPECT(0x3f6c, gbc.sp());
        EXPECT(0x1c2c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 00AD
        gbc.setState(0x2bbe, 0x4023, 0xb470, 0xa441, 0x40a2, 0x77a4, 0x0, 0x1);
        gbc.writeMem(0x2bbe, { 0xcc, 0xd6, 0x85 });
        gbc.step();
        EXPECT(0xb4, gbc.a());
        EXPECT(0xa4, gbc.b());
        EXPECT(0x41, gbc.c());
        EXPECT(0x40, gbc.d());
        EXPECT(0xa2, gbc.e());
        EXPECT(0x77, gbc.h());
        EXPECT(0xa4, gbc.l());
        EXPECT(0x4023, gbc.sp());
        EXPECT(0x2bc1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 00AE
        gbc.setState(0x2f82, 0x3b63, 0xe600, 0x5525, 0x67f1, 0xd9bd, 0x1, 0x0);
        gbc.writeMem(0x2f82, { 0xcc, 0x24, 0x98 });
        gbc.step();
        EXPECT(0xe6, gbc.a());
        EXPECT(0x55, gbc.b());
        EXPECT(0x25, gbc.c());
        EXPECT(0x67, gbc.d());
        EXPECT(0xf1, gbc.e());
        EXPECT(0xd9, gbc.h());
        EXPECT(0xbd, gbc.l());
        EXPECT(0x3b63, gbc.sp());
        EXPECT(0x2f85, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 00B0
        gbc.setState(0xeee5, 0xd776, 0x9cd0, 0x9d2b, 0xd820, 0x7577, 0x0, 0x1);
        gbc.writeMem(0xd774, { 0x0, 0x0 });
        gbc.writeMem(0xeee5, { 0xcc, 0x2f, 0x4c });
        gbc.step();
        EXPECT(0x9c, gbc.a());
        EXPECT(0x9d, gbc.b());
        EXPECT(0x2b, gbc.c());
        EXPECT(0xd8, gbc.d());
        EXPECT(0x20, gbc.e());
        EXPECT(0x75, gbc.h());
        EXPECT(0x77, gbc.l());
        EXPECT(0xd774, gbc.sp());
        EXPECT(0x4c2f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xe8, gbc.readMem(0xd774));
        EXPECT(0xee, gbc.readMem(0xd775));
        EXPECT(0xcc, gbc.readMem(0xeee5));
        EXPECT(0x2f, gbc.readMem(0xeee6));
        EXPECT(0x4c, gbc.readMem(0xeee7));
        // CC 00B1
        gbc.setState(0x5b20, 0x9046, 0xfd30, 0xbf7b, 0xda7a, 0x2db5, 0x0, 0x0);
        gbc.writeMem(0x5b20, { 0xcc, 0x89, 0xbb });
        gbc.step();
        EXPECT(0xfd, gbc.a());
        EXPECT(0xbf, gbc.b());
        EXPECT(0x7b, gbc.c());
        EXPECT(0xda, gbc.d());
        EXPECT(0x7a, gbc.e());
        EXPECT(0x2d, gbc.h());
        EXPECT(0xb5, gbc.l());
        EXPECT(0x9046, gbc.sp());
        EXPECT(0x5b23, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 00B4
        gbc.setState(0x3351, 0xf4cb, 0x17c0, 0xb666, 0x6a0f, 0x5194, 0x0, 0x0);
        gbc.writeMem(0x3351, { 0xcc, 0x92, 0x36 });
        gbc.writeMem(0xf4c9, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x17, gbc.a());
        EXPECT(0xb6, gbc.b());
        EXPECT(0x66, gbc.c());
        EXPECT(0x6a, gbc.d());
        EXPECT(0xf, gbc.e());
        EXPECT(0x51, gbc.h());
        EXPECT(0x94, gbc.l());
        EXPECT(0xf4c9, gbc.sp());
        EXPECT(0x3692, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x54, gbc.readMem(0xf4c9));
        EXPECT(0x33, gbc.readMem(0xf4ca));
        // CC 00B5
        gbc.setState(0x6849, 0x6d06, 0xc620, 0xfa35, 0xa82d, 0xa304, 0x0, 0x0);
        gbc.writeMem(0x6849, { 0xcc, 0xa3, 0x3a });
        gbc.step();
        EXPECT(0xc6, gbc.a());
        EXPECT(0xfa, gbc.b());
        EXPECT(0x35, gbc.c());
        EXPECT(0xa8, gbc.d());
        EXPECT(0x2d, gbc.e());
        EXPECT(0xa3, gbc.h());
        EXPECT(0x4, gbc.l());
        EXPECT(0x6d06, gbc.sp());
        EXPECT(0x684c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 00B6
        gbc.setState(0xa5c1, 0x217d, 0xc840, 0xc44, 0xf3a8, 0x8b1a, 0x0, 0x0);
        gbc.writeMem(0xa5c1, { 0xcc, 0x79, 0x3d });
        gbc.step();
        EXPECT(0xc8, gbc.a());
        EXPECT(0xc, gbc.b());
        EXPECT(0x44, gbc.c());
        EXPECT(0xf3, gbc.d());
        EXPECT(0xa8, gbc.e());
        EXPECT(0x8b, gbc.h());
        EXPECT(0x1a, gbc.l());
        EXPECT(0x217d, gbc.sp());
        EXPECT(0xa5c4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xa5c1));
        EXPECT(0x79, gbc.readMem(0xa5c2));
        EXPECT(0x3d, gbc.readMem(0xa5c3));
        // CC 00B7
        gbc.setState(0x8d0d, 0xd311, 0x5350, 0xcf38, 0x37ef, 0xc437, 0x0, 0x0);
        gbc.writeMem(0x8d0d, { 0xcc, 0x8b, 0x4d });
        gbc.step();
        EXPECT(0x53, gbc.a());
        EXPECT(0xcf, gbc.b());
        EXPECT(0x38, gbc.c());
        EXPECT(0x37, gbc.d());
        EXPECT(0xef, gbc.e());
        EXPECT(0xc4, gbc.h());
        EXPECT(0x37, gbc.l());
        EXPECT(0xd311, gbc.sp());
        EXPECT(0x8d10, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0x8d0d));
        EXPECT(0x8b, gbc.readMem(0x8d0e));
        EXPECT(0x4d, gbc.readMem(0x8d0f));
        // CC 00B8
        gbc.setState(0x75bb, 0x1d4f, 0x6c30, 0x2c8c, 0xbf80, 0xd62b, 0x1, 0x0);
        gbc.writeMem(0x75bb, { 0xcc, 0x39, 0xb });
        gbc.step();
        EXPECT(0x6c, gbc.a());
        EXPECT(0x2c, gbc.b());
        EXPECT(0x8c, gbc.c());
        EXPECT(0xbf, gbc.d());
        EXPECT(0x80, gbc.e());
        EXPECT(0xd6, gbc.h());
        EXPECT(0x2b, gbc.l());
        EXPECT(0x1d4f, gbc.sp());
        EXPECT(0x75be, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 00BA
        gbc.setState(0x7ea0, 0x7fb, 0xc220, 0xd39e, 0x59, 0x81fa, 0x0, 0x0);
        gbc.writeMem(0x7ea0, { 0xcc, 0x2e, 0x44 });
        gbc.step();
        EXPECT(0xc2, gbc.a());
        EXPECT(0xd3, gbc.b());
        EXPECT(0x9e, gbc.c());
        EXPECT(0x0, gbc.d());
        EXPECT(0x59, gbc.e());
        EXPECT(0x81, gbc.h());
        EXPECT(0xfa, gbc.l());
        EXPECT(0x7fb, gbc.sp());
        EXPECT(0x7ea3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 00BC
        gbc.setState(0x8d20, 0xdaac, 0xa520, 0xd8d1, 0xf833, 0x9051, 0x0, 0x1);
        gbc.writeMem(0x8d20, { 0xcc, 0x63, 0x77 });
        gbc.step();
        EXPECT(0xa5, gbc.a());
        EXPECT(0xd8, gbc.b());
        EXPECT(0xd1, gbc.c());
        EXPECT(0xf8, gbc.d());
        EXPECT(0x33, gbc.e());
        EXPECT(0x90, gbc.h());
        EXPECT(0x51, gbc.l());
        EXPECT(0xdaac, gbc.sp());
        EXPECT(0x8d23, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0x8d20));
        EXPECT(0x63, gbc.readMem(0x8d21));
        EXPECT(0x77, gbc.readMem(0x8d22));
        // CC 00BD
        gbc.setState(0x2794, 0xead1, 0xbaa0, 0x5a9b, 0xb496, 0x878c, 0x1, 0x1);
        gbc.writeMem(0x2794, { 0xcc, 0xf4, 0xc7 });
        gbc.writeMem(0xeacf, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xba, gbc.a());
        EXPECT(0x5a, gbc.b());
        EXPECT(0x9b, gbc.c());
        EXPECT(0xb4, gbc.d());
        EXPECT(0x96, gbc.e());
        EXPECT(0x87, gbc.h());
        EXPECT(0x8c, gbc.l());
        EXPECT(0xeacf, gbc.sp());
        EXPECT(0xc7f4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x97, gbc.readMem(0xeacf));
        EXPECT(0x27, gbc.readMem(0xead0));
        // CC 00BE
        gbc.setState(0x9a9b, 0x9a90, 0x3700, 0x74e4, 0x44f, 0xc258, 0x1, 0x1);
        gbc.writeMem(0x9a9b, { 0xcc, 0x6, 0xb8 });
        gbc.step();
        EXPECT(0x37, gbc.a());
        EXPECT(0x74, gbc.b());
        EXPECT(0xe4, gbc.c());
        EXPECT(0x4, gbc.d());
        EXPECT(0x4f, gbc.e());
        EXPECT(0xc2, gbc.h());
        EXPECT(0x58, gbc.l());
        EXPECT(0x9a90, gbc.sp());
        EXPECT(0x9a9e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0x9a9b));
        EXPECT(0x6, gbc.readMem(0x9a9c));
        EXPECT(0xb8, gbc.readMem(0x9a9d));
        // CC 00BF
        gbc.setState(0x270f, 0xb8c3, 0x36d0, 0x6363, 0x404d, 0x4008, 0x1, 0x0);
        gbc.writeMem(0x270f, { 0xcc, 0x65, 0x91 });
        gbc.writeMem(0xb8c1, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x36, gbc.a());
        EXPECT(0x63, gbc.b());
        EXPECT(0x63, gbc.c());
        EXPECT(0x40, gbc.d());
        EXPECT(0x4d, gbc.e());
        EXPECT(0x40, gbc.h());
        EXPECT(0x8, gbc.l());
        EXPECT(0xb8c1, gbc.sp());
        EXPECT(0x9165, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x12, gbc.readMem(0xb8c1));
        EXPECT(0x27, gbc.readMem(0xb8c2));
        // CC 00C3
        gbc.setState(0xc3da, 0xac54, 0xceb0, 0x1b31, 0x7cd7, 0x255c, 0x1, 0x0);
        gbc.writeMem(0xac52, { 0x0, 0x0 });
        gbc.writeMem(0xc3da, { 0xcc, 0x42, 0x2b });
        gbc.step();
        EXPECT(0xce, gbc.a());
        EXPECT(0x1b, gbc.b());
        EXPECT(0x31, gbc.c());
        EXPECT(0x7c, gbc.d());
        EXPECT(0xd7, gbc.e());
        EXPECT(0x25, gbc.h());
        EXPECT(0x5c, gbc.l());
        EXPECT(0xac52, gbc.sp());
        EXPECT(0x2b42, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdd, gbc.readMem(0xac52));
        EXPECT(0xc3, gbc.readMem(0xac53));
        EXPECT(0xcc, gbc.readMem(0xc3da));
        EXPECT(0x42, gbc.readMem(0xc3db));
        EXPECT(0x2b, gbc.readMem(0xc3dc));
        // CC 00C5
        gbc.setState(0x7017, 0xe6de, 0x8680, 0xdf26, 0xda0f, 0x4ede, 0x1, 0x1);
        gbc.writeMem(0x7017, { 0xcc, 0x92, 0x41 });
        gbc.writeMem(0xe6dc, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x86, gbc.a());
        EXPECT(0xdf, gbc.b());
        EXPECT(0x26, gbc.c());
        EXPECT(0xda, gbc.d());
        EXPECT(0xf, gbc.e());
        EXPECT(0x4e, gbc.h());
        EXPECT(0xde, gbc.l());
        EXPECT(0xe6dc, gbc.sp());
        EXPECT(0x4192, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x1a, gbc.readMem(0xe6dc));
        EXPECT(0x70, gbc.readMem(0xe6dd));
        // CC 00C6
        gbc.setState(0x87a2, 0x17ef, 0x8610, 0x3dbd, 0x6c58, 0x125e, 0x0, 0x1);
        gbc.writeMem(0x87a2, { 0xcc, 0x71, 0x86 });
        gbc.step();
        EXPECT(0x86, gbc.a());
        EXPECT(0x3d, gbc.b());
        EXPECT(0xbd, gbc.c());
        EXPECT(0x6c, gbc.d());
        EXPECT(0x58, gbc.e());
        EXPECT(0x12, gbc.h());
        EXPECT(0x5e, gbc.l());
        EXPECT(0x17ef, gbc.sp());
        EXPECT(0x87a5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0x87a2));
        EXPECT(0x71, gbc.readMem(0x87a3));
        EXPECT(0x86, gbc.readMem(0x87a4));
        // CC 00C7
        gbc.setState(0x7136, 0xafc0, 0x59b0, 0x63e5, 0x8cad, 0x703c, 0x0, 0x1);
        gbc.writeMem(0x7136, { 0xcc, 0xdb, 0xce });
        gbc.writeMem(0xafbe, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x59, gbc.a());
        EXPECT(0x63, gbc.b());
        EXPECT(0xe5, gbc.c());
        EXPECT(0x8c, gbc.d());
        EXPECT(0xad, gbc.e());
        EXPECT(0x70, gbc.h());
        EXPECT(0x3c, gbc.l());
        EXPECT(0xafbe, gbc.sp());
        EXPECT(0xcedb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x39, gbc.readMem(0xafbe));
        EXPECT(0x71, gbc.readMem(0xafbf));
        // CC 00C8
        gbc.setState(0xd52, 0x5a5b, 0x5e30, 0x6b96, 0x792c, 0x95bb, 0x1, 0x1);
        gbc.writeMem(0xd52, { 0xcc, 0xc3, 0x3 });
        gbc.step();
        EXPECT(0x5e, gbc.a());
        EXPECT(0x6b, gbc.b());
        EXPECT(0x96, gbc.c());
        EXPECT(0x79, gbc.d());
        EXPECT(0x2c, gbc.e());
        EXPECT(0x95, gbc.h());
        EXPECT(0xbb, gbc.l());
        EXPECT(0x5a5b, gbc.sp());
        EXPECT(0xd55, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 00C9
        gbc.setState(0xafbc, 0xde74, 0xf60, 0xda3c, 0xe2ff, 0xcf0d, 0x1, 0x1);
        gbc.writeMem(0xafbc, { 0xcc, 0xf8, 0x59 });
        gbc.step();
        EXPECT(0xf, gbc.a());
        EXPECT(0xda, gbc.b());
        EXPECT(0x3c, gbc.c());
        EXPECT(0xe2, gbc.d());
        EXPECT(0xff, gbc.e());
        EXPECT(0xcf, gbc.h());
        EXPECT(0xd, gbc.l());
        EXPECT(0xde74, gbc.sp());
        EXPECT(0xafbf, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xafbc));
        EXPECT(0xf8, gbc.readMem(0xafbd));
        EXPECT(0x59, gbc.readMem(0xafbe));
        // CC 00CA
        gbc.setState(0xc8b9, 0x77b4, 0x8220, 0x390d, 0x6d7b, 0x7d90, 0x0, 0x1);
        gbc.writeMem(0xc8b9, { 0xcc, 0xa1, 0x90 });
        gbc.step();
        EXPECT(0x82, gbc.a());
        EXPECT(0x39, gbc.b());
        EXPECT(0xd, gbc.c());
        EXPECT(0x6d, gbc.d());
        EXPECT(0x7b, gbc.e());
        EXPECT(0x7d, gbc.h());
        EXPECT(0x90, gbc.l());
        EXPECT(0x77b4, gbc.sp());
        EXPECT(0xc8bc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xc8b9));
        EXPECT(0xa1, gbc.readMem(0xc8ba));
        EXPECT(0x90, gbc.readMem(0xc8bb));
        // CC 00CB
        gbc.setState(0xe680, 0x82d3, 0x1a70, 0xd4a9, 0x46d, 0xb327, 0x1, 0x1);
        gbc.writeMem(0xe680, { 0xcc, 0x9e, 0x1b });
        gbc.step();
        EXPECT(0x1a, gbc.a());
        EXPECT(0xd4, gbc.b());
        EXPECT(0xa9, gbc.c());
        EXPECT(0x4, gbc.d());
        EXPECT(0x6d, gbc.e());
        EXPECT(0xb3, gbc.h());
        EXPECT(0x27, gbc.l());
        EXPECT(0x82d3, gbc.sp());
        EXPECT(0xe683, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xe680));
        EXPECT(0x9e, gbc.readMem(0xe681));
        EXPECT(0x1b, gbc.readMem(0xe682));
        // CC 00CD
        gbc.setState(0x7350, 0x9c5f, 0x2170, 0xf9d5, 0x1f79, 0xc429, 0x0, 0x1);
        gbc.writeMem(0x7350, { 0xcc, 0x82, 0x23 });
        gbc.step();
        EXPECT(0x21, gbc.a());
        EXPECT(0xf9, gbc.b());
        EXPECT(0xd5, gbc.c());
        EXPECT(0x1f, gbc.d());
        EXPECT(0x79, gbc.e());
        EXPECT(0xc4, gbc.h());
        EXPECT(0x29, gbc.l());
        EXPECT(0x9c5f, gbc.sp());
        EXPECT(0x7353, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 00CF
        gbc.setState(0x1be2, 0x71cc, 0x1240, 0x9e1, 0x79a6, 0xbabe, 0x1, 0x1);
        gbc.writeMem(0x1be2, { 0xcc, 0x22, 0x3e });
        gbc.step();
        EXPECT(0x12, gbc.a());
        EXPECT(0x9, gbc.b());
        EXPECT(0xe1, gbc.c());
        EXPECT(0x79, gbc.d());
        EXPECT(0xa6, gbc.e());
        EXPECT(0xba, gbc.h());
        EXPECT(0xbe, gbc.l());
        EXPECT(0x71cc, gbc.sp());
        EXPECT(0x1be5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 00D0
        gbc.setState(0xb99d, 0x457e, 0x1740, 0xe907, 0xebdf, 0x3dfe, 0x1, 0x1);
        gbc.writeMem(0xb99d, { 0xcc, 0xe1, 0x38 });
        gbc.step();
        EXPECT(0x17, gbc.a());
        EXPECT(0xe9, gbc.b());
        EXPECT(0x7, gbc.c());
        EXPECT(0xeb, gbc.d());
        EXPECT(0xdf, gbc.e());
        EXPECT(0x3d, gbc.h());
        EXPECT(0xfe, gbc.l());
        EXPECT(0x457e, gbc.sp());
        EXPECT(0xb9a0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xb99d));
        EXPECT(0xe1, gbc.readMem(0xb99e));
        EXPECT(0x38, gbc.readMem(0xb99f));
        // CC 00D1
        gbc.setState(0x6e4, 0x349e, 0xcb10, 0xe167, 0x51f4, 0x9ca7, 0x1, 0x1);
        gbc.writeMem(0x6e4, { 0xcc, 0xe3, 0x2 });
        gbc.step();
        EXPECT(0xcb, gbc.a());
        EXPECT(0xe1, gbc.b());
        EXPECT(0x67, gbc.c());
        EXPECT(0x51, gbc.d());
        EXPECT(0xf4, gbc.e());
        EXPECT(0x9c, gbc.h());
        EXPECT(0xa7, gbc.l());
        EXPECT(0x349e, gbc.sp());
        EXPECT(0x6e7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 00D2
        gbc.setState(0x46c, 0xc045, 0xc6f0, 0x2d6, 0x87de, 0x2607, 0x1, 0x1);
        gbc.writeMem(0x46c, { 0xcc, 0xd4, 0x25 });
        gbc.writeMem(0xc043, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xc6, gbc.a());
        EXPECT(0x2, gbc.b());
        EXPECT(0xd6, gbc.c());
        EXPECT(0x87, gbc.d());
        EXPECT(0xde, gbc.e());
        EXPECT(0x26, gbc.h());
        EXPECT(0x7, gbc.l());
        EXPECT(0xc043, gbc.sp());
        EXPECT(0x25d4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x6f, gbc.readMem(0xc043));
        EXPECT(0x4, gbc.readMem(0xc044));
        // CC 00D4
        gbc.setState(0x92ef, 0xd449, 0x7570, 0xf6a4, 0x85fa, 0xee15, 0x0, 0x1);
        gbc.writeMem(0x92ef, { 0xcc, 0x7f, 0x24 });
        gbc.step();
        EXPECT(0x75, gbc.a());
        EXPECT(0xf6, gbc.b());
        EXPECT(0xa4, gbc.c());
        EXPECT(0x85, gbc.d());
        EXPECT(0xfa, gbc.e());
        EXPECT(0xee, gbc.h());
        EXPECT(0x15, gbc.l());
        EXPECT(0xd449, gbc.sp());
        EXPECT(0x92f2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0x92ef));
        EXPECT(0x7f, gbc.readMem(0x92f0));
        EXPECT(0x24, gbc.readMem(0x92f1));
        // CC 00D5
        gbc.setState(0x61c6, 0x60c4, 0x7c30, 0xc359, 0xe4cb, 0x4e10, 0x0, 0x0);
        gbc.writeMem(0x61c6, { 0xcc, 0x55, 0xbe });
        gbc.step();
        EXPECT(0x7c, gbc.a());
        EXPECT(0xc3, gbc.b());
        EXPECT(0x59, gbc.c());
        EXPECT(0xe4, gbc.d());
        EXPECT(0xcb, gbc.e());
        EXPECT(0x4e, gbc.h());
        EXPECT(0x10, gbc.l());
        EXPECT(0x60c4, gbc.sp());
        EXPECT(0x61c9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 00D6
        gbc.setState(0xdeaf, 0xc6c7, 0x2590, 0x1c6e, 0xc34, 0x2fa4, 0x0, 0x1);
        gbc.writeMem(0xc6c5, { 0x0, 0x0 });
        gbc.writeMem(0xdeaf, { 0xcc, 0x8e, 0x52 });
        gbc.step();
        EXPECT(0x25, gbc.a());
        EXPECT(0x1c, gbc.b());
        EXPECT(0x6e, gbc.c());
        EXPECT(0xc, gbc.d());
        EXPECT(0x34, gbc.e());
        EXPECT(0x2f, gbc.h());
        EXPECT(0xa4, gbc.l());
        EXPECT(0xc6c5, gbc.sp());
        EXPECT(0x528e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xb2, gbc.readMem(0xc6c5));
        EXPECT(0xde, gbc.readMem(0xc6c6));
        EXPECT(0xcc, gbc.readMem(0xdeaf));
        EXPECT(0x8e, gbc.readMem(0xdeb0));
        EXPECT(0x52, gbc.readMem(0xdeb1));
        // CC 00D7
        gbc.setState(0xb28c, 0x8957, 0x86c0, 0xb3f, 0x358f, 0x2152, 0x0, 0x1);
        gbc.writeMem(0x8955, { 0x0, 0x0 });
        gbc.writeMem(0xb28c, { 0xcc, 0xe1, 0xf1 });
        gbc.step();
        EXPECT(0x86, gbc.a());
        EXPECT(0xb, gbc.b());
        EXPECT(0x3f, gbc.c());
        EXPECT(0x35, gbc.d());
        EXPECT(0x8f, gbc.e());
        EXPECT(0x21, gbc.h());
        EXPECT(0x52, gbc.l());
        EXPECT(0x8955, gbc.sp());
        EXPECT(0xf1e1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x8f, gbc.readMem(0x8955));
        EXPECT(0xb2, gbc.readMem(0x8956));
        EXPECT(0xcc, gbc.readMem(0xb28c));
        EXPECT(0xe1, gbc.readMem(0xb28d));
        EXPECT(0xf1, gbc.readMem(0xb28e));
        // CC 00D8
        gbc.setState(0x2e05, 0x85d5, 0x7900, 0x190, 0xdd83, 0xafcd, 0x0, 0x1);
        gbc.writeMem(0x2e05, { 0xcc, 0x33, 0x59 });
        gbc.step();
        EXPECT(0x79, gbc.a());
        EXPECT(0x1, gbc.b());
        EXPECT(0x90, gbc.c());
        EXPECT(0xdd, gbc.d());
        EXPECT(0x83, gbc.e());
        EXPECT(0xaf, gbc.h());
        EXPECT(0xcd, gbc.l());
        EXPECT(0x85d5, gbc.sp());
        EXPECT(0x2e08, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 00D9
        gbc.setState(0xcc9a, 0xe297, 0xd6d0, 0xbf29, 0x5bd, 0x55af, 0x0, 0x0);
        gbc.writeMem(0xcc9a, { 0xcc, 0x4f, 0x5a });
        gbc.writeMem(0xe295, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xd6, gbc.a());
        EXPECT(0xbf, gbc.b());
        EXPECT(0x29, gbc.c());
        EXPECT(0x5, gbc.d());
        EXPECT(0xbd, gbc.e());
        EXPECT(0x55, gbc.h());
        EXPECT(0xaf, gbc.l());
        EXPECT(0xe295, gbc.sp());
        EXPECT(0x5a4f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xcc9a));
        EXPECT(0x4f, gbc.readMem(0xcc9b));
        EXPECT(0x5a, gbc.readMem(0xcc9c));
        EXPECT(0x9d, gbc.readMem(0xe295));
        EXPECT(0xcc, gbc.readMem(0xe296));
        // CC 00DB
        gbc.setState(0xcb78, 0x9646, 0x2d80, 0xdd33, 0x5ff8, 0x1da, 0x0, 0x1);
        gbc.writeMem(0x9644, { 0x0, 0x0 });
        gbc.writeMem(0xcb78, { 0xcc, 0x97, 0x5e });
        gbc.step();
        EXPECT(0x2d, gbc.a());
        EXPECT(0xdd, gbc.b());
        EXPECT(0x33, gbc.c());
        EXPECT(0x5f, gbc.d());
        EXPECT(0xf8, gbc.e());
        EXPECT(0x1, gbc.h());
        EXPECT(0xda, gbc.l());
        EXPECT(0x9644, gbc.sp());
        EXPECT(0x5e97, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x7b, gbc.readMem(0x9644));
        EXPECT(0xcb, gbc.readMem(0x9645));
        EXPECT(0xcc, gbc.readMem(0xcb78));
        EXPECT(0x97, gbc.readMem(0xcb79));
        EXPECT(0x5e, gbc.readMem(0xcb7a));
        // CC 00DC
        gbc.setState(0xcfd5, 0x2a3a, 0x1070, 0x6ab9, 0x7ff2, 0xe69e, 0x0, 0x1);
        gbc.writeMem(0xcfd5, { 0xcc, 0x11, 0x91 });
        gbc.step();
        EXPECT(0x10, gbc.a());
        EXPECT(0x6a, gbc.b());
        EXPECT(0xb9, gbc.c());
        EXPECT(0x7f, gbc.d());
        EXPECT(0xf2, gbc.e());
        EXPECT(0xe6, gbc.h());
        EXPECT(0x9e, gbc.l());
        EXPECT(0x2a3a, gbc.sp());
        EXPECT(0xcfd8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xcfd5));
        EXPECT(0x11, gbc.readMem(0xcfd6));
        EXPECT(0x91, gbc.readMem(0xcfd7));
        // CC 00DD
        gbc.setState(0x67b0, 0x930a, 0x59d0, 0xc10, 0x8b9e, 0xfb40, 0x1, 0x0);
        gbc.writeMem(0x67b0, { 0xcc, 0x68, 0x5c });
        gbc.writeMem(0x9308, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x59, gbc.a());
        EXPECT(0xc, gbc.b());
        EXPECT(0x10, gbc.c());
        EXPECT(0x8b, gbc.d());
        EXPECT(0x9e, gbc.e());
        EXPECT(0xfb, gbc.h());
        EXPECT(0x40, gbc.l());
        EXPECT(0x9308, gbc.sp());
        EXPECT(0x5c68, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xb3, gbc.readMem(0x9308));
        EXPECT(0x67, gbc.readMem(0x9309));
        // CC 00DE
        gbc.setState(0xa59f, 0x4512, 0x370, 0xaab8, 0xbfbe, 0xb424, 0x0, 0x0);
        gbc.writeMem(0xa59f, { 0xcc, 0x4c, 0x6e });
        gbc.step();
        EXPECT(0x3, gbc.a());
        EXPECT(0xaa, gbc.b());
        EXPECT(0xb8, gbc.c());
        EXPECT(0xbf, gbc.d());
        EXPECT(0xbe, gbc.e());
        EXPECT(0xb4, gbc.h());
        EXPECT(0x24, gbc.l());
        EXPECT(0x4512, gbc.sp());
        EXPECT(0xa5a2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xa59f));
        EXPECT(0x4c, gbc.readMem(0xa5a0));
        EXPECT(0x6e, gbc.readMem(0xa5a1));
        // CC 00DF
        gbc.setState(0x4edd, 0xa504, 0x6190, 0xb4f7, 0x32c4, 0xcba, 0x1, 0x1);
        gbc.writeMem(0x4edd, { 0xcc, 0x73, 0x3c });
        gbc.writeMem(0xa502, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x61, gbc.a());
        EXPECT(0xb4, gbc.b());
        EXPECT(0xf7, gbc.c());
        EXPECT(0x32, gbc.d());
        EXPECT(0xc4, gbc.e());
        EXPECT(0xc, gbc.h());
        EXPECT(0xba, gbc.l());
        EXPECT(0xa502, gbc.sp());
        EXPECT(0x3c73, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xe0, gbc.readMem(0xa502));
        EXPECT(0x4e, gbc.readMem(0xa503));
        // CC 00E0
        gbc.setState(0x73d4, 0x82dd, 0x3f50, 0xdf22, 0x571f, 0xc7a4, 0x0, 0x1);
        gbc.writeMem(0x73d4, { 0xcc, 0x66, 0x4a });
        gbc.step();
        EXPECT(0x3f, gbc.a());
        EXPECT(0xdf, gbc.b());
        EXPECT(0x22, gbc.c());
        EXPECT(0x57, gbc.d());
        EXPECT(0x1f, gbc.e());
        EXPECT(0xc7, gbc.h());
        EXPECT(0xa4, gbc.l());
        EXPECT(0x82dd, gbc.sp());
        EXPECT(0x73d7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 00E2
        gbc.setState(0xacad, 0x9aa1, 0xc5f0, 0x732d, 0x5f2e, 0xcd01, 0x1, 0x0);
        gbc.writeMem(0x9a9f, { 0x0, 0x0 });
        gbc.writeMem(0xacad, { 0xcc, 0x7a, 0x1c });
        gbc.step();
        EXPECT(0xc5, gbc.a());
        EXPECT(0x73, gbc.b());
        EXPECT(0x2d, gbc.c());
        EXPECT(0x5f, gbc.d());
        EXPECT(0x2e, gbc.e());
        EXPECT(0xcd, gbc.h());
        EXPECT(0x1, gbc.l());
        EXPECT(0x9a9f, gbc.sp());
        EXPECT(0x1c7a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xb0, gbc.readMem(0x9a9f));
        EXPECT(0xac, gbc.readMem(0x9aa0));
        EXPECT(0xcc, gbc.readMem(0xacad));
        EXPECT(0x7a, gbc.readMem(0xacae));
        EXPECT(0x1c, gbc.readMem(0xacaf));
        // CC 00E6
        gbc.setState(0xef5a, 0xf39c, 0xd680, 0x2c0a, 0xb1de, 0x82d4, 0x0, 0x0);
        gbc.writeMem(0xef5a, { 0xcc, 0x58, 0x6a });
        gbc.writeMem(0xf39a, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xd6, gbc.a());
        EXPECT(0x2c, gbc.b());
        EXPECT(0xa, gbc.c());
        EXPECT(0xb1, gbc.d());
        EXPECT(0xde, gbc.e());
        EXPECT(0x82, gbc.h());
        EXPECT(0xd4, gbc.l());
        EXPECT(0xf39a, gbc.sp());
        EXPECT(0x6a58, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xef5a));
        EXPECT(0x58, gbc.readMem(0xef5b));
        EXPECT(0x6a, gbc.readMem(0xef5c));
        EXPECT(0x5d, gbc.readMem(0xf39a));
        EXPECT(0xef, gbc.readMem(0xf39b));
        // CC 00E7
        gbc.setState(0x7175, 0x48c3, 0x8f20, 0xdf63, 0x442c, 0x855e, 0x0, 0x1);
        gbc.writeMem(0x7175, { 0xcc, 0x40, 0xef });
        gbc.step();
        EXPECT(0x8f, gbc.a());
        EXPECT(0xdf, gbc.b());
        EXPECT(0x63, gbc.c());
        EXPECT(0x44, gbc.d());
        EXPECT(0x2c, gbc.e());
        EXPECT(0x85, gbc.h());
        EXPECT(0x5e, gbc.l());
        EXPECT(0x48c3, gbc.sp());
        EXPECT(0x7178, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 00E9
        gbc.setState(0x282, 0xa515, 0xf2c0, 0xecbd, 0xd958, 0xf28c, 0x1, 0x0);
        gbc.writeMem(0x282, { 0xcc, 0x4a, 0x13 });
        gbc.writeMem(0xa513, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xf2, gbc.a());
        EXPECT(0xec, gbc.b());
        EXPECT(0xbd, gbc.c());
        EXPECT(0xd9, gbc.d());
        EXPECT(0x58, gbc.e());
        EXPECT(0xf2, gbc.h());
        EXPECT(0x8c, gbc.l());
        EXPECT(0xa513, gbc.sp());
        EXPECT(0x134a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x85, gbc.readMem(0xa513));
        EXPECT(0x2, gbc.readMem(0xa514));
        // CC 00EA
        gbc.setState(0x7dcf, 0x2365, 0xd670, 0x2356, 0xb5e4, 0xc154, 0x0, 0x0);
        gbc.writeMem(0x7dcf, { 0xcc, 0x20, 0xf7 });
        gbc.step();
        EXPECT(0xd6, gbc.a());
        EXPECT(0x23, gbc.b());
        EXPECT(0x56, gbc.c());
        EXPECT(0xb5, gbc.d());
        EXPECT(0xe4, gbc.e());
        EXPECT(0xc1, gbc.h());
        EXPECT(0x54, gbc.l());
        EXPECT(0x2365, gbc.sp());
        EXPECT(0x7dd2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 00EB
        gbc.setState(0x44e8, 0xbacf, 0x9220, 0x641e, 0x4891, 0x2833, 0x1, 0x1);
        gbc.writeMem(0x44e8, { 0xcc, 0x64, 0x31 });
        gbc.step();
        EXPECT(0x92, gbc.a());
        EXPECT(0x64, gbc.b());
        EXPECT(0x1e, gbc.c());
        EXPECT(0x48, gbc.d());
        EXPECT(0x91, gbc.e());
        EXPECT(0x28, gbc.h());
        EXPECT(0x33, gbc.l());
        EXPECT(0xbacf, gbc.sp());
        EXPECT(0x44eb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 00ED
        gbc.setState(0xc803, 0x5049, 0x3540, 0x1037, 0x1025, 0xc91, 0x0, 0x1);
        gbc.writeMem(0xc803, { 0xcc, 0x56, 0x40 });
        gbc.step();
        EXPECT(0x35, gbc.a());
        EXPECT(0x10, gbc.b());
        EXPECT(0x37, gbc.c());
        EXPECT(0x10, gbc.d());
        EXPECT(0x25, gbc.e());
        EXPECT(0xc, gbc.h());
        EXPECT(0x91, gbc.l());
        EXPECT(0x5049, gbc.sp());
        EXPECT(0xc806, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xc803));
        EXPECT(0x56, gbc.readMem(0xc804));
        EXPECT(0x40, gbc.readMem(0xc805));
        // CC 00EE
        gbc.setState(0x9b22, 0x5013, 0x7f50, 0xd357, 0x2f41, 0x938b, 0x0, 0x0);
        gbc.writeMem(0x9b22, { 0xcc, 0x92, 0xf3 });
        gbc.step();
        EXPECT(0x7f, gbc.a());
        EXPECT(0xd3, gbc.b());
        EXPECT(0x57, gbc.c());
        EXPECT(0x2f, gbc.d());
        EXPECT(0x41, gbc.e());
        EXPECT(0x93, gbc.h());
        EXPECT(0x8b, gbc.l());
        EXPECT(0x5013, gbc.sp());
        EXPECT(0x9b25, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0x9b22));
        EXPECT(0x92, gbc.readMem(0x9b23));
        EXPECT(0xf3, gbc.readMem(0x9b24));
        // CC 00F0
        gbc.setState(0x8745, 0xed96, 0xc230, 0x1bac, 0x8b4b, 0x35b0, 0x1, 0x0);
        gbc.writeMem(0x8745, { 0xcc, 0xe1, 0x72 });
        gbc.step();
        EXPECT(0xc2, gbc.a());
        EXPECT(0x1b, gbc.b());
        EXPECT(0xac, gbc.c());
        EXPECT(0x8b, gbc.d());
        EXPECT(0x4b, gbc.e());
        EXPECT(0x35, gbc.h());
        EXPECT(0xb0, gbc.l());
        EXPECT(0xed96, gbc.sp());
        EXPECT(0x8748, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0x8745));
        EXPECT(0xe1, gbc.readMem(0x8746));
        EXPECT(0x72, gbc.readMem(0x8747));
        // CC 00F1
        gbc.setState(0x5523, 0x56e7, 0x1a60, 0x5062, 0x4f7a, 0x5769, 0x1, 0x0);
        gbc.writeMem(0x5523, { 0xcc, 0x6a, 0xc6 });
        gbc.step();
        EXPECT(0x1a, gbc.a());
        EXPECT(0x50, gbc.b());
        EXPECT(0x62, gbc.c());
        EXPECT(0x4f, gbc.d());
        EXPECT(0x7a, gbc.e());
        EXPECT(0x57, gbc.h());
        EXPECT(0x69, gbc.l());
        EXPECT(0x56e7, gbc.sp());
        EXPECT(0x5526, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 00F2
        gbc.setState(0xcc, 0x692, 0xe530, 0xf27d, 0x5989, 0x9fec, 0x0, 0x1);
        gbc.writeMem(0xcc, { 0xcc, 0x22, 0x2 });
        gbc.step();
        EXPECT(0xe5, gbc.a());
        EXPECT(0xf2, gbc.b());
        EXPECT(0x7d, gbc.c());
        EXPECT(0x59, gbc.d());
        EXPECT(0x89, gbc.e());
        EXPECT(0x9f, gbc.h());
        EXPECT(0xec, gbc.l());
        EXPECT(0x692, gbc.sp());
        EXPECT(0xcf, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 00F3
        gbc.setState(0x519b, 0x8d92, 0x8380, 0xb0fd, 0xd01c, 0x7b06, 0x0, 0x0);
        gbc.writeMem(0x519b, { 0xcc, 0x56, 0x16 });
        gbc.writeMem(0x8d90, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x83, gbc.a());
        EXPECT(0xb0, gbc.b());
        EXPECT(0xfd, gbc.c());
        EXPECT(0xd0, gbc.d());
        EXPECT(0x1c, gbc.e());
        EXPECT(0x7b, gbc.h());
        EXPECT(0x6, gbc.l());
        EXPECT(0x8d90, gbc.sp());
        EXPECT(0x1656, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x9e, gbc.readMem(0x8d90));
        EXPECT(0x51, gbc.readMem(0x8d91));
        // CC 00F4
        gbc.setState(0xaef5, 0x440, 0x3330, 0x639, 0xa78, 0x8f34, 0x1, 0x1);
        gbc.writeMem(0xaef5, { 0xcc, 0x82, 0x42 });
        gbc.step();
        EXPECT(0x33, gbc.a());
        EXPECT(0x6, gbc.b());
        EXPECT(0x39, gbc.c());
        EXPECT(0xa, gbc.d());
        EXPECT(0x78, gbc.e());
        EXPECT(0x8f, gbc.h());
        EXPECT(0x34, gbc.l());
        EXPECT(0x440, gbc.sp());
        EXPECT(0xaef8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xaef5));
        EXPECT(0x82, gbc.readMem(0xaef6));
        EXPECT(0x42, gbc.readMem(0xaef7));
        // CC 00F6
        gbc.setState(0x747e, 0xba0c, 0xd1b0, 0x6135, 0xd4d0, 0xb103, 0x1, 0x0);
        gbc.writeMem(0x747e, { 0xcc, 0x14, 0x38 });
        gbc.writeMem(0xba0a, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xd1, gbc.a());
        EXPECT(0x61, gbc.b());
        EXPECT(0x35, gbc.c());
        EXPECT(0xd4, gbc.d());
        EXPECT(0xd0, gbc.e());
        EXPECT(0xb1, gbc.h());
        EXPECT(0x3, gbc.l());
        EXPECT(0xba0a, gbc.sp());
        EXPECT(0x3814, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x81, gbc.readMem(0xba0a));
        EXPECT(0x74, gbc.readMem(0xba0b));
        // CC 00F7
        gbc.setState(0xe0c6, 0xc7c1, 0x9170, 0x884c, 0x33e4, 0xf513, 0x1, 0x0);
        gbc.writeMem(0xe0c6, { 0xcc, 0xa4, 0xe4 });
        gbc.step();
        EXPECT(0x91, gbc.a());
        EXPECT(0x88, gbc.b());
        EXPECT(0x4c, gbc.c());
        EXPECT(0x33, gbc.d());
        EXPECT(0xe4, gbc.e());
        EXPECT(0xf5, gbc.h());
        EXPECT(0x13, gbc.l());
        EXPECT(0xc7c1, gbc.sp());
        EXPECT(0xe0c9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xe0c6));
        EXPECT(0xa4, gbc.readMem(0xe0c7));
        EXPECT(0xe4, gbc.readMem(0xe0c8));
        // CC 00F8
        gbc.setState(0x983c, 0xe2f5, 0x3d20, 0xf827, 0xae6, 0x3351, 0x1, 0x1);
        gbc.writeMem(0x983c, { 0xcc, 0x46, 0xd8 });
        gbc.step();
        EXPECT(0x3d, gbc.a());
        EXPECT(0xf8, gbc.b());
        EXPECT(0x27, gbc.c());
        EXPECT(0xa, gbc.d());
        EXPECT(0xe6, gbc.e());
        EXPECT(0x33, gbc.h());
        EXPECT(0x51, gbc.l());
        EXPECT(0xe2f5, gbc.sp());
        EXPECT(0x983f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0x983c));
        EXPECT(0x46, gbc.readMem(0x983d));
        EXPECT(0xd8, gbc.readMem(0x983e));
        // CC 00FA
        gbc.setState(0x712f, 0xb2fb, 0x82d0, 0x963e, 0x584d, 0x2d30, 0x0, 0x0);
        gbc.writeMem(0x712f, { 0xcc, 0x2c, 0x20 });
        gbc.writeMem(0xb2f9, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x82, gbc.a());
        EXPECT(0x96, gbc.b());
        EXPECT(0x3e, gbc.c());
        EXPECT(0x58, gbc.d());
        EXPECT(0x4d, gbc.e());
        EXPECT(0x2d, gbc.h());
        EXPECT(0x30, gbc.l());
        EXPECT(0xb2f9, gbc.sp());
        EXPECT(0x202c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x32, gbc.readMem(0xb2f9));
        EXPECT(0x71, gbc.readMem(0xb2fa));
        // CC 00FB
        gbc.setState(0x1684, 0xa265, 0xd280, 0xb655, 0xf426, 0x1ea2, 0x1, 0x0);
        gbc.writeMem(0x1684, { 0xcc, 0xcc, 0x79 });
        gbc.writeMem(0xa263, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xd2, gbc.a());
        EXPECT(0xb6, gbc.b());
        EXPECT(0x55, gbc.c());
        EXPECT(0xf4, gbc.d());
        EXPECT(0x26, gbc.e());
        EXPECT(0x1e, gbc.h());
        EXPECT(0xa2, gbc.l());
        EXPECT(0xa263, gbc.sp());
        EXPECT(0x79cc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x87, gbc.readMem(0xa263));
        EXPECT(0x16, gbc.readMem(0xa264));
        // CC 00FC
        gbc.setState(0x3999, 0x17b1, 0x5100, 0x45e8, 0x935d, 0x1d7e, 0x0, 0x1);
        gbc.writeMem(0x3999, { 0xcc, 0xd4, 0x62 });
        gbc.step();
        EXPECT(0x51, gbc.a());
        EXPECT(0x45, gbc.b());
        EXPECT(0xe8, gbc.c());
        EXPECT(0x93, gbc.d());
        EXPECT(0x5d, gbc.e());
        EXPECT(0x1d, gbc.h());
        EXPECT(0x7e, gbc.l());
        EXPECT(0x17b1, gbc.sp());
        EXPECT(0x399c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 00FD
        gbc.setState(0xbefe, 0xa98f, 0xb3b0, 0xf251, 0xc89e, 0x6106, 0x0, 0x0);
        gbc.writeMem(0xa98d, { 0x0, 0x0 });
        gbc.writeMem(0xbefe, { 0xcc, 0x5d, 0xbb });
        gbc.step();
        EXPECT(0xb3, gbc.a());
        EXPECT(0xf2, gbc.b());
        EXPECT(0x51, gbc.c());
        EXPECT(0xc8, gbc.d());
        EXPECT(0x9e, gbc.e());
        EXPECT(0x61, gbc.h());
        EXPECT(0x6, gbc.l());
        EXPECT(0xa98d, gbc.sp());
        EXPECT(0xbb5d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x1, gbc.readMem(0xa98d));
        EXPECT(0xbf, gbc.readMem(0xa98e));
        EXPECT(0xcc, gbc.readMem(0xbefe));
        EXPECT(0x5d, gbc.readMem(0xbeff));
        EXPECT(0xbb, gbc.readMem(0xbf00));
        // CC 00FE
        gbc.setState(0x4a78, 0x5822, 0xb660, 0xda4c, 0x3c93, 0x3510, 0x1, 0x1);
        gbc.writeMem(0x4a78, { 0xcc, 0xd0, 0xda });
        gbc.step();
        EXPECT(0xb6, gbc.a());
        EXPECT(0xda, gbc.b());
        EXPECT(0x4c, gbc.c());
        EXPECT(0x3c, gbc.d());
        EXPECT(0x93, gbc.e());
        EXPECT(0x35, gbc.h());
        EXPECT(0x10, gbc.l());
        EXPECT(0x5822, gbc.sp());
        EXPECT(0x4a7b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 00FF
        gbc.setState(0x813a, 0xfab2, 0x90a0, 0x74c1, 0xfe9e, 0x57d6, 0x1, 0x1);
        gbc.writeMem(0x813a, { 0xcc, 0x3, 0xc4 });
        gbc.writeMem(0xfab0, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x90, gbc.a());
        EXPECT(0x74, gbc.b());
        EXPECT(0xc1, gbc.c());
        EXPECT(0xfe, gbc.d());
        EXPECT(0x9e, gbc.e());
        EXPECT(0x57, gbc.h());
        EXPECT(0xd6, gbc.l());
        EXPECT(0xfab0, gbc.sp());
        EXPECT(0xc403, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0x813a));
        EXPECT(0x3, gbc.readMem(0x813b));
        EXPECT(0xc4, gbc.readMem(0x813c));
        EXPECT(0x3d, gbc.readMem(0xfab0));
        EXPECT(0x81, gbc.readMem(0xfab1));
        // CC 0100
        gbc.setState(0x29ba, 0x8fb4, 0x6cd0, 0x5b7, 0x7148, 0xae69, 0x1, 0x1);
        gbc.writeMem(0x29ba, { 0xcc, 0x59, 0xdc });
        gbc.writeMem(0x8fb2, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x6c, gbc.a());
        EXPECT(0x5, gbc.b());
        EXPECT(0xb7, gbc.c());
        EXPECT(0x71, gbc.d());
        EXPECT(0x48, gbc.e());
        EXPECT(0xae, gbc.h());
        EXPECT(0x69, gbc.l());
        EXPECT(0x8fb2, gbc.sp());
        EXPECT(0xdc59, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xbd, gbc.readMem(0x8fb2));
        EXPECT(0x29, gbc.readMem(0x8fb3));
        // CC 0103
        gbc.setState(0x7be, 0xd09a, 0x14a0, 0x225a, 0x9080, 0x7ef3, 0x0, 0x0);
        gbc.writeMem(0x7be, { 0xcc, 0x85, 0xf3 });
        gbc.writeMem(0xd098, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x14, gbc.a());
        EXPECT(0x22, gbc.b());
        EXPECT(0x5a, gbc.c());
        EXPECT(0x90, gbc.d());
        EXPECT(0x80, gbc.e());
        EXPECT(0x7e, gbc.h());
        EXPECT(0xf3, gbc.l());
        EXPECT(0xd098, gbc.sp());
        EXPECT(0xf385, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xc1, gbc.readMem(0xd098));
        EXPECT(0x7, gbc.readMem(0xd099));
        // CC 0104
        gbc.setState(0xd21d, 0xd83f, 0x5b70, 0x48a8, 0xd1f5, 0x565d, 0x0, 0x0);
        gbc.writeMem(0xd21d, { 0xcc, 0x31, 0xfe });
        gbc.step();
        EXPECT(0x5b, gbc.a());
        EXPECT(0x48, gbc.b());
        EXPECT(0xa8, gbc.c());
        EXPECT(0xd1, gbc.d());
        EXPECT(0xf5, gbc.e());
        EXPECT(0x56, gbc.h());
        EXPECT(0x5d, gbc.l());
        EXPECT(0xd83f, gbc.sp());
        EXPECT(0xd220, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xd21d));
        EXPECT(0x31, gbc.readMem(0xd21e));
        EXPECT(0xfe, gbc.readMem(0xd21f));
        // CC 0105
        gbc.setState(0x1f49, 0xfda3, 0xd420, 0x431f, 0xd72d, 0xbef9, 0x1, 0x0);
        gbc.writeMem(0x1f49, { 0xcc, 0x9c, 0x87 });
        gbc.step();
        EXPECT(0xd4, gbc.a());
        EXPECT(0x43, gbc.b());
        EXPECT(0x1f, gbc.c());
        EXPECT(0xd7, gbc.d());
        EXPECT(0x2d, gbc.e());
        EXPECT(0xbe, gbc.h());
        EXPECT(0xf9, gbc.l());
        EXPECT(0xfda3, gbc.sp());
        EXPECT(0x1f4c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 0107
        gbc.setState(0x4303, 0x13bd, 0x5340, 0x8c6f, 0x5fb3, 0x4a2e, 0x1, 0x1);
        gbc.writeMem(0x4303, { 0xcc, 0x61, 0xae });
        gbc.step();
        EXPECT(0x53, gbc.a());
        EXPECT(0x8c, gbc.b());
        EXPECT(0x6f, gbc.c());
        EXPECT(0x5f, gbc.d());
        EXPECT(0xb3, gbc.e());
        EXPECT(0x4a, gbc.h());
        EXPECT(0x2e, gbc.l());
        EXPECT(0x13bd, gbc.sp());
        EXPECT(0x4306, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 0109
        gbc.setState(0xaeff, 0x1b1c, 0x630, 0xb73b, 0xc248, 0x2e46, 0x0, 0x0);
        gbc.writeMem(0xaeff, { 0xcc, 0x22, 0x41 });
        gbc.step();
        EXPECT(0x6, gbc.a());
        EXPECT(0xb7, gbc.b());
        EXPECT(0x3b, gbc.c());
        EXPECT(0xc2, gbc.d());
        EXPECT(0x48, gbc.e());
        EXPECT(0x2e, gbc.h());
        EXPECT(0x46, gbc.l());
        EXPECT(0x1b1c, gbc.sp());
        EXPECT(0xaf02, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xaeff));
        EXPECT(0x22, gbc.readMem(0xaf00));
        EXPECT(0x41, gbc.readMem(0xaf01));
        // CC 010C
        gbc.setState(0x4ecc, 0x33b6, 0x8b30, 0x62fb, 0x719d, 0xf5c8, 0x0, 0x0);
        gbc.writeMem(0x4ecc, { 0xcc, 0x26, 0xf5 });
        gbc.step();
        EXPECT(0x8b, gbc.a());
        EXPECT(0x62, gbc.b());
        EXPECT(0xfb, gbc.c());
        EXPECT(0x71, gbc.d());
        EXPECT(0x9d, gbc.e());
        EXPECT(0xf5, gbc.h());
        EXPECT(0xc8, gbc.l());
        EXPECT(0x33b6, gbc.sp());
        EXPECT(0x4ecf, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 010D
        gbc.setState(0x1a59, 0xf3fe, 0x1f20, 0x6f5c, 0x1624, 0xb82a, 0x0, 0x1);
        gbc.writeMem(0x1a59, { 0xcc, 0x47, 0x3b });
        gbc.step();
        EXPECT(0x1f, gbc.a());
        EXPECT(0x6f, gbc.b());
        EXPECT(0x5c, gbc.c());
        EXPECT(0x16, gbc.d());
        EXPECT(0x24, gbc.e());
        EXPECT(0xb8, gbc.h());
        EXPECT(0x2a, gbc.l());
        EXPECT(0xf3fe, gbc.sp());
        EXPECT(0x1a5c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 010F
        gbc.setState(0xee7b, 0xd38b, 0x1bf0, 0x5655, 0xc28b, 0xc58f, 0x1, 0x1);
        gbc.writeMem(0xd389, { 0x0, 0x0 });
        gbc.writeMem(0xee7b, { 0xcc, 0x7e, 0x8d });
        gbc.step();
        EXPECT(0x1b, gbc.a());
        EXPECT(0x56, gbc.b());
        EXPECT(0x55, gbc.c());
        EXPECT(0xc2, gbc.d());
        EXPECT(0x8b, gbc.e());
        EXPECT(0xc5, gbc.h());
        EXPECT(0x8f, gbc.l());
        EXPECT(0xd389, gbc.sp());
        EXPECT(0x8d7e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x7e, gbc.readMem(0xd389));
        EXPECT(0xee, gbc.readMem(0xd38a));
        EXPECT(0xcc, gbc.readMem(0xee7b));
        EXPECT(0x7e, gbc.readMem(0xee7c));
        EXPECT(0x8d, gbc.readMem(0xee7d));
        // CC 0110
        gbc.setState(0x9d3e, 0x7265, 0x8b50, 0xc666, 0x2c47, 0x247c, 0x1, 0x1);
        gbc.writeMem(0x9d3e, { 0xcc, 0xb1, 0xe1 });
        gbc.step();
        EXPECT(0x8b, gbc.a());
        EXPECT(0xc6, gbc.b());
        EXPECT(0x66, gbc.c());
        EXPECT(0x2c, gbc.d());
        EXPECT(0x47, gbc.e());
        EXPECT(0x24, gbc.h());
        EXPECT(0x7c, gbc.l());
        EXPECT(0x7265, gbc.sp());
        EXPECT(0x9d41, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0x9d3e));
        EXPECT(0xb1, gbc.readMem(0x9d3f));
        EXPECT(0xe1, gbc.readMem(0x9d40));
        // CC 0111
        gbc.setState(0x3761, 0x14c5, 0xdc00, 0x98ee, 0x7cc2, 0x6609, 0x1, 0x1);
        gbc.writeMem(0x3761, { 0xcc, 0xbb, 0x3f });
        gbc.step();
        EXPECT(0xdc, gbc.a());
        EXPECT(0x98, gbc.b());
        EXPECT(0xee, gbc.c());
        EXPECT(0x7c, gbc.d());
        EXPECT(0xc2, gbc.e());
        EXPECT(0x66, gbc.h());
        EXPECT(0x9, gbc.l());
        EXPECT(0x14c5, gbc.sp());
        EXPECT(0x3764, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 0114
        gbc.setState(0x2107, 0xb0a5, 0xeaa0, 0xae89, 0x8de5, 0x8ae, 0x1, 0x1);
        gbc.writeMem(0x2107, { 0xcc, 0xfd, 0x4d });
        gbc.writeMem(0xb0a3, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xea, gbc.a());
        EXPECT(0xae, gbc.b());
        EXPECT(0x89, gbc.c());
        EXPECT(0x8d, gbc.d());
        EXPECT(0xe5, gbc.e());
        EXPECT(0x8, gbc.h());
        EXPECT(0xae, gbc.l());
        EXPECT(0xb0a3, gbc.sp());
        EXPECT(0x4dfd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xa, gbc.readMem(0xb0a3));
        EXPECT(0x21, gbc.readMem(0xb0a4));
        // CC 0116
        gbc.setState(0x6a19, 0x93f9, 0xd7f0, 0x9bd6, 0x5f5, 0x4d45, 0x0, 0x0);
        gbc.writeMem(0x6a19, { 0xcc, 0xd4, 0x24 });
        gbc.writeMem(0x93f7, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xd7, gbc.a());
        EXPECT(0x9b, gbc.b());
        EXPECT(0xd6, gbc.c());
        EXPECT(0x5, gbc.d());
        EXPECT(0xf5, gbc.e());
        EXPECT(0x4d, gbc.h());
        EXPECT(0x45, gbc.l());
        EXPECT(0x93f7, gbc.sp());
        EXPECT(0x24d4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x1c, gbc.readMem(0x93f7));
        EXPECT(0x6a, gbc.readMem(0x93f8));
        // CC 0117
        gbc.setState(0x9970, 0x8e92, 0xb810, 0x29f5, 0x84dc, 0x1e09, 0x0, 0x1);
        gbc.writeMem(0x9970, { 0xcc, 0x11, 0xe0 });
        gbc.step();
        EXPECT(0xb8, gbc.a());
        EXPECT(0x29, gbc.b());
        EXPECT(0xf5, gbc.c());
        EXPECT(0x84, gbc.d());
        EXPECT(0xdc, gbc.e());
        EXPECT(0x1e, gbc.h());
        EXPECT(0x9, gbc.l());
        EXPECT(0x8e92, gbc.sp());
        EXPECT(0x9973, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0x9970));
        EXPECT(0x11, gbc.readMem(0x9971));
        EXPECT(0xe0, gbc.readMem(0x9972));
        // CC 0118
        gbc.setState(0x89b7, 0xb183, 0xd4e0, 0x9aff, 0x6c4a, 0xab25, 0x1, 0x1);
        gbc.writeMem(0x89b7, { 0xcc, 0x60, 0x5a });
        gbc.writeMem(0xb181, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xd4, gbc.a());
        EXPECT(0x9a, gbc.b());
        EXPECT(0xff, gbc.c());
        EXPECT(0x6c, gbc.d());
        EXPECT(0x4a, gbc.e());
        EXPECT(0xab, gbc.h());
        EXPECT(0x25, gbc.l());
        EXPECT(0xb181, gbc.sp());
        EXPECT(0x5a60, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0x89b7));
        EXPECT(0x60, gbc.readMem(0x89b8));
        EXPECT(0x5a, gbc.readMem(0x89b9));
        EXPECT(0xba, gbc.readMem(0xb181));
        EXPECT(0x89, gbc.readMem(0xb182));
        // CC 011A
        gbc.setState(0x8184, 0x776a, 0x5140, 0xdb33, 0xe4e8, 0x2203, 0x1, 0x0);
        gbc.writeMem(0x8184, { 0xcc, 0x59, 0x90 });
        gbc.step();
        EXPECT(0x51, gbc.a());
        EXPECT(0xdb, gbc.b());
        EXPECT(0x33, gbc.c());
        EXPECT(0xe4, gbc.d());
        EXPECT(0xe8, gbc.e());
        EXPECT(0x22, gbc.h());
        EXPECT(0x3, gbc.l());
        EXPECT(0x776a, gbc.sp());
        EXPECT(0x8187, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0x8184));
        EXPECT(0x59, gbc.readMem(0x8185));
        EXPECT(0x90, gbc.readMem(0x8186));
        // CC 011B
        gbc.setState(0x94df, 0xfd8e, 0x1070, 0xf5e8, 0x483, 0x881, 0x0, 0x0);
        gbc.writeMem(0x94df, { 0xcc, 0x39, 0xd0 });
        gbc.step();
        EXPECT(0x10, gbc.a());
        EXPECT(0xf5, gbc.b());
        EXPECT(0xe8, gbc.c());
        EXPECT(0x4, gbc.d());
        EXPECT(0x83, gbc.e());
        EXPECT(0x8, gbc.h());
        EXPECT(0x81, gbc.l());
        EXPECT(0xfd8e, gbc.sp());
        EXPECT(0x94e2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0x94df));
        EXPECT(0x39, gbc.readMem(0x94e0));
        EXPECT(0xd0, gbc.readMem(0x94e1));
        // CC 011E
        gbc.setState(0x59d2, 0xb4be, 0xfe20, 0xfe6c, 0xae1e, 0x7a5b, 0x0, 0x1);
        gbc.writeMem(0x59d2, { 0xcc, 0xc5, 0x1e });
        gbc.step();
        EXPECT(0xfe, gbc.a());
        EXPECT(0xfe, gbc.b());
        EXPECT(0x6c, gbc.c());
        EXPECT(0xae, gbc.d());
        EXPECT(0x1e, gbc.e());
        EXPECT(0x7a, gbc.h());
        EXPECT(0x5b, gbc.l());
        EXPECT(0xb4be, gbc.sp());
        EXPECT(0x59d5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 011F
        gbc.setState(0xcc8, 0x9b06, 0x39a0, 0x9704, 0x54f1, 0xb4da, 0x0, 0x0);
        gbc.writeMem(0xcc8, { 0xcc, 0x1d, 0x8e });
        gbc.writeMem(0x9b04, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x39, gbc.a());
        EXPECT(0x97, gbc.b());
        EXPECT(0x4, gbc.c());
        EXPECT(0x54, gbc.d());
        EXPECT(0xf1, gbc.e());
        EXPECT(0xb4, gbc.h());
        EXPECT(0xda, gbc.l());
        EXPECT(0x9b04, gbc.sp());
        EXPECT(0x8e1d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0x9b04));
        EXPECT(0xc, gbc.readMem(0x9b05));
        // CC 0121
        gbc.setState(0x6a84, 0x55d7, 0xdc60, 0xa6fe, 0x80ea, 0x9bc2, 0x1, 0x0);
        gbc.writeMem(0x6a84, { 0xcc, 0xca, 0x76 });
        gbc.step();
        EXPECT(0xdc, gbc.a());
        EXPECT(0xa6, gbc.b());
        EXPECT(0xfe, gbc.c());
        EXPECT(0x80, gbc.d());
        EXPECT(0xea, gbc.e());
        EXPECT(0x9b, gbc.h());
        EXPECT(0xc2, gbc.l());
        EXPECT(0x55d7, gbc.sp());
        EXPECT(0x6a87, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 0122
        gbc.setState(0x9428, 0x663c, 0xe830, 0x7122, 0x73c5, 0x407d, 0x0, 0x0);
        gbc.writeMem(0x9428, { 0xcc, 0xeb, 0xb4 });
        gbc.step();
        EXPECT(0xe8, gbc.a());
        EXPECT(0x71, gbc.b());
        EXPECT(0x22, gbc.c());
        EXPECT(0x73, gbc.d());
        EXPECT(0xc5, gbc.e());
        EXPECT(0x40, gbc.h());
        EXPECT(0x7d, gbc.l());
        EXPECT(0x663c, gbc.sp());
        EXPECT(0x942b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0x9428));
        EXPECT(0xeb, gbc.readMem(0x9429));
        EXPECT(0xb4, gbc.readMem(0x942a));
        // CC 0124
        gbc.setState(0x9841, 0x3b8, 0x1010, 0xad5, 0xed18, 0x688f, 0x1, 0x1);
        gbc.writeMem(0x9841, { 0xcc, 0x1f, 0xaa });
        gbc.step();
        EXPECT(0x10, gbc.a());
        EXPECT(0xa, gbc.b());
        EXPECT(0xd5, gbc.c());
        EXPECT(0xed, gbc.d());
        EXPECT(0x18, gbc.e());
        EXPECT(0x68, gbc.h());
        EXPECT(0x8f, gbc.l());
        EXPECT(0x3b8, gbc.sp());
        EXPECT(0x9844, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0x9841));
        EXPECT(0x1f, gbc.readMem(0x9842));
        EXPECT(0xaa, gbc.readMem(0x9843));
        // CC 0126
        gbc.setState(0x994b, 0xd540, 0x36e0, 0xbd11, 0x3204, 0x92c5, 0x1, 0x0);
        gbc.writeMem(0x994b, { 0xcc, 0x80, 0x4e });
        gbc.writeMem(0xd53e, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x36, gbc.a());
        EXPECT(0xbd, gbc.b());
        EXPECT(0x11, gbc.c());
        EXPECT(0x32, gbc.d());
        EXPECT(0x4, gbc.e());
        EXPECT(0x92, gbc.h());
        EXPECT(0xc5, gbc.l());
        EXPECT(0xd53e, gbc.sp());
        EXPECT(0x4e80, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0x994b));
        EXPECT(0x80, gbc.readMem(0x994c));
        EXPECT(0x4e, gbc.readMem(0x994d));
        EXPECT(0x4e, gbc.readMem(0xd53e));
        EXPECT(0x99, gbc.readMem(0xd53f));
        // CC 0127
        gbc.setState(0x61d9, 0x6437, 0x9140, 0x6eec, 0x1c6c, 0xdf8a, 0x0, 0x0);
        gbc.writeMem(0x61d9, { 0xcc, 0x4e, 0xa3 });
        gbc.step();
        EXPECT(0x91, gbc.a());
        EXPECT(0x6e, gbc.b());
        EXPECT(0xec, gbc.c());
        EXPECT(0x1c, gbc.d());
        EXPECT(0x6c, gbc.e());
        EXPECT(0xdf, gbc.h());
        EXPECT(0x8a, gbc.l());
        EXPECT(0x6437, gbc.sp());
        EXPECT(0x61dc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 012B
        gbc.setState(0x849b, 0xfa0, 0x8e50, 0xc08c, 0xb1d4, 0x408e, 0x0, 0x0);
        gbc.writeMem(0x849b, { 0xcc, 0x22, 0x99 });
        gbc.step();
        EXPECT(0x8e, gbc.a());
        EXPECT(0xc0, gbc.b());
        EXPECT(0x8c, gbc.c());
        EXPECT(0xb1, gbc.d());
        EXPECT(0xd4, gbc.e());
        EXPECT(0x40, gbc.h());
        EXPECT(0x8e, gbc.l());
        EXPECT(0xfa0, gbc.sp());
        EXPECT(0x849e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0x849b));
        EXPECT(0x22, gbc.readMem(0x849c));
        EXPECT(0x99, gbc.readMem(0x849d));
        // CC 012D
        gbc.setState(0xcc32, 0xae1d, 0x1d60, 0xa7cd, 0x986d, 0x4064, 0x0, 0x0);
        gbc.writeMem(0xcc32, { 0xcc, 0x83, 0xa0 });
        gbc.step();
        EXPECT(0x1d, gbc.a());
        EXPECT(0xa7, gbc.b());
        EXPECT(0xcd, gbc.c());
        EXPECT(0x98, gbc.d());
        EXPECT(0x6d, gbc.e());
        EXPECT(0x40, gbc.h());
        EXPECT(0x64, gbc.l());
        EXPECT(0xae1d, gbc.sp());
        EXPECT(0xcc35, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xcc32));
        EXPECT(0x83, gbc.readMem(0xcc33));
        EXPECT(0xa0, gbc.readMem(0xcc34));
        // CC 012F
        gbc.setState(0x300e, 0x832, 0xf200, 0x5c13, 0x9ffd, 0xec9b, 0x0, 0x0);
        gbc.writeMem(0x300e, { 0xcc, 0x2f, 0xa5 });
        gbc.step();
        EXPECT(0xf2, gbc.a());
        EXPECT(0x5c, gbc.b());
        EXPECT(0x13, gbc.c());
        EXPECT(0x9f, gbc.d());
        EXPECT(0xfd, gbc.e());
        EXPECT(0xec, gbc.h());
        EXPECT(0x9b, gbc.l());
        EXPECT(0x832, gbc.sp());
        EXPECT(0x3011, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 0130
        gbc.setState(0xa731, 0x47b1, 0x0, 0x5b5c, 0x326d, 0x3e8c, 0x1, 0x0);
        gbc.writeMem(0xa731, { 0xcc, 0xed, 0x2d });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x5b, gbc.b());
        EXPECT(0x5c, gbc.c());
        EXPECT(0x32, gbc.d());
        EXPECT(0x6d, gbc.e());
        EXPECT(0x3e, gbc.h());
        EXPECT(0x8c, gbc.l());
        EXPECT(0x47b1, gbc.sp());
        EXPECT(0xa734, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xa731));
        EXPECT(0xed, gbc.readMem(0xa732));
        EXPECT(0x2d, gbc.readMem(0xa733));
        // CC 0132
        gbc.setState(0x2200, 0x7677, 0x3a40, 0xdd6c, 0xbc61, 0xe08f, 0x1, 0x1);
        gbc.writeMem(0x2200, { 0xcc, 0xbe, 0x24 });
        gbc.step();
        EXPECT(0x3a, gbc.a());
        EXPECT(0xdd, gbc.b());
        EXPECT(0x6c, gbc.c());
        EXPECT(0xbc, gbc.d());
        EXPECT(0x61, gbc.e());
        EXPECT(0xe0, gbc.h());
        EXPECT(0x8f, gbc.l());
        EXPECT(0x7677, gbc.sp());
        EXPECT(0x2203, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 0133
        gbc.setState(0x4122, 0xbeb5, 0x22d0, 0x992c, 0x9ba8, 0xf210, 0x1, 0x0);
        gbc.writeMem(0x4122, { 0xcc, 0x30, 0x74 });
        gbc.writeMem(0xbeb3, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x22, gbc.a());
        EXPECT(0x99, gbc.b());
        EXPECT(0x2c, gbc.c());
        EXPECT(0x9b, gbc.d());
        EXPECT(0xa8, gbc.e());
        EXPECT(0xf2, gbc.h());
        EXPECT(0x10, gbc.l());
        EXPECT(0xbeb3, gbc.sp());
        EXPECT(0x7430, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x25, gbc.readMem(0xbeb3));
        EXPECT(0x41, gbc.readMem(0xbeb4));
        // CC 0134
        gbc.setState(0x6b4, 0x53de, 0x7400, 0x63b9, 0xdb45, 0x186, 0x1, 0x1);
        gbc.writeMem(0x6b4, { 0xcc, 0x16, 0xb1 });
        gbc.step();
        EXPECT(0x74, gbc.a());
        EXPECT(0x63, gbc.b());
        EXPECT(0xb9, gbc.c());
        EXPECT(0xdb, gbc.d());
        EXPECT(0x45, gbc.e());
        EXPECT(0x1, gbc.h());
        EXPECT(0x86, gbc.l());
        EXPECT(0x53de, gbc.sp());
        EXPECT(0x6b7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 0136
        gbc.setState(0x29c8, 0xbe13, 0xf2e0, 0x4322, 0x873b, 0x291c, 0x0, 0x0);
        gbc.writeMem(0x29c8, { 0xcc, 0xc4, 0x54 });
        gbc.writeMem(0xbe11, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xf2, gbc.a());
        EXPECT(0x43, gbc.b());
        EXPECT(0x22, gbc.c());
        EXPECT(0x87, gbc.d());
        EXPECT(0x3b, gbc.e());
        EXPECT(0x29, gbc.h());
        EXPECT(0x1c, gbc.l());
        EXPECT(0xbe11, gbc.sp());
        EXPECT(0x54c4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xbe11));
        EXPECT(0x29, gbc.readMem(0xbe12));
        // CC 0137
        gbc.setState(0x7b3d, 0xcc59, 0x2e50, 0x5bb4, 0xc037, 0xc47a, 0x1, 0x1);
        gbc.writeMem(0x7b3d, { 0xcc, 0x2d, 0xaa });
        gbc.step();
        EXPECT(0x2e, gbc.a());
        EXPECT(0x5b, gbc.b());
        EXPECT(0xb4, gbc.c());
        EXPECT(0xc0, gbc.d());
        EXPECT(0x37, gbc.e());
        EXPECT(0xc4, gbc.h());
        EXPECT(0x7a, gbc.l());
        EXPECT(0xcc59, gbc.sp());
        EXPECT(0x7b40, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 0138
        gbc.setState(0x57b, 0x9a2f, 0x8190, 0x87c4, 0xce45, 0xbcbd, 0x0, 0x1);
        gbc.writeMem(0x57b, { 0xcc, 0x2a, 0xc5 });
        gbc.writeMem(0x9a2d, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x81, gbc.a());
        EXPECT(0x87, gbc.b());
        EXPECT(0xc4, gbc.c());
        EXPECT(0xce, gbc.d());
        EXPECT(0x45, gbc.e());
        EXPECT(0xbc, gbc.h());
        EXPECT(0xbd, gbc.l());
        EXPECT(0x9a2d, gbc.sp());
        EXPECT(0xc52a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x7e, gbc.readMem(0x9a2d));
        EXPECT(0x5, gbc.readMem(0x9a2e));
        // CC 0139
        gbc.setState(0xb255, 0xc413, 0x5450, 0x5aec, 0xb907, 0xf3f7, 0x1, 0x1);
        gbc.writeMem(0xb255, { 0xcc, 0x43, 0x71 });
        gbc.step();
        EXPECT(0x54, gbc.a());
        EXPECT(0x5a, gbc.b());
        EXPECT(0xec, gbc.c());
        EXPECT(0xb9, gbc.d());
        EXPECT(0x7, gbc.e());
        EXPECT(0xf3, gbc.h());
        EXPECT(0xf7, gbc.l());
        EXPECT(0xc413, gbc.sp());
        EXPECT(0xb258, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xb255));
        EXPECT(0x43, gbc.readMem(0xb256));
        EXPECT(0x71, gbc.readMem(0xb257));
        // CC 013B
        gbc.setState(0x73a2, 0x921a, 0x9ca0, 0x2ad0, 0xac35, 0x8e55, 0x0, 0x1);
        gbc.writeMem(0x73a2, { 0xcc, 0xde, 0x80 });
        gbc.writeMem(0x9218, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x9c, gbc.a());
        EXPECT(0x2a, gbc.b());
        EXPECT(0xd0, gbc.c());
        EXPECT(0xac, gbc.d());
        EXPECT(0x35, gbc.e());
        EXPECT(0x8e, gbc.h());
        EXPECT(0x55, gbc.l());
        EXPECT(0x9218, gbc.sp());
        EXPECT(0x80de, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xa5, gbc.readMem(0x9218));
        EXPECT(0x73, gbc.readMem(0x9219));
        // CC 013D
        gbc.setState(0xaa0e, 0x36c8, 0x9350, 0x5315, 0x5fcd, 0x9519, 0x0, 0x0);
        gbc.writeMem(0xaa0e, { 0xcc, 0xce, 0x5 });
        gbc.step();
        EXPECT(0x93, gbc.a());
        EXPECT(0x53, gbc.b());
        EXPECT(0x15, gbc.c());
        EXPECT(0x5f, gbc.d());
        EXPECT(0xcd, gbc.e());
        EXPECT(0x95, gbc.h());
        EXPECT(0x19, gbc.l());
        EXPECT(0x36c8, gbc.sp());
        EXPECT(0xaa11, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xaa0e));
        EXPECT(0xce, gbc.readMem(0xaa0f));
        EXPECT(0x5, gbc.readMem(0xaa10));
        // CC 013E
        gbc.setState(0x18bc, 0xb257, 0x5ba0, 0xeae, 0xf484, 0xf907, 0x0, 0x1);
        gbc.writeMem(0x18bc, { 0xcc, 0xe3, 0x40 });
        gbc.writeMem(0xb255, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x5b, gbc.a());
        EXPECT(0xe, gbc.b());
        EXPECT(0xae, gbc.c());
        EXPECT(0xf4, gbc.d());
        EXPECT(0x84, gbc.e());
        EXPECT(0xf9, gbc.h());
        EXPECT(0x7, gbc.l());
        EXPECT(0xb255, gbc.sp());
        EXPECT(0x40e3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xbf, gbc.readMem(0xb255));
        EXPECT(0x18, gbc.readMem(0xb256));
        // CC 0140
        gbc.setState(0xa604, 0x476d, 0xde70, 0x3025, 0x679a, 0x8b02, 0x0, 0x0);
        gbc.writeMem(0xa604, { 0xcc, 0x15, 0x2c });
        gbc.step();
        EXPECT(0xde, gbc.a());
        EXPECT(0x30, gbc.b());
        EXPECT(0x25, gbc.c());
        EXPECT(0x67, gbc.d());
        EXPECT(0x9a, gbc.e());
        EXPECT(0x8b, gbc.h());
        EXPECT(0x2, gbc.l());
        EXPECT(0x476d, gbc.sp());
        EXPECT(0xa607, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xa604));
        EXPECT(0x15, gbc.readMem(0xa605));
        EXPECT(0x2c, gbc.readMem(0xa606));
        // CC 0141
        gbc.setState(0x59ab, 0x8d8c, 0xd200, 0xebfa, 0xde5a, 0x979e, 0x0, 0x0);
        gbc.writeMem(0x59ab, { 0xcc, 0x7d, 0xee });
        gbc.step();
        EXPECT(0xd2, gbc.a());
        EXPECT(0xeb, gbc.b());
        EXPECT(0xfa, gbc.c());
        EXPECT(0xde, gbc.d());
        EXPECT(0x5a, gbc.e());
        EXPECT(0x97, gbc.h());
        EXPECT(0x9e, gbc.l());
        EXPECT(0x8d8c, gbc.sp());
        EXPECT(0x59ae, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 0142
        gbc.setState(0x814c, 0x6024, 0x7750, 0x74e9, 0xedba, 0x5133, 0x0, 0x1);
        gbc.writeMem(0x814c, { 0xcc, 0x9d, 0xd0 });
        gbc.step();
        EXPECT(0x77, gbc.a());
        EXPECT(0x74, gbc.b());
        EXPECT(0xe9, gbc.c());
        EXPECT(0xed, gbc.d());
        EXPECT(0xba, gbc.e());
        EXPECT(0x51, gbc.h());
        EXPECT(0x33, gbc.l());
        EXPECT(0x6024, gbc.sp());
        EXPECT(0x814f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0x814c));
        EXPECT(0x9d, gbc.readMem(0x814d));
        EXPECT(0xd0, gbc.readMem(0x814e));
        // CC 0143
        gbc.setState(0xe563, 0xaed1, 0xdd70, 0xad5f, 0x8098, 0xa2bf, 0x1, 0x1);
        gbc.writeMem(0xe563, { 0xcc, 0x1, 0x5d });
        gbc.step();
        EXPECT(0xdd, gbc.a());
        EXPECT(0xad, gbc.b());
        EXPECT(0x5f, gbc.c());
        EXPECT(0x80, gbc.d());
        EXPECT(0x98, gbc.e());
        EXPECT(0xa2, gbc.h());
        EXPECT(0xbf, gbc.l());
        EXPECT(0xaed1, gbc.sp());
        EXPECT(0xe566, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xe563));
        EXPECT(0x1, gbc.readMem(0xe564));
        EXPECT(0x5d, gbc.readMem(0xe565));
        // CC 0144
        gbc.setState(0x8cd3, 0xac17, 0x9990, 0xc76a, 0xbb76, 0xcc31, 0x0, 0x1);
        gbc.writeMem(0x8cd3, { 0xcc, 0x8, 0x2a });
        gbc.writeMem(0xac15, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x99, gbc.a());
        EXPECT(0xc7, gbc.b());
        EXPECT(0x6a, gbc.c());
        EXPECT(0xbb, gbc.d());
        EXPECT(0x76, gbc.e());
        EXPECT(0xcc, gbc.h());
        EXPECT(0x31, gbc.l());
        EXPECT(0xac15, gbc.sp());
        EXPECT(0x2a08, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0x8cd3));
        EXPECT(0x8, gbc.readMem(0x8cd4));
        EXPECT(0x2a, gbc.readMem(0x8cd5));
        EXPECT(0xd6, gbc.readMem(0xac15));
        EXPECT(0x8c, gbc.readMem(0xac16));
        // CC 0145
        gbc.setState(0xe9c7, 0xb50a, 0x5b10, 0x5ed4, 0x879b, 0x76d9, 0x0, 0x0);
        gbc.writeMem(0xe9c7, { 0xcc, 0xcf, 0x37 });
        gbc.step();
        EXPECT(0x5b, gbc.a());
        EXPECT(0x5e, gbc.b());
        EXPECT(0xd4, gbc.c());
        EXPECT(0x87, gbc.d());
        EXPECT(0x9b, gbc.e());
        EXPECT(0x76, gbc.h());
        EXPECT(0xd9, gbc.l());
        EXPECT(0xb50a, gbc.sp());
        EXPECT(0xe9ca, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xe9c7));
        EXPECT(0xcf, gbc.readMem(0xe9c8));
        EXPECT(0x37, gbc.readMem(0xe9c9));
        // CC 0146
        gbc.setState(0x4b26, 0x8d82, 0xc160, 0x53e6, 0xb980, 0x7f10, 0x1, 0x0);
        gbc.writeMem(0x4b26, { 0xcc, 0xef, 0x98 });
        gbc.step();
        EXPECT(0xc1, gbc.a());
        EXPECT(0x53, gbc.b());
        EXPECT(0xe6, gbc.c());
        EXPECT(0xb9, gbc.d());
        EXPECT(0x80, gbc.e());
        EXPECT(0x7f, gbc.h());
        EXPECT(0x10, gbc.l());
        EXPECT(0x8d82, gbc.sp());
        EXPECT(0x4b29, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 0147
        gbc.setState(0xa8f5, 0xe91, 0x9d40, 0x9f99, 0x175d, 0x7851, 0x1, 0x1);
        gbc.writeMem(0xa8f5, { 0xcc, 0x4f, 0x20 });
        gbc.step();
        EXPECT(0x9d, gbc.a());
        EXPECT(0x9f, gbc.b());
        EXPECT(0x99, gbc.c());
        EXPECT(0x17, gbc.d());
        EXPECT(0x5d, gbc.e());
        EXPECT(0x78, gbc.h());
        EXPECT(0x51, gbc.l());
        EXPECT(0xe91, gbc.sp());
        EXPECT(0xa8f8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xa8f5));
        EXPECT(0x4f, gbc.readMem(0xa8f6));
        EXPECT(0x20, gbc.readMem(0xa8f7));
        // CC 0148
        gbc.setState(0x120, 0xf056, 0x8ac0, 0x69a9, 0x36ec, 0xb707, 0x1, 0x0);
        gbc.writeMem(0x120, { 0xcc, 0x1, 0xb3 });
        gbc.writeMem(0xf054, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x8a, gbc.a());
        EXPECT(0x69, gbc.b());
        EXPECT(0xa9, gbc.c());
        EXPECT(0x36, gbc.d());
        EXPECT(0xec, gbc.e());
        EXPECT(0xb7, gbc.h());
        EXPECT(0x7, gbc.l());
        EXPECT(0xf054, gbc.sp());
        EXPECT(0xb301, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x23, gbc.readMem(0xf054));
        EXPECT(0x1, gbc.readMem(0xf055));
        // CC 014A
        gbc.setState(0x7b5a, 0x506c, 0xd710, 0xbf1e, 0x915e, 0x9913, 0x0, 0x0);
        gbc.writeMem(0x7b5a, { 0xcc, 0xd, 0xc3 });
        gbc.step();
        EXPECT(0xd7, gbc.a());
        EXPECT(0xbf, gbc.b());
        EXPECT(0x1e, gbc.c());
        EXPECT(0x91, gbc.d());
        EXPECT(0x5e, gbc.e());
        EXPECT(0x99, gbc.h());
        EXPECT(0x13, gbc.l());
        EXPECT(0x506c, gbc.sp());
        EXPECT(0x7b5d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 014C
        gbc.setState(0x266a, 0xf0da, 0x1440, 0x8add, 0x7283, 0x6447, 0x0, 0x0);
        gbc.writeMem(0x266a, { 0xcc, 0xb7, 0x5d });
        gbc.step();
        EXPECT(0x14, gbc.a());
        EXPECT(0x8a, gbc.b());
        EXPECT(0xdd, gbc.c());
        EXPECT(0x72, gbc.d());
        EXPECT(0x83, gbc.e());
        EXPECT(0x64, gbc.h());
        EXPECT(0x47, gbc.l());
        EXPECT(0xf0da, gbc.sp());
        EXPECT(0x266d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 014D
        gbc.setState(0xc8c, 0xae92, 0x3550, 0x3a5c, 0xc653, 0x5cb9, 0x0, 0x1);
        gbc.writeMem(0xc8c, { 0xcc, 0xe0, 0x2 });
        gbc.step();
        EXPECT(0x35, gbc.a());
        EXPECT(0x3a, gbc.b());
        EXPECT(0x5c, gbc.c());
        EXPECT(0xc6, gbc.d());
        EXPECT(0x53, gbc.e());
        EXPECT(0x5c, gbc.h());
        EXPECT(0xb9, gbc.l());
        EXPECT(0xae92, gbc.sp());
        EXPECT(0xc8f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 014E
        gbc.setState(0x896b, 0x1260, 0x5a50, 0x484a, 0xfbf0, 0x68b4, 0x1, 0x0);
        gbc.writeMem(0x896b, { 0xcc, 0xe7, 0xf9 });
        gbc.step();
        EXPECT(0x5a, gbc.a());
        EXPECT(0x48, gbc.b());
        EXPECT(0x4a, gbc.c());
        EXPECT(0xfb, gbc.d());
        EXPECT(0xf0, gbc.e());
        EXPECT(0x68, gbc.h());
        EXPECT(0xb4, gbc.l());
        EXPECT(0x1260, gbc.sp());
        EXPECT(0x896e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0x896b));
        EXPECT(0xe7, gbc.readMem(0x896c));
        EXPECT(0xf9, gbc.readMem(0x896d));
        // CC 0150
        gbc.setState(0x5ed3, 0xa0e5, 0x3fe0, 0x6ee4, 0x13e7, 0x1acc, 0x0, 0x1);
        gbc.writeMem(0x5ed3, { 0xcc, 0xb4, 0x6d });
        gbc.writeMem(0xa0e3, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x3f, gbc.a());
        EXPECT(0x6e, gbc.b());
        EXPECT(0xe4, gbc.c());
        EXPECT(0x13, gbc.d());
        EXPECT(0xe7, gbc.e());
        EXPECT(0x1a, gbc.h());
        EXPECT(0xcc, gbc.l());
        EXPECT(0xa0e3, gbc.sp());
        EXPECT(0x6db4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xd6, gbc.readMem(0xa0e3));
        EXPECT(0x5e, gbc.readMem(0xa0e4));
        // CC 0151
        gbc.setState(0xbb14, 0xa5d9, 0x60b0, 0x3627, 0x7ec1, 0x7bd4, 0x0, 0x1);
        gbc.writeMem(0xa5d7, { 0x0, 0x0 });
        gbc.writeMem(0xbb14, { 0xcc, 0x1b, 0x53 });
        gbc.step();
        EXPECT(0x60, gbc.a());
        EXPECT(0x36, gbc.b());
        EXPECT(0x27, gbc.c());
        EXPECT(0x7e, gbc.d());
        EXPECT(0xc1, gbc.e());
        EXPECT(0x7b, gbc.h());
        EXPECT(0xd4, gbc.l());
        EXPECT(0xa5d7, gbc.sp());
        EXPECT(0x531b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x17, gbc.readMem(0xa5d7));
        EXPECT(0xbb, gbc.readMem(0xa5d8));
        EXPECT(0xcc, gbc.readMem(0xbb14));
        EXPECT(0x1b, gbc.readMem(0xbb15));
        EXPECT(0x53, gbc.readMem(0xbb16));
        // CC 0152
        gbc.setState(0xef3b, 0x963b, 0xf4a0, 0x4c34, 0x8434, 0x7c75, 0x1, 0x1);
        gbc.writeMem(0x9639, { 0x0, 0x0 });
        gbc.writeMem(0xef3b, { 0xcc, 0xee, 0xa5 });
        gbc.step();
        EXPECT(0xf4, gbc.a());
        EXPECT(0x4c, gbc.b());
        EXPECT(0x34, gbc.c());
        EXPECT(0x84, gbc.d());
        EXPECT(0x34, gbc.e());
        EXPECT(0x7c, gbc.h());
        EXPECT(0x75, gbc.l());
        EXPECT(0x9639, gbc.sp());
        EXPECT(0xa5ee, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x3e, gbc.readMem(0x9639));
        EXPECT(0xef, gbc.readMem(0x963a));
        EXPECT(0xcc, gbc.readMem(0xef3b));
        EXPECT(0xee, gbc.readMem(0xef3c));
        EXPECT(0xa5, gbc.readMem(0xef3d));
        // CC 0153
        gbc.setState(0xc954, 0xed66, 0xd870, 0xf85f, 0x5b47, 0x9ece, 0x1, 0x1);
        gbc.writeMem(0xc954, { 0xcc, 0x56, 0x86 });
        gbc.step();
        EXPECT(0xd8, gbc.a());
        EXPECT(0xf8, gbc.b());
        EXPECT(0x5f, gbc.c());
        EXPECT(0x5b, gbc.d());
        EXPECT(0x47, gbc.e());
        EXPECT(0x9e, gbc.h());
        EXPECT(0xce, gbc.l());
        EXPECT(0xed66, gbc.sp());
        EXPECT(0xc957, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xc954));
        EXPECT(0x56, gbc.readMem(0xc955));
        EXPECT(0x86, gbc.readMem(0xc956));
        // CC 0155
        gbc.setState(0x192b, 0xf211, 0x6d10, 0xec26, 0x1352, 0x971a, 0x0, 0x1);
        gbc.writeMem(0x192b, { 0xcc, 0x10, 0xe4 });
        gbc.step();
        EXPECT(0x6d, gbc.a());
        EXPECT(0xec, gbc.b());
        EXPECT(0x26, gbc.c());
        EXPECT(0x13, gbc.d());
        EXPECT(0x52, gbc.e());
        EXPECT(0x97, gbc.h());
        EXPECT(0x1a, gbc.l());
        EXPECT(0xf211, gbc.sp());
        EXPECT(0x192e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 0156
        gbc.setState(0xee34, 0x1abe, 0xcf30, 0xf1bd, 0x77f4, 0x143a, 0x0, 0x0);
        gbc.writeMem(0xee34, { 0xcc, 0x9a, 0x58 });
        gbc.step();
        EXPECT(0xcf, gbc.a());
        EXPECT(0xf1, gbc.b());
        EXPECT(0xbd, gbc.c());
        EXPECT(0x77, gbc.d());
        EXPECT(0xf4, gbc.e());
        EXPECT(0x14, gbc.h());
        EXPECT(0x3a, gbc.l());
        EXPECT(0x1abe, gbc.sp());
        EXPECT(0xee37, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xee34));
        EXPECT(0x9a, gbc.readMem(0xee35));
        EXPECT(0x58, gbc.readMem(0xee36));
        // CC 0157
        gbc.setState(0x4aee, 0xeabc, 0xf130, 0xa393, 0x64ba, 0xe604, 0x1, 0x0);
        gbc.writeMem(0x4aee, { 0xcc, 0x30, 0xb9 });
        gbc.step();
        EXPECT(0xf1, gbc.a());
        EXPECT(0xa3, gbc.b());
        EXPECT(0x93, gbc.c());
        EXPECT(0x64, gbc.d());
        EXPECT(0xba, gbc.e());
        EXPECT(0xe6, gbc.h());
        EXPECT(0x4, gbc.l());
        EXPECT(0xeabc, gbc.sp());
        EXPECT(0x4af1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 0158
        gbc.setState(0x3f1, 0xb006, 0xb390, 0x787b, 0xdb60, 0xd70c, 0x0, 0x1);
        gbc.writeMem(0x3f1, { 0xcc, 0x77, 0x18 });
        gbc.writeMem(0xb004, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xb3, gbc.a());
        EXPECT(0x78, gbc.b());
        EXPECT(0x7b, gbc.c());
        EXPECT(0xdb, gbc.d());
        EXPECT(0x60, gbc.e());
        EXPECT(0xd7, gbc.h());
        EXPECT(0xc, gbc.l());
        EXPECT(0xb004, gbc.sp());
        EXPECT(0x1877, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xf4, gbc.readMem(0xb004));
        EXPECT(0x3, gbc.readMem(0xb005));
        // CC 0159
        gbc.setState(0xdf8c, 0xac2f, 0xddf0, 0x7f0b, 0x12bd, 0xf255, 0x0, 0x0);
        gbc.writeMem(0xac2d, { 0x0, 0x0 });
        gbc.writeMem(0xdf8c, { 0xcc, 0x3f, 0xe2 });
        gbc.step();
        EXPECT(0xdd, gbc.a());
        EXPECT(0x7f, gbc.b());
        EXPECT(0xb, gbc.c());
        EXPECT(0x12, gbc.d());
        EXPECT(0xbd, gbc.e());
        EXPECT(0xf2, gbc.h());
        EXPECT(0x55, gbc.l());
        EXPECT(0xac2d, gbc.sp());
        EXPECT(0xe23f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x8f, gbc.readMem(0xac2d));
        EXPECT(0xdf, gbc.readMem(0xac2e));
        EXPECT(0xcc, gbc.readMem(0xdf8c));
        EXPECT(0x3f, gbc.readMem(0xdf8d));
        EXPECT(0xe2, gbc.readMem(0xdf8e));
        // CC 015A
        gbc.setState(0x17d0, 0xc0c0, 0xa480, 0x85cd, 0x8898, 0x50d, 0x1, 0x0);
        gbc.writeMem(0x17d0, { 0xcc, 0xef, 0xa1 });
        gbc.writeMem(0xc0be, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xa4, gbc.a());
        EXPECT(0x85, gbc.b());
        EXPECT(0xcd, gbc.c());
        EXPECT(0x88, gbc.d());
        EXPECT(0x98, gbc.e());
        EXPECT(0x5, gbc.h());
        EXPECT(0xd, gbc.l());
        EXPECT(0xc0be, gbc.sp());
        EXPECT(0xa1ef, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xd3, gbc.readMem(0xc0be));
        EXPECT(0x17, gbc.readMem(0xc0bf));
        // CC 015C
        gbc.setState(0x1211, 0x5f1c, 0x2030, 0x8201, 0xd771, 0xa5a5, 0x1, 0x1);
        gbc.writeMem(0x1211, { 0xcc, 0xa3, 0x86 });
        gbc.step();
        EXPECT(0x20, gbc.a());
        EXPECT(0x82, gbc.b());
        EXPECT(0x1, gbc.c());
        EXPECT(0xd7, gbc.d());
        EXPECT(0x71, gbc.e());
        EXPECT(0xa5, gbc.h());
        EXPECT(0xa5, gbc.l());
        EXPECT(0x5f1c, gbc.sp());
        EXPECT(0x1214, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 015D
        gbc.setState(0x3ccd, 0xbc91, 0x78a0, 0xbbbc, 0xa1b7, 0x9804, 0x0, 0x1);
        gbc.writeMem(0x3ccd, { 0xcc, 0xf7, 0xfb });
        gbc.writeMem(0xbc8f, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x78, gbc.a());
        EXPECT(0xbb, gbc.b());
        EXPECT(0xbc, gbc.c());
        EXPECT(0xa1, gbc.d());
        EXPECT(0xb7, gbc.e());
        EXPECT(0x98, gbc.h());
        EXPECT(0x4, gbc.l());
        EXPECT(0xbc8f, gbc.sp());
        EXPECT(0xfbf7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xd0, gbc.readMem(0xbc8f));
        EXPECT(0x3c, gbc.readMem(0xbc90));
        // CC 015E
        gbc.setState(0x180e, 0xad9e, 0xf50, 0x4982, 0x374a, 0x386b, 0x0, 0x0);
        gbc.writeMem(0x180e, { 0xcc, 0x32, 0x8f });
        gbc.step();
        EXPECT(0xf, gbc.a());
        EXPECT(0x49, gbc.b());
        EXPECT(0x82, gbc.c());
        EXPECT(0x37, gbc.d());
        EXPECT(0x4a, gbc.e());
        EXPECT(0x38, gbc.h());
        EXPECT(0x6b, gbc.l());
        EXPECT(0xad9e, gbc.sp());
        EXPECT(0x1811, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 0160
        gbc.setState(0x1dcf, 0x926b, 0x7ad0, 0x3179, 0xff2, 0x1ddd, 0x0, 0x0);
        gbc.writeMem(0x1dcf, { 0xcc, 0x26, 0x34 });
        gbc.writeMem(0x9269, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x7a, gbc.a());
        EXPECT(0x31, gbc.b());
        EXPECT(0x79, gbc.c());
        EXPECT(0xf, gbc.d());
        EXPECT(0xf2, gbc.e());
        EXPECT(0x1d, gbc.h());
        EXPECT(0xdd, gbc.l());
        EXPECT(0x9269, gbc.sp());
        EXPECT(0x3426, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xd2, gbc.readMem(0x9269));
        EXPECT(0x1d, gbc.readMem(0x926a));
        // CC 0161
        gbc.setState(0x2719, 0x325b, 0x4f60, 0x2ff2, 0xbb2, 0x1c38, 0x1, 0x1);
        gbc.writeMem(0x2719, { 0xcc, 0x95, 0xe1 });
        gbc.step();
        EXPECT(0x4f, gbc.a());
        EXPECT(0x2f, gbc.b());
        EXPECT(0xf2, gbc.c());
        EXPECT(0xb, gbc.d());
        EXPECT(0xb2, gbc.e());
        EXPECT(0x1c, gbc.h());
        EXPECT(0x38, gbc.l());
        EXPECT(0x325b, gbc.sp());
        EXPECT(0x271c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 0162
        gbc.setState(0x9755, 0xa21d, 0xc4a0, 0x2989, 0xa163, 0x63c5, 0x0, 0x1);
        gbc.writeMem(0x9755, { 0xcc, 0xf5, 0x11 });
        gbc.writeMem(0xa21b, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xc4, gbc.a());
        EXPECT(0x29, gbc.b());
        EXPECT(0x89, gbc.c());
        EXPECT(0xa1, gbc.d());
        EXPECT(0x63, gbc.e());
        EXPECT(0x63, gbc.h());
        EXPECT(0xc5, gbc.l());
        EXPECT(0xa21b, gbc.sp());
        EXPECT(0x11f5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0x9755));
        EXPECT(0xf5, gbc.readMem(0x9756));
        EXPECT(0x11, gbc.readMem(0x9757));
        EXPECT(0x58, gbc.readMem(0xa21b));
        EXPECT(0x97, gbc.readMem(0xa21c));
        // CC 0163
        gbc.setState(0xb385, 0xa4b5, 0x5490, 0xa970, 0x9a01, 0x27cb, 0x0, 0x0);
        gbc.writeMem(0xa4b3, { 0x0, 0x0 });
        gbc.writeMem(0xb385, { 0xcc, 0x17, 0x98 });
        gbc.step();
        EXPECT(0x54, gbc.a());
        EXPECT(0xa9, gbc.b());
        EXPECT(0x70, gbc.c());
        EXPECT(0x9a, gbc.d());
        EXPECT(0x1, gbc.e());
        EXPECT(0x27, gbc.h());
        EXPECT(0xcb, gbc.l());
        EXPECT(0xa4b3, gbc.sp());
        EXPECT(0x9817, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x88, gbc.readMem(0xa4b3));
        EXPECT(0xb3, gbc.readMem(0xa4b4));
        EXPECT(0xcc, gbc.readMem(0xb385));
        EXPECT(0x17, gbc.readMem(0xb386));
        EXPECT(0x98, gbc.readMem(0xb387));
        // CC 0165
        gbc.setState(0x1ea7, 0xedc6, 0xba00, 0x2f96, 0xbda3, 0x8ee7, 0x1, 0x1);
        gbc.writeMem(0x1ea7, { 0xcc, 0x2c, 0xec });
        gbc.step();
        EXPECT(0xba, gbc.a());
        EXPECT(0x2f, gbc.b());
        EXPECT(0x96, gbc.c());
        EXPECT(0xbd, gbc.d());
        EXPECT(0xa3, gbc.e());
        EXPECT(0x8e, gbc.h());
        EXPECT(0xe7, gbc.l());
        EXPECT(0xedc6, gbc.sp());
        EXPECT(0x1eaa, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 0166
        gbc.setState(0x5d8d, 0xb349, 0x8140, 0xba67, 0x5f6f, 0x53ff, 0x1, 0x1);
        gbc.writeMem(0x5d8d, { 0xcc, 0x8, 0xfd });
        gbc.step();
        EXPECT(0x81, gbc.a());
        EXPECT(0xba, gbc.b());
        EXPECT(0x67, gbc.c());
        EXPECT(0x5f, gbc.d());
        EXPECT(0x6f, gbc.e());
        EXPECT(0x53, gbc.h());
        EXPECT(0xff, gbc.l());
        EXPECT(0xb349, gbc.sp());
        EXPECT(0x5d90, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 0168
        gbc.setState(0x44d2, 0x94f, 0x4030, 0xde47, 0x6cb4, 0x367e, 0x0, 0x0);
        gbc.writeMem(0x44d2, { 0xcc, 0xcf, 0xe8 });
        gbc.step();
        EXPECT(0x40, gbc.a());
        EXPECT(0xde, gbc.b());
        EXPECT(0x47, gbc.c());
        EXPECT(0x6c, gbc.d());
        EXPECT(0xb4, gbc.e());
        EXPECT(0x36, gbc.h());
        EXPECT(0x7e, gbc.l());
        EXPECT(0x94f, gbc.sp());
        EXPECT(0x44d5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 0169
        gbc.setState(0x60d5, 0xf204, 0xe630, 0xd138, 0x5772, 0xc9b4, 0x0, 0x0);
        gbc.writeMem(0x60d5, { 0xcc, 0xbe, 0x21 });
        gbc.step();
        EXPECT(0xe6, gbc.a());
        EXPECT(0xd1, gbc.b());
        EXPECT(0x38, gbc.c());
        EXPECT(0x57, gbc.d());
        EXPECT(0x72, gbc.e());
        EXPECT(0xc9, gbc.h());
        EXPECT(0xb4, gbc.l());
        EXPECT(0xf204, gbc.sp());
        EXPECT(0x60d8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 016A
        gbc.setState(0x7717, 0xeed6, 0xab10, 0x6dbf, 0x3b3f, 0x8358, 0x1, 0x1);
        gbc.writeMem(0x7717, { 0xcc, 0x2b, 0x61 });
        gbc.step();
        EXPECT(0xab, gbc.a());
        EXPECT(0x6d, gbc.b());
        EXPECT(0xbf, gbc.c());
        EXPECT(0x3b, gbc.d());
        EXPECT(0x3f, gbc.e());
        EXPECT(0x83, gbc.h());
        EXPECT(0x58, gbc.l());
        EXPECT(0xeed6, gbc.sp());
        EXPECT(0x771a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 016B
        gbc.setState(0x1550, 0xf2cb, 0xad30, 0xfa56, 0xd1fd, 0x8b08, 0x0, 0x0);
        gbc.writeMem(0x1550, { 0xcc, 0x12, 0x70 });
        gbc.step();
        EXPECT(0xad, gbc.a());
        EXPECT(0xfa, gbc.b());
        EXPECT(0x56, gbc.c());
        EXPECT(0xd1, gbc.d());
        EXPECT(0xfd, gbc.e());
        EXPECT(0x8b, gbc.h());
        EXPECT(0x8, gbc.l());
        EXPECT(0xf2cb, gbc.sp());
        EXPECT(0x1553, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 016D
        gbc.setState(0xc3c7, 0x4865, 0xdc00, 0x359d, 0x1c71, 0xdefe, 0x1, 0x1);
        gbc.writeMem(0xc3c7, { 0xcc, 0x88, 0xf8 });
        gbc.step();
        EXPECT(0xdc, gbc.a());
        EXPECT(0x35, gbc.b());
        EXPECT(0x9d, gbc.c());
        EXPECT(0x1c, gbc.d());
        EXPECT(0x71, gbc.e());
        EXPECT(0xde, gbc.h());
        EXPECT(0xfe, gbc.l());
        EXPECT(0x4865, gbc.sp());
        EXPECT(0xc3ca, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xc3c7));
        EXPECT(0x88, gbc.readMem(0xc3c8));
        EXPECT(0xf8, gbc.readMem(0xc3c9));
        // CC 016E
        gbc.setState(0x7cd1, 0x1e7a, 0x6260, 0x81d, 0x4036, 0x278a, 0x1, 0x0);
        gbc.writeMem(0x7cd1, { 0xcc, 0x30, 0x6f });
        gbc.step();
        EXPECT(0x62, gbc.a());
        EXPECT(0x8, gbc.b());
        EXPECT(0x1d, gbc.c());
        EXPECT(0x40, gbc.d());
        EXPECT(0x36, gbc.e());
        EXPECT(0x27, gbc.h());
        EXPECT(0x8a, gbc.l());
        EXPECT(0x1e7a, gbc.sp());
        EXPECT(0x7cd4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 016F
        gbc.setState(0xba9c, 0xd9e7, 0x5770, 0xe1f5, 0xc364, 0xca3d, 0x0, 0x1);
        gbc.writeMem(0xba9c, { 0xcc, 0xa6, 0x44 });
        gbc.step();
        EXPECT(0x57, gbc.a());
        EXPECT(0xe1, gbc.b());
        EXPECT(0xf5, gbc.c());
        EXPECT(0xc3, gbc.d());
        EXPECT(0x64, gbc.e());
        EXPECT(0xca, gbc.h());
        EXPECT(0x3d, gbc.l());
        EXPECT(0xd9e7, gbc.sp());
        EXPECT(0xba9f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xba9c));
        EXPECT(0xa6, gbc.readMem(0xba9d));
        EXPECT(0x44, gbc.readMem(0xba9e));
        // CC 0171
        gbc.setState(0xe653, 0xa4a9, 0x7c30, 0xf5bf, 0x5e93, 0x2e42, 0x1, 0x1);
        gbc.writeMem(0xe653, { 0xcc, 0x28, 0x4b });
        gbc.step();
        EXPECT(0x7c, gbc.a());
        EXPECT(0xf5, gbc.b());
        EXPECT(0xbf, gbc.c());
        EXPECT(0x5e, gbc.d());
        EXPECT(0x93, gbc.e());
        EXPECT(0x2e, gbc.h());
        EXPECT(0x42, gbc.l());
        EXPECT(0xa4a9, gbc.sp());
        EXPECT(0xe656, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xe653));
        EXPECT(0x28, gbc.readMem(0xe654));
        EXPECT(0x4b, gbc.readMem(0xe655));
        // CC 0176
        gbc.setState(0xa8d8, 0x2be4, 0x5d00, 0xd329, 0x4bca, 0x2f1d, 0x1, 0x1);
        gbc.writeMem(0xa8d8, { 0xcc, 0x95, 0xce });
        gbc.step();
        EXPECT(0x5d, gbc.a());
        EXPECT(0xd3, gbc.b());
        EXPECT(0x29, gbc.c());
        EXPECT(0x4b, gbc.d());
        EXPECT(0xca, gbc.e());
        EXPECT(0x2f, gbc.h());
        EXPECT(0x1d, gbc.l());
        EXPECT(0x2be4, gbc.sp());
        EXPECT(0xa8db, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xa8d8));
        EXPECT(0x95, gbc.readMem(0xa8d9));
        EXPECT(0xce, gbc.readMem(0xa8da));
        // CC 0177
        gbc.setState(0x21f3, 0xdda, 0x7760, 0x6fee, 0x233a, 0x7480, 0x1, 0x1);
        gbc.writeMem(0x21f3, { 0xcc, 0xdc, 0x2d });
        gbc.step();
        EXPECT(0x77, gbc.a());
        EXPECT(0x6f, gbc.b());
        EXPECT(0xee, gbc.c());
        EXPECT(0x23, gbc.d());
        EXPECT(0x3a, gbc.e());
        EXPECT(0x74, gbc.h());
        EXPECT(0x80, gbc.l());
        EXPECT(0xdda, gbc.sp());
        EXPECT(0x21f6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 0178
        gbc.setState(0xe8bd, 0x3e60, 0x4d00, 0x248e, 0x279f, 0xb21, 0x0, 0x0);
        gbc.writeMem(0xe8bd, { 0xcc, 0x1e, 0xfc });
        gbc.step();
        EXPECT(0x4d, gbc.a());
        EXPECT(0x24, gbc.b());
        EXPECT(0x8e, gbc.c());
        EXPECT(0x27, gbc.d());
        EXPECT(0x9f, gbc.e());
        EXPECT(0xb, gbc.h());
        EXPECT(0x21, gbc.l());
        EXPECT(0x3e60, gbc.sp());
        EXPECT(0xe8c0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xe8bd));
        EXPECT(0x1e, gbc.readMem(0xe8be));
        EXPECT(0xfc, gbc.readMem(0xe8bf));
        // CC 017A
        gbc.setState(0xce55, 0xbe3f, 0x5e10, 0x4811, 0xb645, 0x2206, 0x0, 0x1);
        gbc.writeMem(0xce55, { 0xcc, 0xfe, 0xcd });
        gbc.step();
        EXPECT(0x5e, gbc.a());
        EXPECT(0x48, gbc.b());
        EXPECT(0x11, gbc.c());
        EXPECT(0xb6, gbc.d());
        EXPECT(0x45, gbc.e());
        EXPECT(0x22, gbc.h());
        EXPECT(0x6, gbc.l());
        EXPECT(0xbe3f, gbc.sp());
        EXPECT(0xce58, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xce55));
        EXPECT(0xfe, gbc.readMem(0xce56));
        EXPECT(0xcd, gbc.readMem(0xce57));
        // CC 017B
        gbc.setState(0x9385, 0x8703, 0x1de0, 0x5eab, 0xd04e, 0x58f1, 0x0, 0x1);
        gbc.writeMem(0x8701, { 0x0, 0x0 });
        gbc.writeMem(0x9385, { 0xcc, 0x6c, 0x97 });
        gbc.step();
        EXPECT(0x1d, gbc.a());
        EXPECT(0x5e, gbc.b());
        EXPECT(0xab, gbc.c());
        EXPECT(0xd0, gbc.d());
        EXPECT(0x4e, gbc.e());
        EXPECT(0x58, gbc.h());
        EXPECT(0xf1, gbc.l());
        EXPECT(0x8701, gbc.sp());
        EXPECT(0x976c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x88, gbc.readMem(0x8701));
        EXPECT(0x93, gbc.readMem(0x8702));
        EXPECT(0xcc, gbc.readMem(0x9385));
        EXPECT(0x6c, gbc.readMem(0x9386));
        EXPECT(0x97, gbc.readMem(0x9387));
        // CC 017C
        gbc.setState(0x4db4, 0xc21b, 0xe0d0, 0x8a72, 0xe9ef, 0xd1b1, 0x1, 0x1);
        gbc.writeMem(0x4db4, { 0xcc, 0xf, 0x29 });
        gbc.writeMem(0xc219, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xe0, gbc.a());
        EXPECT(0x8a, gbc.b());
        EXPECT(0x72, gbc.c());
        EXPECT(0xe9, gbc.d());
        EXPECT(0xef, gbc.e());
        EXPECT(0xd1, gbc.h());
        EXPECT(0xb1, gbc.l());
        EXPECT(0xc219, gbc.sp());
        EXPECT(0x290f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xb7, gbc.readMem(0xc219));
        EXPECT(0x4d, gbc.readMem(0xc21a));
        // CC 017E
        gbc.setState(0x5044, 0x5e99, 0xa940, 0x825f, 0xab28, 0xb0d, 0x0, 0x1);
        gbc.writeMem(0x5044, { 0xcc, 0x2c, 0x2f });
        gbc.step();
        EXPECT(0xa9, gbc.a());
        EXPECT(0x82, gbc.b());
        EXPECT(0x5f, gbc.c());
        EXPECT(0xab, gbc.d());
        EXPECT(0x28, gbc.e());
        EXPECT(0xb, gbc.h());
        EXPECT(0xd, gbc.l());
        EXPECT(0x5e99, gbc.sp());
        EXPECT(0x5047, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 017F
        gbc.setState(0x2591, 0xb311, 0x8c80, 0xf0a8, 0x3c21, 0x2efb, 0x1, 0x1);
        gbc.writeMem(0x2591, { 0xcc, 0x6d, 0x8f });
        gbc.writeMem(0xb30f, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x8c, gbc.a());
        EXPECT(0xf0, gbc.b());
        EXPECT(0xa8, gbc.c());
        EXPECT(0x3c, gbc.d());
        EXPECT(0x21, gbc.e());
        EXPECT(0x2e, gbc.h());
        EXPECT(0xfb, gbc.l());
        EXPECT(0xb30f, gbc.sp());
        EXPECT(0x8f6d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x94, gbc.readMem(0xb30f));
        EXPECT(0x25, gbc.readMem(0xb310));
        // CC 0182
        gbc.setState(0x1320, 0xf4de, 0x3e70, 0xe461, 0xb238, 0x405, 0x1, 0x0);
        gbc.writeMem(0x1320, { 0xcc, 0xdf, 0xb5 });
        gbc.step();
        EXPECT(0x3e, gbc.a());
        EXPECT(0xe4, gbc.b());
        EXPECT(0x61, gbc.c());
        EXPECT(0xb2, gbc.d());
        EXPECT(0x38, gbc.e());
        EXPECT(0x4, gbc.h());
        EXPECT(0x5, gbc.l());
        EXPECT(0xf4de, gbc.sp());
        EXPECT(0x1323, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 0183
        gbc.setState(0x2e6a, 0xe75d, 0x7ec0, 0xc30b, 0x3ba8, 0x6914, 0x1, 0x1);
        gbc.writeMem(0x2e6a, { 0xcc, 0xcd, 0x2d });
        gbc.writeMem(0xe75b, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x7e, gbc.a());
        EXPECT(0xc3, gbc.b());
        EXPECT(0xb, gbc.c());
        EXPECT(0x3b, gbc.d());
        EXPECT(0xa8, gbc.e());
        EXPECT(0x69, gbc.h());
        EXPECT(0x14, gbc.l());
        EXPECT(0xe75b, gbc.sp());
        EXPECT(0x2dcd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x6d, gbc.readMem(0xe75b));
        EXPECT(0x2e, gbc.readMem(0xe75c));
        // CC 0184
        gbc.setState(0x9640, 0xfbd2, 0x88c0, 0x352b, 0xa06b, 0x5dce, 0x0, 0x0);
        gbc.writeMem(0x9640, { 0xcc, 0x37, 0x90 });
        gbc.writeMem(0xfbd0, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x88, gbc.a());
        EXPECT(0x35, gbc.b());
        EXPECT(0x2b, gbc.c());
        EXPECT(0xa0, gbc.d());
        EXPECT(0x6b, gbc.e());
        EXPECT(0x5d, gbc.h());
        EXPECT(0xce, gbc.l());
        EXPECT(0xfbd0, gbc.sp());
        EXPECT(0x9037, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0x9640));
        EXPECT(0x37, gbc.readMem(0x9641));
        EXPECT(0x90, gbc.readMem(0x9642));
        EXPECT(0x43, gbc.readMem(0xfbd0));
        EXPECT(0x96, gbc.readMem(0xfbd1));
        // CC 0185
        gbc.setState(0x3231, 0x6297, 0x1770, 0x8df1, 0xadfb, 0x7413, 0x0, 0x0);
        gbc.writeMem(0x3231, { 0xcc, 0xc6, 0x80 });
        gbc.step();
        EXPECT(0x17, gbc.a());
        EXPECT(0x8d, gbc.b());
        EXPECT(0xf1, gbc.c());
        EXPECT(0xad, gbc.d());
        EXPECT(0xfb, gbc.e());
        EXPECT(0x74, gbc.h());
        EXPECT(0x13, gbc.l());
        EXPECT(0x6297, gbc.sp());
        EXPECT(0x3234, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 0186
        gbc.setState(0xa298, 0x5094, 0x1e40, 0xf6a6, 0x13eb, 0x5e4e, 0x1, 0x0);
        gbc.writeMem(0xa298, { 0xcc, 0xa9, 0xd7 });
        gbc.step();
        EXPECT(0x1e, gbc.a());
        EXPECT(0xf6, gbc.b());
        EXPECT(0xa6, gbc.c());
        EXPECT(0x13, gbc.d());
        EXPECT(0xeb, gbc.e());
        EXPECT(0x5e, gbc.h());
        EXPECT(0x4e, gbc.l());
        EXPECT(0x5094, gbc.sp());
        EXPECT(0xa29b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xa298));
        EXPECT(0xa9, gbc.readMem(0xa299));
        EXPECT(0xd7, gbc.readMem(0xa29a));
        // CC 0187
        gbc.setState(0x78eb, 0x4, 0xc110, 0xbfd7, 0x23c1, 0x6255, 0x1, 0x1);
        gbc.writeMem(0x78eb, { 0xcc, 0xfc, 0xb5 });
        gbc.step();
        EXPECT(0xc1, gbc.a());
        EXPECT(0xbf, gbc.b());
        EXPECT(0xd7, gbc.c());
        EXPECT(0x23, gbc.d());
        EXPECT(0xc1, gbc.e());
        EXPECT(0x62, gbc.h());
        EXPECT(0x55, gbc.l());
        EXPECT(0x4, gbc.sp());
        EXPECT(0x78ee, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 0188
        gbc.setState(0x1a62, 0x46a7, 0x9c00, 0x1d45, 0xbb1d, 0x9d39, 0x0, 0x0);
        gbc.writeMem(0x1a62, { 0xcc, 0x25, 0xa3 });
        gbc.step();
        EXPECT(0x9c, gbc.a());
        EXPECT(0x1d, gbc.b());
        EXPECT(0x45, gbc.c());
        EXPECT(0xbb, gbc.d());
        EXPECT(0x1d, gbc.e());
        EXPECT(0x9d, gbc.h());
        EXPECT(0x39, gbc.l());
        EXPECT(0x46a7, gbc.sp());
        EXPECT(0x1a65, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 0189
        gbc.setState(0x1c30, 0x9fdc, 0xe3d0, 0x45f9, 0x1eaf, 0xe587, 0x0, 0x0);
        gbc.writeMem(0x1c30, { 0xcc, 0xbd, 0x2f });
        gbc.writeMem(0x9fda, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xe3, gbc.a());
        EXPECT(0x45, gbc.b());
        EXPECT(0xf9, gbc.c());
        EXPECT(0x1e, gbc.d());
        EXPECT(0xaf, gbc.e());
        EXPECT(0xe5, gbc.h());
        EXPECT(0x87, gbc.l());
        EXPECT(0x9fda, gbc.sp());
        EXPECT(0x2fbd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x33, gbc.readMem(0x9fda));
        EXPECT(0x1c, gbc.readMem(0x9fdb));
        // CC 018A
        gbc.setState(0xe973, 0xcf35, 0xb3a0, 0xb5d0, 0x6220, 0x6bb1, 0x1, 0x1);
        gbc.writeMem(0xcf33, { 0x0, 0x0 });
        gbc.writeMem(0xe973, { 0xcc, 0x63, 0xac });
        gbc.step();
        EXPECT(0xb3, gbc.a());
        EXPECT(0xb5, gbc.b());
        EXPECT(0xd0, gbc.c());
        EXPECT(0x62, gbc.d());
        EXPECT(0x20, gbc.e());
        EXPECT(0x6b, gbc.h());
        EXPECT(0xb1, gbc.l());
        EXPECT(0xcf33, gbc.sp());
        EXPECT(0xac63, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x76, gbc.readMem(0xcf33));
        EXPECT(0xe9, gbc.readMem(0xcf34));
        EXPECT(0xcc, gbc.readMem(0xe973));
        EXPECT(0x63, gbc.readMem(0xe974));
        EXPECT(0xac, gbc.readMem(0xe975));
        // CC 018C
        gbc.setState(0x4e5d, 0xf500, 0x2650, 0x7b7c, 0x19c5, 0x57a4, 0x0, 0x0);
        gbc.writeMem(0x4e5d, { 0xcc, 0x46, 0xed });
        gbc.step();
        EXPECT(0x26, gbc.a());
        EXPECT(0x7b, gbc.b());
        EXPECT(0x7c, gbc.c());
        EXPECT(0x19, gbc.d());
        EXPECT(0xc5, gbc.e());
        EXPECT(0x57, gbc.h());
        EXPECT(0xa4, gbc.l());
        EXPECT(0xf500, gbc.sp());
        EXPECT(0x4e60, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 018D
        gbc.setState(0x24cf, 0x2dcf, 0xed10, 0xcc9c, 0xdd34, 0xa6d, 0x0, 0x1);
        gbc.writeMem(0x24cf, { 0xcc, 0xee, 0x67 });
        gbc.step();
        EXPECT(0xed, gbc.a());
        EXPECT(0xcc, gbc.b());
        EXPECT(0x9c, gbc.c());
        EXPECT(0xdd, gbc.d());
        EXPECT(0x34, gbc.e());
        EXPECT(0xa, gbc.h());
        EXPECT(0x6d, gbc.l());
        EXPECT(0x2dcf, gbc.sp());
        EXPECT(0x24d2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 018E
        gbc.setState(0xefd5, 0xd4de, 0xf580, 0xd943, 0x551c, 0x12e4, 0x0, 0x1);
        gbc.writeMem(0xd4dc, { 0x0, 0x0 });
        gbc.writeMem(0xefd5, { 0xcc, 0xef, 0x1e });
        gbc.step();
        EXPECT(0xf5, gbc.a());
        EXPECT(0xd9, gbc.b());
        EXPECT(0x43, gbc.c());
        EXPECT(0x55, gbc.d());
        EXPECT(0x1c, gbc.e());
        EXPECT(0x12, gbc.h());
        EXPECT(0xe4, gbc.l());
        EXPECT(0xd4dc, gbc.sp());
        EXPECT(0x1eef, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xd8, gbc.readMem(0xd4dc));
        EXPECT(0xef, gbc.readMem(0xd4dd));
        EXPECT(0xcc, gbc.readMem(0xefd5));
        EXPECT(0xef, gbc.readMem(0xefd6));
        EXPECT(0x1e, gbc.readMem(0xefd7));
        // CC 0190
        gbc.setState(0xb293, 0xf1e1, 0x46b0, 0x8742, 0xdc9b, 0xfc1, 0x1, 0x0);
        gbc.writeMem(0xb293, { 0xcc, 0x93, 0x40 });
        gbc.writeMem(0xf1df, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x46, gbc.a());
        EXPECT(0x87, gbc.b());
        EXPECT(0x42, gbc.c());
        EXPECT(0xdc, gbc.d());
        EXPECT(0x9b, gbc.e());
        EXPECT(0xf, gbc.h());
        EXPECT(0xc1, gbc.l());
        EXPECT(0xf1df, gbc.sp());
        EXPECT(0x4093, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xb293));
        EXPECT(0x93, gbc.readMem(0xb294));
        EXPECT(0x40, gbc.readMem(0xb295));
        EXPECT(0x96, gbc.readMem(0xf1df));
        EXPECT(0xb2, gbc.readMem(0xf1e0));
        // CC 0193
        gbc.setState(0x8a88, 0xd6ed, 0xa8e0, 0x86e2, 0x6f9d, 0x6ba6, 0x1, 0x1);
        gbc.writeMem(0x8a88, { 0xcc, 0xbe, 0x8f });
        gbc.writeMem(0xd6eb, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xa8, gbc.a());
        EXPECT(0x86, gbc.b());
        EXPECT(0xe2, gbc.c());
        EXPECT(0x6f, gbc.d());
        EXPECT(0x9d, gbc.e());
        EXPECT(0x6b, gbc.h());
        EXPECT(0xa6, gbc.l());
        EXPECT(0xd6eb, gbc.sp());
        EXPECT(0x8fbe, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0x8a88));
        EXPECT(0xbe, gbc.readMem(0x8a89));
        EXPECT(0x8f, gbc.readMem(0x8a8a));
        EXPECT(0x8b, gbc.readMem(0xd6eb));
        EXPECT(0x8a, gbc.readMem(0xd6ec));
        // CC 0194
        gbc.setState(0x2469, 0xa820, 0xa50, 0x9ead, 0xfa59, 0xe514, 0x0, 0x0);
        gbc.writeMem(0x2469, { 0xcc, 0x65, 0x16 });
        gbc.step();
        EXPECT(0xa, gbc.a());
        EXPECT(0x9e, gbc.b());
        EXPECT(0xad, gbc.c());
        EXPECT(0xfa, gbc.d());
        EXPECT(0x59, gbc.e());
        EXPECT(0xe5, gbc.h());
        EXPECT(0x14, gbc.l());
        EXPECT(0xa820, gbc.sp());
        EXPECT(0x246c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 0195
        gbc.setState(0x8cf7, 0xc8a0, 0xe10, 0x1a7e, 0x9879, 0x3307, 0x0, 0x0);
        gbc.writeMem(0x8cf7, { 0xcc, 0x54, 0x84 });
        gbc.step();
        EXPECT(0xe, gbc.a());
        EXPECT(0x1a, gbc.b());
        EXPECT(0x7e, gbc.c());
        EXPECT(0x98, gbc.d());
        EXPECT(0x79, gbc.e());
        EXPECT(0x33, gbc.h());
        EXPECT(0x7, gbc.l());
        EXPECT(0xc8a0, gbc.sp());
        EXPECT(0x8cfa, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0x8cf7));
        EXPECT(0x54, gbc.readMem(0x8cf8));
        EXPECT(0x84, gbc.readMem(0x8cf9));
        // CC 0196
        gbc.setState(0x869, 0x2e5a, 0x1710, 0xa157, 0xa992, 0x12fb, 0x1, 0x0);
        gbc.writeMem(0x869, { 0xcc, 0x7, 0xfd });
        gbc.step();
        EXPECT(0x17, gbc.a());
        EXPECT(0xa1, gbc.b());
        EXPECT(0x57, gbc.c());
        EXPECT(0xa9, gbc.d());
        EXPECT(0x92, gbc.e());
        EXPECT(0x12, gbc.h());
        EXPECT(0xfb, gbc.l());
        EXPECT(0x2e5a, gbc.sp());
        EXPECT(0x86c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 0197
        gbc.setState(0xb59c, 0x1845, 0x3a50, 0x80d, 0xc09a, 0xe7c2, 0x1, 0x1);
        gbc.writeMem(0xb59c, { 0xcc, 0xbd, 0xd4 });
        gbc.step();
        EXPECT(0x3a, gbc.a());
        EXPECT(0x8, gbc.b());
        EXPECT(0xd, gbc.c());
        EXPECT(0xc0, gbc.d());
        EXPECT(0x9a, gbc.e());
        EXPECT(0xe7, gbc.h());
        EXPECT(0xc2, gbc.l());
        EXPECT(0x1845, gbc.sp());
        EXPECT(0xb59f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xb59c));
        EXPECT(0xbd, gbc.readMem(0xb59d));
        EXPECT(0xd4, gbc.readMem(0xb59e));
        // CC 0198
        gbc.setState(0x860f, 0x32fa, 0x1340, 0x800e, 0xc8c8, 0x437, 0x0, 0x0);
        gbc.writeMem(0x860f, { 0xcc, 0x95, 0xe1 });
        gbc.step();
        EXPECT(0x13, gbc.a());
        EXPECT(0x80, gbc.b());
        EXPECT(0xe, gbc.c());
        EXPECT(0xc8, gbc.d());
        EXPECT(0xc8, gbc.e());
        EXPECT(0x4, gbc.h());
        EXPECT(0x37, gbc.l());
        EXPECT(0x32fa, gbc.sp());
        EXPECT(0x8612, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0x860f));
        EXPECT(0x95, gbc.readMem(0x8610));
        EXPECT(0xe1, gbc.readMem(0x8611));
        // CC 0199
        gbc.setState(0xbe70, 0xe070, 0x7710, 0x7986, 0xd32e, 0x1971, 0x0, 0x1);
        gbc.writeMem(0xbe70, { 0xcc, 0x2, 0xea });
        gbc.step();
        EXPECT(0x77, gbc.a());
        EXPECT(0x79, gbc.b());
        EXPECT(0x86, gbc.c());
        EXPECT(0xd3, gbc.d());
        EXPECT(0x2e, gbc.e());
        EXPECT(0x19, gbc.h());
        EXPECT(0x71, gbc.l());
        EXPECT(0xe070, gbc.sp());
        EXPECT(0xbe73, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xbe70));
        EXPECT(0x2, gbc.readMem(0xbe71));
        EXPECT(0xea, gbc.readMem(0xbe72));
        // CC 019A
        gbc.setState(0x3a61, 0x171, 0x7120, 0x48de, 0x14, 0x62b7, 0x0, 0x0);
        gbc.writeMem(0x3a61, { 0xcc, 0x56, 0xdd });
        gbc.step();
        EXPECT(0x71, gbc.a());
        EXPECT(0x48, gbc.b());
        EXPECT(0xde, gbc.c());
        EXPECT(0x0, gbc.d());
        EXPECT(0x14, gbc.e());
        EXPECT(0x62, gbc.h());
        EXPECT(0xb7, gbc.l());
        EXPECT(0x171, gbc.sp());
        EXPECT(0x3a64, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 019B
        gbc.setState(0x249e, 0xe4b, 0x9a70, 0x8814, 0xd533, 0xd607, 0x1, 0x0);
        gbc.writeMem(0x249e, { 0xcc, 0xae, 0xed });
        gbc.step();
        EXPECT(0x9a, gbc.a());
        EXPECT(0x88, gbc.b());
        EXPECT(0x14, gbc.c());
        EXPECT(0xd5, gbc.d());
        EXPECT(0x33, gbc.e());
        EXPECT(0xd6, gbc.h());
        EXPECT(0x7, gbc.l());
        EXPECT(0xe4b, gbc.sp());
        EXPECT(0x24a1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 019C
        gbc.setState(0x5844, 0xd16b, 0x4630, 0x404d, 0x6c02, 0x8bd3, 0x0, 0x1);
        gbc.writeMem(0x5844, { 0xcc, 0x2b, 0xd2 });
        gbc.step();
        EXPECT(0x46, gbc.a());
        EXPECT(0x40, gbc.b());
        EXPECT(0x4d, gbc.c());
        EXPECT(0x6c, gbc.d());
        EXPECT(0x2, gbc.e());
        EXPECT(0x8b, gbc.h());
        EXPECT(0xd3, gbc.l());
        EXPECT(0xd16b, gbc.sp());
        EXPECT(0x5847, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 019F
        gbc.setState(0x57eb, 0xdf90, 0x8d00, 0x6817, 0x6ea7, 0x9a06, 0x0, 0x0);
        gbc.writeMem(0x57eb, { 0xcc, 0x83, 0x87 });
        gbc.step();
        EXPECT(0x8d, gbc.a());
        EXPECT(0x68, gbc.b());
        EXPECT(0x17, gbc.c());
        EXPECT(0x6e, gbc.d());
        EXPECT(0xa7, gbc.e());
        EXPECT(0x9a, gbc.h());
        EXPECT(0x6, gbc.l());
        EXPECT(0xdf90, gbc.sp());
        EXPECT(0x57ee, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 01A0
        gbc.setState(0x4f90, 0xb69b, 0x6070, 0x72f2, 0xbd35, 0x67af, 0x1, 0x0);
        gbc.writeMem(0x4f90, { 0xcc, 0xfb, 0xb0 });
        gbc.step();
        EXPECT(0x60, gbc.a());
        EXPECT(0x72, gbc.b());
        EXPECT(0xf2, gbc.c());
        EXPECT(0xbd, gbc.d());
        EXPECT(0x35, gbc.e());
        EXPECT(0x67, gbc.h());
        EXPECT(0xaf, gbc.l());
        EXPECT(0xb69b, gbc.sp());
        EXPECT(0x4f93, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 01A2
        gbc.setState(0x3b1f, 0xf572, 0x13b0, 0xb149, 0x9463, 0x8db5, 0x0, 0x1);
        gbc.writeMem(0x3b1f, { 0xcc, 0x36, 0xdc });
        gbc.writeMem(0xf570, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x13, gbc.a());
        EXPECT(0xb1, gbc.b());
        EXPECT(0x49, gbc.c());
        EXPECT(0x94, gbc.d());
        EXPECT(0x63, gbc.e());
        EXPECT(0x8d, gbc.h());
        EXPECT(0xb5, gbc.l());
        EXPECT(0xf570, gbc.sp());
        EXPECT(0xdc36, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x22, gbc.readMem(0xf570));
        EXPECT(0x3b, gbc.readMem(0xf571));
        // CC 01A3
        gbc.setState(0xc314, 0x3cad, 0x2870, 0x14dd, 0xe67c, 0xd051, 0x1, 0x1);
        gbc.writeMem(0xc314, { 0xcc, 0x52, 0x92 });
        gbc.step();
        EXPECT(0x28, gbc.a());
        EXPECT(0x14, gbc.b());
        EXPECT(0xdd, gbc.c());
        EXPECT(0xe6, gbc.d());
        EXPECT(0x7c, gbc.e());
        EXPECT(0xd0, gbc.h());
        EXPECT(0x51, gbc.l());
        EXPECT(0x3cad, gbc.sp());
        EXPECT(0xc317, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xc314));
        EXPECT(0x52, gbc.readMem(0xc315));
        EXPECT(0x92, gbc.readMem(0xc316));
        // CC 01A4
        gbc.setState(0x8883, 0xc784, 0x6ce0, 0x25b4, 0xc779, 0x33a5, 0x0, 0x0);
        gbc.writeMem(0x8883, { 0xcc, 0x57, 0x86 });
        gbc.writeMem(0xc782, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x6c, gbc.a());
        EXPECT(0x25, gbc.b());
        EXPECT(0xb4, gbc.c());
        EXPECT(0xc7, gbc.d());
        EXPECT(0x79, gbc.e());
        EXPECT(0x33, gbc.h());
        EXPECT(0xa5, gbc.l());
        EXPECT(0xc782, gbc.sp());
        EXPECT(0x8657, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0x8883));
        EXPECT(0x57, gbc.readMem(0x8884));
        EXPECT(0x86, gbc.readMem(0x8885));
        EXPECT(0x86, gbc.readMem(0xc782));
        EXPECT(0x88, gbc.readMem(0xc783));
        // CC 01A6
        gbc.setState(0x4881, 0xd711, 0x4a00, 0x4bb5, 0xbe2a, 0xd03e, 0x0, 0x1);
        gbc.writeMem(0x4881, { 0xcc, 0xa3, 0x7 });
        gbc.step();
        EXPECT(0x4a, gbc.a());
        EXPECT(0x4b, gbc.b());
        EXPECT(0xb5, gbc.c());
        EXPECT(0xbe, gbc.d());
        EXPECT(0x2a, gbc.e());
        EXPECT(0xd0, gbc.h());
        EXPECT(0x3e, gbc.l());
        EXPECT(0xd711, gbc.sp());
        EXPECT(0x4884, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 01A7
        gbc.setState(0x7412, 0xdca8, 0x96f0, 0x798c, 0x1544, 0xeffd, 0x0, 0x1);
        gbc.writeMem(0x7412, { 0xcc, 0xdc, 0xc2 });
        gbc.writeMem(0xdca6, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x96, gbc.a());
        EXPECT(0x79, gbc.b());
        EXPECT(0x8c, gbc.c());
        EXPECT(0x15, gbc.d());
        EXPECT(0x44, gbc.e());
        EXPECT(0xef, gbc.h());
        EXPECT(0xfd, gbc.l());
        EXPECT(0xdca6, gbc.sp());
        EXPECT(0xc2dc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x15, gbc.readMem(0xdca6));
        EXPECT(0x74, gbc.readMem(0xdca7));
        // CC 01A8
        gbc.setState(0x4a47, 0xbf95, 0xc80, 0xfc54, 0xa3a1, 0xd92, 0x1, 0x0);
        gbc.writeMem(0x4a47, { 0xcc, 0x3b, 0x3d });
        gbc.writeMem(0xbf93, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xc, gbc.a());
        EXPECT(0xfc, gbc.b());
        EXPECT(0x54, gbc.c());
        EXPECT(0xa3, gbc.d());
        EXPECT(0xa1, gbc.e());
        EXPECT(0xd, gbc.h());
        EXPECT(0x92, gbc.l());
        EXPECT(0xbf93, gbc.sp());
        EXPECT(0x3d3b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x4a, gbc.readMem(0xbf93));
        EXPECT(0x4a, gbc.readMem(0xbf94));
        // CC 01A9
        gbc.setState(0x72a4, 0x4d76, 0xa50, 0xd489, 0x13fc, 0x6c61, 0x0, 0x1);
        gbc.writeMem(0x72a4, { 0xcc, 0x7d, 0x3f });
        gbc.step();
        EXPECT(0xa, gbc.a());
        EXPECT(0xd4, gbc.b());
        EXPECT(0x89, gbc.c());
        EXPECT(0x13, gbc.d());
        EXPECT(0xfc, gbc.e());
        EXPECT(0x6c, gbc.h());
        EXPECT(0x61, gbc.l());
        EXPECT(0x4d76, gbc.sp());
        EXPECT(0x72a7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 01AA
        gbc.setState(0x9717, 0xd92f, 0xe3e0, 0xa4d7, 0xef50, 0xb70, 0x1, 0x1);
        gbc.writeMem(0x9717, { 0xcc, 0x8e, 0x85 });
        gbc.writeMem(0xd92d, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xe3, gbc.a());
        EXPECT(0xa4, gbc.b());
        EXPECT(0xd7, gbc.c());
        EXPECT(0xef, gbc.d());
        EXPECT(0x50, gbc.e());
        EXPECT(0xb, gbc.h());
        EXPECT(0x70, gbc.l());
        EXPECT(0xd92d, gbc.sp());
        EXPECT(0x858e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0x9717));
        EXPECT(0x8e, gbc.readMem(0x9718));
        EXPECT(0x85, gbc.readMem(0x9719));
        EXPECT(0x1a, gbc.readMem(0xd92d));
        EXPECT(0x97, gbc.readMem(0xd92e));
        // CC 01AD
        gbc.setState(0xa4e4, 0xed24, 0xb5a0, 0xe7cb, 0xdcb7, 0x116e, 0x1, 0x1);
        gbc.writeMem(0xa4e4, { 0xcc, 0xe0, 0xb1 });
        gbc.writeMem(0xed22, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xb5, gbc.a());
        EXPECT(0xe7, gbc.b());
        EXPECT(0xcb, gbc.c());
        EXPECT(0xdc, gbc.d());
        EXPECT(0xb7, gbc.e());
        EXPECT(0x11, gbc.h());
        EXPECT(0x6e, gbc.l());
        EXPECT(0xed22, gbc.sp());
        EXPECT(0xb1e0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xa4e4));
        EXPECT(0xe0, gbc.readMem(0xa4e5));
        EXPECT(0xb1, gbc.readMem(0xa4e6));
        EXPECT(0xe7, gbc.readMem(0xed22));
        EXPECT(0xa4, gbc.readMem(0xed23));
        // CC 01AE
        gbc.setState(0x47c0, 0x4a64, 0x8d40, 0xc443, 0x4c7f, 0x780b, 0x0, 0x0);
        gbc.writeMem(0x47c0, { 0xcc, 0xbd, 0x70 });
        gbc.step();
        EXPECT(0x8d, gbc.a());
        EXPECT(0xc4, gbc.b());
        EXPECT(0x43, gbc.c());
        EXPECT(0x4c, gbc.d());
        EXPECT(0x7f, gbc.e());
        EXPECT(0x78, gbc.h());
        EXPECT(0xb, gbc.l());
        EXPECT(0x4a64, gbc.sp());
        EXPECT(0x47c3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 01AF
        gbc.setState(0x4747, 0x6ef1, 0x4000, 0xee44, 0x890a, 0x9675, 0x0, 0x1);
        gbc.writeMem(0x4747, { 0xcc, 0x1f, 0x12 });
        gbc.step();
        EXPECT(0x40, gbc.a());
        EXPECT(0xee, gbc.b());
        EXPECT(0x44, gbc.c());
        EXPECT(0x89, gbc.d());
        EXPECT(0xa, gbc.e());
        EXPECT(0x96, gbc.h());
        EXPECT(0x75, gbc.l());
        EXPECT(0x6ef1, gbc.sp());
        EXPECT(0x474a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 01B1
        gbc.setState(0x3e97, 0xf677, 0x6c10, 0x342f, 0x28a2, 0xebb1, 0x1, 0x1);
        gbc.writeMem(0x3e97, { 0xcc, 0xcb, 0xd6 });
        gbc.step();
        EXPECT(0x6c, gbc.a());
        EXPECT(0x34, gbc.b());
        EXPECT(0x2f, gbc.c());
        EXPECT(0x28, gbc.d());
        EXPECT(0xa2, gbc.e());
        EXPECT(0xeb, gbc.h());
        EXPECT(0xb1, gbc.l());
        EXPECT(0xf677, gbc.sp());
        EXPECT(0x3e9a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 01B2
        gbc.setState(0x7b92, 0xcc45, 0x4960, 0x5c16, 0xd4ef, 0x3c6e, 0x0, 0x0);
        gbc.writeMem(0x7b92, { 0xcc, 0xee, 0x75 });
        gbc.step();
        EXPECT(0x49, gbc.a());
        EXPECT(0x5c, gbc.b());
        EXPECT(0x16, gbc.c());
        EXPECT(0xd4, gbc.d());
        EXPECT(0xef, gbc.e());
        EXPECT(0x3c, gbc.h());
        EXPECT(0x6e, gbc.l());
        EXPECT(0xcc45, gbc.sp());
        EXPECT(0x7b95, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 01B3
        gbc.setState(0xd96b, 0x8f70, 0x4a80, 0x33a3, 0xd1b9, 0x5a58, 0x0, 0x1);
        gbc.writeMem(0x8f6e, { 0x0, 0x0 });
        gbc.writeMem(0xd96b, { 0xcc, 0xb4, 0xbf });
        gbc.step();
        EXPECT(0x4a, gbc.a());
        EXPECT(0x33, gbc.b());
        EXPECT(0xa3, gbc.c());
        EXPECT(0xd1, gbc.d());
        EXPECT(0xb9, gbc.e());
        EXPECT(0x5a, gbc.h());
        EXPECT(0x58, gbc.l());
        EXPECT(0x8f6e, gbc.sp());
        EXPECT(0xbfb4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x6e, gbc.readMem(0x8f6e));
        EXPECT(0xd9, gbc.readMem(0x8f6f));
        EXPECT(0xcc, gbc.readMem(0xd96b));
        EXPECT(0xb4, gbc.readMem(0xd96c));
        EXPECT(0xbf, gbc.readMem(0xd96d));
        // CC 01B4
        gbc.setState(0xcb9a, 0x9616, 0xdd60, 0xa910, 0xadfa, 0xead2, 0x0, 0x1);
        gbc.writeMem(0xcb9a, { 0xcc, 0x54, 0x46 });
        gbc.step();
        EXPECT(0xdd, gbc.a());
        EXPECT(0xa9, gbc.b());
        EXPECT(0x10, gbc.c());
        EXPECT(0xad, gbc.d());
        EXPECT(0xfa, gbc.e());
        EXPECT(0xea, gbc.h());
        EXPECT(0xd2, gbc.l());
        EXPECT(0x9616, gbc.sp());
        EXPECT(0xcb9d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xcb9a));
        EXPECT(0x54, gbc.readMem(0xcb9b));
        EXPECT(0x46, gbc.readMem(0xcb9c));
        // CC 01B7
        gbc.setState(0x44e1, 0xccd5, 0xb0f0, 0x6801, 0x52ec, 0x4b66, 0x0, 0x1);
        gbc.writeMem(0x44e1, { 0xcc, 0xcb, 0x8c });
        gbc.writeMem(0xccd3, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xb0, gbc.a());
        EXPECT(0x68, gbc.b());
        EXPECT(0x1, gbc.c());
        EXPECT(0x52, gbc.d());
        EXPECT(0xec, gbc.e());
        EXPECT(0x4b, gbc.h());
        EXPECT(0x66, gbc.l());
        EXPECT(0xccd3, gbc.sp());
        EXPECT(0x8ccb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xe4, gbc.readMem(0xccd3));
        EXPECT(0x44, gbc.readMem(0xccd4));
        // CC 01BA
        gbc.setState(0x4877, 0xaf03, 0xc730, 0xa221, 0x1a77, 0xcc9a, 0x1, 0x1);
        gbc.writeMem(0x4877, { 0xcc, 0xf4, 0xa1 });
        gbc.step();
        EXPECT(0xc7, gbc.a());
        EXPECT(0xa2, gbc.b());
        EXPECT(0x21, gbc.c());
        EXPECT(0x1a, gbc.d());
        EXPECT(0x77, gbc.e());
        EXPECT(0xcc, gbc.h());
        EXPECT(0x9a, gbc.l());
        EXPECT(0xaf03, gbc.sp());
        EXPECT(0x487a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 01BB
        gbc.setState(0x134f, 0xe5ce, 0x5ea0, 0x98a8, 0xde29, 0x4033, 0x1, 0x0);
        gbc.writeMem(0x134f, { 0xcc, 0xc6, 0x57 });
        gbc.writeMem(0xe5cc, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x5e, gbc.a());
        EXPECT(0x98, gbc.b());
        EXPECT(0xa8, gbc.c());
        EXPECT(0xde, gbc.d());
        EXPECT(0x29, gbc.e());
        EXPECT(0x40, gbc.h());
        EXPECT(0x33, gbc.l());
        EXPECT(0xe5cc, gbc.sp());
        EXPECT(0x57c6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x52, gbc.readMem(0xe5cc));
        EXPECT(0x13, gbc.readMem(0xe5cd));
        // CC 01BC
        gbc.setState(0x5a73, 0xca75, 0xe510, 0x3329, 0x1609, 0x9c3a, 0x1, 0x1);
        gbc.writeMem(0x5a73, { 0xcc, 0xd7, 0xff });
        gbc.step();
        EXPECT(0xe5, gbc.a());
        EXPECT(0x33, gbc.b());
        EXPECT(0x29, gbc.c());
        EXPECT(0x16, gbc.d());
        EXPECT(0x9, gbc.e());
        EXPECT(0x9c, gbc.h());
        EXPECT(0x3a, gbc.l());
        EXPECT(0xca75, gbc.sp());
        EXPECT(0x5a76, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 01C1
        gbc.setState(0x6653, 0x532c, 0xe350, 0xa4ae, 0x550, 0xe917, 0x0, 0x1);
        gbc.writeMem(0x6653, { 0xcc, 0x73, 0xef });
        gbc.step();
        EXPECT(0xe3, gbc.a());
        EXPECT(0xa4, gbc.b());
        EXPECT(0xae, gbc.c());
        EXPECT(0x5, gbc.d());
        EXPECT(0x50, gbc.e());
        EXPECT(0xe9, gbc.h());
        EXPECT(0x17, gbc.l());
        EXPECT(0x532c, gbc.sp());
        EXPECT(0x6656, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 01C3
        gbc.setState(0x589c, 0x2123, 0x9720, 0xecef, 0xa2fc, 0xec84, 0x0, 0x1);
        gbc.writeMem(0x589c, { 0xcc, 0x88, 0xca });
        gbc.step();
        EXPECT(0x97, gbc.a());
        EXPECT(0xec, gbc.b());
        EXPECT(0xef, gbc.c());
        EXPECT(0xa2, gbc.d());
        EXPECT(0xfc, gbc.e());
        EXPECT(0xec, gbc.h());
        EXPECT(0x84, gbc.l());
        EXPECT(0x2123, gbc.sp());
        EXPECT(0x589f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 01C4
        gbc.setState(0x7cc1, 0xe6fe, 0x1400, 0xd099, 0x9ea4, 0x6b7b, 0x0, 0x1);
        gbc.writeMem(0x7cc1, { 0xcc, 0xaa, 0xe4 });
        gbc.step();
        EXPECT(0x14, gbc.a());
        EXPECT(0xd0, gbc.b());
        EXPECT(0x99, gbc.c());
        EXPECT(0x9e, gbc.d());
        EXPECT(0xa4, gbc.e());
        EXPECT(0x6b, gbc.h());
        EXPECT(0x7b, gbc.l());
        EXPECT(0xe6fe, gbc.sp());
        EXPECT(0x7cc4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 01C6
        gbc.setState(0x806a, 0xe220, 0xca10, 0x6c3c, 0xd080, 0xfcc7, 0x0, 0x1);
        gbc.writeMem(0x806a, { 0xcc, 0xba, 0x1b });
        gbc.step();
        EXPECT(0xca, gbc.a());
        EXPECT(0x6c, gbc.b());
        EXPECT(0x3c, gbc.c());
        EXPECT(0xd0, gbc.d());
        EXPECT(0x80, gbc.e());
        EXPECT(0xfc, gbc.h());
        EXPECT(0xc7, gbc.l());
        EXPECT(0xe220, gbc.sp());
        EXPECT(0x806d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0x806a));
        EXPECT(0xba, gbc.readMem(0x806b));
        EXPECT(0x1b, gbc.readMem(0x806c));
        // CC 01C7
        gbc.setState(0xd86b, 0xf65b, 0x5f50, 0x9e95, 0xed6d, 0x473f, 0x0, 0x1);
        gbc.writeMem(0xd86b, { 0xcc, 0x63, 0x52 });
        gbc.step();
        EXPECT(0x5f, gbc.a());
        EXPECT(0x9e, gbc.b());
        EXPECT(0x95, gbc.c());
        EXPECT(0xed, gbc.d());
        EXPECT(0x6d, gbc.e());
        EXPECT(0x47, gbc.h());
        EXPECT(0x3f, gbc.l());
        EXPECT(0xf65b, gbc.sp());
        EXPECT(0xd86e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xd86b));
        EXPECT(0x63, gbc.readMem(0xd86c));
        EXPECT(0x52, gbc.readMem(0xd86d));
        // CC 01C8
        gbc.setState(0xc071, 0xbe37, 0x3fc0, 0xfded, 0xf60b, 0xd1b8, 0x0, 0x0);
        gbc.writeMem(0xbe35, { 0x0, 0x0 });
        gbc.writeMem(0xc071, { 0xcc, 0xbb, 0xee });
        gbc.step();
        EXPECT(0x3f, gbc.a());
        EXPECT(0xfd, gbc.b());
        EXPECT(0xed, gbc.c());
        EXPECT(0xf6, gbc.d());
        EXPECT(0xb, gbc.e());
        EXPECT(0xd1, gbc.h());
        EXPECT(0xb8, gbc.l());
        EXPECT(0xbe35, gbc.sp());
        EXPECT(0xeebb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x74, gbc.readMem(0xbe35));
        EXPECT(0xc0, gbc.readMem(0xbe36));
        EXPECT(0xcc, gbc.readMem(0xc071));
        EXPECT(0xbb, gbc.readMem(0xc072));
        EXPECT(0xee, gbc.readMem(0xc073));
        // CC 01C9
        gbc.setState(0x8883, 0xc006, 0x8c00, 0x47f8, 0xf742, 0x31a5, 0x0, 0x0);
        gbc.writeMem(0x8883, { 0xcc, 0x57, 0x86 });
        gbc.step();
        EXPECT(0x8c, gbc.a());
        EXPECT(0x47, gbc.b());
        EXPECT(0xf8, gbc.c());
        EXPECT(0xf7, gbc.d());
        EXPECT(0x42, gbc.e());
        EXPECT(0x31, gbc.h());
        EXPECT(0xa5, gbc.l());
        EXPECT(0xc006, gbc.sp());
        EXPECT(0x8886, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0x8883));
        EXPECT(0x57, gbc.readMem(0x8884));
        EXPECT(0x86, gbc.readMem(0x8885));
        // CC 01CA
        gbc.setState(0xc48a, 0xd00f, 0xc320, 0xc084, 0xd33d, 0xff26, 0x1, 0x1);
        gbc.writeMem(0xc48a, { 0xcc, 0x25, 0x32 });
        gbc.step();
        EXPECT(0xc3, gbc.a());
        EXPECT(0xc0, gbc.b());
        EXPECT(0x84, gbc.c());
        EXPECT(0xd3, gbc.d());
        EXPECT(0x3d, gbc.e());
        EXPECT(0xff, gbc.h());
        EXPECT(0x26, gbc.l());
        EXPECT(0xd00f, gbc.sp());
        EXPECT(0xc48d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xc48a));
        EXPECT(0x25, gbc.readMem(0xc48b));
        EXPECT(0x32, gbc.readMem(0xc48c));
        // CC 01CC
        gbc.setState(0x1d, 0xb16d, 0xda80, 0xf464, 0x68f0, 0x5c98, 0x1, 0x0);
        gbc.writeMem(0x1d, { 0xcc, 0x86, 0x51 });
        gbc.writeMem(0xb16b, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xda, gbc.a());
        EXPECT(0xf4, gbc.b());
        EXPECT(0x64, gbc.c());
        EXPECT(0x68, gbc.d());
        EXPECT(0xf0, gbc.e());
        EXPECT(0x5c, gbc.h());
        EXPECT(0x98, gbc.l());
        EXPECT(0xb16b, gbc.sp());
        EXPECT(0x5186, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x20, gbc.readMem(0xb16b));
        EXPECT(0x0, gbc.readMem(0xb16c));
        // CC 01CD
        gbc.setState(0xad64, 0x91fc, 0x4150, 0x3225, 0xb9fd, 0xf83f, 0x0, 0x1);
        gbc.writeMem(0xad64, { 0xcc, 0xb4, 0x25 });
        gbc.step();
        EXPECT(0x41, gbc.a());
        EXPECT(0x32, gbc.b());
        EXPECT(0x25, gbc.c());
        EXPECT(0xb9, gbc.d());
        EXPECT(0xfd, gbc.e());
        EXPECT(0xf8, gbc.h());
        EXPECT(0x3f, gbc.l());
        EXPECT(0x91fc, gbc.sp());
        EXPECT(0xad67, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xad64));
        EXPECT(0xb4, gbc.readMem(0xad65));
        EXPECT(0x25, gbc.readMem(0xad66));
        // CC 01CF
        gbc.setState(0x3697, 0x556c, 0xb570, 0x5060, 0xa561, 0x94f0, 0x1, 0x0);
        gbc.writeMem(0x3697, { 0xcc, 0xa, 0xdd });
        gbc.step();
        EXPECT(0xb5, gbc.a());
        EXPECT(0x50, gbc.b());
        EXPECT(0x60, gbc.c());
        EXPECT(0xa5, gbc.d());
        EXPECT(0x61, gbc.e());
        EXPECT(0x94, gbc.h());
        EXPECT(0xf0, gbc.l());
        EXPECT(0x556c, gbc.sp());
        EXPECT(0x369a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 01D0
        gbc.setState(0x31c6, 0xf8c5, 0xd5c0, 0x34b6, 0x20be, 0x4c75, 0x0, 0x0);
        gbc.writeMem(0x31c6, { 0xcc, 0x5a, 0xc6 });
        gbc.writeMem(0xf8c3, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xd5, gbc.a());
        EXPECT(0x34, gbc.b());
        EXPECT(0xb6, gbc.c());
        EXPECT(0x20, gbc.d());
        EXPECT(0xbe, gbc.e());
        EXPECT(0x4c, gbc.h());
        EXPECT(0x75, gbc.l());
        EXPECT(0xf8c3, gbc.sp());
        EXPECT(0xc65a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xc9, gbc.readMem(0xf8c3));
        EXPECT(0x31, gbc.readMem(0xf8c4));
        // CC 01D1
        gbc.setState(0x4c9, 0xb99d, 0x85f0, 0x6d7c, 0x2dc2, 0xc871, 0x0, 0x1);
        gbc.writeMem(0x4c9, { 0xcc, 0x8c, 0xad });
        gbc.writeMem(0xb99b, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x85, gbc.a());
        EXPECT(0x6d, gbc.b());
        EXPECT(0x7c, gbc.c());
        EXPECT(0x2d, gbc.d());
        EXPECT(0xc2, gbc.e());
        EXPECT(0xc8, gbc.h());
        EXPECT(0x71, gbc.l());
        EXPECT(0xb99b, gbc.sp());
        EXPECT(0xad8c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xb99b));
        EXPECT(0x4, gbc.readMem(0xb99c));
        // CC 01D2
        gbc.setState(0x1c3c, 0xb899, 0x3840, 0xcdc1, 0x7d6b, 0x76e6, 0x0, 0x0);
        gbc.writeMem(0x1c3c, { 0xcc, 0x29, 0x6e });
        gbc.step();
        EXPECT(0x38, gbc.a());
        EXPECT(0xcd, gbc.b());
        EXPECT(0xc1, gbc.c());
        EXPECT(0x7d, gbc.d());
        EXPECT(0x6b, gbc.e());
        EXPECT(0x76, gbc.h());
        EXPECT(0xe6, gbc.l());
        EXPECT(0xb899, gbc.sp());
        EXPECT(0x1c3f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 01D4
        gbc.setState(0xde57, 0x5747, 0xfa00, 0xc1ac, 0x1f5c, 0x3bfe, 0x1, 0x1);
        gbc.writeMem(0xde57, { 0xcc, 0x6f, 0x43 });
        gbc.step();
        EXPECT(0xfa, gbc.a());
        EXPECT(0xc1, gbc.b());
        EXPECT(0xac, gbc.c());
        EXPECT(0x1f, gbc.d());
        EXPECT(0x5c, gbc.e());
        EXPECT(0x3b, gbc.h());
        EXPECT(0xfe, gbc.l());
        EXPECT(0x5747, gbc.sp());
        EXPECT(0xde5a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xde57));
        EXPECT(0x6f, gbc.readMem(0xde58));
        EXPECT(0x43, gbc.readMem(0xde59));
        // CC 01D6
        gbc.setState(0xa86f, 0x1f36, 0xc570, 0x8fb6, 0x6b4, 0x27a0, 0x1, 0x1);
        gbc.writeMem(0xa86f, { 0xcc, 0x9, 0x19 });
        gbc.step();
        EXPECT(0xc5, gbc.a());
        EXPECT(0x8f, gbc.b());
        EXPECT(0xb6, gbc.c());
        EXPECT(0x6, gbc.d());
        EXPECT(0xb4, gbc.e());
        EXPECT(0x27, gbc.h());
        EXPECT(0xa0, gbc.l());
        EXPECT(0x1f36, gbc.sp());
        EXPECT(0xa872, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xa86f));
        EXPECT(0x9, gbc.readMem(0xa870));
        EXPECT(0x19, gbc.readMem(0xa871));
        // CC 01D7
        gbc.setState(0x97ec, 0xe8f4, 0x5660, 0x2651, 0x84fd, 0xd4cd, 0x0, 0x0);
        gbc.writeMem(0x97ec, { 0xcc, 0xdc, 0xed });
        gbc.step();
        EXPECT(0x56, gbc.a());
        EXPECT(0x26, gbc.b());
        EXPECT(0x51, gbc.c());
        EXPECT(0x84, gbc.d());
        EXPECT(0xfd, gbc.e());
        EXPECT(0xd4, gbc.h());
        EXPECT(0xcd, gbc.l());
        EXPECT(0xe8f4, gbc.sp());
        EXPECT(0x97ef, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0x97ec));
        EXPECT(0xdc, gbc.readMem(0x97ed));
        EXPECT(0xed, gbc.readMem(0x97ee));
        // CC 01D8
        gbc.setState(0x3d15, 0x255c, 0x740, 0x8e47, 0xa937, 0x39e, 0x0, 0x0);
        gbc.writeMem(0x3d15, { 0xcc, 0x18, 0x5f });
        gbc.step();
        EXPECT(0x7, gbc.a());
        EXPECT(0x8e, gbc.b());
        EXPECT(0x47, gbc.c());
        EXPECT(0xa9, gbc.d());
        EXPECT(0x37, gbc.e());
        EXPECT(0x3, gbc.h());
        EXPECT(0x9e, gbc.l());
        EXPECT(0x255c, gbc.sp());
        EXPECT(0x3d18, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 01DA
        gbc.setState(0x1b1f, 0xa9fe, 0x3e0, 0xf64, 0x2419, 0x7bcc, 0x1, 0x0);
        gbc.writeMem(0x1b1f, { 0xcc, 0x21, 0x1b });
        gbc.writeMem(0xa9fc, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x3, gbc.a());
        EXPECT(0xf, gbc.b());
        EXPECT(0x64, gbc.c());
        EXPECT(0x24, gbc.d());
        EXPECT(0x19, gbc.e());
        EXPECT(0x7b, gbc.h());
        EXPECT(0xcc, gbc.l());
        EXPECT(0xa9fc, gbc.sp());
        EXPECT(0x1b21, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x22, gbc.readMem(0xa9fc));
        EXPECT(0x1b, gbc.readMem(0xa9fd));
        // CC 01DB
        gbc.setState(0xd244, 0xe949, 0xe180, 0x7e2d, 0x5ff2, 0x219, 0x1, 0x0);
        gbc.writeMem(0xd244, { 0xcc, 0x12, 0x73 });
        gbc.writeMem(0xe947, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xe1, gbc.a());
        EXPECT(0x7e, gbc.b());
        EXPECT(0x2d, gbc.c());
        EXPECT(0x5f, gbc.d());
        EXPECT(0xf2, gbc.e());
        EXPECT(0x2, gbc.h());
        EXPECT(0x19, gbc.l());
        EXPECT(0xe947, gbc.sp());
        EXPECT(0x7312, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xd244));
        EXPECT(0x12, gbc.readMem(0xd245));
        EXPECT(0x73, gbc.readMem(0xd246));
        EXPECT(0x47, gbc.readMem(0xe947));
        EXPECT(0xd2, gbc.readMem(0xe948));
        // CC 01DD
        gbc.setState(0x3cec, 0x21a1, 0x2b60, 0xbe14, 0xdde5, 0x204, 0x1, 0x1);
        gbc.writeMem(0x3cec, { 0xcc, 0xdd, 0xb2 });
        gbc.step();
        EXPECT(0x2b, gbc.a());
        EXPECT(0xbe, gbc.b());
        EXPECT(0x14, gbc.c());
        EXPECT(0xdd, gbc.d());
        EXPECT(0xe5, gbc.e());
        EXPECT(0x2, gbc.h());
        EXPECT(0x4, gbc.l());
        EXPECT(0x21a1, gbc.sp());
        EXPECT(0x3cef, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 01DE
        gbc.setState(0x4bc2, 0xdd4d, 0x4d20, 0xb666, 0xdf72, 0x2a02, 0x0, 0x0);
        gbc.writeMem(0x4bc2, { 0xcc, 0xa4, 0xe });
        gbc.step();
        EXPECT(0x4d, gbc.a());
        EXPECT(0xb6, gbc.b());
        EXPECT(0x66, gbc.c());
        EXPECT(0xdf, gbc.d());
        EXPECT(0x72, gbc.e());
        EXPECT(0x2a, gbc.h());
        EXPECT(0x2, gbc.l());
        EXPECT(0xdd4d, gbc.sp());
        EXPECT(0x4bc5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 01DF
        gbc.setState(0xcdfb, 0xe630, 0x2930, 0x91cf, 0x548d, 0x75e8, 0x1, 0x1);
        gbc.writeMem(0xcdfb, { 0xcc, 0x2f, 0x4c });
        gbc.step();
        EXPECT(0x29, gbc.a());
        EXPECT(0x91, gbc.b());
        EXPECT(0xcf, gbc.c());
        EXPECT(0x54, gbc.d());
        EXPECT(0x8d, gbc.e());
        EXPECT(0x75, gbc.h());
        EXPECT(0xe8, gbc.l());
        EXPECT(0xe630, gbc.sp());
        EXPECT(0xcdfe, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xcdfb));
        EXPECT(0x2f, gbc.readMem(0xcdfc));
        EXPECT(0x4c, gbc.readMem(0xcdfd));
        // CC 01E2
        gbc.setState(0x7c2b, 0xad52, 0x45e0, 0xd1dc, 0x1606, 0x86f0, 0x1, 0x0);
        gbc.writeMem(0x7c2b, { 0xcc, 0xfe, 0xb0 });
        gbc.writeMem(0xad50, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x45, gbc.a());
        EXPECT(0xd1, gbc.b());
        EXPECT(0xdc, gbc.c());
        EXPECT(0x16, gbc.d());
        EXPECT(0x6, gbc.e());
        EXPECT(0x86, gbc.h());
        EXPECT(0xf0, gbc.l());
        EXPECT(0xad50, gbc.sp());
        EXPECT(0xb0fe, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x2e, gbc.readMem(0xad50));
        EXPECT(0x7c, gbc.readMem(0xad51));
        // CC 01E3
        gbc.setState(0x8bef, 0xb89a, 0x7400, 0xea2d, 0x4fbc, 0x7e74, 0x0, 0x0);
        gbc.writeMem(0x8bef, { 0xcc, 0xa3, 0x2e });
        gbc.step();
        EXPECT(0x74, gbc.a());
        EXPECT(0xea, gbc.b());
        EXPECT(0x2d, gbc.c());
        EXPECT(0x4f, gbc.d());
        EXPECT(0xbc, gbc.e());
        EXPECT(0x7e, gbc.h());
        EXPECT(0x74, gbc.l());
        EXPECT(0xb89a, gbc.sp());
        EXPECT(0x8bf2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0x8bef));
        EXPECT(0xa3, gbc.readMem(0x8bf0));
        EXPECT(0x2e, gbc.readMem(0x8bf1));
        // CC 01E5
        gbc.setState(0xe8a2, 0xfe03, 0x2450, 0x4b20, 0xc481, 0xada5, 0x0, 0x1);
        gbc.writeMem(0xe8a2, { 0xcc, 0x61, 0x8c });
        gbc.step();
        EXPECT(0x24, gbc.a());
        EXPECT(0x4b, gbc.b());
        EXPECT(0x20, gbc.c());
        EXPECT(0xc4, gbc.d());
        EXPECT(0x81, gbc.e());
        EXPECT(0xad, gbc.h());
        EXPECT(0xa5, gbc.l());
        EXPECT(0xfe03, gbc.sp());
        EXPECT(0xe8a5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xe8a2));
        EXPECT(0x61, gbc.readMem(0xe8a3));
        EXPECT(0x8c, gbc.readMem(0xe8a4));
        // CC 01E6
        gbc.setState(0xbc03, 0xb39f, 0x4240, 0x7c73, 0x764b, 0x9560, 0x1, 0x0);
        gbc.writeMem(0xbc03, { 0xcc, 0x5c, 0xf8 });
        gbc.step();
        EXPECT(0x42, gbc.a());
        EXPECT(0x7c, gbc.b());
        EXPECT(0x73, gbc.c());
        EXPECT(0x76, gbc.d());
        EXPECT(0x4b, gbc.e());
        EXPECT(0x95, gbc.h());
        EXPECT(0x60, gbc.l());
        EXPECT(0xb39f, gbc.sp());
        EXPECT(0xbc06, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xbc03));
        EXPECT(0x5c, gbc.readMem(0xbc04));
        EXPECT(0xf8, gbc.readMem(0xbc05));
        // CC 01E7
        gbc.setState(0xbc21, 0xa746, 0xee20, 0xb786, 0x5912, 0x1b5a, 0x0, 0x0);
        gbc.writeMem(0xbc21, { 0xcc, 0x8d, 0x8c });
        gbc.step();
        EXPECT(0xee, gbc.a());
        EXPECT(0xb7, gbc.b());
        EXPECT(0x86, gbc.c());
        EXPECT(0x59, gbc.d());
        EXPECT(0x12, gbc.e());
        EXPECT(0x1b, gbc.h());
        EXPECT(0x5a, gbc.l());
        EXPECT(0xa746, gbc.sp());
        EXPECT(0xbc24, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xbc21));
        EXPECT(0x8d, gbc.readMem(0xbc22));
        EXPECT(0x8c, gbc.readMem(0xbc23));
        // CC 01E8
        gbc.setState(0x2277, 0xd8f0, 0x1190, 0x5441, 0x86c0, 0xf5ee, 0x0, 0x0);
        gbc.writeMem(0x2277, { 0xcc, 0x31, 0xba });
        gbc.writeMem(0xd8ee, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x11, gbc.a());
        EXPECT(0x54, gbc.b());
        EXPECT(0x41, gbc.c());
        EXPECT(0x86, gbc.d());
        EXPECT(0xc0, gbc.e());
        EXPECT(0xf5, gbc.h());
        EXPECT(0xee, gbc.l());
        EXPECT(0xd8ee, gbc.sp());
        EXPECT(0xba31, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x7a, gbc.readMem(0xd8ee));
        EXPECT(0x22, gbc.readMem(0xd8ef));
        // CC 01E9
        gbc.setState(0x15ba, 0x8abf, 0xd150, 0x3d31, 0xffa1, 0xdb2d, 0x1, 0x1);
        gbc.writeMem(0x15ba, { 0xcc, 0xf4, 0x40 });
        gbc.step();
        EXPECT(0xd1, gbc.a());
        EXPECT(0x3d, gbc.b());
        EXPECT(0x31, gbc.c());
        EXPECT(0xff, gbc.d());
        EXPECT(0xa1, gbc.e());
        EXPECT(0xdb, gbc.h());
        EXPECT(0x2d, gbc.l());
        EXPECT(0x8abf, gbc.sp());
        EXPECT(0x15bd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 01EA
        gbc.setState(0xe588, 0xe682, 0x4e90, 0xd314, 0x91a5, 0x153, 0x0, 0x1);
        gbc.writeMem(0xe588, { 0xcc, 0x60, 0x73 });
        gbc.writeMem(0xe680, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x4e, gbc.a());
        EXPECT(0xd3, gbc.b());
        EXPECT(0x14, gbc.c());
        EXPECT(0x91, gbc.d());
        EXPECT(0xa5, gbc.e());
        EXPECT(0x1, gbc.h());
        EXPECT(0x53, gbc.l());
        EXPECT(0xe680, gbc.sp());
        EXPECT(0x7360, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xe588));
        EXPECT(0x60, gbc.readMem(0xe589));
        EXPECT(0x73, gbc.readMem(0xe58a));
        EXPECT(0x8b, gbc.readMem(0xe680));
        EXPECT(0xe5, gbc.readMem(0xe681));
        // CC 01EB
        gbc.setState(0x76d3, 0xbfd4, 0x9db0, 0xb913, 0x9e91, 0x8ad0, 0x0, 0x1);
        gbc.writeMem(0x76d3, { 0xcc, 0x3, 0x8b });
        gbc.writeMem(0xbfd2, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x9d, gbc.a());
        EXPECT(0xb9, gbc.b());
        EXPECT(0x13, gbc.c());
        EXPECT(0x9e, gbc.d());
        EXPECT(0x91, gbc.e());
        EXPECT(0x8a, gbc.h());
        EXPECT(0xd0, gbc.l());
        EXPECT(0xbfd2, gbc.sp());
        EXPECT(0x8b03, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xd6, gbc.readMem(0xbfd2));
        EXPECT(0x76, gbc.readMem(0xbfd3));
        // CC 01EC
        gbc.setState(0xd96b, 0x402d, 0x7600, 0x73d7, 0xeafb, 0xf822, 0x1, 0x1);
        gbc.writeMem(0xd96b, { 0xcc, 0xb4, 0xbf });
        gbc.step();
        EXPECT(0x76, gbc.a());
        EXPECT(0x73, gbc.b());
        EXPECT(0xd7, gbc.c());
        EXPECT(0xea, gbc.d());
        EXPECT(0xfb, gbc.e());
        EXPECT(0xf8, gbc.h());
        EXPECT(0x22, gbc.l());
        EXPECT(0x402d, gbc.sp());
        EXPECT(0xd96e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xd96b));
        EXPECT(0xb4, gbc.readMem(0xd96c));
        EXPECT(0xbf, gbc.readMem(0xd96d));
        // CC 01ED
        gbc.setState(0x4911, 0xd7b5, 0x9350, 0x1a2, 0x7bfc, 0x1357, 0x0, 0x0);
        gbc.writeMem(0x4911, { 0xcc, 0xad, 0xe9 });
        gbc.step();
        EXPECT(0x93, gbc.a());
        EXPECT(0x1, gbc.b());
        EXPECT(0xa2, gbc.c());
        EXPECT(0x7b, gbc.d());
        EXPECT(0xfc, gbc.e());
        EXPECT(0x13, gbc.h());
        EXPECT(0x57, gbc.l());
        EXPECT(0xd7b5, gbc.sp());
        EXPECT(0x4914, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 01EE
        gbc.setState(0x6df8, 0x7af1, 0xda50, 0x104f, 0x3d68, 0x1c5a, 0x0, 0x1);
        gbc.writeMem(0x6df8, { 0xcc, 0x1c, 0x33 });
        gbc.step();
        EXPECT(0xda, gbc.a());
        EXPECT(0x10, gbc.b());
        EXPECT(0x4f, gbc.c());
        EXPECT(0x3d, gbc.d());
        EXPECT(0x68, gbc.e());
        EXPECT(0x1c, gbc.h());
        EXPECT(0x5a, gbc.l());
        EXPECT(0x7af1, gbc.sp());
        EXPECT(0x6dfb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 01F0
        gbc.setState(0xee4, 0xf066, 0x7180, 0xb555, 0x38e4, 0xbff7, 0x1, 0x0);
        gbc.writeMem(0xee4, { 0xcc, 0xf0, 0xa4 });
        gbc.writeMem(0xf064, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x71, gbc.a());
        EXPECT(0xb5, gbc.b());
        EXPECT(0x55, gbc.c());
        EXPECT(0x38, gbc.d());
        EXPECT(0xe4, gbc.e());
        EXPECT(0xbf, gbc.h());
        EXPECT(0xf7, gbc.l());
        EXPECT(0xf064, gbc.sp());
        EXPECT(0xa4f0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xe7, gbc.readMem(0xf064));
        EXPECT(0xe, gbc.readMem(0xf065));
        // CC 01F1
        gbc.setState(0xc611, 0xb6c0, 0x3200, 0x5350, 0xf411, 0xe91e, 0x0, 0x0);
        gbc.writeMem(0xc611, { 0xcc, 0x56, 0xfb });
        gbc.step();
        EXPECT(0x32, gbc.a());
        EXPECT(0x53, gbc.b());
        EXPECT(0x50, gbc.c());
        EXPECT(0xf4, gbc.d());
        EXPECT(0x11, gbc.e());
        EXPECT(0xe9, gbc.h());
        EXPECT(0x1e, gbc.l());
        EXPECT(0xb6c0, gbc.sp());
        EXPECT(0xc614, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xc611));
        EXPECT(0x56, gbc.readMem(0xc612));
        EXPECT(0xfb, gbc.readMem(0xc613));
        // CC 01F2
        gbc.setState(0x82a9, 0xd1f7, 0x51c0, 0xdccd, 0x9f43, 0x5f1f, 0x0, 0x0);
        gbc.writeMem(0x82a9, { 0xcc, 0x39, 0xb4 });
        gbc.writeMem(0xd1f5, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x51, gbc.a());
        EXPECT(0xdc, gbc.b());
        EXPECT(0xcd, gbc.c());
        EXPECT(0x9f, gbc.d());
        EXPECT(0x43, gbc.e());
        EXPECT(0x5f, gbc.h());
        EXPECT(0x1f, gbc.l());
        EXPECT(0xd1f5, gbc.sp());
        EXPECT(0xb439, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0x82a9));
        EXPECT(0x39, gbc.readMem(0x82aa));
        EXPECT(0xb4, gbc.readMem(0x82ab));
        EXPECT(0xac, gbc.readMem(0xd1f5));
        EXPECT(0x82, gbc.readMem(0xd1f6));
        // CC 01F3
        gbc.setState(0x588c, 0x83ff, 0x49f0, 0x75c5, 0x6eee, 0x4b6f, 0x0, 0x0);
        gbc.writeMem(0x588c, { 0xcc, 0x1e, 0x6c });
        gbc.writeMem(0x83fd, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x49, gbc.a());
        EXPECT(0x75, gbc.b());
        EXPECT(0xc5, gbc.c());
        EXPECT(0x6e, gbc.d());
        EXPECT(0xee, gbc.e());
        EXPECT(0x4b, gbc.h());
        EXPECT(0x6f, gbc.l());
        EXPECT(0x83fd, gbc.sp());
        EXPECT(0x6c1e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x8f, gbc.readMem(0x83fd));
        EXPECT(0x58, gbc.readMem(0x83fe));
        // CC 01F4
        gbc.setState(0x8472, 0x66d7, 0x7010, 0x8546, 0xf68a, 0x899a, 0x1, 0x0);
        gbc.writeMem(0x8472, { 0xcc, 0x5d, 0x5c });
        gbc.step();
        EXPECT(0x70, gbc.a());
        EXPECT(0x85, gbc.b());
        EXPECT(0x46, gbc.c());
        EXPECT(0xf6, gbc.d());
        EXPECT(0x8a, gbc.e());
        EXPECT(0x89, gbc.h());
        EXPECT(0x9a, gbc.l());
        EXPECT(0x66d7, gbc.sp());
        EXPECT(0x8475, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0x8472));
        EXPECT(0x5d, gbc.readMem(0x8473));
        EXPECT(0x5c, gbc.readMem(0x8474));
        // CC 01F5
        gbc.setState(0x7e96, 0x8297, 0xad60, 0x5355, 0x349f, 0xfcea, 0x1, 0x1);
        gbc.writeMem(0x7e96, { 0xcc, 0x31, 0x4d });
        gbc.step();
        EXPECT(0xad, gbc.a());
        EXPECT(0x53, gbc.b());
        EXPECT(0x55, gbc.c());
        EXPECT(0x34, gbc.d());
        EXPECT(0x9f, gbc.e());
        EXPECT(0xfc, gbc.h());
        EXPECT(0xea, gbc.l());
        EXPECT(0x8297, gbc.sp());
        EXPECT(0x7e99, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 01F6
        gbc.setState(0xa7d1, 0xb73f, 0x4c80, 0xaa0e, 0xe51b, 0x96cf, 0x1, 0x1);
        gbc.writeMem(0xa7d1, { 0xcc, 0x24, 0xea });
        gbc.writeMem(0xb73d, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x4c, gbc.a());
        EXPECT(0xaa, gbc.b());
        EXPECT(0xe, gbc.c());
        EXPECT(0xe5, gbc.d());
        EXPECT(0x1b, gbc.e());
        EXPECT(0x96, gbc.h());
        EXPECT(0xcf, gbc.l());
        EXPECT(0xb73d, gbc.sp());
        EXPECT(0xea24, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xa7d1));
        EXPECT(0x24, gbc.readMem(0xa7d2));
        EXPECT(0xea, gbc.readMem(0xa7d3));
        EXPECT(0xd4, gbc.readMem(0xb73d));
        EXPECT(0xa7, gbc.readMem(0xb73e));
        // CC 01F7
        gbc.setState(0x95cf, 0x6e19, 0xef40, 0xadc2, 0xb859, 0x1bcf, 0x1, 0x1);
        gbc.writeMem(0x95cf, { 0xcc, 0xda, 0x9b });
        gbc.step();
        EXPECT(0xef, gbc.a());
        EXPECT(0xad, gbc.b());
        EXPECT(0xc2, gbc.c());
        EXPECT(0xb8, gbc.d());
        EXPECT(0x59, gbc.e());
        EXPECT(0x1b, gbc.h());
        EXPECT(0xcf, gbc.l());
        EXPECT(0x6e19, gbc.sp());
        EXPECT(0x95d2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0x95cf));
        EXPECT(0xda, gbc.readMem(0x95d0));
        EXPECT(0x9b, gbc.readMem(0x95d1));
        // CC 01F8
        gbc.setState(0x4535, 0x8fc5, 0x1c80, 0x44f9, 0xdca9, 0xe91b, 0x1, 0x0);
        gbc.writeMem(0x4535, { 0xcc, 0xc8, 0x3a });
        gbc.writeMem(0x8fc3, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x1c, gbc.a());
        EXPECT(0x44, gbc.b());
        EXPECT(0xf9, gbc.c());
        EXPECT(0xdc, gbc.d());
        EXPECT(0xa9, gbc.e());
        EXPECT(0xe9, gbc.h());
        EXPECT(0x1b, gbc.l());
        EXPECT(0x8fc3, gbc.sp());
        EXPECT(0x3ac8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x38, gbc.readMem(0x8fc3));
        EXPECT(0x45, gbc.readMem(0x8fc4));
        // CC 01F9
        gbc.setState(0x24ff, 0xd92d, 0x6470, 0x1ece, 0x23b0, 0x3079, 0x1, 0x0);
        gbc.writeMem(0x24ff, { 0xcc, 0x5e, 0x9d });
        gbc.step();
        EXPECT(0x64, gbc.a());
        EXPECT(0x1e, gbc.b());
        EXPECT(0xce, gbc.c());
        EXPECT(0x23, gbc.d());
        EXPECT(0xb0, gbc.e());
        EXPECT(0x30, gbc.h());
        EXPECT(0x79, gbc.l());
        EXPECT(0xd92d, gbc.sp());
        EXPECT(0x2502, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 01FA
        gbc.setState(0x57fb, 0x354, 0xed40, 0xf746, 0x288f, 0xb3b6, 0x0, 0x1);
        gbc.writeMem(0x57fb, { 0xcc, 0xa5, 0x6f });
        gbc.step();
        EXPECT(0xed, gbc.a());
        EXPECT(0xf7, gbc.b());
        EXPECT(0x46, gbc.c());
        EXPECT(0x28, gbc.d());
        EXPECT(0x8f, gbc.e());
        EXPECT(0xb3, gbc.h());
        EXPECT(0xb6, gbc.l());
        EXPECT(0x354, gbc.sp());
        EXPECT(0x57fe, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 01FB
        gbc.setState(0xec2d, 0x2537, 0x4c30, 0x4edc, 0x7711, 0x4830, 0x0, 0x1);
        gbc.writeMem(0xec2d, { 0xcc, 0xd4, 0x28 });
        gbc.step();
        EXPECT(0x4c, gbc.a());
        EXPECT(0x4e, gbc.b());
        EXPECT(0xdc, gbc.c());
        EXPECT(0x77, gbc.d());
        EXPECT(0x11, gbc.e());
        EXPECT(0x48, gbc.h());
        EXPECT(0x30, gbc.l());
        EXPECT(0x2537, gbc.sp());
        EXPECT(0xec30, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xec2d));
        EXPECT(0xd4, gbc.readMem(0xec2e));
        EXPECT(0x28, gbc.readMem(0xec2f));
        // CC 01FC
        gbc.setState(0x2fc7, 0x8ef3, 0xf6c0, 0x1513, 0xba7, 0xd99a, 0x1, 0x0);
        gbc.writeMem(0x2fc7, { 0xcc, 0xd5, 0x78 });
        gbc.writeMem(0x8ef1, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xf6, gbc.a());
        EXPECT(0x15, gbc.b());
        EXPECT(0x13, gbc.c());
        EXPECT(0xb, gbc.d());
        EXPECT(0xa7, gbc.e());
        EXPECT(0xd9, gbc.h());
        EXPECT(0x9a, gbc.l());
        EXPECT(0x8ef1, gbc.sp());
        EXPECT(0x78d5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xca, gbc.readMem(0x8ef1));
        EXPECT(0x2f, gbc.readMem(0x8ef2));
        // CC 01FE
        gbc.setState(0x2f0f, 0xa5c6, 0xeae0, 0x764c, 0xfd59, 0xea9e, 0x1, 0x0);
        gbc.writeMem(0x2f0f, { 0xcc, 0x31, 0xb8 });
        gbc.writeMem(0xa5c4, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xea, gbc.a());
        EXPECT(0x76, gbc.b());
        EXPECT(0x4c, gbc.c());
        EXPECT(0xfd, gbc.d());
        EXPECT(0x59, gbc.e());
        EXPECT(0xea, gbc.h());
        EXPECT(0x9e, gbc.l());
        EXPECT(0xa5c4, gbc.sp());
        EXPECT(0xb831, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x12, gbc.readMem(0xa5c4));
        EXPECT(0x2f, gbc.readMem(0xa5c5));
        // CC 01FF
        gbc.setState(0x8f72, 0x32c0, 0xac50, 0x6ade, 0x99ae, 0x3482, 0x1, 0x1);
        gbc.writeMem(0x8f72, { 0xcc, 0xdd, 0xab });
        gbc.step();
        EXPECT(0xac, gbc.a());
        EXPECT(0x6a, gbc.b());
        EXPECT(0xde, gbc.c());
        EXPECT(0x99, gbc.d());
        EXPECT(0xae, gbc.e());
        EXPECT(0x34, gbc.h());
        EXPECT(0x82, gbc.l());
        EXPECT(0x32c0, gbc.sp());
        EXPECT(0x8f75, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0x8f72));
        EXPECT(0xdd, gbc.readMem(0x8f73));
        EXPECT(0xab, gbc.readMem(0x8f74));
        // CC 0202
        gbc.setState(0x403f, 0xb013, 0x8100, 0xe65a, 0xd298, 0x7cec, 0x0, 0x1);
        gbc.writeMem(0x403f, { 0xcc, 0x9c, 0x1f });
        gbc.step();
        EXPECT(0x81, gbc.a());
        EXPECT(0xe6, gbc.b());
        EXPECT(0x5a, gbc.c());
        EXPECT(0xd2, gbc.d());
        EXPECT(0x98, gbc.e());
        EXPECT(0x7c, gbc.h());
        EXPECT(0xec, gbc.l());
        EXPECT(0xb013, gbc.sp());
        EXPECT(0x4042, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 0203
        gbc.setState(0x1d59, 0xcd0f, 0xdca0, 0xb5d6, 0x17f0, 0x9822, 0x1, 0x1);
        gbc.writeMem(0x1d59, { 0xcc, 0xcd, 0x15 });
        gbc.writeMem(0xcd0d, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xdc, gbc.a());
        EXPECT(0xb5, gbc.b());
        EXPECT(0xd6, gbc.c());
        EXPECT(0x17, gbc.d());
        EXPECT(0xf0, gbc.e());
        EXPECT(0x98, gbc.h());
        EXPECT(0x22, gbc.l());
        EXPECT(0xcd0d, gbc.sp());
        EXPECT(0x15cd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x5c, gbc.readMem(0xcd0d));
        EXPECT(0x1d, gbc.readMem(0xcd0e));
        // CC 020A
        gbc.setState(0xa8fd, 0xe366, 0x34d0, 0x29ec, 0x883c, 0x33d6, 0x0, 0x0);
        gbc.writeMem(0xa8fd, { 0xcc, 0xa1, 0x68 });
        gbc.writeMem(0xe364, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x34, gbc.a());
        EXPECT(0x29, gbc.b());
        EXPECT(0xec, gbc.c());
        EXPECT(0x88, gbc.d());
        EXPECT(0x3c, gbc.e());
        EXPECT(0x33, gbc.h());
        EXPECT(0xd6, gbc.l());
        EXPECT(0xe364, gbc.sp());
        EXPECT(0x68a1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xa8fd));
        EXPECT(0xa1, gbc.readMem(0xa8fe));
        EXPECT(0x68, gbc.readMem(0xa8ff));
        EXPECT(0x0, gbc.readMem(0xe364));
        EXPECT(0xa9, gbc.readMem(0xe365));
        // CC 020C
        gbc.setState(0x7a63, 0xc9df, 0x8100, 0x76e1, 0x8851, 0x8523, 0x0, 0x1);
        gbc.writeMem(0x7a63, { 0xcc, 0xbe, 0x7b });
        gbc.step();
        EXPECT(0x81, gbc.a());
        EXPECT(0x76, gbc.b());
        EXPECT(0xe1, gbc.c());
        EXPECT(0x88, gbc.d());
        EXPECT(0x51, gbc.e());
        EXPECT(0x85, gbc.h());
        EXPECT(0x23, gbc.l());
        EXPECT(0xc9df, gbc.sp());
        EXPECT(0x7a66, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 020D
        gbc.setState(0xe0c8, 0x7116, 0x5020, 0x36fb, 0xdd3b, 0x6e74, 0x1, 0x0);
        gbc.writeMem(0xe0c8, { 0xcc, 0x5a, 0x35 });
        gbc.step();
        EXPECT(0x50, gbc.a());
        EXPECT(0x36, gbc.b());
        EXPECT(0xfb, gbc.c());
        EXPECT(0xdd, gbc.d());
        EXPECT(0x3b, gbc.e());
        EXPECT(0x6e, gbc.h());
        EXPECT(0x74, gbc.l());
        EXPECT(0x7116, gbc.sp());
        EXPECT(0xe0cb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xe0c8));
        EXPECT(0x5a, gbc.readMem(0xe0c9));
        EXPECT(0x35, gbc.readMem(0xe0ca));
        // CC 020E
        gbc.setState(0xed89, 0xa2fb, 0x6ef0, 0x93d3, 0xc94b, 0x6099, 0x0, 0x1);
        gbc.writeMem(0xa2f9, { 0x0, 0x0 });
        gbc.writeMem(0xed89, { 0xcc, 0xa7, 0xdc });
        gbc.step();
        EXPECT(0x6e, gbc.a());
        EXPECT(0x93, gbc.b());
        EXPECT(0xd3, gbc.c());
        EXPECT(0xc9, gbc.d());
        EXPECT(0x4b, gbc.e());
        EXPECT(0x60, gbc.h());
        EXPECT(0x99, gbc.l());
        EXPECT(0xa2f9, gbc.sp());
        EXPECT(0xdca7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x8c, gbc.readMem(0xa2f9));
        EXPECT(0xed, gbc.readMem(0xa2fa));
        EXPECT(0xcc, gbc.readMem(0xed89));
        EXPECT(0xa7, gbc.readMem(0xed8a));
        EXPECT(0xdc, gbc.readMem(0xed8b));
        // CC 020F
        gbc.setState(0xa7c6, 0x89, 0x4730, 0xddb4, 0x9fbb, 0xb3fb, 0x0, 0x1);
        gbc.writeMem(0xa7c6, { 0xcc, 0x1b, 0x65 });
        gbc.step();
        EXPECT(0x47, gbc.a());
        EXPECT(0xdd, gbc.b());
        EXPECT(0xb4, gbc.c());
        EXPECT(0x9f, gbc.d());
        EXPECT(0xbb, gbc.e());
        EXPECT(0xb3, gbc.h());
        EXPECT(0xfb, gbc.l());
        EXPECT(0x89, gbc.sp());
        EXPECT(0xa7c9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xa7c6));
        EXPECT(0x1b, gbc.readMem(0xa7c7));
        EXPECT(0x65, gbc.readMem(0xa7c8));
        // CC 0211
        gbc.setState(0x67c8, 0xe24f, 0x5eb0, 0x6acb, 0x668, 0x6230, 0x0, 0x0);
        gbc.writeMem(0x67c8, { 0xcc, 0x5c, 0x1e });
        gbc.writeMem(0xe24d, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x5e, gbc.a());
        EXPECT(0x6a, gbc.b());
        EXPECT(0xcb, gbc.c());
        EXPECT(0x6, gbc.d());
        EXPECT(0x68, gbc.e());
        EXPECT(0x62, gbc.h());
        EXPECT(0x30, gbc.l());
        EXPECT(0xe24d, gbc.sp());
        EXPECT(0x1e5c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xe24d));
        EXPECT(0x67, gbc.readMem(0xe24e));
        // CC 0212
        gbc.setState(0xbcd4, 0xb152, 0x7d90, 0x9f1, 0xca6e, 0x60c1, 0x1, 0x0);
        gbc.writeMem(0xb150, { 0x0, 0x0 });
        gbc.writeMem(0xbcd4, { 0xcc, 0xb5, 0xd7 });
        gbc.step();
        EXPECT(0x7d, gbc.a());
        EXPECT(0x9, gbc.b());
        EXPECT(0xf1, gbc.c());
        EXPECT(0xca, gbc.d());
        EXPECT(0x6e, gbc.e());
        EXPECT(0x60, gbc.h());
        EXPECT(0xc1, gbc.l());
        EXPECT(0xb150, gbc.sp());
        EXPECT(0xd7b5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xd7, gbc.readMem(0xb150));
        EXPECT(0xbc, gbc.readMem(0xb151));
        EXPECT(0xcc, gbc.readMem(0xbcd4));
        EXPECT(0xb5, gbc.readMem(0xbcd5));
        EXPECT(0xd7, gbc.readMem(0xbcd6));
        // CC 0213
        gbc.setState(0xd26e, 0xe8b2, 0x9560, 0x59da, 0xcd5d, 0x43c3, 0x1, 0x0);
        gbc.writeMem(0xd26e, { 0xcc, 0xed, 0x70 });
        gbc.step();
        EXPECT(0x95, gbc.a());
        EXPECT(0x59, gbc.b());
        EXPECT(0xda, gbc.c());
        EXPECT(0xcd, gbc.d());
        EXPECT(0x5d, gbc.e());
        EXPECT(0x43, gbc.h());
        EXPECT(0xc3, gbc.l());
        EXPECT(0xe8b2, gbc.sp());
        EXPECT(0xd271, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xd26e));
        EXPECT(0xed, gbc.readMem(0xd26f));
        EXPECT(0x70, gbc.readMem(0xd270));
        // CC 0216
        gbc.setState(0x92ac, 0xa261, 0xe970, 0x51d0, 0xbfe1, 0x6414, 0x0, 0x1);
        gbc.writeMem(0x92ac, { 0xcc, 0x7b, 0x13 });
        gbc.step();
        EXPECT(0xe9, gbc.a());
        EXPECT(0x51, gbc.b());
        EXPECT(0xd0, gbc.c());
        EXPECT(0xbf, gbc.d());
        EXPECT(0xe1, gbc.e());
        EXPECT(0x64, gbc.h());
        EXPECT(0x14, gbc.l());
        EXPECT(0xa261, gbc.sp());
        EXPECT(0x92af, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0x92ac));
        EXPECT(0x7b, gbc.readMem(0x92ad));
        EXPECT(0x13, gbc.readMem(0x92ae));
        // CC 0217
        gbc.setState(0x16e6, 0x2d5f, 0xd970, 0x2b4f, 0x9ea1, 0x4127, 0x0, 0x0);
        gbc.writeMem(0x16e6, { 0xcc, 0x24, 0x96 });
        gbc.step();
        EXPECT(0xd9, gbc.a());
        EXPECT(0x2b, gbc.b());
        EXPECT(0x4f, gbc.c());
        EXPECT(0x9e, gbc.d());
        EXPECT(0xa1, gbc.e());
        EXPECT(0x41, gbc.h());
        EXPECT(0x27, gbc.l());
        EXPECT(0x2d5f, gbc.sp());
        EXPECT(0x16e9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 0218
        gbc.setState(0xe614, 0xc1c3, 0x1180, 0xa953, 0x20e5, 0x8c5e, 0x1, 0x1);
        gbc.writeMem(0xc1c1, { 0x0, 0x0 });
        gbc.writeMem(0xe614, { 0xcc, 0x22, 0x8b });
        gbc.step();
        EXPECT(0x11, gbc.a());
        EXPECT(0xa9, gbc.b());
        EXPECT(0x53, gbc.c());
        EXPECT(0x20, gbc.d());
        EXPECT(0xe5, gbc.e());
        EXPECT(0x8c, gbc.h());
        EXPECT(0x5e, gbc.l());
        EXPECT(0xc1c1, gbc.sp());
        EXPECT(0x8b22, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x17, gbc.readMem(0xc1c1));
        EXPECT(0xe6, gbc.readMem(0xc1c2));
        EXPECT(0xcc, gbc.readMem(0xe614));
        EXPECT(0x22, gbc.readMem(0xe615));
        EXPECT(0x8b, gbc.readMem(0xe616));
        // CC 021B
        gbc.setState(0xbd5f, 0xb064, 0x6cb0, 0xac88, 0x6462, 0x31cd, 0x1, 0x0);
        gbc.writeMem(0xb062, { 0x0, 0x0 });
        gbc.writeMem(0xbd5f, { 0xcc, 0xcd, 0xef });
        gbc.step();
        EXPECT(0x6c, gbc.a());
        EXPECT(0xac, gbc.b());
        EXPECT(0x88, gbc.c());
        EXPECT(0x64, gbc.d());
        EXPECT(0x62, gbc.e());
        EXPECT(0x31, gbc.h());
        EXPECT(0xcd, gbc.l());
        EXPECT(0xb062, gbc.sp());
        EXPECT(0xefcd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x62, gbc.readMem(0xb062));
        EXPECT(0xbd, gbc.readMem(0xb063));
        EXPECT(0xcc, gbc.readMem(0xbd5f));
        EXPECT(0xcd, gbc.readMem(0xbd60));
        EXPECT(0xef, gbc.readMem(0xbd61));
        // CC 021D
        gbc.setState(0x6d0, 0x18f8, 0x6510, 0xfb3e, 0x54c0, 0x4144, 0x1, 0x1);
        gbc.writeMem(0x6d0, { 0xcc, 0xba, 0xae });
        gbc.step();
        EXPECT(0x65, gbc.a());
        EXPECT(0xfb, gbc.b());
        EXPECT(0x3e, gbc.c());
        EXPECT(0x54, gbc.d());
        EXPECT(0xc0, gbc.e());
        EXPECT(0x41, gbc.h());
        EXPECT(0x44, gbc.l());
        EXPECT(0x18f8, gbc.sp());
        EXPECT(0x6d3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 0220
        gbc.setState(0xd079, 0xcf68, 0x1950, 0xb627, 0xf98f, 0x7079, 0x1, 0x1);
        gbc.writeMem(0xd079, { 0xcc, 0xda, 0x53 });
        gbc.step();
        EXPECT(0x19, gbc.a());
        EXPECT(0xb6, gbc.b());
        EXPECT(0x27, gbc.c());
        EXPECT(0xf9, gbc.d());
        EXPECT(0x8f, gbc.e());
        EXPECT(0x70, gbc.h());
        EXPECT(0x79, gbc.l());
        EXPECT(0xcf68, gbc.sp());
        EXPECT(0xd07c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xd079));
        EXPECT(0xda, gbc.readMem(0xd07a));
        EXPECT(0x53, gbc.readMem(0xd07b));
        // CC 0222
        gbc.setState(0x3c83, 0x3262, 0x9340, 0x9f38, 0x1566, 0xfe0e, 0x1, 0x0);
        gbc.writeMem(0x3c83, { 0xcc, 0x36, 0xfd });
        gbc.step();
        EXPECT(0x93, gbc.a());
        EXPECT(0x9f, gbc.b());
        EXPECT(0x38, gbc.c());
        EXPECT(0x15, gbc.d());
        EXPECT(0x66, gbc.e());
        EXPECT(0xfe, gbc.h());
        EXPECT(0xe, gbc.l());
        EXPECT(0x3262, gbc.sp());
        EXPECT(0x3c86, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 0223
        gbc.setState(0x294a, 0xc967, 0x9270, 0x42ba, 0xc18a, 0xf302, 0x1, 0x1);
        gbc.writeMem(0x294a, { 0xcc, 0xf9, 0xc6 });
        gbc.step();
        EXPECT(0x92, gbc.a());
        EXPECT(0x42, gbc.b());
        EXPECT(0xba, gbc.c());
        EXPECT(0xc1, gbc.d());
        EXPECT(0x8a, gbc.e());
        EXPECT(0xf3, gbc.h());
        EXPECT(0x2, gbc.l());
        EXPECT(0xc967, gbc.sp());
        EXPECT(0x294d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 0224
        gbc.setState(0x728c, 0xedd7, 0x9bb0, 0xedcd, 0xd9ee, 0x5909, 0x0, 0x1);
        gbc.writeMem(0x728c, { 0xcc, 0xce, 0xc9 });
        gbc.writeMem(0xedd5, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x9b, gbc.a());
        EXPECT(0xed, gbc.b());
        EXPECT(0xcd, gbc.c());
        EXPECT(0xd9, gbc.d());
        EXPECT(0xee, gbc.e());
        EXPECT(0x59, gbc.h());
        EXPECT(0x9, gbc.l());
        EXPECT(0xedd5, gbc.sp());
        EXPECT(0xc9ce, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x8f, gbc.readMem(0xedd5));
        EXPECT(0x72, gbc.readMem(0xedd6));
        // CC 0225
        gbc.setState(0x1743, 0xbab1, 0x71c0, 0xdd53, 0x4c72, 0xed7e, 0x1, 0x0);
        gbc.writeMem(0x1743, { 0xcc, 0xd4, 0x92 });
        gbc.writeMem(0xbaaf, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x71, gbc.a());
        EXPECT(0xdd, gbc.b());
        EXPECT(0x53, gbc.c());
        EXPECT(0x4c, gbc.d());
        EXPECT(0x72, gbc.e());
        EXPECT(0xed, gbc.h());
        EXPECT(0x7e, gbc.l());
        EXPECT(0xbaaf, gbc.sp());
        EXPECT(0x92d4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x46, gbc.readMem(0xbaaf));
        EXPECT(0x17, gbc.readMem(0xbab0));
        // CC 0226
        gbc.setState(0xd279, 0xafb4, 0xc150, 0xff64, 0xb7b3, 0x3fa, 0x1, 0x0);
        gbc.writeMem(0xd279, { 0xcc, 0x48, 0x5e });
        gbc.step();
        EXPECT(0xc1, gbc.a());
        EXPECT(0xff, gbc.b());
        EXPECT(0x64, gbc.c());
        EXPECT(0xb7, gbc.d());
        EXPECT(0xb3, gbc.e());
        EXPECT(0x3, gbc.h());
        EXPECT(0xfa, gbc.l());
        EXPECT(0xafb4, gbc.sp());
        EXPECT(0xd27c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xd279));
        EXPECT(0x48, gbc.readMem(0xd27a));
        EXPECT(0x5e, gbc.readMem(0xd27b));
        // CC 0228
        gbc.setState(0xad1b, 0xb238, 0xe3a0, 0x9acb, 0xa9cf, 0xa053, 0x1, 0x1);
        gbc.writeMem(0xad1b, { 0xcc, 0xcb, 0xd6 });
        gbc.writeMem(0xb236, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xe3, gbc.a());
        EXPECT(0x9a, gbc.b());
        EXPECT(0xcb, gbc.c());
        EXPECT(0xa9, gbc.d());
        EXPECT(0xcf, gbc.e());
        EXPECT(0xa0, gbc.h());
        EXPECT(0x53, gbc.l());
        EXPECT(0xb236, gbc.sp());
        EXPECT(0xd6cb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xad1b));
        EXPECT(0xcb, gbc.readMem(0xad1c));
        EXPECT(0xd6, gbc.readMem(0xad1d));
        EXPECT(0x1e, gbc.readMem(0xb236));
        EXPECT(0xad, gbc.readMem(0xb237));
        // CC 0229
        gbc.setState(0x513b, 0x70fa, 0x8c10, 0xc46, 0xd534, 0x5d7b, 0x0, 0x1);
        gbc.writeMem(0x513b, { 0xcc, 0x7e, 0x75 });
        gbc.step();
        EXPECT(0x8c, gbc.a());
        EXPECT(0xc, gbc.b());
        EXPECT(0x46, gbc.c());
        EXPECT(0xd5, gbc.d());
        EXPECT(0x34, gbc.e());
        EXPECT(0x5d, gbc.h());
        EXPECT(0x7b, gbc.l());
        EXPECT(0x70fa, gbc.sp());
        EXPECT(0x513e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 022B
        gbc.setState(0x84f1, 0x8c61, 0x1bb0, 0x6a27, 0xf614, 0xbdf8, 0x0, 0x0);
        gbc.writeMem(0x84f1, { 0xcc, 0xe2, 0xc1 });
        gbc.writeMem(0x8c5f, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x1b, gbc.a());
        EXPECT(0x6a, gbc.b());
        EXPECT(0x27, gbc.c());
        EXPECT(0xf6, gbc.d());
        EXPECT(0x14, gbc.e());
        EXPECT(0xbd, gbc.h());
        EXPECT(0xf8, gbc.l());
        EXPECT(0x8c5f, gbc.sp());
        EXPECT(0xc1e2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0x84f1));
        EXPECT(0xe2, gbc.readMem(0x84f2));
        EXPECT(0xc1, gbc.readMem(0x84f3));
        EXPECT(0xf4, gbc.readMem(0x8c5f));
        EXPECT(0x84, gbc.readMem(0x8c60));
        // CC 022C
        gbc.setState(0x38aa, 0xd779, 0xf070, 0x5f1d, 0x6cb9, 0x9070, 0x0, 0x1);
        gbc.writeMem(0x38aa, { 0xcc, 0xe6, 0x2b });
        gbc.step();
        EXPECT(0xf0, gbc.a());
        EXPECT(0x5f, gbc.b());
        EXPECT(0x1d, gbc.c());
        EXPECT(0x6c, gbc.d());
        EXPECT(0xb9, gbc.e());
        EXPECT(0x90, gbc.h());
        EXPECT(0x70, gbc.l());
        EXPECT(0xd779, gbc.sp());
        EXPECT(0x38ad, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 022D
        gbc.setState(0x9a26, 0xeaf5, 0x4480, 0xe953, 0xd41b, 0xc264, 0x1, 0x0);
        gbc.writeMem(0x9a26, { 0xcc, 0xf4, 0x28 });
        gbc.writeMem(0xeaf3, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x44, gbc.a());
        EXPECT(0xe9, gbc.b());
        EXPECT(0x53, gbc.c());
        EXPECT(0xd4, gbc.d());
        EXPECT(0x1b, gbc.e());
        EXPECT(0xc2, gbc.h());
        EXPECT(0x64, gbc.l());
        EXPECT(0xeaf3, gbc.sp());
        EXPECT(0x28f4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0x9a26));
        EXPECT(0xf4, gbc.readMem(0x9a27));
        EXPECT(0x28, gbc.readMem(0x9a28));
        EXPECT(0x29, gbc.readMem(0xeaf3));
        EXPECT(0x9a, gbc.readMem(0xeaf4));
        // CC 022E
        gbc.setState(0x3107, 0x93f7, 0x12c0, 0x3604, 0xc69c, 0xf3d, 0x1, 0x0);
        gbc.writeMem(0x3107, { 0xcc, 0x73, 0x60 });
        gbc.writeMem(0x93f5, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x12, gbc.a());
        EXPECT(0x36, gbc.b());
        EXPECT(0x4, gbc.c());
        EXPECT(0xc6, gbc.d());
        EXPECT(0x9c, gbc.e());
        EXPECT(0xf, gbc.h());
        EXPECT(0x3d, gbc.l());
        EXPECT(0x93f5, gbc.sp());
        EXPECT(0x6073, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xa, gbc.readMem(0x93f5));
        EXPECT(0x31, gbc.readMem(0x93f6));
        // CC 0230
        gbc.setState(0xff7, 0x5ea2, 0xf610, 0x3749, 0xe773, 0x5ea1, 0x0, 0x1);
        gbc.writeMem(0xff7, { 0xcc, 0xde, 0x4a });
        gbc.step();
        EXPECT(0xf6, gbc.a());
        EXPECT(0x37, gbc.b());
        EXPECT(0x49, gbc.c());
        EXPECT(0xe7, gbc.d());
        EXPECT(0x73, gbc.e());
        EXPECT(0x5e, gbc.h());
        EXPECT(0xa1, gbc.l());
        EXPECT(0x5ea2, gbc.sp());
        EXPECT(0xffa, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 0231
        gbc.setState(0x22e6, 0xbf6a, 0x3b10, 0xe33f, 0xf40b, 0x6a80, 0x0, 0x1);
        gbc.writeMem(0x22e6, { 0xcc, 0x7c, 0xdb });
        gbc.step();
        EXPECT(0x3b, gbc.a());
        EXPECT(0xe3, gbc.b());
        EXPECT(0x3f, gbc.c());
        EXPECT(0xf4, gbc.d());
        EXPECT(0xb, gbc.e());
        EXPECT(0x6a, gbc.h());
        EXPECT(0x80, gbc.l());
        EXPECT(0xbf6a, gbc.sp());
        EXPECT(0x22e9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 0232
        gbc.setState(0x4a31, 0x63fc, 0xc70, 0x2f15, 0xef89, 0x723e, 0x1, 0x0);
        gbc.writeMem(0x4a31, { 0xcc, 0xb4, 0x2c });
        gbc.step();
        EXPECT(0xc, gbc.a());
        EXPECT(0x2f, gbc.b());
        EXPECT(0x15, gbc.c());
        EXPECT(0xef, gbc.d());
        EXPECT(0x89, gbc.e());
        EXPECT(0x72, gbc.h());
        EXPECT(0x3e, gbc.l());
        EXPECT(0x63fc, gbc.sp());
        EXPECT(0x4a34, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 0234
        gbc.setState(0x180e, 0x915d, 0xb530, 0xe965, 0x5efc, 0x43e1, 0x1, 0x1);
        gbc.writeMem(0x180e, { 0xcc, 0x32, 0x8f });
        gbc.step();
        EXPECT(0xb5, gbc.a());
        EXPECT(0xe9, gbc.b());
        EXPECT(0x65, gbc.c());
        EXPECT(0x5e, gbc.d());
        EXPECT(0xfc, gbc.e());
        EXPECT(0x43, gbc.h());
        EXPECT(0xe1, gbc.l());
        EXPECT(0x915d, gbc.sp());
        EXPECT(0x1811, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 0235
        gbc.setState(0x565d, 0xec14, 0x4f90, 0x142b, 0x4aee, 0x7f11, 0x0, 0x0);
        gbc.writeMem(0x565d, { 0xcc, 0x12, 0xe2 });
        gbc.writeMem(0xec12, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x4f, gbc.a());
        EXPECT(0x14, gbc.b());
        EXPECT(0x2b, gbc.c());
        EXPECT(0x4a, gbc.d());
        EXPECT(0xee, gbc.e());
        EXPECT(0x7f, gbc.h());
        EXPECT(0x11, gbc.l());
        EXPECT(0xec12, gbc.sp());
        EXPECT(0xe212, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x60, gbc.readMem(0xec12));
        EXPECT(0x56, gbc.readMem(0xec13));
        // CC 0236
        gbc.setState(0x2d91, 0x9ead, 0xb300, 0x9cb6, 0x8e4a, 0xa2f2, 0x0, 0x1);
        gbc.writeMem(0x2d91, { 0xcc, 0xf4, 0x61 });
        gbc.step();
        EXPECT(0xb3, gbc.a());
        EXPECT(0x9c, gbc.b());
        EXPECT(0xb6, gbc.c());
        EXPECT(0x8e, gbc.d());
        EXPECT(0x4a, gbc.e());
        EXPECT(0xa2, gbc.h());
        EXPECT(0xf2, gbc.l());
        EXPECT(0x9ead, gbc.sp());
        EXPECT(0x2d94, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 0237
        gbc.setState(0xcc75, 0xd09a, 0xbe20, 0xe6ea, 0xa5cd, 0x376e, 0x0, 0x0);
        gbc.writeMem(0xcc75, { 0xcc, 0x81, 0x2 });
        gbc.step();
        EXPECT(0xbe, gbc.a());
        EXPECT(0xe6, gbc.b());
        EXPECT(0xea, gbc.c());
        EXPECT(0xa5, gbc.d());
        EXPECT(0xcd, gbc.e());
        EXPECT(0x37, gbc.h());
        EXPECT(0x6e, gbc.l());
        EXPECT(0xd09a, gbc.sp());
        EXPECT(0xcc78, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xcc75));
        EXPECT(0x81, gbc.readMem(0xcc76));
        EXPECT(0x2, gbc.readMem(0xcc77));
        // CC 0238
        gbc.setState(0x62c7, 0xd4f1, 0x4bc0, 0x4845, 0xa499, 0xff68, 0x1, 0x1);
        gbc.writeMem(0x62c7, { 0xcc, 0xb1, 0xeb });
        gbc.writeMem(0xd4ef, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x4b, gbc.a());
        EXPECT(0x48, gbc.b());
        EXPECT(0x45, gbc.c());
        EXPECT(0xa4, gbc.d());
        EXPECT(0x99, gbc.e());
        EXPECT(0xff, gbc.h());
        EXPECT(0x68, gbc.l());
        EXPECT(0xd4ef, gbc.sp());
        EXPECT(0xebb1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xca, gbc.readMem(0xd4ef));
        EXPECT(0x62, gbc.readMem(0xd4f0));
        // CC 0239
        gbc.setState(0xdea9, 0xca9f, 0x9f80, 0xf1df, 0xee8d, 0xfea5, 0x0, 0x1);
        gbc.writeMem(0xca9d, { 0x0, 0x0 });
        gbc.writeMem(0xdea9, { 0xcc, 0xb8, 0x1d });
        gbc.step();
        EXPECT(0x9f, gbc.a());
        EXPECT(0xf1, gbc.b());
        EXPECT(0xdf, gbc.c());
        EXPECT(0xee, gbc.d());
        EXPECT(0x8d, gbc.e());
        EXPECT(0xfe, gbc.h());
        EXPECT(0xa5, gbc.l());
        EXPECT(0xca9d, gbc.sp());
        EXPECT(0x1db8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xac, gbc.readMem(0xca9d));
        EXPECT(0xde, gbc.readMem(0xca9e));
        EXPECT(0xcc, gbc.readMem(0xdea9));
        EXPECT(0xb8, gbc.readMem(0xdeaa));
        EXPECT(0x1d, gbc.readMem(0xdeab));
        // CC 023A
        gbc.setState(0x5445, 0xa94f, 0x9590, 0xe2d1, 0x493c, 0x4d77, 0x0, 0x0);
        gbc.writeMem(0x5445, { 0xcc, 0x57, 0xcb });
        gbc.writeMem(0xa94d, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x95, gbc.a());
        EXPECT(0xe2, gbc.b());
        EXPECT(0xd1, gbc.c());
        EXPECT(0x49, gbc.d());
        EXPECT(0x3c, gbc.e());
        EXPECT(0x4d, gbc.h());
        EXPECT(0x77, gbc.l());
        EXPECT(0xa94d, gbc.sp());
        EXPECT(0xcb57, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x48, gbc.readMem(0xa94d));
        EXPECT(0x54, gbc.readMem(0xa94e));
        // CC 023B
        gbc.setState(0xc4a8, 0xa20c, 0x1a60, 0xff51, 0x1be, 0x483c, 0x1, 0x1);
        gbc.writeMem(0xc4a8, { 0xcc, 0x7d, 0x95 });
        gbc.step();
        EXPECT(0x1a, gbc.a());
        EXPECT(0xff, gbc.b());
        EXPECT(0x51, gbc.c());
        EXPECT(0x1, gbc.d());
        EXPECT(0xbe, gbc.e());
        EXPECT(0x48, gbc.h());
        EXPECT(0x3c, gbc.l());
        EXPECT(0xa20c, gbc.sp());
        EXPECT(0xc4ab, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xc4a8));
        EXPECT(0x7d, gbc.readMem(0xc4a9));
        EXPECT(0x95, gbc.readMem(0xc4aa));
        // CC 023C
        gbc.setState(0xa663, 0x8eb0, 0x3d30, 0xdc22, 0xaa83, 0x482d, 0x1, 0x1);
        gbc.writeMem(0xa663, { 0xcc, 0xc3, 0x86 });
        gbc.step();
        EXPECT(0x3d, gbc.a());
        EXPECT(0xdc, gbc.b());
        EXPECT(0x22, gbc.c());
        EXPECT(0xaa, gbc.d());
        EXPECT(0x83, gbc.e());
        EXPECT(0x48, gbc.h());
        EXPECT(0x2d, gbc.l());
        EXPECT(0x8eb0, gbc.sp());
        EXPECT(0xa666, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xa663));
        EXPECT(0xc3, gbc.readMem(0xa664));
        EXPECT(0x86, gbc.readMem(0xa665));
        // CC 023D
        gbc.setState(0xa2b, 0x90b3, 0xd990, 0x3f76, 0x1ba0, 0xd52d, 0x1, 0x0);
        gbc.writeMem(0xa2b, { 0xcc, 0x1, 0x12 });
        gbc.writeMem(0x90b1, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xd9, gbc.a());
        EXPECT(0x3f, gbc.b());
        EXPECT(0x76, gbc.c());
        EXPECT(0x1b, gbc.d());
        EXPECT(0xa0, gbc.e());
        EXPECT(0xd5, gbc.h());
        EXPECT(0x2d, gbc.l());
        EXPECT(0x90b1, gbc.sp());
        EXPECT(0x1201, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x2e, gbc.readMem(0x90b1));
        EXPECT(0xa, gbc.readMem(0x90b2));
        // CC 023E
        gbc.setState(0xadc6, 0xa3f1, 0xf0e0, 0x1e41, 0x8a1d, 0xce53, 0x0, 0x0);
        gbc.writeMem(0xa3ef, { 0x0, 0x0 });
        gbc.writeMem(0xadc6, { 0xcc, 0xc0, 0xa4 });
        gbc.step();
        EXPECT(0xf0, gbc.a());
        EXPECT(0x1e, gbc.b());
        EXPECT(0x41, gbc.c());
        EXPECT(0x8a, gbc.d());
        EXPECT(0x1d, gbc.e());
        EXPECT(0xce, gbc.h());
        EXPECT(0x53, gbc.l());
        EXPECT(0xa3ef, gbc.sp());
        EXPECT(0xa4c0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xc9, gbc.readMem(0xa3ef));
        EXPECT(0xad, gbc.readMem(0xa3f0));
        EXPECT(0xcc, gbc.readMem(0xadc6));
        EXPECT(0xc0, gbc.readMem(0xadc7));
        EXPECT(0xa4, gbc.readMem(0xadc8));
        // CC 0240
        gbc.setState(0x2f46, 0xe3f0, 0xbf00, 0xb324, 0x269, 0xaf41, 0x1, 0x0);
        gbc.writeMem(0x2f46, { 0xcc, 0x43, 0xb3 });
        gbc.step();
        EXPECT(0xbf, gbc.a());
        EXPECT(0xb3, gbc.b());
        EXPECT(0x24, gbc.c());
        EXPECT(0x2, gbc.d());
        EXPECT(0x69, gbc.e());
        EXPECT(0xaf, gbc.h());
        EXPECT(0x41, gbc.l());
        EXPECT(0xe3f0, gbc.sp());
        EXPECT(0x2f49, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 0241
        gbc.setState(0xc944, 0x70ef, 0x5630, 0x95b4, 0xc45c, 0xd08e, 0x0, 0x0);
        gbc.writeMem(0xc944, { 0xcc, 0x94, 0xa });
        gbc.step();
        EXPECT(0x56, gbc.a());
        EXPECT(0x95, gbc.b());
        EXPECT(0xb4, gbc.c());
        EXPECT(0xc4, gbc.d());
        EXPECT(0x5c, gbc.e());
        EXPECT(0xd0, gbc.h());
        EXPECT(0x8e, gbc.l());
        EXPECT(0x70ef, gbc.sp());
        EXPECT(0xc947, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xc944));
        EXPECT(0x94, gbc.readMem(0xc945));
        EXPECT(0xa, gbc.readMem(0xc946));
        // CC 0245
        gbc.setState(0xa8bf, 0x9711, 0xf7b0, 0x896b, 0x655c, 0xb451, 0x0, 0x0);
        gbc.writeMem(0x970f, { 0x0, 0x0 });
        gbc.writeMem(0xa8bf, { 0xcc, 0x1f, 0x5e });
        gbc.step();
        EXPECT(0xf7, gbc.a());
        EXPECT(0x89, gbc.b());
        EXPECT(0x6b, gbc.c());
        EXPECT(0x65, gbc.d());
        EXPECT(0x5c, gbc.e());
        EXPECT(0xb4, gbc.h());
        EXPECT(0x51, gbc.l());
        EXPECT(0x970f, gbc.sp());
        EXPECT(0x5e1f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xc2, gbc.readMem(0x970f));
        EXPECT(0xa8, gbc.readMem(0x9710));
        EXPECT(0xcc, gbc.readMem(0xa8bf));
        EXPECT(0x1f, gbc.readMem(0xa8c0));
        EXPECT(0x5e, gbc.readMem(0xa8c1));
        // CC 0247
        gbc.setState(0x2aa4, 0x629f, 0xed50, 0x8253, 0xfa82, 0x2dbc, 0x1, 0x1);
        gbc.writeMem(0x2aa4, { 0xcc, 0x69, 0x22 });
        gbc.step();
        EXPECT(0xed, gbc.a());
        EXPECT(0x82, gbc.b());
        EXPECT(0x53, gbc.c());
        EXPECT(0xfa, gbc.d());
        EXPECT(0x82, gbc.e());
        EXPECT(0x2d, gbc.h());
        EXPECT(0xbc, gbc.l());
        EXPECT(0x629f, gbc.sp());
        EXPECT(0x2aa7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 0248
        gbc.setState(0xd1e9, 0xbd2b, 0x8230, 0xf1dd, 0x428d, 0xb843, 0x1, 0x0);
        gbc.writeMem(0xd1e9, { 0xcc, 0x3c, 0x16 });
        gbc.step();
        EXPECT(0x82, gbc.a());
        EXPECT(0xf1, gbc.b());
        EXPECT(0xdd, gbc.c());
        EXPECT(0x42, gbc.d());
        EXPECT(0x8d, gbc.e());
        EXPECT(0xb8, gbc.h());
        EXPECT(0x43, gbc.l());
        EXPECT(0xbd2b, gbc.sp());
        EXPECT(0xd1ec, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xd1e9));
        EXPECT(0x3c, gbc.readMem(0xd1ea));
        EXPECT(0x16, gbc.readMem(0xd1eb));
        // CC 0249
        gbc.setState(0x6ebf, 0x6b1d, 0x460, 0x3e49, 0x3df1, 0x54ec, 0x1, 0x1);
        gbc.writeMem(0x6ebf, { 0xcc, 0xa, 0x3a });
        gbc.step();
        EXPECT(0x4, gbc.a());
        EXPECT(0x3e, gbc.b());
        EXPECT(0x49, gbc.c());
        EXPECT(0x3d, gbc.d());
        EXPECT(0xf1, gbc.e());
        EXPECT(0x54, gbc.h());
        EXPECT(0xec, gbc.l());
        EXPECT(0x6b1d, gbc.sp());
        EXPECT(0x6ec2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 024A
        gbc.setState(0xf17, 0xdb5b, 0x4d60, 0x5174, 0xda5, 0xd29, 0x0, 0x0);
        gbc.writeMem(0xf17, { 0xcc, 0x99, 0x3d });
        gbc.step();
        EXPECT(0x4d, gbc.a());
        EXPECT(0x51, gbc.b());
        EXPECT(0x74, gbc.c());
        EXPECT(0xd, gbc.d());
        EXPECT(0xa5, gbc.e());
        EXPECT(0xd, gbc.h());
        EXPECT(0x29, gbc.l());
        EXPECT(0xdb5b, gbc.sp());
        EXPECT(0xf1a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 024B
        gbc.setState(0x1878, 0x680f, 0xc720, 0xf48c, 0x204e, 0x539a, 0x1, 0x1);
        gbc.writeMem(0x1878, { 0xcc, 0x43, 0x46 });
        gbc.step();
        EXPECT(0xc7, gbc.a());
        EXPECT(0xf4, gbc.b());
        EXPECT(0x8c, gbc.c());
        EXPECT(0x20, gbc.d());
        EXPECT(0x4e, gbc.e());
        EXPECT(0x53, gbc.h());
        EXPECT(0x9a, gbc.l());
        EXPECT(0x680f, gbc.sp());
        EXPECT(0x187b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 024C
        gbc.setState(0xb4f7, 0xe843, 0xae10, 0x7069, 0x762, 0x1e5a, 0x0, 0x0);
        gbc.writeMem(0xb4f7, { 0xcc, 0x57, 0xa8 });
        gbc.step();
        EXPECT(0xae, gbc.a());
        EXPECT(0x70, gbc.b());
        EXPECT(0x69, gbc.c());
        EXPECT(0x7, gbc.d());
        EXPECT(0x62, gbc.e());
        EXPECT(0x1e, gbc.h());
        EXPECT(0x5a, gbc.l());
        EXPECT(0xe843, gbc.sp());
        EXPECT(0xb4fa, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xb4f7));
        EXPECT(0x57, gbc.readMem(0xb4f8));
        EXPECT(0xa8, gbc.readMem(0xb4f9));
        // CC 024D
        gbc.setState(0x92e2, 0x44ba, 0x9e00, 0x3fa, 0xc7e6, 0x4337, 0x0, 0x0);
        gbc.writeMem(0x92e2, { 0xcc, 0x52, 0xd });
        gbc.step();
        EXPECT(0x9e, gbc.a());
        EXPECT(0x3, gbc.b());
        EXPECT(0xfa, gbc.c());
        EXPECT(0xc7, gbc.d());
        EXPECT(0xe6, gbc.e());
        EXPECT(0x43, gbc.h());
        EXPECT(0x37, gbc.l());
        EXPECT(0x44ba, gbc.sp());
        EXPECT(0x92e5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0x92e2));
        EXPECT(0x52, gbc.readMem(0x92e3));
        EXPECT(0xd, gbc.readMem(0x92e4));
        // CC 024F
        gbc.setState(0x5920, 0x1583, 0x9860, 0xc0a3, 0x7587, 0x8252, 0x0, 0x1);
        gbc.writeMem(0x5920, { 0xcc, 0xc2, 0x70 });
        gbc.step();
        EXPECT(0x98, gbc.a());
        EXPECT(0xc0, gbc.b());
        EXPECT(0xa3, gbc.c());
        EXPECT(0x75, gbc.d());
        EXPECT(0x87, gbc.e());
        EXPECT(0x82, gbc.h());
        EXPECT(0x52, gbc.l());
        EXPECT(0x1583, gbc.sp());
        EXPECT(0x5923, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 0251
        gbc.setState(0x2272, 0xe5eb, 0x6000, 0xe994, 0x4639, 0xef40, 0x1, 0x1);
        gbc.writeMem(0x2272, { 0xcc, 0xb7, 0x9e });
        gbc.step();
        EXPECT(0x60, gbc.a());
        EXPECT(0xe9, gbc.b());
        EXPECT(0x94, gbc.c());
        EXPECT(0x46, gbc.d());
        EXPECT(0x39, gbc.e());
        EXPECT(0xef, gbc.h());
        EXPECT(0x40, gbc.l());
        EXPECT(0xe5eb, gbc.sp());
        EXPECT(0x2275, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 0252
        gbc.setState(0x24b0, 0xb919, 0xf4e0, 0x4569, 0x3b9, 0xd9ed, 0x1, 0x0);
        gbc.writeMem(0x24b0, { 0xcc, 0x59, 0xb5 });
        gbc.writeMem(0xb917, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xf4, gbc.a());
        EXPECT(0x45, gbc.b());
        EXPECT(0x69, gbc.c());
        EXPECT(0x3, gbc.d());
        EXPECT(0xb9, gbc.e());
        EXPECT(0xd9, gbc.h());
        EXPECT(0xed, gbc.l());
        EXPECT(0xb917, gbc.sp());
        EXPECT(0xb559, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xb3, gbc.readMem(0xb917));
        EXPECT(0x24, gbc.readMem(0xb918));
        // CC 0255
        gbc.setState(0xb188, 0xc2e3, 0x1a90, 0xf1dd, 0xee54, 0x6578, 0x1, 0x0);
        gbc.writeMem(0xb188, { 0xcc, 0x9f, 0x52 });
        gbc.writeMem(0xc2e1, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x1a, gbc.a());
        EXPECT(0xf1, gbc.b());
        EXPECT(0xdd, gbc.c());
        EXPECT(0xee, gbc.d());
        EXPECT(0x54, gbc.e());
        EXPECT(0x65, gbc.h());
        EXPECT(0x78, gbc.l());
        EXPECT(0xc2e1, gbc.sp());
        EXPECT(0x529f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xb188));
        EXPECT(0x9f, gbc.readMem(0xb189));
        EXPECT(0x52, gbc.readMem(0xb18a));
        EXPECT(0x8b, gbc.readMem(0xc2e1));
        EXPECT(0xb1, gbc.readMem(0xc2e2));
        // CC 0257
        gbc.setState(0x72c3, 0x1cda, 0xd50, 0x370a, 0xfa5b, 0xa475, 0x1, 0x1);
        gbc.writeMem(0x72c3, { 0xcc, 0xe3, 0xf1 });
        gbc.step();
        EXPECT(0xd, gbc.a());
        EXPECT(0x37, gbc.b());
        EXPECT(0xa, gbc.c());
        EXPECT(0xfa, gbc.d());
        EXPECT(0x5b, gbc.e());
        EXPECT(0xa4, gbc.h());
        EXPECT(0x75, gbc.l());
        EXPECT(0x1cda, gbc.sp());
        EXPECT(0x72c6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 0258
        gbc.setState(0x38dd, 0xe055, 0x2f70, 0x2020, 0x3f60, 0xbc59, 0x0, 0x0);
        gbc.writeMem(0x38dd, { 0xcc, 0x1b, 0x4c });
        gbc.step();
        EXPECT(0x2f, gbc.a());
        EXPECT(0x20, gbc.b());
        EXPECT(0x20, gbc.c());
        EXPECT(0x3f, gbc.d());
        EXPECT(0x60, gbc.e());
        EXPECT(0xbc, gbc.h());
        EXPECT(0x59, gbc.l());
        EXPECT(0xe055, gbc.sp());
        EXPECT(0x38e0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 0259
        gbc.setState(0xb95d, 0x91e7, 0xb0, 0x32c, 0xce1f, 0x8720, 0x0, 0x1);
        gbc.writeMem(0x91e5, { 0x0, 0x0 });
        gbc.writeMem(0xb95d, { 0xcc, 0xc6, 0x8e });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x3, gbc.b());
        EXPECT(0x2c, gbc.c());
        EXPECT(0xce, gbc.d());
        EXPECT(0x1f, gbc.e());
        EXPECT(0x87, gbc.h());
        EXPECT(0x20, gbc.l());
        EXPECT(0x91e5, gbc.sp());
        EXPECT(0x8ec6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x60, gbc.readMem(0x91e5));
        EXPECT(0xb9, gbc.readMem(0x91e6));
        EXPECT(0xcc, gbc.readMem(0xb95d));
        EXPECT(0xc6, gbc.readMem(0xb95e));
        EXPECT(0x8e, gbc.readMem(0xb95f));
        // CC 025A
        gbc.setState(0x39f7, 0xbe36, 0x94f0, 0xf662, 0x4288, 0x1969, 0x1, 0x0);
        gbc.writeMem(0x39f7, { 0xcc, 0x7f, 0x7d });
        gbc.writeMem(0xbe34, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x94, gbc.a());
        EXPECT(0xf6, gbc.b());
        EXPECT(0x62, gbc.c());
        EXPECT(0x42, gbc.d());
        EXPECT(0x88, gbc.e());
        EXPECT(0x19, gbc.h());
        EXPECT(0x69, gbc.l());
        EXPECT(0xbe34, gbc.sp());
        EXPECT(0x7d7f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xfa, gbc.readMem(0xbe34));
        EXPECT(0x39, gbc.readMem(0xbe35));
        // CC 025B
        gbc.setState(0x8ab6, 0x8016, 0xa360, 0xa8cf, 0x30cf, 0x857a, 0x1, 0x1);
        gbc.writeMem(0x8ab6, { 0xcc, 0x29, 0x8b });
        gbc.step();
        EXPECT(0xa3, gbc.a());
        EXPECT(0xa8, gbc.b());
        EXPECT(0xcf, gbc.c());
        EXPECT(0x30, gbc.d());
        EXPECT(0xcf, gbc.e());
        EXPECT(0x85, gbc.h());
        EXPECT(0x7a, gbc.l());
        EXPECT(0x8016, gbc.sp());
        EXPECT(0x8ab9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0x8ab6));
        EXPECT(0x29, gbc.readMem(0x8ab7));
        EXPECT(0x8b, gbc.readMem(0x8ab8));
        // CC 025C
        gbc.setState(0xaf24, 0x2bf1, 0x1060, 0x6c, 0x18e0, 0xe9c, 0x0, 0x1);
        gbc.writeMem(0xaf24, { 0xcc, 0x28, 0x3f });
        gbc.step();
        EXPECT(0x10, gbc.a());
        EXPECT(0x0, gbc.b());
        EXPECT(0x6c, gbc.c());
        EXPECT(0x18, gbc.d());
        EXPECT(0xe0, gbc.e());
        EXPECT(0xe, gbc.h());
        EXPECT(0x9c, gbc.l());
        EXPECT(0x2bf1, gbc.sp());
        EXPECT(0xaf27, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xaf24));
        EXPECT(0x28, gbc.readMem(0xaf25));
        EXPECT(0x3f, gbc.readMem(0xaf26));
        // CC 025E
        gbc.setState(0xe41b, 0xdc70, 0x8250, 0x2c9, 0x6c36, 0xbccb, 0x1, 0x0);
        gbc.writeMem(0xe41b, { 0xcc, 0x77, 0xb7 });
        gbc.step();
        EXPECT(0x82, gbc.a());
        EXPECT(0x2, gbc.b());
        EXPECT(0xc9, gbc.c());
        EXPECT(0x6c, gbc.d());
        EXPECT(0x36, gbc.e());
        EXPECT(0xbc, gbc.h());
        EXPECT(0xcb, gbc.l());
        EXPECT(0xdc70, gbc.sp());
        EXPECT(0xe41e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xe41b));
        EXPECT(0x77, gbc.readMem(0xe41c));
        EXPECT(0xb7, gbc.readMem(0xe41d));
        // CC 025F
        gbc.setState(0xaa0a, 0x59c2, 0x1940, 0x2cc6, 0xea40, 0x5ddd, 0x1, 0x1);
        gbc.writeMem(0xaa0a, { 0xcc, 0x78, 0xc8 });
        gbc.step();
        EXPECT(0x19, gbc.a());
        EXPECT(0x2c, gbc.b());
        EXPECT(0xc6, gbc.c());
        EXPECT(0xea, gbc.d());
        EXPECT(0x40, gbc.e());
        EXPECT(0x5d, gbc.h());
        EXPECT(0xdd, gbc.l());
        EXPECT(0x59c2, gbc.sp());
        EXPECT(0xaa0d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xaa0a));
        EXPECT(0x78, gbc.readMem(0xaa0b));
        EXPECT(0xc8, gbc.readMem(0xaa0c));
        // CC 0262
        gbc.setState(0xd037, 0xb82f, 0x7dc0, 0x9042, 0x13bd, 0xbfad, 0x1, 0x0);
        gbc.writeMem(0xb82d, { 0x0, 0x0 });
        gbc.writeMem(0xd037, { 0xcc, 0x11, 0x3e });
        gbc.step();
        EXPECT(0x7d, gbc.a());
        EXPECT(0x90, gbc.b());
        EXPECT(0x42, gbc.c());
        EXPECT(0x13, gbc.d());
        EXPECT(0xbd, gbc.e());
        EXPECT(0xbf, gbc.h());
        EXPECT(0xad, gbc.l());
        EXPECT(0xb82d, gbc.sp());
        EXPECT(0x3e11, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x3a, gbc.readMem(0xb82d));
        EXPECT(0xd0, gbc.readMem(0xb82e));
        EXPECT(0xcc, gbc.readMem(0xd037));
        EXPECT(0x11, gbc.readMem(0xd038));
        EXPECT(0x3e, gbc.readMem(0xd039));
        // CC 0264
        gbc.setState(0x4b38, 0x365b, 0xf40, 0xc318, 0x6721, 0x58f2, 0x0, 0x1);
        gbc.writeMem(0x4b38, { 0xcc, 0x74, 0x45 });
        gbc.step();
        EXPECT(0xf, gbc.a());
        EXPECT(0xc3, gbc.b());
        EXPECT(0x18, gbc.c());
        EXPECT(0x67, gbc.d());
        EXPECT(0x21, gbc.e());
        EXPECT(0x58, gbc.h());
        EXPECT(0xf2, gbc.l());
        EXPECT(0x365b, gbc.sp());
        EXPECT(0x4b3b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 0266
        gbc.setState(0x28b7, 0x709e, 0x5550, 0xe960, 0x1e32, 0x7241, 0x0, 0x0);
        gbc.writeMem(0x28b7, { 0xcc, 0xd6, 0x23 });
        gbc.step();
        EXPECT(0x55, gbc.a());
        EXPECT(0xe9, gbc.b());
        EXPECT(0x60, gbc.c());
        EXPECT(0x1e, gbc.d());
        EXPECT(0x32, gbc.e());
        EXPECT(0x72, gbc.h());
        EXPECT(0x41, gbc.l());
        EXPECT(0x709e, gbc.sp());
        EXPECT(0x28ba, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 0267
        gbc.setState(0x690f, 0x43da, 0x9330, 0xb97d, 0xa4a8, 0x81c0, 0x0, 0x1);
        gbc.writeMem(0x690f, { 0xcc, 0xb2, 0x53 });
        gbc.step();
        EXPECT(0x93, gbc.a());
        EXPECT(0xb9, gbc.b());
        EXPECT(0x7d, gbc.c());
        EXPECT(0xa4, gbc.d());
        EXPECT(0xa8, gbc.e());
        EXPECT(0x81, gbc.h());
        EXPECT(0xc0, gbc.l());
        EXPECT(0x43da, gbc.sp());
        EXPECT(0x6912, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 0268
        gbc.setState(0x1209, 0xadd2, 0xc090, 0xc894, 0x12e3, 0x7279, 0x1, 0x1);
        gbc.writeMem(0x1209, { 0xcc, 0x67, 0x89 });
        gbc.writeMem(0xadd0, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xc0, gbc.a());
        EXPECT(0xc8, gbc.b());
        EXPECT(0x94, gbc.c());
        EXPECT(0x12, gbc.d());
        EXPECT(0xe3, gbc.e());
        EXPECT(0x72, gbc.h());
        EXPECT(0x79, gbc.l());
        EXPECT(0xadd0, gbc.sp());
        EXPECT(0x8967, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xc, gbc.readMem(0xadd0));
        EXPECT(0x12, gbc.readMem(0xadd1));
        // CC 026A
        gbc.setState(0x4de3, 0x5c47, 0x6820, 0xce5c, 0xf032, 0xbeb9, 0x0, 0x0);
        gbc.writeMem(0x4de3, { 0xcc, 0x7d, 0x2b });
        gbc.step();
        EXPECT(0x68, gbc.a());
        EXPECT(0xce, gbc.b());
        EXPECT(0x5c, gbc.c());
        EXPECT(0xf0, gbc.d());
        EXPECT(0x32, gbc.e());
        EXPECT(0xbe, gbc.h());
        EXPECT(0xb9, gbc.l());
        EXPECT(0x5c47, gbc.sp());
        EXPECT(0x4de6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 026B
        gbc.setState(0x3af1, 0xdd92, 0x90c0, 0x2d74, 0x6b84, 0x8831, 0x0, 0x0);
        gbc.writeMem(0x3af1, { 0xcc, 0x11, 0xdc });
        gbc.writeMem(0xdd90, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x90, gbc.a());
        EXPECT(0x2d, gbc.b());
        EXPECT(0x74, gbc.c());
        EXPECT(0x6b, gbc.d());
        EXPECT(0x84, gbc.e());
        EXPECT(0x88, gbc.h());
        EXPECT(0x31, gbc.l());
        EXPECT(0xdd90, gbc.sp());
        EXPECT(0xdc11, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xf4, gbc.readMem(0xdd90));
        EXPECT(0x3a, gbc.readMem(0xdd91));
        // CC 026E
        gbc.setState(0x7e2a, 0xaa1c, 0x9450, 0xb0ed, 0x21b7, 0x7f60, 0x0, 0x1);
        gbc.writeMem(0x7e2a, { 0xcc, 0x11, 0x3e });
        gbc.step();
        EXPECT(0x94, gbc.a());
        EXPECT(0xb0, gbc.b());
        EXPECT(0xed, gbc.c());
        EXPECT(0x21, gbc.d());
        EXPECT(0xb7, gbc.e());
        EXPECT(0x7f, gbc.h());
        EXPECT(0x60, gbc.l());
        EXPECT(0xaa1c, gbc.sp());
        EXPECT(0x7e2d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 026F
        gbc.setState(0xc99b, 0xefe, 0x3520, 0x970, 0x30dd, 0xba6, 0x0, 0x0);
        gbc.writeMem(0xc99b, { 0xcc, 0x6a, 0xda });
        gbc.step();
        EXPECT(0x35, gbc.a());
        EXPECT(0x9, gbc.b());
        EXPECT(0x70, gbc.c());
        EXPECT(0x30, gbc.d());
        EXPECT(0xdd, gbc.e());
        EXPECT(0xb, gbc.h());
        EXPECT(0xa6, gbc.l());
        EXPECT(0xefe, gbc.sp());
        EXPECT(0xc99e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xc99b));
        EXPECT(0x6a, gbc.readMem(0xc99c));
        EXPECT(0xda, gbc.readMem(0xc99d));
        // CC 0270
        gbc.setState(0xb03f, 0x2d3, 0xb370, 0x84de, 0xe65a, 0xaae1, 0x0, 0x0);
        gbc.writeMem(0xb03f, { 0xcc, 0x5c, 0xac });
        gbc.step();
        EXPECT(0xb3, gbc.a());
        EXPECT(0x84, gbc.b());
        EXPECT(0xde, gbc.c());
        EXPECT(0xe6, gbc.d());
        EXPECT(0x5a, gbc.e());
        EXPECT(0xaa, gbc.h());
        EXPECT(0xe1, gbc.l());
        EXPECT(0x2d3, gbc.sp());
        EXPECT(0xb042, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xb03f));
        EXPECT(0x5c, gbc.readMem(0xb040));
        EXPECT(0xac, gbc.readMem(0xb041));
        // CC 0271
        gbc.setState(0x9e5b, 0x5baa, 0xfe60, 0xc8bd, 0xc6b, 0x575c, 0x0, 0x0);
        gbc.writeMem(0x9e5b, { 0xcc, 0xcd, 0xa2 });
        gbc.step();
        EXPECT(0xfe, gbc.a());
        EXPECT(0xc8, gbc.b());
        EXPECT(0xbd, gbc.c());
        EXPECT(0xc, gbc.d());
        EXPECT(0x6b, gbc.e());
        EXPECT(0x57, gbc.h());
        EXPECT(0x5c, gbc.l());
        EXPECT(0x5baa, gbc.sp());
        EXPECT(0x9e5e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0x9e5b));
        EXPECT(0xcd, gbc.readMem(0x9e5c));
        EXPECT(0xa2, gbc.readMem(0x9e5d));
        // CC 0272
        gbc.setState(0xd4a3, 0x8c66, 0x41d0, 0xa718, 0x7ff1, 0x528a, 0x1, 0x1);
        gbc.writeMem(0x8c64, { 0x0, 0x0 });
        gbc.writeMem(0xd4a3, { 0xcc, 0x4, 0xc0 });
        gbc.step();
        EXPECT(0x41, gbc.a());
        EXPECT(0xa7, gbc.b());
        EXPECT(0x18, gbc.c());
        EXPECT(0x7f, gbc.d());
        EXPECT(0xf1, gbc.e());
        EXPECT(0x52, gbc.h());
        EXPECT(0x8a, gbc.l());
        EXPECT(0x8c64, gbc.sp());
        EXPECT(0xc004, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xa6, gbc.readMem(0x8c64));
        EXPECT(0xd4, gbc.readMem(0x8c65));
        EXPECT(0xcc, gbc.readMem(0xd4a3));
        EXPECT(0x4, gbc.readMem(0xd4a4));
        EXPECT(0xc0, gbc.readMem(0xd4a5));
        // CC 0273
        gbc.setState(0xae3a, 0x2254, 0xcb50, 0xaa5b, 0x1501, 0x2487, 0x0, 0x1);
        gbc.writeMem(0xae3a, { 0xcc, 0x48, 0x47 });
        gbc.step();
        EXPECT(0xcb, gbc.a());
        EXPECT(0xaa, gbc.b());
        EXPECT(0x5b, gbc.c());
        EXPECT(0x15, gbc.d());
        EXPECT(0x1, gbc.e());
        EXPECT(0x24, gbc.h());
        EXPECT(0x87, gbc.l());
        EXPECT(0x2254, gbc.sp());
        EXPECT(0xae3d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xae3a));
        EXPECT(0x48, gbc.readMem(0xae3b));
        EXPECT(0x47, gbc.readMem(0xae3c));
        // CC 0274
        gbc.setState(0x52b6, 0x814f, 0x8340, 0xac9a, 0xc042, 0x3097, 0x1, 0x0);
        gbc.writeMem(0x52b6, { 0xcc, 0x36, 0x5b });
        gbc.step();
        EXPECT(0x83, gbc.a());
        EXPECT(0xac, gbc.b());
        EXPECT(0x9a, gbc.c());
        EXPECT(0xc0, gbc.d());
        EXPECT(0x42, gbc.e());
        EXPECT(0x30, gbc.h());
        EXPECT(0x97, gbc.l());
        EXPECT(0x814f, gbc.sp());
        EXPECT(0x52b9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 0276
        gbc.setState(0x46ca, 0x418b, 0x5360, 0xd0ae, 0x4b2c, 0xec30, 0x0, 0x1);
        gbc.writeMem(0x46ca, { 0xcc, 0xae, 0x99 });
        gbc.step();
        EXPECT(0x53, gbc.a());
        EXPECT(0xd0, gbc.b());
        EXPECT(0xae, gbc.c());
        EXPECT(0x4b, gbc.d());
        EXPECT(0x2c, gbc.e());
        EXPECT(0xec, gbc.h());
        EXPECT(0x30, gbc.l());
        EXPECT(0x418b, gbc.sp());
        EXPECT(0x46cd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 0277
        gbc.setState(0x64f1, 0x645f, 0x7960, 0xfffc, 0xf37f, 0x357e, 0x0, 0x0);
        gbc.writeMem(0x64f1, { 0xcc, 0x75, 0x53 });
        gbc.step();
        EXPECT(0x79, gbc.a());
        EXPECT(0xff, gbc.b());
        EXPECT(0xfc, gbc.c());
        EXPECT(0xf3, gbc.d());
        EXPECT(0x7f, gbc.e());
        EXPECT(0x35, gbc.h());
        EXPECT(0x7e, gbc.l());
        EXPECT(0x645f, gbc.sp());
        EXPECT(0x64f4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 0278
        gbc.setState(0x4a0a, 0xbaa8, 0x7ce0, 0x8d, 0x4b80, 0xffb4, 0x0, 0x0);
        gbc.writeMem(0x4a0a, { 0xcc, 0x31, 0x5a });
        gbc.writeMem(0xbaa6, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x7c, gbc.a());
        EXPECT(0x0, gbc.b());
        EXPECT(0x8d, gbc.c());
        EXPECT(0x4b, gbc.d());
        EXPECT(0x80, gbc.e());
        EXPECT(0xff, gbc.h());
        EXPECT(0xb4, gbc.l());
        EXPECT(0xbaa6, gbc.sp());
        EXPECT(0x5a31, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xd, gbc.readMem(0xbaa6));
        EXPECT(0x4a, gbc.readMem(0xbaa7));
        // CC 0279
        gbc.setState(0xc292, 0xce13, 0x9ca0, 0x1131, 0xf02, 0x5ea4, 0x1, 0x1);
        gbc.writeMem(0xc292, { 0xcc, 0x6d, 0xf0 });
        gbc.writeMem(0xce11, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x9c, gbc.a());
        EXPECT(0x11, gbc.b());
        EXPECT(0x31, gbc.c());
        EXPECT(0xf, gbc.d());
        EXPECT(0x2, gbc.e());
        EXPECT(0x5e, gbc.h());
        EXPECT(0xa4, gbc.l());
        EXPECT(0xce11, gbc.sp());
        EXPECT(0xf06d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xc292));
        EXPECT(0x6d, gbc.readMem(0xc293));
        EXPECT(0xf0, gbc.readMem(0xc294));
        EXPECT(0x95, gbc.readMem(0xce11));
        EXPECT(0xc2, gbc.readMem(0xce12));
        // CC 027A
        gbc.setState(0x334b, 0x8a4f, 0xa780, 0xc82a, 0x92e7, 0xcc2c, 0x1, 0x0);
        gbc.writeMem(0x334b, { 0xcc, 0x6a, 0x7a });
        gbc.writeMem(0x8a4d, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xa7, gbc.a());
        EXPECT(0xc8, gbc.b());
        EXPECT(0x2a, gbc.c());
        EXPECT(0x92, gbc.d());
        EXPECT(0xe7, gbc.e());
        EXPECT(0xcc, gbc.h());
        EXPECT(0x2c, gbc.l());
        EXPECT(0x8a4d, gbc.sp());
        EXPECT(0x7a6a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x4e, gbc.readMem(0x8a4d));
        EXPECT(0x33, gbc.readMem(0x8a4e));
        // CC 027B
        gbc.setState(0xdfd8, 0xdad5, 0x53e0, 0xb3e5, 0xb119, 0x11d0, 0x1, 0x1);
        gbc.writeMem(0xdad3, { 0x0, 0x0 });
        gbc.writeMem(0xdfd8, { 0xcc, 0x4a, 0x3b });
        gbc.step();
        EXPECT(0x53, gbc.a());
        EXPECT(0xb3, gbc.b());
        EXPECT(0xe5, gbc.c());
        EXPECT(0xb1, gbc.d());
        EXPECT(0x19, gbc.e());
        EXPECT(0x11, gbc.h());
        EXPECT(0xd0, gbc.l());
        EXPECT(0xdad3, gbc.sp());
        EXPECT(0x3b4a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdb, gbc.readMem(0xdad3));
        EXPECT(0xdf, gbc.readMem(0xdad4));
        EXPECT(0xcc, gbc.readMem(0xdfd8));
        EXPECT(0x4a, gbc.readMem(0xdfd9));
        EXPECT(0x3b, gbc.readMem(0xdfda));
        // CC 027C
        gbc.setState(0x577c, 0x84e6, 0xcf00, 0xaed1, 0x611e, 0x1eeb, 0x0, 0x0);
        gbc.writeMem(0x577c, { 0xcc, 0xef, 0x3c });
        gbc.step();
        EXPECT(0xcf, gbc.a());
        EXPECT(0xae, gbc.b());
        EXPECT(0xd1, gbc.c());
        EXPECT(0x61, gbc.d());
        EXPECT(0x1e, gbc.e());
        EXPECT(0x1e, gbc.h());
        EXPECT(0xeb, gbc.l());
        EXPECT(0x84e6, gbc.sp());
        EXPECT(0x577f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 027D
        gbc.setState(0x49ea, 0xf0cd, 0xafb0, 0x9067, 0xb6e0, 0x23d4, 0x1, 0x0);
        gbc.writeMem(0x49ea, { 0xcc, 0xc1, 0x3b });
        gbc.writeMem(0xf0cb, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xaf, gbc.a());
        EXPECT(0x90, gbc.b());
        EXPECT(0x67, gbc.c());
        EXPECT(0xb6, gbc.d());
        EXPECT(0xe0, gbc.e());
        EXPECT(0x23, gbc.h());
        EXPECT(0xd4, gbc.l());
        EXPECT(0xf0cb, gbc.sp());
        EXPECT(0x3bc1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xed, gbc.readMem(0xf0cb));
        EXPECT(0x49, gbc.readMem(0xf0cc));
        // CC 027F
        gbc.setState(0x5650, 0xee3c, 0x4fb0, 0x8f8d, 0xb57e, 0xc0bc, 0x0, 0x1);
        gbc.writeMem(0x5650, { 0xcc, 0x58, 0xaf });
        gbc.writeMem(0xee3a, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x4f, gbc.a());
        EXPECT(0x8f, gbc.b());
        EXPECT(0x8d, gbc.c());
        EXPECT(0xb5, gbc.d());
        EXPECT(0x7e, gbc.e());
        EXPECT(0xc0, gbc.h());
        EXPECT(0xbc, gbc.l());
        EXPECT(0xee3a, gbc.sp());
        EXPECT(0xaf58, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x53, gbc.readMem(0xee3a));
        EXPECT(0x56, gbc.readMem(0xee3b));
        // CC 0280
        gbc.setState(0x84a4, 0xc913, 0x86c0, 0xea75, 0xbaa5, 0xaff6, 0x0, 0x1);
        gbc.writeMem(0x84a4, { 0xcc, 0xaf, 0x9e });
        gbc.writeMem(0xc911, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x86, gbc.a());
        EXPECT(0xea, gbc.b());
        EXPECT(0x75, gbc.c());
        EXPECT(0xba, gbc.d());
        EXPECT(0xa5, gbc.e());
        EXPECT(0xaf, gbc.h());
        EXPECT(0xf6, gbc.l());
        EXPECT(0xc911, gbc.sp());
        EXPECT(0x9eaf, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0x84a4));
        EXPECT(0xaf, gbc.readMem(0x84a5));
        EXPECT(0x9e, gbc.readMem(0x84a6));
        EXPECT(0xa7, gbc.readMem(0xc911));
        EXPECT(0x84, gbc.readMem(0xc912));
        // CC 0282
        gbc.setState(0x9b35, 0xda9b, 0xd7b0, 0x7f4f, 0x7222, 0x7232, 0x1, 0x0);
        gbc.writeMem(0x9b35, { 0xcc, 0x1c, 0x2c });
        gbc.writeMem(0xda99, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xd7, gbc.a());
        EXPECT(0x7f, gbc.b());
        EXPECT(0x4f, gbc.c());
        EXPECT(0x72, gbc.d());
        EXPECT(0x22, gbc.e());
        EXPECT(0x72, gbc.h());
        EXPECT(0x32, gbc.l());
        EXPECT(0xda99, gbc.sp());
        EXPECT(0x2c1c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0x9b35));
        EXPECT(0x1c, gbc.readMem(0x9b36));
        EXPECT(0x2c, gbc.readMem(0x9b37));
        EXPECT(0x38, gbc.readMem(0xda99));
        EXPECT(0x9b, gbc.readMem(0xda9a));
        // CC 0283
        gbc.setState(0x33c4, 0xe9b4, 0x8470, 0x3942, 0xebad, 0x2a73, 0x0, 0x0);
        gbc.writeMem(0x33c4, { 0xcc, 0xe2, 0xf5 });
        gbc.step();
        EXPECT(0x84, gbc.a());
        EXPECT(0x39, gbc.b());
        EXPECT(0x42, gbc.c());
        EXPECT(0xeb, gbc.d());
        EXPECT(0xad, gbc.e());
        EXPECT(0x2a, gbc.h());
        EXPECT(0x73, gbc.l());
        EXPECT(0xe9b4, gbc.sp());
        EXPECT(0x33c7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 0284
        gbc.setState(0x4846, 0x9caf, 0x49d0, 0xf1dc, 0x66ed, 0xfbb2, 0x0, 0x0);
        gbc.writeMem(0x4846, { 0xcc, 0xa0, 0x81 });
        gbc.writeMem(0x9cad, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x49, gbc.a());
        EXPECT(0xf1, gbc.b());
        EXPECT(0xdc, gbc.c());
        EXPECT(0x66, gbc.d());
        EXPECT(0xed, gbc.e());
        EXPECT(0xfb, gbc.h());
        EXPECT(0xb2, gbc.l());
        EXPECT(0x9cad, gbc.sp());
        EXPECT(0x81a0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x49, gbc.readMem(0x9cad));
        EXPECT(0x48, gbc.readMem(0x9cae));
        // CC 0285
        gbc.setState(0x9f59, 0x38d1, 0xfc40, 0x7bcf, 0x91bb, 0x433a, 0x0, 0x1);
        gbc.writeMem(0x9f59, { 0xcc, 0xeb, 0x34 });
        gbc.step();
        EXPECT(0xfc, gbc.a());
        EXPECT(0x7b, gbc.b());
        EXPECT(0xcf, gbc.c());
        EXPECT(0x91, gbc.d());
        EXPECT(0xbb, gbc.e());
        EXPECT(0x43, gbc.h());
        EXPECT(0x3a, gbc.l());
        EXPECT(0x38d1, gbc.sp());
        EXPECT(0x9f5c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0x9f59));
        EXPECT(0xeb, gbc.readMem(0x9f5a));
        EXPECT(0x34, gbc.readMem(0x9f5b));
        // CC 0286
        gbc.setState(0xae55, 0x6b71, 0x4130, 0xa094, 0x5a53, 0xbbce, 0x0, 0x1);
        gbc.writeMem(0xae55, { 0xcc, 0x78, 0x87 });
        gbc.step();
        EXPECT(0x41, gbc.a());
        EXPECT(0xa0, gbc.b());
        EXPECT(0x94, gbc.c());
        EXPECT(0x5a, gbc.d());
        EXPECT(0x53, gbc.e());
        EXPECT(0xbb, gbc.h());
        EXPECT(0xce, gbc.l());
        EXPECT(0x6b71, gbc.sp());
        EXPECT(0xae58, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xae55));
        EXPECT(0x78, gbc.readMem(0xae56));
        EXPECT(0x87, gbc.readMem(0xae57));
        // CC 0288
        gbc.setState(0x32c8, 0xb8f7, 0x80, 0x3184, 0x8f22, 0x784f, 0x1, 0x0);
        gbc.writeMem(0x32c8, { 0xcc, 0x18, 0x19 });
        gbc.writeMem(0xb8f5, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x31, gbc.b());
        EXPECT(0x84, gbc.c());
        EXPECT(0x8f, gbc.d());
        EXPECT(0x22, gbc.e());
        EXPECT(0x78, gbc.h());
        EXPECT(0x4f, gbc.l());
        EXPECT(0xb8f5, gbc.sp());
        EXPECT(0x1918, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcb, gbc.readMem(0xb8f5));
        EXPECT(0x32, gbc.readMem(0xb8f6));
        // CC 0289
        gbc.setState(0x28f4, 0x21ac, 0x4450, 0xce15, 0x260, 0xd3ff, 0x1, 0x0);
        gbc.writeMem(0x28f4, { 0xcc, 0x54, 0x71 });
        gbc.step();
        EXPECT(0x44, gbc.a());
        EXPECT(0xce, gbc.b());
        EXPECT(0x15, gbc.c());
        EXPECT(0x2, gbc.d());
        EXPECT(0x60, gbc.e());
        EXPECT(0xd3, gbc.h());
        EXPECT(0xff, gbc.l());
        EXPECT(0x21ac, gbc.sp());
        EXPECT(0x28f7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 028C
        gbc.setState(0x21b7, 0xc4b6, 0x3520, 0x7ddc, 0x93d9, 0x851, 0x1, 0x1);
        gbc.writeMem(0x21b7, { 0xcc, 0xb5, 0x88 });
        gbc.step();
        EXPECT(0x35, gbc.a());
        EXPECT(0x7d, gbc.b());
        EXPECT(0xdc, gbc.c());
        EXPECT(0x93, gbc.d());
        EXPECT(0xd9, gbc.e());
        EXPECT(0x8, gbc.h());
        EXPECT(0x51, gbc.l());
        EXPECT(0xc4b6, gbc.sp());
        EXPECT(0x21ba, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 028D
        gbc.setState(0x1f6, 0x784c, 0x4510, 0x194f, 0x4896, 0x8fdd, 0x0, 0x0);
        gbc.writeMem(0x1f6, { 0xcc, 0x72, 0x4c });
        gbc.step();
        EXPECT(0x45, gbc.a());
        EXPECT(0x19, gbc.b());
        EXPECT(0x4f, gbc.c());
        EXPECT(0x48, gbc.d());
        EXPECT(0x96, gbc.e());
        EXPECT(0x8f, gbc.h());
        EXPECT(0xdd, gbc.l());
        EXPECT(0x784c, gbc.sp());
        EXPECT(0x1f9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 028E
        gbc.setState(0xe650, 0xba42, 0x2de0, 0x65a9, 0x326, 0x74aa, 0x0, 0x0);
        gbc.writeMem(0xba40, { 0x0, 0x0 });
        gbc.writeMem(0xe650, { 0xcc, 0xc0, 0x48 });
        gbc.step();
        EXPECT(0x2d, gbc.a());
        EXPECT(0x65, gbc.b());
        EXPECT(0xa9, gbc.c());
        EXPECT(0x3, gbc.d());
        EXPECT(0x26, gbc.e());
        EXPECT(0x74, gbc.h());
        EXPECT(0xaa, gbc.l());
        EXPECT(0xba40, gbc.sp());
        EXPECT(0x48c0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x53, gbc.readMem(0xba40));
        EXPECT(0xe6, gbc.readMem(0xba41));
        EXPECT(0xcc, gbc.readMem(0xe650));
        EXPECT(0xc0, gbc.readMem(0xe651));
        EXPECT(0x48, gbc.readMem(0xe652));
        // CC 028F
        gbc.setState(0x6ba7, 0xa98a, 0x8680, 0xd57f, 0x728d, 0x4cfa, 0x1, 0x1);
        gbc.writeMem(0x6ba7, { 0xcc, 0x40, 0x7f });
        gbc.writeMem(0xa988, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x86, gbc.a());
        EXPECT(0xd5, gbc.b());
        EXPECT(0x7f, gbc.c());
        EXPECT(0x72, gbc.d());
        EXPECT(0x8d, gbc.e());
        EXPECT(0x4c, gbc.h());
        EXPECT(0xfa, gbc.l());
        EXPECT(0xa988, gbc.sp());
        EXPECT(0x7f40, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaa, gbc.readMem(0xa988));
        EXPECT(0x6b, gbc.readMem(0xa989));
        // CC 0290
        gbc.setState(0x5101, 0xad81, 0x8370, 0x6959, 0x84ce, 0x6b06, 0x1, 0x0);
        gbc.writeMem(0x5101, { 0xcc, 0xec, 0xbf });
        gbc.step();
        EXPECT(0x83, gbc.a());
        EXPECT(0x69, gbc.b());
        EXPECT(0x59, gbc.c());
        EXPECT(0x84, gbc.d());
        EXPECT(0xce, gbc.e());
        EXPECT(0x6b, gbc.h());
        EXPECT(0x6, gbc.l());
        EXPECT(0xad81, gbc.sp());
        EXPECT(0x5104, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 0293
        gbc.setState(0xe414, 0x486e, 0x5130, 0x974e, 0x8ae, 0xc18f, 0x1, 0x1);
        gbc.writeMem(0xe414, { 0xcc, 0x92, 0x34 });
        gbc.step();
        EXPECT(0x51, gbc.a());
        EXPECT(0x97, gbc.b());
        EXPECT(0x4e, gbc.c());
        EXPECT(0x8, gbc.d());
        EXPECT(0xae, gbc.e());
        EXPECT(0xc1, gbc.h());
        EXPECT(0x8f, gbc.l());
        EXPECT(0x486e, gbc.sp());
        EXPECT(0xe417, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xe414));
        EXPECT(0x92, gbc.readMem(0xe415));
        EXPECT(0x34, gbc.readMem(0xe416));
        // CC 0294
        gbc.setState(0x10a5, 0x249b, 0xb730, 0x6bb1, 0x5c9f, 0x9b39, 0x1, 0x1);
        gbc.writeMem(0x10a5, { 0xcc, 0x50, 0x16 });
        gbc.step();
        EXPECT(0xb7, gbc.a());
        EXPECT(0x6b, gbc.b());
        EXPECT(0xb1, gbc.c());
        EXPECT(0x5c, gbc.d());
        EXPECT(0x9f, gbc.e());
        EXPECT(0x9b, gbc.h());
        EXPECT(0x39, gbc.l());
        EXPECT(0x249b, gbc.sp());
        EXPECT(0x10a8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 0298
        gbc.setState(0x6d33, 0xea14, 0x93e0, 0x89ca, 0xeb4d, 0x1cff, 0x0, 0x0);
        gbc.writeMem(0x6d33, { 0xcc, 0xa9, 0xce });
        gbc.writeMem(0xea12, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x93, gbc.a());
        EXPECT(0x89, gbc.b());
        EXPECT(0xca, gbc.c());
        EXPECT(0xeb, gbc.d());
        EXPECT(0x4d, gbc.e());
        EXPECT(0x1c, gbc.h());
        EXPECT(0xff, gbc.l());
        EXPECT(0xea12, gbc.sp());
        EXPECT(0xcea9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x36, gbc.readMem(0xea12));
        EXPECT(0x6d, gbc.readMem(0xea13));
        // CC 0299
        gbc.setState(0x6008, 0x74f4, 0x7f10, 0x595d, 0xb364, 0x6adc, 0x0, 0x0);
        gbc.writeMem(0x6008, { 0xcc, 0xc3, 0x37 });
        gbc.step();
        EXPECT(0x7f, gbc.a());
        EXPECT(0x59, gbc.b());
        EXPECT(0x5d, gbc.c());
        EXPECT(0xb3, gbc.d());
        EXPECT(0x64, gbc.e());
        EXPECT(0x6a, gbc.h());
        EXPECT(0xdc, gbc.l());
        EXPECT(0x74f4, gbc.sp());
        EXPECT(0x600b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 029A
        gbc.setState(0x358c, 0xe159, 0x6ea0, 0xdbf, 0xa2d7, 0x2bb, 0x1, 0x1);
        gbc.writeMem(0x358c, { 0xcc, 0xd6, 0x83 });
        gbc.writeMem(0xe157, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x6e, gbc.a());
        EXPECT(0xd, gbc.b());
        EXPECT(0xbf, gbc.c());
        EXPECT(0xa2, gbc.d());
        EXPECT(0xd7, gbc.e());
        EXPECT(0x2, gbc.h());
        EXPECT(0xbb, gbc.l());
        EXPECT(0xe157, gbc.sp());
        EXPECT(0x83d6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x8f, gbc.readMem(0xe157));
        EXPECT(0x35, gbc.readMem(0xe158));
        // CC 029B
        gbc.setState(0x5d30, 0xac15, 0x8060, 0x8638, 0x1dcb, 0x9ffb, 0x1, 0x0);
        gbc.writeMem(0x5d30, { 0xcc, 0xcb, 0x95 });
        gbc.step();
        EXPECT(0x80, gbc.a());
        EXPECT(0x86, gbc.b());
        EXPECT(0x38, gbc.c());
        EXPECT(0x1d, gbc.d());
        EXPECT(0xcb, gbc.e());
        EXPECT(0x9f, gbc.h());
        EXPECT(0xfb, gbc.l());
        EXPECT(0xac15, gbc.sp());
        EXPECT(0x5d33, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 029D
        gbc.setState(0x8060, 0x65e5, 0xa410, 0x22b4, 0xef81, 0x209, 0x1, 0x0);
        gbc.writeMem(0x8060, { 0xcc, 0xe0, 0x1d });
        gbc.step();
        EXPECT(0xa4, gbc.a());
        EXPECT(0x22, gbc.b());
        EXPECT(0xb4, gbc.c());
        EXPECT(0xef, gbc.d());
        EXPECT(0x81, gbc.e());
        EXPECT(0x2, gbc.h());
        EXPECT(0x9, gbc.l());
        EXPECT(0x65e5, gbc.sp());
        EXPECT(0x8063, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0x8060));
        EXPECT(0xe0, gbc.readMem(0x8061));
        EXPECT(0x1d, gbc.readMem(0x8062));
        // CC 029F
        gbc.setState(0x1084, 0xb663, 0x2f70, 0xef83, 0xf134, 0xa5b2, 0x0, 0x1);
        gbc.writeMem(0x1084, { 0xcc, 0xed, 0xcf });
        gbc.step();
        EXPECT(0x2f, gbc.a());
        EXPECT(0xef, gbc.b());
        EXPECT(0x83, gbc.c());
        EXPECT(0xf1, gbc.d());
        EXPECT(0x34, gbc.e());
        EXPECT(0xa5, gbc.h());
        EXPECT(0xb2, gbc.l());
        EXPECT(0xb663, gbc.sp());
        EXPECT(0x1087, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 02A0
        gbc.setState(0x4ff8, 0xd91e, 0xeb10, 0x811b, 0x586b, 0x60f5, 0x1, 0x0);
        gbc.writeMem(0x4ff8, { 0xcc, 0x97, 0xe9 });
        gbc.step();
        EXPECT(0xeb, gbc.a());
        EXPECT(0x81, gbc.b());
        EXPECT(0x1b, gbc.c());
        EXPECT(0x58, gbc.d());
        EXPECT(0x6b, gbc.e());
        EXPECT(0x60, gbc.h());
        EXPECT(0xf5, gbc.l());
        EXPECT(0xd91e, gbc.sp());
        EXPECT(0x4ffb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 02A1
        gbc.setState(0x21e, 0xb221, 0x83f0, 0x113b, 0x4390, 0x40a8, 0x1, 0x1);
        gbc.writeMem(0x21e, { 0xcc, 0x52, 0xec });
        gbc.writeMem(0xb21f, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x83, gbc.a());
        EXPECT(0x11, gbc.b());
        EXPECT(0x3b, gbc.c());
        EXPECT(0x43, gbc.d());
        EXPECT(0x90, gbc.e());
        EXPECT(0x40, gbc.h());
        EXPECT(0xa8, gbc.l());
        EXPECT(0xb21f, gbc.sp());
        EXPECT(0xec52, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x21, gbc.readMem(0xb21f));
        EXPECT(0x2, gbc.readMem(0xb220));
        // CC 02A2
        gbc.setState(0x181, 0xfaad, 0x3150, 0xa054, 0xe46a, 0x6156, 0x1, 0x0);
        gbc.writeMem(0x181, { 0xcc, 0xae, 0xb4 });
        gbc.step();
        EXPECT(0x31, gbc.a());
        EXPECT(0xa0, gbc.b());
        EXPECT(0x54, gbc.c());
        EXPECT(0xe4, gbc.d());
        EXPECT(0x6a, gbc.e());
        EXPECT(0x61, gbc.h());
        EXPECT(0x56, gbc.l());
        EXPECT(0xfaad, gbc.sp());
        EXPECT(0x184, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 02A3
        gbc.setState(0xc234, 0x6b7f, 0x7f60, 0x7836, 0x4c2f, 0x9eec, 0x1, 0x1);
        gbc.writeMem(0xc234, { 0xcc, 0xa, 0xff });
        gbc.step();
        EXPECT(0x7f, gbc.a());
        EXPECT(0x78, gbc.b());
        EXPECT(0x36, gbc.c());
        EXPECT(0x4c, gbc.d());
        EXPECT(0x2f, gbc.e());
        EXPECT(0x9e, gbc.h());
        EXPECT(0xec, gbc.l());
        EXPECT(0x6b7f, gbc.sp());
        EXPECT(0xc237, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xc234));
        EXPECT(0xa, gbc.readMem(0xc235));
        EXPECT(0xff, gbc.readMem(0xc236));
        // CC 02A5
        gbc.setState(0x5d36, 0x3ccd, 0x4030, 0xff4d, 0x6dcd, 0x5184, 0x1, 0x0);
        gbc.writeMem(0x5d36, { 0xcc, 0x54, 0xde });
        gbc.step();
        EXPECT(0x40, gbc.a());
        EXPECT(0xff, gbc.b());
        EXPECT(0x4d, gbc.c());
        EXPECT(0x6d, gbc.d());
        EXPECT(0xcd, gbc.e());
        EXPECT(0x51, gbc.h());
        EXPECT(0x84, gbc.l());
        EXPECT(0x3ccd, gbc.sp());
        EXPECT(0x5d39, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 02A9
        gbc.setState(0xe747, 0x50fe, 0xc450, 0x6ae3, 0x2e78, 0xbc6e, 0x1, 0x1);
        gbc.writeMem(0xe747, { 0xcc, 0xf1, 0x4e });
        gbc.step();
        EXPECT(0xc4, gbc.a());
        EXPECT(0x6a, gbc.b());
        EXPECT(0xe3, gbc.c());
        EXPECT(0x2e, gbc.d());
        EXPECT(0x78, gbc.e());
        EXPECT(0xbc, gbc.h());
        EXPECT(0x6e, gbc.l());
        EXPECT(0x50fe, gbc.sp());
        EXPECT(0xe74a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xe747));
        EXPECT(0xf1, gbc.readMem(0xe748));
        EXPECT(0x4e, gbc.readMem(0xe749));
        // CC 02AB
        gbc.setState(0x618c, 0xa088, 0x32c0, 0x652e, 0x8853, 0xd13, 0x1, 0x0);
        gbc.writeMem(0x618c, { 0xcc, 0xb3, 0xc5 });
        gbc.writeMem(0xa086, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x32, gbc.a());
        EXPECT(0x65, gbc.b());
        EXPECT(0x2e, gbc.c());
        EXPECT(0x88, gbc.d());
        EXPECT(0x53, gbc.e());
        EXPECT(0xd, gbc.h());
        EXPECT(0x13, gbc.l());
        EXPECT(0xa086, gbc.sp());
        EXPECT(0xc5b3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x8f, gbc.readMem(0xa086));
        EXPECT(0x61, gbc.readMem(0xa087));
        // CC 02AC
        gbc.setState(0x5e0, 0xa40a, 0x80a0, 0xf222, 0x9b64, 0xe151, 0x0, 0x0);
        gbc.writeMem(0x5e0, { 0xcc, 0xf5, 0xe1 });
        gbc.writeMem(0xa408, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x80, gbc.a());
        EXPECT(0xf2, gbc.b());
        EXPECT(0x22, gbc.c());
        EXPECT(0x9b, gbc.d());
        EXPECT(0x64, gbc.e());
        EXPECT(0xe1, gbc.h());
        EXPECT(0x51, gbc.l());
        EXPECT(0xa408, gbc.sp());
        EXPECT(0xe1f5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xe3, gbc.readMem(0xa408));
        EXPECT(0x5, gbc.readMem(0xa409));
        // CC 02AD
        gbc.setState(0x89ed, 0x31cb, 0x9030, 0x7d2f, 0x11a7, 0x890f, 0x0, 0x1);
        gbc.writeMem(0x89ed, { 0xcc, 0xf2, 0x47 });
        gbc.step();
        EXPECT(0x90, gbc.a());
        EXPECT(0x7d, gbc.b());
        EXPECT(0x2f, gbc.c());
        EXPECT(0x11, gbc.d());
        EXPECT(0xa7, gbc.e());
        EXPECT(0x89, gbc.h());
        EXPECT(0xf, gbc.l());
        EXPECT(0x31cb, gbc.sp());
        EXPECT(0x89f0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0x89ed));
        EXPECT(0xf2, gbc.readMem(0x89ee));
        EXPECT(0x47, gbc.readMem(0x89ef));
        // CC 02AE
        gbc.setState(0x5cd2, 0x8e75, 0xfab0, 0x5af4, 0x576a, 0x406b, 0x0, 0x0);
        gbc.writeMem(0x5cd2, { 0xcc, 0xc6, 0x70 });
        gbc.writeMem(0x8e73, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xfa, gbc.a());
        EXPECT(0x5a, gbc.b());
        EXPECT(0xf4, gbc.c());
        EXPECT(0x57, gbc.d());
        EXPECT(0x6a, gbc.e());
        EXPECT(0x40, gbc.h());
        EXPECT(0x6b, gbc.l());
        EXPECT(0x8e73, gbc.sp());
        EXPECT(0x70c6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xd5, gbc.readMem(0x8e73));
        EXPECT(0x5c, gbc.readMem(0x8e74));
        // CC 02AF
        gbc.setState(0x4ba6, 0x50e3, 0x1000, 0x49d9, 0x258b, 0x5ddf, 0x1, 0x0);
        gbc.writeMem(0x4ba6, { 0xcc, 0xf6, 0xdc });
        gbc.step();
        EXPECT(0x10, gbc.a());
        EXPECT(0x49, gbc.b());
        EXPECT(0xd9, gbc.c());
        EXPECT(0x25, gbc.d());
        EXPECT(0x8b, gbc.e());
        EXPECT(0x5d, gbc.h());
        EXPECT(0xdf, gbc.l());
        EXPECT(0x50e3, gbc.sp());
        EXPECT(0x4ba9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 02B0
        gbc.setState(0x5a4f, 0x434a, 0x6830, 0x768d, 0x2e9a, 0xfa3b, 0x1, 0x1);
        gbc.writeMem(0x5a4f, { 0xcc, 0xb3, 0x35 });
        gbc.step();
        EXPECT(0x68, gbc.a());
        EXPECT(0x76, gbc.b());
        EXPECT(0x8d, gbc.c());
        EXPECT(0x2e, gbc.d());
        EXPECT(0x9a, gbc.e());
        EXPECT(0xfa, gbc.h());
        EXPECT(0x3b, gbc.l());
        EXPECT(0x434a, gbc.sp());
        EXPECT(0x5a52, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 02B2
        gbc.setState(0xa167, 0x1a09, 0x7200, 0x395e, 0xd6b8, 0xa2ca, 0x0, 0x1);
        gbc.writeMem(0xa167, { 0xcc, 0xe5, 0x52 });
        gbc.step();
        EXPECT(0x72, gbc.a());
        EXPECT(0x39, gbc.b());
        EXPECT(0x5e, gbc.c());
        EXPECT(0xd6, gbc.d());
        EXPECT(0xb8, gbc.e());
        EXPECT(0xa2, gbc.h());
        EXPECT(0xca, gbc.l());
        EXPECT(0x1a09, gbc.sp());
        EXPECT(0xa16a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xa167));
        EXPECT(0xe5, gbc.readMem(0xa168));
        EXPECT(0x52, gbc.readMem(0xa169));
        // CC 02B3
        gbc.setState(0xed81, 0x7970, 0xcf30, 0xea5d, 0x58f1, 0x1e89, 0x0, 0x1);
        gbc.writeMem(0xed81, { 0xcc, 0x5f, 0x73 });
        gbc.step();
        EXPECT(0xcf, gbc.a());
        EXPECT(0xea, gbc.b());
        EXPECT(0x5d, gbc.c());
        EXPECT(0x58, gbc.d());
        EXPECT(0xf1, gbc.e());
        EXPECT(0x1e, gbc.h());
        EXPECT(0x89, gbc.l());
        EXPECT(0x7970, gbc.sp());
        EXPECT(0xed84, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xed81));
        EXPECT(0x5f, gbc.readMem(0xed82));
        EXPECT(0x73, gbc.readMem(0xed83));
        // CC 02B4
        gbc.setState(0x3531, 0xcf6c, 0x31d0, 0xbfce, 0x4b80, 0x1e23, 0x1, 0x0);
        gbc.writeMem(0x3531, { 0xcc, 0x99, 0x3e });
        gbc.writeMem(0xcf6a, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x31, gbc.a());
        EXPECT(0xbf, gbc.b());
        EXPECT(0xce, gbc.c());
        EXPECT(0x4b, gbc.d());
        EXPECT(0x80, gbc.e());
        EXPECT(0x1e, gbc.h());
        EXPECT(0x23, gbc.l());
        EXPECT(0xcf6a, gbc.sp());
        EXPECT(0x3e99, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x34, gbc.readMem(0xcf6a));
        EXPECT(0x35, gbc.readMem(0xcf6b));
        // CC 02B5
        gbc.setState(0xa470, 0xae61, 0xed0, 0xa15, 0xa2d7, 0x9694, 0x1, 0x1);
        gbc.writeMem(0xa470, { 0xcc, 0x21, 0x37 });
        gbc.writeMem(0xae5f, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xe, gbc.a());
        EXPECT(0xa, gbc.b());
        EXPECT(0x15, gbc.c());
        EXPECT(0xa2, gbc.d());
        EXPECT(0xd7, gbc.e());
        EXPECT(0x96, gbc.h());
        EXPECT(0x94, gbc.l());
        EXPECT(0xae5f, gbc.sp());
        EXPECT(0x3721, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xa470));
        EXPECT(0x21, gbc.readMem(0xa471));
        EXPECT(0x37, gbc.readMem(0xa472));
        EXPECT(0x73, gbc.readMem(0xae5f));
        EXPECT(0xa4, gbc.readMem(0xae60));
        // CC 02B7
        gbc.setState(0x48cf, 0xf50a, 0x7780, 0x5826, 0x9f7f, 0x8346, 0x1, 0x1);
        gbc.writeMem(0x48cf, { 0xcc, 0x6e, 0x98 });
        gbc.writeMem(0xf508, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x77, gbc.a());
        EXPECT(0x58, gbc.b());
        EXPECT(0x26, gbc.c());
        EXPECT(0x9f, gbc.d());
        EXPECT(0x7f, gbc.e());
        EXPECT(0x83, gbc.h());
        EXPECT(0x46, gbc.l());
        EXPECT(0xf508, gbc.sp());
        EXPECT(0x986e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xd2, gbc.readMem(0xf508));
        EXPECT(0x48, gbc.readMem(0xf509));
        // CC 02B9
        gbc.setState(0x2eee, 0x82cd, 0x5f80, 0x2dfa, 0xf436, 0x348e, 0x1, 0x1);
        gbc.writeMem(0x2eee, { 0xcc, 0x6c, 0x53 });
        gbc.writeMem(0x82cb, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x5f, gbc.a());
        EXPECT(0x2d, gbc.b());
        EXPECT(0xfa, gbc.c());
        EXPECT(0xf4, gbc.d());
        EXPECT(0x36, gbc.e());
        EXPECT(0x34, gbc.h());
        EXPECT(0x8e, gbc.l());
        EXPECT(0x82cb, gbc.sp());
        EXPECT(0x536c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xf1, gbc.readMem(0x82cb));
        EXPECT(0x2e, gbc.readMem(0x82cc));
        // CC 02BA
        gbc.setState(0x4ea8, 0xd97f, 0xfbe0, 0x46ae, 0xe57e, 0xef70, 0x1, 0x0);
        gbc.writeMem(0x4ea8, { 0xcc, 0x8d, 0xdb });
        gbc.writeMem(0xd97d, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xfb, gbc.a());
        EXPECT(0x46, gbc.b());
        EXPECT(0xae, gbc.c());
        EXPECT(0xe5, gbc.d());
        EXPECT(0x7e, gbc.e());
        EXPECT(0xef, gbc.h());
        EXPECT(0x70, gbc.l());
        EXPECT(0xd97d, gbc.sp());
        EXPECT(0xdb8d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xab, gbc.readMem(0xd97d));
        EXPECT(0x4e, gbc.readMem(0xd97e));
        // CC 02BC
        gbc.setState(0x4775, 0xe19c, 0x5eb0, 0xfa10, 0x585a, 0xa653, 0x0, 0x0);
        gbc.writeMem(0x4775, { 0xcc, 0xac, 0x37 });
        gbc.writeMem(0xe19a, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x5e, gbc.a());
        EXPECT(0xfa, gbc.b());
        EXPECT(0x10, gbc.c());
        EXPECT(0x58, gbc.d());
        EXPECT(0x5a, gbc.e());
        EXPECT(0xa6, gbc.h());
        EXPECT(0x53, gbc.l());
        EXPECT(0xe19a, gbc.sp());
        EXPECT(0x37ac, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x78, gbc.readMem(0xe19a));
        EXPECT(0x47, gbc.readMem(0xe19b));
        // CC 02BD
        gbc.setState(0x257b, 0xdfe1, 0xf580, 0xbbfc, 0x60d2, 0xa211, 0x1, 0x1);
        gbc.writeMem(0x257b, { 0xcc, 0x4f, 0x57 });
        gbc.writeMem(0xdfdf, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xf5, gbc.a());
        EXPECT(0xbb, gbc.b());
        EXPECT(0xfc, gbc.c());
        EXPECT(0x60, gbc.d());
        EXPECT(0xd2, gbc.e());
        EXPECT(0xa2, gbc.h());
        EXPECT(0x11, gbc.l());
        EXPECT(0xdfdf, gbc.sp());
        EXPECT(0x574f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x7e, gbc.readMem(0xdfdf));
        EXPECT(0x25, gbc.readMem(0xdfe0));
        // CC 02BE
        gbc.setState(0xdf14, 0xdd61, 0x10d0, 0xf11e, 0xfb99, 0xe738, 0x0, 0x0);
        gbc.writeMem(0xdd5f, { 0x0, 0x0 });
        gbc.writeMem(0xdf14, { 0xcc, 0x58, 0x6c });
        gbc.step();
        EXPECT(0x10, gbc.a());
        EXPECT(0xf1, gbc.b());
        EXPECT(0x1e, gbc.c());
        EXPECT(0xfb, gbc.d());
        EXPECT(0x99, gbc.e());
        EXPECT(0xe7, gbc.h());
        EXPECT(0x38, gbc.l());
        EXPECT(0xdd5f, gbc.sp());
        EXPECT(0x6c58, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x17, gbc.readMem(0xdd5f));
        EXPECT(0xdf, gbc.readMem(0xdd60));
        EXPECT(0xcc, gbc.readMem(0xdf14));
        EXPECT(0x58, gbc.readMem(0xdf15));
        EXPECT(0x6c, gbc.readMem(0xdf16));
        // CC 02C0
        gbc.setState(0xed67, 0x3ad0, 0x9000, 0xc1f3, 0x6045, 0x48c9, 0x1, 0x1);
        gbc.writeMem(0xed67, { 0xcc, 0xc3, 0x51 });
        gbc.step();
        EXPECT(0x90, gbc.a());
        EXPECT(0xc1, gbc.b());
        EXPECT(0xf3, gbc.c());
        EXPECT(0x60, gbc.d());
        EXPECT(0x45, gbc.e());
        EXPECT(0x48, gbc.h());
        EXPECT(0xc9, gbc.l());
        EXPECT(0x3ad0, gbc.sp());
        EXPECT(0xed6a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xed67));
        EXPECT(0xc3, gbc.readMem(0xed68));
        EXPECT(0x51, gbc.readMem(0xed69));
        // CC 02C1
        gbc.setState(0x3495, 0x8fc6, 0x3370, 0x2bc0, 0x739f, 0xd364, 0x0, 0x1);
        gbc.writeMem(0x3495, { 0xcc, 0xb0, 0x5b });
        gbc.step();
        EXPECT(0x33, gbc.a());
        EXPECT(0x2b, gbc.b());
        EXPECT(0xc0, gbc.c());
        EXPECT(0x73, gbc.d());
        EXPECT(0x9f, gbc.e());
        EXPECT(0xd3, gbc.h());
        EXPECT(0x64, gbc.l());
        EXPECT(0x8fc6, gbc.sp());
        EXPECT(0x3498, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 02C2
        gbc.setState(0x1c6a, 0x96d4, 0x5c0, 0xf50e, 0x3c3d, 0xbc4a, 0x0, 0x0);
        gbc.writeMem(0x1c6a, { 0xcc, 0x70, 0x9d });
        gbc.writeMem(0x96d2, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x5, gbc.a());
        EXPECT(0xf5, gbc.b());
        EXPECT(0xe, gbc.c());
        EXPECT(0x3c, gbc.d());
        EXPECT(0x3d, gbc.e());
        EXPECT(0xbc, gbc.h());
        EXPECT(0x4a, gbc.l());
        EXPECT(0x96d2, gbc.sp());
        EXPECT(0x9d70, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x6d, gbc.readMem(0x96d2));
        EXPECT(0x1c, gbc.readMem(0x96d3));
        // CC 02C3
        gbc.setState(0x70d3, 0xca46, 0x33d0, 0x9901, 0x3a51, 0x7b24, 0x0, 0x1);
        gbc.writeMem(0x70d3, { 0xcc, 0x75, 0xf2 });
        gbc.writeMem(0xca44, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x33, gbc.a());
        EXPECT(0x99, gbc.b());
        EXPECT(0x1, gbc.c());
        EXPECT(0x3a, gbc.d());
        EXPECT(0x51, gbc.e());
        EXPECT(0x7b, gbc.h());
        EXPECT(0x24, gbc.l());
        EXPECT(0xca44, gbc.sp());
        EXPECT(0xf275, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xd6, gbc.readMem(0xca44));
        EXPECT(0x70, gbc.readMem(0xca45));
        // CC 02C5
        gbc.setState(0x3146, 0xd3ff, 0x1d50, 0x9dc8, 0xf36, 0xa9fd, 0x0, 0x1);
        gbc.writeMem(0x3146, { 0xcc, 0x4c, 0x29 });
        gbc.step();
        EXPECT(0x1d, gbc.a());
        EXPECT(0x9d, gbc.b());
        EXPECT(0xc8, gbc.c());
        EXPECT(0xf, gbc.d());
        EXPECT(0x36, gbc.e());
        EXPECT(0xa9, gbc.h());
        EXPECT(0xfd, gbc.l());
        EXPECT(0xd3ff, gbc.sp());
        EXPECT(0x3149, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 02C7
        gbc.setState(0x2f85, 0xd32d, 0xe730, 0xf380, 0x8673, 0x1f34, 0x1, 0x1);
        gbc.writeMem(0x2f85, { 0xcc, 0x32, 0x13 });
        gbc.step();
        EXPECT(0xe7, gbc.a());
        EXPECT(0xf3, gbc.b());
        EXPECT(0x80, gbc.c());
        EXPECT(0x86, gbc.d());
        EXPECT(0x73, gbc.e());
        EXPECT(0x1f, gbc.h());
        EXPECT(0x34, gbc.l());
        EXPECT(0xd32d, gbc.sp());
        EXPECT(0x2f88, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 02C9
        gbc.setState(0x8321, 0xbe61, 0x79a0, 0x5507, 0x40e0, 0x13f0, 0x0, 0x1);
        gbc.writeMem(0x8321, { 0xcc, 0x75, 0x8f });
        gbc.writeMem(0xbe5f, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x79, gbc.a());
        EXPECT(0x55, gbc.b());
        EXPECT(0x7, gbc.c());
        EXPECT(0x40, gbc.d());
        EXPECT(0xe0, gbc.e());
        EXPECT(0x13, gbc.h());
        EXPECT(0xf0, gbc.l());
        EXPECT(0xbe5f, gbc.sp());
        EXPECT(0x8f75, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0x8321));
        EXPECT(0x75, gbc.readMem(0x8322));
        EXPECT(0x8f, gbc.readMem(0x8323));
        EXPECT(0x24, gbc.readMem(0xbe5f));
        EXPECT(0x83, gbc.readMem(0xbe60));
        // CC 02CA
        gbc.setState(0x7686, 0x3b82, 0x8d00, 0xe4c8, 0xb7d7, 0x9383, 0x0, 0x1);
        gbc.writeMem(0x7686, { 0xcc, 0x65, 0xa1 });
        gbc.step();
        EXPECT(0x8d, gbc.a());
        EXPECT(0xe4, gbc.b());
        EXPECT(0xc8, gbc.c());
        EXPECT(0xb7, gbc.d());
        EXPECT(0xd7, gbc.e());
        EXPECT(0x93, gbc.h());
        EXPECT(0x83, gbc.l());
        EXPECT(0x3b82, gbc.sp());
        EXPECT(0x7689, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 02CC
        gbc.setState(0x6d2e, 0xd8ac, 0xbaa0, 0x55ed, 0x7a8f, 0xdd90, 0x0, 0x1);
        gbc.writeMem(0x6d2e, { 0xcc, 0x57, 0xb7 });
        gbc.writeMem(0xd8aa, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xba, gbc.a());
        EXPECT(0x55, gbc.b());
        EXPECT(0xed, gbc.c());
        EXPECT(0x7a, gbc.d());
        EXPECT(0x8f, gbc.e());
        EXPECT(0xdd, gbc.h());
        EXPECT(0x90, gbc.l());
        EXPECT(0xd8aa, gbc.sp());
        EXPECT(0xb757, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x31, gbc.readMem(0xd8aa));
        EXPECT(0x6d, gbc.readMem(0xd8ab));
        // CC 02CD
        gbc.setState(0x1da5, 0xdda0, 0xe010, 0xad85, 0xd918, 0x69d2, 0x0, 0x1);
        gbc.writeMem(0x1da5, { 0xcc, 0x5a, 0x5e });
        gbc.step();
        EXPECT(0xe0, gbc.a());
        EXPECT(0xad, gbc.b());
        EXPECT(0x85, gbc.c());
        EXPECT(0xd9, gbc.d());
        EXPECT(0x18, gbc.e());
        EXPECT(0x69, gbc.h());
        EXPECT(0xd2, gbc.l());
        EXPECT(0xdda0, gbc.sp());
        EXPECT(0x1da8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 02CF
        gbc.setState(0x6316, 0x8c42, 0xe3c0, 0xf83d, 0x88b7, 0xd9e4, 0x0, 0x1);
        gbc.writeMem(0x6316, { 0xcc, 0x5d, 0x41 });
        gbc.writeMem(0x8c40, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xe3, gbc.a());
        EXPECT(0xf8, gbc.b());
        EXPECT(0x3d, gbc.c());
        EXPECT(0x88, gbc.d());
        EXPECT(0xb7, gbc.e());
        EXPECT(0xd9, gbc.h());
        EXPECT(0xe4, gbc.l());
        EXPECT(0x8c40, gbc.sp());
        EXPECT(0x415d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x19, gbc.readMem(0x8c40));
        EXPECT(0x63, gbc.readMem(0x8c41));
        // CC 02D1
        gbc.setState(0x4ec1, 0xc228, 0x2080, 0x4db6, 0x82b4, 0xc870, 0x1, 0x0);
        gbc.writeMem(0x4ec1, { 0xcc, 0x90, 0xb4 });
        gbc.writeMem(0xc226, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x20, gbc.a());
        EXPECT(0x4d, gbc.b());
        EXPECT(0xb6, gbc.c());
        EXPECT(0x82, gbc.d());
        EXPECT(0xb4, gbc.e());
        EXPECT(0xc8, gbc.h());
        EXPECT(0x70, gbc.l());
        EXPECT(0xc226, gbc.sp());
        EXPECT(0xb490, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xc4, gbc.readMem(0xc226));
        EXPECT(0x4e, gbc.readMem(0xc227));
        // CC 02D2
        gbc.setState(0xd285, 0x366b, 0x5c70, 0x7e2d, 0x8bb8, 0xba19, 0x1, 0x1);
        gbc.writeMem(0xd285, { 0xcc, 0xa9, 0x8e });
        gbc.step();
        EXPECT(0x5c, gbc.a());
        EXPECT(0x7e, gbc.b());
        EXPECT(0x2d, gbc.c());
        EXPECT(0x8b, gbc.d());
        EXPECT(0xb8, gbc.e());
        EXPECT(0xba, gbc.h());
        EXPECT(0x19, gbc.l());
        EXPECT(0x366b, gbc.sp());
        EXPECT(0xd288, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xd285));
        EXPECT(0xa9, gbc.readMem(0xd286));
        EXPECT(0x8e, gbc.readMem(0xd287));
        // CC 02D3
        gbc.setState(0x25bf, 0x5c6a, 0x6c40, 0x48e7, 0x2b6d, 0xc5bf, 0x0, 0x0);
        gbc.writeMem(0x25bf, { 0xcc, 0x2b, 0x40 });
        gbc.step();
        EXPECT(0x6c, gbc.a());
        EXPECT(0x48, gbc.b());
        EXPECT(0xe7, gbc.c());
        EXPECT(0x2b, gbc.d());
        EXPECT(0x6d, gbc.e());
        EXPECT(0xc5, gbc.h());
        EXPECT(0xbf, gbc.l());
        EXPECT(0x5c6a, gbc.sp());
        EXPECT(0x25c2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 02D5
        gbc.setState(0x4b64, 0xc707, 0x1190, 0xae87, 0x8838, 0x4b9b, 0x0, 0x1);
        gbc.writeMem(0x4b64, { 0xcc, 0x5c, 0x53 });
        gbc.writeMem(0xc705, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x11, gbc.a());
        EXPECT(0xae, gbc.b());
        EXPECT(0x87, gbc.c());
        EXPECT(0x88, gbc.d());
        EXPECT(0x38, gbc.e());
        EXPECT(0x4b, gbc.h());
        EXPECT(0x9b, gbc.l());
        EXPECT(0xc705, gbc.sp());
        EXPECT(0x535c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x67, gbc.readMem(0xc705));
        EXPECT(0x4b, gbc.readMem(0xc706));
        // CC 02D6
        gbc.setState(0xd74, 0x9c55, 0xc3b0, 0x75b5, 0x79f9, 0xfe02, 0x1, 0x1);
        gbc.writeMem(0xd74, { 0xcc, 0xe6, 0xce });
        gbc.writeMem(0x9c53, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xc3, gbc.a());
        EXPECT(0x75, gbc.b());
        EXPECT(0xb5, gbc.c());
        EXPECT(0x79, gbc.d());
        EXPECT(0xf9, gbc.e());
        EXPECT(0xfe, gbc.h());
        EXPECT(0x2, gbc.l());
        EXPECT(0x9c53, gbc.sp());
        EXPECT(0xcee6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x77, gbc.readMem(0x9c53));
        EXPECT(0xd, gbc.readMem(0x9c54));
        // CC 02D7
        gbc.setState(0xc5ec, 0xcdb7, 0x4770, 0x77a4, 0x2314, 0xe350, 0x1, 0x0);
        gbc.writeMem(0xc5ec, { 0xcc, 0x4, 0xb8 });
        gbc.step();
        EXPECT(0x47, gbc.a());
        EXPECT(0x77, gbc.b());
        EXPECT(0xa4, gbc.c());
        EXPECT(0x23, gbc.d());
        EXPECT(0x14, gbc.e());
        EXPECT(0xe3, gbc.h());
        EXPECT(0x50, gbc.l());
        EXPECT(0xcdb7, gbc.sp());
        EXPECT(0xc5ef, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xc5ec));
        EXPECT(0x4, gbc.readMem(0xc5ed));
        EXPECT(0xb8, gbc.readMem(0xc5ee));
        // CC 02D8
        gbc.setState(0x32a9, 0xe34e, 0x950, 0xdb07, 0x9bd2, 0x757, 0x0, 0x1);
        gbc.writeMem(0x32a9, { 0xcc, 0x60, 0xf7 });
        gbc.step();
        EXPECT(0x9, gbc.a());
        EXPECT(0xdb, gbc.b());
        EXPECT(0x7, gbc.c());
        EXPECT(0x9b, gbc.d());
        EXPECT(0xd2, gbc.e());
        EXPECT(0x7, gbc.h());
        EXPECT(0x57, gbc.l());
        EXPECT(0xe34e, gbc.sp());
        EXPECT(0x32ac, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 02D9
        gbc.setState(0xa8d2, 0xa711, 0xe980, 0x5e64, 0xd6bf, 0x3e5d, 0x1, 0x1);
        gbc.writeMem(0xa70f, { 0x0, 0x0 });
        gbc.writeMem(0xa8d2, { 0xcc, 0x9e, 0x4a });
        gbc.step();
        EXPECT(0xe9, gbc.a());
        EXPECT(0x5e, gbc.b());
        EXPECT(0x64, gbc.c());
        EXPECT(0xd6, gbc.d());
        EXPECT(0xbf, gbc.e());
        EXPECT(0x3e, gbc.h());
        EXPECT(0x5d, gbc.l());
        EXPECT(0xa70f, gbc.sp());
        EXPECT(0x4a9e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xd5, gbc.readMem(0xa70f));
        EXPECT(0xa8, gbc.readMem(0xa710));
        EXPECT(0xcc, gbc.readMem(0xa8d2));
        EXPECT(0x9e, gbc.readMem(0xa8d3));
        EXPECT(0x4a, gbc.readMem(0xa8d4));
        // CC 02DA
        gbc.setState(0xaf69, 0x8bf8, 0xb5e0, 0x781e, 0xd59a, 0x99bc, 0x0, 0x1);
        gbc.writeMem(0x8bf6, { 0x0, 0x0 });
        gbc.writeMem(0xaf69, { 0xcc, 0x3f, 0xfd });
        gbc.step();
        EXPECT(0xb5, gbc.a());
        EXPECT(0x78, gbc.b());
        EXPECT(0x1e, gbc.c());
        EXPECT(0xd5, gbc.d());
        EXPECT(0x9a, gbc.e());
        EXPECT(0x99, gbc.h());
        EXPECT(0xbc, gbc.l());
        EXPECT(0x8bf6, gbc.sp());
        EXPECT(0xfd3f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x6c, gbc.readMem(0x8bf6));
        EXPECT(0xaf, gbc.readMem(0x8bf7));
        EXPECT(0xcc, gbc.readMem(0xaf69));
        EXPECT(0x3f, gbc.readMem(0xaf6a));
        EXPECT(0xfd, gbc.readMem(0xaf6b));
        // CC 02DB
        gbc.setState(0xfd0, 0x510b, 0x5620, 0x6c29, 0xb908, 0xd57c, 0x1, 0x0);
        gbc.writeMem(0xfd0, { 0xcc, 0x4c, 0x1 });
        gbc.step();
        EXPECT(0x56, gbc.a());
        EXPECT(0x6c, gbc.b());
        EXPECT(0x29, gbc.c());
        EXPECT(0xb9, gbc.d());
        EXPECT(0x8, gbc.e());
        EXPECT(0xd5, gbc.h());
        EXPECT(0x7c, gbc.l());
        EXPECT(0x510b, gbc.sp());
        EXPECT(0xfd3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 02DC
        gbc.setState(0x49f0, 0x3702, 0x6430, 0x3df3, 0x2f41, 0x538e, 0x1, 0x0);
        gbc.writeMem(0x49f0, { 0xcc, 0x39, 0xbd });
        gbc.step();
        EXPECT(0x64, gbc.a());
        EXPECT(0x3d, gbc.b());
        EXPECT(0xf3, gbc.c());
        EXPECT(0x2f, gbc.d());
        EXPECT(0x41, gbc.e());
        EXPECT(0x53, gbc.h());
        EXPECT(0x8e, gbc.l());
        EXPECT(0x3702, gbc.sp());
        EXPECT(0x49f3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 02DD
        gbc.setState(0xc772, 0x5afa, 0xd540, 0x45b0, 0xdf45, 0xc0ae, 0x1, 0x1);
        gbc.writeMem(0xc772, { 0xcc, 0x95, 0xf5 });
        gbc.step();
        EXPECT(0xd5, gbc.a());
        EXPECT(0x45, gbc.b());
        EXPECT(0xb0, gbc.c());
        EXPECT(0xdf, gbc.d());
        EXPECT(0x45, gbc.e());
        EXPECT(0xc0, gbc.h());
        EXPECT(0xae, gbc.l());
        EXPECT(0x5afa, gbc.sp());
        EXPECT(0xc775, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xc772));
        EXPECT(0x95, gbc.readMem(0xc773));
        EXPECT(0xf5, gbc.readMem(0xc774));
        // CC 02DE
        gbc.setState(0x61c4, 0x8ed0, 0x6af0, 0xc7b5, 0xb54d, 0x226c, 0x0, 0x1);
        gbc.writeMem(0x61c4, { 0xcc, 0x2d, 0x80 });
        gbc.writeMem(0x8ece, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x6a, gbc.a());
        EXPECT(0xc7, gbc.b());
        EXPECT(0xb5, gbc.c());
        EXPECT(0xb5, gbc.d());
        EXPECT(0x4d, gbc.e());
        EXPECT(0x22, gbc.h());
        EXPECT(0x6c, gbc.l());
        EXPECT(0x8ece, gbc.sp());
        EXPECT(0x802d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xc7, gbc.readMem(0x8ece));
        EXPECT(0x61, gbc.readMem(0x8ecf));
        // CC 02E0
        gbc.setState(0x6e80, 0x425d, 0x2170, 0x3290, 0x5e9f, 0x50, 0x1, 0x0);
        gbc.writeMem(0x6e80, { 0xcc, 0xbc, 0xed });
        gbc.step();
        EXPECT(0x21, gbc.a());
        EXPECT(0x32, gbc.b());
        EXPECT(0x90, gbc.c());
        EXPECT(0x5e, gbc.d());
        EXPECT(0x9f, gbc.e());
        EXPECT(0x0, gbc.h());
        EXPECT(0x50, gbc.l());
        EXPECT(0x425d, gbc.sp());
        EXPECT(0x6e83, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 02E1
        gbc.setState(0xcfe1, 0xb3dc, 0x3b60, 0x3575, 0x42db, 0xd62f, 0x1, 0x1);
        gbc.writeMem(0xcfe1, { 0xcc, 0x73, 0xfa });
        gbc.step();
        EXPECT(0x3b, gbc.a());
        EXPECT(0x35, gbc.b());
        EXPECT(0x75, gbc.c());
        EXPECT(0x42, gbc.d());
        EXPECT(0xdb, gbc.e());
        EXPECT(0xd6, gbc.h());
        EXPECT(0x2f, gbc.l());
        EXPECT(0xb3dc, gbc.sp());
        EXPECT(0xcfe4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xcfe1));
        EXPECT(0x73, gbc.readMem(0xcfe2));
        EXPECT(0xfa, gbc.readMem(0xcfe3));
        // CC 02E2
        gbc.setState(0x1c45, 0xd021, 0xd7f0, 0x77c8, 0x2333, 0xdf73, 0x1, 0x1);
        gbc.writeMem(0x1c45, { 0xcc, 0x11, 0xf });
        gbc.writeMem(0xd01f, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xd7, gbc.a());
        EXPECT(0x77, gbc.b());
        EXPECT(0xc8, gbc.c());
        EXPECT(0x23, gbc.d());
        EXPECT(0x33, gbc.e());
        EXPECT(0xdf, gbc.h());
        EXPECT(0x73, gbc.l());
        EXPECT(0xd01f, gbc.sp());
        EXPECT(0xf11, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x48, gbc.readMem(0xd01f));
        EXPECT(0x1c, gbc.readMem(0xd020));
        // CC 02E3
        gbc.setState(0x3880, 0x5d1, 0x1410, 0xdf7a, 0xd0ff, 0x6da5, 0x0, 0x1);
        gbc.writeMem(0x3880, { 0xcc, 0x31, 0xe });
        gbc.step();
        EXPECT(0x14, gbc.a());
        EXPECT(0xdf, gbc.b());
        EXPECT(0x7a, gbc.c());
        EXPECT(0xd0, gbc.d());
        EXPECT(0xff, gbc.e());
        EXPECT(0x6d, gbc.h());
        EXPECT(0xa5, gbc.l());
        EXPECT(0x5d1, gbc.sp());
        EXPECT(0x3883, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 02E4
        gbc.setState(0x108a, 0xf166, 0x8b20, 0xedcb, 0xa9df, 0xbae8, 0x0, 0x1);
        gbc.writeMem(0x108a, { 0xcc, 0x14, 0xeb });
        gbc.step();
        EXPECT(0x8b, gbc.a());
        EXPECT(0xed, gbc.b());
        EXPECT(0xcb, gbc.c());
        EXPECT(0xa9, gbc.d());
        EXPECT(0xdf, gbc.e());
        EXPECT(0xba, gbc.h());
        EXPECT(0xe8, gbc.l());
        EXPECT(0xf166, gbc.sp());
        EXPECT(0x108d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 02E5
        gbc.setState(0x6e21, 0x2bfe, 0x3340, 0xa866, 0x3f22, 0x33ad, 0x1, 0x1);
        gbc.writeMem(0x6e21, { 0xcc, 0x11, 0x3c });
        gbc.step();
        EXPECT(0x33, gbc.a());
        EXPECT(0xa8, gbc.b());
        EXPECT(0x66, gbc.c());
        EXPECT(0x3f, gbc.d());
        EXPECT(0x22, gbc.e());
        EXPECT(0x33, gbc.h());
        EXPECT(0xad, gbc.l());
        EXPECT(0x2bfe, gbc.sp());
        EXPECT(0x6e24, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 02E8
        gbc.setState(0xab3a, 0x9852, 0x14f0, 0x3523, 0xf2b0, 0x3b42, 0x1, 0x0);
        gbc.writeMem(0x9850, { 0x0, 0x0 });
        gbc.writeMem(0xab3a, { 0xcc, 0xe7, 0xce });
        gbc.step();
        EXPECT(0x14, gbc.a());
        EXPECT(0x35, gbc.b());
        EXPECT(0x23, gbc.c());
        EXPECT(0xf2, gbc.d());
        EXPECT(0xb0, gbc.e());
        EXPECT(0x3b, gbc.h());
        EXPECT(0x42, gbc.l());
        EXPECT(0x9850, gbc.sp());
        EXPECT(0xcee7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x3d, gbc.readMem(0x9850));
        EXPECT(0xab, gbc.readMem(0x9851));
        EXPECT(0xcc, gbc.readMem(0xab3a));
        EXPECT(0xe7, gbc.readMem(0xab3b));
        EXPECT(0xce, gbc.readMem(0xab3c));
        // CC 02EB
        gbc.setState(0x74aa, 0xd1cb, 0x23c0, 0xc9b2, 0xa10a, 0x9688, 0x1, 0x0);
        gbc.writeMem(0x74aa, { 0xcc, 0xc0, 0xdf });
        gbc.writeMem(0xd1c9, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x23, gbc.a());
        EXPECT(0xc9, gbc.b());
        EXPECT(0xb2, gbc.c());
        EXPECT(0xa1, gbc.d());
        EXPECT(0xa, gbc.e());
        EXPECT(0x96, gbc.h());
        EXPECT(0x88, gbc.l());
        EXPECT(0xd1c9, gbc.sp());
        EXPECT(0xdfc0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xad, gbc.readMem(0xd1c9));
        EXPECT(0x74, gbc.readMem(0xd1ca));
        // CC 02EC
        gbc.setState(0x3997, 0xfe41, 0x9f60, 0xd135, 0xdad3, 0xa286, 0x0, 0x0);
        gbc.writeMem(0x3997, { 0xcc, 0xf9, 0xaa });
        gbc.step();
        EXPECT(0x9f, gbc.a());
        EXPECT(0xd1, gbc.b());
        EXPECT(0x35, gbc.c());
        EXPECT(0xda, gbc.d());
        EXPECT(0xd3, gbc.e());
        EXPECT(0xa2, gbc.h());
        EXPECT(0x86, gbc.l());
        EXPECT(0xfe41, gbc.sp());
        EXPECT(0x399a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 02EE
        gbc.setState(0xcb81, 0x4154, 0xd270, 0x51b7, 0x8fb3, 0x876c, 0x1, 0x1);
        gbc.writeMem(0xcb81, { 0xcc, 0x33, 0x12 });
        gbc.step();
        EXPECT(0xd2, gbc.a());
        EXPECT(0x51, gbc.b());
        EXPECT(0xb7, gbc.c());
        EXPECT(0x8f, gbc.d());
        EXPECT(0xb3, gbc.e());
        EXPECT(0x87, gbc.h());
        EXPECT(0x6c, gbc.l());
        EXPECT(0x4154, gbc.sp());
        EXPECT(0xcb84, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xcb81));
        EXPECT(0x33, gbc.readMem(0xcb82));
        EXPECT(0x12, gbc.readMem(0xcb83));
        // CC 02EF
        gbc.setState(0x2c79, 0xfd3d, 0x1310, 0xfa4d, 0x8e8f, 0x42d4, 0x0, 0x0);
        gbc.writeMem(0x2c79, { 0xcc, 0x9d, 0x8 });
        gbc.step();
        EXPECT(0x13, gbc.a());
        EXPECT(0xfa, gbc.b());
        EXPECT(0x4d, gbc.c());
        EXPECT(0x8e, gbc.d());
        EXPECT(0x8f, gbc.e());
        EXPECT(0x42, gbc.h());
        EXPECT(0xd4, gbc.l());
        EXPECT(0xfd3d, gbc.sp());
        EXPECT(0x2c7c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 02F1
        gbc.setState(0x4bc5, 0xa2f8, 0xddc0, 0xa705, 0x8ced, 0x2945, 0x0, 0x0);
        gbc.writeMem(0x4bc5, { 0xcc, 0x83, 0xd4 });
        gbc.writeMem(0xa2f6, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xdd, gbc.a());
        EXPECT(0xa7, gbc.b());
        EXPECT(0x5, gbc.c());
        EXPECT(0x8c, gbc.d());
        EXPECT(0xed, gbc.e());
        EXPECT(0x29, gbc.h());
        EXPECT(0x45, gbc.l());
        EXPECT(0xa2f6, gbc.sp());
        EXPECT(0xd483, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xc8, gbc.readMem(0xa2f6));
        EXPECT(0x4b, gbc.readMem(0xa2f7));
        // CC 02F2
        gbc.setState(0x7e11, 0xe64, 0x5720, 0x2042, 0xb265, 0xe179, 0x0, 0x0);
        gbc.writeMem(0x7e11, { 0xcc, 0x5d, 0xaf });
        gbc.step();
        EXPECT(0x57, gbc.a());
        EXPECT(0x20, gbc.b());
        EXPECT(0x42, gbc.c());
        EXPECT(0xb2, gbc.d());
        EXPECT(0x65, gbc.e());
        EXPECT(0xe1, gbc.h());
        EXPECT(0x79, gbc.l());
        EXPECT(0xe64, gbc.sp());
        EXPECT(0x7e14, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 02F3
        gbc.setState(0x6ee3, 0xc41, 0xe100, 0x711a, 0xb221, 0xcf51, 0x1, 0x0);
        gbc.writeMem(0x6ee3, { 0xcc, 0xd6, 0x1a });
        gbc.step();
        EXPECT(0xe1, gbc.a());
        EXPECT(0x71, gbc.b());
        EXPECT(0x1a, gbc.c());
        EXPECT(0xb2, gbc.d());
        EXPECT(0x21, gbc.e());
        EXPECT(0xcf, gbc.h());
        EXPECT(0x51, gbc.l());
        EXPECT(0xc41, gbc.sp());
        EXPECT(0x6ee6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 02F4
        gbc.setState(0x2d1e, 0x237b, 0x3f60, 0x32f8, 0x51d0, 0xbbf8, 0x0, 0x0);
        gbc.writeMem(0x2d1e, { 0xcc, 0x3d, 0x28 });
        gbc.step();
        EXPECT(0x3f, gbc.a());
        EXPECT(0x32, gbc.b());
        EXPECT(0xf8, gbc.c());
        EXPECT(0x51, gbc.d());
        EXPECT(0xd0, gbc.e());
        EXPECT(0xbb, gbc.h());
        EXPECT(0xf8, gbc.l());
        EXPECT(0x237b, gbc.sp());
        EXPECT(0x2d21, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 02F5
        gbc.setState(0xb66f, 0x9e52, 0xa0a0, 0xd603, 0x9a50, 0x54a, 0x0, 0x0);
        gbc.writeMem(0x9e50, { 0x0, 0x0 });
        gbc.writeMem(0xb66f, { 0xcc, 0x7, 0x88 });
        gbc.step();
        EXPECT(0xa0, gbc.a());
        EXPECT(0xd6, gbc.b());
        EXPECT(0x3, gbc.c());
        EXPECT(0x9a, gbc.d());
        EXPECT(0x50, gbc.e());
        EXPECT(0x5, gbc.h());
        EXPECT(0x4a, gbc.l());
        EXPECT(0x9e50, gbc.sp());
        EXPECT(0x8807, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x72, gbc.readMem(0x9e50));
        EXPECT(0xb6, gbc.readMem(0x9e51));
        EXPECT(0xcc, gbc.readMem(0xb66f));
        EXPECT(0x7, gbc.readMem(0xb670));
        EXPECT(0x88, gbc.readMem(0xb671));
        // CC 02F7
        gbc.setState(0xdea7, 0xa4f, 0xb070, 0x4801, 0x78f3, 0xc1bd, 0x1, 0x1);
        gbc.writeMem(0xdea7, { 0xcc, 0x7f, 0xfd });
        gbc.step();
        EXPECT(0xb0, gbc.a());
        EXPECT(0x48, gbc.b());
        EXPECT(0x1, gbc.c());
        EXPECT(0x78, gbc.d());
        EXPECT(0xf3, gbc.e());
        EXPECT(0xc1, gbc.h());
        EXPECT(0xbd, gbc.l());
        EXPECT(0xa4f, gbc.sp());
        EXPECT(0xdeaa, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xdea7));
        EXPECT(0x7f, gbc.readMem(0xdea8));
        EXPECT(0xfd, gbc.readMem(0xdea9));
        // CC 02F8
        gbc.setState(0x6042, 0xf8f8, 0xc60, 0x6ef8, 0x3fc3, 0xb768, 0x0, 0x1);
        gbc.writeMem(0x6042, { 0xcc, 0x6b, 0x64 });
        gbc.step();
        EXPECT(0xc, gbc.a());
        EXPECT(0x6e, gbc.b());
        EXPECT(0xf8, gbc.c());
        EXPECT(0x3f, gbc.d());
        EXPECT(0xc3, gbc.e());
        EXPECT(0xb7, gbc.h());
        EXPECT(0x68, gbc.l());
        EXPECT(0xf8f8, gbc.sp());
        EXPECT(0x6045, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 02F9
        gbc.setState(0x248c, 0x83a3, 0x73e0, 0x3624, 0x77e4, 0xac3a, 0x1, 0x1);
        gbc.writeMem(0x248c, { 0xcc, 0x77, 0xba });
        gbc.writeMem(0x83a1, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x73, gbc.a());
        EXPECT(0x36, gbc.b());
        EXPECT(0x24, gbc.c());
        EXPECT(0x77, gbc.d());
        EXPECT(0xe4, gbc.e());
        EXPECT(0xac, gbc.h());
        EXPECT(0x3a, gbc.l());
        EXPECT(0x83a1, gbc.sp());
        EXPECT(0xba77, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x8f, gbc.readMem(0x83a1));
        EXPECT(0x24, gbc.readMem(0x83a2));
        // CC 02FB
        gbc.setState(0x8098, 0xce9, 0xf360, 0x55f3, 0xfa6e, 0xe6ad, 0x1, 0x1);
        gbc.writeMem(0x8098, { 0xcc, 0xc4, 0xa4 });
        gbc.step();
        EXPECT(0xf3, gbc.a());
        EXPECT(0x55, gbc.b());
        EXPECT(0xf3, gbc.c());
        EXPECT(0xfa, gbc.d());
        EXPECT(0x6e, gbc.e());
        EXPECT(0xe6, gbc.h());
        EXPECT(0xad, gbc.l());
        EXPECT(0xce9, gbc.sp());
        EXPECT(0x809b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0x8098));
        EXPECT(0xc4, gbc.readMem(0x8099));
        EXPECT(0xa4, gbc.readMem(0x809a));
        // CC 02FD
        gbc.setState(0x9ba3, 0x6c95, 0x3150, 0xec23, 0xe88b, 0x1989, 0x0, 0x0);
        gbc.writeMem(0x9ba3, { 0xcc, 0xcd, 0x59 });
        gbc.step();
        EXPECT(0x31, gbc.a());
        EXPECT(0xec, gbc.b());
        EXPECT(0x23, gbc.c());
        EXPECT(0xe8, gbc.d());
        EXPECT(0x8b, gbc.e());
        EXPECT(0x19, gbc.h());
        EXPECT(0x89, gbc.l());
        EXPECT(0x6c95, gbc.sp());
        EXPECT(0x9ba6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0x9ba3));
        EXPECT(0xcd, gbc.readMem(0x9ba4));
        EXPECT(0x59, gbc.readMem(0x9ba5));
        // CC 02FE
        gbc.setState(0xd26d, 0xae47, 0x2170, 0x30bc, 0x53, 0xbe94, 0x1, 0x0);
        gbc.writeMem(0xd26d, { 0xcc, 0x9c, 0xed });
        gbc.step();
        EXPECT(0x21, gbc.a());
        EXPECT(0x30, gbc.b());
        EXPECT(0xbc, gbc.c());
        EXPECT(0x0, gbc.d());
        EXPECT(0x53, gbc.e());
        EXPECT(0xbe, gbc.h());
        EXPECT(0x94, gbc.l());
        EXPECT(0xae47, gbc.sp());
        EXPECT(0xd270, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xd26d));
        EXPECT(0x9c, gbc.readMem(0xd26e));
        EXPECT(0xed, gbc.readMem(0xd26f));
        // CC 0300
        gbc.setState(0x48c6, 0x9019, 0x8110, 0x1326, 0x7373, 0x6efb, 0x0, 0x0);
        gbc.writeMem(0x48c6, { 0xcc, 0x45, 0xa1 });
        gbc.step();
        EXPECT(0x81, gbc.a());
        EXPECT(0x13, gbc.b());
        EXPECT(0x26, gbc.c());
        EXPECT(0x73, gbc.d());
        EXPECT(0x73, gbc.e());
        EXPECT(0x6e, gbc.h());
        EXPECT(0xfb, gbc.l());
        EXPECT(0x9019, gbc.sp());
        EXPECT(0x48c9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 0301
        gbc.setState(0xb160, 0x4f55, 0x4960, 0xfdac, 0x7498, 0xf04d, 0x1, 0x1);
        gbc.writeMem(0xb160, { 0xcc, 0xef, 0x20 });
        gbc.step();
        EXPECT(0x49, gbc.a());
        EXPECT(0xfd, gbc.b());
        EXPECT(0xac, gbc.c());
        EXPECT(0x74, gbc.d());
        EXPECT(0x98, gbc.e());
        EXPECT(0xf0, gbc.h());
        EXPECT(0x4d, gbc.l());
        EXPECT(0x4f55, gbc.sp());
        EXPECT(0xb163, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xb160));
        EXPECT(0xef, gbc.readMem(0xb161));
        EXPECT(0x20, gbc.readMem(0xb162));
        // CC 0302
        gbc.setState(0x75e2, 0xa020, 0x9140, 0xf061, 0x5eb6, 0xe75b, 0x1, 0x1);
        gbc.writeMem(0x75e2, { 0xcc, 0xb9, 0x50 });
        gbc.step();
        EXPECT(0x91, gbc.a());
        EXPECT(0xf0, gbc.b());
        EXPECT(0x61, gbc.c());
        EXPECT(0x5e, gbc.d());
        EXPECT(0xb6, gbc.e());
        EXPECT(0xe7, gbc.h());
        EXPECT(0x5b, gbc.l());
        EXPECT(0xa020, gbc.sp());
        EXPECT(0x75e5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 0303
        gbc.setState(0x57cf, 0xec2e, 0x4180, 0x3e40, 0x9d1e, 0x3690, 0x1, 0x1);
        gbc.writeMem(0x57cf, { 0xcc, 0x31, 0x67 });
        gbc.writeMem(0xec2c, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x41, gbc.a());
        EXPECT(0x3e, gbc.b());
        EXPECT(0x40, gbc.c());
        EXPECT(0x9d, gbc.d());
        EXPECT(0x1e, gbc.e());
        EXPECT(0x36, gbc.h());
        EXPECT(0x90, gbc.l());
        EXPECT(0xec2c, gbc.sp());
        EXPECT(0x6731, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xd2, gbc.readMem(0xec2c));
        EXPECT(0x57, gbc.readMem(0xec2d));
        // CC 0304
        gbc.setState(0xb0d6, 0x2103, 0x6640, 0xebeb, 0x12be, 0x9a13, 0x0, 0x1);
        gbc.writeMem(0xb0d6, { 0xcc, 0x8d, 0xad });
        gbc.step();
        EXPECT(0x66, gbc.a());
        EXPECT(0xeb, gbc.b());
        EXPECT(0xeb, gbc.c());
        EXPECT(0x12, gbc.d());
        EXPECT(0xbe, gbc.e());
        EXPECT(0x9a, gbc.h());
        EXPECT(0x13, gbc.l());
        EXPECT(0x2103, gbc.sp());
        EXPECT(0xb0d9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xb0d6));
        EXPECT(0x8d, gbc.readMem(0xb0d7));
        EXPECT(0xad, gbc.readMem(0xb0d8));
        // CC 0305
        gbc.setState(0x433f, 0x9016, 0x22f0, 0x8abf, 0x3af1, 0x962a, 0x0, 0x0);
        gbc.writeMem(0x433f, { 0xcc, 0x91, 0xa8 });
        gbc.writeMem(0x9014, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x22, gbc.a());
        EXPECT(0x8a, gbc.b());
        EXPECT(0xbf, gbc.c());
        EXPECT(0x3a, gbc.d());
        EXPECT(0xf1, gbc.e());
        EXPECT(0x96, gbc.h());
        EXPECT(0x2a, gbc.l());
        EXPECT(0x9014, gbc.sp());
        EXPECT(0xa891, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x42, gbc.readMem(0x9014));
        EXPECT(0x43, gbc.readMem(0x9015));
        // CC 0307
        gbc.setState(0xe142, 0xaf87, 0xbd60, 0x21e6, 0xd640, 0x5579, 0x0, 0x1);
        gbc.writeMem(0xe142, { 0xcc, 0xfd, 0xc3 });
        gbc.step();
        EXPECT(0xbd, gbc.a());
        EXPECT(0x21, gbc.b());
        EXPECT(0xe6, gbc.c());
        EXPECT(0xd6, gbc.d());
        EXPECT(0x40, gbc.e());
        EXPECT(0x55, gbc.h());
        EXPECT(0x79, gbc.l());
        EXPECT(0xaf87, gbc.sp());
        EXPECT(0xe145, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xe142));
        EXPECT(0xfd, gbc.readMem(0xe143));
        EXPECT(0xc3, gbc.readMem(0xe144));
        // CC 0308
        gbc.setState(0x6171, 0xeb78, 0x3df0, 0x2a42, 0x5ba7, 0xa9a6, 0x1, 0x1);
        gbc.writeMem(0x6171, { 0xcc, 0x6c, 0x74 });
        gbc.writeMem(0xeb76, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x3d, gbc.a());
        EXPECT(0x2a, gbc.b());
        EXPECT(0x42, gbc.c());
        EXPECT(0x5b, gbc.d());
        EXPECT(0xa7, gbc.e());
        EXPECT(0xa9, gbc.h());
        EXPECT(0xa6, gbc.l());
        EXPECT(0xeb76, gbc.sp());
        EXPECT(0x746c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x74, gbc.readMem(0xeb76));
        EXPECT(0x61, gbc.readMem(0xeb77));
        // CC 030A
        gbc.setState(0x18a0, 0xa86a, 0xa860, 0x82b9, 0xbf31, 0x1cf6, 0x1, 0x0);
        gbc.writeMem(0x18a0, { 0xcc, 0x59, 0xb4 });
        gbc.step();
        EXPECT(0xa8, gbc.a());
        EXPECT(0x82, gbc.b());
        EXPECT(0xb9, gbc.c());
        EXPECT(0xbf, gbc.d());
        EXPECT(0x31, gbc.e());
        EXPECT(0x1c, gbc.h());
        EXPECT(0xf6, gbc.l());
        EXPECT(0xa86a, gbc.sp());
        EXPECT(0x18a3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 030B
        gbc.setState(0xc477, 0x1759, 0xc120, 0xb07, 0xa680, 0xd93b, 0x1, 0x0);
        gbc.writeMem(0xc477, { 0xcc, 0xd, 0xfc });
        gbc.step();
        EXPECT(0xc1, gbc.a());
        EXPECT(0xb, gbc.b());
        EXPECT(0x7, gbc.c());
        EXPECT(0xa6, gbc.d());
        EXPECT(0x80, gbc.e());
        EXPECT(0xd9, gbc.h());
        EXPECT(0x3b, gbc.l());
        EXPECT(0x1759, gbc.sp());
        EXPECT(0xc47a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xc477));
        EXPECT(0xd, gbc.readMem(0xc478));
        EXPECT(0xfc, gbc.readMem(0xc479));
        // CC 030C
        gbc.setState(0xb121, 0xcdf6, 0xb360, 0x9a28, 0xceb0, 0x7e49, 0x0, 0x0);
        gbc.writeMem(0xb121, { 0xcc, 0x2c, 0xde });
        gbc.step();
        EXPECT(0xb3, gbc.a());
        EXPECT(0x9a, gbc.b());
        EXPECT(0x28, gbc.c());
        EXPECT(0xce, gbc.d());
        EXPECT(0xb0, gbc.e());
        EXPECT(0x7e, gbc.h());
        EXPECT(0x49, gbc.l());
        EXPECT(0xcdf6, gbc.sp());
        EXPECT(0xb124, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xb121));
        EXPECT(0x2c, gbc.readMem(0xb122));
        EXPECT(0xde, gbc.readMem(0xb123));
        // CC 030E
        gbc.setState(0x4106, 0x6f1f, 0x2860, 0x9ac5, 0xb6d1, 0x812d, 0x0, 0x0);
        gbc.writeMem(0x4106, { 0xcc, 0xfb, 0x80 });
        gbc.step();
        EXPECT(0x28, gbc.a());
        EXPECT(0x9a, gbc.b());
        EXPECT(0xc5, gbc.c());
        EXPECT(0xb6, gbc.d());
        EXPECT(0xd1, gbc.e());
        EXPECT(0x81, gbc.h());
        EXPECT(0x2d, gbc.l());
        EXPECT(0x6f1f, gbc.sp());
        EXPECT(0x4109, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 0310
        gbc.setState(0x38c7, 0xf884, 0xbe10, 0x1bb7, 0x8372, 0xfe89, 0x0, 0x0);
        gbc.writeMem(0x38c7, { 0xcc, 0xa, 0xa6 });
        gbc.step();
        EXPECT(0xbe, gbc.a());
        EXPECT(0x1b, gbc.b());
        EXPECT(0xb7, gbc.c());
        EXPECT(0x83, gbc.d());
        EXPECT(0x72, gbc.e());
        EXPECT(0xfe, gbc.h());
        EXPECT(0x89, gbc.l());
        EXPECT(0xf884, gbc.sp());
        EXPECT(0x38ca, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 0312
        gbc.setState(0x5657, 0xaf43, 0x27e0, 0xa64, 0x80d, 0xa3d4, 0x0, 0x1);
        gbc.writeMem(0x5657, { 0xcc, 0x6c, 0x30 });
        gbc.writeMem(0xaf41, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x27, gbc.a());
        EXPECT(0xa, gbc.b());
        EXPECT(0x64, gbc.c());
        EXPECT(0x8, gbc.d());
        EXPECT(0xd, gbc.e());
        EXPECT(0xa3, gbc.h());
        EXPECT(0xd4, gbc.l());
        EXPECT(0xaf41, gbc.sp());
        EXPECT(0x306c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x5a, gbc.readMem(0xaf41));
        EXPECT(0x56, gbc.readMem(0xaf42));
        // CC 0313
        gbc.setState(0x1d71, 0xc0fe, 0x18d0, 0x7032, 0xce3a, 0xc7d2, 0x1, 0x1);
        gbc.writeMem(0x1d71, { 0xcc, 0x4a, 0x3e });
        gbc.writeMem(0xc0fc, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x18, gbc.a());
        EXPECT(0x70, gbc.b());
        EXPECT(0x32, gbc.c());
        EXPECT(0xce, gbc.d());
        EXPECT(0x3a, gbc.e());
        EXPECT(0xc7, gbc.h());
        EXPECT(0xd2, gbc.l());
        EXPECT(0xc0fc, gbc.sp());
        EXPECT(0x3e4a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x74, gbc.readMem(0xc0fc));
        EXPECT(0x1d, gbc.readMem(0xc0fd));
        // CC 0314
        gbc.setState(0x723a, 0xa560, 0xba40, 0x8bd1, 0xd732, 0x10e9, 0x1, 0x1);
        gbc.writeMem(0x723a, { 0xcc, 0xf0, 0xfc });
        gbc.step();
        EXPECT(0xba, gbc.a());
        EXPECT(0x8b, gbc.b());
        EXPECT(0xd1, gbc.c());
        EXPECT(0xd7, gbc.d());
        EXPECT(0x32, gbc.e());
        EXPECT(0x10, gbc.h());
        EXPECT(0xe9, gbc.l());
        EXPECT(0xa560, gbc.sp());
        EXPECT(0x723d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 0316
        gbc.setState(0x4620, 0x67ab, 0xfa00, 0x213b, 0x8389, 0xf82e, 0x1, 0x0);
        gbc.writeMem(0x4620, { 0xcc, 0x83, 0x8e });
        gbc.step();
        EXPECT(0xfa, gbc.a());
        EXPECT(0x21, gbc.b());
        EXPECT(0x3b, gbc.c());
        EXPECT(0x83, gbc.d());
        EXPECT(0x89, gbc.e());
        EXPECT(0xf8, gbc.h());
        EXPECT(0x2e, gbc.l());
        EXPECT(0x67ab, gbc.sp());
        EXPECT(0x4623, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 0319
        gbc.setState(0xbec, 0xd2e3, 0xcb00, 0xc069, 0xd3ca, 0x9819, 0x1, 0x0);
        gbc.writeMem(0xbec, { 0xcc, 0x79, 0x78 });
        gbc.step();
        EXPECT(0xcb, gbc.a());
        EXPECT(0xc0, gbc.b());
        EXPECT(0x69, gbc.c());
        EXPECT(0xd3, gbc.d());
        EXPECT(0xca, gbc.e());
        EXPECT(0x98, gbc.h());
        EXPECT(0x19, gbc.l());
        EXPECT(0xd2e3, gbc.sp());
        EXPECT(0xbef, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 031A
        gbc.setState(0x7af2, 0x451b, 0x7240, 0xea7b, 0x2372, 0x26c0, 0x0, 0x1);
        gbc.writeMem(0x7af2, { 0xcc, 0xb8, 0x5f });
        gbc.step();
        EXPECT(0x72, gbc.a());
        EXPECT(0xea, gbc.b());
        EXPECT(0x7b, gbc.c());
        EXPECT(0x23, gbc.d());
        EXPECT(0x72, gbc.e());
        EXPECT(0x26, gbc.h());
        EXPECT(0xc0, gbc.l());
        EXPECT(0x451b, gbc.sp());
        EXPECT(0x7af5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 031B
        gbc.setState(0xe9c1, 0x630b, 0xe70, 0xec10, 0xbbb6, 0xf1e2, 0x0, 0x0);
        gbc.writeMem(0xe9c1, { 0xcc, 0xc0, 0xd8 });
        gbc.step();
        EXPECT(0xe, gbc.a());
        EXPECT(0xec, gbc.b());
        EXPECT(0x10, gbc.c());
        EXPECT(0xbb, gbc.d());
        EXPECT(0xb6, gbc.e());
        EXPECT(0xf1, gbc.h());
        EXPECT(0xe2, gbc.l());
        EXPECT(0x630b, gbc.sp());
        EXPECT(0xe9c4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xe9c1));
        EXPECT(0xc0, gbc.readMem(0xe9c2));
        EXPECT(0xd8, gbc.readMem(0xe9c3));
        // CC 031C
        gbc.setState(0xade, 0x5614, 0xa770, 0x23a, 0x47e2, 0x641b, 0x0, 0x0);
        gbc.writeMem(0xade, { 0xcc, 0xe4, 0x57 });
        gbc.step();
        EXPECT(0xa7, gbc.a());
        EXPECT(0x2, gbc.b());
        EXPECT(0x3a, gbc.c());
        EXPECT(0x47, gbc.d());
        EXPECT(0xe2, gbc.e());
        EXPECT(0x64, gbc.h());
        EXPECT(0x1b, gbc.l());
        EXPECT(0x5614, gbc.sp());
        EXPECT(0xae1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 031D
        gbc.setState(0x3620, 0xf503, 0xe270, 0x536, 0xda8b, 0xc168, 0x1, 0x0);
        gbc.writeMem(0x3620, { 0xcc, 0x9c, 0x60 });
        gbc.step();
        EXPECT(0xe2, gbc.a());
        EXPECT(0x5, gbc.b());
        EXPECT(0x36, gbc.c());
        EXPECT(0xda, gbc.d());
        EXPECT(0x8b, gbc.e());
        EXPECT(0xc1, gbc.h());
        EXPECT(0x68, gbc.l());
        EXPECT(0xf503, gbc.sp());
        EXPECT(0x3623, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 031E
        gbc.setState(0x838f, 0xcf21, 0xd060, 0x9f7f, 0x9783, 0xb600, 0x0, 0x1);
        gbc.writeMem(0x838f, { 0xcc, 0xbd, 0x64 });
        gbc.step();
        EXPECT(0xd0, gbc.a());
        EXPECT(0x9f, gbc.b());
        EXPECT(0x7f, gbc.c());
        EXPECT(0x97, gbc.d());
        EXPECT(0x83, gbc.e());
        EXPECT(0xb6, gbc.h());
        EXPECT(0x0, gbc.l());
        EXPECT(0xcf21, gbc.sp());
        EXPECT(0x8392, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0x838f));
        EXPECT(0xbd, gbc.readMem(0x8390));
        EXPECT(0x64, gbc.readMem(0x8391));
        // CC 031F
        gbc.setState(0x50fc, 0xc450, 0x4a0, 0x764f, 0x5f7f, 0xf095, 0x1, 0x0);
        gbc.writeMem(0x50fc, { 0xcc, 0xba, 0xdf });
        gbc.writeMem(0xc44e, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x4, gbc.a());
        EXPECT(0x76, gbc.b());
        EXPECT(0x4f, gbc.c());
        EXPECT(0x5f, gbc.d());
        EXPECT(0x7f, gbc.e());
        EXPECT(0xf0, gbc.h());
        EXPECT(0x95, gbc.l());
        EXPECT(0xc44e, gbc.sp());
        EXPECT(0xdfba, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xff, gbc.readMem(0xc44e));
        EXPECT(0x50, gbc.readMem(0xc44f));
        // CC 0321
        gbc.setState(0x52ec, 0xd723, 0x6df0, 0x5962, 0xf67, 0x2eae, 0x1, 0x1);
        gbc.writeMem(0x52ec, { 0xcc, 0x9f, 0xfb });
        gbc.writeMem(0xd721, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x6d, gbc.a());
        EXPECT(0x59, gbc.b());
        EXPECT(0x62, gbc.c());
        EXPECT(0xf, gbc.d());
        EXPECT(0x67, gbc.e());
        EXPECT(0x2e, gbc.h());
        EXPECT(0xae, gbc.l());
        EXPECT(0xd721, gbc.sp());
        EXPECT(0xfb9f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xef, gbc.readMem(0xd721));
        EXPECT(0x52, gbc.readMem(0xd722));
        // CC 0322
        gbc.setState(0x77ec, 0xcfe2, 0xe520, 0xd9a6, 0xec7f, 0xdf83, 0x1, 0x0);
        gbc.writeMem(0x77ec, { 0xcc, 0xf2, 0x70 });
        gbc.step();
        EXPECT(0xe5, gbc.a());
        EXPECT(0xd9, gbc.b());
        EXPECT(0xa6, gbc.c());
        EXPECT(0xec, gbc.d());
        EXPECT(0x7f, gbc.e());
        EXPECT(0xdf, gbc.h());
        EXPECT(0x83, gbc.l());
        EXPECT(0xcfe2, gbc.sp());
        EXPECT(0x77ef, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 0324
        gbc.setState(0xc198, 0x7bb4, 0xfe10, 0x2e93, 0xd368, 0xde5, 0x1, 0x1);
        gbc.writeMem(0xc198, { 0xcc, 0xc0, 0xde });
        gbc.step();
        EXPECT(0xfe, gbc.a());
        EXPECT(0x2e, gbc.b());
        EXPECT(0x93, gbc.c());
        EXPECT(0xd3, gbc.d());
        EXPECT(0x68, gbc.e());
        EXPECT(0xd, gbc.h());
        EXPECT(0xe5, gbc.l());
        EXPECT(0x7bb4, gbc.sp());
        EXPECT(0xc19b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xc198));
        EXPECT(0xc0, gbc.readMem(0xc199));
        EXPECT(0xde, gbc.readMem(0xc19a));
        // CC 0327
        gbc.setState(0xebd6, 0xa195, 0xca80, 0xfb0, 0x87fa, 0xb462, 0x1, 0x1);
        gbc.writeMem(0xa193, { 0x0, 0x0 });
        gbc.writeMem(0xebd6, { 0xcc, 0xb5, 0x10 });
        gbc.step();
        EXPECT(0xca, gbc.a());
        EXPECT(0xf, gbc.b());
        EXPECT(0xb0, gbc.c());
        EXPECT(0x87, gbc.d());
        EXPECT(0xfa, gbc.e());
        EXPECT(0xb4, gbc.h());
        EXPECT(0x62, gbc.l());
        EXPECT(0xa193, gbc.sp());
        EXPECT(0x10b5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xd9, gbc.readMem(0xa193));
        EXPECT(0xeb, gbc.readMem(0xa194));
        EXPECT(0xcc, gbc.readMem(0xebd6));
        EXPECT(0xb5, gbc.readMem(0xebd7));
        EXPECT(0x10, gbc.readMem(0xebd8));
        // CC 0328
        gbc.setState(0xb27f, 0x4d32, 0x2130, 0xf98c, 0xa4a6, 0x968d, 0x1, 0x0);
        gbc.writeMem(0xb27f, { 0xcc, 0x3c, 0x7 });
        gbc.step();
        EXPECT(0x21, gbc.a());
        EXPECT(0xf9, gbc.b());
        EXPECT(0x8c, gbc.c());
        EXPECT(0xa4, gbc.d());
        EXPECT(0xa6, gbc.e());
        EXPECT(0x96, gbc.h());
        EXPECT(0x8d, gbc.l());
        EXPECT(0x4d32, gbc.sp());
        EXPECT(0xb282, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xb27f));
        EXPECT(0x3c, gbc.readMem(0xb280));
        EXPECT(0x7, gbc.readMem(0xb281));
        // CC 0329
        gbc.setState(0xcd51, 0x38b5, 0x860, 0x249a, 0xf93b, 0x52eb, 0x0, 0x0);
        gbc.writeMem(0xcd51, { 0xcc, 0x36, 0x8b });
        gbc.step();
        EXPECT(0x8, gbc.a());
        EXPECT(0x24, gbc.b());
        EXPECT(0x9a, gbc.c());
        EXPECT(0xf9, gbc.d());
        EXPECT(0x3b, gbc.e());
        EXPECT(0x52, gbc.h());
        EXPECT(0xeb, gbc.l());
        EXPECT(0x38b5, gbc.sp());
        EXPECT(0xcd54, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xcd51));
        EXPECT(0x36, gbc.readMem(0xcd52));
        EXPECT(0x8b, gbc.readMem(0xcd53));
        // CC 032A
        gbc.setState(0x8d97, 0xf5be, 0xa0b0, 0xb859, 0x52db, 0x6ab2, 0x1, 0x1);
        gbc.writeMem(0x8d97, { 0xcc, 0x39, 0x59 });
        gbc.writeMem(0xf5bc, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xa0, gbc.a());
        EXPECT(0xb8, gbc.b());
        EXPECT(0x59, gbc.c());
        EXPECT(0x52, gbc.d());
        EXPECT(0xdb, gbc.e());
        EXPECT(0x6a, gbc.h());
        EXPECT(0xb2, gbc.l());
        EXPECT(0xf5bc, gbc.sp());
        EXPECT(0x5939, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0x8d97));
        EXPECT(0x39, gbc.readMem(0x8d98));
        EXPECT(0x59, gbc.readMem(0x8d99));
        EXPECT(0x9a, gbc.readMem(0xf5bc));
        EXPECT(0x8d, gbc.readMem(0xf5bd));
        // CC 032E
        gbc.setState(0x359a, 0x216d, 0xb30, 0xa5d0, 0xd99a, 0xe8cc, 0x0, 0x0);
        gbc.writeMem(0x359a, { 0xcc, 0xfc, 0x3c });
        gbc.step();
        EXPECT(0xb, gbc.a());
        EXPECT(0xa5, gbc.b());
        EXPECT(0xd0, gbc.c());
        EXPECT(0xd9, gbc.d());
        EXPECT(0x9a, gbc.e());
        EXPECT(0xe8, gbc.h());
        EXPECT(0xcc, gbc.l());
        EXPECT(0x216d, gbc.sp());
        EXPECT(0x359d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 0330
        gbc.setState(0xdb27, 0xecb9, 0xe570, 0x12e9, 0x3c98, 0xa16b, 0x1, 0x0);
        gbc.writeMem(0xdb27, { 0xcc, 0x86, 0x9c });
        gbc.step();
        EXPECT(0xe5, gbc.a());
        EXPECT(0x12, gbc.b());
        EXPECT(0xe9, gbc.c());
        EXPECT(0x3c, gbc.d());
        EXPECT(0x98, gbc.e());
        EXPECT(0xa1, gbc.h());
        EXPECT(0x6b, gbc.l());
        EXPECT(0xecb9, gbc.sp());
        EXPECT(0xdb2a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xdb27));
        EXPECT(0x86, gbc.readMem(0xdb28));
        EXPECT(0x9c, gbc.readMem(0xdb29));
        // CC 0332
        gbc.setState(0xca04, 0xafcd, 0xeaf0, 0x690e, 0xe6e8, 0xe415, 0x1, 0x1);
        gbc.writeMem(0xafcb, { 0x0, 0x0 });
        gbc.writeMem(0xca04, { 0xcc, 0x12, 0x8e });
        gbc.step();
        EXPECT(0xea, gbc.a());
        EXPECT(0x69, gbc.b());
        EXPECT(0xe, gbc.c());
        EXPECT(0xe6, gbc.d());
        EXPECT(0xe8, gbc.e());
        EXPECT(0xe4, gbc.h());
        EXPECT(0x15, gbc.l());
        EXPECT(0xafcb, gbc.sp());
        EXPECT(0x8e12, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x7, gbc.readMem(0xafcb));
        EXPECT(0xca, gbc.readMem(0xafcc));
        EXPECT(0xcc, gbc.readMem(0xca04));
        EXPECT(0x12, gbc.readMem(0xca05));
        EXPECT(0x8e, gbc.readMem(0xca06));
        // CC 0334
        gbc.setState(0x9444, 0x6707, 0x7b40, 0x6730, 0x3274, 0xc604, 0x1, 0x0);
        gbc.writeMem(0x9444, { 0xcc, 0x33, 0xeb });
        gbc.step();
        EXPECT(0x7b, gbc.a());
        EXPECT(0x67, gbc.b());
        EXPECT(0x30, gbc.c());
        EXPECT(0x32, gbc.d());
        EXPECT(0x74, gbc.e());
        EXPECT(0xc6, gbc.h());
        EXPECT(0x4, gbc.l());
        EXPECT(0x6707, gbc.sp());
        EXPECT(0x9447, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0x9444));
        EXPECT(0x33, gbc.readMem(0x9445));
        EXPECT(0xeb, gbc.readMem(0x9446));
        // CC 0335
        gbc.setState(0x8d57, 0xde99, 0xe850, 0x7e14, 0x57ec, 0x7656, 0x1, 0x0);
        gbc.writeMem(0x8d57, { 0xcc, 0x79, 0xe1 });
        gbc.step();
        EXPECT(0xe8, gbc.a());
        EXPECT(0x7e, gbc.b());
        EXPECT(0x14, gbc.c());
        EXPECT(0x57, gbc.d());
        EXPECT(0xec, gbc.e());
        EXPECT(0x76, gbc.h());
        EXPECT(0x56, gbc.l());
        EXPECT(0xde99, gbc.sp());
        EXPECT(0x8d5a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0x8d57));
        EXPECT(0x79, gbc.readMem(0x8d58));
        EXPECT(0xe1, gbc.readMem(0x8d59));
        // CC 0337
        gbc.setState(0xa8d3, 0x960c, 0x44e0, 0x7f08, 0x6336, 0xe7a2, 0x0, 0x0);
        gbc.writeMem(0x960a, { 0x0, 0x0 });
        gbc.writeMem(0xa8d3, { 0xcc, 0x4a, 0x3b });
        gbc.step();
        EXPECT(0x44, gbc.a());
        EXPECT(0x7f, gbc.b());
        EXPECT(0x8, gbc.c());
        EXPECT(0x63, gbc.d());
        EXPECT(0x36, gbc.e());
        EXPECT(0xe7, gbc.h());
        EXPECT(0xa2, gbc.l());
        EXPECT(0x960a, gbc.sp());
        EXPECT(0x3b4a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xd6, gbc.readMem(0x960a));
        EXPECT(0xa8, gbc.readMem(0x960b));
        EXPECT(0xcc, gbc.readMem(0xa8d3));
        EXPECT(0x4a, gbc.readMem(0xa8d4));
        EXPECT(0x3b, gbc.readMem(0xa8d5));
        // CC 0338
        gbc.setState(0x32a3, 0x98d, 0xde70, 0xc66c, 0xdac6, 0x1237, 0x0, 0x0);
        gbc.writeMem(0x32a3, { 0xcc, 0xd8, 0xb });
        gbc.step();
        EXPECT(0xde, gbc.a());
        EXPECT(0xc6, gbc.b());
        EXPECT(0x6c, gbc.c());
        EXPECT(0xda, gbc.d());
        EXPECT(0xc6, gbc.e());
        EXPECT(0x12, gbc.h());
        EXPECT(0x37, gbc.l());
        EXPECT(0x98d, gbc.sp());
        EXPECT(0x32a6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 0339
        gbc.setState(0xe130, 0xc237, 0x5300, 0x30a8, 0x492d, 0xa770, 0x1, 0x0);
        gbc.writeMem(0xe130, { 0xcc, 0xd8, 0x79 });
        gbc.step();
        EXPECT(0x53, gbc.a());
        EXPECT(0x30, gbc.b());
        EXPECT(0xa8, gbc.c());
        EXPECT(0x49, gbc.d());
        EXPECT(0x2d, gbc.e());
        EXPECT(0xa7, gbc.h());
        EXPECT(0x70, gbc.l());
        EXPECT(0xc237, gbc.sp());
        EXPECT(0xe133, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xe130));
        EXPECT(0xd8, gbc.readMem(0xe131));
        EXPECT(0x79, gbc.readMem(0xe132));
        // CC 033B
        gbc.setState(0xc88e, 0xe91b, 0x3d20, 0x1b94, 0x5841, 0xad50, 0x1, 0x1);
        gbc.writeMem(0xc88e, { 0xcc, 0xc9, 0x9b });
        gbc.step();
        EXPECT(0x3d, gbc.a());
        EXPECT(0x1b, gbc.b());
        EXPECT(0x94, gbc.c());
        EXPECT(0x58, gbc.d());
        EXPECT(0x41, gbc.e());
        EXPECT(0xad, gbc.h());
        EXPECT(0x50, gbc.l());
        EXPECT(0xe91b, gbc.sp());
        EXPECT(0xc891, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xc88e));
        EXPECT(0xc9, gbc.readMem(0xc88f));
        EXPECT(0x9b, gbc.readMem(0xc890));
        // CC 033D
        gbc.setState(0x734c, 0x452e, 0x7030, 0x564c, 0x7e8a, 0x98b2, 0x1, 0x1);
        gbc.writeMem(0x734c, { 0xcc, 0xc1, 0x84 });
        gbc.step();
        EXPECT(0x70, gbc.a());
        EXPECT(0x56, gbc.b());
        EXPECT(0x4c, gbc.c());
        EXPECT(0x7e, gbc.d());
        EXPECT(0x8a, gbc.e());
        EXPECT(0x98, gbc.h());
        EXPECT(0xb2, gbc.l());
        EXPECT(0x452e, gbc.sp());
        EXPECT(0x734f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 033E
        gbc.setState(0x6405, 0x2c7f, 0x3d10, 0xcb01, 0xb4ff, 0x8570, 0x0, 0x1);
        gbc.writeMem(0x6405, { 0xcc, 0x0, 0x47 });
        gbc.step();
        EXPECT(0x3d, gbc.a());
        EXPECT(0xcb, gbc.b());
        EXPECT(0x1, gbc.c());
        EXPECT(0xb4, gbc.d());
        EXPECT(0xff, gbc.e());
        EXPECT(0x85, gbc.h());
        EXPECT(0x70, gbc.l());
        EXPECT(0x2c7f, gbc.sp());
        EXPECT(0x6408, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 033F
        gbc.setState(0x17b5, 0xcefc, 0xd9e0, 0x72ed, 0xaaaf, 0x47c2, 0x0, 0x0);
        gbc.writeMem(0x17b5, { 0xcc, 0x55, 0xfc });
        gbc.writeMem(0xcefa, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xd9, gbc.a());
        EXPECT(0x72, gbc.b());
        EXPECT(0xed, gbc.c());
        EXPECT(0xaa, gbc.d());
        EXPECT(0xaf, gbc.e());
        EXPECT(0x47, gbc.h());
        EXPECT(0xc2, gbc.l());
        EXPECT(0xcefa, gbc.sp());
        EXPECT(0xfc55, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xb8, gbc.readMem(0xcefa));
        EXPECT(0x17, gbc.readMem(0xcefb));
        // CC 0341
        gbc.setState(0xb525, 0xde58, 0x1520, 0xfb0a, 0x46fd, 0xff70, 0x0, 0x1);
        gbc.writeMem(0xb525, { 0xcc, 0x8a, 0x8c });
        gbc.step();
        EXPECT(0x15, gbc.a());
        EXPECT(0xfb, gbc.b());
        EXPECT(0xa, gbc.c());
        EXPECT(0x46, gbc.d());
        EXPECT(0xfd, gbc.e());
        EXPECT(0xff, gbc.h());
        EXPECT(0x70, gbc.l());
        EXPECT(0xde58, gbc.sp());
        EXPECT(0xb528, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xb525));
        EXPECT(0x8a, gbc.readMem(0xb526));
        EXPECT(0x8c, gbc.readMem(0xb527));
        // CC 0343
        gbc.setState(0x8013, 0x9072, 0x9cd0, 0x33d8, 0xef5c, 0xc5e7, 0x0, 0x1);
        gbc.writeMem(0x8013, { 0xcc, 0x5c, 0x83 });
        gbc.writeMem(0x9070, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x9c, gbc.a());
        EXPECT(0x33, gbc.b());
        EXPECT(0xd8, gbc.c());
        EXPECT(0xef, gbc.d());
        EXPECT(0x5c, gbc.e());
        EXPECT(0xc5, gbc.h());
        EXPECT(0xe7, gbc.l());
        EXPECT(0x9070, gbc.sp());
        EXPECT(0x835c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0x8013));
        EXPECT(0x5c, gbc.readMem(0x8014));
        EXPECT(0x83, gbc.readMem(0x8015));
        EXPECT(0x16, gbc.readMem(0x9070));
        EXPECT(0x80, gbc.readMem(0x9071));
        // CC 0344
        gbc.setState(0x389f, 0xc904, 0x6ef0, 0xbe72, 0x371c, 0x774c, 0x1, 0x1);
        gbc.writeMem(0x389f, { 0xcc, 0x5f, 0xbf });
        gbc.writeMem(0xc902, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x6e, gbc.a());
        EXPECT(0xbe, gbc.b());
        EXPECT(0x72, gbc.c());
        EXPECT(0x37, gbc.d());
        EXPECT(0x1c, gbc.e());
        EXPECT(0x77, gbc.h());
        EXPECT(0x4c, gbc.l());
        EXPECT(0xc902, gbc.sp());
        EXPECT(0xbf5f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xa2, gbc.readMem(0xc902));
        EXPECT(0x38, gbc.readMem(0xc903));
        // CC 0345
        gbc.setState(0xdae2, 0xf404, 0x5f90, 0xc0e4, 0x5c49, 0xecad, 0x1, 0x1);
        gbc.writeMem(0xdae2, { 0xcc, 0x32, 0xfe });
        gbc.writeMem(0xf402, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x5f, gbc.a());
        EXPECT(0xc0, gbc.b());
        EXPECT(0xe4, gbc.c());
        EXPECT(0x5c, gbc.d());
        EXPECT(0x49, gbc.e());
        EXPECT(0xec, gbc.h());
        EXPECT(0xad, gbc.l());
        EXPECT(0xf402, gbc.sp());
        EXPECT(0xfe32, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xdae2));
        EXPECT(0x32, gbc.readMem(0xdae3));
        EXPECT(0xfe, gbc.readMem(0xdae4));
        EXPECT(0xe5, gbc.readMem(0xf402));
        EXPECT(0xda, gbc.readMem(0xf403));
        // CC 0347
        gbc.setState(0x2caa, 0x25ab, 0xbd30, 0x425f, 0xeb01, 0xface, 0x0, 0x1);
        gbc.writeMem(0x2caa, { 0xcc, 0xbc, 0x83 });
        gbc.step();
        EXPECT(0xbd, gbc.a());
        EXPECT(0x42, gbc.b());
        EXPECT(0x5f, gbc.c());
        EXPECT(0xeb, gbc.d());
        EXPECT(0x1, gbc.e());
        EXPECT(0xfa, gbc.h());
        EXPECT(0xce, gbc.l());
        EXPECT(0x25ab, gbc.sp());
        EXPECT(0x2cad, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 0348
        gbc.setState(0x28c5, 0x746a, 0x7750, 0x937d, 0x3dd6, 0x4db7, 0x1, 0x0);
        gbc.writeMem(0x28c5, { 0xcc, 0x30, 0xc7 });
        gbc.step();
        EXPECT(0x77, gbc.a());
        EXPECT(0x93, gbc.b());
        EXPECT(0x7d, gbc.c());
        EXPECT(0x3d, gbc.d());
        EXPECT(0xd6, gbc.e());
        EXPECT(0x4d, gbc.h());
        EXPECT(0xb7, gbc.l());
        EXPECT(0x746a, gbc.sp());
        EXPECT(0x28c8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 0349
        gbc.setState(0xa938, 0x3d95, 0xd930, 0x1daa, 0x4299, 0x21b2, 0x0, 0x0);
        gbc.writeMem(0xa938, { 0xcc, 0xe8, 0xa3 });
        gbc.step();
        EXPECT(0xd9, gbc.a());
        EXPECT(0x1d, gbc.b());
        EXPECT(0xaa, gbc.c());
        EXPECT(0x42, gbc.d());
        EXPECT(0x99, gbc.e());
        EXPECT(0x21, gbc.h());
        EXPECT(0xb2, gbc.l());
        EXPECT(0x3d95, gbc.sp());
        EXPECT(0xa93b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xa938));
        EXPECT(0xe8, gbc.readMem(0xa939));
        EXPECT(0xa3, gbc.readMem(0xa93a));
        // CC 034A
        gbc.setState(0x98b3, 0x2193, 0x4c70, 0x34ce, 0xf0e7, 0x9e20, 0x1, 0x1);
        gbc.writeMem(0x98b3, { 0xcc, 0x7e, 0xd6 });
        gbc.step();
        EXPECT(0x4c, gbc.a());
        EXPECT(0x34, gbc.b());
        EXPECT(0xce, gbc.c());
        EXPECT(0xf0, gbc.d());
        EXPECT(0xe7, gbc.e());
        EXPECT(0x9e, gbc.h());
        EXPECT(0x20, gbc.l());
        EXPECT(0x2193, gbc.sp());
        EXPECT(0x98b6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0x98b3));
        EXPECT(0x7e, gbc.readMem(0x98b4));
        EXPECT(0xd6, gbc.readMem(0x98b5));
        // CC 034B
        gbc.setState(0x5af, 0xe137, 0xcf00, 0x8132, 0xb2b3, 0x4078, 0x1, 0x1);
        gbc.writeMem(0x5af, { 0xcc, 0xd5, 0x3b });
        gbc.step();
        EXPECT(0xcf, gbc.a());
        EXPECT(0x81, gbc.b());
        EXPECT(0x32, gbc.c());
        EXPECT(0xb2, gbc.d());
        EXPECT(0xb3, gbc.e());
        EXPECT(0x40, gbc.h());
        EXPECT(0x78, gbc.l());
        EXPECT(0xe137, gbc.sp());
        EXPECT(0x5b2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 034C
        gbc.setState(0x2357, 0xe536, 0xa4b0, 0x964b, 0x913f, 0xf0d5, 0x0, 0x0);
        gbc.writeMem(0x2357, { 0xcc, 0xb1, 0x59 });
        gbc.writeMem(0xe534, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xa4, gbc.a());
        EXPECT(0x96, gbc.b());
        EXPECT(0x4b, gbc.c());
        EXPECT(0x91, gbc.d());
        EXPECT(0x3f, gbc.e());
        EXPECT(0xf0, gbc.h());
        EXPECT(0xd5, gbc.l());
        EXPECT(0xe534, gbc.sp());
        EXPECT(0x59b1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x5a, gbc.readMem(0xe534));
        EXPECT(0x23, gbc.readMem(0xe535));
        // CC 034D
        gbc.setState(0x8679, 0xbc5, 0xe250, 0x87b0, 0x7aa0, 0xdb43, 0x1, 0x0);
        gbc.writeMem(0x8679, { 0xcc, 0xae, 0xc6 });
        gbc.step();
        EXPECT(0xe2, gbc.a());
        EXPECT(0x87, gbc.b());
        EXPECT(0xb0, gbc.c());
        EXPECT(0x7a, gbc.d());
        EXPECT(0xa0, gbc.e());
        EXPECT(0xdb, gbc.h());
        EXPECT(0x43, gbc.l());
        EXPECT(0xbc5, gbc.sp());
        EXPECT(0x867c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0x8679));
        EXPECT(0xae, gbc.readMem(0x867a));
        EXPECT(0xc6, gbc.readMem(0x867b));
        // CC 034E
        gbc.setState(0x897d, 0xd1f2, 0x83d0, 0x122b, 0x9adf, 0x7783, 0x0, 0x0);
        gbc.writeMem(0x897d, { 0xcc, 0x57, 0x86 });
        gbc.writeMem(0xd1f0, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x83, gbc.a());
        EXPECT(0x12, gbc.b());
        EXPECT(0x2b, gbc.c());
        EXPECT(0x9a, gbc.d());
        EXPECT(0xdf, gbc.e());
        EXPECT(0x77, gbc.h());
        EXPECT(0x83, gbc.l());
        EXPECT(0xd1f0, gbc.sp());
        EXPECT(0x8657, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0x897d));
        EXPECT(0x57, gbc.readMem(0x897e));
        EXPECT(0x86, gbc.readMem(0x897f));
        EXPECT(0x80, gbc.readMem(0xd1f0));
        EXPECT(0x89, gbc.readMem(0xd1f1));
        // CC 0350
        gbc.setState(0x9dfa, 0x7d73, 0xbc10, 0x6d53, 0x29dc, 0x66ba, 0x0, 0x0);
        gbc.writeMem(0x9dfa, { 0xcc, 0xce, 0xad });
        gbc.step();
        EXPECT(0xbc, gbc.a());
        EXPECT(0x6d, gbc.b());
        EXPECT(0x53, gbc.c());
        EXPECT(0x29, gbc.d());
        EXPECT(0xdc, gbc.e());
        EXPECT(0x66, gbc.h());
        EXPECT(0xba, gbc.l());
        EXPECT(0x7d73, gbc.sp());
        EXPECT(0x9dfd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0x9dfa));
        EXPECT(0xce, gbc.readMem(0x9dfb));
        EXPECT(0xad, gbc.readMem(0x9dfc));
        // CC 0351
        gbc.setState(0x2392, 0xf714, 0xca60, 0x8991, 0x840d, 0x188d, 0x0, 0x0);
        gbc.writeMem(0x2392, { 0xcc, 0x86, 0x3 });
        gbc.step();
        EXPECT(0xca, gbc.a());
        EXPECT(0x89, gbc.b());
        EXPECT(0x91, gbc.c());
        EXPECT(0x84, gbc.d());
        EXPECT(0xd, gbc.e());
        EXPECT(0x18, gbc.h());
        EXPECT(0x8d, gbc.l());
        EXPECT(0xf714, gbc.sp());
        EXPECT(0x2395, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 0352
        gbc.setState(0x40ec, 0x9ffd, 0xb660, 0xa7d4, 0x5391, 0xb5da, 0x0, 0x1);
        gbc.writeMem(0x40ec, { 0xcc, 0xba, 0x93 });
        gbc.step();
        EXPECT(0xb6, gbc.a());
        EXPECT(0xa7, gbc.b());
        EXPECT(0xd4, gbc.c());
        EXPECT(0x53, gbc.d());
        EXPECT(0x91, gbc.e());
        EXPECT(0xb5, gbc.h());
        EXPECT(0xda, gbc.l());
        EXPECT(0x9ffd, gbc.sp());
        EXPECT(0x40ef, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 0353
        gbc.setState(0x4bdf, 0x49eb, 0xbc60, 0xb738, 0xd45c, 0xed7d, 0x1, 0x1);
        gbc.writeMem(0x4bdf, { 0xcc, 0x70, 0x19 });
        gbc.step();
        EXPECT(0xbc, gbc.a());
        EXPECT(0xb7, gbc.b());
        EXPECT(0x38, gbc.c());
        EXPECT(0xd4, gbc.d());
        EXPECT(0x5c, gbc.e());
        EXPECT(0xed, gbc.h());
        EXPECT(0x7d, gbc.l());
        EXPECT(0x49eb, gbc.sp());
        EXPECT(0x4be2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 0354
        gbc.setState(0xcf6c, 0x771a, 0x1e70, 0x502a, 0xd0d, 0x3dea, 0x0, 0x1);
        gbc.writeMem(0xcf6c, { 0xcc, 0x41, 0x96 });
        gbc.step();
        EXPECT(0x1e, gbc.a());
        EXPECT(0x50, gbc.b());
        EXPECT(0x2a, gbc.c());
        EXPECT(0xd, gbc.d());
        EXPECT(0xd, gbc.e());
        EXPECT(0x3d, gbc.h());
        EXPECT(0xea, gbc.l());
        EXPECT(0x771a, gbc.sp());
        EXPECT(0xcf6f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xcf6c));
        EXPECT(0x41, gbc.readMem(0xcf6d));
        EXPECT(0x96, gbc.readMem(0xcf6e));
        // CC 0356
        gbc.setState(0x8548, 0xc4c8, 0x5eb0, 0x2936, 0xf6f2, 0xfab1, 0x1, 0x1);
        gbc.writeMem(0x8548, { 0xcc, 0xa8, 0xf9 });
        gbc.writeMem(0xc4c6, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x5e, gbc.a());
        EXPECT(0x29, gbc.b());
        EXPECT(0x36, gbc.c());
        EXPECT(0xf6, gbc.d());
        EXPECT(0xf2, gbc.e());
        EXPECT(0xfa, gbc.h());
        EXPECT(0xb1, gbc.l());
        EXPECT(0xc4c6, gbc.sp());
        EXPECT(0xf9a8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0x8548));
        EXPECT(0xa8, gbc.readMem(0x8549));
        EXPECT(0xf9, gbc.readMem(0x854a));
        EXPECT(0x4b, gbc.readMem(0xc4c6));
        EXPECT(0x85, gbc.readMem(0xc4c7));
        // CC 0357
        gbc.setState(0xd38, 0x88a0, 0x350, 0x8195, 0xef50, 0x5f07, 0x1, 0x0);
        gbc.writeMem(0xd38, { 0xcc, 0x5e, 0x2 });
        gbc.step();
        EXPECT(0x3, gbc.a());
        EXPECT(0x81, gbc.b());
        EXPECT(0x95, gbc.c());
        EXPECT(0xef, gbc.d());
        EXPECT(0x50, gbc.e());
        EXPECT(0x5f, gbc.h());
        EXPECT(0x7, gbc.l());
        EXPECT(0x88a0, gbc.sp());
        EXPECT(0xd3b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 0358
        gbc.setState(0x9875, 0xe7fd, 0x4490, 0x1c44, 0x308a, 0x4471, 0x1, 0x0);
        gbc.writeMem(0x9875, { 0xcc, 0x18, 0x2 });
        gbc.writeMem(0xe7fb, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x44, gbc.a());
        EXPECT(0x1c, gbc.b());
        EXPECT(0x44, gbc.c());
        EXPECT(0x30, gbc.d());
        EXPECT(0x8a, gbc.e());
        EXPECT(0x44, gbc.h());
        EXPECT(0x71, gbc.l());
        EXPECT(0xe7fb, gbc.sp());
        EXPECT(0x218, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0x9875));
        EXPECT(0x18, gbc.readMem(0x9876));
        EXPECT(0x2, gbc.readMem(0x9877));
        EXPECT(0x78, gbc.readMem(0xe7fb));
        EXPECT(0x98, gbc.readMem(0xe7fc));
        // CC 0359
        gbc.setState(0xef65, 0x92d2, 0xa580, 0x6589, 0x67a5, 0xaff7, 0x0, 0x0);
        gbc.writeMem(0x92d0, { 0x0, 0x0 });
        gbc.writeMem(0xef65, { 0xcc, 0x94, 0x9 });
        gbc.step();
        EXPECT(0xa5, gbc.a());
        EXPECT(0x65, gbc.b());
        EXPECT(0x89, gbc.c());
        EXPECT(0x67, gbc.d());
        EXPECT(0xa5, gbc.e());
        EXPECT(0xaf, gbc.h());
        EXPECT(0xf7, gbc.l());
        EXPECT(0x92d0, gbc.sp());
        EXPECT(0x994, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x68, gbc.readMem(0x92d0));
        EXPECT(0xef, gbc.readMem(0x92d1));
        EXPECT(0xcc, gbc.readMem(0xef65));
        EXPECT(0x94, gbc.readMem(0xef66));
        EXPECT(0x9, gbc.readMem(0xef67));
        // CC 035A
        gbc.setState(0x163b, 0xb841, 0x59a0, 0x2340, 0xcba2, 0x4347, 0x0, 0x1);
        gbc.writeMem(0x163b, { 0xcc, 0x72, 0x45 });
        gbc.writeMem(0xb83f, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x59, gbc.a());
        EXPECT(0x23, gbc.b());
        EXPECT(0x40, gbc.c());
        EXPECT(0xcb, gbc.d());
        EXPECT(0xa2, gbc.e());
        EXPECT(0x43, gbc.h());
        EXPECT(0x47, gbc.l());
        EXPECT(0xb83f, gbc.sp());
        EXPECT(0x4572, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x3e, gbc.readMem(0xb83f));
        EXPECT(0x16, gbc.readMem(0xb840));
        // CC 035C
        gbc.setState(0x9291, 0xc3e4, 0x7e70, 0x4659, 0x14b6, 0xc7e9, 0x1, 0x0);
        gbc.writeMem(0x9291, { 0xcc, 0xa4, 0x3f });
        gbc.step();
        EXPECT(0x7e, gbc.a());
        EXPECT(0x46, gbc.b());
        EXPECT(0x59, gbc.c());
        EXPECT(0x14, gbc.d());
        EXPECT(0xb6, gbc.e());
        EXPECT(0xc7, gbc.h());
        EXPECT(0xe9, gbc.l());
        EXPECT(0xc3e4, gbc.sp());
        EXPECT(0x9294, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0x9291));
        EXPECT(0xa4, gbc.readMem(0x9292));
        EXPECT(0x3f, gbc.readMem(0x9293));
        // CC 035D
        gbc.setState(0x5a5c, 0xc7fd, 0xe850, 0x385d, 0xc3f, 0x5341, 0x0, 0x0);
        gbc.writeMem(0x5a5c, { 0xcc, 0xba, 0x8a });
        gbc.step();
        EXPECT(0xe8, gbc.a());
        EXPECT(0x38, gbc.b());
        EXPECT(0x5d, gbc.c());
        EXPECT(0xc, gbc.d());
        EXPECT(0x3f, gbc.e());
        EXPECT(0x53, gbc.h());
        EXPECT(0x41, gbc.l());
        EXPECT(0xc7fd, gbc.sp());
        EXPECT(0x5a5f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 035E
        gbc.setState(0x6da0, 0x8741, 0xaea0, 0x2a67, 0xb128, 0xa3f1, 0x0, 0x0);
        gbc.writeMem(0x6da0, { 0xcc, 0x52, 0x54 });
        gbc.writeMem(0x873f, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xae, gbc.a());
        EXPECT(0x2a, gbc.b());
        EXPECT(0x67, gbc.c());
        EXPECT(0xb1, gbc.d());
        EXPECT(0x28, gbc.e());
        EXPECT(0xa3, gbc.h());
        EXPECT(0xf1, gbc.l());
        EXPECT(0x873f, gbc.sp());
        EXPECT(0x5452, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xa3, gbc.readMem(0x873f));
        EXPECT(0x6d, gbc.readMem(0x8740));
        // CC 035F
        gbc.setState(0x3b57, 0x758c, 0x4350, 0x20c1, 0x34ed, 0xe64, 0x0, 0x0);
        gbc.writeMem(0x3b57, { 0xcc, 0x73, 0xc7 });
        gbc.step();
        EXPECT(0x43, gbc.a());
        EXPECT(0x20, gbc.b());
        EXPECT(0xc1, gbc.c());
        EXPECT(0x34, gbc.d());
        EXPECT(0xed, gbc.e());
        EXPECT(0xe, gbc.h());
        EXPECT(0x64, gbc.l());
        EXPECT(0x758c, gbc.sp());
        EXPECT(0x3b5a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 0360
        gbc.setState(0x5dac, 0xe97a, 0xc5a0, 0xef86, 0xae62, 0x3cda, 0x1, 0x1);
        gbc.writeMem(0x5dac, { 0xcc, 0x64, 0x7d });
        gbc.writeMem(0xe978, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xc5, gbc.a());
        EXPECT(0xef, gbc.b());
        EXPECT(0x86, gbc.c());
        EXPECT(0xae, gbc.d());
        EXPECT(0x62, gbc.e());
        EXPECT(0x3c, gbc.h());
        EXPECT(0xda, gbc.l());
        EXPECT(0xe978, gbc.sp());
        EXPECT(0x7d64, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xe978));
        EXPECT(0x5d, gbc.readMem(0xe979));
        // CC 0361
        gbc.setState(0x4ff2, 0x3989, 0xf770, 0x8ad8, 0x7636, 0x752, 0x0, 0x0);
        gbc.writeMem(0x4ff2, { 0xcc, 0xda, 0xc4 });
        gbc.step();
        EXPECT(0xf7, gbc.a());
        EXPECT(0x8a, gbc.b());
        EXPECT(0xd8, gbc.c());
        EXPECT(0x76, gbc.d());
        EXPECT(0x36, gbc.e());
        EXPECT(0x7, gbc.h());
        EXPECT(0x52, gbc.l());
        EXPECT(0x3989, gbc.sp());
        EXPECT(0x4ff5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 0362
        gbc.setState(0x34d4, 0x95a9, 0x9110, 0x4b4f, 0xc1a9, 0x992c, 0x1, 0x1);
        gbc.writeMem(0x34d4, { 0xcc, 0xe3, 0x8e });
        gbc.step();
        EXPECT(0x91, gbc.a());
        EXPECT(0x4b, gbc.b());
        EXPECT(0x4f, gbc.c());
        EXPECT(0xc1, gbc.d());
        EXPECT(0xa9, gbc.e());
        EXPECT(0x99, gbc.h());
        EXPECT(0x2c, gbc.l());
        EXPECT(0x95a9, gbc.sp());
        EXPECT(0x34d7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 0364
        gbc.setState(0xe949, 0x5ccd, 0xff40, 0xd263, 0x6aa0, 0xb705, 0x1, 0x0);
        gbc.writeMem(0xe949, { 0xcc, 0x4f, 0x6e });
        gbc.step();
        EXPECT(0xff, gbc.a());
        EXPECT(0xd2, gbc.b());
        EXPECT(0x63, gbc.c());
        EXPECT(0x6a, gbc.d());
        EXPECT(0xa0, gbc.e());
        EXPECT(0xb7, gbc.h());
        EXPECT(0x5, gbc.l());
        EXPECT(0x5ccd, gbc.sp());
        EXPECT(0xe94c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xe949));
        EXPECT(0x4f, gbc.readMem(0xe94a));
        EXPECT(0x6e, gbc.readMem(0xe94b));
        // CC 0367
        gbc.setState(0x4b44, 0xadc0, 0x93e0, 0x664c, 0x165, 0xeae4, 0x0, 0x1);
        gbc.writeMem(0x4b44, { 0xcc, 0x86, 0x13 });
        gbc.writeMem(0xadbe, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x93, gbc.a());
        EXPECT(0x66, gbc.b());
        EXPECT(0x4c, gbc.c());
        EXPECT(0x1, gbc.d());
        EXPECT(0x65, gbc.e());
        EXPECT(0xea, gbc.h());
        EXPECT(0xe4, gbc.l());
        EXPECT(0xadbe, gbc.sp());
        EXPECT(0x1386, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x47, gbc.readMem(0xadbe));
        EXPECT(0x4b, gbc.readMem(0xadbf));
        // CC 0368
        gbc.setState(0x864c, 0xc4b8, 0x4b50, 0xc1c3, 0x4aaf, 0xd989, 0x0, 0x0);
        gbc.writeMem(0x864c, { 0xcc, 0xd4, 0xb6 });
        gbc.step();
        EXPECT(0x4b, gbc.a());
        EXPECT(0xc1, gbc.b());
        EXPECT(0xc3, gbc.c());
        EXPECT(0x4a, gbc.d());
        EXPECT(0xaf, gbc.e());
        EXPECT(0xd9, gbc.h());
        EXPECT(0x89, gbc.l());
        EXPECT(0xc4b8, gbc.sp());
        EXPECT(0x864f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0x864c));
        EXPECT(0xd4, gbc.readMem(0x864d));
        EXPECT(0xb6, gbc.readMem(0x864e));
        // CC 0369
        gbc.setState(0x781c, 0xe1d6, 0x7690, 0xe21, 0x8048, 0xdfd0, 0x1, 0x0);
        gbc.writeMem(0x781c, { 0xcc, 0x1b, 0x93 });
        gbc.writeMem(0xe1d4, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x76, gbc.a());
        EXPECT(0xe, gbc.b());
        EXPECT(0x21, gbc.c());
        EXPECT(0x80, gbc.d());
        EXPECT(0x48, gbc.e());
        EXPECT(0xdf, gbc.h());
        EXPECT(0xd0, gbc.l());
        EXPECT(0xe1d4, gbc.sp());
        EXPECT(0x931b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x1f, gbc.readMem(0xe1d4));
        EXPECT(0x78, gbc.readMem(0xe1d5));
        // CC 036A
        gbc.setState(0xea73, 0xdacd, 0x930, 0x8556, 0x8c79, 0x4364, 0x1, 0x1);
        gbc.writeMem(0xea73, { 0xcc, 0xaa, 0xee });
        gbc.step();
        EXPECT(0x9, gbc.a());
        EXPECT(0x85, gbc.b());
        EXPECT(0x56, gbc.c());
        EXPECT(0x8c, gbc.d());
        EXPECT(0x79, gbc.e());
        EXPECT(0x43, gbc.h());
        EXPECT(0x64, gbc.l());
        EXPECT(0xdacd, gbc.sp());
        EXPECT(0xea76, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xea73));
        EXPECT(0xaa, gbc.readMem(0xea74));
        EXPECT(0xee, gbc.readMem(0xea75));
        // CC 036B
        gbc.setState(0xd105, 0xc64b, 0x3e50, 0x13e0, 0x33c, 0xa365, 0x0, 0x0);
        gbc.writeMem(0xd105, { 0xcc, 0xf, 0xa4 });
        gbc.step();
        EXPECT(0x3e, gbc.a());
        EXPECT(0x13, gbc.b());
        EXPECT(0xe0, gbc.c());
        EXPECT(0x3, gbc.d());
        EXPECT(0x3c, gbc.e());
        EXPECT(0xa3, gbc.h());
        EXPECT(0x65, gbc.l());
        EXPECT(0xc64b, gbc.sp());
        EXPECT(0xd108, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xd105));
        EXPECT(0xf, gbc.readMem(0xd106));
        EXPECT(0xa4, gbc.readMem(0xd107));
        // CC 036C
        gbc.setState(0xb502, 0x3ef4, 0x1600, 0xc87, 0x505e, 0x4eae, 0x0, 0x0);
        gbc.writeMem(0xb502, { 0xcc, 0x13, 0x47 });
        gbc.step();
        EXPECT(0x16, gbc.a());
        EXPECT(0xc, gbc.b());
        EXPECT(0x87, gbc.c());
        EXPECT(0x50, gbc.d());
        EXPECT(0x5e, gbc.e());
        EXPECT(0x4e, gbc.h());
        EXPECT(0xae, gbc.l());
        EXPECT(0x3ef4, gbc.sp());
        EXPECT(0xb505, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xb502));
        EXPECT(0x13, gbc.readMem(0xb503));
        EXPECT(0x47, gbc.readMem(0xb504));
        // CC 036D
        gbc.setState(0x3910, 0x999d, 0xb020, 0x708e, 0x8cfc, 0x7e5d, 0x0, 0x0);
        gbc.writeMem(0x3910, { 0xcc, 0x10, 0x20 });
        gbc.step();
        EXPECT(0xb0, gbc.a());
        EXPECT(0x70, gbc.b());
        EXPECT(0x8e, gbc.c());
        EXPECT(0x8c, gbc.d());
        EXPECT(0xfc, gbc.e());
        EXPECT(0x7e, gbc.h());
        EXPECT(0x5d, gbc.l());
        EXPECT(0x999d, gbc.sp());
        EXPECT(0x3913, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 036E
        gbc.setState(0x5948, 0x954a, 0x6940, 0x1c87, 0x4a55, 0x6c87, 0x1, 0x1);
        gbc.writeMem(0x5948, { 0xcc, 0x1d, 0xf7 });
        gbc.step();
        EXPECT(0x69, gbc.a());
        EXPECT(0x1c, gbc.b());
        EXPECT(0x87, gbc.c());
        EXPECT(0x4a, gbc.d());
        EXPECT(0x55, gbc.e());
        EXPECT(0x6c, gbc.h());
        EXPECT(0x87, gbc.l());
        EXPECT(0x954a, gbc.sp());
        EXPECT(0x594b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 0370
        gbc.setState(0xbd0c, 0x67b4, 0x7550, 0xde86, 0xe3fc, 0x4080, 0x0, 0x1);
        gbc.writeMem(0xbd0c, { 0xcc, 0xeb, 0x51 });
        gbc.step();
        EXPECT(0x75, gbc.a());
        EXPECT(0xde, gbc.b());
        EXPECT(0x86, gbc.c());
        EXPECT(0xe3, gbc.d());
        EXPECT(0xfc, gbc.e());
        EXPECT(0x40, gbc.h());
        EXPECT(0x80, gbc.l());
        EXPECT(0x67b4, gbc.sp());
        EXPECT(0xbd0f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xbd0c));
        EXPECT(0xeb, gbc.readMem(0xbd0d));
        EXPECT(0x51, gbc.readMem(0xbd0e));
        // CC 0371
        gbc.setState(0xd6fa, 0xbff8, 0xc190, 0xfb, 0x77c3, 0xd24, 0x1, 0x0);
        gbc.writeMem(0xbff6, { 0x0, 0x0 });
        gbc.writeMem(0xd6fa, { 0xcc, 0x47, 0x7b });
        gbc.step();
        EXPECT(0xc1, gbc.a());
        EXPECT(0x0, gbc.b());
        EXPECT(0xfb, gbc.c());
        EXPECT(0x77, gbc.d());
        EXPECT(0xc3, gbc.e());
        EXPECT(0xd, gbc.h());
        EXPECT(0x24, gbc.l());
        EXPECT(0xbff6, gbc.sp());
        EXPECT(0x7b47, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xfd, gbc.readMem(0xbff6));
        EXPECT(0xd6, gbc.readMem(0xbff7));
        EXPECT(0xcc, gbc.readMem(0xd6fa));
        EXPECT(0x47, gbc.readMem(0xd6fb));
        EXPECT(0x7b, gbc.readMem(0xd6fc));
        // CC 0372
        gbc.setState(0x8b08, 0x4483, 0xd310, 0x162a, 0x8b15, 0xb07c, 0x1, 0x1);
        gbc.writeMem(0x8b08, { 0xcc, 0xdb, 0xe1 });
        gbc.step();
        EXPECT(0xd3, gbc.a());
        EXPECT(0x16, gbc.b());
        EXPECT(0x2a, gbc.c());
        EXPECT(0x8b, gbc.d());
        EXPECT(0x15, gbc.e());
        EXPECT(0xb0, gbc.h());
        EXPECT(0x7c, gbc.l());
        EXPECT(0x4483, gbc.sp());
        EXPECT(0x8b0b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0x8b08));
        EXPECT(0xdb, gbc.readMem(0x8b09));
        EXPECT(0xe1, gbc.readMem(0x8b0a));
        // CC 0373
        gbc.setState(0x37f7, 0xdff5, 0x4a10, 0x58c6, 0xda74, 0xa0ff, 0x0, 0x0);
        gbc.writeMem(0x37f7, { 0xcc, 0xd1, 0x69 });
        gbc.step();
        EXPECT(0x4a, gbc.a());
        EXPECT(0x58, gbc.b());
        EXPECT(0xc6, gbc.c());
        EXPECT(0xda, gbc.d());
        EXPECT(0x74, gbc.e());
        EXPECT(0xa0, gbc.h());
        EXPECT(0xff, gbc.l());
        EXPECT(0xdff5, gbc.sp());
        EXPECT(0x37fa, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 0374
        gbc.setState(0x2201, 0x57f1, 0x2860, 0x3196, 0xa2ef, 0xf860, 0x0, 0x1);
        gbc.writeMem(0x2201, { 0xcc, 0x24, 0x2 });
        gbc.step();
        EXPECT(0x28, gbc.a());
        EXPECT(0x31, gbc.b());
        EXPECT(0x96, gbc.c());
        EXPECT(0xa2, gbc.d());
        EXPECT(0xef, gbc.e());
        EXPECT(0xf8, gbc.h());
        EXPECT(0x60, gbc.l());
        EXPECT(0x57f1, gbc.sp());
        EXPECT(0x2204, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 0375
        gbc.setState(0xd5c1, 0xafdc, 0xe240, 0x5c38, 0x389, 0x7812, 0x0, 0x0);
        gbc.writeMem(0xd5c1, { 0xcc, 0xcb, 0xc0 });
        gbc.step();
        EXPECT(0xe2, gbc.a());
        EXPECT(0x5c, gbc.b());
        EXPECT(0x38, gbc.c());
        EXPECT(0x3, gbc.d());
        EXPECT(0x89, gbc.e());
        EXPECT(0x78, gbc.h());
        EXPECT(0x12, gbc.l());
        EXPECT(0xafdc, gbc.sp());
        EXPECT(0xd5c4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xd5c1));
        EXPECT(0xcb, gbc.readMem(0xd5c2));
        EXPECT(0xc0, gbc.readMem(0xd5c3));
        // CC 0376
        gbc.setState(0x90ae, 0x1bf4, 0xf460, 0xa44b, 0xbcdd, 0x3202, 0x1, 0x0);
        gbc.writeMem(0x90ae, { 0xcc, 0x82, 0xc7 });
        gbc.step();
        EXPECT(0xf4, gbc.a());
        EXPECT(0xa4, gbc.b());
        EXPECT(0x4b, gbc.c());
        EXPECT(0xbc, gbc.d());
        EXPECT(0xdd, gbc.e());
        EXPECT(0x32, gbc.h());
        EXPECT(0x2, gbc.l());
        EXPECT(0x1bf4, gbc.sp());
        EXPECT(0x90b1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0x90ae));
        EXPECT(0x82, gbc.readMem(0x90af));
        EXPECT(0xc7, gbc.readMem(0x90b0));
        // CC 0377
        gbc.setState(0xc3f7, 0xe0e7, 0xf820, 0xdc87, 0xef08, 0x8db, 0x0, 0x0);
        gbc.writeMem(0xc3f7, { 0xcc, 0x52, 0x36 });
        gbc.step();
        EXPECT(0xf8, gbc.a());
        EXPECT(0xdc, gbc.b());
        EXPECT(0x87, gbc.c());
        EXPECT(0xef, gbc.d());
        EXPECT(0x8, gbc.e());
        EXPECT(0x8, gbc.h());
        EXPECT(0xdb, gbc.l());
        EXPECT(0xe0e7, gbc.sp());
        EXPECT(0xc3fa, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xc3f7));
        EXPECT(0x52, gbc.readMem(0xc3f8));
        EXPECT(0x36, gbc.readMem(0xc3f9));
        // CC 0378
        gbc.setState(0x2f60, 0xc718, 0x5ce0, 0xcad4, 0xa807, 0x846e, 0x1, 0x1);
        gbc.writeMem(0x2f60, { 0xcc, 0xe3, 0x7c });
        gbc.writeMem(0xc716, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x5c, gbc.a());
        EXPECT(0xca, gbc.b());
        EXPECT(0xd4, gbc.c());
        EXPECT(0xa8, gbc.d());
        EXPECT(0x7, gbc.e());
        EXPECT(0x84, gbc.h());
        EXPECT(0x6e, gbc.l());
        EXPECT(0xc716, gbc.sp());
        EXPECT(0x7ce3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x63, gbc.readMem(0xc716));
        EXPECT(0x2f, gbc.readMem(0xc717));
        // CC 0379
        gbc.setState(0xe6ab, 0xff6d, 0xd260, 0x8874, 0xcf90, 0x6890, 0x0, 0x1);
        gbc.writeMem(0xe6ab, { 0xcc, 0xc9, 0xd3 });
        gbc.step();
        EXPECT(0xd2, gbc.a());
        EXPECT(0x88, gbc.b());
        EXPECT(0x74, gbc.c());
        EXPECT(0xcf, gbc.d());
        EXPECT(0x90, gbc.e());
        EXPECT(0x68, gbc.h());
        EXPECT(0x90, gbc.l());
        EXPECT(0xff6d, gbc.sp());
        EXPECT(0xe6ae, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xe6ab));
        EXPECT(0xc9, gbc.readMem(0xe6ac));
        EXPECT(0xd3, gbc.readMem(0xe6ad));
        // CC 037B
        gbc.setState(0x8bc2, 0x2bad, 0x1b50, 0xc14a, 0x146e, 0xd097, 0x0, 0x0);
        gbc.writeMem(0x8bc2, { 0xcc, 0xa8, 0xfb });
        gbc.step();
        EXPECT(0x1b, gbc.a());
        EXPECT(0xc1, gbc.b());
        EXPECT(0x4a, gbc.c());
        EXPECT(0x14, gbc.d());
        EXPECT(0x6e, gbc.e());
        EXPECT(0xd0, gbc.h());
        EXPECT(0x97, gbc.l());
        EXPECT(0x2bad, gbc.sp());
        EXPECT(0x8bc5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0x8bc2));
        EXPECT(0xa8, gbc.readMem(0x8bc3));
        EXPECT(0xfb, gbc.readMem(0x8bc4));
        // CC 037C
        gbc.setState(0x3117, 0xea6f, 0x2400, 0xada, 0xb048, 0x2531, 0x0, 0x0);
        gbc.writeMem(0x3117, { 0xcc, 0x98, 0x21 });
        gbc.step();
        EXPECT(0x24, gbc.a());
        EXPECT(0xa, gbc.b());
        EXPECT(0xda, gbc.c());
        EXPECT(0xb0, gbc.d());
        EXPECT(0x48, gbc.e());
        EXPECT(0x25, gbc.h());
        EXPECT(0x31, gbc.l());
        EXPECT(0xea6f, gbc.sp());
        EXPECT(0x311a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 037D
        gbc.setState(0x46a9, 0x8667, 0x850, 0x4811, 0x6d95, 0xfe36, 0x1, 0x0);
        gbc.writeMem(0x46a9, { 0xcc, 0xa8, 0xba });
        gbc.step();
        EXPECT(0x8, gbc.a());
        EXPECT(0x48, gbc.b());
        EXPECT(0x11, gbc.c());
        EXPECT(0x6d, gbc.d());
        EXPECT(0x95, gbc.e());
        EXPECT(0xfe, gbc.h());
        EXPECT(0x36, gbc.l());
        EXPECT(0x8667, gbc.sp());
        EXPECT(0x46ac, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 037E
        gbc.setState(0x4b4a, 0x20cc, 0xab00, 0x8c67, 0x228b, 0x4dfe, 0x1, 0x1);
        gbc.writeMem(0x4b4a, { 0xcc, 0x60, 0x83 });
        gbc.step();
        EXPECT(0xab, gbc.a());
        EXPECT(0x8c, gbc.b());
        EXPECT(0x67, gbc.c());
        EXPECT(0x22, gbc.d());
        EXPECT(0x8b, gbc.e());
        EXPECT(0x4d, gbc.h());
        EXPECT(0xfe, gbc.l());
        EXPECT(0x20cc, gbc.sp());
        EXPECT(0x4b4d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 037F
        gbc.setState(0x809f, 0xd3f4, 0x9b30, 0x8b7b, 0xa461, 0x7cea, 0x1, 0x1);
        gbc.writeMem(0x809f, { 0xcc, 0xec, 0x94 });
        gbc.step();
        EXPECT(0x9b, gbc.a());
        EXPECT(0x8b, gbc.b());
        EXPECT(0x7b, gbc.c());
        EXPECT(0xa4, gbc.d());
        EXPECT(0x61, gbc.e());
        EXPECT(0x7c, gbc.h());
        EXPECT(0xea, gbc.l());
        EXPECT(0xd3f4, gbc.sp());
        EXPECT(0x80a2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0x809f));
        EXPECT(0xec, gbc.readMem(0x80a0));
        EXPECT(0x94, gbc.readMem(0x80a1));
        // CC 0380
        gbc.setState(0x4002, 0x6c8b, 0xb770, 0x308b, 0x7c3, 0x2707, 0x1, 0x0);
        gbc.writeMem(0x4002, { 0xcc, 0x10, 0xf4 });
        gbc.step();
        EXPECT(0xb7, gbc.a());
        EXPECT(0x30, gbc.b());
        EXPECT(0x8b, gbc.c());
        EXPECT(0x7, gbc.d());
        EXPECT(0xc3, gbc.e());
        EXPECT(0x27, gbc.h());
        EXPECT(0x7, gbc.l());
        EXPECT(0x6c8b, gbc.sp());
        EXPECT(0x4005, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 0381
        gbc.setState(0xd20e, 0x9fa9, 0xe120, 0x8644, 0x4ef8, 0x9740, 0x1, 0x0);
        gbc.writeMem(0xd20e, { 0xcc, 0x11, 0x18 });
        gbc.step();
        EXPECT(0xe1, gbc.a());
        EXPECT(0x86, gbc.b());
        EXPECT(0x44, gbc.c());
        EXPECT(0x4e, gbc.d());
        EXPECT(0xf8, gbc.e());
        EXPECT(0x97, gbc.h());
        EXPECT(0x40, gbc.l());
        EXPECT(0x9fa9, gbc.sp());
        EXPECT(0xd211, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xd20e));
        EXPECT(0x11, gbc.readMem(0xd20f));
        EXPECT(0x18, gbc.readMem(0xd210));
        // CC 0383
        gbc.setState(0x4bae, 0xcb21, 0x3f20, 0x494e, 0x50f6, 0x71ce, 0x0, 0x1);
        gbc.writeMem(0x4bae, { 0xcc, 0x75, 0x46 });
        gbc.step();
        EXPECT(0x3f, gbc.a());
        EXPECT(0x49, gbc.b());
        EXPECT(0x4e, gbc.c());
        EXPECT(0x50, gbc.d());
        EXPECT(0xf6, gbc.e());
        EXPECT(0x71, gbc.h());
        EXPECT(0xce, gbc.l());
        EXPECT(0xcb21, gbc.sp());
        EXPECT(0x4bb1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 0385
        gbc.setState(0x11f9, 0x45e4, 0x5c00, 0xdcf9, 0x400f, 0x49f3, 0x0, 0x0);
        gbc.writeMem(0x11f9, { 0xcc, 0xe6, 0x9b });
        gbc.step();
        EXPECT(0x5c, gbc.a());
        EXPECT(0xdc, gbc.b());
        EXPECT(0xf9, gbc.c());
        EXPECT(0x40, gbc.d());
        EXPECT(0xf, gbc.e());
        EXPECT(0x49, gbc.h());
        EXPECT(0xf3, gbc.l());
        EXPECT(0x45e4, gbc.sp());
        EXPECT(0x11fc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 0386
        gbc.setState(0xd004, 0xa0ba, 0xdd00, 0xa076, 0x1aaf, 0x1e1, 0x1, 0x1);
        gbc.writeMem(0xd004, { 0xcc, 0xcd, 0x79 });
        gbc.step();
        EXPECT(0xdd, gbc.a());
        EXPECT(0xa0, gbc.b());
        EXPECT(0x76, gbc.c());
        EXPECT(0x1a, gbc.d());
        EXPECT(0xaf, gbc.e());
        EXPECT(0x1, gbc.h());
        EXPECT(0xe1, gbc.l());
        EXPECT(0xa0ba, gbc.sp());
        EXPECT(0xd007, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xd004));
        EXPECT(0xcd, gbc.readMem(0xd005));
        EXPECT(0x79, gbc.readMem(0xd006));
        // CC 0387
        gbc.setState(0x19c, 0x5496, 0x2e30, 0x58b8, 0x88c7, 0xd2bd, 0x1, 0x1);
        gbc.writeMem(0x19c, { 0xcc, 0xe0, 0xa4 });
        gbc.step();
        EXPECT(0x2e, gbc.a());
        EXPECT(0x58, gbc.b());
        EXPECT(0xb8, gbc.c());
        EXPECT(0x88, gbc.d());
        EXPECT(0xc7, gbc.e());
        EXPECT(0xd2, gbc.h());
        EXPECT(0xbd, gbc.l());
        EXPECT(0x5496, gbc.sp());
        EXPECT(0x19f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 0388
        gbc.setState(0xc371, 0xac7c, 0xe1f0, 0xd782, 0x39dc, 0x4a0c, 0x1, 0x0);
        gbc.writeMem(0xac7a, { 0x0, 0x0 });
        gbc.writeMem(0xc371, { 0xcc, 0x49, 0xf9 });
        gbc.step();
        EXPECT(0xe1, gbc.a());
        EXPECT(0xd7, gbc.b());
        EXPECT(0x82, gbc.c());
        EXPECT(0x39, gbc.d());
        EXPECT(0xdc, gbc.e());
        EXPECT(0x4a, gbc.h());
        EXPECT(0xc, gbc.l());
        EXPECT(0xac7a, gbc.sp());
        EXPECT(0xf949, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x74, gbc.readMem(0xac7a));
        EXPECT(0xc3, gbc.readMem(0xac7b));
        EXPECT(0xcc, gbc.readMem(0xc371));
        EXPECT(0x49, gbc.readMem(0xc372));
        EXPECT(0xf9, gbc.readMem(0xc373));
        // CC 038A
        gbc.setState(0x2017, 0x9ff1, 0x8700, 0x8e02, 0x4d3f, 0x886b, 0x0, 0x1);
        gbc.writeMem(0x2017, { 0xcc, 0x1e, 0x7b });
        gbc.step();
        EXPECT(0x87, gbc.a());
        EXPECT(0x8e, gbc.b());
        EXPECT(0x2, gbc.c());
        EXPECT(0x4d, gbc.d());
        EXPECT(0x3f, gbc.e());
        EXPECT(0x88, gbc.h());
        EXPECT(0x6b, gbc.l());
        EXPECT(0x9ff1, gbc.sp());
        EXPECT(0x201a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 038C
        gbc.setState(0x7b85, 0x2737, 0xb410, 0x6361, 0x8a45, 0x3815, 0x0, 0x0);
        gbc.writeMem(0x7b85, { 0xcc, 0x9f, 0xe4 });
        gbc.step();
        EXPECT(0xb4, gbc.a());
        EXPECT(0x63, gbc.b());
        EXPECT(0x61, gbc.c());
        EXPECT(0x8a, gbc.d());
        EXPECT(0x45, gbc.e());
        EXPECT(0x38, gbc.h());
        EXPECT(0x15, gbc.l());
        EXPECT(0x2737, gbc.sp());
        EXPECT(0x7b88, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 038D
        gbc.setState(0x4e24, 0x5e43, 0x8d10, 0xda99, 0x7def, 0x4619, 0x1, 0x0);
        gbc.writeMem(0x4e24, { 0xcc, 0x34, 0x64 });
        gbc.step();
        EXPECT(0x8d, gbc.a());
        EXPECT(0xda, gbc.b());
        EXPECT(0x99, gbc.c());
        EXPECT(0x7d, gbc.d());
        EXPECT(0xef, gbc.e());
        EXPECT(0x46, gbc.h());
        EXPECT(0x19, gbc.l());
        EXPECT(0x5e43, gbc.sp());
        EXPECT(0x4e27, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 038E
        gbc.setState(0x2137, 0xe73b, 0x6b10, 0x80d1, 0xea06, 0x3348, 0x0, 0x1);
        gbc.writeMem(0x2137, { 0xcc, 0xf1, 0xf0 });
        gbc.step();
        EXPECT(0x6b, gbc.a());
        EXPECT(0x80, gbc.b());
        EXPECT(0xd1, gbc.c());
        EXPECT(0xea, gbc.d());
        EXPECT(0x6, gbc.e());
        EXPECT(0x33, gbc.h());
        EXPECT(0x48, gbc.l());
        EXPECT(0xe73b, gbc.sp());
        EXPECT(0x213a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 0390
        gbc.setState(0xe7e1, 0xa79f, 0xfd80, 0x797, 0xab6e, 0xdce5, 0x1, 0x0);
        gbc.writeMem(0xa79d, { 0x0, 0x0 });
        gbc.writeMem(0xe7e1, { 0xcc, 0xd1, 0x4b });
        gbc.step();
        EXPECT(0xfd, gbc.a());
        EXPECT(0x7, gbc.b());
        EXPECT(0x97, gbc.c());
        EXPECT(0xab, gbc.d());
        EXPECT(0x6e, gbc.e());
        EXPECT(0xdc, gbc.h());
        EXPECT(0xe5, gbc.l());
        EXPECT(0xa79d, gbc.sp());
        EXPECT(0x4bd1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xe4, gbc.readMem(0xa79d));
        EXPECT(0xe7, gbc.readMem(0xa79e));
        EXPECT(0xcc, gbc.readMem(0xe7e1));
        EXPECT(0xd1, gbc.readMem(0xe7e2));
        EXPECT(0x4b, gbc.readMem(0xe7e3));
        // CC 0391
        gbc.setState(0x700e, 0xcbdd, 0xa0a0, 0xb35a, 0x4b8a, 0xfb3d, 0x0, 0x1);
        gbc.writeMem(0x700e, { 0xcc, 0x1, 0x24 });
        gbc.writeMem(0xcbdb, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xa0, gbc.a());
        EXPECT(0xb3, gbc.b());
        EXPECT(0x5a, gbc.c());
        EXPECT(0x4b, gbc.d());
        EXPECT(0x8a, gbc.e());
        EXPECT(0xfb, gbc.h());
        EXPECT(0x3d, gbc.l());
        EXPECT(0xcbdb, gbc.sp());
        EXPECT(0x2401, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x11, gbc.readMem(0xcbdb));
        EXPECT(0x70, gbc.readMem(0xcbdc));
        // CC 0393
        gbc.setState(0xb19e, 0x8194, 0xea20, 0x42af, 0x3d00, 0x8f1d, 0x0, 0x0);
        gbc.writeMem(0xb19e, { 0xcc, 0xb1, 0x77 });
        gbc.step();
        EXPECT(0xea, gbc.a());
        EXPECT(0x42, gbc.b());
        EXPECT(0xaf, gbc.c());
        EXPECT(0x3d, gbc.d());
        EXPECT(0x0, gbc.e());
        EXPECT(0x8f, gbc.h());
        EXPECT(0x1d, gbc.l());
        EXPECT(0x8194, gbc.sp());
        EXPECT(0xb1a1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xb19e));
        EXPECT(0xb1, gbc.readMem(0xb19f));
        EXPECT(0x77, gbc.readMem(0xb1a0));
        // CC 0394
        gbc.setState(0xd613, 0x1997, 0x2170, 0x8678, 0x218f, 0xbbf3, 0x1, 0x0);
        gbc.writeMem(0xd613, { 0xcc, 0x7e, 0x6c });
        gbc.step();
        EXPECT(0x21, gbc.a());
        EXPECT(0x86, gbc.b());
        EXPECT(0x78, gbc.c());
        EXPECT(0x21, gbc.d());
        EXPECT(0x8f, gbc.e());
        EXPECT(0xbb, gbc.h());
        EXPECT(0xf3, gbc.l());
        EXPECT(0x1997, gbc.sp());
        EXPECT(0xd616, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xd613));
        EXPECT(0x7e, gbc.readMem(0xd614));
        EXPECT(0x6c, gbc.readMem(0xd615));
        // CC 0396
        gbc.setState(0x3268, 0xbeec, 0xfe20, 0x73a7, 0xb4e9, 0x2b2b, 0x0, 0x1);
        gbc.writeMem(0x3268, { 0xcc, 0x8e, 0xfd });
        gbc.step();
        EXPECT(0xfe, gbc.a());
        EXPECT(0x73, gbc.b());
        EXPECT(0xa7, gbc.c());
        EXPECT(0xb4, gbc.d());
        EXPECT(0xe9, gbc.e());
        EXPECT(0x2b, gbc.h());
        EXPECT(0x2b, gbc.l());
        EXPECT(0xbeec, gbc.sp());
        EXPECT(0x326b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 0397
        gbc.setState(0x4b6c, 0x726a, 0xf510, 0xcb1b, 0xf1c4, 0x14c3, 0x0, 0x0);
        gbc.writeMem(0x4b6c, { 0xcc, 0x2d, 0xe9 });
        gbc.step();
        EXPECT(0xf5, gbc.a());
        EXPECT(0xcb, gbc.b());
        EXPECT(0x1b, gbc.c());
        EXPECT(0xf1, gbc.d());
        EXPECT(0xc4, gbc.e());
        EXPECT(0x14, gbc.h());
        EXPECT(0xc3, gbc.l());
        EXPECT(0x726a, gbc.sp());
        EXPECT(0x4b6f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 0398
        gbc.setState(0xe356, 0x30d9, 0x2530, 0x3b8f, 0x20ad, 0xeb86, 0x1, 0x0);
        gbc.writeMem(0xe356, { 0xcc, 0xf5, 0x1b });
        gbc.step();
        EXPECT(0x25, gbc.a());
        EXPECT(0x3b, gbc.b());
        EXPECT(0x8f, gbc.c());
        EXPECT(0x20, gbc.d());
        EXPECT(0xad, gbc.e());
        EXPECT(0xeb, gbc.h());
        EXPECT(0x86, gbc.l());
        EXPECT(0x30d9, gbc.sp());
        EXPECT(0xe359, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xe356));
        EXPECT(0xf5, gbc.readMem(0xe357));
        EXPECT(0x1b, gbc.readMem(0xe358));
        // CC 0399
        gbc.setState(0x9e75, 0x264d, 0xee00, 0xf172, 0x5d11, 0x6271, 0x0, 0x1);
        gbc.writeMem(0x9e75, { 0xcc, 0x6f, 0xe2 });
        gbc.step();
        EXPECT(0xee, gbc.a());
        EXPECT(0xf1, gbc.b());
        EXPECT(0x72, gbc.c());
        EXPECT(0x5d, gbc.d());
        EXPECT(0x11, gbc.e());
        EXPECT(0x62, gbc.h());
        EXPECT(0x71, gbc.l());
        EXPECT(0x264d, gbc.sp());
        EXPECT(0x9e78, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0x9e75));
        EXPECT(0x6f, gbc.readMem(0x9e76));
        EXPECT(0xe2, gbc.readMem(0x9e77));
        // CC 039A
        gbc.setState(0xf9c, 0xd9f3, 0x3310, 0xae80, 0xf3af, 0xa8c2, 0x0, 0x1);
        gbc.writeMem(0xf9c, { 0xcc, 0xb, 0xbe });
        gbc.step();
        EXPECT(0x33, gbc.a());
        EXPECT(0xae, gbc.b());
        EXPECT(0x80, gbc.c());
        EXPECT(0xf3, gbc.d());
        EXPECT(0xaf, gbc.e());
        EXPECT(0xa8, gbc.h());
        EXPECT(0xc2, gbc.l());
        EXPECT(0xd9f3, gbc.sp());
        EXPECT(0xf9f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 039C
        gbc.setState(0x983a, 0x9e95, 0xd4f0, 0x12cc, 0x4d78, 0x6163, 0x0, 0x1);
        gbc.writeMem(0x983a, { 0xcc, 0x64, 0xd7 });
        gbc.writeMem(0x9e93, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xd4, gbc.a());
        EXPECT(0x12, gbc.b());
        EXPECT(0xcc, gbc.c());
        EXPECT(0x4d, gbc.d());
        EXPECT(0x78, gbc.e());
        EXPECT(0x61, gbc.h());
        EXPECT(0x63, gbc.l());
        EXPECT(0x9e93, gbc.sp());
        EXPECT(0xd764, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0x983a));
        EXPECT(0x64, gbc.readMem(0x983b));
        EXPECT(0xd7, gbc.readMem(0x983c));
        EXPECT(0x3d, gbc.readMem(0x9e93));
        EXPECT(0x98, gbc.readMem(0x9e94));
        // CC 039D
        gbc.setState(0x93d6, 0x909c, 0x6420, 0x79a6, 0xa068, 0x177a, 0x0, 0x0);
        gbc.writeMem(0x93d6, { 0xcc, 0x5a, 0x4 });
        gbc.step();
        EXPECT(0x64, gbc.a());
        EXPECT(0x79, gbc.b());
        EXPECT(0xa6, gbc.c());
        EXPECT(0xa0, gbc.d());
        EXPECT(0x68, gbc.e());
        EXPECT(0x17, gbc.h());
        EXPECT(0x7a, gbc.l());
        EXPECT(0x909c, gbc.sp());
        EXPECT(0x93d9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0x93d6));
        EXPECT(0x5a, gbc.readMem(0x93d7));
        EXPECT(0x4, gbc.readMem(0x93d8));
        // CC 039E
        gbc.setState(0x5379, 0xf584, 0x28c0, 0x2f60, 0x1397, 0x151f, 0x0, 0x1);
        gbc.writeMem(0x5379, { 0xcc, 0xad, 0xb });
        gbc.writeMem(0xf582, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x28, gbc.a());
        EXPECT(0x2f, gbc.b());
        EXPECT(0x60, gbc.c());
        EXPECT(0x13, gbc.d());
        EXPECT(0x97, gbc.e());
        EXPECT(0x15, gbc.h());
        EXPECT(0x1f, gbc.l());
        EXPECT(0xf582, gbc.sp());
        EXPECT(0xbad, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x7c, gbc.readMem(0xf582));
        EXPECT(0x53, gbc.readMem(0xf583));
        // CC 03A1
        gbc.setState(0x1d99, 0x60c8, 0xf500, 0x74f1, 0x1e77, 0xf5f0, 0x0, 0x1);
        gbc.writeMem(0x1d99, { 0xcc, 0x39, 0xe9 });
        gbc.step();
        EXPECT(0xf5, gbc.a());
        EXPECT(0x74, gbc.b());
        EXPECT(0xf1, gbc.c());
        EXPECT(0x1e, gbc.d());
        EXPECT(0x77, gbc.e());
        EXPECT(0xf5, gbc.h());
        EXPECT(0xf0, gbc.l());
        EXPECT(0x60c8, gbc.sp());
        EXPECT(0x1d9c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 03A3
        gbc.setState(0xb140, 0x7272, 0x5f60, 0x31a0, 0x7ca6, 0x46a8, 0x0, 0x1);
        gbc.writeMem(0xb140, { 0xcc, 0x2c, 0x14 });
        gbc.step();
        EXPECT(0x5f, gbc.a());
        EXPECT(0x31, gbc.b());
        EXPECT(0xa0, gbc.c());
        EXPECT(0x7c, gbc.d());
        EXPECT(0xa6, gbc.e());
        EXPECT(0x46, gbc.h());
        EXPECT(0xa8, gbc.l());
        EXPECT(0x7272, gbc.sp());
        EXPECT(0xb143, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xb140));
        EXPECT(0x2c, gbc.readMem(0xb141));
        EXPECT(0x14, gbc.readMem(0xb142));
        // CC 03A4
        gbc.setState(0xdd5e, 0x78e6, 0x6250, 0xbf5a, 0x13ab, 0xb46c, 0x0, 0x1);
        gbc.writeMem(0xdd5e, { 0xcc, 0x3d, 0xc8 });
        gbc.step();
        EXPECT(0x62, gbc.a());
        EXPECT(0xbf, gbc.b());
        EXPECT(0x5a, gbc.c());
        EXPECT(0x13, gbc.d());
        EXPECT(0xab, gbc.e());
        EXPECT(0xb4, gbc.h());
        EXPECT(0x6c, gbc.l());
        EXPECT(0x78e6, gbc.sp());
        EXPECT(0xdd61, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xdd5e));
        EXPECT(0x3d, gbc.readMem(0xdd5f));
        EXPECT(0xc8, gbc.readMem(0xdd60));
        // CC 03A5
        gbc.setState(0x90de, 0x9751, 0x7a90, 0xb3cc, 0x77c9, 0x4eca, 0x0, 0x1);
        gbc.writeMem(0x90de, { 0xcc, 0x1c, 0xb5 });
        gbc.writeMem(0x974f, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x7a, gbc.a());
        EXPECT(0xb3, gbc.b());
        EXPECT(0xcc, gbc.c());
        EXPECT(0x77, gbc.d());
        EXPECT(0xc9, gbc.e());
        EXPECT(0x4e, gbc.h());
        EXPECT(0xca, gbc.l());
        EXPECT(0x974f, gbc.sp());
        EXPECT(0xb51c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0x90de));
        EXPECT(0x1c, gbc.readMem(0x90df));
        EXPECT(0xb5, gbc.readMem(0x90e0));
        EXPECT(0xe1, gbc.readMem(0x974f));
        EXPECT(0x90, gbc.readMem(0x9750));
        // CC 03A7
        gbc.setState(0x9923, 0x29c, 0xe570, 0xae72, 0xa32c, 0x994a, 0x1, 0x0);
        gbc.writeMem(0x9923, { 0xcc, 0xc0, 0xea });
        gbc.step();
        EXPECT(0xe5, gbc.a());
        EXPECT(0xae, gbc.b());
        EXPECT(0x72, gbc.c());
        EXPECT(0xa3, gbc.d());
        EXPECT(0x2c, gbc.e());
        EXPECT(0x99, gbc.h());
        EXPECT(0x4a, gbc.l());
        EXPECT(0x29c, gbc.sp());
        EXPECT(0x9926, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0x9923));
        EXPECT(0xc0, gbc.readMem(0x9924));
        EXPECT(0xea, gbc.readMem(0x9925));
        // CC 03A8
        gbc.setState(0xccf, 0xb127, 0xa3c0, 0x4c74, 0x6749, 0x98a9, 0x0, 0x0);
        gbc.writeMem(0xccf, { 0xcc, 0xa3, 0xb });
        gbc.writeMem(0xb125, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xa3, gbc.a());
        EXPECT(0x4c, gbc.b());
        EXPECT(0x74, gbc.c());
        EXPECT(0x67, gbc.d());
        EXPECT(0x49, gbc.e());
        EXPECT(0x98, gbc.h());
        EXPECT(0xa9, gbc.l());
        EXPECT(0xb125, gbc.sp());
        EXPECT(0xba3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xd2, gbc.readMem(0xb125));
        EXPECT(0xc, gbc.readMem(0xb126));
        // CC 03A9
        gbc.setState(0xba72, 0xc32d, 0x4020, 0xb4fe, 0x32d0, 0xe6f3, 0x0, 0x0);
        gbc.writeMem(0xba72, { 0xcc, 0x77, 0xec });
        gbc.step();
        EXPECT(0x40, gbc.a());
        EXPECT(0xb4, gbc.b());
        EXPECT(0xfe, gbc.c());
        EXPECT(0x32, gbc.d());
        EXPECT(0xd0, gbc.e());
        EXPECT(0xe6, gbc.h());
        EXPECT(0xf3, gbc.l());
        EXPECT(0xc32d, gbc.sp());
        EXPECT(0xba75, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xba72));
        EXPECT(0x77, gbc.readMem(0xba73));
        EXPECT(0xec, gbc.readMem(0xba74));
        // CC 03AA
        gbc.setState(0xd2a5, 0xe020, 0xd2e0, 0xd249, 0x59b, 0x2bda, 0x1, 0x1);
        gbc.writeMem(0xd2a5, { 0xcc, 0x11, 0x92 });
        gbc.writeMem(0xe01e, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xd2, gbc.a());
        EXPECT(0xd2, gbc.b());
        EXPECT(0x49, gbc.c());
        EXPECT(0x5, gbc.d());
        EXPECT(0x9b, gbc.e());
        EXPECT(0x2b, gbc.h());
        EXPECT(0xda, gbc.l());
        EXPECT(0xe01e, gbc.sp());
        EXPECT(0x9211, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xd2a5));
        EXPECT(0x11, gbc.readMem(0xd2a6));
        EXPECT(0x92, gbc.readMem(0xd2a7));
        EXPECT(0xa8, gbc.readMem(0xe01e));
        EXPECT(0xd2, gbc.readMem(0xe01f));
        // CC 03AB
        gbc.setState(0x5d17, 0xbae2, 0x95f0, 0xd5bc, 0xdbc6, 0xf208, 0x0, 0x1);
        gbc.writeMem(0x5d17, { 0xcc, 0x7f, 0x60 });
        gbc.writeMem(0xbae0, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x95, gbc.a());
        EXPECT(0xd5, gbc.b());
        EXPECT(0xbc, gbc.c());
        EXPECT(0xdb, gbc.d());
        EXPECT(0xc6, gbc.e());
        EXPECT(0xf2, gbc.h());
        EXPECT(0x8, gbc.l());
        EXPECT(0xbae0, gbc.sp());
        EXPECT(0x607f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x1a, gbc.readMem(0xbae0));
        EXPECT(0x5d, gbc.readMem(0xbae1));
        // CC 03AC
        gbc.setState(0x7615, 0x7a08, 0x4e40, 0xe5c2, 0x8e53, 0x72b, 0x0, 0x1);
        gbc.writeMem(0x7615, { 0xcc, 0x5a, 0xc7 });
        gbc.step();
        EXPECT(0x4e, gbc.a());
        EXPECT(0xe5, gbc.b());
        EXPECT(0xc2, gbc.c());
        EXPECT(0x8e, gbc.d());
        EXPECT(0x53, gbc.e());
        EXPECT(0x7, gbc.h());
        EXPECT(0x2b, gbc.l());
        EXPECT(0x7a08, gbc.sp());
        EXPECT(0x7618, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 03AD
        gbc.setState(0xa9c7, 0xbae0, 0x16d0, 0x4d3d, 0x4b4a, 0x6dcb, 0x1, 0x0);
        gbc.writeMem(0xa9c7, { 0xcc, 0xb, 0x9b });
        gbc.writeMem(0xbade, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x16, gbc.a());
        EXPECT(0x4d, gbc.b());
        EXPECT(0x3d, gbc.c());
        EXPECT(0x4b, gbc.d());
        EXPECT(0x4a, gbc.e());
        EXPECT(0x6d, gbc.h());
        EXPECT(0xcb, gbc.l());
        EXPECT(0xbade, gbc.sp());
        EXPECT(0x9b0b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xa9c7));
        EXPECT(0xb, gbc.readMem(0xa9c8));
        EXPECT(0x9b, gbc.readMem(0xa9c9));
        EXPECT(0xca, gbc.readMem(0xbade));
        EXPECT(0xa9, gbc.readMem(0xbadf));
        // CC 03AE
        gbc.setState(0x992f, 0xa4cd, 0xdc80, 0x2b69, 0x26c7, 0xaf40, 0x1, 0x0);
        gbc.writeMem(0x992f, { 0xcc, 0xba, 0xa2 });
        gbc.writeMem(0xa4cb, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xdc, gbc.a());
        EXPECT(0x2b, gbc.b());
        EXPECT(0x69, gbc.c());
        EXPECT(0x26, gbc.d());
        EXPECT(0xc7, gbc.e());
        EXPECT(0xaf, gbc.h());
        EXPECT(0x40, gbc.l());
        EXPECT(0xa4cb, gbc.sp());
        EXPECT(0xa2ba, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0x992f));
        EXPECT(0xba, gbc.readMem(0x9930));
        EXPECT(0xa2, gbc.readMem(0x9931));
        EXPECT(0x32, gbc.readMem(0xa4cb));
        EXPECT(0x99, gbc.readMem(0xa4cc));
        // CC 03AF
        gbc.setState(0x480a, 0xa1d4, 0x2e30, 0xecc2, 0x8f86, 0xe587, 0x0, 0x0);
        gbc.writeMem(0x480a, { 0xcc, 0x32, 0x36 });
        gbc.step();
        EXPECT(0x2e, gbc.a());
        EXPECT(0xec, gbc.b());
        EXPECT(0xc2, gbc.c());
        EXPECT(0x8f, gbc.d());
        EXPECT(0x86, gbc.e());
        EXPECT(0xe5, gbc.h());
        EXPECT(0x87, gbc.l());
        EXPECT(0xa1d4, gbc.sp());
        EXPECT(0x480d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 03B0
        gbc.setState(0xbb8e, 0xce5e, 0x53f0, 0x4ad0, 0xd0fc, 0x91df, 0x0, 0x1);
        gbc.writeMem(0xbb8e, { 0xcc, 0x42, 0xcf });
        gbc.writeMem(0xce5c, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x53, gbc.a());
        EXPECT(0x4a, gbc.b());
        EXPECT(0xd0, gbc.c());
        EXPECT(0xd0, gbc.d());
        EXPECT(0xfc, gbc.e());
        EXPECT(0x91, gbc.h());
        EXPECT(0xdf, gbc.l());
        EXPECT(0xce5c, gbc.sp());
        EXPECT(0xcf42, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xbb8e));
        EXPECT(0x42, gbc.readMem(0xbb8f));
        EXPECT(0xcf, gbc.readMem(0xbb90));
        EXPECT(0x91, gbc.readMem(0xce5c));
        EXPECT(0xbb, gbc.readMem(0xce5d));
        // CC 03B1
        gbc.setState(0x3428, 0xa7e6, 0x130, 0x20a0, 0x73c, 0xf5b4, 0x1, 0x1);
        gbc.writeMem(0x3428, { 0xcc, 0x22, 0x2 });
        gbc.step();
        EXPECT(0x1, gbc.a());
        EXPECT(0x20, gbc.b());
        EXPECT(0xa0, gbc.c());
        EXPECT(0x7, gbc.d());
        EXPECT(0x3c, gbc.e());
        EXPECT(0xf5, gbc.h());
        EXPECT(0xb4, gbc.l());
        EXPECT(0xa7e6, gbc.sp());
        EXPECT(0x342b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 03B2
        gbc.setState(0x5943, 0xf1a7, 0xabe0, 0x32ef, 0xf10a, 0x8c10, 0x0, 0x1);
        gbc.writeMem(0x5943, { 0xcc, 0x2d, 0xf6 });
        gbc.writeMem(0xf1a5, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xab, gbc.a());
        EXPECT(0x32, gbc.b());
        EXPECT(0xef, gbc.c());
        EXPECT(0xf1, gbc.d());
        EXPECT(0xa, gbc.e());
        EXPECT(0x8c, gbc.h());
        EXPECT(0x10, gbc.l());
        EXPECT(0xf1a5, gbc.sp());
        EXPECT(0xf62d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x46, gbc.readMem(0xf1a5));
        EXPECT(0x59, gbc.readMem(0xf1a6));
        // CC 03B5
        gbc.setState(0xe61c, 0x3534, 0xa530, 0x107a, 0xc9ec, 0xbf94, 0x0, 0x1);
        gbc.writeMem(0xe61c, { 0xcc, 0xe5, 0x76 });
        gbc.step();
        EXPECT(0xa5, gbc.a());
        EXPECT(0x10, gbc.b());
        EXPECT(0x7a, gbc.c());
        EXPECT(0xc9, gbc.d());
        EXPECT(0xec, gbc.e());
        EXPECT(0xbf, gbc.h());
        EXPECT(0x94, gbc.l());
        EXPECT(0x3534, gbc.sp());
        EXPECT(0xe61f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xe61c));
        EXPECT(0xe5, gbc.readMem(0xe61d));
        EXPECT(0x76, gbc.readMem(0xe61e));
        // CC 03B7
        gbc.setState(0x3546, 0x75d7, 0x5110, 0x21bc, 0x2e98, 0x3384, 0x0, 0x1);
        gbc.writeMem(0x3546, { 0xcc, 0x27, 0x13 });
        gbc.step();
        EXPECT(0x51, gbc.a());
        EXPECT(0x21, gbc.b());
        EXPECT(0xbc, gbc.c());
        EXPECT(0x2e, gbc.d());
        EXPECT(0x98, gbc.e());
        EXPECT(0x33, gbc.h());
        EXPECT(0x84, gbc.l());
        EXPECT(0x75d7, gbc.sp());
        EXPECT(0x3549, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 03B8
        gbc.setState(0x28b4, 0x6f68, 0x7b40, 0x2d19, 0x1384, 0x638d, 0x0, 0x1);
        gbc.writeMem(0x28b4, { 0xcc, 0x76, 0xb7 });
        gbc.step();
        EXPECT(0x7b, gbc.a());
        EXPECT(0x2d, gbc.b());
        EXPECT(0x19, gbc.c());
        EXPECT(0x13, gbc.d());
        EXPECT(0x84, gbc.e());
        EXPECT(0x63, gbc.h());
        EXPECT(0x8d, gbc.l());
        EXPECT(0x6f68, gbc.sp());
        EXPECT(0x28b7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 03B9
        gbc.setState(0x4863, 0x1264, 0x8e10, 0xa060, 0x4336, 0xc874, 0x1, 0x0);
        gbc.writeMem(0x4863, { 0xcc, 0xf0, 0xa5 });
        gbc.step();
        EXPECT(0x8e, gbc.a());
        EXPECT(0xa0, gbc.b());
        EXPECT(0x60, gbc.c());
        EXPECT(0x43, gbc.d());
        EXPECT(0x36, gbc.e());
        EXPECT(0xc8, gbc.h());
        EXPECT(0x74, gbc.l());
        EXPECT(0x1264, gbc.sp());
        EXPECT(0x4866, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 03BC
        gbc.setState(0x9ffe, 0xba33, 0x17c0, 0x1212, 0x554a, 0x2a0c, 0x0, 0x0);
        gbc.writeMem(0x9ffe, { 0xcc, 0x22, 0xf7 });
        gbc.writeMem(0xba31, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x17, gbc.a());
        EXPECT(0x12, gbc.b());
        EXPECT(0x12, gbc.c());
        EXPECT(0x55, gbc.d());
        EXPECT(0x4a, gbc.e());
        EXPECT(0x2a, gbc.h());
        EXPECT(0xc, gbc.l());
        EXPECT(0xba31, gbc.sp());
        EXPECT(0xf722, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0x9ffe));
        EXPECT(0x22, gbc.readMem(0x9fff));
        EXPECT(0xf7, gbc.readMem(0xa000));
        EXPECT(0x1, gbc.readMem(0xba31));
        EXPECT(0xa0, gbc.readMem(0xba32));
        // CC 03BD
        gbc.setState(0xc91, 0xe70b, 0xf800, 0x6e14, 0x8c76, 0x3e92, 0x0, 0x0);
        gbc.writeMem(0xc91, { 0xcc, 0x1a, 0x7 });
        gbc.step();
        EXPECT(0xf8, gbc.a());
        EXPECT(0x6e, gbc.b());
        EXPECT(0x14, gbc.c());
        EXPECT(0x8c, gbc.d());
        EXPECT(0x76, gbc.e());
        EXPECT(0x3e, gbc.h());
        EXPECT(0x92, gbc.l());
        EXPECT(0xe70b, gbc.sp());
        EXPECT(0xc94, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 03BE
        gbc.setState(0x48d8, 0x38aa, 0x540, 0x66d5, 0xbfd8, 0x435d, 0x1, 0x0);
        gbc.writeMem(0x48d8, { 0xcc, 0x6d, 0xc3 });
        gbc.step();
        EXPECT(0x5, gbc.a());
        EXPECT(0x66, gbc.b());
        EXPECT(0xd5, gbc.c());
        EXPECT(0xbf, gbc.d());
        EXPECT(0xd8, gbc.e());
        EXPECT(0x43, gbc.h());
        EXPECT(0x5d, gbc.l());
        EXPECT(0x38aa, gbc.sp());
        EXPECT(0x48db, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 03BF
        gbc.setState(0x6325, 0x2e9c, 0x6010, 0x2160, 0xc738, 0x495a, 0x1, 0x0);
        gbc.writeMem(0x6325, { 0xcc, 0xe4, 0x52 });
        gbc.step();
        EXPECT(0x60, gbc.a());
        EXPECT(0x21, gbc.b());
        EXPECT(0x60, gbc.c());
        EXPECT(0xc7, gbc.d());
        EXPECT(0x38, gbc.e());
        EXPECT(0x49, gbc.h());
        EXPECT(0x5a, gbc.l());
        EXPECT(0x2e9c, gbc.sp());
        EXPECT(0x6328, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 03C1
        gbc.setState(0xcb20, 0xb5b7, 0xc080, 0x460b, 0x393e, 0xe3ce, 0x1, 0x1);
        gbc.writeMem(0xb5b5, { 0x0, 0x0 });
        gbc.writeMem(0xcb20, { 0xcc, 0xa2, 0x7 });
        gbc.step();
        EXPECT(0xc0, gbc.a());
        EXPECT(0x46, gbc.b());
        EXPECT(0xb, gbc.c());
        EXPECT(0x39, gbc.d());
        EXPECT(0x3e, gbc.e());
        EXPECT(0xe3, gbc.h());
        EXPECT(0xce, gbc.l());
        EXPECT(0xb5b5, gbc.sp());
        EXPECT(0x7a2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x23, gbc.readMem(0xb5b5));
        EXPECT(0xcb, gbc.readMem(0xb5b6));
        EXPECT(0xcc, gbc.readMem(0xcb20));
        EXPECT(0xa2, gbc.readMem(0xcb21));
        EXPECT(0x7, gbc.readMem(0xcb22));
        // CC 03C4
        gbc.setState(0x4aa4, 0xb2b2, 0x56a0, 0xfbfb, 0xaf22, 0xb70c, 0x0, 0x1);
        gbc.writeMem(0x4aa4, { 0xcc, 0x5f, 0x34 });
        gbc.writeMem(0xb2b0, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x56, gbc.a());
        EXPECT(0xfb, gbc.b());
        EXPECT(0xfb, gbc.c());
        EXPECT(0xaf, gbc.d());
        EXPECT(0x22, gbc.e());
        EXPECT(0xb7, gbc.h());
        EXPECT(0xc, gbc.l());
        EXPECT(0xb2b0, gbc.sp());
        EXPECT(0x345f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xa7, gbc.readMem(0xb2b0));
        EXPECT(0x4a, gbc.readMem(0xb2b1));
        // CC 03C6
        gbc.setState(0xc1d7, 0xd7a3, 0x5630, 0xb61c, 0x7c58, 0x7b8a, 0x1, 0x1);
        gbc.writeMem(0xc1d7, { 0xcc, 0xd6, 0x4d });
        gbc.step();
        EXPECT(0x56, gbc.a());
        EXPECT(0xb6, gbc.b());
        EXPECT(0x1c, gbc.c());
        EXPECT(0x7c, gbc.d());
        EXPECT(0x58, gbc.e());
        EXPECT(0x7b, gbc.h());
        EXPECT(0x8a, gbc.l());
        EXPECT(0xd7a3, gbc.sp());
        EXPECT(0xc1da, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xc1d7));
        EXPECT(0xd6, gbc.readMem(0xc1d8));
        EXPECT(0x4d, gbc.readMem(0xc1d9));
        // CC 03C7
        gbc.setState(0x5c68, 0xd609, 0xc290, 0x7d14, 0x5023, 0xdc3f, 0x1, 0x1);
        gbc.writeMem(0x5c68, { 0xcc, 0x38, 0xd7 });
        gbc.writeMem(0xd607, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xc2, gbc.a());
        EXPECT(0x7d, gbc.b());
        EXPECT(0x14, gbc.c());
        EXPECT(0x50, gbc.d());
        EXPECT(0x23, gbc.e());
        EXPECT(0xdc, gbc.h());
        EXPECT(0x3f, gbc.l());
        EXPECT(0xd607, gbc.sp());
        EXPECT(0xd738, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x6b, gbc.readMem(0xd607));
        EXPECT(0x5c, gbc.readMem(0xd608));
        // CC 03C8
        gbc.setState(0xeaf5, 0xb68, 0xa970, 0xbe71, 0xf708, 0x8186, 0x0, 0x1);
        gbc.writeMem(0xeaf5, { 0xcc, 0xc3, 0xc1 });
        gbc.step();
        EXPECT(0xa9, gbc.a());
        EXPECT(0xbe, gbc.b());
        EXPECT(0x71, gbc.c());
        EXPECT(0xf7, gbc.d());
        EXPECT(0x8, gbc.e());
        EXPECT(0x81, gbc.h());
        EXPECT(0x86, gbc.l());
        EXPECT(0xb68, gbc.sp());
        EXPECT(0xeaf8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xeaf5));
        EXPECT(0xc3, gbc.readMem(0xeaf6));
        EXPECT(0xc1, gbc.readMem(0xeaf7));
        // CC 03C9
        gbc.setState(0x339a, 0x167e, 0x9810, 0xc2b2, 0xc27e, 0x5017, 0x0, 0x0);
        gbc.writeMem(0x339a, { 0xcc, 0x42, 0xc0 });
        gbc.step();
        EXPECT(0x98, gbc.a());
        EXPECT(0xc2, gbc.b());
        EXPECT(0xb2, gbc.c());
        EXPECT(0xc2, gbc.d());
        EXPECT(0x7e, gbc.e());
        EXPECT(0x50, gbc.h());
        EXPECT(0x17, gbc.l());
        EXPECT(0x167e, gbc.sp());
        EXPECT(0x339d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 03CA
        gbc.setState(0x8378, 0x8a0a, 0x12d0, 0x3938, 0xe432, 0x8bda, 0x1, 0x0);
        gbc.writeMem(0x8378, { 0xcc, 0xaa, 0xbf });
        gbc.writeMem(0x8a08, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x12, gbc.a());
        EXPECT(0x39, gbc.b());
        EXPECT(0x38, gbc.c());
        EXPECT(0xe4, gbc.d());
        EXPECT(0x32, gbc.e());
        EXPECT(0x8b, gbc.h());
        EXPECT(0xda, gbc.l());
        EXPECT(0x8a08, gbc.sp());
        EXPECT(0xbfaa, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0x8378));
        EXPECT(0xaa, gbc.readMem(0x8379));
        EXPECT(0xbf, gbc.readMem(0x837a));
        EXPECT(0x7b, gbc.readMem(0x8a08));
        EXPECT(0x83, gbc.readMem(0x8a09));
        // CC 03CB
        gbc.setState(0x96e4, 0xac04, 0x2970, 0x58a6, 0x27, 0xb4d6, 0x1, 0x0);
        gbc.writeMem(0x96e4, { 0xcc, 0x56, 0x8d });
        gbc.step();
        EXPECT(0x29, gbc.a());
        EXPECT(0x58, gbc.b());
        EXPECT(0xa6, gbc.c());
        EXPECT(0x0, gbc.d());
        EXPECT(0x27, gbc.e());
        EXPECT(0xb4, gbc.h());
        EXPECT(0xd6, gbc.l());
        EXPECT(0xac04, gbc.sp());
        EXPECT(0x96e7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0x96e4));
        EXPECT(0x56, gbc.readMem(0x96e5));
        EXPECT(0x8d, gbc.readMem(0x96e6));
        // CC 03CC
        gbc.setState(0x9513, 0x2a86, 0xcb20, 0xd879, 0x1e87, 0x8607, 0x1, 0x0);
        gbc.writeMem(0x9513, { 0xcc, 0xf1, 0xa7 });
        gbc.step();
        EXPECT(0xcb, gbc.a());
        EXPECT(0xd8, gbc.b());
        EXPECT(0x79, gbc.c());
        EXPECT(0x1e, gbc.d());
        EXPECT(0x87, gbc.e());
        EXPECT(0x86, gbc.h());
        EXPECT(0x7, gbc.l());
        EXPECT(0x2a86, gbc.sp());
        EXPECT(0x9516, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0x9513));
        EXPECT(0xf1, gbc.readMem(0x9514));
        EXPECT(0xa7, gbc.readMem(0x9515));
        // CC 03CD
        gbc.setState(0x6105, 0x667e, 0xec40, 0xc52a, 0x5a45, 0x3de8, 0x1, 0x1);
        gbc.writeMem(0x6105, { 0xcc, 0xf5, 0x4c });
        gbc.step();
        EXPECT(0xec, gbc.a());
        EXPECT(0xc5, gbc.b());
        EXPECT(0x2a, gbc.c());
        EXPECT(0x5a, gbc.d());
        EXPECT(0x45, gbc.e());
        EXPECT(0x3d, gbc.h());
        EXPECT(0xe8, gbc.l());
        EXPECT(0x667e, gbc.sp());
        EXPECT(0x6108, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 03CE
        gbc.setState(0x475a, 0xb51a, 0x6b20, 0x3397, 0x1d6a, 0xde20, 0x0, 0x0);
        gbc.writeMem(0x475a, { 0xcc, 0x39, 0xaf });
        gbc.step();
        EXPECT(0x6b, gbc.a());
        EXPECT(0x33, gbc.b());
        EXPECT(0x97, gbc.c());
        EXPECT(0x1d, gbc.d());
        EXPECT(0x6a, gbc.e());
        EXPECT(0xde, gbc.h());
        EXPECT(0x20, gbc.l());
        EXPECT(0xb51a, gbc.sp());
        EXPECT(0x475d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 03CF
        gbc.setState(0xa97b, 0x94ed, 0x6720, 0x96a7, 0xd096, 0xf94f, 0x1, 0x0);
        gbc.writeMem(0xa97b, { 0xcc, 0x6c, 0xb2 });
        gbc.step();
        EXPECT(0x67, gbc.a());
        EXPECT(0x96, gbc.b());
        EXPECT(0xa7, gbc.c());
        EXPECT(0xd0, gbc.d());
        EXPECT(0x96, gbc.e());
        EXPECT(0xf9, gbc.h());
        EXPECT(0x4f, gbc.l());
        EXPECT(0x94ed, gbc.sp());
        EXPECT(0xa97e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xa97b));
        EXPECT(0x6c, gbc.readMem(0xa97c));
        EXPECT(0xb2, gbc.readMem(0xa97d));
        // CC 03D1
        gbc.setState(0xa93b, 0x3f91, 0x9520, 0x91ca, 0xa06d, 0xff2a, 0x1, 0x0);
        gbc.writeMem(0xa93b, { 0xcc, 0x2c, 0x22 });
        gbc.step();
        EXPECT(0x95, gbc.a());
        EXPECT(0x91, gbc.b());
        EXPECT(0xca, gbc.c());
        EXPECT(0xa0, gbc.d());
        EXPECT(0x6d, gbc.e());
        EXPECT(0xff, gbc.h());
        EXPECT(0x2a, gbc.l());
        EXPECT(0x3f91, gbc.sp());
        EXPECT(0xa93e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xa93b));
        EXPECT(0x2c, gbc.readMem(0xa93c));
        EXPECT(0x22, gbc.readMem(0xa93d));
        // CC 03D2
        gbc.setState(0x5ce5, 0xd676, 0x1c40, 0xed5, 0x249f, 0x13, 0x0, 0x1);
        gbc.writeMem(0x5ce5, { 0xcc, 0x8a, 0xc3 });
        gbc.step();
        EXPECT(0x1c, gbc.a());
        EXPECT(0xe, gbc.b());
        EXPECT(0xd5, gbc.c());
        EXPECT(0x24, gbc.d());
        EXPECT(0x9f, gbc.e());
        EXPECT(0x0, gbc.h());
        EXPECT(0x13, gbc.l());
        EXPECT(0xd676, gbc.sp());
        EXPECT(0x5ce8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 03D3
        gbc.setState(0xba0d, 0x28fe, 0x6530, 0xc711, 0x5657, 0x1eaf, 0x0, 0x1);
        gbc.writeMem(0xba0d, { 0xcc, 0xe, 0x54 });
        gbc.step();
        EXPECT(0x65, gbc.a());
        EXPECT(0xc7, gbc.b());
        EXPECT(0x11, gbc.c());
        EXPECT(0x56, gbc.d());
        EXPECT(0x57, gbc.e());
        EXPECT(0x1e, gbc.h());
        EXPECT(0xaf, gbc.l());
        EXPECT(0x28fe, gbc.sp());
        EXPECT(0xba10, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xba0d));
        EXPECT(0xe, gbc.readMem(0xba0e));
        EXPECT(0x54, gbc.readMem(0xba0f));
        // CC 03D6
        gbc.setState(0x3b4f, 0xd30b, 0x1ae0, 0xf0b, 0x13df, 0x39b5, 0x1, 0x1);
        gbc.writeMem(0x3b4f, { 0xcc, 0x11, 0xf1 });
        gbc.writeMem(0xd309, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x1a, gbc.a());
        EXPECT(0xf, gbc.b());
        EXPECT(0xb, gbc.c());
        EXPECT(0x13, gbc.d());
        EXPECT(0xdf, gbc.e());
        EXPECT(0x39, gbc.h());
        EXPECT(0xb5, gbc.l());
        EXPECT(0xd309, gbc.sp());
        EXPECT(0xf111, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x52, gbc.readMem(0xd309));
        EXPECT(0x3b, gbc.readMem(0xd30a));
        // CC 03D9
        gbc.setState(0x6236, 0xa767, 0x5e30, 0xba63, 0x14b1, 0xbdc6, 0x0, 0x1);
        gbc.writeMem(0x6236, { 0xcc, 0x12, 0x36 });
        gbc.step();
        EXPECT(0x5e, gbc.a());
        EXPECT(0xba, gbc.b());
        EXPECT(0x63, gbc.c());
        EXPECT(0x14, gbc.d());
        EXPECT(0xb1, gbc.e());
        EXPECT(0xbd, gbc.h());
        EXPECT(0xc6, gbc.l());
        EXPECT(0xa767, gbc.sp());
        EXPECT(0x6239, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 03DB
        gbc.setState(0xcc23, 0x4091, 0x2f40, 0x2e37, 0xf8d3, 0xb77a, 0x1, 0x0);
        gbc.writeMem(0xcc23, { 0xcc, 0x68, 0xc7 });
        gbc.step();
        EXPECT(0x2f, gbc.a());
        EXPECT(0x2e, gbc.b());
        EXPECT(0x37, gbc.c());
        EXPECT(0xf8, gbc.d());
        EXPECT(0xd3, gbc.e());
        EXPECT(0xb7, gbc.h());
        EXPECT(0x7a, gbc.l());
        EXPECT(0x4091, gbc.sp());
        EXPECT(0xcc26, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xcc23));
        EXPECT(0x68, gbc.readMem(0xcc24));
        EXPECT(0xc7, gbc.readMem(0xcc25));
        // CC 03DC
        gbc.setState(0xedee, 0xdced, 0x4af0, 0x4e16, 0x6b5d, 0x46e2, 0x1, 0x0);
        gbc.writeMem(0xdceb, { 0x0, 0x0 });
        gbc.writeMem(0xedee, { 0xcc, 0x3a, 0x24 });
        gbc.step();
        EXPECT(0x4a, gbc.a());
        EXPECT(0x4e, gbc.b());
        EXPECT(0x16, gbc.c());
        EXPECT(0x6b, gbc.d());
        EXPECT(0x5d, gbc.e());
        EXPECT(0x46, gbc.h());
        EXPECT(0xe2, gbc.l());
        EXPECT(0xdceb, gbc.sp());
        EXPECT(0x243a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xf1, gbc.readMem(0xdceb));
        EXPECT(0xed, gbc.readMem(0xdcec));
        EXPECT(0xcc, gbc.readMem(0xedee));
        EXPECT(0x3a, gbc.readMem(0xedef));
        EXPECT(0x24, gbc.readMem(0xedf0));
        // CC 03DD
        gbc.setState(0xa0e, 0x11e3, 0x8f30, 0xb952, 0x88ba, 0xb156, 0x0, 0x1);
        gbc.writeMem(0xa0e, { 0xcc, 0x4a, 0x62 });
        gbc.step();
        EXPECT(0x8f, gbc.a());
        EXPECT(0xb9, gbc.b());
        EXPECT(0x52, gbc.c());
        EXPECT(0x88, gbc.d());
        EXPECT(0xba, gbc.e());
        EXPECT(0xb1, gbc.h());
        EXPECT(0x56, gbc.l());
        EXPECT(0x11e3, gbc.sp());
        EXPECT(0xa11, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 03E0
        gbc.setState(0x5a8b, 0x90fc, 0x4c10, 0xbfc6, 0x8c7f, 0xdb4e, 0x0, 0x0);
        gbc.writeMem(0x5a8b, { 0xcc, 0xae, 0x8d });
        gbc.step();
        EXPECT(0x4c, gbc.a());
        EXPECT(0xbf, gbc.b());
        EXPECT(0xc6, gbc.c());
        EXPECT(0x8c, gbc.d());
        EXPECT(0x7f, gbc.e());
        EXPECT(0xdb, gbc.h());
        EXPECT(0x4e, gbc.l());
        EXPECT(0x90fc, gbc.sp());
        EXPECT(0x5a8e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        // CC 03E1
        gbc.setState(0x6b88, 0xf0e4, 0x11d0, 0x62a9, 0x8154, 0xc608, 0x1, 0x1);
        gbc.writeMem(0x6b88, { 0xcc, 0x2, 0x2d });
        gbc.writeMem(0xf0e2, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x11, gbc.a());
        EXPECT(0x62, gbc.b());
        EXPECT(0xa9, gbc.c());
        EXPECT(0x81, gbc.d());
        EXPECT(0x54, gbc.e());
        EXPECT(0xc6, gbc.h());
        EXPECT(0x8, gbc.l());
        EXPECT(0xf0e2, gbc.sp());
        EXPECT(0x2d02, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x8b, gbc.readMem(0xf0e2));
        EXPECT(0x6b, gbc.readMem(0xf0e3));
        // CC 03E2
        gbc.setState(0x5ed1, 0xf831, 0x2ed0, 0x8bcb, 0x832c, 0xa562, 0x1, 0x1);
        gbc.writeMem(0x5ed1, { 0xcc, 0xcd, 0x55 });
        gbc.writeMem(0xf82f, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x2e, gbc.a());
        EXPECT(0x8b, gbc.b());
        EXPECT(0xcb, gbc.c());
        EXPECT(0x83, gbc.d());
        EXPECT(0x2c, gbc.e());
        EXPECT(0xa5, gbc.h());
        EXPECT(0x62, gbc.l());
        EXPECT(0xf82f, gbc.sp());
        EXPECT(0x55cd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xd4, gbc.readMem(0xf82f));
        EXPECT(0x5e, gbc.readMem(0xf830));
        // CC 03E3
        gbc.setState(0x7483, 0x94fa, 0x6f20, 0xaef0, 0xe3f2, 0x541c, 0x1, 0x0);
        gbc.writeMem(0x7483, { 0xcc, 0x5e, 0x28 });
        gbc.step();
        EXPECT(0x6f, gbc.a());
        EXPECT(0xae, gbc.b());
        EXPECT(0xf0, gbc.c());
        EXPECT(0xe3, gbc.d());
        EXPECT(0xf2, gbc.e());
        EXPECT(0x54, gbc.h());
        EXPECT(0x1c, gbc.l());
        EXPECT(0x94fa, gbc.sp());
        EXPECT(0x7486, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 03E5
        gbc.setState(0x9e0, 0x8091, 0x9600, 0xb859, 0xd195, 0xb861, 0x1, 0x0);
        gbc.writeMem(0x9e0, { 0xcc, 0xa1, 0xe4 });
        gbc.step();
        EXPECT(0x96, gbc.a());
        EXPECT(0xb8, gbc.b());
        EXPECT(0x59, gbc.c());
        EXPECT(0xd1, gbc.d());
        EXPECT(0x95, gbc.e());
        EXPECT(0xb8, gbc.h());
        EXPECT(0x61, gbc.l());
        EXPECT(0x8091, gbc.sp());
        EXPECT(0x9e3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // CC 03E6
        gbc.setState(0xd833, 0xbb86, 0xa280, 0x2ed5, 0x6e36, 0x1a8b, 0x0, 0x1);
        gbc.writeMem(0xbb84, { 0x0, 0x0 });
        gbc.writeMem(0xd833, { 0xcc, 0x47, 0xea });
        gbc.step();
        EXPECT(0xa2, gbc.a());
        EXPECT(0x2e, gbc.b());
        EXPECT(0xd5, gbc.c());
        EXPECT(0x6e, gbc.d());
        EXPECT(0x36, gbc.e());
        EXPECT(0x1a, gbc.h());
        EXPECT(0x8b, gbc.l());
        EXPECT(0xbb84, gbc.sp());
        EXPECT(0xea47, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0x36, gbc.readMem(0xbb84));
        EXPECT(0xd8, gbc.readMem(0xbb85));
        EXPECT(0xcc, gbc.readMem(0xd833));
        EXPECT(0x47, gbc.readMem(0xd834));
        EXPECT(0xea, gbc.readMem(0xd835));
        // CC 03E7
        gbc.setState(0xaefe, 0xd0be, 0x5160, 0x6ce6, 0x9cc7, 0x8ef0, 0x1, 0x1);
        gbc.writeMem(0xaefe, { 0xcc, 0xf8, 0x22 });
        gbc.step();
        EXPECT(0x51, gbc.a());
        EXPECT(0x6c, gbc.b());
        EXPECT(0xe6, gbc.c());
        EXPECT(0x9c, gbc.d());
        EXPECT(0xc7, gbc.e());
        EXPECT(0x8e, gbc.h());
        EXPECT(0xf0, gbc.l());
        EXPECT(0xd0be, gbc.sp());
        EXPECT(0xaf01, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xcc, gbc.readMem(0xaefe));
        EXPECT(0xf8, gbc.readMem(0xaeff));
        EXPECT(0x22, gbc.readMem(0xaf00));
    }
