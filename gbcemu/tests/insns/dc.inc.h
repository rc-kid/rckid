    TEST(gbcemu, opcode_dc) {
        GBCEmu gbc{"", nullptr};
        uint8_t cartridge[0x8000];
        cartridge[0x149] = 0x02; // 8kb external RAM
        gbc.loadCartridge(new FlashGamePak(cartridge));
        // DC 0000
        gbc.setState(0x5e34, 0x84e4, 0x4b70, 0x51de, 0x9d36, 0x546f, 0x0, 0x1);
        gbc.writeMem(0x5e34, { 0xdc, 0xd3, 0xf0 });
        gbc.writeMem(0x84e2, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x4b, gbc.a());
        EXPECT(0x51, gbc.b());
        EXPECT(0xde, gbc.c());
        EXPECT(0x9d, gbc.d());
        EXPECT(0x36, gbc.e());
        EXPECT(0x54, gbc.h());
        EXPECT(0x6f, gbc.l());
        EXPECT(0x84e2, gbc.sp());
        EXPECT(0xf0d3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x37, gbc.readMem(0x84e2));
        EXPECT(0x5e, gbc.readMem(0x84e3));
        // DC 0001
        gbc.setState(0xe3d8, 0xa3f3, 0xac20, 0x319b, 0x1d9, 0x24b7, 0x0, 0x1);
        gbc.writeMem(0xe3d8, { 0xdc, 0xe5, 0xe9 });
        gbc.step();
        EXPECT(0xac, gbc.a());
        EXPECT(0x31, gbc.b());
        EXPECT(0x9b, gbc.c());
        EXPECT(0x1, gbc.d());
        EXPECT(0xd9, gbc.e());
        EXPECT(0x24, gbc.h());
        EXPECT(0xb7, gbc.l());
        EXPECT(0xa3f3, gbc.sp());
        EXPECT(0xe3db, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xe3d8));
        EXPECT(0xe5, gbc.readMem(0xe3d9));
        EXPECT(0xe9, gbc.readMem(0xe3da));
        // DC 0002
        gbc.setState(0x8c95, 0xda7, 0x8d20, 0xf01d, 0x930b, 0x4c47, 0x1, 0x0);
        gbc.writeMem(0x8c95, { 0xdc, 0x21, 0xb });
        gbc.step();
        EXPECT(0x8d, gbc.a());
        EXPECT(0xf0, gbc.b());
        EXPECT(0x1d, gbc.c());
        EXPECT(0x93, gbc.d());
        EXPECT(0xb, gbc.e());
        EXPECT(0x4c, gbc.h());
        EXPECT(0x47, gbc.l());
        EXPECT(0xda7, gbc.sp());
        EXPECT(0x8c98, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0x8c95));
        EXPECT(0x21, gbc.readMem(0x8c96));
        EXPECT(0xb, gbc.readMem(0x8c97));
        // DC 0003
        gbc.setState(0xd79f, 0x9348, 0x37c0, 0xfee, 0xe9cf, 0x3119, 0x1, 0x1);
        gbc.writeMem(0xd79f, { 0xdc, 0x51, 0xe4 });
        gbc.step();
        EXPECT(0x37, gbc.a());
        EXPECT(0xf, gbc.b());
        EXPECT(0xee, gbc.c());
        EXPECT(0xe9, gbc.d());
        EXPECT(0xcf, gbc.e());
        EXPECT(0x31, gbc.h());
        EXPECT(0x19, gbc.l());
        EXPECT(0x9348, gbc.sp());
        EXPECT(0xd7a2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xd79f));
        EXPECT(0x51, gbc.readMem(0xd7a0));
        EXPECT(0xe4, gbc.readMem(0xd7a1));
        // DC 0006
        gbc.setState(0xc3dd, 0x872e, 0x9530, 0x1f94, 0x6cbc, 0xc2, 0x0, 0x0);
        gbc.writeMem(0x872c, { 0x0, 0x0 });
        gbc.writeMem(0xc3dd, { 0xdc, 0x2d, 0x27 });
        gbc.step();
        EXPECT(0x95, gbc.a());
        EXPECT(0x1f, gbc.b());
        EXPECT(0x94, gbc.c());
        EXPECT(0x6c, gbc.d());
        EXPECT(0xbc, gbc.e());
        EXPECT(0x0, gbc.h());
        EXPECT(0xc2, gbc.l());
        EXPECT(0x872c, gbc.sp());
        EXPECT(0x272d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xe0, gbc.readMem(0x872c));
        EXPECT(0xc3, gbc.readMem(0x872d));
        EXPECT(0xdc, gbc.readMem(0xc3dd));
        EXPECT(0x2d, gbc.readMem(0xc3de));
        EXPECT(0x27, gbc.readMem(0xc3df));
        // DC 0008
        gbc.setState(0xddd7, 0xe7d6, 0x7ba0, 0x4250, 0x8619, 0x3dc1, 0x0, 0x0);
        gbc.writeMem(0xddd7, { 0xdc, 0x53, 0xc3 });
        gbc.step();
        EXPECT(0x7b, gbc.a());
        EXPECT(0x42, gbc.b());
        EXPECT(0x50, gbc.c());
        EXPECT(0x86, gbc.d());
        EXPECT(0x19, gbc.e());
        EXPECT(0x3d, gbc.h());
        EXPECT(0xc1, gbc.l());
        EXPECT(0xe7d6, gbc.sp());
        EXPECT(0xddda, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xddd7));
        EXPECT(0x53, gbc.readMem(0xddd8));
        EXPECT(0xc3, gbc.readMem(0xddd9));
        // DC 0009
        gbc.setState(0x90e9, 0xc13f, 0xfd70, 0xd050, 0xfca3, 0x5100, 0x1, 0x0);
        gbc.writeMem(0x90e9, { 0xdc, 0x35, 0xec });
        gbc.writeMem(0xc13d, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xfd, gbc.a());
        EXPECT(0xd0, gbc.b());
        EXPECT(0x50, gbc.c());
        EXPECT(0xfc, gbc.d());
        EXPECT(0xa3, gbc.e());
        EXPECT(0x51, gbc.h());
        EXPECT(0x0, gbc.l());
        EXPECT(0xc13d, gbc.sp());
        EXPECT(0xec35, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0x90e9));
        EXPECT(0x35, gbc.readMem(0x90ea));
        EXPECT(0xec, gbc.readMem(0x90eb));
        EXPECT(0xec, gbc.readMem(0xc13d));
        EXPECT(0x90, gbc.readMem(0xc13e));
        // DC 000A
        gbc.setState(0xc377, 0xb57b, 0xba80, 0x45a6, 0x5e03, 0x654, 0x0, 0x1);
        gbc.writeMem(0xc377, { 0xdc, 0x1a, 0x2e });
        gbc.step();
        EXPECT(0xba, gbc.a());
        EXPECT(0x45, gbc.b());
        EXPECT(0xa6, gbc.c());
        EXPECT(0x5e, gbc.d());
        EXPECT(0x3, gbc.e());
        EXPECT(0x6, gbc.h());
        EXPECT(0x54, gbc.l());
        EXPECT(0xb57b, gbc.sp());
        EXPECT(0xc37a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xc377));
        EXPECT(0x1a, gbc.readMem(0xc378));
        EXPECT(0x2e, gbc.readMem(0xc379));
        // DC 000B
        gbc.setState(0xb2c9, 0xc610, 0xcaf0, 0x530f, 0xdad5, 0x6ab0, 0x1, 0x0);
        gbc.writeMem(0xb2c9, { 0xdc, 0x55, 0x24 });
        gbc.writeMem(0xc60e, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xca, gbc.a());
        EXPECT(0x53, gbc.b());
        EXPECT(0xf, gbc.c());
        EXPECT(0xda, gbc.d());
        EXPECT(0xd5, gbc.e());
        EXPECT(0x6a, gbc.h());
        EXPECT(0xb0, gbc.l());
        EXPECT(0xc60e, gbc.sp());
        EXPECT(0x2455, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xb2c9));
        EXPECT(0x55, gbc.readMem(0xb2ca));
        EXPECT(0x24, gbc.readMem(0xb2cb));
        EXPECT(0xcc, gbc.readMem(0xc60e));
        EXPECT(0xb2, gbc.readMem(0xc60f));
        // DC 000D
        gbc.setState(0x179a, 0x94c7, 0xd420, 0xb06, 0xe373, 0x9e67, 0x0, 0x1);
        gbc.writeMem(0x179a, { 0xdc, 0xa1, 0x34 });
        gbc.step();
        EXPECT(0xd4, gbc.a());
        EXPECT(0xb, gbc.b());
        EXPECT(0x6, gbc.c());
        EXPECT(0xe3, gbc.d());
        EXPECT(0x73, gbc.e());
        EXPECT(0x9e, gbc.h());
        EXPECT(0x67, gbc.l());
        EXPECT(0x94c7, gbc.sp());
        EXPECT(0x179d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 000F
        gbc.setState(0xc8b8, 0x8f3a, 0xdb00, 0x9bf, 0x6a06, 0x2886, 0x1, 0x1);
        gbc.writeMem(0xc8b8, { 0xdc, 0xd6, 0xa1 });
        gbc.step();
        EXPECT(0xdb, gbc.a());
        EXPECT(0x9, gbc.b());
        EXPECT(0xbf, gbc.c());
        EXPECT(0x6a, gbc.d());
        EXPECT(0x6, gbc.e());
        EXPECT(0x28, gbc.h());
        EXPECT(0x86, gbc.l());
        EXPECT(0x8f3a, gbc.sp());
        EXPECT(0xc8bb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xc8b8));
        EXPECT(0xd6, gbc.readMem(0xc8b9));
        EXPECT(0xa1, gbc.readMem(0xc8ba));
        // DC 0012
        gbc.setState(0x437e, 0x9dfb, 0xa2e0, 0xeb68, 0x7a01, 0xcf14, 0x1, 0x1);
        gbc.writeMem(0x437e, { 0xdc, 0xc9, 0x9c });
        gbc.step();
        EXPECT(0xa2, gbc.a());
        EXPECT(0xeb, gbc.b());
        EXPECT(0x68, gbc.c());
        EXPECT(0x7a, gbc.d());
        EXPECT(0x1, gbc.e());
        EXPECT(0xcf, gbc.h());
        EXPECT(0x14, gbc.l());
        EXPECT(0x9dfb, gbc.sp());
        EXPECT(0x4381, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 0014
        gbc.setState(0x2b8a, 0xe137, 0x4710, 0xfdd3, 0xb707, 0x8fdd, 0x1, 0x1);
        gbc.writeMem(0x2b8a, { 0xdc, 0xfd, 0x82 });
        gbc.writeMem(0xe135, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x47, gbc.a());
        EXPECT(0xfd, gbc.b());
        EXPECT(0xd3, gbc.c());
        EXPECT(0xb7, gbc.d());
        EXPECT(0x7, gbc.e());
        EXPECT(0x8f, gbc.h());
        EXPECT(0xdd, gbc.l());
        EXPECT(0xe135, gbc.sp());
        EXPECT(0x82fd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x8d, gbc.readMem(0xe135));
        EXPECT(0x2b, gbc.readMem(0xe136));
        // DC 0015
        gbc.setState(0x6981, 0xfa72, 0x3aa0, 0xd5e, 0x43ad, 0x987d, 0x1, 0x1);
        gbc.writeMem(0x6981, { 0xdc, 0x10, 0xaf });
        gbc.step();
        EXPECT(0x3a, gbc.a());
        EXPECT(0xd, gbc.b());
        EXPECT(0x5e, gbc.c());
        EXPECT(0x43, gbc.d());
        EXPECT(0xad, gbc.e());
        EXPECT(0x98, gbc.h());
        EXPECT(0x7d, gbc.l());
        EXPECT(0xfa72, gbc.sp());
        EXPECT(0x6984, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 0018
        gbc.setState(0xe252, 0x2c6c, 0x92c0, 0xcc14, 0xf440, 0x738b, 0x1, 0x0);
        gbc.writeMem(0xe252, { 0xdc, 0xe9, 0x7f });
        gbc.step();
        EXPECT(0x92, gbc.a());
        EXPECT(0xcc, gbc.b());
        EXPECT(0x14, gbc.c());
        EXPECT(0xf4, gbc.d());
        EXPECT(0x40, gbc.e());
        EXPECT(0x73, gbc.h());
        EXPECT(0x8b, gbc.l());
        EXPECT(0x2c6c, gbc.sp());
        EXPECT(0xe255, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xe252));
        EXPECT(0xe9, gbc.readMem(0xe253));
        EXPECT(0x7f, gbc.readMem(0xe254));
        // DC 0019
        gbc.setState(0x90c3, 0x28b4, 0xa060, 0x4a42, 0xfe8a, 0x7ef1, 0x0, 0x1);
        gbc.writeMem(0x90c3, { 0xdc, 0x3a, 0xb1 });
        gbc.step();
        EXPECT(0xa0, gbc.a());
        EXPECT(0x4a, gbc.b());
        EXPECT(0x42, gbc.c());
        EXPECT(0xfe, gbc.d());
        EXPECT(0x8a, gbc.e());
        EXPECT(0x7e, gbc.h());
        EXPECT(0xf1, gbc.l());
        EXPECT(0x28b4, gbc.sp());
        EXPECT(0x90c6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0x90c3));
        EXPECT(0x3a, gbc.readMem(0x90c4));
        EXPECT(0xb1, gbc.readMem(0x90c5));
        // DC 001A
        gbc.setState(0xeac1, 0x8605, 0x1f80, 0x29f0, 0x5c31, 0xbc3a, 0x0, 0x0);
        gbc.writeMem(0xeac1, { 0xdc, 0xf5, 0x72 });
        gbc.step();
        EXPECT(0x1f, gbc.a());
        EXPECT(0x29, gbc.b());
        EXPECT(0xf0, gbc.c());
        EXPECT(0x5c, gbc.d());
        EXPECT(0x31, gbc.e());
        EXPECT(0xbc, gbc.h());
        EXPECT(0x3a, gbc.l());
        EXPECT(0x8605, gbc.sp());
        EXPECT(0xeac4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xeac1));
        EXPECT(0xf5, gbc.readMem(0xeac2));
        EXPECT(0x72, gbc.readMem(0xeac3));
        // DC 001B
        gbc.setState(0x620, 0x7d68, 0xea40, 0x447d, 0xdd2e, 0xf5b7, 0x0, 0x1);
        gbc.writeMem(0x620, { 0xdc, 0x63, 0x74 });
        gbc.step();
        EXPECT(0xea, gbc.a());
        EXPECT(0x44, gbc.b());
        EXPECT(0x7d, gbc.c());
        EXPECT(0xdd, gbc.d());
        EXPECT(0x2e, gbc.e());
        EXPECT(0xf5, gbc.h());
        EXPECT(0xb7, gbc.l());
        EXPECT(0x7d68, gbc.sp());
        EXPECT(0x623, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 001C
        gbc.setState(0xebae, 0xe54f, 0x480, 0xdfd6, 0xe8b7, 0x63fd, 0x1, 0x0);
        gbc.writeMem(0xebae, { 0xdc, 0xca, 0x7c });
        gbc.step();
        EXPECT(0x4, gbc.a());
        EXPECT(0xdf, gbc.b());
        EXPECT(0xd6, gbc.c());
        EXPECT(0xe8, gbc.d());
        EXPECT(0xb7, gbc.e());
        EXPECT(0x63, gbc.h());
        EXPECT(0xfd, gbc.l());
        EXPECT(0xe54f, gbc.sp());
        EXPECT(0xebb1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xebae));
        EXPECT(0xca, gbc.readMem(0xebaf));
        EXPECT(0x7c, gbc.readMem(0xebb0));
        // DC 001E
        gbc.setState(0xd2ea, 0x6401, 0x6c0, 0xaea6, 0x8f83, 0xbc04, 0x0, 0x0);
        gbc.writeMem(0xd2ea, { 0xdc, 0x8, 0xdf });
        gbc.step();
        EXPECT(0x6, gbc.a());
        EXPECT(0xae, gbc.b());
        EXPECT(0xa6, gbc.c());
        EXPECT(0x8f, gbc.d());
        EXPECT(0x83, gbc.e());
        EXPECT(0xbc, gbc.h());
        EXPECT(0x4, gbc.l());
        EXPECT(0x6401, gbc.sp());
        EXPECT(0xd2ed, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xd2ea));
        EXPECT(0x8, gbc.readMem(0xd2eb));
        EXPECT(0xdf, gbc.readMem(0xd2ec));
        // DC 001F
        gbc.setState(0x41a5, 0xcad7, 0xc8c0, 0x5440, 0x689b, 0xeb80, 0x1, 0x0);
        gbc.writeMem(0x41a5, { 0xdc, 0xa6, 0x34 });
        gbc.step();
        EXPECT(0xc8, gbc.a());
        EXPECT(0x54, gbc.b());
        EXPECT(0x40, gbc.c());
        EXPECT(0x68, gbc.d());
        EXPECT(0x9b, gbc.e());
        EXPECT(0xeb, gbc.h());
        EXPECT(0x80, gbc.l());
        EXPECT(0xcad7, gbc.sp());
        EXPECT(0x41a8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 0022
        gbc.setState(0x8130, 0x5d96, 0xaa80, 0xd01f, 0x9f44, 0xba5, 0x1, 0x0);
        gbc.writeMem(0x8130, { 0xdc, 0x93, 0x20 });
        gbc.step();
        EXPECT(0xaa, gbc.a());
        EXPECT(0xd0, gbc.b());
        EXPECT(0x1f, gbc.c());
        EXPECT(0x9f, gbc.d());
        EXPECT(0x44, gbc.e());
        EXPECT(0xb, gbc.h());
        EXPECT(0xa5, gbc.l());
        EXPECT(0x5d96, gbc.sp());
        EXPECT(0x8133, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0x8130));
        EXPECT(0x93, gbc.readMem(0x8131));
        EXPECT(0x20, gbc.readMem(0x8132));
        // DC 0023
        gbc.setState(0x3c65, 0xcdcb, 0x4d00, 0x171e, 0x8a6b, 0xf785, 0x0, 0x0);
        gbc.writeMem(0x3c65, { 0xdc, 0xd, 0x9a });
        gbc.step();
        EXPECT(0x4d, gbc.a());
        EXPECT(0x17, gbc.b());
        EXPECT(0x1e, gbc.c());
        EXPECT(0x8a, gbc.d());
        EXPECT(0x6b, gbc.e());
        EXPECT(0xf7, gbc.h());
        EXPECT(0x85, gbc.l());
        EXPECT(0xcdcb, gbc.sp());
        EXPECT(0x3c68, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 0027
        gbc.setState(0x9589, 0xd321, 0x0, 0xbe31, 0x4e06, 0x9147, 0x1, 0x0);
        gbc.writeMem(0x9589, { 0xdc, 0x8e, 0x4 });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xbe, gbc.b());
        EXPECT(0x31, gbc.c());
        EXPECT(0x4e, gbc.d());
        EXPECT(0x6, gbc.e());
        EXPECT(0x91, gbc.h());
        EXPECT(0x47, gbc.l());
        EXPECT(0xd321, gbc.sp());
        EXPECT(0x958c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0x9589));
        EXPECT(0x8e, gbc.readMem(0x958a));
        EXPECT(0x4, gbc.readMem(0x958b));
        // DC 0028
        gbc.setState(0xf65, 0xc4dc, 0xf360, 0x7631, 0x6a2f, 0x72cc, 0x0, 0x0);
        gbc.writeMem(0xf65, { 0xdc, 0xa0, 0xfe });
        gbc.step();
        EXPECT(0xf3, gbc.a());
        EXPECT(0x76, gbc.b());
        EXPECT(0x31, gbc.c());
        EXPECT(0x6a, gbc.d());
        EXPECT(0x2f, gbc.e());
        EXPECT(0x72, gbc.h());
        EXPECT(0xcc, gbc.l());
        EXPECT(0xc4dc, gbc.sp());
        EXPECT(0xf68, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 0029
        gbc.setState(0x100d, 0x7cc2, 0x85a0, 0x632b, 0xfbb5, 0x6fce, 0x1, 0x0);
        gbc.writeMem(0x100d, { 0xdc, 0x3, 0x1d });
        gbc.step();
        EXPECT(0x85, gbc.a());
        EXPECT(0x63, gbc.b());
        EXPECT(0x2b, gbc.c());
        EXPECT(0xfb, gbc.d());
        EXPECT(0xb5, gbc.e());
        EXPECT(0x6f, gbc.h());
        EXPECT(0xce, gbc.l());
        EXPECT(0x7cc2, gbc.sp());
        EXPECT(0x1010, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 002B
        gbc.setState(0x25fc, 0xcf14, 0xb050, 0x4ef5, 0x2dfb, 0x263b, 0x1, 0x1);
        gbc.writeMem(0x25fc, { 0xdc, 0xe7, 0xb1 });
        gbc.writeMem(0xcf12, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xb0, gbc.a());
        EXPECT(0x4e, gbc.b());
        EXPECT(0xf5, gbc.c());
        EXPECT(0x2d, gbc.d());
        EXPECT(0xfb, gbc.e());
        EXPECT(0x26, gbc.h());
        EXPECT(0x3b, gbc.l());
        EXPECT(0xcf12, gbc.sp());
        EXPECT(0xb1e7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xff, gbc.readMem(0xcf12));
        EXPECT(0x25, gbc.readMem(0xcf13));
        // DC 002C
        gbc.setState(0x43cf, 0x27a8, 0xc560, 0xd7a, 0xc93b, 0x75a9, 0x1, 0x1);
        gbc.writeMem(0x43cf, { 0xdc, 0x18, 0x0 });
        gbc.step();
        EXPECT(0xc5, gbc.a());
        EXPECT(0xd, gbc.b());
        EXPECT(0x7a, gbc.c());
        EXPECT(0xc9, gbc.d());
        EXPECT(0x3b, gbc.e());
        EXPECT(0x75, gbc.h());
        EXPECT(0xa9, gbc.l());
        EXPECT(0x27a8, gbc.sp());
        EXPECT(0x43d2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 002E
        gbc.setState(0xe8a5, 0xfa4e, 0x6fc0, 0x23f1, 0xbeb8, 0xe0b3, 0x1, 0x0);
        gbc.writeMem(0xe8a5, { 0xdc, 0xf8, 0x8d });
        gbc.step();
        EXPECT(0x6f, gbc.a());
        EXPECT(0x23, gbc.b());
        EXPECT(0xf1, gbc.c());
        EXPECT(0xbe, gbc.d());
        EXPECT(0xb8, gbc.e());
        EXPECT(0xe0, gbc.h());
        EXPECT(0xb3, gbc.l());
        EXPECT(0xfa4e, gbc.sp());
        EXPECT(0xe8a8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xe8a5));
        EXPECT(0xf8, gbc.readMem(0xe8a6));
        EXPECT(0x8d, gbc.readMem(0xe8a7));
        // DC 002F
        gbc.setState(0xabb9, 0x9e2d, 0x7f10, 0x5799, 0x85a5, 0x70c1, 0x1, 0x1);
        gbc.writeMem(0x9e2b, { 0x0, 0x0 });
        gbc.writeMem(0xabb9, { 0xdc, 0xb, 0x90 });
        gbc.step();
        EXPECT(0x7f, gbc.a());
        EXPECT(0x57, gbc.b());
        EXPECT(0x99, gbc.c());
        EXPECT(0x85, gbc.d());
        EXPECT(0xa5, gbc.e());
        EXPECT(0x70, gbc.h());
        EXPECT(0xc1, gbc.l());
        EXPECT(0x9e2b, gbc.sp());
        EXPECT(0x900b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xbc, gbc.readMem(0x9e2b));
        EXPECT(0xab, gbc.readMem(0x9e2c));
        EXPECT(0xdc, gbc.readMem(0xabb9));
        EXPECT(0xb, gbc.readMem(0xabba));
        EXPECT(0x90, gbc.readMem(0xabbb));
        // DC 0030
        gbc.setState(0x42d4, 0x34c, 0x1f20, 0xf6aa, 0x9427, 0x154f, 0x0, 0x1);
        gbc.writeMem(0x42d4, { 0xdc, 0x66, 0xf8 });
        gbc.step();
        EXPECT(0x1f, gbc.a());
        EXPECT(0xf6, gbc.b());
        EXPECT(0xaa, gbc.c());
        EXPECT(0x94, gbc.d());
        EXPECT(0x27, gbc.e());
        EXPECT(0x15, gbc.h());
        EXPECT(0x4f, gbc.l());
        EXPECT(0x34c, gbc.sp());
        EXPECT(0x42d7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 0031
        gbc.setState(0xde41, 0x6b18, 0x6020, 0xeae, 0x53bc, 0x54fa, 0x1, 0x0);
        gbc.writeMem(0xde41, { 0xdc, 0x8a, 0xd0 });
        gbc.step();
        EXPECT(0x60, gbc.a());
        EXPECT(0xe, gbc.b());
        EXPECT(0xae, gbc.c());
        EXPECT(0x53, gbc.d());
        EXPECT(0xbc, gbc.e());
        EXPECT(0x54, gbc.h());
        EXPECT(0xfa, gbc.l());
        EXPECT(0x6b18, gbc.sp());
        EXPECT(0xde44, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xde41));
        EXPECT(0x8a, gbc.readMem(0xde42));
        EXPECT(0xd0, gbc.readMem(0xde43));
        // DC 0032
        gbc.setState(0xa49d, 0x6362, 0x3c20, 0xe4b2, 0xd94d, 0xf453, 0x0, 0x1);
        gbc.writeMem(0xa49d, { 0xdc, 0xc0, 0xad });
        gbc.step();
        EXPECT(0x3c, gbc.a());
        EXPECT(0xe4, gbc.b());
        EXPECT(0xb2, gbc.c());
        EXPECT(0xd9, gbc.d());
        EXPECT(0x4d, gbc.e());
        EXPECT(0xf4, gbc.h());
        EXPECT(0x53, gbc.l());
        EXPECT(0x6362, gbc.sp());
        EXPECT(0xa4a0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xa49d));
        EXPECT(0xc0, gbc.readMem(0xa49e));
        EXPECT(0xad, gbc.readMem(0xa49f));
        // DC 0033
        gbc.setState(0x3bed, 0x1c29, 0xdc20, 0xce44, 0x8751, 0x4d65, 0x0, 0x0);
        gbc.writeMem(0x3bed, { 0xdc, 0xf6, 0x5e });
        gbc.step();
        EXPECT(0xdc, gbc.a());
        EXPECT(0xce, gbc.b());
        EXPECT(0x44, gbc.c());
        EXPECT(0x87, gbc.d());
        EXPECT(0x51, gbc.e());
        EXPECT(0x4d, gbc.h());
        EXPECT(0x65, gbc.l());
        EXPECT(0x1c29, gbc.sp());
        EXPECT(0x3bf0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 0034
        gbc.setState(0xa6b3, 0xb780, 0x9aa0, 0x8f38, 0x25ce, 0xaef6, 0x1, 0x1);
        gbc.writeMem(0xa6b3, { 0xdc, 0x3d, 0xb7 });
        gbc.step();
        EXPECT(0x9a, gbc.a());
        EXPECT(0x8f, gbc.b());
        EXPECT(0x38, gbc.c());
        EXPECT(0x25, gbc.d());
        EXPECT(0xce, gbc.e());
        EXPECT(0xae, gbc.h());
        EXPECT(0xf6, gbc.l());
        EXPECT(0xb780, gbc.sp());
        EXPECT(0xa6b6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xa6b3));
        EXPECT(0x3d, gbc.readMem(0xa6b4));
        EXPECT(0xb7, gbc.readMem(0xa6b5));
        // DC 0035
        gbc.setState(0x5264, 0xb83a, 0xa700, 0x2902, 0x6954, 0x5c68, 0x0, 0x1);
        gbc.writeMem(0x5264, { 0xdc, 0x53, 0xb8 });
        gbc.step();
        EXPECT(0xa7, gbc.a());
        EXPECT(0x29, gbc.b());
        EXPECT(0x2, gbc.c());
        EXPECT(0x69, gbc.d());
        EXPECT(0x54, gbc.e());
        EXPECT(0x5c, gbc.h());
        EXPECT(0x68, gbc.l());
        EXPECT(0xb83a, gbc.sp());
        EXPECT(0x5267, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 0037
        gbc.setState(0x7a6a, 0xccd1, 0xa4b0, 0x6b30, 0x437, 0xe2f2, 0x0, 0x0);
        gbc.writeMem(0x7a6a, { 0xdc, 0x2f, 0xb2 });
        gbc.writeMem(0xcccf, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xa4, gbc.a());
        EXPECT(0x6b, gbc.b());
        EXPECT(0x30, gbc.c());
        EXPECT(0x4, gbc.d());
        EXPECT(0x37, gbc.e());
        EXPECT(0xe2, gbc.h());
        EXPECT(0xf2, gbc.l());
        EXPECT(0xcccf, gbc.sp());
        EXPECT(0xb22f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x6d, gbc.readMem(0xcccf));
        EXPECT(0x7a, gbc.readMem(0xccd0));
        // DC 0038
        gbc.setState(0x2ea, 0xc293, 0x10e0, 0xdd3d, 0x16f0, 0x52ec, 0x0, 0x0);
        gbc.writeMem(0x2ea, { 0xdc, 0xf5, 0xfc });
        gbc.step();
        EXPECT(0x10, gbc.a());
        EXPECT(0xdd, gbc.b());
        EXPECT(0x3d, gbc.c());
        EXPECT(0x16, gbc.d());
        EXPECT(0xf0, gbc.e());
        EXPECT(0x52, gbc.h());
        EXPECT(0xec, gbc.l());
        EXPECT(0xc293, gbc.sp());
        EXPECT(0x2ed, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 0039
        gbc.setState(0xafa0, 0xa987, 0x77c0, 0x9203, 0xc476, 0xcb9e, 0x1, 0x0);
        gbc.writeMem(0xafa0, { 0xdc, 0xcf, 0x7c });
        gbc.step();
        EXPECT(0x77, gbc.a());
        EXPECT(0x92, gbc.b());
        EXPECT(0x3, gbc.c());
        EXPECT(0xc4, gbc.d());
        EXPECT(0x76, gbc.e());
        EXPECT(0xcb, gbc.h());
        EXPECT(0x9e, gbc.l());
        EXPECT(0xa987, gbc.sp());
        EXPECT(0xafa3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xafa0));
        EXPECT(0xcf, gbc.readMem(0xafa1));
        EXPECT(0x7c, gbc.readMem(0xafa2));
        // DC 003A
        gbc.setState(0xa82d, 0xef5a, 0x89c0, 0xfef9, 0xfb1b, 0xe737, 0x0, 0x1);
        gbc.writeMem(0xa82d, { 0xdc, 0x17, 0xe2 });
        gbc.step();
        EXPECT(0x89, gbc.a());
        EXPECT(0xfe, gbc.b());
        EXPECT(0xf9, gbc.c());
        EXPECT(0xfb, gbc.d());
        EXPECT(0x1b, gbc.e());
        EXPECT(0xe7, gbc.h());
        EXPECT(0x37, gbc.l());
        EXPECT(0xef5a, gbc.sp());
        EXPECT(0xa830, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xa82d));
        EXPECT(0x17, gbc.readMem(0xa82e));
        EXPECT(0xe2, gbc.readMem(0xa82f));
        // DC 003B
        gbc.setState(0xdb3e, 0xf718, 0x5a0, 0x6a7e, 0x3b91, 0xb46f, 0x0, 0x1);
        gbc.writeMem(0xdb3e, { 0xdc, 0xce, 0xd8 });
        gbc.step();
        EXPECT(0x5, gbc.a());
        EXPECT(0x6a, gbc.b());
        EXPECT(0x7e, gbc.c());
        EXPECT(0x3b, gbc.d());
        EXPECT(0x91, gbc.e());
        EXPECT(0xb4, gbc.h());
        EXPECT(0x6f, gbc.l());
        EXPECT(0xf718, gbc.sp());
        EXPECT(0xdb41, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xdb3e));
        EXPECT(0xce, gbc.readMem(0xdb3f));
        EXPECT(0xd8, gbc.readMem(0xdb40));
        // DC 003C
        gbc.setState(0x63ca, 0x2178, 0x6be0, 0x4ef4, 0x5719, 0x8b5b, 0x1, 0x0);
        gbc.writeMem(0x63ca, { 0xdc, 0xdc, 0x1b });
        gbc.step();
        EXPECT(0x6b, gbc.a());
        EXPECT(0x4e, gbc.b());
        EXPECT(0xf4, gbc.c());
        EXPECT(0x57, gbc.d());
        EXPECT(0x19, gbc.e());
        EXPECT(0x8b, gbc.h());
        EXPECT(0x5b, gbc.l());
        EXPECT(0x2178, gbc.sp());
        EXPECT(0x63cd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 003E
        gbc.setState(0x142d, 0xfe4d, 0x8dd0, 0xdb98, 0x1a2c, 0xb5c8, 0x1, 0x0);
        gbc.writeMem(0x142d, { 0xdc, 0xd3, 0xcc });
        gbc.writeMem(0xfe4b, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x8d, gbc.a());
        EXPECT(0xdb, gbc.b());
        EXPECT(0x98, gbc.c());
        EXPECT(0x1a, gbc.d());
        EXPECT(0x2c, gbc.e());
        EXPECT(0xb5, gbc.h());
        EXPECT(0xc8, gbc.l());
        EXPECT(0xfe4b, gbc.sp());
        EXPECT(0xccd3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x30, gbc.readMem(0xfe4b));
        EXPECT(0x14, gbc.readMem(0xfe4c));
        // DC 003F
        gbc.setState(0x54b6, 0x79e6, 0xfd40, 0x38d6, 0xbce, 0xedd3, 0x0, 0x0);
        gbc.writeMem(0x54b6, { 0xdc, 0xb3, 0xa9 });
        gbc.step();
        EXPECT(0xfd, gbc.a());
        EXPECT(0x38, gbc.b());
        EXPECT(0xd6, gbc.c());
        EXPECT(0xb, gbc.d());
        EXPECT(0xce, gbc.e());
        EXPECT(0xed, gbc.h());
        EXPECT(0xd3, gbc.l());
        EXPECT(0x79e6, gbc.sp());
        EXPECT(0x54b9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 0040
        gbc.setState(0xb555, 0xfee8, 0x6b40, 0xef7a, 0x830, 0xe6c5, 0x1, 0x1);
        gbc.writeMem(0xb555, { 0xdc, 0xb5, 0x4c });
        gbc.step();
        EXPECT(0x6b, gbc.a());
        EXPECT(0xef, gbc.b());
        EXPECT(0x7a, gbc.c());
        EXPECT(0x8, gbc.d());
        EXPECT(0x30, gbc.e());
        EXPECT(0xe6, gbc.h());
        EXPECT(0xc5, gbc.l());
        EXPECT(0xfee8, gbc.sp());
        EXPECT(0xb558, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xb555));
        EXPECT(0xb5, gbc.readMem(0xb556));
        EXPECT(0x4c, gbc.readMem(0xb557));
        // DC 0041
        gbc.setState(0x46cc, 0xc829, 0x7d40, 0x281e, 0x9e71, 0x66ba, 0x0, 0x1);
        gbc.writeMem(0x46cc, { 0xdc, 0x91, 0x46 });
        gbc.step();
        EXPECT(0x7d, gbc.a());
        EXPECT(0x28, gbc.b());
        EXPECT(0x1e, gbc.c());
        EXPECT(0x9e, gbc.d());
        EXPECT(0x71, gbc.e());
        EXPECT(0x66, gbc.h());
        EXPECT(0xba, gbc.l());
        EXPECT(0xc829, gbc.sp());
        EXPECT(0x46cf, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 0042
        gbc.setState(0x7bf4, 0xe4c2, 0xf0, 0x31cb, 0x998c, 0x4059, 0x1, 0x1);
        gbc.writeMem(0x7bf4, { 0xdc, 0x45, 0x38 });
        gbc.writeMem(0xe4c0, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x31, gbc.b());
        EXPECT(0xcb, gbc.c());
        EXPECT(0x99, gbc.d());
        EXPECT(0x8c, gbc.e());
        EXPECT(0x40, gbc.h());
        EXPECT(0x59, gbc.l());
        EXPECT(0xe4c0, gbc.sp());
        EXPECT(0x3845, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xf7, gbc.readMem(0xe4c0));
        EXPECT(0x7b, gbc.readMem(0xe4c1));
        // DC 0043
        gbc.setState(0x90, 0xc14a, 0x91c0, 0x3592, 0x8f87, 0x2e1, 0x1, 0x0);
        gbc.writeMem(0x90, { 0xdc, 0x73, 0xbb });
        gbc.step();
        EXPECT(0x91, gbc.a());
        EXPECT(0x35, gbc.b());
        EXPECT(0x92, gbc.c());
        EXPECT(0x8f, gbc.d());
        EXPECT(0x87, gbc.e());
        EXPECT(0x2, gbc.h());
        EXPECT(0xe1, gbc.l());
        EXPECT(0xc14a, gbc.sp());
        EXPECT(0x93, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 0044
        gbc.setState(0x32d3, 0xe62d, 0x2e20, 0x534, 0x8cd7, 0xa7ef, 0x1, 0x1);
        gbc.writeMem(0x32d3, { 0xdc, 0x55, 0xde });
        gbc.step();
        EXPECT(0x2e, gbc.a());
        EXPECT(0x5, gbc.b());
        EXPECT(0x34, gbc.c());
        EXPECT(0x8c, gbc.d());
        EXPECT(0xd7, gbc.e());
        EXPECT(0xa7, gbc.h());
        EXPECT(0xef, gbc.l());
        EXPECT(0xe62d, gbc.sp());
        EXPECT(0x32d6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 0045
        gbc.setState(0xa822, 0x2e58, 0xfd80, 0x2265, 0xa0ce, 0xacc6, 0x1, 0x0);
        gbc.writeMem(0xa822, { 0xdc, 0x16, 0x16 });
        gbc.step();
        EXPECT(0xfd, gbc.a());
        EXPECT(0x22, gbc.b());
        EXPECT(0x65, gbc.c());
        EXPECT(0xa0, gbc.d());
        EXPECT(0xce, gbc.e());
        EXPECT(0xac, gbc.h());
        EXPECT(0xc6, gbc.l());
        EXPECT(0x2e58, gbc.sp());
        EXPECT(0xa825, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xa822));
        EXPECT(0x16, gbc.readMem(0xa823));
        EXPECT(0x16, gbc.readMem(0xa824));
        // DC 0046
        gbc.setState(0x5c4, 0x9a72, 0x99c0, 0xdfc6, 0xb93b, 0x1c68, 0x1, 0x1);
        gbc.writeMem(0x5c4, { 0xdc, 0x2e, 0x5d });
        gbc.step();
        EXPECT(0x99, gbc.a());
        EXPECT(0xdf, gbc.b());
        EXPECT(0xc6, gbc.c());
        EXPECT(0xb9, gbc.d());
        EXPECT(0x3b, gbc.e());
        EXPECT(0x1c, gbc.h());
        EXPECT(0x68, gbc.l());
        EXPECT(0x9a72, gbc.sp());
        EXPECT(0x5c7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 0047
        gbc.setState(0x9db8, 0xcf3a, 0x3f90, 0x8c7d, 0x2260, 0x868b, 0x0, 0x0);
        gbc.writeMem(0x9db8, { 0xdc, 0xa1, 0xb9 });
        gbc.writeMem(0xcf38, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x3f, gbc.a());
        EXPECT(0x8c, gbc.b());
        EXPECT(0x7d, gbc.c());
        EXPECT(0x22, gbc.d());
        EXPECT(0x60, gbc.e());
        EXPECT(0x86, gbc.h());
        EXPECT(0x8b, gbc.l());
        EXPECT(0xcf38, gbc.sp());
        EXPECT(0xb9a1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0x9db8));
        EXPECT(0xa1, gbc.readMem(0x9db9));
        EXPECT(0xb9, gbc.readMem(0x9dba));
        EXPECT(0xbb, gbc.readMem(0xcf38));
        EXPECT(0x9d, gbc.readMem(0xcf39));
        // DC 004A
        gbc.setState(0x4d79, 0x3307, 0x38e0, 0x22ec, 0xd15f, 0x9f55, 0x1, 0x1);
        gbc.writeMem(0x4d79, { 0xdc, 0xe7, 0x88 });
        gbc.step();
        EXPECT(0x38, gbc.a());
        EXPECT(0x22, gbc.b());
        EXPECT(0xec, gbc.c());
        EXPECT(0xd1, gbc.d());
        EXPECT(0x5f, gbc.e());
        EXPECT(0x9f, gbc.h());
        EXPECT(0x55, gbc.l());
        EXPECT(0x3307, gbc.sp());
        EXPECT(0x4d7c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 004C
        gbc.setState(0x7bbf, 0x13d3, 0x7260, 0x9dbd, 0xe5dc, 0x327, 0x1, 0x1);
        gbc.writeMem(0x7bbf, { 0xdc, 0x35, 0x9d });
        gbc.step();
        EXPECT(0x72, gbc.a());
        EXPECT(0x9d, gbc.b());
        EXPECT(0xbd, gbc.c());
        EXPECT(0xe5, gbc.d());
        EXPECT(0xdc, gbc.e());
        EXPECT(0x3, gbc.h());
        EXPECT(0x27, gbc.l());
        EXPECT(0x13d3, gbc.sp());
        EXPECT(0x7bc2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 004D
        gbc.setState(0xd651, 0xb570, 0x85a0, 0xa40f, 0x7b43, 0x45fc, 0x0, 0x0);
        gbc.writeMem(0xd651, { 0xdc, 0x24, 0x23 });
        gbc.step();
        EXPECT(0x85, gbc.a());
        EXPECT(0xa4, gbc.b());
        EXPECT(0xf, gbc.c());
        EXPECT(0x7b, gbc.d());
        EXPECT(0x43, gbc.e());
        EXPECT(0x45, gbc.h());
        EXPECT(0xfc, gbc.l());
        EXPECT(0xb570, gbc.sp());
        EXPECT(0xd654, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xd651));
        EXPECT(0x24, gbc.readMem(0xd652));
        EXPECT(0x23, gbc.readMem(0xd653));
        // DC 004E
        gbc.setState(0x1f3, 0x3cd9, 0x4840, 0xe1de, 0xcf18, 0x4ef2, 0x1, 0x1);
        gbc.writeMem(0x1f3, { 0xdc, 0xe4, 0x2a });
        gbc.step();
        EXPECT(0x48, gbc.a());
        EXPECT(0xe1, gbc.b());
        EXPECT(0xde, gbc.c());
        EXPECT(0xcf, gbc.d());
        EXPECT(0x18, gbc.e());
        EXPECT(0x4e, gbc.h());
        EXPECT(0xf2, gbc.l());
        EXPECT(0x3cd9, gbc.sp());
        EXPECT(0x1f6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 004F
        gbc.setState(0xaddb, 0xbc0c, 0xc970, 0xafd8, 0x79e0, 0x5da9, 0x1, 0x0);
        gbc.writeMem(0xaddb, { 0xdc, 0x84, 0x9a });
        gbc.writeMem(0xbc0a, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xc9, gbc.a());
        EXPECT(0xaf, gbc.b());
        EXPECT(0xd8, gbc.c());
        EXPECT(0x79, gbc.d());
        EXPECT(0xe0, gbc.e());
        EXPECT(0x5d, gbc.h());
        EXPECT(0xa9, gbc.l());
        EXPECT(0xbc0a, gbc.sp());
        EXPECT(0x9a84, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xaddb));
        EXPECT(0x84, gbc.readMem(0xaddc));
        EXPECT(0x9a, gbc.readMem(0xaddd));
        EXPECT(0xde, gbc.readMem(0xbc0a));
        EXPECT(0xad, gbc.readMem(0xbc0b));
        // DC 0050
        gbc.setState(0x75f, 0x3dd4, 0x3380, 0x820f, 0x42b2, 0x85f7, 0x0, 0x0);
        gbc.writeMem(0x75f, { 0xdc, 0xb9, 0x8d });
        gbc.step();
        EXPECT(0x33, gbc.a());
        EXPECT(0x82, gbc.b());
        EXPECT(0xf, gbc.c());
        EXPECT(0x42, gbc.d());
        EXPECT(0xb2, gbc.e());
        EXPECT(0x85, gbc.h());
        EXPECT(0xf7, gbc.l());
        EXPECT(0x3dd4, gbc.sp());
        EXPECT(0x762, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 0051
        gbc.setState(0x687d, 0x21ab, 0x1600, 0xe7dc, 0x7334, 0xc478, 0x0, 0x0);
        gbc.writeMem(0x687d, { 0xdc, 0xf4, 0xd4 });
        gbc.step();
        EXPECT(0x16, gbc.a());
        EXPECT(0xe7, gbc.b());
        EXPECT(0xdc, gbc.c());
        EXPECT(0x73, gbc.d());
        EXPECT(0x34, gbc.e());
        EXPECT(0xc4, gbc.h());
        EXPECT(0x78, gbc.l());
        EXPECT(0x21ab, gbc.sp());
        EXPECT(0x6880, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 0053
        gbc.setState(0xfab, 0x2158, 0xa460, 0xb807, 0x3dce, 0xc4f, 0x1, 0x0);
        gbc.writeMem(0xfab, { 0xdc, 0xdd, 0xd6 });
        gbc.step();
        EXPECT(0xa4, gbc.a());
        EXPECT(0xb8, gbc.b());
        EXPECT(0x7, gbc.c());
        EXPECT(0x3d, gbc.d());
        EXPECT(0xce, gbc.e());
        EXPECT(0xc, gbc.h());
        EXPECT(0x4f, gbc.l());
        EXPECT(0x2158, gbc.sp());
        EXPECT(0xfae, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 0055
        gbc.setState(0xe2d4, 0xd848, 0x1480, 0xe995, 0xe868, 0xd627, 0x0, 0x1);
        gbc.writeMem(0xe2d4, { 0xdc, 0x95, 0x8c });
        gbc.step();
        EXPECT(0x14, gbc.a());
        EXPECT(0xe9, gbc.b());
        EXPECT(0x95, gbc.c());
        EXPECT(0xe8, gbc.d());
        EXPECT(0x68, gbc.e());
        EXPECT(0xd6, gbc.h());
        EXPECT(0x27, gbc.l());
        EXPECT(0xd848, gbc.sp());
        EXPECT(0xe2d7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xe2d4));
        EXPECT(0x95, gbc.readMem(0xe2d5));
        EXPECT(0x8c, gbc.readMem(0xe2d6));
        // DC 0057
        gbc.setState(0xe0ae, 0x555, 0x8ec0, 0xbabc, 0xb5c9, 0x9c54, 0x0, 0x0);
        gbc.writeMem(0xe0ae, { 0xdc, 0x78, 0xbb });
        gbc.step();
        EXPECT(0x8e, gbc.a());
        EXPECT(0xba, gbc.b());
        EXPECT(0xbc, gbc.c());
        EXPECT(0xb5, gbc.d());
        EXPECT(0xc9, gbc.e());
        EXPECT(0x9c, gbc.h());
        EXPECT(0x54, gbc.l());
        EXPECT(0x555, gbc.sp());
        EXPECT(0xe0b1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xe0ae));
        EXPECT(0x78, gbc.readMem(0xe0af));
        EXPECT(0xbb, gbc.readMem(0xe0b0));
        // DC 0058
        gbc.setState(0xa169, 0xcd0a, 0x8b60, 0x825e, 0x38a8, 0x4b1e, 0x0, 0x0);
        gbc.writeMem(0xa169, { 0xdc, 0x83, 0x83 });
        gbc.step();
        EXPECT(0x8b, gbc.a());
        EXPECT(0x82, gbc.b());
        EXPECT(0x5e, gbc.c());
        EXPECT(0x38, gbc.d());
        EXPECT(0xa8, gbc.e());
        EXPECT(0x4b, gbc.h());
        EXPECT(0x1e, gbc.l());
        EXPECT(0xcd0a, gbc.sp());
        EXPECT(0xa16c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xa169));
        EXPECT(0x83, gbc.readMem(0xa16a));
        EXPECT(0x83, gbc.readMem(0xa16b));
        // DC 0059
        gbc.setState(0xeeaf, 0x604b, 0xfa00, 0xa93a, 0xf3d4, 0xf154, 0x0, 0x0);
        gbc.writeMem(0xeeaf, { 0xdc, 0xfe, 0x43 });
        gbc.step();
        EXPECT(0xfa, gbc.a());
        EXPECT(0xa9, gbc.b());
        EXPECT(0x3a, gbc.c());
        EXPECT(0xf3, gbc.d());
        EXPECT(0xd4, gbc.e());
        EXPECT(0xf1, gbc.h());
        EXPECT(0x54, gbc.l());
        EXPECT(0x604b, gbc.sp());
        EXPECT(0xeeb2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xeeaf));
        EXPECT(0xfe, gbc.readMem(0xeeb0));
        EXPECT(0x43, gbc.readMem(0xeeb1));
        // DC 005B
        gbc.setState(0x444c, 0x97da, 0xf1c0, 0x2595, 0x1546, 0xd388, 0x0, 0x1);
        gbc.writeMem(0x444c, { 0xdc, 0x16, 0x46 });
        gbc.step();
        EXPECT(0xf1, gbc.a());
        EXPECT(0x25, gbc.b());
        EXPECT(0x95, gbc.c());
        EXPECT(0x15, gbc.d());
        EXPECT(0x46, gbc.e());
        EXPECT(0xd3, gbc.h());
        EXPECT(0x88, gbc.l());
        EXPECT(0x97da, gbc.sp());
        EXPECT(0x444f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 005D
        gbc.setState(0x10d7, 0xc5c2, 0xa60, 0x7ea8, 0x3e6b, 0x50fe, 0x0, 0x0);
        gbc.writeMem(0x10d7, { 0xdc, 0x8a, 0xcc });
        gbc.step();
        EXPECT(0xa, gbc.a());
        EXPECT(0x7e, gbc.b());
        EXPECT(0xa8, gbc.c());
        EXPECT(0x3e, gbc.d());
        EXPECT(0x6b, gbc.e());
        EXPECT(0x50, gbc.h());
        EXPECT(0xfe, gbc.l());
        EXPECT(0xc5c2, gbc.sp());
        EXPECT(0x10da, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 005F
        gbc.setState(0x6090, 0x8950, 0x2f00, 0x4130, 0x79b3, 0x17a2, 0x0, 0x0);
        gbc.writeMem(0x6090, { 0xdc, 0xad, 0x71 });
        gbc.step();
        EXPECT(0x2f, gbc.a());
        EXPECT(0x41, gbc.b());
        EXPECT(0x30, gbc.c());
        EXPECT(0x79, gbc.d());
        EXPECT(0xb3, gbc.e());
        EXPECT(0x17, gbc.h());
        EXPECT(0xa2, gbc.l());
        EXPECT(0x8950, gbc.sp());
        EXPECT(0x6093, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 0060
        gbc.setState(0x9909, 0x964f, 0x76a0, 0x4015, 0x9061, 0x7329, 0x1, 0x1);
        gbc.writeMem(0x9909, { 0xdc, 0x4f, 0xac });
        gbc.step();
        EXPECT(0x76, gbc.a());
        EXPECT(0x40, gbc.b());
        EXPECT(0x15, gbc.c());
        EXPECT(0x90, gbc.d());
        EXPECT(0x61, gbc.e());
        EXPECT(0x73, gbc.h());
        EXPECT(0x29, gbc.l());
        EXPECT(0x964f, gbc.sp());
        EXPECT(0x990c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0x9909));
        EXPECT(0x4f, gbc.readMem(0x990a));
        EXPECT(0xac, gbc.readMem(0x990b));
        // DC 0061
        gbc.setState(0x427f, 0x1418, 0x1640, 0xcd03, 0x9ded, 0x827e, 0x0, 0x1);
        gbc.writeMem(0x427f, { 0xdc, 0x5d, 0x5e });
        gbc.step();
        EXPECT(0x16, gbc.a());
        EXPECT(0xcd, gbc.b());
        EXPECT(0x3, gbc.c());
        EXPECT(0x9d, gbc.d());
        EXPECT(0xed, gbc.e());
        EXPECT(0x82, gbc.h());
        EXPECT(0x7e, gbc.l());
        EXPECT(0x1418, gbc.sp());
        EXPECT(0x4282, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 0064
        gbc.setState(0x5f91, 0x7870, 0xb800, 0x847f, 0xb14a, 0xb8fc, 0x1, 0x1);
        gbc.writeMem(0x5f91, { 0xdc, 0x0, 0x3 });
        gbc.step();
        EXPECT(0xb8, gbc.a());
        EXPECT(0x84, gbc.b());
        EXPECT(0x7f, gbc.c());
        EXPECT(0xb1, gbc.d());
        EXPECT(0x4a, gbc.e());
        EXPECT(0xb8, gbc.h());
        EXPECT(0xfc, gbc.l());
        EXPECT(0x7870, gbc.sp());
        EXPECT(0x5f94, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 0065
        gbc.setState(0x9cc7, 0x864b, 0x25d0, 0x600b, 0xa0ea, 0xfdd1, 0x1, 0x1);
        gbc.writeMem(0x8649, { 0x0, 0x0 });
        gbc.writeMem(0x9cc7, { 0xdc, 0xa7, 0xfa });
        gbc.step();
        EXPECT(0x25, gbc.a());
        EXPECT(0x60, gbc.b());
        EXPECT(0xb, gbc.c());
        EXPECT(0xa0, gbc.d());
        EXPECT(0xea, gbc.e());
        EXPECT(0xfd, gbc.h());
        EXPECT(0xd1, gbc.l());
        EXPECT(0x8649, gbc.sp());
        EXPECT(0xfaa7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xca, gbc.readMem(0x8649));
        EXPECT(0x9c, gbc.readMem(0x864a));
        EXPECT(0xdc, gbc.readMem(0x9cc7));
        EXPECT(0xa7, gbc.readMem(0x9cc8));
        EXPECT(0xfa, gbc.readMem(0x9cc9));
        // DC 0066
        gbc.setState(0x6430, 0xe81e, 0x8ea0, 0xc088, 0xad9, 0x7c3, 0x1, 0x0);
        gbc.writeMem(0x6430, { 0xdc, 0x54, 0x5a });
        gbc.step();
        EXPECT(0x8e, gbc.a());
        EXPECT(0xc0, gbc.b());
        EXPECT(0x88, gbc.c());
        EXPECT(0xa, gbc.d());
        EXPECT(0xd9, gbc.e());
        EXPECT(0x7, gbc.h());
        EXPECT(0xc3, gbc.l());
        EXPECT(0xe81e, gbc.sp());
        EXPECT(0x6433, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 0067
        gbc.setState(0x4290, 0x4219, 0x400, 0xfc76, 0x1939, 0xd8e6, 0x1, 0x0);
        gbc.writeMem(0x4290, { 0xdc, 0x1b, 0x95 });
        gbc.step();
        EXPECT(0x4, gbc.a());
        EXPECT(0xfc, gbc.b());
        EXPECT(0x76, gbc.c());
        EXPECT(0x19, gbc.d());
        EXPECT(0x39, gbc.e());
        EXPECT(0xd8, gbc.h());
        EXPECT(0xe6, gbc.l());
        EXPECT(0x4219, gbc.sp());
        EXPECT(0x4293, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 0068
        gbc.setState(0xa397, 0x79be, 0x8940, 0xbf7f, 0x7746, 0x5160, 0x1, 0x0);
        gbc.writeMem(0xa397, { 0xdc, 0x46, 0x90 });
        gbc.step();
        EXPECT(0x89, gbc.a());
        EXPECT(0xbf, gbc.b());
        EXPECT(0x7f, gbc.c());
        EXPECT(0x77, gbc.d());
        EXPECT(0x46, gbc.e());
        EXPECT(0x51, gbc.h());
        EXPECT(0x60, gbc.l());
        EXPECT(0x79be, gbc.sp());
        EXPECT(0xa39a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xa397));
        EXPECT(0x46, gbc.readMem(0xa398));
        EXPECT(0x90, gbc.readMem(0xa399));
        // DC 0069
        gbc.setState(0xe079, 0xc7b7, 0x1cb0, 0xe278, 0xe42c, 0xdde1, 0x1, 0x0);
        gbc.writeMem(0xc7b5, { 0x0, 0x0 });
        gbc.writeMem(0xe079, { 0xdc, 0x28, 0x83 });
        gbc.step();
        EXPECT(0x1c, gbc.a());
        EXPECT(0xe2, gbc.b());
        EXPECT(0x78, gbc.c());
        EXPECT(0xe4, gbc.d());
        EXPECT(0x2c, gbc.e());
        EXPECT(0xdd, gbc.h());
        EXPECT(0xe1, gbc.l());
        EXPECT(0xc7b5, gbc.sp());
        EXPECT(0x8328, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x7c, gbc.readMem(0xc7b5));
        EXPECT(0xe0, gbc.readMem(0xc7b6));
        EXPECT(0xdc, gbc.readMem(0xe079));
        EXPECT(0x28, gbc.readMem(0xe07a));
        EXPECT(0x83, gbc.readMem(0xe07b));
        // DC 006A
        gbc.setState(0x884, 0xfa16, 0x78c0, 0xe974, 0x6f62, 0x7def, 0x0, 0x0);
        gbc.writeMem(0x884, { 0xdc, 0xd3, 0xb1 });
        gbc.step();
        EXPECT(0x78, gbc.a());
        EXPECT(0xe9, gbc.b());
        EXPECT(0x74, gbc.c());
        EXPECT(0x6f, gbc.d());
        EXPECT(0x62, gbc.e());
        EXPECT(0x7d, gbc.h());
        EXPECT(0xef, gbc.l());
        EXPECT(0xfa16, gbc.sp());
        EXPECT(0x887, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 006C
        gbc.setState(0x6e4e, 0xd9d, 0xfe60, 0x9604, 0x625, 0xa870, 0x1, 0x0);
        gbc.writeMem(0x6e4e, { 0xdc, 0x6b, 0xd4 });
        gbc.step();
        EXPECT(0xfe, gbc.a());
        EXPECT(0x96, gbc.b());
        EXPECT(0x4, gbc.c());
        EXPECT(0x6, gbc.d());
        EXPECT(0x25, gbc.e());
        EXPECT(0xa8, gbc.h());
        EXPECT(0x70, gbc.l());
        EXPECT(0xd9d, gbc.sp());
        EXPECT(0x6e51, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 006D
        gbc.setState(0x5f29, 0x5e23, 0xc4c0, 0xf95b, 0x2672, 0xcbdc, 0x0, 0x1);
        gbc.writeMem(0x5f29, { 0xdc, 0x36, 0x8c });
        gbc.step();
        EXPECT(0xc4, gbc.a());
        EXPECT(0xf9, gbc.b());
        EXPECT(0x5b, gbc.c());
        EXPECT(0x26, gbc.d());
        EXPECT(0x72, gbc.e());
        EXPECT(0xcb, gbc.h());
        EXPECT(0xdc, gbc.l());
        EXPECT(0x5e23, gbc.sp());
        EXPECT(0x5f2c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 006F
        gbc.setState(0x8736, 0xa5e2, 0xe590, 0x35b2, 0x2f25, 0x4a90, 0x1, 0x1);
        gbc.writeMem(0x8736, { 0xdc, 0xb, 0xd });
        gbc.writeMem(0xa5e0, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xe5, gbc.a());
        EXPECT(0x35, gbc.b());
        EXPECT(0xb2, gbc.c());
        EXPECT(0x2f, gbc.d());
        EXPECT(0x25, gbc.e());
        EXPECT(0x4a, gbc.h());
        EXPECT(0x90, gbc.l());
        EXPECT(0xa5e0, gbc.sp());
        EXPECT(0xd0b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0x8736));
        EXPECT(0xb, gbc.readMem(0x8737));
        EXPECT(0xd, gbc.readMem(0x8738));
        EXPECT(0x39, gbc.readMem(0xa5e0));
        EXPECT(0x87, gbc.readMem(0xa5e1));
        // DC 0070
        gbc.setState(0x6da3, 0xc8ce, 0x4960, 0x8186, 0x893b, 0x4c8e, 0x0, 0x0);
        gbc.writeMem(0x6da3, { 0xdc, 0xff, 0x76 });
        gbc.step();
        EXPECT(0x49, gbc.a());
        EXPECT(0x81, gbc.b());
        EXPECT(0x86, gbc.c());
        EXPECT(0x89, gbc.d());
        EXPECT(0x3b, gbc.e());
        EXPECT(0x4c, gbc.h());
        EXPECT(0x8e, gbc.l());
        EXPECT(0xc8ce, gbc.sp());
        EXPECT(0x6da6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 0071
        gbc.setState(0x2e7c, 0x2ad7, 0x5360, 0x6176, 0xa28e, 0xd45f, 0x1, 0x1);
        gbc.writeMem(0x2e7c, { 0xdc, 0x15, 0xa3 });
        gbc.step();
        EXPECT(0x53, gbc.a());
        EXPECT(0x61, gbc.b());
        EXPECT(0x76, gbc.c());
        EXPECT(0xa2, gbc.d());
        EXPECT(0x8e, gbc.e());
        EXPECT(0xd4, gbc.h());
        EXPECT(0x5f, gbc.l());
        EXPECT(0x2ad7, gbc.sp());
        EXPECT(0x2e7f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 0072
        gbc.setState(0x764d, 0xe100, 0x81b0, 0x4128, 0x843f, 0x7c67, 0x0, 0x0);
        gbc.writeMem(0x764d, { 0xdc, 0x7, 0x60 });
        gbc.writeMem(0xe0fe, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x81, gbc.a());
        EXPECT(0x41, gbc.b());
        EXPECT(0x28, gbc.c());
        EXPECT(0x84, gbc.d());
        EXPECT(0x3f, gbc.e());
        EXPECT(0x7c, gbc.h());
        EXPECT(0x67, gbc.l());
        EXPECT(0xe0fe, gbc.sp());
        EXPECT(0x6007, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x50, gbc.readMem(0xe0fe));
        EXPECT(0x76, gbc.readMem(0xe0ff));
        // DC 0074
        gbc.setState(0x9c09, 0x352, 0xfc0, 0xe944, 0xa09c, 0xdd75, 0x1, 0x1);
        gbc.writeMem(0x9c09, { 0xdc, 0xf4, 0x1d });
        gbc.step();
        EXPECT(0xf, gbc.a());
        EXPECT(0xe9, gbc.b());
        EXPECT(0x44, gbc.c());
        EXPECT(0xa0, gbc.d());
        EXPECT(0x9c, gbc.e());
        EXPECT(0xdd, gbc.h());
        EXPECT(0x75, gbc.l());
        EXPECT(0x352, gbc.sp());
        EXPECT(0x9c0c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0x9c09));
        EXPECT(0xf4, gbc.readMem(0x9c0a));
        EXPECT(0x1d, gbc.readMem(0x9c0b));
        // DC 0077
        gbc.setState(0xaaa8, 0xfcd9, 0x5d20, 0x447d, 0x1c56, 0x8c33, 0x0, 0x1);
        gbc.writeMem(0xaaa8, { 0xdc, 0xa8, 0xd7 });
        gbc.step();
        EXPECT(0x5d, gbc.a());
        EXPECT(0x44, gbc.b());
        EXPECT(0x7d, gbc.c());
        EXPECT(0x1c, gbc.d());
        EXPECT(0x56, gbc.e());
        EXPECT(0x8c, gbc.h());
        EXPECT(0x33, gbc.l());
        EXPECT(0xfcd9, gbc.sp());
        EXPECT(0xaaab, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xaaa8));
        EXPECT(0xa8, gbc.readMem(0xaaa9));
        EXPECT(0xd7, gbc.readMem(0xaaaa));
        // DC 007A
        gbc.setState(0x6e13, 0xf932, 0x4c00, 0xf64e, 0xd54b, 0x209f, 0x1, 0x1);
        gbc.writeMem(0x6e13, { 0xdc, 0xd6, 0xea });
        gbc.step();
        EXPECT(0x4c, gbc.a());
        EXPECT(0xf6, gbc.b());
        EXPECT(0x4e, gbc.c());
        EXPECT(0xd5, gbc.d());
        EXPECT(0x4b, gbc.e());
        EXPECT(0x20, gbc.h());
        EXPECT(0x9f, gbc.l());
        EXPECT(0xf932, gbc.sp());
        EXPECT(0x6e16, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 007B
        gbc.setState(0x8b2d, 0xa765, 0x65c0, 0xb53f, 0x4342, 0xad7a, 0x1, 0x1);
        gbc.writeMem(0x8b2d, { 0xdc, 0xf0, 0xc6 });
        gbc.step();
        EXPECT(0x65, gbc.a());
        EXPECT(0xb5, gbc.b());
        EXPECT(0x3f, gbc.c());
        EXPECT(0x43, gbc.d());
        EXPECT(0x42, gbc.e());
        EXPECT(0xad, gbc.h());
        EXPECT(0x7a, gbc.l());
        EXPECT(0xa765, gbc.sp());
        EXPECT(0x8b30, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0x8b2d));
        EXPECT(0xf0, gbc.readMem(0x8b2e));
        EXPECT(0xc6, gbc.readMem(0x8b2f));
        // DC 007D
        gbc.setState(0x7793, 0x938, 0xc400, 0xde68, 0x7807, 0xaa10, 0x1, 0x1);
        gbc.writeMem(0x7793, { 0xdc, 0xbd, 0x65 });
        gbc.step();
        EXPECT(0xc4, gbc.a());
        EXPECT(0xde, gbc.b());
        EXPECT(0x68, gbc.c());
        EXPECT(0x78, gbc.d());
        EXPECT(0x7, gbc.e());
        EXPECT(0xaa, gbc.h());
        EXPECT(0x10, gbc.l());
        EXPECT(0x938, gbc.sp());
        EXPECT(0x7796, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 007F
        gbc.setState(0x46c2, 0xebeb, 0xdc80, 0x2efd, 0xa117, 0x244c, 0x1, 0x0);
        gbc.writeMem(0x46c2, { 0xdc, 0xda, 0x74 });
        gbc.step();
        EXPECT(0xdc, gbc.a());
        EXPECT(0x2e, gbc.b());
        EXPECT(0xfd, gbc.c());
        EXPECT(0xa1, gbc.d());
        EXPECT(0x17, gbc.e());
        EXPECT(0x24, gbc.h());
        EXPECT(0x4c, gbc.l());
        EXPECT(0xebeb, gbc.sp());
        EXPECT(0x46c5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 0080
        gbc.setState(0xd808, 0xc729, 0x5b50, 0x1bb2, 0xbf08, 0xfaa7, 0x0, 0x1);
        gbc.writeMem(0xc727, { 0x0, 0x0 });
        gbc.writeMem(0xd808, { 0xdc, 0xd7, 0x56 });
        gbc.step();
        EXPECT(0x5b, gbc.a());
        EXPECT(0x1b, gbc.b());
        EXPECT(0xb2, gbc.c());
        EXPECT(0xbf, gbc.d());
        EXPECT(0x8, gbc.e());
        EXPECT(0xfa, gbc.h());
        EXPECT(0xa7, gbc.l());
        EXPECT(0xc727, gbc.sp());
        EXPECT(0x56d7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xb, gbc.readMem(0xc727));
        EXPECT(0xd8, gbc.readMem(0xc728));
        EXPECT(0xdc, gbc.readMem(0xd808));
        EXPECT(0xd7, gbc.readMem(0xd809));
        EXPECT(0x56, gbc.readMem(0xd80a));
        // DC 0081
        gbc.setState(0x15a8, 0x1904, 0xcce0, 0x25c2, 0x2b54, 0x7e8a, 0x0, 0x0);
        gbc.writeMem(0x15a8, { 0xdc, 0xe6, 0xa4 });
        gbc.step();
        EXPECT(0xcc, gbc.a());
        EXPECT(0x25, gbc.b());
        EXPECT(0xc2, gbc.c());
        EXPECT(0x2b, gbc.d());
        EXPECT(0x54, gbc.e());
        EXPECT(0x7e, gbc.h());
        EXPECT(0x8a, gbc.l());
        EXPECT(0x1904, gbc.sp());
        EXPECT(0x15ab, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 0082
        gbc.setState(0xd25c, 0xad7d, 0xeef0, 0x7cc0, 0xcdc4, 0x3d5f, 0x0, 0x1);
        gbc.writeMem(0xad7b, { 0x0, 0x0 });
        gbc.writeMem(0xd25c, { 0xdc, 0xce, 0x5b });
        gbc.step();
        EXPECT(0xee, gbc.a());
        EXPECT(0x7c, gbc.b());
        EXPECT(0xc0, gbc.c());
        EXPECT(0xcd, gbc.d());
        EXPECT(0xc4, gbc.e());
        EXPECT(0x3d, gbc.h());
        EXPECT(0x5f, gbc.l());
        EXPECT(0xad7b, gbc.sp());
        EXPECT(0x5bce, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x5f, gbc.readMem(0xad7b));
        EXPECT(0xd2, gbc.readMem(0xad7c));
        EXPECT(0xdc, gbc.readMem(0xd25c));
        EXPECT(0xce, gbc.readMem(0xd25d));
        EXPECT(0x5b, gbc.readMem(0xd25e));
        // DC 0083
        gbc.setState(0x48bb, 0xea19, 0xb890, 0xeadb, 0x9d67, 0xa44d, 0x1, 0x0);
        gbc.writeMem(0x48bb, { 0xdc, 0x2b, 0x16 });
        gbc.writeMem(0xea17, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xb8, gbc.a());
        EXPECT(0xea, gbc.b());
        EXPECT(0xdb, gbc.c());
        EXPECT(0x9d, gbc.d());
        EXPECT(0x67, gbc.e());
        EXPECT(0xa4, gbc.h());
        EXPECT(0x4d, gbc.l());
        EXPECT(0xea17, gbc.sp());
        EXPECT(0x162b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xbe, gbc.readMem(0xea17));
        EXPECT(0x48, gbc.readMem(0xea18));
        // DC 0085
        gbc.setState(0xe6d6, 0x41a9, 0x6620, 0x753d, 0xbc39, 0xee4e, 0x0, 0x0);
        gbc.writeMem(0xe6d6, { 0xdc, 0x63, 0x86 });
        gbc.step();
        EXPECT(0x66, gbc.a());
        EXPECT(0x75, gbc.b());
        EXPECT(0x3d, gbc.c());
        EXPECT(0xbc, gbc.d());
        EXPECT(0x39, gbc.e());
        EXPECT(0xee, gbc.h());
        EXPECT(0x4e, gbc.l());
        EXPECT(0x41a9, gbc.sp());
        EXPECT(0xe6d9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xe6d6));
        EXPECT(0x63, gbc.readMem(0xe6d7));
        EXPECT(0x86, gbc.readMem(0xe6d8));
        // DC 0086
        gbc.setState(0x5cd5, 0x8695, 0x68c0, 0x7d59, 0xb963, 0x56cf, 0x1, 0x1);
        gbc.writeMem(0x5cd5, { 0xdc, 0xa4, 0xab });
        gbc.step();
        EXPECT(0x68, gbc.a());
        EXPECT(0x7d, gbc.b());
        EXPECT(0x59, gbc.c());
        EXPECT(0xb9, gbc.d());
        EXPECT(0x63, gbc.e());
        EXPECT(0x56, gbc.h());
        EXPECT(0xcf, gbc.l());
        EXPECT(0x8695, gbc.sp());
        EXPECT(0x5cd8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 0088
        gbc.setState(0x97db, 0xaa1d, 0xdbe0, 0xd0c8, 0x4455, 0xdcb7, 0x1, 0x1);
        gbc.writeMem(0x97db, { 0xdc, 0xb7, 0x30 });
        gbc.step();
        EXPECT(0xdb, gbc.a());
        EXPECT(0xd0, gbc.b());
        EXPECT(0xc8, gbc.c());
        EXPECT(0x44, gbc.d());
        EXPECT(0x55, gbc.e());
        EXPECT(0xdc, gbc.h());
        EXPECT(0xb7, gbc.l());
        EXPECT(0xaa1d, gbc.sp());
        EXPECT(0x97de, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0x97db));
        EXPECT(0xb7, gbc.readMem(0x97dc));
        EXPECT(0x30, gbc.readMem(0x97dd));
        // DC 0089
        gbc.setState(0x12ef, 0x46c5, 0x6b20, 0xb725, 0x4208, 0x475d, 0x0, 0x1);
        gbc.writeMem(0x12ef, { 0xdc, 0x5f, 0x24 });
        gbc.step();
        EXPECT(0x6b, gbc.a());
        EXPECT(0xb7, gbc.b());
        EXPECT(0x25, gbc.c());
        EXPECT(0x42, gbc.d());
        EXPECT(0x8, gbc.e());
        EXPECT(0x47, gbc.h());
        EXPECT(0x5d, gbc.l());
        EXPECT(0x46c5, gbc.sp());
        EXPECT(0x12f2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 008B
        gbc.setState(0xc7eb, 0xeed2, 0x9b0, 0xc7d4, 0x80df, 0xab8f, 0x0, 0x1);
        gbc.writeMem(0xc7eb, { 0xdc, 0x57, 0x9d });
        gbc.writeMem(0xeed0, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x9, gbc.a());
        EXPECT(0xc7, gbc.b());
        EXPECT(0xd4, gbc.c());
        EXPECT(0x80, gbc.d());
        EXPECT(0xdf, gbc.e());
        EXPECT(0xab, gbc.h());
        EXPECT(0x8f, gbc.l());
        EXPECT(0xeed0, gbc.sp());
        EXPECT(0x9d57, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xc7eb));
        EXPECT(0x57, gbc.readMem(0xc7ec));
        EXPECT(0x9d, gbc.readMem(0xc7ed));
        EXPECT(0xee, gbc.readMem(0xeed0));
        EXPECT(0xc7, gbc.readMem(0xeed1));
        // DC 008C
        gbc.setState(0x963e, 0xf968, 0xaa20, 0x41c8, 0xdacd, 0x29b, 0x0, 0x0);
        gbc.writeMem(0x963e, { 0xdc, 0x9a, 0x62 });
        gbc.step();
        EXPECT(0xaa, gbc.a());
        EXPECT(0x41, gbc.b());
        EXPECT(0xc8, gbc.c());
        EXPECT(0xda, gbc.d());
        EXPECT(0xcd, gbc.e());
        EXPECT(0x2, gbc.h());
        EXPECT(0x9b, gbc.l());
        EXPECT(0xf968, gbc.sp());
        EXPECT(0x9641, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0x963e));
        EXPECT(0x9a, gbc.readMem(0x963f));
        EXPECT(0x62, gbc.readMem(0x9640));
        // DC 008D
        gbc.setState(0x9baf, 0xdfc8, 0xfa50, 0x9376, 0xb6f6, 0xd214, 0x1, 0x0);
        gbc.writeMem(0x9baf, { 0xdc, 0x4e, 0x54 });
        gbc.writeMem(0xdfc6, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xfa, gbc.a());
        EXPECT(0x93, gbc.b());
        EXPECT(0x76, gbc.c());
        EXPECT(0xb6, gbc.d());
        EXPECT(0xf6, gbc.e());
        EXPECT(0xd2, gbc.h());
        EXPECT(0x14, gbc.l());
        EXPECT(0xdfc6, gbc.sp());
        EXPECT(0x544e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0x9baf));
        EXPECT(0x4e, gbc.readMem(0x9bb0));
        EXPECT(0x54, gbc.readMem(0x9bb1));
        EXPECT(0xb2, gbc.readMem(0xdfc6));
        EXPECT(0x9b, gbc.readMem(0xdfc7));
        // DC 008F
        gbc.setState(0xb927, 0xa951, 0x7320, 0xc07c, 0x458d, 0x4bdb, 0x0, 0x1);
        gbc.writeMem(0xb927, { 0xdc, 0x56, 0x8e });
        gbc.step();
        EXPECT(0x73, gbc.a());
        EXPECT(0xc0, gbc.b());
        EXPECT(0x7c, gbc.c());
        EXPECT(0x45, gbc.d());
        EXPECT(0x8d, gbc.e());
        EXPECT(0x4b, gbc.h());
        EXPECT(0xdb, gbc.l());
        EXPECT(0xa951, gbc.sp());
        EXPECT(0xb92a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xb927));
        EXPECT(0x56, gbc.readMem(0xb928));
        EXPECT(0x8e, gbc.readMem(0xb929));
        // DC 0090
        gbc.setState(0x7498, 0xa32e, 0x4f0, 0xfcc5, 0xc135, 0x82a4, 0x1, 0x1);
        gbc.writeMem(0x7498, { 0xdc, 0xc1, 0xc6 });
        gbc.writeMem(0xa32c, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x4, gbc.a());
        EXPECT(0xfc, gbc.b());
        EXPECT(0xc5, gbc.c());
        EXPECT(0xc1, gbc.d());
        EXPECT(0x35, gbc.e());
        EXPECT(0x82, gbc.h());
        EXPECT(0xa4, gbc.l());
        EXPECT(0xa32c, gbc.sp());
        EXPECT(0xc6c1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x9b, gbc.readMem(0xa32c));
        EXPECT(0x74, gbc.readMem(0xa32d));
        // DC 0091
        gbc.setState(0x8158, 0xd0f, 0x8e20, 0xe51c, 0xf792, 0xb569, 0x0, 0x1);
        gbc.writeMem(0x8158, { 0xdc, 0x96, 0x4d });
        gbc.step();
        EXPECT(0x8e, gbc.a());
        EXPECT(0xe5, gbc.b());
        EXPECT(0x1c, gbc.c());
        EXPECT(0xf7, gbc.d());
        EXPECT(0x92, gbc.e());
        EXPECT(0xb5, gbc.h());
        EXPECT(0x69, gbc.l());
        EXPECT(0xd0f, gbc.sp());
        EXPECT(0x815b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0x8158));
        EXPECT(0x96, gbc.readMem(0x8159));
        EXPECT(0x4d, gbc.readMem(0x815a));
        // DC 0092
        gbc.setState(0x494, 0x777, 0xc620, 0x7935, 0x5d8e, 0xd5a4, 0x1, 0x1);
        gbc.writeMem(0x494, { 0xdc, 0xfa, 0x81 });
        gbc.step();
        EXPECT(0xc6, gbc.a());
        EXPECT(0x79, gbc.b());
        EXPECT(0x35, gbc.c());
        EXPECT(0x5d, gbc.d());
        EXPECT(0x8e, gbc.e());
        EXPECT(0xd5, gbc.h());
        EXPECT(0xa4, gbc.l());
        EXPECT(0x777, gbc.sp());
        EXPECT(0x497, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 0094
        gbc.setState(0xe548, 0xe12d, 0xd50, 0x37a4, 0x116e, 0xae77, 0x1, 0x1);
        gbc.writeMem(0xe12b, { 0x0, 0x0 });
        gbc.writeMem(0xe548, { 0xdc, 0xe1, 0x39 });
        gbc.step();
        EXPECT(0xd, gbc.a());
        EXPECT(0x37, gbc.b());
        EXPECT(0xa4, gbc.c());
        EXPECT(0x11, gbc.d());
        EXPECT(0x6e, gbc.e());
        EXPECT(0xae, gbc.h());
        EXPECT(0x77, gbc.l());
        EXPECT(0xe12b, gbc.sp());
        EXPECT(0x39e1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x4b, gbc.readMem(0xe12b));
        EXPECT(0xe5, gbc.readMem(0xe12c));
        EXPECT(0xdc, gbc.readMem(0xe548));
        EXPECT(0xe1, gbc.readMem(0xe549));
        EXPECT(0x39, gbc.readMem(0xe54a));
        // DC 0095
        gbc.setState(0x77e2, 0xe3d3, 0xd980, 0x2a5d, 0x162, 0x9ccb, 0x0, 0x1);
        gbc.writeMem(0x77e2, { 0xdc, 0xf2, 0xaa });
        gbc.step();
        EXPECT(0xd9, gbc.a());
        EXPECT(0x2a, gbc.b());
        EXPECT(0x5d, gbc.c());
        EXPECT(0x1, gbc.d());
        EXPECT(0x62, gbc.e());
        EXPECT(0x9c, gbc.h());
        EXPECT(0xcb, gbc.l());
        EXPECT(0xe3d3, gbc.sp());
        EXPECT(0x77e5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 0096
        gbc.setState(0x806c, 0xd55d, 0xcb90, 0xfa14, 0x6e58, 0x7228, 0x1, 0x0);
        gbc.writeMem(0x806c, { 0xdc, 0xb0, 0xe0 });
        gbc.writeMem(0xd55b, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xcb, gbc.a());
        EXPECT(0xfa, gbc.b());
        EXPECT(0x14, gbc.c());
        EXPECT(0x6e, gbc.d());
        EXPECT(0x58, gbc.e());
        EXPECT(0x72, gbc.h());
        EXPECT(0x28, gbc.l());
        EXPECT(0xd55b, gbc.sp());
        EXPECT(0xe0b0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0x806c));
        EXPECT(0xb0, gbc.readMem(0x806d));
        EXPECT(0xe0, gbc.readMem(0x806e));
        EXPECT(0x6f, gbc.readMem(0xd55b));
        EXPECT(0x80, gbc.readMem(0xd55c));
        // DC 0099
        gbc.setState(0x2c3a, 0xa6dd, 0xc690, 0x242, 0x5f7, 0xe296, 0x0, 0x1);
        gbc.writeMem(0x2c3a, { 0xdc, 0xca, 0xad });
        gbc.writeMem(0xa6db, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xc6, gbc.a());
        EXPECT(0x2, gbc.b());
        EXPECT(0x42, gbc.c());
        EXPECT(0x5, gbc.d());
        EXPECT(0xf7, gbc.e());
        EXPECT(0xe2, gbc.h());
        EXPECT(0x96, gbc.l());
        EXPECT(0xa6db, gbc.sp());
        EXPECT(0xadca, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x3d, gbc.readMem(0xa6db));
        EXPECT(0x2c, gbc.readMem(0xa6dc));
        // DC 009A
        gbc.setState(0xe705, 0xd9dc, 0x6370, 0x9b4c, 0xd92b, 0x6383, 0x1, 0x1);
        gbc.writeMem(0xd9da, { 0x0, 0x0 });
        gbc.writeMem(0xe705, { 0xdc, 0xd7, 0x77 });
        gbc.step();
        EXPECT(0x63, gbc.a());
        EXPECT(0x9b, gbc.b());
        EXPECT(0x4c, gbc.c());
        EXPECT(0xd9, gbc.d());
        EXPECT(0x2b, gbc.e());
        EXPECT(0x63, gbc.h());
        EXPECT(0x83, gbc.l());
        EXPECT(0xd9da, gbc.sp());
        EXPECT(0x77d7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x8, gbc.readMem(0xd9da));
        EXPECT(0xe7, gbc.readMem(0xd9db));
        EXPECT(0xdc, gbc.readMem(0xe705));
        EXPECT(0xd7, gbc.readMem(0xe706));
        EXPECT(0x77, gbc.readMem(0xe707));
        // DC 009B
        gbc.setState(0x3066, 0xd1a7, 0xfac0, 0x48db, 0xa8ac, 0x6133, 0x1, 0x1);
        gbc.writeMem(0x3066, { 0xdc, 0x93, 0xd6 });
        gbc.step();
        EXPECT(0xfa, gbc.a());
        EXPECT(0x48, gbc.b());
        EXPECT(0xdb, gbc.c());
        EXPECT(0xa8, gbc.d());
        EXPECT(0xac, gbc.e());
        EXPECT(0x61, gbc.h());
        EXPECT(0x33, gbc.l());
        EXPECT(0xd1a7, gbc.sp());
        EXPECT(0x3069, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 009E
        gbc.setState(0x29d9, 0xc6d5, 0x52c0, 0x9a84, 0x3c68, 0xffa0, 0x1, 0x1);
        gbc.writeMem(0x29d9, { 0xdc, 0xe3, 0x49 });
        gbc.step();
        EXPECT(0x52, gbc.a());
        EXPECT(0x9a, gbc.b());
        EXPECT(0x84, gbc.c());
        EXPECT(0x3c, gbc.d());
        EXPECT(0x68, gbc.e());
        EXPECT(0xff, gbc.h());
        EXPECT(0xa0, gbc.l());
        EXPECT(0xc6d5, gbc.sp());
        EXPECT(0x29dc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 00A0
        gbc.setState(0xc1a2, 0x55af, 0xd900, 0x563c, 0x1067, 0x418f, 0x1, 0x0);
        gbc.writeMem(0xc1a2, { 0xdc, 0x6d, 0x94 });
        gbc.step();
        EXPECT(0xd9, gbc.a());
        EXPECT(0x56, gbc.b());
        EXPECT(0x3c, gbc.c());
        EXPECT(0x10, gbc.d());
        EXPECT(0x67, gbc.e());
        EXPECT(0x41, gbc.h());
        EXPECT(0x8f, gbc.l());
        EXPECT(0x55af, gbc.sp());
        EXPECT(0xc1a5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xc1a2));
        EXPECT(0x6d, gbc.readMem(0xc1a3));
        EXPECT(0x94, gbc.readMem(0xc1a4));
        // DC 00A1
        gbc.setState(0x9161, 0xefd9, 0xe50, 0x55e4, 0x9fcd, 0x409c, 0x1, 0x0);
        gbc.writeMem(0x9161, { 0xdc, 0x8c, 0x2a });
        gbc.writeMem(0xefd7, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xe, gbc.a());
        EXPECT(0x55, gbc.b());
        EXPECT(0xe4, gbc.c());
        EXPECT(0x9f, gbc.d());
        EXPECT(0xcd, gbc.e());
        EXPECT(0x40, gbc.h());
        EXPECT(0x9c, gbc.l());
        EXPECT(0xefd7, gbc.sp());
        EXPECT(0x2a8c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0x9161));
        EXPECT(0x8c, gbc.readMem(0x9162));
        EXPECT(0x2a, gbc.readMem(0x9163));
        EXPECT(0x64, gbc.readMem(0xefd7));
        EXPECT(0x91, gbc.readMem(0xefd8));
        // DC 00A6
        gbc.setState(0x489a, 0xd334, 0xbb70, 0xb5da, 0x398e, 0xcd4a, 0x1, 0x0);
        gbc.writeMem(0x489a, { 0xdc, 0x93, 0xc1 });
        gbc.writeMem(0xd332, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xbb, gbc.a());
        EXPECT(0xb5, gbc.b());
        EXPECT(0xda, gbc.c());
        EXPECT(0x39, gbc.d());
        EXPECT(0x8e, gbc.e());
        EXPECT(0xcd, gbc.h());
        EXPECT(0x4a, gbc.l());
        EXPECT(0xd332, gbc.sp());
        EXPECT(0xc193, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x9d, gbc.readMem(0xd332));
        EXPECT(0x48, gbc.readMem(0xd333));
        // DC 00A7
        gbc.setState(0x3144, 0xa392, 0xbf60, 0x523d, 0x6fd, 0x5dab, 0x1, 0x0);
        gbc.writeMem(0x3144, { 0xdc, 0x63, 0xe0 });
        gbc.step();
        EXPECT(0xbf, gbc.a());
        EXPECT(0x52, gbc.b());
        EXPECT(0x3d, gbc.c());
        EXPECT(0x6, gbc.d());
        EXPECT(0xfd, gbc.e());
        EXPECT(0x5d, gbc.h());
        EXPECT(0xab, gbc.l());
        EXPECT(0xa392, gbc.sp());
        EXPECT(0x3147, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 00A9
        gbc.setState(0x4139, 0xba45, 0xf480, 0x1153, 0x771b, 0x9942, 0x1, 0x0);
        gbc.writeMem(0x4139, { 0xdc, 0x42, 0x8 });
        gbc.step();
        EXPECT(0xf4, gbc.a());
        EXPECT(0x11, gbc.b());
        EXPECT(0x53, gbc.c());
        EXPECT(0x77, gbc.d());
        EXPECT(0x1b, gbc.e());
        EXPECT(0x99, gbc.h());
        EXPECT(0x42, gbc.l());
        EXPECT(0xba45, gbc.sp());
        EXPECT(0x413c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 00AA
        gbc.setState(0x4606, 0xf235, 0x4af0, 0x2e8f, 0x23d1, 0xf853, 0x1, 0x0);
        gbc.writeMem(0x4606, { 0xdc, 0x6e, 0x35 });
        gbc.writeMem(0xf233, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x4a, gbc.a());
        EXPECT(0x2e, gbc.b());
        EXPECT(0x8f, gbc.c());
        EXPECT(0x23, gbc.d());
        EXPECT(0xd1, gbc.e());
        EXPECT(0xf8, gbc.h());
        EXPECT(0x53, gbc.l());
        EXPECT(0xf233, gbc.sp());
        EXPECT(0x356e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x9, gbc.readMem(0xf233));
        EXPECT(0x46, gbc.readMem(0xf234));
        // DC 00AB
        gbc.setState(0x2445, 0x81c6, 0xa230, 0x85f0, 0xa099, 0x945d, 0x0, 0x0);
        gbc.writeMem(0x2445, { 0xdc, 0x5, 0xf5 });
        gbc.writeMem(0x81c4, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xa2, gbc.a());
        EXPECT(0x85, gbc.b());
        EXPECT(0xf0, gbc.c());
        EXPECT(0xa0, gbc.d());
        EXPECT(0x99, gbc.e());
        EXPECT(0x94, gbc.h());
        EXPECT(0x5d, gbc.l());
        EXPECT(0x81c4, gbc.sp());
        EXPECT(0xf505, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x48, gbc.readMem(0x81c4));
        EXPECT(0x24, gbc.readMem(0x81c5));
        // DC 00AD
        gbc.setState(0x6332, 0xff93, 0x2af0, 0x1aaa, 0x6b1d, 0x6aa7, 0x0, 0x1);
        gbc.writeMem(0x6332, { 0xdc, 0x93, 0xf });
        gbc.writeMem(0xff91, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x2a, gbc.a());
        EXPECT(0x1a, gbc.b());
        EXPECT(0xaa, gbc.c());
        EXPECT(0x6b, gbc.d());
        EXPECT(0x1d, gbc.e());
        EXPECT(0x6a, gbc.h());
        EXPECT(0xa7, gbc.l());
        EXPECT(0xff91, gbc.sp());
        EXPECT(0xf93, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x35, gbc.readMem(0xff91));
        EXPECT(0x63, gbc.readMem(0xff92));
        // DC 00AF
        gbc.setState(0x3a12, 0xdfe3, 0xd860, 0xac1a, 0xabd0, 0xb39f, 0x1, 0x1);
        gbc.writeMem(0x3a12, { 0xdc, 0x7a, 0x9d });
        gbc.step();
        EXPECT(0xd8, gbc.a());
        EXPECT(0xac, gbc.b());
        EXPECT(0x1a, gbc.c());
        EXPECT(0xab, gbc.d());
        EXPECT(0xd0, gbc.e());
        EXPECT(0xb3, gbc.h());
        EXPECT(0x9f, gbc.l());
        EXPECT(0xdfe3, gbc.sp());
        EXPECT(0x3a15, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 00B0
        gbc.setState(0x2277, 0x98eb, 0x3210, 0xf9ec, 0x60b7, 0xa3a2, 0x1, 0x1);
        gbc.writeMem(0x2277, { 0xdc, 0x31, 0xba });
        gbc.writeMem(0x98e9, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x32, gbc.a());
        EXPECT(0xf9, gbc.b());
        EXPECT(0xec, gbc.c());
        EXPECT(0x60, gbc.d());
        EXPECT(0xb7, gbc.e());
        EXPECT(0xa3, gbc.h());
        EXPECT(0xa2, gbc.l());
        EXPECT(0x98e9, gbc.sp());
        EXPECT(0xba31, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x7a, gbc.readMem(0x98e9));
        EXPECT(0x22, gbc.readMem(0x98ea));
        // DC 00B1
        gbc.setState(0x8783, 0x5202, 0xfce0, 0x5a6c, 0x77da, 0xda25, 0x0, 0x0);
        gbc.writeMem(0x8783, { 0xdc, 0x5, 0x42 });
        gbc.step();
        EXPECT(0xfc, gbc.a());
        EXPECT(0x5a, gbc.b());
        EXPECT(0x6c, gbc.c());
        EXPECT(0x77, gbc.d());
        EXPECT(0xda, gbc.e());
        EXPECT(0xda, gbc.h());
        EXPECT(0x25, gbc.l());
        EXPECT(0x5202, gbc.sp());
        EXPECT(0x8786, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0x8783));
        EXPECT(0x5, gbc.readMem(0x8784));
        EXPECT(0x42, gbc.readMem(0x8785));
        // DC 00B2
        gbc.setState(0x24f0, 0x121d, 0x73a0, 0xf943, 0x720c, 0xe9b2, 0x0, 0x0);
        gbc.writeMem(0x24f0, { 0xdc, 0x2f, 0x54 });
        gbc.step();
        EXPECT(0x73, gbc.a());
        EXPECT(0xf9, gbc.b());
        EXPECT(0x43, gbc.c());
        EXPECT(0x72, gbc.d());
        EXPECT(0xc, gbc.e());
        EXPECT(0xe9, gbc.h());
        EXPECT(0xb2, gbc.l());
        EXPECT(0x121d, gbc.sp());
        EXPECT(0x24f3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 00B3
        gbc.setState(0x899f, 0xab1f, 0xa300, 0x4fd6, 0xec9d, 0xdbe7, 0x1, 0x1);
        gbc.writeMem(0x899f, { 0xdc, 0x88, 0xa0 });
        gbc.step();
        EXPECT(0xa3, gbc.a());
        EXPECT(0x4f, gbc.b());
        EXPECT(0xd6, gbc.c());
        EXPECT(0xec, gbc.d());
        EXPECT(0x9d, gbc.e());
        EXPECT(0xdb, gbc.h());
        EXPECT(0xe7, gbc.l());
        EXPECT(0xab1f, gbc.sp());
        EXPECT(0x89a2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0x899f));
        EXPECT(0x88, gbc.readMem(0x89a0));
        EXPECT(0xa0, gbc.readMem(0x89a1));
        // DC 00B5
        gbc.setState(0xea94, 0xbdfb, 0xf7e0, 0x5ae7, 0x2201, 0x821a, 0x1, 0x0);
        gbc.writeMem(0xea94, { 0xdc, 0x52, 0x2e });
        gbc.step();
        EXPECT(0xf7, gbc.a());
        EXPECT(0x5a, gbc.b());
        EXPECT(0xe7, gbc.c());
        EXPECT(0x22, gbc.d());
        EXPECT(0x1, gbc.e());
        EXPECT(0x82, gbc.h());
        EXPECT(0x1a, gbc.l());
        EXPECT(0xbdfb, gbc.sp());
        EXPECT(0xea97, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xea94));
        EXPECT(0x52, gbc.readMem(0xea95));
        EXPECT(0x2e, gbc.readMem(0xea96));
        // DC 00B7
        gbc.setState(0x1b8c, 0x83ca, 0x1920, 0xd5f4, 0x6f60, 0xf623, 0x0, 0x1);
        gbc.writeMem(0x1b8c, { 0xdc, 0x9b, 0x7e });
        gbc.step();
        EXPECT(0x19, gbc.a());
        EXPECT(0xd5, gbc.b());
        EXPECT(0xf4, gbc.c());
        EXPECT(0x6f, gbc.d());
        EXPECT(0x60, gbc.e());
        EXPECT(0xf6, gbc.h());
        EXPECT(0x23, gbc.l());
        EXPECT(0x83ca, gbc.sp());
        EXPECT(0x1b8f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 00B8
        gbc.setState(0x75bd, 0xa035, 0x16e0, 0x12db, 0x108f, 0xf186, 0x1, 0x1);
        gbc.writeMem(0x75bd, { 0xdc, 0x1d, 0xda });
        gbc.step();
        EXPECT(0x16, gbc.a());
        EXPECT(0x12, gbc.b());
        EXPECT(0xdb, gbc.c());
        EXPECT(0x10, gbc.d());
        EXPECT(0x8f, gbc.e());
        EXPECT(0xf1, gbc.h());
        EXPECT(0x86, gbc.l());
        EXPECT(0xa035, gbc.sp());
        EXPECT(0x75c0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 00BA
        gbc.setState(0x615d, 0x16af, 0xab80, 0xf0e6, 0xd0c0, 0x9dbd, 0x0, 0x1);
        gbc.writeMem(0x615d, { 0xdc, 0xca, 0xaa });
        gbc.step();
        EXPECT(0xab, gbc.a());
        EXPECT(0xf0, gbc.b());
        EXPECT(0xe6, gbc.c());
        EXPECT(0xd0, gbc.d());
        EXPECT(0xc0, gbc.e());
        EXPECT(0x9d, gbc.h());
        EXPECT(0xbd, gbc.l());
        EXPECT(0x16af, gbc.sp());
        EXPECT(0x6160, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 00BC
        gbc.setState(0x5323, 0xf5d7, 0x4150, 0xa093, 0x3a4, 0x29b1, 0x0, 0x1);
        gbc.writeMem(0x5323, { 0xdc, 0x2d, 0x85 });
        gbc.writeMem(0xf5d5, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x41, gbc.a());
        EXPECT(0xa0, gbc.b());
        EXPECT(0x93, gbc.c());
        EXPECT(0x3, gbc.d());
        EXPECT(0xa4, gbc.e());
        EXPECT(0x29, gbc.h());
        EXPECT(0xb1, gbc.l());
        EXPECT(0xf5d5, gbc.sp());
        EXPECT(0x852d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x26, gbc.readMem(0xf5d5));
        EXPECT(0x53, gbc.readMem(0xf5d6));
        // DC 00BD
        gbc.setState(0x9877, 0xde55, 0x25d0, 0x7bb3, 0xab49, 0x9ee2, 0x1, 0x0);
        gbc.writeMem(0x9877, { 0xdc, 0xd3, 0x2e });
        gbc.writeMem(0xde53, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x25, gbc.a());
        EXPECT(0x7b, gbc.b());
        EXPECT(0xb3, gbc.c());
        EXPECT(0xab, gbc.d());
        EXPECT(0x49, gbc.e());
        EXPECT(0x9e, gbc.h());
        EXPECT(0xe2, gbc.l());
        EXPECT(0xde53, gbc.sp());
        EXPECT(0x2ed3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0x9877));
        EXPECT(0xd3, gbc.readMem(0x9878));
        EXPECT(0x2e, gbc.readMem(0x9879));
        EXPECT(0x7a, gbc.readMem(0xde53));
        EXPECT(0x98, gbc.readMem(0xde54));
        // DC 00C0
        gbc.setState(0x6c2c, 0xcea0, 0x8960, 0x386, 0x8bd0, 0x3794, 0x1, 0x1);
        gbc.writeMem(0x6c2c, { 0xdc, 0x44, 0x95 });
        gbc.step();
        EXPECT(0x89, gbc.a());
        EXPECT(0x3, gbc.b());
        EXPECT(0x86, gbc.c());
        EXPECT(0x8b, gbc.d());
        EXPECT(0xd0, gbc.e());
        EXPECT(0x37, gbc.h());
        EXPECT(0x94, gbc.l());
        EXPECT(0xcea0, gbc.sp());
        EXPECT(0x6c2f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 00C1
        gbc.setState(0x83fb, 0xe7c9, 0x60e0, 0x5fa2, 0x4837, 0xc70c, 0x1, 0x0);
        gbc.writeMem(0x83fb, { 0xdc, 0x67, 0x93 });
        gbc.step();
        EXPECT(0x60, gbc.a());
        EXPECT(0x5f, gbc.b());
        EXPECT(0xa2, gbc.c());
        EXPECT(0x48, gbc.d());
        EXPECT(0x37, gbc.e());
        EXPECT(0xc7, gbc.h());
        EXPECT(0xc, gbc.l());
        EXPECT(0xe7c9, gbc.sp());
        EXPECT(0x83fe, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0x83fb));
        EXPECT(0x67, gbc.readMem(0x83fc));
        EXPECT(0x93, gbc.readMem(0x83fd));
        // DC 00C2
        gbc.setState(0xb5dc, 0x9710, 0xa290, 0x2945, 0x97c8, 0x7348, 0x0, 0x1);
        gbc.writeMem(0x970e, { 0x0, 0x0 });
        gbc.writeMem(0xb5dc, { 0xdc, 0x8c, 0xeb });
        gbc.step();
        EXPECT(0xa2, gbc.a());
        EXPECT(0x29, gbc.b());
        EXPECT(0x45, gbc.c());
        EXPECT(0x97, gbc.d());
        EXPECT(0xc8, gbc.e());
        EXPECT(0x73, gbc.h());
        EXPECT(0x48, gbc.l());
        EXPECT(0x970e, gbc.sp());
        EXPECT(0xeb8c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdf, gbc.readMem(0x970e));
        EXPECT(0xb5, gbc.readMem(0x970f));
        EXPECT(0xdc, gbc.readMem(0xb5dc));
        EXPECT(0x8c, gbc.readMem(0xb5dd));
        EXPECT(0xeb, gbc.readMem(0xb5de));
        // DC 00C3
        gbc.setState(0xdbf5, 0x28b8, 0xcb80, 0x1e4a, 0xf8f3, 0x7e42, 0x0, 0x1);
        gbc.writeMem(0xdbf5, { 0xdc, 0x58, 0xce });
        gbc.step();
        EXPECT(0xcb, gbc.a());
        EXPECT(0x1e, gbc.b());
        EXPECT(0x4a, gbc.c());
        EXPECT(0xf8, gbc.d());
        EXPECT(0xf3, gbc.e());
        EXPECT(0x7e, gbc.h());
        EXPECT(0x42, gbc.l());
        EXPECT(0x28b8, gbc.sp());
        EXPECT(0xdbf8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xdbf5));
        EXPECT(0x58, gbc.readMem(0xdbf6));
        EXPECT(0xce, gbc.readMem(0xdbf7));
        // DC 00C4
        gbc.setState(0xb3bd, 0x2333, 0xbca0, 0x81fc, 0x8711, 0x3823, 0x1, 0x0);
        gbc.writeMem(0xb3bd, { 0xdc, 0xf0, 0x4f });
        gbc.step();
        EXPECT(0xbc, gbc.a());
        EXPECT(0x81, gbc.b());
        EXPECT(0xfc, gbc.c());
        EXPECT(0x87, gbc.d());
        EXPECT(0x11, gbc.e());
        EXPECT(0x38, gbc.h());
        EXPECT(0x23, gbc.l());
        EXPECT(0x2333, gbc.sp());
        EXPECT(0xb3c0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xb3bd));
        EXPECT(0xf0, gbc.readMem(0xb3be));
        EXPECT(0x4f, gbc.readMem(0xb3bf));
        // DC 00C5
        gbc.setState(0x8532, 0xc557, 0x9320, 0xa1e1, 0x1459, 0xf49d, 0x0, 0x0);
        gbc.writeMem(0x8532, { 0xdc, 0x23, 0x38 });
        gbc.step();
        EXPECT(0x93, gbc.a());
        EXPECT(0xa1, gbc.b());
        EXPECT(0xe1, gbc.c());
        EXPECT(0x14, gbc.d());
        EXPECT(0x59, gbc.e());
        EXPECT(0xf4, gbc.h());
        EXPECT(0x9d, gbc.l());
        EXPECT(0xc557, gbc.sp());
        EXPECT(0x8535, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0x8532));
        EXPECT(0x23, gbc.readMem(0x8533));
        EXPECT(0x38, gbc.readMem(0x8534));
        // DC 00C6
        gbc.setState(0xa921, 0x9677, 0xfa0, 0x6450, 0xf72b, 0x6b8c, 0x0, 0x0);
        gbc.writeMem(0xa921, { 0xdc, 0x3b, 0xd3 });
        gbc.step();
        EXPECT(0xf, gbc.a());
        EXPECT(0x64, gbc.b());
        EXPECT(0x50, gbc.c());
        EXPECT(0xf7, gbc.d());
        EXPECT(0x2b, gbc.e());
        EXPECT(0x6b, gbc.h());
        EXPECT(0x8c, gbc.l());
        EXPECT(0x9677, gbc.sp());
        EXPECT(0xa924, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xa921));
        EXPECT(0x3b, gbc.readMem(0xa922));
        EXPECT(0xd3, gbc.readMem(0xa923));
        // DC 00C7
        gbc.setState(0xec97, 0x2827, 0xbc0, 0x1b93, 0xd65, 0x7fbc, 0x1, 0x0);
        gbc.writeMem(0xec97, { 0xdc, 0xa8, 0xf9 });
        gbc.step();
        EXPECT(0xb, gbc.a());
        EXPECT(0x1b, gbc.b());
        EXPECT(0x93, gbc.c());
        EXPECT(0xd, gbc.d());
        EXPECT(0x65, gbc.e());
        EXPECT(0x7f, gbc.h());
        EXPECT(0xbc, gbc.l());
        EXPECT(0x2827, gbc.sp());
        EXPECT(0xec9a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xec97));
        EXPECT(0xa8, gbc.readMem(0xec98));
        EXPECT(0xf9, gbc.readMem(0xec99));
        // DC 00C8
        gbc.setState(0x565a, 0x3299, 0xb0e0, 0xa05b, 0x6628, 0xd1f6, 0x0, 0x1);
        gbc.writeMem(0x565a, { 0xdc, 0xf0, 0x39 });
        gbc.step();
        EXPECT(0xb0, gbc.a());
        EXPECT(0xa0, gbc.b());
        EXPECT(0x5b, gbc.c());
        EXPECT(0x66, gbc.d());
        EXPECT(0x28, gbc.e());
        EXPECT(0xd1, gbc.h());
        EXPECT(0xf6, gbc.l());
        EXPECT(0x3299, gbc.sp());
        EXPECT(0x565d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 00C9
        gbc.setState(0xb2af, 0xc757, 0xd110, 0xea11, 0x3e79, 0x162d, 0x0, 0x0);
        gbc.writeMem(0xb2af, { 0xdc, 0x22, 0xc7 });
        gbc.writeMem(0xc755, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xd1, gbc.a());
        EXPECT(0xea, gbc.b());
        EXPECT(0x11, gbc.c());
        EXPECT(0x3e, gbc.d());
        EXPECT(0x79, gbc.e());
        EXPECT(0x16, gbc.h());
        EXPECT(0x2d, gbc.l());
        EXPECT(0xc755, gbc.sp());
        EXPECT(0xc722, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xb2af));
        EXPECT(0x22, gbc.readMem(0xb2b0));
        EXPECT(0xc7, gbc.readMem(0xb2b1));
        EXPECT(0xb2, gbc.readMem(0xc755));
        EXPECT(0xb2, gbc.readMem(0xc756));
        // DC 00CA
        gbc.setState(0x8291, 0xa99d, 0x6ae0, 0xb462, 0xcaeb, 0x7993, 0x0, 0x0);
        gbc.writeMem(0x8291, { 0xdc, 0x5c, 0xe7 });
        gbc.step();
        EXPECT(0x6a, gbc.a());
        EXPECT(0xb4, gbc.b());
        EXPECT(0x62, gbc.c());
        EXPECT(0xca, gbc.d());
        EXPECT(0xeb, gbc.e());
        EXPECT(0x79, gbc.h());
        EXPECT(0x93, gbc.l());
        EXPECT(0xa99d, gbc.sp());
        EXPECT(0x8294, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0x8291));
        EXPECT(0x5c, gbc.readMem(0x8292));
        EXPECT(0xe7, gbc.readMem(0x8293));
        // DC 00CD
        gbc.setState(0x92f, 0xa0ec, 0x37a0, 0x35e5, 0x281f, 0x71d6, 0x1, 0x0);
        gbc.writeMem(0x92f, { 0xdc, 0x54, 0xb2 });
        gbc.step();
        EXPECT(0x37, gbc.a());
        EXPECT(0x35, gbc.b());
        EXPECT(0xe5, gbc.c());
        EXPECT(0x28, gbc.d());
        EXPECT(0x1f, gbc.e());
        EXPECT(0x71, gbc.h());
        EXPECT(0xd6, gbc.l());
        EXPECT(0xa0ec, gbc.sp());
        EXPECT(0x932, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 00CF
        gbc.setState(0x60ac, 0xb384, 0x9550, 0xde51, 0x277e, 0xd693, 0x0, 0x0);
        gbc.writeMem(0x60ac, { 0xdc, 0x82, 0x96 });
        gbc.writeMem(0xb382, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x95, gbc.a());
        EXPECT(0xde, gbc.b());
        EXPECT(0x51, gbc.c());
        EXPECT(0x27, gbc.d());
        EXPECT(0x7e, gbc.e());
        EXPECT(0xd6, gbc.h());
        EXPECT(0x93, gbc.l());
        EXPECT(0xb382, gbc.sp());
        EXPECT(0x9682, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xaf, gbc.readMem(0xb382));
        EXPECT(0x60, gbc.readMem(0xb383));
        // DC 00D1
        gbc.setState(0xcc24, 0xac59, 0xd0f0, 0x33c0, 0x53b4, 0x2086, 0x0, 0x0);
        gbc.writeMem(0xac57, { 0x0, 0x0 });
        gbc.writeMem(0xcc24, { 0xdc, 0xc7, 0x4c });
        gbc.step();
        EXPECT(0xd0, gbc.a());
        EXPECT(0x33, gbc.b());
        EXPECT(0xc0, gbc.c());
        EXPECT(0x53, gbc.d());
        EXPECT(0xb4, gbc.e());
        EXPECT(0x20, gbc.h());
        EXPECT(0x86, gbc.l());
        EXPECT(0xac57, gbc.sp());
        EXPECT(0x4cc7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x27, gbc.readMem(0xac57));
        EXPECT(0xcc, gbc.readMem(0xac58));
        EXPECT(0xdc, gbc.readMem(0xcc24));
        EXPECT(0xc7, gbc.readMem(0xcc25));
        EXPECT(0x4c, gbc.readMem(0xcc26));
        // DC 00D8
        gbc.setState(0x909a, 0x2ad2, 0x8ea0, 0x502c, 0xcd30, 0x50b1, 0x0, 0x0);
        gbc.writeMem(0x909a, { 0xdc, 0x29, 0xfb });
        gbc.step();
        EXPECT(0x8e, gbc.a());
        EXPECT(0x50, gbc.b());
        EXPECT(0x2c, gbc.c());
        EXPECT(0xcd, gbc.d());
        EXPECT(0x30, gbc.e());
        EXPECT(0x50, gbc.h());
        EXPECT(0xb1, gbc.l());
        EXPECT(0x2ad2, gbc.sp());
        EXPECT(0x909d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0x909a));
        EXPECT(0x29, gbc.readMem(0x909b));
        EXPECT(0xfb, gbc.readMem(0x909c));
        // DC 00D9
        gbc.setState(0x38af, 0xa80f, 0x2020, 0x2fb7, 0x902, 0x621b, 0x0, 0x1);
        gbc.writeMem(0x38af, { 0xdc, 0x57, 0xbd });
        gbc.step();
        EXPECT(0x20, gbc.a());
        EXPECT(0x2f, gbc.b());
        EXPECT(0xb7, gbc.c());
        EXPECT(0x9, gbc.d());
        EXPECT(0x2, gbc.e());
        EXPECT(0x62, gbc.h());
        EXPECT(0x1b, gbc.l());
        EXPECT(0xa80f, gbc.sp());
        EXPECT(0x38b2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 00DA
        gbc.setState(0x5383, 0x4c98, 0xf420, 0xd235, 0xba0f, 0x8474, 0x1, 0x0);
        gbc.writeMem(0x5383, { 0xdc, 0x87, 0x55 });
        gbc.step();
        EXPECT(0xf4, gbc.a());
        EXPECT(0xd2, gbc.b());
        EXPECT(0x35, gbc.c());
        EXPECT(0xba, gbc.d());
        EXPECT(0xf, gbc.e());
        EXPECT(0x84, gbc.h());
        EXPECT(0x74, gbc.l());
        EXPECT(0x4c98, gbc.sp());
        EXPECT(0x5386, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 00DD
        gbc.setState(0xa9cf, 0xe91a, 0x9300, 0xb47e, 0xd8ad, 0xb74b, 0x1, 0x0);
        gbc.writeMem(0xa9cf, { 0xdc, 0x45, 0x36 });
        gbc.step();
        EXPECT(0x93, gbc.a());
        EXPECT(0xb4, gbc.b());
        EXPECT(0x7e, gbc.c());
        EXPECT(0xd8, gbc.d());
        EXPECT(0xad, gbc.e());
        EXPECT(0xb7, gbc.h());
        EXPECT(0x4b, gbc.l());
        EXPECT(0xe91a, gbc.sp());
        EXPECT(0xa9d2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xa9cf));
        EXPECT(0x45, gbc.readMem(0xa9d0));
        EXPECT(0x36, gbc.readMem(0xa9d1));
        // DC 00DE
        gbc.setState(0x2068, 0xe184, 0x4730, 0xa0b1, 0x8dd2, 0x3878, 0x0, 0x1);
        gbc.writeMem(0x2068, { 0xdc, 0xec, 0x43 });
        gbc.writeMem(0xe182, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x47, gbc.a());
        EXPECT(0xa0, gbc.b());
        EXPECT(0xb1, gbc.c());
        EXPECT(0x8d, gbc.d());
        EXPECT(0xd2, gbc.e());
        EXPECT(0x38, gbc.h());
        EXPECT(0x78, gbc.l());
        EXPECT(0xe182, gbc.sp());
        EXPECT(0x43ec, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x6b, gbc.readMem(0xe182));
        EXPECT(0x20, gbc.readMem(0xe183));
        // DC 00DF
        gbc.setState(0x746, 0x815c, 0xd30, 0xc5cb, 0xbe77, 0x98cf, 0x1, 0x1);
        gbc.writeMem(0x746, { 0xdc, 0x54, 0xba });
        gbc.writeMem(0x815a, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xd, gbc.a());
        EXPECT(0xc5, gbc.b());
        EXPECT(0xcb, gbc.c());
        EXPECT(0xbe, gbc.d());
        EXPECT(0x77, gbc.e());
        EXPECT(0x98, gbc.h());
        EXPECT(0xcf, gbc.l());
        EXPECT(0x815a, gbc.sp());
        EXPECT(0xba54, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x49, gbc.readMem(0x815a));
        EXPECT(0x7, gbc.readMem(0x815b));
        // DC 00E0
        gbc.setState(0x587f, 0x9433, 0xaa10, 0x6d63, 0xf1cb, 0xeb63, 0x1, 0x1);
        gbc.writeMem(0x587f, { 0xdc, 0xaf, 0xf4 });
        gbc.writeMem(0x9431, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xaa, gbc.a());
        EXPECT(0x6d, gbc.b());
        EXPECT(0x63, gbc.c());
        EXPECT(0xf1, gbc.d());
        EXPECT(0xcb, gbc.e());
        EXPECT(0xeb, gbc.h());
        EXPECT(0x63, gbc.l());
        EXPECT(0x9431, gbc.sp());
        EXPECT(0xf4af, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x82, gbc.readMem(0x9431));
        EXPECT(0x58, gbc.readMem(0x9432));
        // DC 00E2
        gbc.setState(0x167f, 0x1c2b, 0xbcc0, 0xd317, 0x2408, 0x8cb, 0x1, 0x1);
        gbc.writeMem(0x167f, { 0xdc, 0x93, 0x44 });
        gbc.step();
        EXPECT(0xbc, gbc.a());
        EXPECT(0xd3, gbc.b());
        EXPECT(0x17, gbc.c());
        EXPECT(0x24, gbc.d());
        EXPECT(0x8, gbc.e());
        EXPECT(0x8, gbc.h());
        EXPECT(0xcb, gbc.l());
        EXPECT(0x1c2b, gbc.sp());
        EXPECT(0x1682, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 00E3
        gbc.setState(0x96a6, 0xdf8f, 0xae70, 0xb132, 0xd3f4, 0x436a, 0x1, 0x1);
        gbc.writeMem(0x96a6, { 0xdc, 0xc4, 0x91 });
        gbc.writeMem(0xdf8d, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xae, gbc.a());
        EXPECT(0xb1, gbc.b());
        EXPECT(0x32, gbc.c());
        EXPECT(0xd3, gbc.d());
        EXPECT(0xf4, gbc.e());
        EXPECT(0x43, gbc.h());
        EXPECT(0x6a, gbc.l());
        EXPECT(0xdf8d, gbc.sp());
        EXPECT(0x91c4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0x96a6));
        EXPECT(0xc4, gbc.readMem(0x96a7));
        EXPECT(0x91, gbc.readMem(0x96a8));
        EXPECT(0xa9, gbc.readMem(0xdf8d));
        EXPECT(0x96, gbc.readMem(0xdf8e));
        // DC 00E4
        gbc.setState(0xa48e, 0xc6c7, 0x6000, 0xd5b2, 0x648d, 0xb7a, 0x0, 0x1);
        gbc.writeMem(0xa48e, { 0xdc, 0x12, 0xd2 });
        gbc.step();
        EXPECT(0x60, gbc.a());
        EXPECT(0xd5, gbc.b());
        EXPECT(0xb2, gbc.c());
        EXPECT(0x64, gbc.d());
        EXPECT(0x8d, gbc.e());
        EXPECT(0xb, gbc.h());
        EXPECT(0x7a, gbc.l());
        EXPECT(0xc6c7, gbc.sp());
        EXPECT(0xa491, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xa48e));
        EXPECT(0x12, gbc.readMem(0xa48f));
        EXPECT(0xd2, gbc.readMem(0xa490));
        // DC 00E5
        gbc.setState(0x4843, 0x3a31, 0x21e0, 0xe8f, 0x96b, 0x7e30, 0x1, 0x0);
        gbc.writeMem(0x4843, { 0xdc, 0x4, 0xd3 });
        gbc.step();
        EXPECT(0x21, gbc.a());
        EXPECT(0xe, gbc.b());
        EXPECT(0x8f, gbc.c());
        EXPECT(0x9, gbc.d());
        EXPECT(0x6b, gbc.e());
        EXPECT(0x7e, gbc.h());
        EXPECT(0x30, gbc.l());
        EXPECT(0x3a31, gbc.sp());
        EXPECT(0x4846, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 00E6
        gbc.setState(0x662a, 0x63b5, 0x9260, 0xd8fc, 0xdcc1, 0xf58e, 0x1, 0x0);
        gbc.writeMem(0x662a, { 0xdc, 0x75, 0x1b });
        gbc.step();
        EXPECT(0x92, gbc.a());
        EXPECT(0xd8, gbc.b());
        EXPECT(0xfc, gbc.c());
        EXPECT(0xdc, gbc.d());
        EXPECT(0xc1, gbc.e());
        EXPECT(0xf5, gbc.h());
        EXPECT(0x8e, gbc.l());
        EXPECT(0x63b5, gbc.sp());
        EXPECT(0x662d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 00E7
        gbc.setState(0x67d0, 0xd914, 0x4f60, 0x7e60, 0xfbb4, 0xc68e, 0x0, 0x1);
        gbc.writeMem(0x67d0, { 0xdc, 0xba, 0xf4 });
        gbc.step();
        EXPECT(0x4f, gbc.a());
        EXPECT(0x7e, gbc.b());
        EXPECT(0x60, gbc.c());
        EXPECT(0xfb, gbc.d());
        EXPECT(0xb4, gbc.e());
        EXPECT(0xc6, gbc.h());
        EXPECT(0x8e, gbc.l());
        EXPECT(0xd914, gbc.sp());
        EXPECT(0x67d3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 00E8
        gbc.setState(0x4eec, 0xb249, 0x9280, 0xff10, 0x5e1b, 0x9ec5, 0x0, 0x0);
        gbc.writeMem(0x4eec, { 0xdc, 0xa4, 0x30 });
        gbc.step();
        EXPECT(0x92, gbc.a());
        EXPECT(0xff, gbc.b());
        EXPECT(0x10, gbc.c());
        EXPECT(0x5e, gbc.d());
        EXPECT(0x1b, gbc.e());
        EXPECT(0x9e, gbc.h());
        EXPECT(0xc5, gbc.l());
        EXPECT(0xb249, gbc.sp());
        EXPECT(0x4eef, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 00E9
        gbc.setState(0x10f2, 0xe8e0, 0xd9d0, 0xcf27, 0x8935, 0x27f9, 0x0, 0x0);
        gbc.writeMem(0x10f2, { 0xdc, 0xfc, 0x71 });
        gbc.writeMem(0xe8de, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xd9, gbc.a());
        EXPECT(0xcf, gbc.b());
        EXPECT(0x27, gbc.c());
        EXPECT(0x89, gbc.d());
        EXPECT(0x35, gbc.e());
        EXPECT(0x27, gbc.h());
        EXPECT(0xf9, gbc.l());
        EXPECT(0xe8de, gbc.sp());
        EXPECT(0x71fc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xf5, gbc.readMem(0xe8de));
        EXPECT(0x10, gbc.readMem(0xe8df));
        // DC 00EA
        gbc.setState(0x3d0f, 0xb848, 0xe930, 0x5b5f, 0x1601, 0x3148, 0x0, 0x0);
        gbc.writeMem(0x3d0f, { 0xdc, 0x37, 0xd });
        gbc.writeMem(0xb846, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xe9, gbc.a());
        EXPECT(0x5b, gbc.b());
        EXPECT(0x5f, gbc.c());
        EXPECT(0x16, gbc.d());
        EXPECT(0x1, gbc.e());
        EXPECT(0x31, gbc.h());
        EXPECT(0x48, gbc.l());
        EXPECT(0xb846, gbc.sp());
        EXPECT(0xd37, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x12, gbc.readMem(0xb846));
        EXPECT(0x3d, gbc.readMem(0xb847));
        // DC 00EC
        gbc.setState(0x7c22, 0x7e63, 0xf4a0, 0xe23e, 0x55b1, 0xd82a, 0x1, 0x0);
        gbc.writeMem(0x7c22, { 0xdc, 0xe9, 0x63 });
        gbc.step();
        EXPECT(0xf4, gbc.a());
        EXPECT(0xe2, gbc.b());
        EXPECT(0x3e, gbc.c());
        EXPECT(0x55, gbc.d());
        EXPECT(0xb1, gbc.e());
        EXPECT(0xd8, gbc.h());
        EXPECT(0x2a, gbc.l());
        EXPECT(0x7e63, gbc.sp());
        EXPECT(0x7c25, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 00ED
        gbc.setState(0x1136, 0x1852, 0xdb20, 0xb4c3, 0x9610, 0xa2d8, 0x1, 0x0);
        gbc.writeMem(0x1136, { 0xdc, 0xd1, 0xc4 });
        gbc.step();
        EXPECT(0xdb, gbc.a());
        EXPECT(0xb4, gbc.b());
        EXPECT(0xc3, gbc.c());
        EXPECT(0x96, gbc.d());
        EXPECT(0x10, gbc.e());
        EXPECT(0xa2, gbc.h());
        EXPECT(0xd8, gbc.l());
        EXPECT(0x1852, gbc.sp());
        EXPECT(0x1139, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 00EE
        gbc.setState(0xaf5f, 0xe3c2, 0xf4d0, 0xa75e, 0xef72, 0x7d0a, 0x0, 0x1);
        gbc.writeMem(0xaf5f, { 0xdc, 0x1b, 0xcd });
        gbc.writeMem(0xe3c0, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xf4, gbc.a());
        EXPECT(0xa7, gbc.b());
        EXPECT(0x5e, gbc.c());
        EXPECT(0xef, gbc.d());
        EXPECT(0x72, gbc.e());
        EXPECT(0x7d, gbc.h());
        EXPECT(0xa, gbc.l());
        EXPECT(0xe3c0, gbc.sp());
        EXPECT(0xcd1b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xaf5f));
        EXPECT(0x1b, gbc.readMem(0xaf60));
        EXPECT(0xcd, gbc.readMem(0xaf61));
        EXPECT(0x62, gbc.readMem(0xe3c0));
        EXPECT(0xaf, gbc.readMem(0xe3c1));
        // DC 00EF
        gbc.setState(0xb21b, 0xc99a, 0x6f00, 0x7128, 0x9d5c, 0x689c, 0x0, 0x0);
        gbc.writeMem(0xb21b, { 0xdc, 0x43, 0xb8 });
        gbc.step();
        EXPECT(0x6f, gbc.a());
        EXPECT(0x71, gbc.b());
        EXPECT(0x28, gbc.c());
        EXPECT(0x9d, gbc.d());
        EXPECT(0x5c, gbc.e());
        EXPECT(0x68, gbc.h());
        EXPECT(0x9c, gbc.l());
        EXPECT(0xc99a, gbc.sp());
        EXPECT(0xb21e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xb21b));
        EXPECT(0x43, gbc.readMem(0xb21c));
        EXPECT(0xb8, gbc.readMem(0xb21d));
        // DC 00F0
        gbc.setState(0x224a, 0x1da6, 0x2c40, 0xc7f4, 0x5902, 0x2adb, 0x1, 0x1);
        gbc.writeMem(0x224a, { 0xdc, 0x42, 0x87 });
        gbc.step();
        EXPECT(0x2c, gbc.a());
        EXPECT(0xc7, gbc.b());
        EXPECT(0xf4, gbc.c());
        EXPECT(0x59, gbc.d());
        EXPECT(0x2, gbc.e());
        EXPECT(0x2a, gbc.h());
        EXPECT(0xdb, gbc.l());
        EXPECT(0x1da6, gbc.sp());
        EXPECT(0x224d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 00F1
        gbc.setState(0x718, 0x31da, 0x4e40, 0x7479, 0xca30, 0xf8e5, 0x1, 0x0);
        gbc.writeMem(0x718, { 0xdc, 0x13, 0x1f });
        gbc.step();
        EXPECT(0x4e, gbc.a());
        EXPECT(0x74, gbc.b());
        EXPECT(0x79, gbc.c());
        EXPECT(0xca, gbc.d());
        EXPECT(0x30, gbc.e());
        EXPECT(0xf8, gbc.h());
        EXPECT(0xe5, gbc.l());
        EXPECT(0x31da, gbc.sp());
        EXPECT(0x71b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 00F2
        gbc.setState(0xde54, 0xf0cc, 0x9500, 0x90ca, 0x3609, 0x9668, 0x0, 0x1);
        gbc.writeMem(0xde54, { 0xdc, 0xd, 0x25 });
        gbc.step();
        EXPECT(0x95, gbc.a());
        EXPECT(0x90, gbc.b());
        EXPECT(0xca, gbc.c());
        EXPECT(0x36, gbc.d());
        EXPECT(0x9, gbc.e());
        EXPECT(0x96, gbc.h());
        EXPECT(0x68, gbc.l());
        EXPECT(0xf0cc, gbc.sp());
        EXPECT(0xde57, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xde54));
        EXPECT(0xd, gbc.readMem(0xde55));
        EXPECT(0x25, gbc.readMem(0xde56));
        // DC 00F3
        gbc.setState(0x9e6f, 0x8ee9, 0x3c80, 0x2228, 0xa341, 0x6f8e, 0x0, 0x1);
        gbc.writeMem(0x9e6f, { 0xdc, 0xc3, 0x8f });
        gbc.step();
        EXPECT(0x3c, gbc.a());
        EXPECT(0x22, gbc.b());
        EXPECT(0x28, gbc.c());
        EXPECT(0xa3, gbc.d());
        EXPECT(0x41, gbc.e());
        EXPECT(0x6f, gbc.h());
        EXPECT(0x8e, gbc.l());
        EXPECT(0x8ee9, gbc.sp());
        EXPECT(0x9e72, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0x9e6f));
        EXPECT(0xc3, gbc.readMem(0x9e70));
        EXPECT(0x8f, gbc.readMem(0x9e71));
        // DC 00F4
        gbc.setState(0x45fb, 0x4a60, 0x29e0, 0x43bc, 0x42d6, 0xf442, 0x0, 0x0);
        gbc.writeMem(0x45fb, { 0xdc, 0xd3, 0x82 });
        gbc.step();
        EXPECT(0x29, gbc.a());
        EXPECT(0x43, gbc.b());
        EXPECT(0xbc, gbc.c());
        EXPECT(0x42, gbc.d());
        EXPECT(0xd6, gbc.e());
        EXPECT(0xf4, gbc.h());
        EXPECT(0x42, gbc.l());
        EXPECT(0x4a60, gbc.sp());
        EXPECT(0x45fe, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 00F5
        gbc.setState(0x1b37, 0xc4b2, 0xf390, 0x77e, 0x71dc, 0x6b97, 0x0, 0x0);
        gbc.writeMem(0x1b37, { 0xdc, 0xf2, 0xd1 });
        gbc.writeMem(0xc4b0, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xf3, gbc.a());
        EXPECT(0x7, gbc.b());
        EXPECT(0x7e, gbc.c());
        EXPECT(0x71, gbc.d());
        EXPECT(0xdc, gbc.e());
        EXPECT(0x6b, gbc.h());
        EXPECT(0x97, gbc.l());
        EXPECT(0xc4b0, gbc.sp());
        EXPECT(0xd1f2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x3a, gbc.readMem(0xc4b0));
        EXPECT(0x1b, gbc.readMem(0xc4b1));
        // DC 00F6
        gbc.setState(0xd263, 0x7253, 0x1140, 0xb9e4, 0xebf3, 0x5903, 0x0, 0x1);
        gbc.writeMem(0xd263, { 0xdc, 0xe, 0x90 });
        gbc.step();
        EXPECT(0x11, gbc.a());
        EXPECT(0xb9, gbc.b());
        EXPECT(0xe4, gbc.c());
        EXPECT(0xeb, gbc.d());
        EXPECT(0xf3, gbc.e());
        EXPECT(0x59, gbc.h());
        EXPECT(0x3, gbc.l());
        EXPECT(0x7253, gbc.sp());
        EXPECT(0xd266, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xd263));
        EXPECT(0xe, gbc.readMem(0xd264));
        EXPECT(0x90, gbc.readMem(0xd265));
        // DC 00F7
        gbc.setState(0xe2cb, 0x876f, 0x6710, 0xd4e0, 0x2506, 0xaaf9, 0x0, 0x1);
        gbc.writeMem(0x876d, { 0x0, 0x0 });
        gbc.writeMem(0xe2cb, { 0xdc, 0xe0, 0x75 });
        gbc.step();
        EXPECT(0x67, gbc.a());
        EXPECT(0xd4, gbc.b());
        EXPECT(0xe0, gbc.c());
        EXPECT(0x25, gbc.d());
        EXPECT(0x6, gbc.e());
        EXPECT(0xaa, gbc.h());
        EXPECT(0xf9, gbc.l());
        EXPECT(0x876d, gbc.sp());
        EXPECT(0x75e0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xce, gbc.readMem(0x876d));
        EXPECT(0xe2, gbc.readMem(0x876e));
        EXPECT(0xdc, gbc.readMem(0xe2cb));
        EXPECT(0xe0, gbc.readMem(0xe2cc));
        EXPECT(0x75, gbc.readMem(0xe2cd));
        // DC 00F8
        gbc.setState(0xa8e2, 0x8c72, 0x5500, 0x7c35, 0xdec, 0xcb39, 0x1, 0x1);
        gbc.writeMem(0xa8e2, { 0xdc, 0x12, 0xc8 });
        gbc.step();
        EXPECT(0x55, gbc.a());
        EXPECT(0x7c, gbc.b());
        EXPECT(0x35, gbc.c());
        EXPECT(0xd, gbc.d());
        EXPECT(0xec, gbc.e());
        EXPECT(0xcb, gbc.h());
        EXPECT(0x39, gbc.l());
        EXPECT(0x8c72, gbc.sp());
        EXPECT(0xa8e5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xa8e2));
        EXPECT(0x12, gbc.readMem(0xa8e3));
        EXPECT(0xc8, gbc.readMem(0xa8e4));
        // DC 00FB
        gbc.setState(0x19b8, 0x98bf, 0x7fe0, 0x96ff, 0xf8d1, 0x7bbe, 0x1, 0x1);
        gbc.writeMem(0x19b8, { 0xdc, 0xd, 0xcd });
        gbc.step();
        EXPECT(0x7f, gbc.a());
        EXPECT(0x96, gbc.b());
        EXPECT(0xff, gbc.c());
        EXPECT(0xf8, gbc.d());
        EXPECT(0xd1, gbc.e());
        EXPECT(0x7b, gbc.h());
        EXPECT(0xbe, gbc.l());
        EXPECT(0x98bf, gbc.sp());
        EXPECT(0x19bb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 00FC
        gbc.setState(0x13b2, 0xd833, 0xeb10, 0xb477, 0xde64, 0x1d3e, 0x1, 0x0);
        gbc.writeMem(0x13b2, { 0xdc, 0xc7, 0xe6 });
        gbc.writeMem(0xd831, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xeb, gbc.a());
        EXPECT(0xb4, gbc.b());
        EXPECT(0x77, gbc.c());
        EXPECT(0xde, gbc.d());
        EXPECT(0x64, gbc.e());
        EXPECT(0x1d, gbc.h());
        EXPECT(0x3e, gbc.l());
        EXPECT(0xd831, gbc.sp());
        EXPECT(0xe6c7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xb5, gbc.readMem(0xd831));
        EXPECT(0x13, gbc.readMem(0xd832));
        // DC 00FF
        gbc.setState(0xc2d1, 0xf539, 0xbdc0, 0x63b6, 0x3ef3, 0x2077, 0x0, 0x0);
        gbc.writeMem(0xc2d1, { 0xdc, 0x99, 0x91 });
        gbc.step();
        EXPECT(0xbd, gbc.a());
        EXPECT(0x63, gbc.b());
        EXPECT(0xb6, gbc.c());
        EXPECT(0x3e, gbc.d());
        EXPECT(0xf3, gbc.e());
        EXPECT(0x20, gbc.h());
        EXPECT(0x77, gbc.l());
        EXPECT(0xf539, gbc.sp());
        EXPECT(0xc2d4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xc2d1));
        EXPECT(0x99, gbc.readMem(0xc2d2));
        EXPECT(0x91, gbc.readMem(0xc2d3));
        // DC 0100
        gbc.setState(0xacf3, 0x1af2, 0xe100, 0x7943, 0x1a0d, 0x3486, 0x0, 0x1);
        gbc.writeMem(0xacf3, { 0xdc, 0x82, 0x95 });
        gbc.step();
        EXPECT(0xe1, gbc.a());
        EXPECT(0x79, gbc.b());
        EXPECT(0x43, gbc.c());
        EXPECT(0x1a, gbc.d());
        EXPECT(0xd, gbc.e());
        EXPECT(0x34, gbc.h());
        EXPECT(0x86, gbc.l());
        EXPECT(0x1af2, gbc.sp());
        EXPECT(0xacf6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xacf3));
        EXPECT(0x82, gbc.readMem(0xacf4));
        EXPECT(0x95, gbc.readMem(0xacf5));
        // DC 0102
        gbc.setState(0xb694, 0xa964, 0xf4c0, 0xeb19, 0x7e6, 0xc8c4, 0x0, 0x1);
        gbc.writeMem(0xb694, { 0xdc, 0xb6, 0x14 });
        gbc.step();
        EXPECT(0xf4, gbc.a());
        EXPECT(0xeb, gbc.b());
        EXPECT(0x19, gbc.c());
        EXPECT(0x7, gbc.d());
        EXPECT(0xe6, gbc.e());
        EXPECT(0xc8, gbc.h());
        EXPECT(0xc4, gbc.l());
        EXPECT(0xa964, gbc.sp());
        EXPECT(0xb697, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xb694));
        EXPECT(0xb6, gbc.readMem(0xb695));
        EXPECT(0x14, gbc.readMem(0xb696));
        // DC 0103
        gbc.setState(0x29b7, 0x86d6, 0xd290, 0x7248, 0xb2b5, 0x1c3b, 0x0, 0x0);
        gbc.writeMem(0x29b7, { 0xdc, 0x70, 0x5c });
        gbc.writeMem(0x86d4, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xd2, gbc.a());
        EXPECT(0x72, gbc.b());
        EXPECT(0x48, gbc.c());
        EXPECT(0xb2, gbc.d());
        EXPECT(0xb5, gbc.e());
        EXPECT(0x1c, gbc.h());
        EXPECT(0x3b, gbc.l());
        EXPECT(0x86d4, gbc.sp());
        EXPECT(0x5c70, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xba, gbc.readMem(0x86d4));
        EXPECT(0x29, gbc.readMem(0x86d5));
        // DC 0104
        gbc.setState(0xcbe8, 0xdcb1, 0x1870, 0x3c90, 0x969e, 0x41d3, 0x0, 0x1);
        gbc.writeMem(0xcbe8, { 0xdc, 0x8e, 0x9e });
        gbc.writeMem(0xdcaf, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x18, gbc.a());
        EXPECT(0x3c, gbc.b());
        EXPECT(0x90, gbc.c());
        EXPECT(0x96, gbc.d());
        EXPECT(0x9e, gbc.e());
        EXPECT(0x41, gbc.h());
        EXPECT(0xd3, gbc.l());
        EXPECT(0xdcaf, gbc.sp());
        EXPECT(0x9e8e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xcbe8));
        EXPECT(0x8e, gbc.readMem(0xcbe9));
        EXPECT(0x9e, gbc.readMem(0xcbea));
        EXPECT(0xeb, gbc.readMem(0xdcaf));
        EXPECT(0xcb, gbc.readMem(0xdcb0));
        // DC 0105
        gbc.setState(0x2ce5, 0x3a31, 0xdec0, 0xe082, 0x176, 0x4212, 0x1, 0x1);
        gbc.writeMem(0x2ce5, { 0xdc, 0xf6, 0xe1 });
        gbc.step();
        EXPECT(0xde, gbc.a());
        EXPECT(0xe0, gbc.b());
        EXPECT(0x82, gbc.c());
        EXPECT(0x1, gbc.d());
        EXPECT(0x76, gbc.e());
        EXPECT(0x42, gbc.h());
        EXPECT(0x12, gbc.l());
        EXPECT(0x3a31, gbc.sp());
        EXPECT(0x2ce8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 0107
        gbc.setState(0xa47c, 0xe774, 0xf050, 0x9b20, 0xbf5a, 0x1f36, 0x1, 0x0);
        gbc.writeMem(0xa47c, { 0xdc, 0x86, 0x2d });
        gbc.writeMem(0xe772, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xf0, gbc.a());
        EXPECT(0x9b, gbc.b());
        EXPECT(0x20, gbc.c());
        EXPECT(0xbf, gbc.d());
        EXPECT(0x5a, gbc.e());
        EXPECT(0x1f, gbc.h());
        EXPECT(0x36, gbc.l());
        EXPECT(0xe772, gbc.sp());
        EXPECT(0x2d86, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xa47c));
        EXPECT(0x86, gbc.readMem(0xa47d));
        EXPECT(0x2d, gbc.readMem(0xa47e));
        EXPECT(0x7f, gbc.readMem(0xe772));
        EXPECT(0xa4, gbc.readMem(0xe773));
        // DC 0108
        gbc.setState(0x7b5c, 0xb3a9, 0x3b10, 0x745f, 0xe5d7, 0xb4ff, 0x1, 0x0);
        gbc.writeMem(0x7b5c, { 0xdc, 0xbf, 0xe1 });
        gbc.writeMem(0xb3a7, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x3b, gbc.a());
        EXPECT(0x74, gbc.b());
        EXPECT(0x5f, gbc.c());
        EXPECT(0xe5, gbc.d());
        EXPECT(0xd7, gbc.e());
        EXPECT(0xb4, gbc.h());
        EXPECT(0xff, gbc.l());
        EXPECT(0xb3a7, gbc.sp());
        EXPECT(0xe1bf, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x5f, gbc.readMem(0xb3a7));
        EXPECT(0x7b, gbc.readMem(0xb3a8));
        // DC 010B
        gbc.setState(0x6f43, 0x817f, 0x5300, 0x6630, 0x120b, 0x3c0, 0x1, 0x0);
        gbc.writeMem(0x6f43, { 0xdc, 0x85, 0x8 });
        gbc.step();
        EXPECT(0x53, gbc.a());
        EXPECT(0x66, gbc.b());
        EXPECT(0x30, gbc.c());
        EXPECT(0x12, gbc.d());
        EXPECT(0xb, gbc.e());
        EXPECT(0x3, gbc.h());
        EXPECT(0xc0, gbc.l());
        EXPECT(0x817f, gbc.sp());
        EXPECT(0x6f46, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 010D
        gbc.setState(0xa56a, 0xf8d8, 0xfc0, 0xcac1, 0x5dcb, 0x6593, 0x0, 0x1);
        gbc.writeMem(0xa56a, { 0xdc, 0x39, 0xb1 });
        gbc.step();
        EXPECT(0xf, gbc.a());
        EXPECT(0xca, gbc.b());
        EXPECT(0xc1, gbc.c());
        EXPECT(0x5d, gbc.d());
        EXPECT(0xcb, gbc.e());
        EXPECT(0x65, gbc.h());
        EXPECT(0x93, gbc.l());
        EXPECT(0xf8d8, gbc.sp());
        EXPECT(0xa56d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xa56a));
        EXPECT(0x39, gbc.readMem(0xa56b));
        EXPECT(0xb1, gbc.readMem(0xa56c));
        // DC 010E
        gbc.setState(0x3c86, 0x8b37, 0x3bc0, 0xbd91, 0x6f1b, 0x46c, 0x1, 0x1);
        gbc.writeMem(0x3c86, { 0xdc, 0x62, 0xb6 });
        gbc.step();
        EXPECT(0x3b, gbc.a());
        EXPECT(0xbd, gbc.b());
        EXPECT(0x91, gbc.c());
        EXPECT(0x6f, gbc.d());
        EXPECT(0x1b, gbc.e());
        EXPECT(0x4, gbc.h());
        EXPECT(0x6c, gbc.l());
        EXPECT(0x8b37, gbc.sp());
        EXPECT(0x3c89, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 010F
        gbc.setState(0xcb58, 0xae08, 0xab0, 0x337c, 0x7e2d, 0x5e42, 0x0, 0x0);
        gbc.writeMem(0xae06, { 0x0, 0x0 });
        gbc.writeMem(0xcb58, { 0xdc, 0xc, 0x21 });
        gbc.step();
        EXPECT(0xa, gbc.a());
        EXPECT(0x33, gbc.b());
        EXPECT(0x7c, gbc.c());
        EXPECT(0x7e, gbc.d());
        EXPECT(0x2d, gbc.e());
        EXPECT(0x5e, gbc.h());
        EXPECT(0x42, gbc.l());
        EXPECT(0xae06, gbc.sp());
        EXPECT(0x210c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x5b, gbc.readMem(0xae06));
        EXPECT(0xcb, gbc.readMem(0xae07));
        EXPECT(0xdc, gbc.readMem(0xcb58));
        EXPECT(0xc, gbc.readMem(0xcb59));
        EXPECT(0x21, gbc.readMem(0xcb5a));
        // DC 0110
        gbc.setState(0x2c89, 0x432b, 0xb460, 0xc0e0, 0xd67b, 0xadd4, 0x1, 0x0);
        gbc.writeMem(0x2c89, { 0xdc, 0x2e, 0x7 });
        gbc.step();
        EXPECT(0xb4, gbc.a());
        EXPECT(0xc0, gbc.b());
        EXPECT(0xe0, gbc.c());
        EXPECT(0xd6, gbc.d());
        EXPECT(0x7b, gbc.e());
        EXPECT(0xad, gbc.h());
        EXPECT(0xd4, gbc.l());
        EXPECT(0x432b, gbc.sp());
        EXPECT(0x2c8c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 0112
        gbc.setState(0x5a62, 0xb0f3, 0x9550, 0xae8c, 0xe5eb, 0x9716, 0x1, 0x0);
        gbc.writeMem(0x5a62, { 0xdc, 0xbb, 0x5 });
        gbc.writeMem(0xb0f1, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x95, gbc.a());
        EXPECT(0xae, gbc.b());
        EXPECT(0x8c, gbc.c());
        EXPECT(0xe5, gbc.d());
        EXPECT(0xeb, gbc.e());
        EXPECT(0x97, gbc.h());
        EXPECT(0x16, gbc.l());
        EXPECT(0xb0f1, gbc.sp());
        EXPECT(0x5bb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x65, gbc.readMem(0xb0f1));
        EXPECT(0x5a, gbc.readMem(0xb0f2));
        // DC 0114
        gbc.setState(0xbf95, 0x22de, 0x6a0, 0xd3f2, 0x29b4, 0xb490, 0x1, 0x1);
        gbc.writeMem(0xbf95, { 0xdc, 0xa2, 0xd1 });
        gbc.step();
        EXPECT(0x6, gbc.a());
        EXPECT(0xd3, gbc.b());
        EXPECT(0xf2, gbc.c());
        EXPECT(0x29, gbc.d());
        EXPECT(0xb4, gbc.e());
        EXPECT(0xb4, gbc.h());
        EXPECT(0x90, gbc.l());
        EXPECT(0x22de, gbc.sp());
        EXPECT(0xbf98, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xbf95));
        EXPECT(0xa2, gbc.readMem(0xbf96));
        EXPECT(0xd1, gbc.readMem(0xbf97));
        // DC 0115
        gbc.setState(0xba1b, 0xd0bb, 0x29e0, 0xc739, 0x98d, 0x36e7, 0x1, 0x0);
        gbc.writeMem(0xba1b, { 0xdc, 0x88, 0x93 });
        gbc.step();
        EXPECT(0x29, gbc.a());
        EXPECT(0xc7, gbc.b());
        EXPECT(0x39, gbc.c());
        EXPECT(0x9, gbc.d());
        EXPECT(0x8d, gbc.e());
        EXPECT(0x36, gbc.h());
        EXPECT(0xe7, gbc.l());
        EXPECT(0xd0bb, gbc.sp());
        EXPECT(0xba1e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xba1b));
        EXPECT(0x88, gbc.readMem(0xba1c));
        EXPECT(0x93, gbc.readMem(0xba1d));
        // DC 0116
        gbc.setState(0x99b1, 0x8432, 0xe90, 0x2361, 0x81d4, 0x903e, 0x0, 0x0);
        gbc.writeMem(0x8430, { 0x0, 0x0 });
        gbc.writeMem(0x99b1, { 0xdc, 0xec, 0x93 });
        gbc.step();
        EXPECT(0xe, gbc.a());
        EXPECT(0x23, gbc.b());
        EXPECT(0x61, gbc.c());
        EXPECT(0x81, gbc.d());
        EXPECT(0xd4, gbc.e());
        EXPECT(0x90, gbc.h());
        EXPECT(0x3e, gbc.l());
        EXPECT(0x8430, gbc.sp());
        EXPECT(0x93ec, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xb4, gbc.readMem(0x8430));
        EXPECT(0x99, gbc.readMem(0x8431));
        EXPECT(0xdc, gbc.readMem(0x99b1));
        EXPECT(0xec, gbc.readMem(0x99b2));
        EXPECT(0x93, gbc.readMem(0x99b3));
        // DC 0117
        gbc.setState(0xca5b, 0xe73c, 0xf2d0, 0x9956, 0x5ff6, 0x3b09, 0x0, 0x1);
        gbc.writeMem(0xca5b, { 0xdc, 0x87, 0xd1 });
        gbc.writeMem(0xe73a, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xf2, gbc.a());
        EXPECT(0x99, gbc.b());
        EXPECT(0x56, gbc.c());
        EXPECT(0x5f, gbc.d());
        EXPECT(0xf6, gbc.e());
        EXPECT(0x3b, gbc.h());
        EXPECT(0x9, gbc.l());
        EXPECT(0xe73a, gbc.sp());
        EXPECT(0xd187, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xca5b));
        EXPECT(0x87, gbc.readMem(0xca5c));
        EXPECT(0xd1, gbc.readMem(0xca5d));
        EXPECT(0x5e, gbc.readMem(0xe73a));
        EXPECT(0xca, gbc.readMem(0xe73b));
        // DC 0118
        gbc.setState(0xbff3, 0x974f, 0x17e0, 0xd522, 0x80e, 0x850d, 0x0, 0x0);
        gbc.writeMem(0xbff3, { 0xdc, 0x52, 0x33 });
        gbc.step();
        EXPECT(0x17, gbc.a());
        EXPECT(0xd5, gbc.b());
        EXPECT(0x22, gbc.c());
        EXPECT(0x8, gbc.d());
        EXPECT(0xe, gbc.e());
        EXPECT(0x85, gbc.h());
        EXPECT(0xd, gbc.l());
        EXPECT(0x974f, gbc.sp());
        EXPECT(0xbff6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xbff3));
        EXPECT(0x52, gbc.readMem(0xbff4));
        EXPECT(0x33, gbc.readMem(0xbff5));
        // DC 0119
        gbc.setState(0x4d7c, 0x3e9, 0x2ce0, 0x664, 0x8edb, 0xc68f, 0x1, 0x1);
        gbc.writeMem(0x4d7c, { 0xdc, 0xca, 0x62 });
        gbc.step();
        EXPECT(0x2c, gbc.a());
        EXPECT(0x6, gbc.b());
        EXPECT(0x64, gbc.c());
        EXPECT(0x8e, gbc.d());
        EXPECT(0xdb, gbc.e());
        EXPECT(0xc6, gbc.h());
        EXPECT(0x8f, gbc.l());
        EXPECT(0x3e9, gbc.sp());
        EXPECT(0x4d7f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 011B
        gbc.setState(0x7e99, 0x8792, 0x7f50, 0xbfd0, 0xe109, 0x5363, 0x1, 0x0);
        gbc.writeMem(0x7e99, { 0xdc, 0xc3, 0x28 });
        gbc.writeMem(0x8790, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x7f, gbc.a());
        EXPECT(0xbf, gbc.b());
        EXPECT(0xd0, gbc.c());
        EXPECT(0xe1, gbc.d());
        EXPECT(0x9, gbc.e());
        EXPECT(0x53, gbc.h());
        EXPECT(0x63, gbc.l());
        EXPECT(0x8790, gbc.sp());
        EXPECT(0x28c3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x9c, gbc.readMem(0x8790));
        EXPECT(0x7e, gbc.readMem(0x8791));
        // DC 011E
        gbc.setState(0x9a77, 0x11d8, 0xd2c0, 0xd07f, 0xc626, 0x98d7, 0x0, 0x0);
        gbc.writeMem(0x9a77, { 0xdc, 0xd2, 0x5 });
        gbc.step();
        EXPECT(0xd2, gbc.a());
        EXPECT(0xd0, gbc.b());
        EXPECT(0x7f, gbc.c());
        EXPECT(0xc6, gbc.d());
        EXPECT(0x26, gbc.e());
        EXPECT(0x98, gbc.h());
        EXPECT(0xd7, gbc.l());
        EXPECT(0x11d8, gbc.sp());
        EXPECT(0x9a7a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0x9a77));
        EXPECT(0xd2, gbc.readMem(0x9a78));
        EXPECT(0x5, gbc.readMem(0x9a79));
        // DC 011F
        gbc.setState(0x3a50, 0xc22d, 0x4c10, 0xce18, 0xafca, 0x2433, 0x1, 0x0);
        gbc.writeMem(0x3a50, { 0xdc, 0x1f, 0x17 });
        gbc.writeMem(0xc22b, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x4c, gbc.a());
        EXPECT(0xce, gbc.b());
        EXPECT(0x18, gbc.c());
        EXPECT(0xaf, gbc.d());
        EXPECT(0xca, gbc.e());
        EXPECT(0x24, gbc.h());
        EXPECT(0x33, gbc.l());
        EXPECT(0xc22b, gbc.sp());
        EXPECT(0x171f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x53, gbc.readMem(0xc22b));
        EXPECT(0x3a, gbc.readMem(0xc22c));
        // DC 0120
        gbc.setState(0x5399, 0xeecf, 0x1d20, 0xd373, 0xd47, 0x50e, 0x0, 0x0);
        gbc.writeMem(0x5399, { 0xdc, 0x6d, 0x6a });
        gbc.step();
        EXPECT(0x1d, gbc.a());
        EXPECT(0xd3, gbc.b());
        EXPECT(0x73, gbc.c());
        EXPECT(0xd, gbc.d());
        EXPECT(0x47, gbc.e());
        EXPECT(0x5, gbc.h());
        EXPECT(0xe, gbc.l());
        EXPECT(0xeecf, gbc.sp());
        EXPECT(0x539c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 0121
        gbc.setState(0x5784, 0xe032, 0xb5a0, 0xe6e2, 0x5a3d, 0x435d, 0x1, 0x1);
        gbc.writeMem(0x5784, { 0xdc, 0x5c, 0x5c });
        gbc.step();
        EXPECT(0xb5, gbc.a());
        EXPECT(0xe6, gbc.b());
        EXPECT(0xe2, gbc.c());
        EXPECT(0x5a, gbc.d());
        EXPECT(0x3d, gbc.e());
        EXPECT(0x43, gbc.h());
        EXPECT(0x5d, gbc.l());
        EXPECT(0xe032, gbc.sp());
        EXPECT(0x5787, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 0123
        gbc.setState(0x8165, 0xce1e, 0x8cc0, 0x543d, 0x6bcc, 0xd5ff, 0x0, 0x1);
        gbc.writeMem(0x8165, { 0xdc, 0xb5, 0x76 });
        gbc.step();
        EXPECT(0x8c, gbc.a());
        EXPECT(0x54, gbc.b());
        EXPECT(0x3d, gbc.c());
        EXPECT(0x6b, gbc.d());
        EXPECT(0xcc, gbc.e());
        EXPECT(0xd5, gbc.h());
        EXPECT(0xff, gbc.l());
        EXPECT(0xce1e, gbc.sp());
        EXPECT(0x8168, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0x8165));
        EXPECT(0xb5, gbc.readMem(0x8166));
        EXPECT(0x76, gbc.readMem(0x8167));
        // DC 0124
        gbc.setState(0x5ce9, 0x8d89, 0x7ca0, 0x5422, 0x7a9e, 0xa400, 0x0, 0x1);
        gbc.writeMem(0x5ce9, { 0xdc, 0xda, 0x7b });
        gbc.step();
        EXPECT(0x7c, gbc.a());
        EXPECT(0x54, gbc.b());
        EXPECT(0x22, gbc.c());
        EXPECT(0x7a, gbc.d());
        EXPECT(0x9e, gbc.e());
        EXPECT(0xa4, gbc.h());
        EXPECT(0x0, gbc.l());
        EXPECT(0x8d89, gbc.sp());
        EXPECT(0x5cec, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 0125
        gbc.setState(0x5007, 0x3caf, 0xb400, 0x1b06, 0x610f, 0x637d, 0x0, 0x0);
        gbc.writeMem(0x5007, { 0xdc, 0xaf, 0xc3 });
        gbc.step();
        EXPECT(0xb4, gbc.a());
        EXPECT(0x1b, gbc.b());
        EXPECT(0x6, gbc.c());
        EXPECT(0x61, gbc.d());
        EXPECT(0xf, gbc.e());
        EXPECT(0x63, gbc.h());
        EXPECT(0x7d, gbc.l());
        EXPECT(0x3caf, gbc.sp());
        EXPECT(0x500a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 0126
        gbc.setState(0xc7ba, 0xbe17, 0x260, 0xf16, 0xd4ea, 0xe6cd, 0x1, 0x1);
        gbc.writeMem(0xc7ba, { 0xdc, 0xf9, 0x6 });
        gbc.step();
        EXPECT(0x2, gbc.a());
        EXPECT(0xf, gbc.b());
        EXPECT(0x16, gbc.c());
        EXPECT(0xd4, gbc.d());
        EXPECT(0xea, gbc.e());
        EXPECT(0xe6, gbc.h());
        EXPECT(0xcd, gbc.l());
        EXPECT(0xbe17, gbc.sp());
        EXPECT(0xc7bd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xc7ba));
        EXPECT(0xf9, gbc.readMem(0xc7bb));
        EXPECT(0x6, gbc.readMem(0xc7bc));
        // DC 0127
        gbc.setState(0xc14c, 0x569e, 0x3960, 0xc29b, 0xc111, 0x36d3, 0x0, 0x0);
        gbc.writeMem(0xc14c, { 0xdc, 0x9f, 0xae });
        gbc.step();
        EXPECT(0x39, gbc.a());
        EXPECT(0xc2, gbc.b());
        EXPECT(0x9b, gbc.c());
        EXPECT(0xc1, gbc.d());
        EXPECT(0x11, gbc.e());
        EXPECT(0x36, gbc.h());
        EXPECT(0xd3, gbc.l());
        EXPECT(0x569e, gbc.sp());
        EXPECT(0xc14f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xc14c));
        EXPECT(0x9f, gbc.readMem(0xc14d));
        EXPECT(0xae, gbc.readMem(0xc14e));
        // DC 0128
        gbc.setState(0x5414, 0x8b24, 0x2ce0, 0xf4a7, 0xc382, 0x97d1, 0x0, 0x0);
        gbc.writeMem(0x5414, { 0xdc, 0x4f, 0x29 });
        gbc.step();
        EXPECT(0x2c, gbc.a());
        EXPECT(0xf4, gbc.b());
        EXPECT(0xa7, gbc.c());
        EXPECT(0xc3, gbc.d());
        EXPECT(0x82, gbc.e());
        EXPECT(0x97, gbc.h());
        EXPECT(0xd1, gbc.l());
        EXPECT(0x8b24, gbc.sp());
        EXPECT(0x5417, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 012A
        gbc.setState(0xa81d, 0xe5ce, 0xb570, 0x1904, 0xb8cc, 0xd575, 0x0, 0x1);
        gbc.writeMem(0xa81d, { 0xdc, 0x73, 0xd5 });
        gbc.writeMem(0xe5cc, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xb5, gbc.a());
        EXPECT(0x19, gbc.b());
        EXPECT(0x4, gbc.c());
        EXPECT(0xb8, gbc.d());
        EXPECT(0xcc, gbc.e());
        EXPECT(0xd5, gbc.h());
        EXPECT(0x75, gbc.l());
        EXPECT(0xe5cc, gbc.sp());
        EXPECT(0xd573, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xa81d));
        EXPECT(0x73, gbc.readMem(0xa81e));
        EXPECT(0xd5, gbc.readMem(0xa81f));
        EXPECT(0x20, gbc.readMem(0xe5cc));
        EXPECT(0xa8, gbc.readMem(0xe5cd));
        // DC 012C
        gbc.setState(0x8267, 0x5551, 0xdf80, 0x7181, 0xeb10, 0xd5c4, 0x0, 0x0);
        gbc.writeMem(0x8267, { 0xdc, 0x65, 0x5 });
        gbc.step();
        EXPECT(0xdf, gbc.a());
        EXPECT(0x71, gbc.b());
        EXPECT(0x81, gbc.c());
        EXPECT(0xeb, gbc.d());
        EXPECT(0x10, gbc.e());
        EXPECT(0xd5, gbc.h());
        EXPECT(0xc4, gbc.l());
        EXPECT(0x5551, gbc.sp());
        EXPECT(0x826a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0x8267));
        EXPECT(0x65, gbc.readMem(0x8268));
        EXPECT(0x5, gbc.readMem(0x8269));
        // DC 012D
        gbc.setState(0x7121, 0xefef, 0xb130, 0x86f2, 0xfa83, 0x4a10, 0x1, 0x1);
        gbc.writeMem(0x7121, { 0xdc, 0xa3, 0x7 });
        gbc.writeMem(0xefed, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xb1, gbc.a());
        EXPECT(0x86, gbc.b());
        EXPECT(0xf2, gbc.c());
        EXPECT(0xfa, gbc.d());
        EXPECT(0x83, gbc.e());
        EXPECT(0x4a, gbc.h());
        EXPECT(0x10, gbc.l());
        EXPECT(0xefed, gbc.sp());
        EXPECT(0x7a3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x24, gbc.readMem(0xefed));
        EXPECT(0x71, gbc.readMem(0xefee));
        // DC 012E
        gbc.setState(0xe60b, 0xce70, 0x5ba0, 0xcd7a, 0x8695, 0x18d, 0x1, 0x1);
        gbc.writeMem(0xe60b, { 0xdc, 0x48, 0x5e });
        gbc.step();
        EXPECT(0x5b, gbc.a());
        EXPECT(0xcd, gbc.b());
        EXPECT(0x7a, gbc.c());
        EXPECT(0x86, gbc.d());
        EXPECT(0x95, gbc.e());
        EXPECT(0x1, gbc.h());
        EXPECT(0x8d, gbc.l());
        EXPECT(0xce70, gbc.sp());
        EXPECT(0xe60e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xe60b));
        EXPECT(0x48, gbc.readMem(0xe60c));
        EXPECT(0x5e, gbc.readMem(0xe60d));
        // DC 012F
        gbc.setState(0x3bd1, 0x9fc3, 0x4b00, 0x4736, 0x8dd1, 0x469e, 0x0, 0x1);
        gbc.writeMem(0x3bd1, { 0xdc, 0xe, 0xba });
        gbc.step();
        EXPECT(0x4b, gbc.a());
        EXPECT(0x47, gbc.b());
        EXPECT(0x36, gbc.c());
        EXPECT(0x8d, gbc.d());
        EXPECT(0xd1, gbc.e());
        EXPECT(0x46, gbc.h());
        EXPECT(0x9e, gbc.l());
        EXPECT(0x9fc3, gbc.sp());
        EXPECT(0x3bd4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 0130
        gbc.setState(0x4b09, 0xaaf2, 0xe8d0, 0x425c, 0xfa38, 0xbd2e, 0x0, 0x1);
        gbc.writeMem(0x4b09, { 0xdc, 0xc5, 0x9f });
        gbc.writeMem(0xaaf0, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xe8, gbc.a());
        EXPECT(0x42, gbc.b());
        EXPECT(0x5c, gbc.c());
        EXPECT(0xfa, gbc.d());
        EXPECT(0x38, gbc.e());
        EXPECT(0xbd, gbc.h());
        EXPECT(0x2e, gbc.l());
        EXPECT(0xaaf0, gbc.sp());
        EXPECT(0x9fc5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xc, gbc.readMem(0xaaf0));
        EXPECT(0x4b, gbc.readMem(0xaaf1));
        // DC 0131
        gbc.setState(0x5204, 0xe455, 0x5d50, 0x50ef, 0xa763, 0xc45f, 0x1, 0x1);
        gbc.writeMem(0x5204, { 0xdc, 0xaf, 0x38 });
        gbc.writeMem(0xe453, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x5d, gbc.a());
        EXPECT(0x50, gbc.b());
        EXPECT(0xef, gbc.c());
        EXPECT(0xa7, gbc.d());
        EXPECT(0x63, gbc.e());
        EXPECT(0xc4, gbc.h());
        EXPECT(0x5f, gbc.l());
        EXPECT(0xe453, gbc.sp());
        EXPECT(0x38af, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x7, gbc.readMem(0xe453));
        EXPECT(0x52, gbc.readMem(0xe454));
        // DC 0132
        gbc.setState(0xbbfe, 0x8042, 0x4c0, 0x6801, 0xbd4d, 0x9107, 0x0, 0x1);
        gbc.writeMem(0xbbfe, { 0xdc, 0x1c, 0xc6 });
        gbc.step();
        EXPECT(0x4, gbc.a());
        EXPECT(0x68, gbc.b());
        EXPECT(0x1, gbc.c());
        EXPECT(0xbd, gbc.d());
        EXPECT(0x4d, gbc.e());
        EXPECT(0x91, gbc.h());
        EXPECT(0x7, gbc.l());
        EXPECT(0x8042, gbc.sp());
        EXPECT(0xbc01, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xbbfe));
        EXPECT(0x1c, gbc.readMem(0xbbff));
        EXPECT(0xc6, gbc.readMem(0xbc00));
        // DC 0133
        gbc.setState(0x87e0, 0xb359, 0x3180, 0xa750, 0x961b, 0xc32e, 0x0, 0x1);
        gbc.writeMem(0x87e0, { 0xdc, 0x4f, 0xda });
        gbc.step();
        EXPECT(0x31, gbc.a());
        EXPECT(0xa7, gbc.b());
        EXPECT(0x50, gbc.c());
        EXPECT(0x96, gbc.d());
        EXPECT(0x1b, gbc.e());
        EXPECT(0xc3, gbc.h());
        EXPECT(0x2e, gbc.l());
        EXPECT(0xb359, gbc.sp());
        EXPECT(0x87e3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0x87e0));
        EXPECT(0x4f, gbc.readMem(0x87e1));
        EXPECT(0xda, gbc.readMem(0x87e2));
        // DC 0134
        gbc.setState(0x10d5, 0x6497, 0x2ea0, 0x6c4c, 0xeb4b, 0x443c, 0x0, 0x0);
        gbc.writeMem(0x10d5, { 0xdc, 0x48, 0x3f });
        gbc.step();
        EXPECT(0x2e, gbc.a());
        EXPECT(0x6c, gbc.b());
        EXPECT(0x4c, gbc.c());
        EXPECT(0xeb, gbc.d());
        EXPECT(0x4b, gbc.e());
        EXPECT(0x44, gbc.h());
        EXPECT(0x3c, gbc.l());
        EXPECT(0x6497, gbc.sp());
        EXPECT(0x10d8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 0135
        gbc.setState(0x8f43, 0xc103, 0xbb00, 0x6be8, 0xb7fd, 0x314, 0x1, 0x0);
        gbc.writeMem(0x8f43, { 0xdc, 0x74, 0x34 });
        gbc.step();
        EXPECT(0xbb, gbc.a());
        EXPECT(0x6b, gbc.b());
        EXPECT(0xe8, gbc.c());
        EXPECT(0xb7, gbc.d());
        EXPECT(0xfd, gbc.e());
        EXPECT(0x3, gbc.h());
        EXPECT(0x14, gbc.l());
        EXPECT(0xc103, gbc.sp());
        EXPECT(0x8f46, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0x8f43));
        EXPECT(0x74, gbc.readMem(0x8f44));
        EXPECT(0x34, gbc.readMem(0x8f45));
        // DC 0136
        gbc.setState(0xc4c6, 0x871e, 0x5930, 0xabba, 0xf4c0, 0x93f5, 0x1, 0x0);
        gbc.writeMem(0x871c, { 0x0, 0x0 });
        gbc.writeMem(0xc4c6, { 0xdc, 0xea, 0x87 });
        gbc.step();
        EXPECT(0x59, gbc.a());
        EXPECT(0xab, gbc.b());
        EXPECT(0xba, gbc.c());
        EXPECT(0xf4, gbc.d());
        EXPECT(0xc0, gbc.e());
        EXPECT(0x93, gbc.h());
        EXPECT(0xf5, gbc.l());
        EXPECT(0x871c, gbc.sp());
        EXPECT(0x87ea, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xc9, gbc.readMem(0x871c));
        EXPECT(0xc4, gbc.readMem(0x871d));
        EXPECT(0xdc, gbc.readMem(0xc4c6));
        EXPECT(0xea, gbc.readMem(0xc4c7));
        EXPECT(0x87, gbc.readMem(0xc4c8));
        // DC 0138
        gbc.setState(0xa577, 0x9787, 0x8170, 0x6b9a, 0xb2ae, 0x36db, 0x0, 0x1);
        gbc.writeMem(0x9785, { 0x0, 0x0 });
        gbc.writeMem(0xa577, { 0xdc, 0xad, 0x79 });
        gbc.step();
        EXPECT(0x81, gbc.a());
        EXPECT(0x6b, gbc.b());
        EXPECT(0x9a, gbc.c());
        EXPECT(0xb2, gbc.d());
        EXPECT(0xae, gbc.e());
        EXPECT(0x36, gbc.h());
        EXPECT(0xdb, gbc.l());
        EXPECT(0x9785, gbc.sp());
        EXPECT(0x79ad, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x7a, gbc.readMem(0x9785));
        EXPECT(0xa5, gbc.readMem(0x9786));
        EXPECT(0xdc, gbc.readMem(0xa577));
        EXPECT(0xad, gbc.readMem(0xa578));
        EXPECT(0x79, gbc.readMem(0xa579));
        // DC 0139
        gbc.setState(0x486a, 0xc98e, 0xadb0, 0x4df0, 0xae01, 0x6679, 0x1, 0x0);
        gbc.writeMem(0x486a, { 0xdc, 0x50, 0xf0 });
        gbc.writeMem(0xc98c, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xad, gbc.a());
        EXPECT(0x4d, gbc.b());
        EXPECT(0xf0, gbc.c());
        EXPECT(0xae, gbc.d());
        EXPECT(0x1, gbc.e());
        EXPECT(0x66, gbc.h());
        EXPECT(0x79, gbc.l());
        EXPECT(0xc98c, gbc.sp());
        EXPECT(0xf050, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x6d, gbc.readMem(0xc98c));
        EXPECT(0x48, gbc.readMem(0xc98d));
        // DC 013A
        gbc.setState(0x7ffd, 0xe39, 0xb1c0, 0x6e80, 0x245c, 0x5a71, 0x0, 0x0);
        gbc.writeMem(0x7ffd, { 0xdc, 0x33, 0x26 });
        gbc.step();
        EXPECT(0xb1, gbc.a());
        EXPECT(0x6e, gbc.b());
        EXPECT(0x80, gbc.c());
        EXPECT(0x24, gbc.d());
        EXPECT(0x5c, gbc.e());
        EXPECT(0x5a, gbc.h());
        EXPECT(0x71, gbc.l());
        EXPECT(0xe39, gbc.sp());
        EXPECT(0x8000, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 013D
        gbc.setState(0x14bd, 0xd8d7, 0x14a0, 0xb052, 0x3257, 0xd012, 0x0, 0x0);
        gbc.writeMem(0x14bd, { 0xdc, 0x8d, 0x71 });
        gbc.step();
        EXPECT(0x14, gbc.a());
        EXPECT(0xb0, gbc.b());
        EXPECT(0x52, gbc.c());
        EXPECT(0x32, gbc.d());
        EXPECT(0x57, gbc.e());
        EXPECT(0xd0, gbc.h());
        EXPECT(0x12, gbc.l());
        EXPECT(0xd8d7, gbc.sp());
        EXPECT(0x14c0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 013F
        gbc.setState(0x4deb, 0xeb6d, 0x3d0, 0xd8b3, 0xa16d, 0xe1a6, 0x0, 0x1);
        gbc.writeMem(0x4deb, { 0xdc, 0x71, 0x6a });
        gbc.writeMem(0xeb6b, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x3, gbc.a());
        EXPECT(0xd8, gbc.b());
        EXPECT(0xb3, gbc.c());
        EXPECT(0xa1, gbc.d());
        EXPECT(0x6d, gbc.e());
        EXPECT(0xe1, gbc.h());
        EXPECT(0xa6, gbc.l());
        EXPECT(0xeb6b, gbc.sp());
        EXPECT(0x6a71, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xee, gbc.readMem(0xeb6b));
        EXPECT(0x4d, gbc.readMem(0xeb6c));
        // DC 0141
        gbc.setState(0x874c, 0x3880, 0xaee0, 0x3236, 0x7024, 0x1711, 0x1, 0x0);
        gbc.writeMem(0x874c, { 0xdc, 0x7, 0x9b });
        gbc.step();
        EXPECT(0xae, gbc.a());
        EXPECT(0x32, gbc.b());
        EXPECT(0x36, gbc.c());
        EXPECT(0x70, gbc.d());
        EXPECT(0x24, gbc.e());
        EXPECT(0x17, gbc.h());
        EXPECT(0x11, gbc.l());
        EXPECT(0x3880, gbc.sp());
        EXPECT(0x874f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0x874c));
        EXPECT(0x7, gbc.readMem(0x874d));
        EXPECT(0x9b, gbc.readMem(0x874e));
        // DC 0143
        gbc.setState(0x7680, 0xa6b0, 0x8b40, 0x626, 0x28f, 0x9538, 0x1, 0x1);
        gbc.writeMem(0x7680, { 0xdc, 0xb0, 0x78 });
        gbc.step();
        EXPECT(0x8b, gbc.a());
        EXPECT(0x6, gbc.b());
        EXPECT(0x26, gbc.c());
        EXPECT(0x2, gbc.d());
        EXPECT(0x8f, gbc.e());
        EXPECT(0x95, gbc.h());
        EXPECT(0x38, gbc.l());
        EXPECT(0xa6b0, gbc.sp());
        EXPECT(0x7683, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 0144
        gbc.setState(0x77d0, 0xd37e, 0xe5c0, 0xda6d, 0xd37b, 0xfe58, 0x0, 0x0);
        gbc.writeMem(0x77d0, { 0xdc, 0xca, 0x3a });
        gbc.step();
        EXPECT(0xe5, gbc.a());
        EXPECT(0xda, gbc.b());
        EXPECT(0x6d, gbc.c());
        EXPECT(0xd3, gbc.d());
        EXPECT(0x7b, gbc.e());
        EXPECT(0xfe, gbc.h());
        EXPECT(0x58, gbc.l());
        EXPECT(0xd37e, gbc.sp());
        EXPECT(0x77d3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 0145
        gbc.setState(0xa83, 0xa37e, 0xf9e0, 0xa373, 0x3ff2, 0x3ecf, 0x0, 0x1);
        gbc.writeMem(0xa83, { 0xdc, 0xd4, 0x21 });
        gbc.step();
        EXPECT(0xf9, gbc.a());
        EXPECT(0xa3, gbc.b());
        EXPECT(0x73, gbc.c());
        EXPECT(0x3f, gbc.d());
        EXPECT(0xf2, gbc.e());
        EXPECT(0x3e, gbc.h());
        EXPECT(0xcf, gbc.l());
        EXPECT(0xa37e, gbc.sp());
        EXPECT(0xa86, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 0146
        gbc.setState(0x8789, 0xe736, 0x4710, 0x6fcc, 0x4818, 0x6975, 0x0, 0x0);
        gbc.writeMem(0x8789, { 0xdc, 0xcd, 0x40 });
        gbc.writeMem(0xe734, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x47, gbc.a());
        EXPECT(0x6f, gbc.b());
        EXPECT(0xcc, gbc.c());
        EXPECT(0x48, gbc.d());
        EXPECT(0x18, gbc.e());
        EXPECT(0x69, gbc.h());
        EXPECT(0x75, gbc.l());
        EXPECT(0xe734, gbc.sp());
        EXPECT(0x40cd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0x8789));
        EXPECT(0xcd, gbc.readMem(0x878a));
        EXPECT(0x40, gbc.readMem(0x878b));
        EXPECT(0x8c, gbc.readMem(0xe734));
        EXPECT(0x87, gbc.readMem(0xe735));
        // DC 0149
        gbc.setState(0x9168, 0xa181, 0x910, 0xc3ca, 0x1703, 0x952a, 0x0, 0x1);
        gbc.writeMem(0x9168, { 0xdc, 0xef, 0x3e });
        gbc.writeMem(0xa17f, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x9, gbc.a());
        EXPECT(0xc3, gbc.b());
        EXPECT(0xca, gbc.c());
        EXPECT(0x17, gbc.d());
        EXPECT(0x3, gbc.e());
        EXPECT(0x95, gbc.h());
        EXPECT(0x2a, gbc.l());
        EXPECT(0xa17f, gbc.sp());
        EXPECT(0x3eef, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0x9168));
        EXPECT(0xef, gbc.readMem(0x9169));
        EXPECT(0x3e, gbc.readMem(0x916a));
        EXPECT(0x6b, gbc.readMem(0xa17f));
        EXPECT(0x91, gbc.readMem(0xa180));
        // DC 014A
        gbc.setState(0x2782, 0x96da, 0x5450, 0xba86, 0x1bd8, 0x9dba, 0x0, 0x0);
        gbc.writeMem(0x2782, { 0xdc, 0x5e, 0x5b });
        gbc.writeMem(0x96d8, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x54, gbc.a());
        EXPECT(0xba, gbc.b());
        EXPECT(0x86, gbc.c());
        EXPECT(0x1b, gbc.d());
        EXPECT(0xd8, gbc.e());
        EXPECT(0x9d, gbc.h());
        EXPECT(0xba, gbc.l());
        EXPECT(0x96d8, gbc.sp());
        EXPECT(0x5b5e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x85, gbc.readMem(0x96d8));
        EXPECT(0x27, gbc.readMem(0x96d9));
        // DC 014B
        gbc.setState(0x4f47, 0xbd7d, 0x6fc0, 0x7fd2, 0x92aa, 0x5b8e, 0x1, 0x1);
        gbc.writeMem(0x4f47, { 0xdc, 0xb, 0xd2 });
        gbc.step();
        EXPECT(0x6f, gbc.a());
        EXPECT(0x7f, gbc.b());
        EXPECT(0xd2, gbc.c());
        EXPECT(0x92, gbc.d());
        EXPECT(0xaa, gbc.e());
        EXPECT(0x5b, gbc.h());
        EXPECT(0x8e, gbc.l());
        EXPECT(0xbd7d, gbc.sp());
        EXPECT(0x4f4a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 014C
        gbc.setState(0xd383, 0xa5a5, 0xe500, 0xf794, 0xfa51, 0xc671, 0x0, 0x0);
        gbc.writeMem(0xd383, { 0xdc, 0x29, 0xb3 });
        gbc.step();
        EXPECT(0xe5, gbc.a());
        EXPECT(0xf7, gbc.b());
        EXPECT(0x94, gbc.c());
        EXPECT(0xfa, gbc.d());
        EXPECT(0x51, gbc.e());
        EXPECT(0xc6, gbc.h());
        EXPECT(0x71, gbc.l());
        EXPECT(0xa5a5, gbc.sp());
        EXPECT(0xd386, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xd383));
        EXPECT(0x29, gbc.readMem(0xd384));
        EXPECT(0xb3, gbc.readMem(0xd385));
        // DC 014E
        gbc.setState(0x7aea, 0xe520, 0x2900, 0x8b06, 0x9090, 0xbe2f, 0x0, 0x0);
        gbc.writeMem(0x7aea, { 0xdc, 0x6e, 0x49 });
        gbc.step();
        EXPECT(0x29, gbc.a());
        EXPECT(0x8b, gbc.b());
        EXPECT(0x6, gbc.c());
        EXPECT(0x90, gbc.d());
        EXPECT(0x90, gbc.e());
        EXPECT(0xbe, gbc.h());
        EXPECT(0x2f, gbc.l());
        EXPECT(0xe520, gbc.sp());
        EXPECT(0x7aed, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 014F
        gbc.setState(0x4d4e, 0xea67, 0xd380, 0x6a33, 0x54d5, 0x79b0, 0x0, 0x1);
        gbc.writeMem(0x4d4e, { 0xdc, 0x8e, 0x42 });
        gbc.step();
        EXPECT(0xd3, gbc.a());
        EXPECT(0x6a, gbc.b());
        EXPECT(0x33, gbc.c());
        EXPECT(0x54, gbc.d());
        EXPECT(0xd5, gbc.e());
        EXPECT(0x79, gbc.h());
        EXPECT(0xb0, gbc.l());
        EXPECT(0xea67, gbc.sp());
        EXPECT(0x4d51, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 0150
        gbc.setState(0xa061, 0xbec8, 0x6500, 0x6ede, 0x60bb, 0x839f, 0x1, 0x0);
        gbc.writeMem(0xa061, { 0xdc, 0xba, 0xeb });
        gbc.step();
        EXPECT(0x65, gbc.a());
        EXPECT(0x6e, gbc.b());
        EXPECT(0xde, gbc.c());
        EXPECT(0x60, gbc.d());
        EXPECT(0xbb, gbc.e());
        EXPECT(0x83, gbc.h());
        EXPECT(0x9f, gbc.l());
        EXPECT(0xbec8, gbc.sp());
        EXPECT(0xa064, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xa061));
        EXPECT(0xba, gbc.readMem(0xa062));
        EXPECT(0xeb, gbc.readMem(0xa063));
        // DC 0153
        gbc.setState(0xc377, 0xe68c, 0xcca0, 0x3586, 0x3775, 0x629, 0x1, 0x1);
        gbc.writeMem(0xc377, { 0xdc, 0x1a, 0x2e });
        gbc.step();
        EXPECT(0xcc, gbc.a());
        EXPECT(0x35, gbc.b());
        EXPECT(0x86, gbc.c());
        EXPECT(0x37, gbc.d());
        EXPECT(0x75, gbc.e());
        EXPECT(0x6, gbc.h());
        EXPECT(0x29, gbc.l());
        EXPECT(0xe68c, gbc.sp());
        EXPECT(0xc37a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xc377));
        EXPECT(0x1a, gbc.readMem(0xc378));
        EXPECT(0x2e, gbc.readMem(0xc379));
        // DC 0154
        gbc.setState(0x6252, 0xb22c, 0xd60, 0xe358, 0xf7, 0x6c99, 0x1, 0x0);
        gbc.writeMem(0x6252, { 0xdc, 0xf4, 0xca });
        gbc.step();
        EXPECT(0xd, gbc.a());
        EXPECT(0xe3, gbc.b());
        EXPECT(0x58, gbc.c());
        EXPECT(0x0, gbc.d());
        EXPECT(0xf7, gbc.e());
        EXPECT(0x6c, gbc.h());
        EXPECT(0x99, gbc.l());
        EXPECT(0xb22c, gbc.sp());
        EXPECT(0x6255, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 0156
        gbc.setState(0x1534, 0x89b8, 0x9150, 0xd0e8, 0xe3bf, 0x3244, 0x1, 0x0);
        gbc.writeMem(0x1534, { 0xdc, 0xb4, 0x6a });
        gbc.writeMem(0x89b6, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x91, gbc.a());
        EXPECT(0xd0, gbc.b());
        EXPECT(0xe8, gbc.c());
        EXPECT(0xe3, gbc.d());
        EXPECT(0xbf, gbc.e());
        EXPECT(0x32, gbc.h());
        EXPECT(0x44, gbc.l());
        EXPECT(0x89b6, gbc.sp());
        EXPECT(0x6ab4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x37, gbc.readMem(0x89b6));
        EXPECT(0x15, gbc.readMem(0x89b7));
        // DC 0158
        gbc.setState(0xc394, 0xfbce, 0x31e0, 0xd095, 0x70fe, 0x8b95, 0x0, 0x0);
        gbc.writeMem(0xc394, { 0xdc, 0xaa, 0xce });
        gbc.step();
        EXPECT(0x31, gbc.a());
        EXPECT(0xd0, gbc.b());
        EXPECT(0x95, gbc.c());
        EXPECT(0x70, gbc.d());
        EXPECT(0xfe, gbc.e());
        EXPECT(0x8b, gbc.h());
        EXPECT(0x95, gbc.l());
        EXPECT(0xfbce, gbc.sp());
        EXPECT(0xc397, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xc394));
        EXPECT(0xaa, gbc.readMem(0xc395));
        EXPECT(0xce, gbc.readMem(0xc396));
        // DC 015A
        gbc.setState(0x3099, 0xd401, 0x1160, 0x1cdf, 0x6a68, 0xcf0, 0x1, 0x1);
        gbc.writeMem(0x3099, { 0xdc, 0xd5, 0x1f });
        gbc.step();
        EXPECT(0x11, gbc.a());
        EXPECT(0x1c, gbc.b());
        EXPECT(0xdf, gbc.c());
        EXPECT(0x6a, gbc.d());
        EXPECT(0x68, gbc.e());
        EXPECT(0xc, gbc.h());
        EXPECT(0xf0, gbc.l());
        EXPECT(0xd401, gbc.sp());
        EXPECT(0x309c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 015B
        gbc.setState(0x1373, 0xd2b1, 0x7620, 0x682b, 0xef07, 0x3811, 0x0, 0x1);
        gbc.writeMem(0x1373, { 0xdc, 0xfd, 0x1 });
        gbc.step();
        EXPECT(0x76, gbc.a());
        EXPECT(0x68, gbc.b());
        EXPECT(0x2b, gbc.c());
        EXPECT(0xef, gbc.d());
        EXPECT(0x7, gbc.e());
        EXPECT(0x38, gbc.h());
        EXPECT(0x11, gbc.l());
        EXPECT(0xd2b1, gbc.sp());
        EXPECT(0x1376, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 015C
        gbc.setState(0x90c6, 0x3009, 0x1160, 0x8c0d, 0xc19b, 0x357d, 0x0, 0x1);
        gbc.writeMem(0x90c6, { 0xdc, 0xaf, 0x23 });
        gbc.step();
        EXPECT(0x11, gbc.a());
        EXPECT(0x8c, gbc.b());
        EXPECT(0xd, gbc.c());
        EXPECT(0xc1, gbc.d());
        EXPECT(0x9b, gbc.e());
        EXPECT(0x35, gbc.h());
        EXPECT(0x7d, gbc.l());
        EXPECT(0x3009, gbc.sp());
        EXPECT(0x90c9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0x90c6));
        EXPECT(0xaf, gbc.readMem(0x90c7));
        EXPECT(0x23, gbc.readMem(0x90c8));
        // DC 015D
        gbc.setState(0xea8e, 0x4965, 0x83e0, 0xcc0d, 0xd4ad, 0xc7ab, 0x1, 0x0);
        gbc.writeMem(0xea8e, { 0xdc, 0x41, 0x53 });
        gbc.step();
        EXPECT(0x83, gbc.a());
        EXPECT(0xcc, gbc.b());
        EXPECT(0xd, gbc.c());
        EXPECT(0xd4, gbc.d());
        EXPECT(0xad, gbc.e());
        EXPECT(0xc7, gbc.h());
        EXPECT(0xab, gbc.l());
        EXPECT(0x4965, gbc.sp());
        EXPECT(0xea91, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xea8e));
        EXPECT(0x41, gbc.readMem(0xea8f));
        EXPECT(0x53, gbc.readMem(0xea90));
        // DC 015E
        gbc.setState(0xbce, 0xd577, 0x5760, 0xb4b7, 0x3f69, 0xf71a, 0x1, 0x0);
        gbc.writeMem(0xbce, { 0xdc, 0x96, 0x34 });
        gbc.step();
        EXPECT(0x57, gbc.a());
        EXPECT(0xb4, gbc.b());
        EXPECT(0xb7, gbc.c());
        EXPECT(0x3f, gbc.d());
        EXPECT(0x69, gbc.e());
        EXPECT(0xf7, gbc.h());
        EXPECT(0x1a, gbc.l());
        EXPECT(0xd577, gbc.sp());
        EXPECT(0xbd1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 015F
        gbc.setState(0x6d37, 0xbebe, 0x7200, 0x6c7b, 0xeec0, 0xf715, 0x0, 0x1);
        gbc.writeMem(0x6d37, { 0xdc, 0xf4, 0x5a });
        gbc.step();
        EXPECT(0x72, gbc.a());
        EXPECT(0x6c, gbc.b());
        EXPECT(0x7b, gbc.c());
        EXPECT(0xee, gbc.d());
        EXPECT(0xc0, gbc.e());
        EXPECT(0xf7, gbc.h());
        EXPECT(0x15, gbc.l());
        EXPECT(0xbebe, gbc.sp());
        EXPECT(0x6d3a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 0160
        gbc.setState(0x8ee, 0x3230, 0x3440, 0xe425, 0xfd4c, 0x6442, 0x1, 0x1);
        gbc.writeMem(0x8ee, { 0xdc, 0x4c, 0xc });
        gbc.step();
        EXPECT(0x34, gbc.a());
        EXPECT(0xe4, gbc.b());
        EXPECT(0x25, gbc.c());
        EXPECT(0xfd, gbc.d());
        EXPECT(0x4c, gbc.e());
        EXPECT(0x64, gbc.h());
        EXPECT(0x42, gbc.l());
        EXPECT(0x3230, gbc.sp());
        EXPECT(0x8f1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 0162
        gbc.setState(0x3d85, 0xe161, 0x2790, 0x6613, 0x868, 0x832c, 0x0, 0x0);
        gbc.writeMem(0x3d85, { 0xdc, 0x67, 0x45 });
        gbc.writeMem(0xe15f, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x27, gbc.a());
        EXPECT(0x66, gbc.b());
        EXPECT(0x13, gbc.c());
        EXPECT(0x8, gbc.d());
        EXPECT(0x68, gbc.e());
        EXPECT(0x83, gbc.h());
        EXPECT(0x2c, gbc.l());
        EXPECT(0xe15f, gbc.sp());
        EXPECT(0x4567, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x88, gbc.readMem(0xe15f));
        EXPECT(0x3d, gbc.readMem(0xe160));
        // DC 0165
        gbc.setState(0x8f7a, 0xad40, 0xd540, 0x353e, 0xd1fb, 0xb8d9, 0x0, 0x1);
        gbc.writeMem(0x8f7a, { 0xdc, 0x65, 0x6 });
        gbc.step();
        EXPECT(0xd5, gbc.a());
        EXPECT(0x35, gbc.b());
        EXPECT(0x3e, gbc.c());
        EXPECT(0xd1, gbc.d());
        EXPECT(0xfb, gbc.e());
        EXPECT(0xb8, gbc.h());
        EXPECT(0xd9, gbc.l());
        EXPECT(0xad40, gbc.sp());
        EXPECT(0x8f7d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0x8f7a));
        EXPECT(0x65, gbc.readMem(0x8f7b));
        EXPECT(0x6, gbc.readMem(0x8f7c));
        // DC 0167
        gbc.setState(0x819d, 0x12f8, 0xcea0, 0xe290, 0xcef4, 0x1d4f, 0x0, 0x0);
        gbc.writeMem(0x819d, { 0xdc, 0x37, 0x32 });
        gbc.step();
        EXPECT(0xce, gbc.a());
        EXPECT(0xe2, gbc.b());
        EXPECT(0x90, gbc.c());
        EXPECT(0xce, gbc.d());
        EXPECT(0xf4, gbc.e());
        EXPECT(0x1d, gbc.h());
        EXPECT(0x4f, gbc.l());
        EXPECT(0x12f8, gbc.sp());
        EXPECT(0x81a0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0x819d));
        EXPECT(0x37, gbc.readMem(0x819e));
        EXPECT(0x32, gbc.readMem(0x819f));
        // DC 0168
        gbc.setState(0x4a1b, 0x54c8, 0xca80, 0xd22f, 0x7d91, 0x9bf8, 0x1, 0x0);
        gbc.writeMem(0x4a1b, { 0xdc, 0x50, 0x4 });
        gbc.step();
        EXPECT(0xca, gbc.a());
        EXPECT(0xd2, gbc.b());
        EXPECT(0x2f, gbc.c());
        EXPECT(0x7d, gbc.d());
        EXPECT(0x91, gbc.e());
        EXPECT(0x9b, gbc.h());
        EXPECT(0xf8, gbc.l());
        EXPECT(0x54c8, gbc.sp());
        EXPECT(0x4a1e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 0169
        gbc.setState(0x6eca, 0x8ed9, 0xb490, 0xe5cb, 0xd7a7, 0xee24, 0x0, 0x0);
        gbc.writeMem(0x6eca, { 0xdc, 0x41, 0x39 });
        gbc.writeMem(0x8ed7, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xb4, gbc.a());
        EXPECT(0xe5, gbc.b());
        EXPECT(0xcb, gbc.c());
        EXPECT(0xd7, gbc.d());
        EXPECT(0xa7, gbc.e());
        EXPECT(0xee, gbc.h());
        EXPECT(0x24, gbc.l());
        EXPECT(0x8ed7, gbc.sp());
        EXPECT(0x3941, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0x8ed7));
        EXPECT(0x6e, gbc.readMem(0x8ed8));
        // DC 016A
        gbc.setState(0x9b6c, 0xa262, 0xd9b0, 0x4c25, 0xdd70, 0x53b3, 0x0, 0x0);
        gbc.writeMem(0x9b6c, { 0xdc, 0x22, 0xc2 });
        gbc.writeMem(0xa260, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xd9, gbc.a());
        EXPECT(0x4c, gbc.b());
        EXPECT(0x25, gbc.c());
        EXPECT(0xdd, gbc.d());
        EXPECT(0x70, gbc.e());
        EXPECT(0x53, gbc.h());
        EXPECT(0xb3, gbc.l());
        EXPECT(0xa260, gbc.sp());
        EXPECT(0xc222, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0x9b6c));
        EXPECT(0x22, gbc.readMem(0x9b6d));
        EXPECT(0xc2, gbc.readMem(0x9b6e));
        EXPECT(0x6f, gbc.readMem(0xa260));
        EXPECT(0x9b, gbc.readMem(0xa261));
        // DC 016C
        gbc.setState(0xec97, 0xaa08, 0xfc60, 0x251a, 0x6618, 0xc92e, 0x0, 0x0);
        gbc.writeMem(0xec97, { 0xdc, 0xa8, 0xf9 });
        gbc.step();
        EXPECT(0xfc, gbc.a());
        EXPECT(0x25, gbc.b());
        EXPECT(0x1a, gbc.c());
        EXPECT(0x66, gbc.d());
        EXPECT(0x18, gbc.e());
        EXPECT(0xc9, gbc.h());
        EXPECT(0x2e, gbc.l());
        EXPECT(0xaa08, gbc.sp());
        EXPECT(0xec9a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xec97));
        EXPECT(0xa8, gbc.readMem(0xec98));
        EXPECT(0xf9, gbc.readMem(0xec99));
        // DC 016D
        gbc.setState(0xdf64, 0x17de, 0x1dc0, 0xb33, 0xfba, 0xcbe8, 0x0, 0x0);
        gbc.writeMem(0xdf64, { 0xdc, 0xc5, 0x5e });
        gbc.step();
        EXPECT(0x1d, gbc.a());
        EXPECT(0xb, gbc.b());
        EXPECT(0x33, gbc.c());
        EXPECT(0xf, gbc.d());
        EXPECT(0xba, gbc.e());
        EXPECT(0xcb, gbc.h());
        EXPECT(0xe8, gbc.l());
        EXPECT(0x17de, gbc.sp());
        EXPECT(0xdf67, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xdf64));
        EXPECT(0xc5, gbc.readMem(0xdf65));
        EXPECT(0x5e, gbc.readMem(0xdf66));
        // DC 016E
        gbc.setState(0xa2fa, 0xee88, 0x6c60, 0xdead, 0x217, 0x2313, 0x1, 0x0);
        gbc.writeMem(0xa2fa, { 0xdc, 0x99, 0xea });
        gbc.step();
        EXPECT(0x6c, gbc.a());
        EXPECT(0xde, gbc.b());
        EXPECT(0xad, gbc.c());
        EXPECT(0x2, gbc.d());
        EXPECT(0x17, gbc.e());
        EXPECT(0x23, gbc.h());
        EXPECT(0x13, gbc.l());
        EXPECT(0xee88, gbc.sp());
        EXPECT(0xa2fd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xa2fa));
        EXPECT(0x99, gbc.readMem(0xa2fb));
        EXPECT(0xea, gbc.readMem(0xa2fc));
        // DC 016F
        gbc.setState(0xaa0b, 0xd92b, 0x5620, 0x560a, 0x3473, 0xa2c7, 0x1, 0x1);
        gbc.writeMem(0xaa0b, { 0xdc, 0xc8, 0xda });
        gbc.step();
        EXPECT(0x56, gbc.a());
        EXPECT(0x56, gbc.b());
        EXPECT(0xa, gbc.c());
        EXPECT(0x34, gbc.d());
        EXPECT(0x73, gbc.e());
        EXPECT(0xa2, gbc.h());
        EXPECT(0xc7, gbc.l());
        EXPECT(0xd92b, gbc.sp());
        EXPECT(0xaa0e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xaa0b));
        EXPECT(0xc8, gbc.readMem(0xaa0c));
        EXPECT(0xda, gbc.readMem(0xaa0d));
        // DC 0170
        gbc.setState(0x74da, 0x6a64, 0x3d80, 0xfa83, 0x48ab, 0x7463, 0x1, 0x1);
        gbc.writeMem(0x74da, { 0xdc, 0x3f, 0xfc });
        gbc.step();
        EXPECT(0x3d, gbc.a());
        EXPECT(0xfa, gbc.b());
        EXPECT(0x83, gbc.c());
        EXPECT(0x48, gbc.d());
        EXPECT(0xab, gbc.e());
        EXPECT(0x74, gbc.h());
        EXPECT(0x63, gbc.l());
        EXPECT(0x6a64, gbc.sp());
        EXPECT(0x74dd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 0171
        gbc.setState(0xfb1, 0x80cf, 0x6b50, 0xddf9, 0x6c52, 0x15e4, 0x1, 0x0);
        gbc.writeMem(0xfb1, { 0xdc, 0x52, 0xff });
        gbc.writeMem(0x80cd, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x6b, gbc.a());
        EXPECT(0xdd, gbc.b());
        EXPECT(0xf9, gbc.c());
        EXPECT(0x6c, gbc.d());
        EXPECT(0x52, gbc.e());
        EXPECT(0x15, gbc.h());
        EXPECT(0xe4, gbc.l());
        EXPECT(0x80cd, gbc.sp());
        EXPECT(0xff52, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xb4, gbc.readMem(0x80cd));
        EXPECT(0xf, gbc.readMem(0x80ce));
        // DC 0172
        gbc.setState(0x50b2, 0xccd9, 0x7980, 0x10cc, 0xb964, 0xf963, 0x0, 0x1);
        gbc.writeMem(0x50b2, { 0xdc, 0x7f, 0xb8 });
        gbc.step();
        EXPECT(0x79, gbc.a());
        EXPECT(0x10, gbc.b());
        EXPECT(0xcc, gbc.c());
        EXPECT(0xb9, gbc.d());
        EXPECT(0x64, gbc.e());
        EXPECT(0xf9, gbc.h());
        EXPECT(0x63, gbc.l());
        EXPECT(0xccd9, gbc.sp());
        EXPECT(0x50b5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 0173
        gbc.setState(0x8c4, 0x41ad, 0xdf40, 0x3ca9, 0xa52d, 0xc64, 0x0, 0x1);
        gbc.writeMem(0x8c4, { 0xdc, 0xb3, 0x46 });
        gbc.step();
        EXPECT(0xdf, gbc.a());
        EXPECT(0x3c, gbc.b());
        EXPECT(0xa9, gbc.c());
        EXPECT(0xa5, gbc.d());
        EXPECT(0x2d, gbc.e());
        EXPECT(0xc, gbc.h());
        EXPECT(0x64, gbc.l());
        EXPECT(0x41ad, gbc.sp());
        EXPECT(0x8c7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 0175
        gbc.setState(0x56de, 0xbd32, 0xff70, 0x98fa, 0x6129, 0x56a2, 0x1, 0x1);
        gbc.writeMem(0x56de, { 0xdc, 0xca, 0xc1 });
        gbc.writeMem(0xbd30, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xff, gbc.a());
        EXPECT(0x98, gbc.b());
        EXPECT(0xfa, gbc.c());
        EXPECT(0x61, gbc.d());
        EXPECT(0x29, gbc.e());
        EXPECT(0x56, gbc.h());
        EXPECT(0xa2, gbc.l());
        EXPECT(0xbd30, gbc.sp());
        EXPECT(0xc1ca, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xe1, gbc.readMem(0xbd30));
        EXPECT(0x56, gbc.readMem(0xbd31));
        // DC 0176
        gbc.setState(0x7568, 0xb65f, 0x7000, 0x5019, 0x77f4, 0xc638, 0x1, 0x1);
        gbc.writeMem(0x7568, { 0xdc, 0x7, 0x56 });
        gbc.step();
        EXPECT(0x70, gbc.a());
        EXPECT(0x50, gbc.b());
        EXPECT(0x19, gbc.c());
        EXPECT(0x77, gbc.d());
        EXPECT(0xf4, gbc.e());
        EXPECT(0xc6, gbc.h());
        EXPECT(0x38, gbc.l());
        EXPECT(0xb65f, gbc.sp());
        EXPECT(0x756b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 0178
        gbc.setState(0xe75b, 0x6094, 0xc5a0, 0xe89c, 0x7a9a, 0x3feb, 0x0, 0x0);
        gbc.writeMem(0xe75b, { 0xdc, 0x12, 0x9 });
        gbc.step();
        EXPECT(0xc5, gbc.a());
        EXPECT(0xe8, gbc.b());
        EXPECT(0x9c, gbc.c());
        EXPECT(0x7a, gbc.d());
        EXPECT(0x9a, gbc.e());
        EXPECT(0x3f, gbc.h());
        EXPECT(0xeb, gbc.l());
        EXPECT(0x6094, gbc.sp());
        EXPECT(0xe75e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xe75b));
        EXPECT(0x12, gbc.readMem(0xe75c));
        EXPECT(0x9, gbc.readMem(0xe75d));
        // DC 0179
        gbc.setState(0xb37e, 0x94dd, 0x530, 0xf4b3, 0x2e4e, 0x8c89, 0x1, 0x0);
        gbc.writeMem(0x94db, { 0x0, 0x0 });
        gbc.writeMem(0xb37e, { 0xdc, 0xb5, 0xf1 });
        gbc.step();
        EXPECT(0x5, gbc.a());
        EXPECT(0xf4, gbc.b());
        EXPECT(0xb3, gbc.c());
        EXPECT(0x2e, gbc.d());
        EXPECT(0x4e, gbc.e());
        EXPECT(0x8c, gbc.h());
        EXPECT(0x89, gbc.l());
        EXPECT(0x94db, gbc.sp());
        EXPECT(0xf1b5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x81, gbc.readMem(0x94db));
        EXPECT(0xb3, gbc.readMem(0x94dc));
        EXPECT(0xdc, gbc.readMem(0xb37e));
        EXPECT(0xb5, gbc.readMem(0xb37f));
        EXPECT(0xf1, gbc.readMem(0xb380));
        // DC 017A
        gbc.setState(0x611a, 0xb4f8, 0xa420, 0x49e1, 0x6718, 0x451f, 0x0, 0x0);
        gbc.writeMem(0x611a, { 0xdc, 0x21, 0x1d });
        gbc.step();
        EXPECT(0xa4, gbc.a());
        EXPECT(0x49, gbc.b());
        EXPECT(0xe1, gbc.c());
        EXPECT(0x67, gbc.d());
        EXPECT(0x18, gbc.e());
        EXPECT(0x45, gbc.h());
        EXPECT(0x1f, gbc.l());
        EXPECT(0xb4f8, gbc.sp());
        EXPECT(0x611d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 017B
        gbc.setState(0x7612, 0xb1d5, 0x26a0, 0x5a41, 0x4685, 0xbcb3, 0x0, 0x1);
        gbc.writeMem(0x7612, { 0xdc, 0xd7, 0x4f });
        gbc.step();
        EXPECT(0x26, gbc.a());
        EXPECT(0x5a, gbc.b());
        EXPECT(0x41, gbc.c());
        EXPECT(0x46, gbc.d());
        EXPECT(0x85, gbc.e());
        EXPECT(0xbc, gbc.h());
        EXPECT(0xb3, gbc.l());
        EXPECT(0xb1d5, gbc.sp());
        EXPECT(0x7615, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 017C
        gbc.setState(0x129a, 0xda24, 0x1c20, 0x2769, 0x5b4a, 0x2792, 0x1, 0x0);
        gbc.writeMem(0x129a, { 0xdc, 0xec, 0x97 });
        gbc.step();
        EXPECT(0x1c, gbc.a());
        EXPECT(0x27, gbc.b());
        EXPECT(0x69, gbc.c());
        EXPECT(0x5b, gbc.d());
        EXPECT(0x4a, gbc.e());
        EXPECT(0x27, gbc.h());
        EXPECT(0x92, gbc.l());
        EXPECT(0xda24, gbc.sp());
        EXPECT(0x129d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 017D
        gbc.setState(0x1bb0, 0x86e8, 0xecc0, 0x1ab5, 0xb526, 0x202f, 0x0, 0x1);
        gbc.writeMem(0x1bb0, { 0xdc, 0x36, 0x33 });
        gbc.step();
        EXPECT(0xec, gbc.a());
        EXPECT(0x1a, gbc.b());
        EXPECT(0xb5, gbc.c());
        EXPECT(0xb5, gbc.d());
        EXPECT(0x26, gbc.e());
        EXPECT(0x20, gbc.h());
        EXPECT(0x2f, gbc.l());
        EXPECT(0x86e8, gbc.sp());
        EXPECT(0x1bb3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 017E
        gbc.setState(0x11e5, 0xaede, 0xc650, 0x6eb1, 0xd5bb, 0xbc19, 0x1, 0x0);
        gbc.writeMem(0x11e5, { 0xdc, 0x3b, 0x62 });
        gbc.writeMem(0xaedc, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xc6, gbc.a());
        EXPECT(0x6e, gbc.b());
        EXPECT(0xb1, gbc.c());
        EXPECT(0xd5, gbc.d());
        EXPECT(0xbb, gbc.e());
        EXPECT(0xbc, gbc.h());
        EXPECT(0x19, gbc.l());
        EXPECT(0xaedc, gbc.sp());
        EXPECT(0x623b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xe8, gbc.readMem(0xaedc));
        EXPECT(0x11, gbc.readMem(0xaedd));
        // DC 017F
        gbc.setState(0x774b, 0xebb4, 0xd140, 0xdeff, 0x6aff, 0x607e, 0x1, 0x0);
        gbc.writeMem(0x774b, { 0xdc, 0x50, 0x98 });
        gbc.step();
        EXPECT(0xd1, gbc.a());
        EXPECT(0xde, gbc.b());
        EXPECT(0xff, gbc.c());
        EXPECT(0x6a, gbc.d());
        EXPECT(0xff, gbc.e());
        EXPECT(0x60, gbc.h());
        EXPECT(0x7e, gbc.l());
        EXPECT(0xebb4, gbc.sp());
        EXPECT(0x774e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 0180
        gbc.setState(0x306d, 0xf4c2, 0xfd0, 0x9c26, 0xe856, 0xdefb, 0x0, 0x0);
        gbc.writeMem(0x306d, { 0xdc, 0x91, 0x16 });
        gbc.writeMem(0xf4c0, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xf, gbc.a());
        EXPECT(0x9c, gbc.b());
        EXPECT(0x26, gbc.c());
        EXPECT(0xe8, gbc.d());
        EXPECT(0x56, gbc.e());
        EXPECT(0xde, gbc.h());
        EXPECT(0xfb, gbc.l());
        EXPECT(0xf4c0, gbc.sp());
        EXPECT(0x1691, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x70, gbc.readMem(0xf4c0));
        EXPECT(0x30, gbc.readMem(0xf4c1));
        // DC 0182
        gbc.setState(0x60c6, 0x8198, 0x28d0, 0xce32, 0x5b29, 0x9fc9, 0x1, 0x1);
        gbc.writeMem(0x60c6, { 0xdc, 0x8e, 0xd6 });
        gbc.writeMem(0x8196, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x28, gbc.a());
        EXPECT(0xce, gbc.b());
        EXPECT(0x32, gbc.c());
        EXPECT(0x5b, gbc.d());
        EXPECT(0x29, gbc.e());
        EXPECT(0x9f, gbc.h());
        EXPECT(0xc9, gbc.l());
        EXPECT(0x8196, gbc.sp());
        EXPECT(0xd68e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xc9, gbc.readMem(0x8196));
        EXPECT(0x60, gbc.readMem(0x8197));
        // DC 0183
        gbc.setState(0x3feb, 0xd0e2, 0x9cd0, 0x7221, 0x6849, 0xceee, 0x1, 0x1);
        gbc.writeMem(0x3feb, { 0xdc, 0xe, 0x80 });
        gbc.writeMem(0xd0e0, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x9c, gbc.a());
        EXPECT(0x72, gbc.b());
        EXPECT(0x21, gbc.c());
        EXPECT(0x68, gbc.d());
        EXPECT(0x49, gbc.e());
        EXPECT(0xce, gbc.h());
        EXPECT(0xee, gbc.l());
        EXPECT(0xd0e0, gbc.sp());
        EXPECT(0x800e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xee, gbc.readMem(0xd0e0));
        EXPECT(0x3f, gbc.readMem(0xd0e1));
        // DC 0184
        gbc.setState(0x6398, 0xad81, 0xd680, 0x5a68, 0x1b20, 0xdd2d, 0x1, 0x0);
        gbc.writeMem(0x6398, { 0xdc, 0xf2, 0x67 });
        gbc.step();
        EXPECT(0xd6, gbc.a());
        EXPECT(0x5a, gbc.b());
        EXPECT(0x68, gbc.c());
        EXPECT(0x1b, gbc.d());
        EXPECT(0x20, gbc.e());
        EXPECT(0xdd, gbc.h());
        EXPECT(0x2d, gbc.l());
        EXPECT(0xad81, gbc.sp());
        EXPECT(0x639b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 0187
        gbc.setState(0x7e11, 0xd76e, 0xac0, 0x31fb, 0x9366, 0x5d6f, 0x1, 0x0);
        gbc.writeMem(0x7e11, { 0xdc, 0x5d, 0xaf });
        gbc.step();
        EXPECT(0xa, gbc.a());
        EXPECT(0x31, gbc.b());
        EXPECT(0xfb, gbc.c());
        EXPECT(0x93, gbc.d());
        EXPECT(0x66, gbc.e());
        EXPECT(0x5d, gbc.h());
        EXPECT(0x6f, gbc.l());
        EXPECT(0xd76e, gbc.sp());
        EXPECT(0x7e14, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 018B
        gbc.setState(0x20ec, 0xa3ba, 0x75f0, 0xc3da, 0xdc28, 0x227e, 0x0, 0x1);
        gbc.writeMem(0x20ec, { 0xdc, 0x1f, 0x70 });
        gbc.writeMem(0xa3b8, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x75, gbc.a());
        EXPECT(0xc3, gbc.b());
        EXPECT(0xda, gbc.c());
        EXPECT(0xdc, gbc.d());
        EXPECT(0x28, gbc.e());
        EXPECT(0x22, gbc.h());
        EXPECT(0x7e, gbc.l());
        EXPECT(0xa3b8, gbc.sp());
        EXPECT(0x701f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xef, gbc.readMem(0xa3b8));
        EXPECT(0x20, gbc.readMem(0xa3b9));
        // DC 018C
        gbc.setState(0x5441, 0xab59, 0x71e0, 0x3ba7, 0x4d28, 0x468c, 0x1, 0x0);
        gbc.writeMem(0x5441, { 0xdc, 0xfb, 0x48 });
        gbc.step();
        EXPECT(0x71, gbc.a());
        EXPECT(0x3b, gbc.b());
        EXPECT(0xa7, gbc.c());
        EXPECT(0x4d, gbc.d());
        EXPECT(0x28, gbc.e());
        EXPECT(0x46, gbc.h());
        EXPECT(0x8c, gbc.l());
        EXPECT(0xab59, gbc.sp());
        EXPECT(0x5444, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 018D
        gbc.setState(0x3296, 0xd956, 0xa780, 0x6970, 0x9251, 0xaf59, 0x1, 0x0);
        gbc.writeMem(0x3296, { 0xdc, 0xc9, 0x56 });
        gbc.step();
        EXPECT(0xa7, gbc.a());
        EXPECT(0x69, gbc.b());
        EXPECT(0x70, gbc.c());
        EXPECT(0x92, gbc.d());
        EXPECT(0x51, gbc.e());
        EXPECT(0xaf, gbc.h());
        EXPECT(0x59, gbc.l());
        EXPECT(0xd956, gbc.sp());
        EXPECT(0x3299, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 018E
        gbc.setState(0x9086, 0x4cc7, 0xb7e0, 0x5c40, 0x7771, 0x61de, 0x1, 0x0);
        gbc.writeMem(0x9086, { 0xdc, 0x3f, 0xdb });
        gbc.step();
        EXPECT(0xb7, gbc.a());
        EXPECT(0x5c, gbc.b());
        EXPECT(0x40, gbc.c());
        EXPECT(0x77, gbc.d());
        EXPECT(0x71, gbc.e());
        EXPECT(0x61, gbc.h());
        EXPECT(0xde, gbc.l());
        EXPECT(0x4cc7, gbc.sp());
        EXPECT(0x9089, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0x9086));
        EXPECT(0x3f, gbc.readMem(0x9087));
        EXPECT(0xdb, gbc.readMem(0x9088));
        // DC 018F
        gbc.setState(0xda03, 0xc97a, 0x9970, 0xc7a8, 0x6837, 0xa00, 0x1, 0x0);
        gbc.writeMem(0xc978, { 0x0, 0x0 });
        gbc.writeMem(0xda03, { 0xdc, 0xe2, 0x34 });
        gbc.step();
        EXPECT(0x99, gbc.a());
        EXPECT(0xc7, gbc.b());
        EXPECT(0xa8, gbc.c());
        EXPECT(0x68, gbc.d());
        EXPECT(0x37, gbc.e());
        EXPECT(0xa, gbc.h());
        EXPECT(0x0, gbc.l());
        EXPECT(0xc978, gbc.sp());
        EXPECT(0x34e2, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x6, gbc.readMem(0xc978));
        EXPECT(0xda, gbc.readMem(0xc979));
        EXPECT(0xdc, gbc.readMem(0xda03));
        EXPECT(0xe2, gbc.readMem(0xda04));
        EXPECT(0x34, gbc.readMem(0xda05));
        // DC 0190
        gbc.setState(0x7e06, 0xd314, 0x3ca0, 0xa820, 0x3ee1, 0xdd70, 0x0, 0x0);
        gbc.writeMem(0x7e06, { 0xdc, 0x44, 0x6d });
        gbc.step();
        EXPECT(0x3c, gbc.a());
        EXPECT(0xa8, gbc.b());
        EXPECT(0x20, gbc.c());
        EXPECT(0x3e, gbc.d());
        EXPECT(0xe1, gbc.e());
        EXPECT(0xdd, gbc.h());
        EXPECT(0x70, gbc.l());
        EXPECT(0xd314, gbc.sp());
        EXPECT(0x7e09, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 0191
        gbc.setState(0xde5, 0xeb57, 0x2040, 0x2950, 0xb098, 0x8efb, 0x0, 0x1);
        gbc.writeMem(0xde5, { 0xdc, 0xda, 0x2f });
        gbc.step();
        EXPECT(0x20, gbc.a());
        EXPECT(0x29, gbc.b());
        EXPECT(0x50, gbc.c());
        EXPECT(0xb0, gbc.d());
        EXPECT(0x98, gbc.e());
        EXPECT(0x8e, gbc.h());
        EXPECT(0xfb, gbc.l());
        EXPECT(0xeb57, gbc.sp());
        EXPECT(0xde8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 0192
        gbc.setState(0x67d4, 0x7975, 0x960, 0x33a8, 0x2aca, 0x5415, 0x0, 0x1);
        gbc.writeMem(0x67d4, { 0xdc, 0xf6, 0x65 });
        gbc.step();
        EXPECT(0x9, gbc.a());
        EXPECT(0x33, gbc.b());
        EXPECT(0xa8, gbc.c());
        EXPECT(0x2a, gbc.d());
        EXPECT(0xca, gbc.e());
        EXPECT(0x54, gbc.h());
        EXPECT(0x15, gbc.l());
        EXPECT(0x7975, gbc.sp());
        EXPECT(0x67d7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 0193
        gbc.setState(0xa401, 0xdaf5, 0x1d60, 0xb06f, 0x74f0, 0xc760, 0x0, 0x0);
        gbc.writeMem(0xa401, { 0xdc, 0x79, 0x70 });
        gbc.step();
        EXPECT(0x1d, gbc.a());
        EXPECT(0xb0, gbc.b());
        EXPECT(0x6f, gbc.c());
        EXPECT(0x74, gbc.d());
        EXPECT(0xf0, gbc.e());
        EXPECT(0xc7, gbc.h());
        EXPECT(0x60, gbc.l());
        EXPECT(0xdaf5, gbc.sp());
        EXPECT(0xa404, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xa401));
        EXPECT(0x79, gbc.readMem(0xa402));
        EXPECT(0x70, gbc.readMem(0xa403));
        // DC 0196
        gbc.setState(0xc4dc, 0xacf8, 0xf240, 0x6ae, 0xda7b, 0x35f2, 0x1, 0x0);
        gbc.writeMem(0xc4dc, { 0xdc, 0x33, 0xca });
        gbc.step();
        EXPECT(0xf2, gbc.a());
        EXPECT(0x6, gbc.b());
        EXPECT(0xae, gbc.c());
        EXPECT(0xda, gbc.d());
        EXPECT(0x7b, gbc.e());
        EXPECT(0x35, gbc.h());
        EXPECT(0xf2, gbc.l());
        EXPECT(0xacf8, gbc.sp());
        EXPECT(0xc4df, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xc4dc));
        EXPECT(0x33, gbc.readMem(0xc4dd));
        EXPECT(0xca, gbc.readMem(0xc4de));
        // DC 0197
        gbc.setState(0x2d4d, 0xf21e, 0xd5c0, 0x19ba, 0xe198, 0xfd42, 0x1, 0x1);
        gbc.writeMem(0x2d4d, { 0xdc, 0xd, 0x8b });
        gbc.step();
        EXPECT(0xd5, gbc.a());
        EXPECT(0x19, gbc.b());
        EXPECT(0xba, gbc.c());
        EXPECT(0xe1, gbc.d());
        EXPECT(0x98, gbc.e());
        EXPECT(0xfd, gbc.h());
        EXPECT(0x42, gbc.l());
        EXPECT(0xf21e, gbc.sp());
        EXPECT(0x2d50, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 0198
        gbc.setState(0x89f4, 0xe184, 0xd700, 0xa801, 0xecd6, 0xcd66, 0x1, 0x1);
        gbc.writeMem(0x89f4, { 0xdc, 0x14, 0x6c });
        gbc.step();
        EXPECT(0xd7, gbc.a());
        EXPECT(0xa8, gbc.b());
        EXPECT(0x1, gbc.c());
        EXPECT(0xec, gbc.d());
        EXPECT(0xd6, gbc.e());
        EXPECT(0xcd, gbc.h());
        EXPECT(0x66, gbc.l());
        EXPECT(0xe184, gbc.sp());
        EXPECT(0x89f7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0x89f4));
        EXPECT(0x14, gbc.readMem(0x89f5));
        EXPECT(0x6c, gbc.readMem(0x89f6));
        // DC 0199
        gbc.setState(0x55f0, 0xdd81, 0xcd00, 0xef98, 0x55e1, 0x5492, 0x0, 0x0);
        gbc.writeMem(0x55f0, { 0xdc, 0x24, 0x34 });
        gbc.step();
        EXPECT(0xcd, gbc.a());
        EXPECT(0xef, gbc.b());
        EXPECT(0x98, gbc.c());
        EXPECT(0x55, gbc.d());
        EXPECT(0xe1, gbc.e());
        EXPECT(0x54, gbc.h());
        EXPECT(0x92, gbc.l());
        EXPECT(0xdd81, gbc.sp());
        EXPECT(0x55f3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 019A
        gbc.setState(0x19d6, 0x4a4d, 0xa320, 0xf14, 0xa7e9, 0xb0de, 0x0, 0x0);
        gbc.writeMem(0x19d6, { 0xdc, 0xbe, 0x25 });
        gbc.step();
        EXPECT(0xa3, gbc.a());
        EXPECT(0xf, gbc.b());
        EXPECT(0x14, gbc.c());
        EXPECT(0xa7, gbc.d());
        EXPECT(0xe9, gbc.e());
        EXPECT(0xb0, gbc.h());
        EXPECT(0xde, gbc.l());
        EXPECT(0x4a4d, gbc.sp());
        EXPECT(0x19d9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 019D
        gbc.setState(0x8425, 0xeaa5, 0x57b0, 0xc8da, 0xda44, 0x2559, 0x0, 0x1);
        gbc.writeMem(0x8425, { 0xdc, 0x46, 0x5b });
        gbc.writeMem(0xeaa3, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x57, gbc.a());
        EXPECT(0xc8, gbc.b());
        EXPECT(0xda, gbc.c());
        EXPECT(0xda, gbc.d());
        EXPECT(0x44, gbc.e());
        EXPECT(0x25, gbc.h());
        EXPECT(0x59, gbc.l());
        EXPECT(0xeaa3, gbc.sp());
        EXPECT(0x5b46, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0x8425));
        EXPECT(0x46, gbc.readMem(0x8426));
        EXPECT(0x5b, gbc.readMem(0x8427));
        EXPECT(0x28, gbc.readMem(0xeaa3));
        EXPECT(0x84, gbc.readMem(0xeaa4));
        // DC 019E
        gbc.setState(0xe5d3, 0xfc54, 0x93e0, 0xe4fe, 0x2d24, 0xa2f4, 0x1, 0x1);
        gbc.writeMem(0xe5d3, { 0xdc, 0x23, 0x50 });
        gbc.step();
        EXPECT(0x93, gbc.a());
        EXPECT(0xe4, gbc.b());
        EXPECT(0xfe, gbc.c());
        EXPECT(0x2d, gbc.d());
        EXPECT(0x24, gbc.e());
        EXPECT(0xa2, gbc.h());
        EXPECT(0xf4, gbc.l());
        EXPECT(0xfc54, gbc.sp());
        EXPECT(0xe5d6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xe5d3));
        EXPECT(0x23, gbc.readMem(0xe5d4));
        EXPECT(0x50, gbc.readMem(0xe5d5));
        // DC 019F
        gbc.setState(0x5b5, 0xe4b2, 0xe800, 0xe572, 0xe37b, 0x6c33, 0x0, 0x0);
        gbc.writeMem(0x5b5, { 0xdc, 0x59, 0x3 });
        gbc.step();
        EXPECT(0xe8, gbc.a());
        EXPECT(0xe5, gbc.b());
        EXPECT(0x72, gbc.c());
        EXPECT(0xe3, gbc.d());
        EXPECT(0x7b, gbc.e());
        EXPECT(0x6c, gbc.h());
        EXPECT(0x33, gbc.l());
        EXPECT(0xe4b2, gbc.sp());
        EXPECT(0x5b8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 01A1
        gbc.setState(0xc5ba, 0x124f, 0x7240, 0x7d6e, 0x6326, 0x232e, 0x1, 0x1);
        gbc.writeMem(0xc5ba, { 0xdc, 0xf8, 0xdb });
        gbc.step();
        EXPECT(0x72, gbc.a());
        EXPECT(0x7d, gbc.b());
        EXPECT(0x6e, gbc.c());
        EXPECT(0x63, gbc.d());
        EXPECT(0x26, gbc.e());
        EXPECT(0x23, gbc.h());
        EXPECT(0x2e, gbc.l());
        EXPECT(0x124f, gbc.sp());
        EXPECT(0xc5bd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xc5ba));
        EXPECT(0xf8, gbc.readMem(0xc5bb));
        EXPECT(0xdb, gbc.readMem(0xc5bc));
        // DC 01A2
        gbc.setState(0xcfdb, 0xdef4, 0x21f0, 0x7814, 0xe8a5, 0x8795, 0x0, 0x0);
        gbc.writeMem(0xcfdb, { 0xdc, 0xc3, 0xde });
        gbc.writeMem(0xdef2, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x21, gbc.a());
        EXPECT(0x78, gbc.b());
        EXPECT(0x14, gbc.c());
        EXPECT(0xe8, gbc.d());
        EXPECT(0xa5, gbc.e());
        EXPECT(0x87, gbc.h());
        EXPECT(0x95, gbc.l());
        EXPECT(0xdef2, gbc.sp());
        EXPECT(0xdec3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xcfdb));
        EXPECT(0xc3, gbc.readMem(0xcfdc));
        EXPECT(0xde, gbc.readMem(0xcfdd));
        EXPECT(0xde, gbc.readMem(0xdef2));
        EXPECT(0xcf, gbc.readMem(0xdef3));
        // DC 01A3
        gbc.setState(0xa96, 0xc1d7, 0xeb40, 0x8cc3, 0x3b48, 0x7cd9, 0x1, 0x1);
        gbc.writeMem(0xa96, { 0xdc, 0xe, 0x17 });
        gbc.step();
        EXPECT(0xeb, gbc.a());
        EXPECT(0x8c, gbc.b());
        EXPECT(0xc3, gbc.c());
        EXPECT(0x3b, gbc.d());
        EXPECT(0x48, gbc.e());
        EXPECT(0x7c, gbc.h());
        EXPECT(0xd9, gbc.l());
        EXPECT(0xc1d7, gbc.sp());
        EXPECT(0xa99, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 01A4
        gbc.setState(0xb9e3, 0x1962, 0x4ae0, 0x77ff, 0x4806, 0x50f4, 0x0, 0x1);
        gbc.writeMem(0xb9e3, { 0xdc, 0xf7, 0x43 });
        gbc.step();
        EXPECT(0x4a, gbc.a());
        EXPECT(0x77, gbc.b());
        EXPECT(0xff, gbc.c());
        EXPECT(0x48, gbc.d());
        EXPECT(0x6, gbc.e());
        EXPECT(0x50, gbc.h());
        EXPECT(0xf4, gbc.l());
        EXPECT(0x1962, gbc.sp());
        EXPECT(0xb9e6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xb9e3));
        EXPECT(0xf7, gbc.readMem(0xb9e4));
        EXPECT(0x43, gbc.readMem(0xb9e5));
        // DC 01A5
        gbc.setState(0xc62b, 0xf255, 0xe400, 0x997c, 0x8f95, 0xf287, 0x1, 0x1);
        gbc.writeMem(0xc62b, { 0xdc, 0x1a, 0xb7 });
        gbc.step();
        EXPECT(0xe4, gbc.a());
        EXPECT(0x99, gbc.b());
        EXPECT(0x7c, gbc.c());
        EXPECT(0x8f, gbc.d());
        EXPECT(0x95, gbc.e());
        EXPECT(0xf2, gbc.h());
        EXPECT(0x87, gbc.l());
        EXPECT(0xf255, gbc.sp());
        EXPECT(0xc62e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xc62b));
        EXPECT(0x1a, gbc.readMem(0xc62c));
        EXPECT(0xb7, gbc.readMem(0xc62d));
        // DC 01A7
        gbc.setState(0x6587, 0xcefa, 0x63c0, 0x7ba1, 0xdd2, 0x5e89, 0x1, 0x1);
        gbc.writeMem(0x6587, { 0xdc, 0x67, 0xda });
        gbc.step();
        EXPECT(0x63, gbc.a());
        EXPECT(0x7b, gbc.b());
        EXPECT(0xa1, gbc.c());
        EXPECT(0xd, gbc.d());
        EXPECT(0xd2, gbc.e());
        EXPECT(0x5e, gbc.h());
        EXPECT(0x89, gbc.l());
        EXPECT(0xcefa, gbc.sp());
        EXPECT(0x658a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 01A8
        gbc.setState(0x8717, 0xf048, 0xd600, 0xa243, 0x82d9, 0xfc1e, 0x1, 0x1);
        gbc.writeMem(0x8717, { 0xdc, 0x52, 0xeb });
        gbc.step();
        EXPECT(0xd6, gbc.a());
        EXPECT(0xa2, gbc.b());
        EXPECT(0x43, gbc.c());
        EXPECT(0x82, gbc.d());
        EXPECT(0xd9, gbc.e());
        EXPECT(0xfc, gbc.h());
        EXPECT(0x1e, gbc.l());
        EXPECT(0xf048, gbc.sp());
        EXPECT(0x871a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0x8717));
        EXPECT(0x52, gbc.readMem(0x8718));
        EXPECT(0xeb, gbc.readMem(0x8719));
        // DC 01A9
        gbc.setState(0xcb31, 0xd819, 0xdf70, 0xba95, 0x999f, 0x6f1d, 0x0, 0x0);
        gbc.writeMem(0xcb31, { 0xdc, 0xc3, 0x5f });
        gbc.writeMem(0xd817, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xdf, gbc.a());
        EXPECT(0xba, gbc.b());
        EXPECT(0x95, gbc.c());
        EXPECT(0x99, gbc.d());
        EXPECT(0x9f, gbc.e());
        EXPECT(0x6f, gbc.h());
        EXPECT(0x1d, gbc.l());
        EXPECT(0xd817, gbc.sp());
        EXPECT(0x5fc3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xcb31));
        EXPECT(0xc3, gbc.readMem(0xcb32));
        EXPECT(0x5f, gbc.readMem(0xcb33));
        EXPECT(0x34, gbc.readMem(0xd817));
        EXPECT(0xcb, gbc.readMem(0xd818));
        // DC 01AA
        gbc.setState(0x4852, 0x9b6f, 0xd20, 0xf918, 0xd8de, 0x86d9, 0x1, 0x1);
        gbc.writeMem(0x4852, { 0xdc, 0xce, 0x2d });
        gbc.step();
        EXPECT(0xd, gbc.a());
        EXPECT(0xf9, gbc.b());
        EXPECT(0x18, gbc.c());
        EXPECT(0xd8, gbc.d());
        EXPECT(0xde, gbc.e());
        EXPECT(0x86, gbc.h());
        EXPECT(0xd9, gbc.l());
        EXPECT(0x9b6f, gbc.sp());
        EXPECT(0x4855, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 01AB
        gbc.setState(0xe668, 0xb576, 0x1900, 0x2f1c, 0x4dbd, 0xc9e, 0x0, 0x0);
        gbc.writeMem(0xe668, { 0xdc, 0xe0, 0xe0 });
        gbc.step();
        EXPECT(0x19, gbc.a());
        EXPECT(0x2f, gbc.b());
        EXPECT(0x1c, gbc.c());
        EXPECT(0x4d, gbc.d());
        EXPECT(0xbd, gbc.e());
        EXPECT(0xc, gbc.h());
        EXPECT(0x9e, gbc.l());
        EXPECT(0xb576, gbc.sp());
        EXPECT(0xe66b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xe668));
        EXPECT(0xe0, gbc.readMem(0xe669));
        EXPECT(0xe0, gbc.readMem(0xe66a));
        // DC 01AC
        gbc.setState(0xc62d, 0x980f, 0x79b0, 0x6d1e, 0x98de, 0x2642, 0x0, 0x0);
        gbc.writeMem(0x980d, { 0x0, 0x0 });
        gbc.writeMem(0xc62d, { 0xdc, 0xce, 0x1e });
        gbc.step();
        EXPECT(0x79, gbc.a());
        EXPECT(0x6d, gbc.b());
        EXPECT(0x1e, gbc.c());
        EXPECT(0x98, gbc.d());
        EXPECT(0xde, gbc.e());
        EXPECT(0x26, gbc.h());
        EXPECT(0x42, gbc.l());
        EXPECT(0x980d, gbc.sp());
        EXPECT(0x1ece, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x30, gbc.readMem(0x980d));
        EXPECT(0xc6, gbc.readMem(0x980e));
        EXPECT(0xdc, gbc.readMem(0xc62d));
        EXPECT(0xce, gbc.readMem(0xc62e));
        EXPECT(0x1e, gbc.readMem(0xc62f));
        // DC 01AE
        gbc.setState(0x923b, 0xbe02, 0xbb60, 0x983e, 0xa49d, 0xceb5, 0x0, 0x1);
        gbc.writeMem(0x923b, { 0xdc, 0x63, 0x74 });
        gbc.step();
        EXPECT(0xbb, gbc.a());
        EXPECT(0x98, gbc.b());
        EXPECT(0x3e, gbc.c());
        EXPECT(0xa4, gbc.d());
        EXPECT(0x9d, gbc.e());
        EXPECT(0xce, gbc.h());
        EXPECT(0xb5, gbc.l());
        EXPECT(0xbe02, gbc.sp());
        EXPECT(0x923e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0x923b));
        EXPECT(0x63, gbc.readMem(0x923c));
        EXPECT(0x74, gbc.readMem(0x923d));
        // DC 01AF
        gbc.setState(0xc8ce, 0x1781, 0xe880, 0xac0e, 0x749d, 0xde0a, 0x0, 0x1);
        gbc.writeMem(0xc8ce, { 0xdc, 0x1f, 0x26 });
        gbc.step();
        EXPECT(0xe8, gbc.a());
        EXPECT(0xac, gbc.b());
        EXPECT(0xe, gbc.c());
        EXPECT(0x74, gbc.d());
        EXPECT(0x9d, gbc.e());
        EXPECT(0xde, gbc.h());
        EXPECT(0xa, gbc.l());
        EXPECT(0x1781, gbc.sp());
        EXPECT(0xc8d1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xc8ce));
        EXPECT(0x1f, gbc.readMem(0xc8cf));
        EXPECT(0x26, gbc.readMem(0xc8d0));
        // DC 01B0
        gbc.setState(0xb204, 0xba75, 0x530, 0x5456, 0x7132, 0x3220, 0x1, 0x1);
        gbc.writeMem(0xb204, { 0xdc, 0x90, 0x51 });
        gbc.writeMem(0xba73, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x5, gbc.a());
        EXPECT(0x54, gbc.b());
        EXPECT(0x56, gbc.c());
        EXPECT(0x71, gbc.d());
        EXPECT(0x32, gbc.e());
        EXPECT(0x32, gbc.h());
        EXPECT(0x20, gbc.l());
        EXPECT(0xba73, gbc.sp());
        EXPECT(0x5190, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xb204));
        EXPECT(0x90, gbc.readMem(0xb205));
        EXPECT(0x51, gbc.readMem(0xb206));
        EXPECT(0x7, gbc.readMem(0xba73));
        EXPECT(0xb2, gbc.readMem(0xba74));
        // DC 01B1
        gbc.setState(0xa853, 0xc36a, 0x78a0, 0x861c, 0x6328, 0xa93e, 0x1, 0x0);
        gbc.writeMem(0xa853, { 0xdc, 0x9a, 0x65 });
        gbc.step();
        EXPECT(0x78, gbc.a());
        EXPECT(0x86, gbc.b());
        EXPECT(0x1c, gbc.c());
        EXPECT(0x63, gbc.d());
        EXPECT(0x28, gbc.e());
        EXPECT(0xa9, gbc.h());
        EXPECT(0x3e, gbc.l());
        EXPECT(0xc36a, gbc.sp());
        EXPECT(0xa856, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xa853));
        EXPECT(0x9a, gbc.readMem(0xa854));
        EXPECT(0x65, gbc.readMem(0xa855));
        // DC 01B3
        gbc.setState(0x44cc, 0xf410, 0x9310, 0x94fc, 0x3012, 0x1619, 0x0, 0x0);
        gbc.writeMem(0x44cc, { 0xdc, 0x4c, 0x84 });
        gbc.writeMem(0xf40e, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x93, gbc.a());
        EXPECT(0x94, gbc.b());
        EXPECT(0xfc, gbc.c());
        EXPECT(0x30, gbc.d());
        EXPECT(0x12, gbc.e());
        EXPECT(0x16, gbc.h());
        EXPECT(0x19, gbc.l());
        EXPECT(0xf40e, gbc.sp());
        EXPECT(0x844c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcf, gbc.readMem(0xf40e));
        EXPECT(0x44, gbc.readMem(0xf40f));
        // DC 01B4
        gbc.setState(0xbed4, 0xff4a, 0x2810, 0x98c1, 0x8421, 0xcac, 0x0, 0x0);
        gbc.writeMem(0xbed4, { 0xdc, 0x6e, 0x5b });
        gbc.writeMem(0xff48, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x28, gbc.a());
        EXPECT(0x98, gbc.b());
        EXPECT(0xc1, gbc.c());
        EXPECT(0x84, gbc.d());
        EXPECT(0x21, gbc.e());
        EXPECT(0xc, gbc.h());
        EXPECT(0xac, gbc.l());
        EXPECT(0xff48, gbc.sp());
        EXPECT(0x5b6e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xbed4));
        EXPECT(0x6e, gbc.readMem(0xbed5));
        EXPECT(0x5b, gbc.readMem(0xbed6));
        EXPECT(0xd7, gbc.readMem(0xff48));
        EXPECT(0xbe, gbc.readMem(0xff49));
        // DC 01B5
        gbc.setState(0x4572, 0xc8d1, 0xe2c0, 0xb345, 0x60b, 0xf579, 0x0, 0x1);
        gbc.writeMem(0x4572, { 0xdc, 0x14, 0x91 });
        gbc.step();
        EXPECT(0xe2, gbc.a());
        EXPECT(0xb3, gbc.b());
        EXPECT(0x45, gbc.c());
        EXPECT(0x6, gbc.d());
        EXPECT(0xb, gbc.e());
        EXPECT(0xf5, gbc.h());
        EXPECT(0x79, gbc.l());
        EXPECT(0xc8d1, gbc.sp());
        EXPECT(0x4575, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 01B6
        gbc.setState(0xc27d, 0x5955, 0x1640, 0xffa3, 0xdd3b, 0x6609, 0x0, 0x0);
        gbc.writeMem(0xc27d, { 0xdc, 0x55, 0x19 });
        gbc.step();
        EXPECT(0x16, gbc.a());
        EXPECT(0xff, gbc.b());
        EXPECT(0xa3, gbc.c());
        EXPECT(0xdd, gbc.d());
        EXPECT(0x3b, gbc.e());
        EXPECT(0x66, gbc.h());
        EXPECT(0x9, gbc.l());
        EXPECT(0x5955, gbc.sp());
        EXPECT(0xc280, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xc27d));
        EXPECT(0x55, gbc.readMem(0xc27e));
        EXPECT(0x19, gbc.readMem(0xc27f));
        // DC 01B7
        gbc.setState(0xb188, 0x4b6b, 0x5500, 0x1093, 0xc070, 0xb823, 0x1, 0x1);
        gbc.writeMem(0xb188, { 0xdc, 0x9f, 0x52 });
        gbc.step();
        EXPECT(0x55, gbc.a());
        EXPECT(0x10, gbc.b());
        EXPECT(0x93, gbc.c());
        EXPECT(0xc0, gbc.d());
        EXPECT(0x70, gbc.e());
        EXPECT(0xb8, gbc.h());
        EXPECT(0x23, gbc.l());
        EXPECT(0x4b6b, gbc.sp());
        EXPECT(0xb18b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xb188));
        EXPECT(0x9f, gbc.readMem(0xb189));
        EXPECT(0x52, gbc.readMem(0xb18a));
        // DC 01B8
        gbc.setState(0x306e, 0x19a1, 0x9300, 0x822e, 0x6f70, 0x81cd, 0x1, 0x0);
        gbc.writeMem(0x306e, { 0xdc, 0x16, 0xd2 });
        gbc.step();
        EXPECT(0x93, gbc.a());
        EXPECT(0x82, gbc.b());
        EXPECT(0x2e, gbc.c());
        EXPECT(0x6f, gbc.d());
        EXPECT(0x70, gbc.e());
        EXPECT(0x81, gbc.h());
        EXPECT(0xcd, gbc.l());
        EXPECT(0x19a1, gbc.sp());
        EXPECT(0x3071, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 01B9
        gbc.setState(0x5202, 0x31ee, 0xbfc0, 0xb861, 0xf364, 0xc5ef, 0x0, 0x0);
        gbc.writeMem(0x5202, { 0xdc, 0xc3, 0x4 });
        gbc.step();
        EXPECT(0xbf, gbc.a());
        EXPECT(0xb8, gbc.b());
        EXPECT(0x61, gbc.c());
        EXPECT(0xf3, gbc.d());
        EXPECT(0x64, gbc.e());
        EXPECT(0xc5, gbc.h());
        EXPECT(0xef, gbc.l());
        EXPECT(0x31ee, gbc.sp());
        EXPECT(0x5205, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 01BA
        gbc.setState(0xfda, 0x8e08, 0x3090, 0xfefa, 0xb4fe, 0xd310, 0x0, 0x0);
        gbc.writeMem(0xfda, { 0xdc, 0x6, 0x64 });
        gbc.writeMem(0x8e06, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x30, gbc.a());
        EXPECT(0xfe, gbc.b());
        EXPECT(0xfa, gbc.c());
        EXPECT(0xb4, gbc.d());
        EXPECT(0xfe, gbc.e());
        EXPECT(0xd3, gbc.h());
        EXPECT(0x10, gbc.l());
        EXPECT(0x8e06, gbc.sp());
        EXPECT(0x6406, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdd, gbc.readMem(0x8e06));
        EXPECT(0xf, gbc.readMem(0x8e07));
        // DC 01BB
        gbc.setState(0x7103, 0xdebc, 0x2a80, 0x941c, 0x9f38, 0x7fe1, 0x1, 0x1);
        gbc.writeMem(0x7103, { 0xdc, 0xb5, 0x5e });
        gbc.step();
        EXPECT(0x2a, gbc.a());
        EXPECT(0x94, gbc.b());
        EXPECT(0x1c, gbc.c());
        EXPECT(0x9f, gbc.d());
        EXPECT(0x38, gbc.e());
        EXPECT(0x7f, gbc.h());
        EXPECT(0xe1, gbc.l());
        EXPECT(0xdebc, gbc.sp());
        EXPECT(0x7106, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 01BD
        gbc.setState(0x286c, 0xdd2b, 0x5980, 0xcb1f, 0xb5e5, 0x106f, 0x0, 0x0);
        gbc.writeMem(0x286c, { 0xdc, 0xbc, 0x92 });
        gbc.step();
        EXPECT(0x59, gbc.a());
        EXPECT(0xcb, gbc.b());
        EXPECT(0x1f, gbc.c());
        EXPECT(0xb5, gbc.d());
        EXPECT(0xe5, gbc.e());
        EXPECT(0x10, gbc.h());
        EXPECT(0x6f, gbc.l());
        EXPECT(0xdd2b, gbc.sp());
        EXPECT(0x286f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 01BE
        gbc.setState(0x1972, 0x1214, 0x2420, 0xe1b9, 0xc84a, 0xc70c, 0x0, 0x1);
        gbc.writeMem(0x1972, { 0xdc, 0x8e, 0x54 });
        gbc.step();
        EXPECT(0x24, gbc.a());
        EXPECT(0xe1, gbc.b());
        EXPECT(0xb9, gbc.c());
        EXPECT(0xc8, gbc.d());
        EXPECT(0x4a, gbc.e());
        EXPECT(0xc7, gbc.h());
        EXPECT(0xc, gbc.l());
        EXPECT(0x1214, gbc.sp());
        EXPECT(0x1975, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 01BF
        gbc.setState(0xa43d, 0x6f65, 0x44e0, 0x1739, 0x59eb, 0x9ef5, 0x0, 0x1);
        gbc.writeMem(0xa43d, { 0xdc, 0xa4, 0xa9 });
        gbc.step();
        EXPECT(0x44, gbc.a());
        EXPECT(0x17, gbc.b());
        EXPECT(0x39, gbc.c());
        EXPECT(0x59, gbc.d());
        EXPECT(0xeb, gbc.e());
        EXPECT(0x9e, gbc.h());
        EXPECT(0xf5, gbc.l());
        EXPECT(0x6f65, gbc.sp());
        EXPECT(0xa440, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xa43d));
        EXPECT(0xa4, gbc.readMem(0xa43e));
        EXPECT(0xa9, gbc.readMem(0xa43f));
        // DC 01C1
        gbc.setState(0xb357, 0xe918, 0x3e20, 0xe2c3, 0xff62, 0x712a, 0x0, 0x0);
        gbc.writeMem(0xb357, { 0xdc, 0x24, 0x6e });
        gbc.step();
        EXPECT(0x3e, gbc.a());
        EXPECT(0xe2, gbc.b());
        EXPECT(0xc3, gbc.c());
        EXPECT(0xff, gbc.d());
        EXPECT(0x62, gbc.e());
        EXPECT(0x71, gbc.h());
        EXPECT(0x2a, gbc.l());
        EXPECT(0xe918, gbc.sp());
        EXPECT(0xb35a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xb357));
        EXPECT(0x24, gbc.readMem(0xb358));
        EXPECT(0x6e, gbc.readMem(0xb359));
        // DC 01C2
        gbc.setState(0xc43, 0x891e, 0x5970, 0xe20, 0x30f4, 0x8bb4, 0x0, 0x0);
        gbc.writeMem(0xc43, { 0xdc, 0x38, 0x45 });
        gbc.writeMem(0x891c, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x59, gbc.a());
        EXPECT(0xe, gbc.b());
        EXPECT(0x20, gbc.c());
        EXPECT(0x30, gbc.d());
        EXPECT(0xf4, gbc.e());
        EXPECT(0x8b, gbc.h());
        EXPECT(0xb4, gbc.l());
        EXPECT(0x891c, gbc.sp());
        EXPECT(0x4538, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x46, gbc.readMem(0x891c));
        EXPECT(0xc, gbc.readMem(0x891d));
        // DC 01C3
        gbc.setState(0x2817, 0x4acc, 0x29e0, 0x61ff, 0x752d, 0x825, 0x1, 0x0);
        gbc.writeMem(0x2817, { 0xdc, 0xec, 0x2b });
        gbc.step();
        EXPECT(0x29, gbc.a());
        EXPECT(0x61, gbc.b());
        EXPECT(0xff, gbc.c());
        EXPECT(0x75, gbc.d());
        EXPECT(0x2d, gbc.e());
        EXPECT(0x8, gbc.h());
        EXPECT(0x25, gbc.l());
        EXPECT(0x4acc, gbc.sp());
        EXPECT(0x281a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 01C4
        gbc.setState(0xb853, 0xe8a4, 0x1810, 0x1f7b, 0xd244, 0xfd4, 0x0, 0x0);
        gbc.writeMem(0xb853, { 0xdc, 0x2d, 0x1b });
        gbc.writeMem(0xe8a2, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x18, gbc.a());
        EXPECT(0x1f, gbc.b());
        EXPECT(0x7b, gbc.c());
        EXPECT(0xd2, gbc.d());
        EXPECT(0x44, gbc.e());
        EXPECT(0xf, gbc.h());
        EXPECT(0xd4, gbc.l());
        EXPECT(0xe8a2, gbc.sp());
        EXPECT(0x1b2d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xb853));
        EXPECT(0x2d, gbc.readMem(0xb854));
        EXPECT(0x1b, gbc.readMem(0xb855));
        EXPECT(0x56, gbc.readMem(0xe8a2));
        EXPECT(0xb8, gbc.readMem(0xe8a3));
        // DC 01C5
        gbc.setState(0x4271, 0xbda4, 0x6b00, 0x165b, 0x1ac6, 0x73d3, 0x1, 0x1);
        gbc.writeMem(0x4271, { 0xdc, 0x12, 0xe8 });
        gbc.step();
        EXPECT(0x6b, gbc.a());
        EXPECT(0x16, gbc.b());
        EXPECT(0x5b, gbc.c());
        EXPECT(0x1a, gbc.d());
        EXPECT(0xc6, gbc.e());
        EXPECT(0x73, gbc.h());
        EXPECT(0xd3, gbc.l());
        EXPECT(0xbda4, gbc.sp());
        EXPECT(0x4274, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 01C7
        gbc.setState(0x1062, 0xb343, 0x82f0, 0xf087, 0x2e97, 0xc6, 0x1, 0x1);
        gbc.writeMem(0x1062, { 0xdc, 0x17, 0x36 });
        gbc.writeMem(0xb341, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x82, gbc.a());
        EXPECT(0xf0, gbc.b());
        EXPECT(0x87, gbc.c());
        EXPECT(0x2e, gbc.d());
        EXPECT(0x97, gbc.e());
        EXPECT(0x0, gbc.h());
        EXPECT(0xc6, gbc.l());
        EXPECT(0xb341, gbc.sp());
        EXPECT(0x3617, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x65, gbc.readMem(0xb341));
        EXPECT(0x10, gbc.readMem(0xb342));
        // DC 01C8
        gbc.setState(0xc213, 0xd97e, 0x8cb0, 0x7b21, 0x5e7f, 0x5a95, 0x1, 0x1);
        gbc.writeMem(0xc213, { 0xdc, 0xb5, 0xc2 });
        gbc.writeMem(0xd97c, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x8c, gbc.a());
        EXPECT(0x7b, gbc.b());
        EXPECT(0x21, gbc.c());
        EXPECT(0x5e, gbc.d());
        EXPECT(0x7f, gbc.e());
        EXPECT(0x5a, gbc.h());
        EXPECT(0x95, gbc.l());
        EXPECT(0xd97c, gbc.sp());
        EXPECT(0xc2b5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xc213));
        EXPECT(0xb5, gbc.readMem(0xc214));
        EXPECT(0xc2, gbc.readMem(0xc215));
        EXPECT(0x16, gbc.readMem(0xd97c));
        EXPECT(0xc2, gbc.readMem(0xd97d));
        // DC 01C9
        gbc.setState(0x81c4, 0x8652, 0x8210, 0xae, 0x96e4, 0x1e43, 0x1, 0x1);
        gbc.writeMem(0x81c4, { 0xdc, 0xbf, 0x3a });
        gbc.writeMem(0x8650, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x82, gbc.a());
        EXPECT(0x0, gbc.b());
        EXPECT(0xae, gbc.c());
        EXPECT(0x96, gbc.d());
        EXPECT(0xe4, gbc.e());
        EXPECT(0x1e, gbc.h());
        EXPECT(0x43, gbc.l());
        EXPECT(0x8650, gbc.sp());
        EXPECT(0x3abf, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0x81c4));
        EXPECT(0xbf, gbc.readMem(0x81c5));
        EXPECT(0x3a, gbc.readMem(0x81c6));
        EXPECT(0xc7, gbc.readMem(0x8650));
        EXPECT(0x81, gbc.readMem(0x8651));
        // DC 01CA
        gbc.setState(0x9494, 0x8b6c, 0x32f0, 0xd297, 0xf772, 0xe6db, 0x1, 0x1);
        gbc.writeMem(0x8b6a, { 0x0, 0x0 });
        gbc.writeMem(0x9494, { 0xdc, 0x4f, 0xc });
        gbc.step();
        EXPECT(0x32, gbc.a());
        EXPECT(0xd2, gbc.b());
        EXPECT(0x97, gbc.c());
        EXPECT(0xf7, gbc.d());
        EXPECT(0x72, gbc.e());
        EXPECT(0xe6, gbc.h());
        EXPECT(0xdb, gbc.l());
        EXPECT(0x8b6a, gbc.sp());
        EXPECT(0xc4f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x97, gbc.readMem(0x8b6a));
        EXPECT(0x94, gbc.readMem(0x8b6b));
        EXPECT(0xdc, gbc.readMem(0x9494));
        EXPECT(0x4f, gbc.readMem(0x9495));
        EXPECT(0xc, gbc.readMem(0x9496));
        // DC 01CB
        gbc.setState(0xc0d4, 0xcba7, 0xbd20, 0x8f18, 0x4988, 0x3b19, 0x1, 0x0);
        gbc.writeMem(0xc0d4, { 0xdc, 0x5a, 0xc1 });
        gbc.step();
        EXPECT(0xbd, gbc.a());
        EXPECT(0x8f, gbc.b());
        EXPECT(0x18, gbc.c());
        EXPECT(0x49, gbc.d());
        EXPECT(0x88, gbc.e());
        EXPECT(0x3b, gbc.h());
        EXPECT(0x19, gbc.l());
        EXPECT(0xcba7, gbc.sp());
        EXPECT(0xc0d7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xc0d4));
        EXPECT(0x5a, gbc.readMem(0xc0d5));
        EXPECT(0xc1, gbc.readMem(0xc0d6));
        // DC 01CF
        gbc.setState(0xe3b6, 0x5726, 0x34a0, 0xd78d, 0x472c, 0x5050, 0x1, 0x0);
        gbc.writeMem(0xe3b6, { 0xdc, 0x78, 0x90 });
        gbc.step();
        EXPECT(0x34, gbc.a());
        EXPECT(0xd7, gbc.b());
        EXPECT(0x8d, gbc.c());
        EXPECT(0x47, gbc.d());
        EXPECT(0x2c, gbc.e());
        EXPECT(0x50, gbc.h());
        EXPECT(0x50, gbc.l());
        EXPECT(0x5726, gbc.sp());
        EXPECT(0xe3b9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xe3b6));
        EXPECT(0x78, gbc.readMem(0xe3b7));
        EXPECT(0x90, gbc.readMem(0xe3b8));
        // DC 01D0
        gbc.setState(0x6daf, 0x92d9, 0x5ea0, 0xb5d, 0xa472, 0xe8, 0x0, 0x1);
        gbc.writeMem(0x6daf, { 0xdc, 0x8d, 0x43 });
        gbc.step();
        EXPECT(0x5e, gbc.a());
        EXPECT(0xb, gbc.b());
        EXPECT(0x5d, gbc.c());
        EXPECT(0xa4, gbc.d());
        EXPECT(0x72, gbc.e());
        EXPECT(0x0, gbc.h());
        EXPECT(0xe8, gbc.l());
        EXPECT(0x92d9, gbc.sp());
        EXPECT(0x6db2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 01D2
        gbc.setState(0x8bfc, 0xfac0, 0xb820, 0x5d86, 0x46b4, 0x148, 0x1, 0x0);
        gbc.writeMem(0x8bfc, { 0xdc, 0x19, 0x3e });
        gbc.step();
        EXPECT(0xb8, gbc.a());
        EXPECT(0x5d, gbc.b());
        EXPECT(0x86, gbc.c());
        EXPECT(0x46, gbc.d());
        EXPECT(0xb4, gbc.e());
        EXPECT(0x1, gbc.h());
        EXPECT(0x48, gbc.l());
        EXPECT(0xfac0, gbc.sp());
        EXPECT(0x8bff, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0x8bfc));
        EXPECT(0x19, gbc.readMem(0x8bfd));
        EXPECT(0x3e, gbc.readMem(0x8bfe));
        // DC 01D4
        gbc.setState(0x308e, 0xa984, 0x7b80, 0x298e, 0x60e1, 0xb304, 0x1, 0x0);
        gbc.writeMem(0x308e, { 0xdc, 0xbf, 0xe4 });
        gbc.step();
        EXPECT(0x7b, gbc.a());
        EXPECT(0x29, gbc.b());
        EXPECT(0x8e, gbc.c());
        EXPECT(0x60, gbc.d());
        EXPECT(0xe1, gbc.e());
        EXPECT(0xb3, gbc.h());
        EXPECT(0x4, gbc.l());
        EXPECT(0xa984, gbc.sp());
        EXPECT(0x3091, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 01D6
        gbc.setState(0xb766, 0x432d, 0xce0, 0xa87c, 0xefd7, 0x758, 0x1, 0x0);
        gbc.writeMem(0xb766, { 0xdc, 0x10, 0x9c });
        gbc.step();
        EXPECT(0xc, gbc.a());
        EXPECT(0xa8, gbc.b());
        EXPECT(0x7c, gbc.c());
        EXPECT(0xef, gbc.d());
        EXPECT(0xd7, gbc.e());
        EXPECT(0x7, gbc.h());
        EXPECT(0x58, gbc.l());
        EXPECT(0x432d, gbc.sp());
        EXPECT(0xb769, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xb766));
        EXPECT(0x10, gbc.readMem(0xb767));
        EXPECT(0x9c, gbc.readMem(0xb768));
        // DC 01D8
        gbc.setState(0x2a8f, 0xe04e, 0x7820, 0x5d50, 0xf779, 0xa725, 0x0, 0x1);
        gbc.writeMem(0x2a8f, { 0xdc, 0x61, 0xcd });
        gbc.step();
        EXPECT(0x78, gbc.a());
        EXPECT(0x5d, gbc.b());
        EXPECT(0x50, gbc.c());
        EXPECT(0xf7, gbc.d());
        EXPECT(0x79, gbc.e());
        EXPECT(0xa7, gbc.h());
        EXPECT(0x25, gbc.l());
        EXPECT(0xe04e, gbc.sp());
        EXPECT(0x2a92, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 01D9
        gbc.setState(0x8048, 0x7b57, 0xc500, 0xfa74, 0x7e8f, 0xf0d8, 0x0, 0x0);
        gbc.writeMem(0x8048, { 0xdc, 0xc0, 0x56 });
        gbc.step();
        EXPECT(0xc5, gbc.a());
        EXPECT(0xfa, gbc.b());
        EXPECT(0x74, gbc.c());
        EXPECT(0x7e, gbc.d());
        EXPECT(0x8f, gbc.e());
        EXPECT(0xf0, gbc.h());
        EXPECT(0xd8, gbc.l());
        EXPECT(0x7b57, gbc.sp());
        EXPECT(0x804b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0x8048));
        EXPECT(0xc0, gbc.readMem(0x8049));
        EXPECT(0x56, gbc.readMem(0x804a));
        // DC 01DA
        gbc.setState(0xc331, 0xe2ee, 0x5850, 0x1ef0, 0xd756, 0x252d, 0x0, 0x1);
        gbc.writeMem(0xc331, { 0xdc, 0x61, 0xd1 });
        gbc.writeMem(0xe2ec, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x58, gbc.a());
        EXPECT(0x1e, gbc.b());
        EXPECT(0xf0, gbc.c());
        EXPECT(0xd7, gbc.d());
        EXPECT(0x56, gbc.e());
        EXPECT(0x25, gbc.h());
        EXPECT(0x2d, gbc.l());
        EXPECT(0xe2ec, gbc.sp());
        EXPECT(0xd161, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xc331));
        EXPECT(0x61, gbc.readMem(0xc332));
        EXPECT(0xd1, gbc.readMem(0xc333));
        EXPECT(0x34, gbc.readMem(0xe2ec));
        EXPECT(0xc3, gbc.readMem(0xe2ed));
        // DC 01DB
        gbc.setState(0xa088, 0xd3b9, 0x7270, 0x36f1, 0x381d, 0x618, 0x1, 0x0);
        gbc.writeMem(0xa088, { 0xdc, 0x84, 0x98 });
        gbc.writeMem(0xd3b7, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x72, gbc.a());
        EXPECT(0x36, gbc.b());
        EXPECT(0xf1, gbc.c());
        EXPECT(0x38, gbc.d());
        EXPECT(0x1d, gbc.e());
        EXPECT(0x6, gbc.h());
        EXPECT(0x18, gbc.l());
        EXPECT(0xd3b7, gbc.sp());
        EXPECT(0x9884, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xa088));
        EXPECT(0x84, gbc.readMem(0xa089));
        EXPECT(0x98, gbc.readMem(0xa08a));
        EXPECT(0x8b, gbc.readMem(0xd3b7));
        EXPECT(0xa0, gbc.readMem(0xd3b8));
        // DC 01DD
        gbc.setState(0x16e4, 0xde1f, 0x7780, 0x9a0e, 0xa7c9, 0xda68, 0x0, 0x0);
        gbc.writeMem(0x16e4, { 0xdc, 0xfc, 0x22 });
        gbc.step();
        EXPECT(0x77, gbc.a());
        EXPECT(0x9a, gbc.b());
        EXPECT(0xe, gbc.c());
        EXPECT(0xa7, gbc.d());
        EXPECT(0xc9, gbc.e());
        EXPECT(0xda, gbc.h());
        EXPECT(0x68, gbc.l());
        EXPECT(0xde1f, gbc.sp());
        EXPECT(0x16e7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 01DF
        gbc.setState(0xaea, 0x9857, 0xc250, 0x92e8, 0xa865, 0xda28, 0x1, 0x1);
        gbc.writeMem(0xaea, { 0xdc, 0x25, 0x70 });
        gbc.writeMem(0x9855, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xc2, gbc.a());
        EXPECT(0x92, gbc.b());
        EXPECT(0xe8, gbc.c());
        EXPECT(0xa8, gbc.d());
        EXPECT(0x65, gbc.e());
        EXPECT(0xda, gbc.h());
        EXPECT(0x28, gbc.l());
        EXPECT(0x9855, gbc.sp());
        EXPECT(0x7025, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xed, gbc.readMem(0x9855));
        EXPECT(0xa, gbc.readMem(0x9856));
        // DC 01E0
        gbc.setState(0x9911, 0xa4f0, 0x53a0, 0x311b, 0x46db, 0x90c9, 0x1, 0x0);
        gbc.writeMem(0x9911, { 0xdc, 0x17, 0x21 });
        gbc.step();
        EXPECT(0x53, gbc.a());
        EXPECT(0x31, gbc.b());
        EXPECT(0x1b, gbc.c());
        EXPECT(0x46, gbc.d());
        EXPECT(0xdb, gbc.e());
        EXPECT(0x90, gbc.h());
        EXPECT(0xc9, gbc.l());
        EXPECT(0xa4f0, gbc.sp());
        EXPECT(0x9914, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0x9911));
        EXPECT(0x17, gbc.readMem(0x9912));
        EXPECT(0x21, gbc.readMem(0x9913));
        // DC 01E2
        gbc.setState(0xd8e1, 0xaf53, 0x51e0, 0x8d15, 0x4281, 0x440e, 0x1, 0x0);
        gbc.writeMem(0xd8e1, { 0xdc, 0x0, 0xf3 });
        gbc.step();
        EXPECT(0x51, gbc.a());
        EXPECT(0x8d, gbc.b());
        EXPECT(0x15, gbc.c());
        EXPECT(0x42, gbc.d());
        EXPECT(0x81, gbc.e());
        EXPECT(0x44, gbc.h());
        EXPECT(0xe, gbc.l());
        EXPECT(0xaf53, gbc.sp());
        EXPECT(0xd8e4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xd8e1));
        EXPECT(0x0, gbc.readMem(0xd8e2));
        EXPECT(0xf3, gbc.readMem(0xd8e3));
        // DC 01E3
        gbc.setState(0x6d51, 0x64f9, 0x31a0, 0x3c25, 0x8191, 0xbaa1, 0x0, 0x0);
        gbc.writeMem(0x6d51, { 0xdc, 0xdd, 0xaa });
        gbc.step();
        EXPECT(0x31, gbc.a());
        EXPECT(0x3c, gbc.b());
        EXPECT(0x25, gbc.c());
        EXPECT(0x81, gbc.d());
        EXPECT(0x91, gbc.e());
        EXPECT(0xba, gbc.h());
        EXPECT(0xa1, gbc.l());
        EXPECT(0x64f9, gbc.sp());
        EXPECT(0x6d54, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 01E4
        gbc.setState(0x16d4, 0xa681, 0x5b30, 0x34e8, 0xa0db, 0x63f3, 0x1, 0x0);
        gbc.writeMem(0x16d4, { 0xdc, 0x90, 0x3f });
        gbc.writeMem(0xa67f, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x5b, gbc.a());
        EXPECT(0x34, gbc.b());
        EXPECT(0xe8, gbc.c());
        EXPECT(0xa0, gbc.d());
        EXPECT(0xdb, gbc.e());
        EXPECT(0x63, gbc.h());
        EXPECT(0xf3, gbc.l());
        EXPECT(0xa67f, gbc.sp());
        EXPECT(0x3f90, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xd7, gbc.readMem(0xa67f));
        EXPECT(0x16, gbc.readMem(0xa680));
        // DC 01E6
        gbc.setState(0xb3d0, 0x88cd, 0xe010, 0x7f2c, 0xa36, 0xfd80, 0x1, 0x0);
        gbc.writeMem(0x88cb, { 0x0, 0x0 });
        gbc.writeMem(0xb3d0, { 0xdc, 0xa3, 0xc9 });
        gbc.step();
        EXPECT(0xe0, gbc.a());
        EXPECT(0x7f, gbc.b());
        EXPECT(0x2c, gbc.c());
        EXPECT(0xa, gbc.d());
        EXPECT(0x36, gbc.e());
        EXPECT(0xfd, gbc.h());
        EXPECT(0x80, gbc.l());
        EXPECT(0x88cb, gbc.sp());
        EXPECT(0xc9a3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xd3, gbc.readMem(0x88cb));
        EXPECT(0xb3, gbc.readMem(0x88cc));
        EXPECT(0xdc, gbc.readMem(0xb3d0));
        EXPECT(0xa3, gbc.readMem(0xb3d1));
        EXPECT(0xc9, gbc.readMem(0xb3d2));
        // DC 01E7
        gbc.setState(0x6612, 0xac5e, 0x78e0, 0x78ea, 0xad3d, 0x36fb, 0x0, 0x0);
        gbc.writeMem(0x6612, { 0xdc, 0x8, 0xf });
        gbc.step();
        EXPECT(0x78, gbc.a());
        EXPECT(0x78, gbc.b());
        EXPECT(0xea, gbc.c());
        EXPECT(0xad, gbc.d());
        EXPECT(0x3d, gbc.e());
        EXPECT(0x36, gbc.h());
        EXPECT(0xfb, gbc.l());
        EXPECT(0xac5e, gbc.sp());
        EXPECT(0x6615, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 01EB
        gbc.setState(0x2903, 0x77ca, 0x58a0, 0x494c, 0x6e4, 0x289a, 0x1, 0x0);
        gbc.writeMem(0x2903, { 0xdc, 0xfc, 0x6f });
        gbc.step();
        EXPECT(0x58, gbc.a());
        EXPECT(0x49, gbc.b());
        EXPECT(0x4c, gbc.c());
        EXPECT(0x6, gbc.d());
        EXPECT(0xe4, gbc.e());
        EXPECT(0x28, gbc.h());
        EXPECT(0x9a, gbc.l());
        EXPECT(0x77ca, gbc.sp());
        EXPECT(0x2906, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 01EC
        gbc.setState(0xd388, 0x4909, 0x92a0, 0x3313, 0x8be8, 0xf12, 0x1, 0x0);
        gbc.writeMem(0xd388, { 0xdc, 0x9e, 0xef });
        gbc.step();
        EXPECT(0x92, gbc.a());
        EXPECT(0x33, gbc.b());
        EXPECT(0x13, gbc.c());
        EXPECT(0x8b, gbc.d());
        EXPECT(0xe8, gbc.e());
        EXPECT(0xf, gbc.h());
        EXPECT(0x12, gbc.l());
        EXPECT(0x4909, gbc.sp());
        EXPECT(0xd38b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xd388));
        EXPECT(0x9e, gbc.readMem(0xd389));
        EXPECT(0xef, gbc.readMem(0xd38a));
        // DC 01ED
        gbc.setState(0xa1ef, 0xedca, 0x4f50, 0xad41, 0xd8c8, 0xc92a, 0x0, 0x0);
        gbc.writeMem(0xa1ef, { 0xdc, 0x14, 0x7d });
        gbc.writeMem(0xedc8, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x4f, gbc.a());
        EXPECT(0xad, gbc.b());
        EXPECT(0x41, gbc.c());
        EXPECT(0xd8, gbc.d());
        EXPECT(0xc8, gbc.e());
        EXPECT(0xc9, gbc.h());
        EXPECT(0x2a, gbc.l());
        EXPECT(0xedc8, gbc.sp());
        EXPECT(0x7d14, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xa1ef));
        EXPECT(0x14, gbc.readMem(0xa1f0));
        EXPECT(0x7d, gbc.readMem(0xa1f1));
        EXPECT(0xf2, gbc.readMem(0xedc8));
        EXPECT(0xa1, gbc.readMem(0xedc9));
        // DC 01EE
        gbc.setState(0x2850, 0x65b6, 0x4ea0, 0xd294, 0x5244, 0x89b7, 0x1, 0x0);
        gbc.writeMem(0x2850, { 0xdc, 0x6b, 0x58 });
        gbc.step();
        EXPECT(0x4e, gbc.a());
        EXPECT(0xd2, gbc.b());
        EXPECT(0x94, gbc.c());
        EXPECT(0x52, gbc.d());
        EXPECT(0x44, gbc.e());
        EXPECT(0x89, gbc.h());
        EXPECT(0xb7, gbc.l());
        EXPECT(0x65b6, gbc.sp());
        EXPECT(0x2853, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 01F0
        gbc.setState(0x9ace, 0x3b4d, 0xf020, 0xa184, 0x2d65, 0x9f, 0x0, 0x1);
        gbc.writeMem(0x9ace, { 0xdc, 0xa2, 0x2b });
        gbc.step();
        EXPECT(0xf0, gbc.a());
        EXPECT(0xa1, gbc.b());
        EXPECT(0x84, gbc.c());
        EXPECT(0x2d, gbc.d());
        EXPECT(0x65, gbc.e());
        EXPECT(0x0, gbc.h());
        EXPECT(0x9f, gbc.l());
        EXPECT(0x3b4d, gbc.sp());
        EXPECT(0x9ad1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0x9ace));
        EXPECT(0xa2, gbc.readMem(0x9acf));
        EXPECT(0x2b, gbc.readMem(0x9ad0));
        // DC 01F2
        gbc.setState(0xb3d0, 0xa3e7, 0xf3d0, 0xa3b1, 0x49c1, 0xf5ae, 0x0, 0x1);
        gbc.writeMem(0xa3e5, { 0x0, 0x0 });
        gbc.writeMem(0xb3d0, { 0xdc, 0xa3, 0xc9 });
        gbc.step();
        EXPECT(0xf3, gbc.a());
        EXPECT(0xa3, gbc.b());
        EXPECT(0xb1, gbc.c());
        EXPECT(0x49, gbc.d());
        EXPECT(0xc1, gbc.e());
        EXPECT(0xf5, gbc.h());
        EXPECT(0xae, gbc.l());
        EXPECT(0xa3e5, gbc.sp());
        EXPECT(0xc9a3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xd3, gbc.readMem(0xa3e5));
        EXPECT(0xb3, gbc.readMem(0xa3e6));
        EXPECT(0xdc, gbc.readMem(0xb3d0));
        EXPECT(0xa3, gbc.readMem(0xb3d1));
        EXPECT(0xc9, gbc.readMem(0xb3d2));
        // DC 01F4
        gbc.setState(0x55af, 0x8c01, 0x69e0, 0xc127, 0x1465, 0x89c7, 0x0, 0x0);
        gbc.writeMem(0x55af, { 0xdc, 0x6b, 0x86 });
        gbc.step();
        EXPECT(0x69, gbc.a());
        EXPECT(0xc1, gbc.b());
        EXPECT(0x27, gbc.c());
        EXPECT(0x14, gbc.d());
        EXPECT(0x65, gbc.e());
        EXPECT(0x89, gbc.h());
        EXPECT(0xc7, gbc.l());
        EXPECT(0x8c01, gbc.sp());
        EXPECT(0x55b2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 01F5
        gbc.setState(0x2ef5, 0x2c23, 0x9420, 0xdc3b, 0x9cbd, 0xe267, 0x0, 0x0);
        gbc.writeMem(0x2ef5, { 0xdc, 0x54, 0x65 });
        gbc.step();
        EXPECT(0x94, gbc.a());
        EXPECT(0xdc, gbc.b());
        EXPECT(0x3b, gbc.c());
        EXPECT(0x9c, gbc.d());
        EXPECT(0xbd, gbc.e());
        EXPECT(0xe2, gbc.h());
        EXPECT(0x67, gbc.l());
        EXPECT(0x2c23, gbc.sp());
        EXPECT(0x2ef8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 01F6
        gbc.setState(0x6c7f, 0x77b1, 0xf360, 0x1f3e, 0xeac5, 0x1012, 0x0, 0x1);
        gbc.writeMem(0x6c7f, { 0xdc, 0xcf, 0xf9 });
        gbc.step();
        EXPECT(0xf3, gbc.a());
        EXPECT(0x1f, gbc.b());
        EXPECT(0x3e, gbc.c());
        EXPECT(0xea, gbc.d());
        EXPECT(0xc5, gbc.e());
        EXPECT(0x10, gbc.h());
        EXPECT(0x12, gbc.l());
        EXPECT(0x77b1, gbc.sp());
        EXPECT(0x6c82, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 01F8
        gbc.setState(0xc4b5, 0xe5c9, 0x4970, 0xaed, 0x46b8, 0xe3c1, 0x0, 0x1);
        gbc.writeMem(0xc4b5, { 0xdc, 0xe7, 0xf });
        gbc.writeMem(0xe5c7, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x49, gbc.a());
        EXPECT(0xa, gbc.b());
        EXPECT(0xed, gbc.c());
        EXPECT(0x46, gbc.d());
        EXPECT(0xb8, gbc.e());
        EXPECT(0xe3, gbc.h());
        EXPECT(0xc1, gbc.l());
        EXPECT(0xe5c7, gbc.sp());
        EXPECT(0xfe7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xc4b5));
        EXPECT(0xe7, gbc.readMem(0xc4b6));
        EXPECT(0xf, gbc.readMem(0xc4b7));
        EXPECT(0xb8, gbc.readMem(0xe5c7));
        EXPECT(0xc4, gbc.readMem(0xe5c8));
        // DC 01F9
        gbc.setState(0x6782, 0xad09, 0xfb40, 0x8521, 0x6387, 0xca66, 0x1, 0x0);
        gbc.writeMem(0x6782, { 0xdc, 0x5d, 0x79 });
        gbc.step();
        EXPECT(0xfb, gbc.a());
        EXPECT(0x85, gbc.b());
        EXPECT(0x21, gbc.c());
        EXPECT(0x63, gbc.d());
        EXPECT(0x87, gbc.e());
        EXPECT(0xca, gbc.h());
        EXPECT(0x66, gbc.l());
        EXPECT(0xad09, gbc.sp());
        EXPECT(0x6785, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 01FA
        gbc.setState(0x9557, 0x95ec, 0x7680, 0xe64c, 0x38b4, 0x9bbb, 0x1, 0x1);
        gbc.writeMem(0x9557, { 0xdc, 0x37, 0x93 });
        gbc.step();
        EXPECT(0x76, gbc.a());
        EXPECT(0xe6, gbc.b());
        EXPECT(0x4c, gbc.c());
        EXPECT(0x38, gbc.d());
        EXPECT(0xb4, gbc.e());
        EXPECT(0x9b, gbc.h());
        EXPECT(0xbb, gbc.l());
        EXPECT(0x95ec, gbc.sp());
        EXPECT(0x955a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0x9557));
        EXPECT(0x37, gbc.readMem(0x9558));
        EXPECT(0x93, gbc.readMem(0x9559));
        // DC 01FB
        gbc.setState(0x6079, 0xf59c, 0x6730, 0xd678, 0x5110, 0x98be, 0x1, 0x1);
        gbc.writeMem(0x6079, { 0xdc, 0xbe, 0x2d });
        gbc.writeMem(0xf59a, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x67, gbc.a());
        EXPECT(0xd6, gbc.b());
        EXPECT(0x78, gbc.c());
        EXPECT(0x51, gbc.d());
        EXPECT(0x10, gbc.e());
        EXPECT(0x98, gbc.h());
        EXPECT(0xbe, gbc.l());
        EXPECT(0xf59a, gbc.sp());
        EXPECT(0x2dbe, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x7c, gbc.readMem(0xf59a));
        EXPECT(0x60, gbc.readMem(0xf59b));
        // DC 01FC
        gbc.setState(0x515f, 0xe517, 0x3db0, 0xb231, 0xad50, 0x2020, 0x1, 0x0);
        gbc.writeMem(0x515f, { 0xdc, 0x28, 0x32 });
        gbc.writeMem(0xe515, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x3d, gbc.a());
        EXPECT(0xb2, gbc.b());
        EXPECT(0x31, gbc.c());
        EXPECT(0xad, gbc.d());
        EXPECT(0x50, gbc.e());
        EXPECT(0x20, gbc.h());
        EXPECT(0x20, gbc.l());
        EXPECT(0xe515, gbc.sp());
        EXPECT(0x3228, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x62, gbc.readMem(0xe515));
        EXPECT(0x51, gbc.readMem(0xe516));
        // DC 01FD
        gbc.setState(0x782d, 0xd54e, 0x9f60, 0x1360, 0x32ed, 0xca00, 0x1, 0x1);
        gbc.writeMem(0x782d, { 0xdc, 0xdf, 0xf3 });
        gbc.step();
        EXPECT(0x9f, gbc.a());
        EXPECT(0x13, gbc.b());
        EXPECT(0x60, gbc.c());
        EXPECT(0x32, gbc.d());
        EXPECT(0xed, gbc.e());
        EXPECT(0xca, gbc.h());
        EXPECT(0x0, gbc.l());
        EXPECT(0xd54e, gbc.sp());
        EXPECT(0x7830, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 01FE
        gbc.setState(0xa33d, 0x71f1, 0xc400, 0xb546, 0x4a8f, 0xa9fa, 0x0, 0x0);
        gbc.writeMem(0xa33d, { 0xdc, 0x55, 0x9b });
        gbc.step();
        EXPECT(0xc4, gbc.a());
        EXPECT(0xb5, gbc.b());
        EXPECT(0x46, gbc.c());
        EXPECT(0x4a, gbc.d());
        EXPECT(0x8f, gbc.e());
        EXPECT(0xa9, gbc.h());
        EXPECT(0xfa, gbc.l());
        EXPECT(0x71f1, gbc.sp());
        EXPECT(0xa340, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xa33d));
        EXPECT(0x55, gbc.readMem(0xa33e));
        EXPECT(0x9b, gbc.readMem(0xa33f));
        // DC 0200
        gbc.setState(0xd75f, 0x85a1, 0xddb0, 0xb07d, 0x5d4d, 0x552c, 0x1, 0x0);
        gbc.writeMem(0x859f, { 0x0, 0x0 });
        gbc.writeMem(0xd75f, { 0xdc, 0xa0, 0x45 });
        gbc.step();
        EXPECT(0xdd, gbc.a());
        EXPECT(0xb0, gbc.b());
        EXPECT(0x7d, gbc.c());
        EXPECT(0x5d, gbc.d());
        EXPECT(0x4d, gbc.e());
        EXPECT(0x55, gbc.h());
        EXPECT(0x2c, gbc.l());
        EXPECT(0x859f, gbc.sp());
        EXPECT(0x45a0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x62, gbc.readMem(0x859f));
        EXPECT(0xd7, gbc.readMem(0x85a0));
        EXPECT(0xdc, gbc.readMem(0xd75f));
        EXPECT(0xa0, gbc.readMem(0xd760));
        EXPECT(0x45, gbc.readMem(0xd761));
        // DC 0201
        gbc.setState(0x9a15, 0xe336, 0x6f00, 0x4a8, 0x206f, 0xc0ab, 0x1, 0x0);
        gbc.writeMem(0x9a15, { 0xdc, 0x4a, 0xc5 });
        gbc.step();
        EXPECT(0x6f, gbc.a());
        EXPECT(0x4, gbc.b());
        EXPECT(0xa8, gbc.c());
        EXPECT(0x20, gbc.d());
        EXPECT(0x6f, gbc.e());
        EXPECT(0xc0, gbc.h());
        EXPECT(0xab, gbc.l());
        EXPECT(0xe336, gbc.sp());
        EXPECT(0x9a18, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0x9a15));
        EXPECT(0x4a, gbc.readMem(0x9a16));
        EXPECT(0xc5, gbc.readMem(0x9a17));
        // DC 0202
        gbc.setState(0x8aaf, 0x4600, 0x7780, 0x73cb, 0x2533, 0x85d0, 0x0, 0x1);
        gbc.writeMem(0x8aaf, { 0xdc, 0x50, 0x96 });
        gbc.step();
        EXPECT(0x77, gbc.a());
        EXPECT(0x73, gbc.b());
        EXPECT(0xcb, gbc.c());
        EXPECT(0x25, gbc.d());
        EXPECT(0x33, gbc.e());
        EXPECT(0x85, gbc.h());
        EXPECT(0xd0, gbc.l());
        EXPECT(0x4600, gbc.sp());
        EXPECT(0x8ab2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0x8aaf));
        EXPECT(0x50, gbc.readMem(0x8ab0));
        EXPECT(0x96, gbc.readMem(0x8ab1));
        // DC 0203
        gbc.setState(0x807c, 0xfd45, 0xa8e0, 0x496d, 0x2abc, 0x6033, 0x1, 0x0);
        gbc.writeMem(0x807c, { 0xdc, 0x4b, 0x31 });
        gbc.step();
        EXPECT(0xa8, gbc.a());
        EXPECT(0x49, gbc.b());
        EXPECT(0x6d, gbc.c());
        EXPECT(0x2a, gbc.d());
        EXPECT(0xbc, gbc.e());
        EXPECT(0x60, gbc.h());
        EXPECT(0x33, gbc.l());
        EXPECT(0xfd45, gbc.sp());
        EXPECT(0x807f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0x807c));
        EXPECT(0x4b, gbc.readMem(0x807d));
        EXPECT(0x31, gbc.readMem(0x807e));
        // DC 0204
        gbc.setState(0x1fe7, 0x22c1, 0x8fc0, 0x5626, 0x3d66, 0x5238, 0x1, 0x1);
        gbc.writeMem(0x1fe7, { 0xdc, 0xd6, 0x95 });
        gbc.step();
        EXPECT(0x8f, gbc.a());
        EXPECT(0x56, gbc.b());
        EXPECT(0x26, gbc.c());
        EXPECT(0x3d, gbc.d());
        EXPECT(0x66, gbc.e());
        EXPECT(0x52, gbc.h());
        EXPECT(0x38, gbc.l());
        EXPECT(0x22c1, gbc.sp());
        EXPECT(0x1fea, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 0206
        gbc.setState(0x9354, 0xaf91, 0xff20, 0x56aa, 0x8ad2, 0x318e, 0x0, 0x0);
        gbc.writeMem(0x9354, { 0xdc, 0x6, 0xab });
        gbc.step();
        EXPECT(0xff, gbc.a());
        EXPECT(0x56, gbc.b());
        EXPECT(0xaa, gbc.c());
        EXPECT(0x8a, gbc.d());
        EXPECT(0xd2, gbc.e());
        EXPECT(0x31, gbc.h());
        EXPECT(0x8e, gbc.l());
        EXPECT(0xaf91, gbc.sp());
        EXPECT(0x9357, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0x9354));
        EXPECT(0x6, gbc.readMem(0x9355));
        EXPECT(0xab, gbc.readMem(0x9356));
        // DC 0207
        gbc.setState(0xa94b, 0xdbbe, 0x2490, 0x6c91, 0x75ca, 0xded3, 0x1, 0x0);
        gbc.writeMem(0xa94b, { 0xdc, 0x20, 0x79 });
        gbc.writeMem(0xdbbc, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x24, gbc.a());
        EXPECT(0x6c, gbc.b());
        EXPECT(0x91, gbc.c());
        EXPECT(0x75, gbc.d());
        EXPECT(0xca, gbc.e());
        EXPECT(0xde, gbc.h());
        EXPECT(0xd3, gbc.l());
        EXPECT(0xdbbc, gbc.sp());
        EXPECT(0x7920, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xa94b));
        EXPECT(0x20, gbc.readMem(0xa94c));
        EXPECT(0x79, gbc.readMem(0xa94d));
        EXPECT(0x4e, gbc.readMem(0xdbbc));
        EXPECT(0xa9, gbc.readMem(0xdbbd));
        // DC 0209
        gbc.setState(0x5d0c, 0xf8e3, 0x2bc0, 0xdef, 0x742a, 0x51a, 0x1, 0x1);
        gbc.writeMem(0x5d0c, { 0xdc, 0x87, 0xaa });
        gbc.step();
        EXPECT(0x2b, gbc.a());
        EXPECT(0xd, gbc.b());
        EXPECT(0xef, gbc.c());
        EXPECT(0x74, gbc.d());
        EXPECT(0x2a, gbc.e());
        EXPECT(0x5, gbc.h());
        EXPECT(0x1a, gbc.l());
        EXPECT(0xf8e3, gbc.sp());
        EXPECT(0x5d0f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 020A
        gbc.setState(0x61e0, 0xdcf6, 0x8dd0, 0x3d61, 0x1e67, 0x4f9a, 0x0, 0x0);
        gbc.writeMem(0x61e0, { 0xdc, 0xd1, 0x15 });
        gbc.writeMem(0xdcf4, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x8d, gbc.a());
        EXPECT(0x3d, gbc.b());
        EXPECT(0x61, gbc.c());
        EXPECT(0x1e, gbc.d());
        EXPECT(0x67, gbc.e());
        EXPECT(0x4f, gbc.h());
        EXPECT(0x9a, gbc.l());
        EXPECT(0xdcf4, gbc.sp());
        EXPECT(0x15d1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xe3, gbc.readMem(0xdcf4));
        EXPECT(0x61, gbc.readMem(0xdcf5));
        // DC 020C
        gbc.setState(0x4232, 0x2730, 0xfdc0, 0x20f1, 0x13d0, 0x1cef, 0x0, 0x1);
        gbc.writeMem(0x4232, { 0xdc, 0x86, 0x6c });
        gbc.step();
        EXPECT(0xfd, gbc.a());
        EXPECT(0x20, gbc.b());
        EXPECT(0xf1, gbc.c());
        EXPECT(0x13, gbc.d());
        EXPECT(0xd0, gbc.e());
        EXPECT(0x1c, gbc.h());
        EXPECT(0xef, gbc.l());
        EXPECT(0x2730, gbc.sp());
        EXPECT(0x4235, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 020E
        gbc.setState(0x53eb, 0xc50c, 0x3c50, 0xc3fe, 0x1686, 0x2390, 0x0, 0x1);
        gbc.writeMem(0x53eb, { 0xdc, 0xbf, 0x5c });
        gbc.writeMem(0xc50a, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x3c, gbc.a());
        EXPECT(0xc3, gbc.b());
        EXPECT(0xfe, gbc.c());
        EXPECT(0x16, gbc.d());
        EXPECT(0x86, gbc.e());
        EXPECT(0x23, gbc.h());
        EXPECT(0x90, gbc.l());
        EXPECT(0xc50a, gbc.sp());
        EXPECT(0x5cbf, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xee, gbc.readMem(0xc50a));
        EXPECT(0x53, gbc.readMem(0xc50b));
        // DC 0210
        gbc.setState(0x262e, 0xcf4f, 0x3e70, 0xee2f, 0x472f, 0x3830, 0x1, 0x1);
        gbc.writeMem(0x262e, { 0xdc, 0xf1, 0x7a });
        gbc.writeMem(0xcf4d, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x3e, gbc.a());
        EXPECT(0xee, gbc.b());
        EXPECT(0x2f, gbc.c());
        EXPECT(0x47, gbc.d());
        EXPECT(0x2f, gbc.e());
        EXPECT(0x38, gbc.h());
        EXPECT(0x30, gbc.l());
        EXPECT(0xcf4d, gbc.sp());
        EXPECT(0x7af1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x31, gbc.readMem(0xcf4d));
        EXPECT(0x26, gbc.readMem(0xcf4e));
        // DC 0211
        gbc.setState(0x80ea, 0xdca0, 0x6f00, 0xc144, 0xda72, 0x9b48, 0x1, 0x1);
        gbc.writeMem(0x80ea, { 0xdc, 0xe5, 0x3d });
        gbc.step();
        EXPECT(0x6f, gbc.a());
        EXPECT(0xc1, gbc.b());
        EXPECT(0x44, gbc.c());
        EXPECT(0xda, gbc.d());
        EXPECT(0x72, gbc.e());
        EXPECT(0x9b, gbc.h());
        EXPECT(0x48, gbc.l());
        EXPECT(0xdca0, gbc.sp());
        EXPECT(0x80ed, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0x80ea));
        EXPECT(0xe5, gbc.readMem(0x80eb));
        EXPECT(0x3d, gbc.readMem(0x80ec));
        // DC 0213
        gbc.setState(0xdfbe, 0x9485, 0xf260, 0x9bf4, 0xa95e, 0x4aae, 0x1, 0x0);
        gbc.writeMem(0xdfbe, { 0xdc, 0xd7, 0x82 });
        gbc.step();
        EXPECT(0xf2, gbc.a());
        EXPECT(0x9b, gbc.b());
        EXPECT(0xf4, gbc.c());
        EXPECT(0xa9, gbc.d());
        EXPECT(0x5e, gbc.e());
        EXPECT(0x4a, gbc.h());
        EXPECT(0xae, gbc.l());
        EXPECT(0x9485, gbc.sp());
        EXPECT(0xdfc1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xdfbe));
        EXPECT(0xd7, gbc.readMem(0xdfbf));
        EXPECT(0x82, gbc.readMem(0xdfc0));
        // DC 0214
        gbc.setState(0x41f4, 0x9d77, 0x29c0, 0x16de, 0x9704, 0x753, 0x1, 0x0);
        gbc.writeMem(0x41f4, { 0xdc, 0x41, 0x9 });
        gbc.step();
        EXPECT(0x29, gbc.a());
        EXPECT(0x16, gbc.b());
        EXPECT(0xde, gbc.c());
        EXPECT(0x97, gbc.d());
        EXPECT(0x4, gbc.e());
        EXPECT(0x7, gbc.h());
        EXPECT(0x53, gbc.l());
        EXPECT(0x9d77, gbc.sp());
        EXPECT(0x41f7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 0215
        gbc.setState(0x7c64, 0xe636, 0x63e0, 0xd912, 0x1bb9, 0xee88, 0x1, 0x0);
        gbc.writeMem(0x7c64, { 0xdc, 0x8f, 0xcc });
        gbc.step();
        EXPECT(0x63, gbc.a());
        EXPECT(0xd9, gbc.b());
        EXPECT(0x12, gbc.c());
        EXPECT(0x1b, gbc.d());
        EXPECT(0xb9, gbc.e());
        EXPECT(0xee, gbc.h());
        EXPECT(0x88, gbc.l());
        EXPECT(0xe636, gbc.sp());
        EXPECT(0x7c67, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 0216
        gbc.setState(0xab, 0x7e4, 0xed40, 0x6caa, 0x16ce, 0xa2a2, 0x0, 0x1);
        gbc.writeMem(0xab, { 0xdc, 0xaf, 0x0 });
        gbc.step();
        EXPECT(0xed, gbc.a());
        EXPECT(0x6c, gbc.b());
        EXPECT(0xaa, gbc.c());
        EXPECT(0x16, gbc.d());
        EXPECT(0xce, gbc.e());
        EXPECT(0xa2, gbc.h());
        EXPECT(0xa2, gbc.l());
        EXPECT(0x7e4, gbc.sp());
        EXPECT(0xae, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 0217
        gbc.setState(0x161b, 0x98a2, 0x2e60, 0x5496, 0x35d5, 0xd6ea, 0x0, 0x0);
        gbc.writeMem(0x161b, { 0xdc, 0x23, 0x2a });
        gbc.step();
        EXPECT(0x2e, gbc.a());
        EXPECT(0x54, gbc.b());
        EXPECT(0x96, gbc.c());
        EXPECT(0x35, gbc.d());
        EXPECT(0xd5, gbc.e());
        EXPECT(0xd6, gbc.h());
        EXPECT(0xea, gbc.l());
        EXPECT(0x98a2, gbc.sp());
        EXPECT(0x161e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 0219
        gbc.setState(0xed55, 0xb328, 0x4c90, 0x949e, 0xa456, 0xa97e, 0x0, 0x1);
        gbc.writeMem(0xb326, { 0x0, 0x0 });
        gbc.writeMem(0xed55, { 0xdc, 0x77, 0xd8 });
        gbc.step();
        EXPECT(0x4c, gbc.a());
        EXPECT(0x94, gbc.b());
        EXPECT(0x9e, gbc.c());
        EXPECT(0xa4, gbc.d());
        EXPECT(0x56, gbc.e());
        EXPECT(0xa9, gbc.h());
        EXPECT(0x7e, gbc.l());
        EXPECT(0xb326, gbc.sp());
        EXPECT(0xd877, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x58, gbc.readMem(0xb326));
        EXPECT(0xed, gbc.readMem(0xb327));
        EXPECT(0xdc, gbc.readMem(0xed55));
        EXPECT(0x77, gbc.readMem(0xed56));
        EXPECT(0xd8, gbc.readMem(0xed57));
        // DC 021A
        gbc.setState(0x6b1, 0x8cfc, 0x5930, 0x61cc, 0xe5f2, 0xa35a, 0x0, 0x1);
        gbc.writeMem(0x6b1, { 0xdc, 0xf4, 0x19 });
        gbc.writeMem(0x8cfa, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x59, gbc.a());
        EXPECT(0x61, gbc.b());
        EXPECT(0xcc, gbc.c());
        EXPECT(0xe5, gbc.d());
        EXPECT(0xf2, gbc.e());
        EXPECT(0xa3, gbc.h());
        EXPECT(0x5a, gbc.l());
        EXPECT(0x8cfa, gbc.sp());
        EXPECT(0x19f4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xb4, gbc.readMem(0x8cfa));
        EXPECT(0x6, gbc.readMem(0x8cfb));
        // DC 021B
        gbc.setState(0x1b5d, 0xa631, 0x85d0, 0xc3e8, 0x9c5e, 0xfa0, 0x1, 0x1);
        gbc.writeMem(0x1b5d, { 0xdc, 0x5a, 0xf1 });
        gbc.writeMem(0xa62f, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x85, gbc.a());
        EXPECT(0xc3, gbc.b());
        EXPECT(0xe8, gbc.c());
        EXPECT(0x9c, gbc.d());
        EXPECT(0x5e, gbc.e());
        EXPECT(0xf, gbc.h());
        EXPECT(0xa0, gbc.l());
        EXPECT(0xa62f, gbc.sp());
        EXPECT(0xf15a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x60, gbc.readMem(0xa62f));
        EXPECT(0x1b, gbc.readMem(0xa630));
        // DC 021C
        gbc.setState(0x8b50, 0x71e1, 0x9260, 0x6aa1, 0x32c5, 0x50d3, 0x1, 0x0);
        gbc.writeMem(0x8b50, { 0xdc, 0xa2, 0x8a });
        gbc.step();
        EXPECT(0x92, gbc.a());
        EXPECT(0x6a, gbc.b());
        EXPECT(0xa1, gbc.c());
        EXPECT(0x32, gbc.d());
        EXPECT(0xc5, gbc.e());
        EXPECT(0x50, gbc.h());
        EXPECT(0xd3, gbc.l());
        EXPECT(0x71e1, gbc.sp());
        EXPECT(0x8b53, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0x8b50));
        EXPECT(0xa2, gbc.readMem(0x8b51));
        EXPECT(0x8a, gbc.readMem(0x8b52));
        // DC 021F
        gbc.setState(0xb72b, 0x8d6a, 0x1250, 0xd412, 0x4e4e, 0xb19a, 0x0, 0x1);
        gbc.writeMem(0x8d68, { 0x0, 0x0 });
        gbc.writeMem(0xb72b, { 0xdc, 0xbf, 0x90 });
        gbc.step();
        EXPECT(0x12, gbc.a());
        EXPECT(0xd4, gbc.b());
        EXPECT(0x12, gbc.c());
        EXPECT(0x4e, gbc.d());
        EXPECT(0x4e, gbc.e());
        EXPECT(0xb1, gbc.h());
        EXPECT(0x9a, gbc.l());
        EXPECT(0x8d68, gbc.sp());
        EXPECT(0x90bf, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x2e, gbc.readMem(0x8d68));
        EXPECT(0xb7, gbc.readMem(0x8d69));
        EXPECT(0xdc, gbc.readMem(0xb72b));
        EXPECT(0xbf, gbc.readMem(0xb72c));
        EXPECT(0x90, gbc.readMem(0xb72d));
        // DC 0220
        gbc.setState(0x1c85, 0x9460, 0x21d0, 0x4558, 0xa37a, 0x2d8d, 0x0, 0x1);
        gbc.writeMem(0x1c85, { 0xdc, 0x62, 0x1c });
        gbc.writeMem(0x945e, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x21, gbc.a());
        EXPECT(0x45, gbc.b());
        EXPECT(0x58, gbc.c());
        EXPECT(0xa3, gbc.d());
        EXPECT(0x7a, gbc.e());
        EXPECT(0x2d, gbc.h());
        EXPECT(0x8d, gbc.l());
        EXPECT(0x945e, gbc.sp());
        EXPECT(0x1c62, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x88, gbc.readMem(0x945e));
        EXPECT(0x1c, gbc.readMem(0x945f));
        // DC 0222
        gbc.setState(0xe33e, 0x9685, 0xb2a0, 0x770d, 0x6883, 0xb57c, 0x1, 0x1);
        gbc.writeMem(0xe33e, { 0xdc, 0x27, 0xd6 });
        gbc.step();
        EXPECT(0xb2, gbc.a());
        EXPECT(0x77, gbc.b());
        EXPECT(0xd, gbc.c());
        EXPECT(0x68, gbc.d());
        EXPECT(0x83, gbc.e());
        EXPECT(0xb5, gbc.h());
        EXPECT(0x7c, gbc.l());
        EXPECT(0x9685, gbc.sp());
        EXPECT(0xe341, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xe33e));
        EXPECT(0x27, gbc.readMem(0xe33f));
        EXPECT(0xd6, gbc.readMem(0xe340));
        // DC 0224
        gbc.setState(0x5325, 0xeaa3, 0xb550, 0x2595, 0x6954, 0x1ed3, 0x0, 0x0);
        gbc.writeMem(0x5325, { 0xdc, 0x22, 0x32 });
        gbc.writeMem(0xeaa1, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xb5, gbc.a());
        EXPECT(0x25, gbc.b());
        EXPECT(0x95, gbc.c());
        EXPECT(0x69, gbc.d());
        EXPECT(0x54, gbc.e());
        EXPECT(0x1e, gbc.h());
        EXPECT(0xd3, gbc.l());
        EXPECT(0xeaa1, gbc.sp());
        EXPECT(0x3222, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x28, gbc.readMem(0xeaa1));
        EXPECT(0x53, gbc.readMem(0xeaa2));
        // DC 0227
        gbc.setState(0x9b65, 0x50a1, 0x9640, 0xf43d, 0x6d09, 0xd51f, 0x0, 0x0);
        gbc.writeMem(0x9b65, { 0xdc, 0xe1, 0xdd });
        gbc.step();
        EXPECT(0x96, gbc.a());
        EXPECT(0xf4, gbc.b());
        EXPECT(0x3d, gbc.c());
        EXPECT(0x6d, gbc.d());
        EXPECT(0x9, gbc.e());
        EXPECT(0xd5, gbc.h());
        EXPECT(0x1f, gbc.l());
        EXPECT(0x50a1, gbc.sp());
        EXPECT(0x9b68, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0x9b65));
        EXPECT(0xe1, gbc.readMem(0x9b66));
        EXPECT(0xdd, gbc.readMem(0x9b67));
        // DC 0228
        gbc.setState(0xd78e, 0x6673, 0xec40, 0x11a7, 0x7647, 0x11c2, 0x1, 0x1);
        gbc.writeMem(0xd78e, { 0xdc, 0x61, 0xfc });
        gbc.step();
        EXPECT(0xec, gbc.a());
        EXPECT(0x11, gbc.b());
        EXPECT(0xa7, gbc.c());
        EXPECT(0x76, gbc.d());
        EXPECT(0x47, gbc.e());
        EXPECT(0x11, gbc.h());
        EXPECT(0xc2, gbc.l());
        EXPECT(0x6673, gbc.sp());
        EXPECT(0xd791, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xd78e));
        EXPECT(0x61, gbc.readMem(0xd78f));
        EXPECT(0xfc, gbc.readMem(0xd790));
        // DC 0229
        gbc.setState(0xbc0b, 0x918f, 0x50e0, 0xee98, 0x17d, 0x1365, 0x1, 0x1);
        gbc.writeMem(0xbc0b, { 0xdc, 0x15, 0xb5 });
        gbc.step();
        EXPECT(0x50, gbc.a());
        EXPECT(0xee, gbc.b());
        EXPECT(0x98, gbc.c());
        EXPECT(0x1, gbc.d());
        EXPECT(0x7d, gbc.e());
        EXPECT(0x13, gbc.h());
        EXPECT(0x65, gbc.l());
        EXPECT(0x918f, gbc.sp());
        EXPECT(0xbc0e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xbc0b));
        EXPECT(0x15, gbc.readMem(0xbc0c));
        EXPECT(0xb5, gbc.readMem(0xbc0d));
        // DC 022A
        gbc.setState(0xc78e, 0xe450, 0x4f80, 0xe4c, 0x2ac0, 0x1b1b, 0x0, 0x1);
        gbc.writeMem(0xc78e, { 0xdc, 0xd3, 0x72 });
        gbc.step();
        EXPECT(0x4f, gbc.a());
        EXPECT(0xe, gbc.b());
        EXPECT(0x4c, gbc.c());
        EXPECT(0x2a, gbc.d());
        EXPECT(0xc0, gbc.e());
        EXPECT(0x1b, gbc.h());
        EXPECT(0x1b, gbc.l());
        EXPECT(0xe450, gbc.sp());
        EXPECT(0xc791, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xc78e));
        EXPECT(0xd3, gbc.readMem(0xc78f));
        EXPECT(0x72, gbc.readMem(0xc790));
        // DC 022B
        gbc.setState(0x95e7, 0xc1c4, 0xa130, 0x8dfe, 0xd3f7, 0xc67a, 0x1, 0x1);
        gbc.writeMem(0x95e7, { 0xdc, 0xe9, 0x28 });
        gbc.writeMem(0xc1c2, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xa1, gbc.a());
        EXPECT(0x8d, gbc.b());
        EXPECT(0xfe, gbc.c());
        EXPECT(0xd3, gbc.d());
        EXPECT(0xf7, gbc.e());
        EXPECT(0xc6, gbc.h());
        EXPECT(0x7a, gbc.l());
        EXPECT(0xc1c2, gbc.sp());
        EXPECT(0x28e9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0x95e7));
        EXPECT(0xe9, gbc.readMem(0x95e8));
        EXPECT(0x28, gbc.readMem(0x95e9));
        EXPECT(0xea, gbc.readMem(0xc1c2));
        EXPECT(0x95, gbc.readMem(0xc1c3));
        // DC 022D
        gbc.setState(0x44a7, 0xaeff, 0x6980, 0x45a6, 0xff13, 0x1896, 0x0, 0x1);
        gbc.writeMem(0x44a7, { 0xdc, 0x84, 0x11 });
        gbc.step();
        EXPECT(0x69, gbc.a());
        EXPECT(0x45, gbc.b());
        EXPECT(0xa6, gbc.c());
        EXPECT(0xff, gbc.d());
        EXPECT(0x13, gbc.e());
        EXPECT(0x18, gbc.h());
        EXPECT(0x96, gbc.l());
        EXPECT(0xaeff, gbc.sp());
        EXPECT(0x44aa, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 022E
        gbc.setState(0x3b30, 0xc42d, 0x77a0, 0x74ce, 0xa0df, 0x7a78, 0x0, 0x1);
        gbc.writeMem(0x3b30, { 0xdc, 0xfb, 0xe1 });
        gbc.step();
        EXPECT(0x77, gbc.a());
        EXPECT(0x74, gbc.b());
        EXPECT(0xce, gbc.c());
        EXPECT(0xa0, gbc.d());
        EXPECT(0xdf, gbc.e());
        EXPECT(0x7a, gbc.h());
        EXPECT(0x78, gbc.l());
        EXPECT(0xc42d, gbc.sp());
        EXPECT(0x3b33, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 022F
        gbc.setState(0x3219, 0x8c1b, 0x6380, 0xbb46, 0x8d20, 0x13e, 0x1, 0x0);
        gbc.writeMem(0x3219, { 0xdc, 0xbc, 0xa8 });
        gbc.step();
        EXPECT(0x63, gbc.a());
        EXPECT(0xbb, gbc.b());
        EXPECT(0x46, gbc.c());
        EXPECT(0x8d, gbc.d());
        EXPECT(0x20, gbc.e());
        EXPECT(0x1, gbc.h());
        EXPECT(0x3e, gbc.l());
        EXPECT(0x8c1b, gbc.sp());
        EXPECT(0x321c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 0232
        gbc.setState(0x7d57, 0xa2a4, 0x2660, 0x6dc, 0xfd69, 0x3dbc, 0x0, 0x0);
        gbc.writeMem(0x7d57, { 0xdc, 0x24, 0x97 });
        gbc.step();
        EXPECT(0x26, gbc.a());
        EXPECT(0x6, gbc.b());
        EXPECT(0xdc, gbc.c());
        EXPECT(0xfd, gbc.d());
        EXPECT(0x69, gbc.e());
        EXPECT(0x3d, gbc.h());
        EXPECT(0xbc, gbc.l());
        EXPECT(0xa2a4, gbc.sp());
        EXPECT(0x7d5a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 0236
        gbc.setState(0xc56, 0xc7a, 0xeee0, 0x98ce, 0x46ac, 0x8a07, 0x0, 0x0);
        gbc.writeMem(0xc56, { 0xdc, 0x26, 0x58 });
        gbc.step();
        EXPECT(0xee, gbc.a());
        EXPECT(0x98, gbc.b());
        EXPECT(0xce, gbc.c());
        EXPECT(0x46, gbc.d());
        EXPECT(0xac, gbc.e());
        EXPECT(0x8a, gbc.h());
        EXPECT(0x7, gbc.l());
        EXPECT(0xc7a, gbc.sp());
        EXPECT(0xc59, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 0237
        gbc.setState(0x3fd6, 0xdcd7, 0xc660, 0xf77e, 0x655, 0x5ccb, 0x0, 0x0);
        gbc.writeMem(0x3fd6, { 0xdc, 0xae, 0x92 });
        gbc.step();
        EXPECT(0xc6, gbc.a());
        EXPECT(0xf7, gbc.b());
        EXPECT(0x7e, gbc.c());
        EXPECT(0x6, gbc.d());
        EXPECT(0x55, gbc.e());
        EXPECT(0x5c, gbc.h());
        EXPECT(0xcb, gbc.l());
        EXPECT(0xdcd7, gbc.sp());
        EXPECT(0x3fd9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 0238
        gbc.setState(0x9f0a, 0x16fd, 0x46c0, 0x398c, 0x4bcd, 0x60d3, 0x0, 0x1);
        gbc.writeMem(0x9f0a, { 0xdc, 0xc8, 0xd7 });
        gbc.step();
        EXPECT(0x46, gbc.a());
        EXPECT(0x39, gbc.b());
        EXPECT(0x8c, gbc.c());
        EXPECT(0x4b, gbc.d());
        EXPECT(0xcd, gbc.e());
        EXPECT(0x60, gbc.h());
        EXPECT(0xd3, gbc.l());
        EXPECT(0x16fd, gbc.sp());
        EXPECT(0x9f0d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0x9f0a));
        EXPECT(0xc8, gbc.readMem(0x9f0b));
        EXPECT(0xd7, gbc.readMem(0x9f0c));
        // DC 023A
        gbc.setState(0x330, 0x513a, 0x34e0, 0x21ab, 0x8db2, 0x32c3, 0x0, 0x1);
        gbc.writeMem(0x330, { 0xdc, 0x10, 0xc3 });
        gbc.step();
        EXPECT(0x34, gbc.a());
        EXPECT(0x21, gbc.b());
        EXPECT(0xab, gbc.c());
        EXPECT(0x8d, gbc.d());
        EXPECT(0xb2, gbc.e());
        EXPECT(0x32, gbc.h());
        EXPECT(0xc3, gbc.l());
        EXPECT(0x513a, gbc.sp());
        EXPECT(0x333, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 023B
        gbc.setState(0xd806, 0xe04f, 0x6970, 0xa653, 0x7ffa, 0x460b, 0x1, 0x1);
        gbc.writeMem(0xd806, { 0xdc, 0x4b, 0x3d });
        gbc.writeMem(0xe04d, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x69, gbc.a());
        EXPECT(0xa6, gbc.b());
        EXPECT(0x53, gbc.c());
        EXPECT(0x7f, gbc.d());
        EXPECT(0xfa, gbc.e());
        EXPECT(0x46, gbc.h());
        EXPECT(0xb, gbc.l());
        EXPECT(0xe04d, gbc.sp());
        EXPECT(0x3d4b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xd806));
        EXPECT(0x4b, gbc.readMem(0xd807));
        EXPECT(0x3d, gbc.readMem(0xd808));
        EXPECT(0x9, gbc.readMem(0xe04d));
        EXPECT(0xd8, gbc.readMem(0xe04e));
        // DC 023D
        gbc.setState(0x877e, 0xc75d, 0x91f0, 0xf38a, 0x8b50, 0xddfe, 0x0, 0x1);
        gbc.writeMem(0x877e, { 0xdc, 0xa1, 0x95 });
        gbc.writeMem(0xc75b, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x91, gbc.a());
        EXPECT(0xf3, gbc.b());
        EXPECT(0x8a, gbc.c());
        EXPECT(0x8b, gbc.d());
        EXPECT(0x50, gbc.e());
        EXPECT(0xdd, gbc.h());
        EXPECT(0xfe, gbc.l());
        EXPECT(0xc75b, gbc.sp());
        EXPECT(0x95a1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0x877e));
        EXPECT(0xa1, gbc.readMem(0x877f));
        EXPECT(0x95, gbc.readMem(0x8780));
        EXPECT(0x81, gbc.readMem(0xc75b));
        EXPECT(0x87, gbc.readMem(0xc75c));
        // DC 023E
        gbc.setState(0xa4d5, 0xde87, 0x8df0, 0x9d9d, 0xbbef, 0xe055, 0x0, 0x1);
        gbc.writeMem(0xa4d5, { 0xdc, 0x71, 0xc8 });
        gbc.writeMem(0xde85, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x8d, gbc.a());
        EXPECT(0x9d, gbc.b());
        EXPECT(0x9d, gbc.c());
        EXPECT(0xbb, gbc.d());
        EXPECT(0xef, gbc.e());
        EXPECT(0xe0, gbc.h());
        EXPECT(0x55, gbc.l());
        EXPECT(0xde85, gbc.sp());
        EXPECT(0xc871, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xa4d5));
        EXPECT(0x71, gbc.readMem(0xa4d6));
        EXPECT(0xc8, gbc.readMem(0xa4d7));
        EXPECT(0xd8, gbc.readMem(0xde85));
        EXPECT(0xa4, gbc.readMem(0xde86));
        // DC 023F
        gbc.setState(0x6ff6, 0x7bed, 0x7ea0, 0xee4b, 0x85d1, 0xac07, 0x0, 0x1);
        gbc.writeMem(0x6ff6, { 0xdc, 0x32, 0x5 });
        gbc.step();
        EXPECT(0x7e, gbc.a());
        EXPECT(0xee, gbc.b());
        EXPECT(0x4b, gbc.c());
        EXPECT(0x85, gbc.d());
        EXPECT(0xd1, gbc.e());
        EXPECT(0xac, gbc.h());
        EXPECT(0x7, gbc.l());
        EXPECT(0x7bed, gbc.sp());
        EXPECT(0x6ff9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 0240
        gbc.setState(0x7c47, 0xd35a, 0x2a0, 0xbd06, 0x5125, 0x39b, 0x0, 0x0);
        gbc.writeMem(0x7c47, { 0xdc, 0x4e, 0x8f });
        gbc.step();
        EXPECT(0x2, gbc.a());
        EXPECT(0xbd, gbc.b());
        EXPECT(0x6, gbc.c());
        EXPECT(0x51, gbc.d());
        EXPECT(0x25, gbc.e());
        EXPECT(0x3, gbc.h());
        EXPECT(0x9b, gbc.l());
        EXPECT(0xd35a, gbc.sp());
        EXPECT(0x7c4a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 0242
        gbc.setState(0x553a, 0xb884, 0x14b0, 0xdf1a, 0x294d, 0x31fd, 0x1, 0x1);
        gbc.writeMem(0x553a, { 0xdc, 0xd, 0x4a });
        gbc.writeMem(0xb882, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x14, gbc.a());
        EXPECT(0xdf, gbc.b());
        EXPECT(0x1a, gbc.c());
        EXPECT(0x29, gbc.d());
        EXPECT(0x4d, gbc.e());
        EXPECT(0x31, gbc.h());
        EXPECT(0xfd, gbc.l());
        EXPECT(0xb882, gbc.sp());
        EXPECT(0x4a0d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x3d, gbc.readMem(0xb882));
        EXPECT(0x55, gbc.readMem(0xb883));
        // DC 0243
        gbc.setState(0x172e, 0xbd06, 0xdc30, 0x9e6d, 0xc949, 0x693a, 0x0, 0x0);
        gbc.writeMem(0x172e, { 0xdc, 0x88, 0x88 });
        gbc.writeMem(0xbd04, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xdc, gbc.a());
        EXPECT(0x9e, gbc.b());
        EXPECT(0x6d, gbc.c());
        EXPECT(0xc9, gbc.d());
        EXPECT(0x49, gbc.e());
        EXPECT(0x69, gbc.h());
        EXPECT(0x3a, gbc.l());
        EXPECT(0xbd04, gbc.sp());
        EXPECT(0x8888, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x31, gbc.readMem(0xbd04));
        EXPECT(0x17, gbc.readMem(0xbd05));
        // DC 0244
        gbc.setState(0x350, 0xa3d2, 0x2e20, 0x3774, 0xb4c9, 0xe7a1, 0x1, 0x1);
        gbc.writeMem(0x350, { 0xdc, 0xb6, 0xcc });
        gbc.step();
        EXPECT(0x2e, gbc.a());
        EXPECT(0x37, gbc.b());
        EXPECT(0x74, gbc.c());
        EXPECT(0xb4, gbc.d());
        EXPECT(0xc9, gbc.e());
        EXPECT(0xe7, gbc.h());
        EXPECT(0xa1, gbc.l());
        EXPECT(0xa3d2, gbc.sp());
        EXPECT(0x353, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 0247
        gbc.setState(0xd293, 0xd4d, 0x57a0, 0xc892, 0xd0f2, 0x1252, 0x1, 0x0);
        gbc.writeMem(0xd293, { 0xdc, 0xa, 0xb8 });
        gbc.step();
        EXPECT(0x57, gbc.a());
        EXPECT(0xc8, gbc.b());
        EXPECT(0x92, gbc.c());
        EXPECT(0xd0, gbc.d());
        EXPECT(0xf2, gbc.e());
        EXPECT(0x12, gbc.h());
        EXPECT(0x52, gbc.l());
        EXPECT(0xd4d, gbc.sp());
        EXPECT(0xd296, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xd293));
        EXPECT(0xa, gbc.readMem(0xd294));
        EXPECT(0xb8, gbc.readMem(0xd295));
        // DC 0249
        gbc.setState(0xeea0, 0x92be, 0x5610, 0x221, 0xe524, 0x6e9e, 0x0, 0x1);
        gbc.writeMem(0x92bc, { 0x0, 0x0 });
        gbc.writeMem(0xeea0, { 0xdc, 0xbe, 0x1e });
        gbc.step();
        EXPECT(0x56, gbc.a());
        EXPECT(0x2, gbc.b());
        EXPECT(0x21, gbc.c());
        EXPECT(0xe5, gbc.d());
        EXPECT(0x24, gbc.e());
        EXPECT(0x6e, gbc.h());
        EXPECT(0x9e, gbc.l());
        EXPECT(0x92bc, gbc.sp());
        EXPECT(0x1ebe, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xa3, gbc.readMem(0x92bc));
        EXPECT(0xee, gbc.readMem(0x92bd));
        EXPECT(0xdc, gbc.readMem(0xeea0));
        EXPECT(0xbe, gbc.readMem(0xeea1));
        EXPECT(0x1e, gbc.readMem(0xeea2));
        // DC 024D
        gbc.setState(0xdecd, 0xd34f, 0x2b00, 0x9272, 0xb19b, 0xee2b, 0x1, 0x1);
        gbc.writeMem(0xdecd, { 0xdc, 0x13, 0x8e });
        gbc.step();
        EXPECT(0x2b, gbc.a());
        EXPECT(0x92, gbc.b());
        EXPECT(0x72, gbc.c());
        EXPECT(0xb1, gbc.d());
        EXPECT(0x9b, gbc.e());
        EXPECT(0xee, gbc.h());
        EXPECT(0x2b, gbc.l());
        EXPECT(0xd34f, gbc.sp());
        EXPECT(0xded0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xdecd));
        EXPECT(0x13, gbc.readMem(0xdece));
        EXPECT(0x8e, gbc.readMem(0xdecf));
        // DC 024E
        gbc.setState(0xb62b, 0xb8fb, 0xb5c0, 0xf64a, 0xbca5, 0x6f89, 0x0, 0x1);
        gbc.writeMem(0xb62b, { 0xdc, 0x20, 0x24 });
        gbc.step();
        EXPECT(0xb5, gbc.a());
        EXPECT(0xf6, gbc.b());
        EXPECT(0x4a, gbc.c());
        EXPECT(0xbc, gbc.d());
        EXPECT(0xa5, gbc.e());
        EXPECT(0x6f, gbc.h());
        EXPECT(0x89, gbc.l());
        EXPECT(0xb8fb, gbc.sp());
        EXPECT(0xb62e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xb62b));
        EXPECT(0x20, gbc.readMem(0xb62c));
        EXPECT(0x24, gbc.readMem(0xb62d));
        // DC 024F
        gbc.setState(0x8cbb, 0xffa1, 0x50b0, 0x8aff, 0xf910, 0x23c9, 0x1, 0x0);
        gbc.writeMem(0x8cbb, { 0xdc, 0xb, 0xdd });
        gbc.writeMem(0xff9f, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x50, gbc.a());
        EXPECT(0x8a, gbc.b());
        EXPECT(0xff, gbc.c());
        EXPECT(0xf9, gbc.d());
        EXPECT(0x10, gbc.e());
        EXPECT(0x23, gbc.h());
        EXPECT(0xc9, gbc.l());
        EXPECT(0xff9f, gbc.sp());
        EXPECT(0xdd0b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0x8cbb));
        EXPECT(0xb, gbc.readMem(0x8cbc));
        EXPECT(0xdd, gbc.readMem(0x8cbd));
        EXPECT(0xbe, gbc.readMem(0xff9f));
        EXPECT(0x8c, gbc.readMem(0xffa0));
        // DC 0250
        gbc.setState(0x8b4a, 0xb901, 0x5520, 0x817b, 0x3362, 0x5007, 0x1, 0x1);
        gbc.writeMem(0x8b4a, { 0xdc, 0xe9, 0x3 });
        gbc.step();
        EXPECT(0x55, gbc.a());
        EXPECT(0x81, gbc.b());
        EXPECT(0x7b, gbc.c());
        EXPECT(0x33, gbc.d());
        EXPECT(0x62, gbc.e());
        EXPECT(0x50, gbc.h());
        EXPECT(0x7, gbc.l());
        EXPECT(0xb901, gbc.sp());
        EXPECT(0x8b4d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0x8b4a));
        EXPECT(0xe9, gbc.readMem(0x8b4b));
        EXPECT(0x3, gbc.readMem(0x8b4c));
        // DC 0251
        gbc.setState(0xc4a4, 0xff0b, 0x98c0, 0xd2df, 0xda99, 0xae88, 0x1, 0x0);
        gbc.writeMem(0xc4a4, { 0xdc, 0x76, 0xef });
        gbc.step();
        EXPECT(0x98, gbc.a());
        EXPECT(0xd2, gbc.b());
        EXPECT(0xdf, gbc.c());
        EXPECT(0xda, gbc.d());
        EXPECT(0x99, gbc.e());
        EXPECT(0xae, gbc.h());
        EXPECT(0x88, gbc.l());
        EXPECT(0xff0b, gbc.sp());
        EXPECT(0xc4a7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xc4a4));
        EXPECT(0x76, gbc.readMem(0xc4a5));
        EXPECT(0xef, gbc.readMem(0xc4a6));
        // DC 0252
        gbc.setState(0xdc0a, 0x80b1, 0xcba0, 0x1507, 0x84b6, 0x4241, 0x0, 0x0);
        gbc.writeMem(0xdc0a, { 0xdc, 0xcc, 0x2c });
        gbc.step();
        EXPECT(0xcb, gbc.a());
        EXPECT(0x15, gbc.b());
        EXPECT(0x7, gbc.c());
        EXPECT(0x84, gbc.d());
        EXPECT(0xb6, gbc.e());
        EXPECT(0x42, gbc.h());
        EXPECT(0x41, gbc.l());
        EXPECT(0x80b1, gbc.sp());
        EXPECT(0xdc0d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xdc0a));
        EXPECT(0xcc, gbc.readMem(0xdc0b));
        EXPECT(0x2c, gbc.readMem(0xdc0c));
        // DC 0253
        gbc.setState(0x9dd3, 0x6b13, 0xb960, 0xcc8a, 0xfa03, 0xbec1, 0x0, 0x1);
        gbc.writeMem(0x9dd3, { 0xdc, 0x54, 0x9d });
        gbc.step();
        EXPECT(0xb9, gbc.a());
        EXPECT(0xcc, gbc.b());
        EXPECT(0x8a, gbc.c());
        EXPECT(0xfa, gbc.d());
        EXPECT(0x3, gbc.e());
        EXPECT(0xbe, gbc.h());
        EXPECT(0xc1, gbc.l());
        EXPECT(0x6b13, gbc.sp());
        EXPECT(0x9dd6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0x9dd3));
        EXPECT(0x54, gbc.readMem(0x9dd4));
        EXPECT(0x9d, gbc.readMem(0x9dd5));
        // DC 0254
        gbc.setState(0xe3c7, 0x81a8, 0xd4c0, 0x455c, 0x77dd, 0xd976, 0x1, 0x0);
        gbc.writeMem(0xe3c7, { 0xdc, 0xee, 0x67 });
        gbc.step();
        EXPECT(0xd4, gbc.a());
        EXPECT(0x45, gbc.b());
        EXPECT(0x5c, gbc.c());
        EXPECT(0x77, gbc.d());
        EXPECT(0xdd, gbc.e());
        EXPECT(0xd9, gbc.h());
        EXPECT(0x76, gbc.l());
        EXPECT(0x81a8, gbc.sp());
        EXPECT(0xe3ca, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xe3c7));
        EXPECT(0xee, gbc.readMem(0xe3c8));
        EXPECT(0x67, gbc.readMem(0xe3c9));
        // DC 0255
        gbc.setState(0x8735, 0x3e57, 0x7a40, 0xf50e, 0xb827, 0x1872, 0x0, 0x1);
        gbc.writeMem(0x8735, { 0xdc, 0xe, 0xb });
        gbc.step();
        EXPECT(0x7a, gbc.a());
        EXPECT(0xf5, gbc.b());
        EXPECT(0xe, gbc.c());
        EXPECT(0xb8, gbc.d());
        EXPECT(0x27, gbc.e());
        EXPECT(0x18, gbc.h());
        EXPECT(0x72, gbc.l());
        EXPECT(0x3e57, gbc.sp());
        EXPECT(0x8738, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0x8735));
        EXPECT(0xe, gbc.readMem(0x8736));
        EXPECT(0xb, gbc.readMem(0x8737));
        // DC 0256
        gbc.setState(0x97fd, 0x9199, 0x5db0, 0xc3e4, 0xc846, 0x34ff, 0x0, 0x1);
        gbc.writeMem(0x9197, { 0x0, 0x0 });
        gbc.writeMem(0x97fd, { 0xdc, 0xbb, 0xc });
        gbc.step();
        EXPECT(0x5d, gbc.a());
        EXPECT(0xc3, gbc.b());
        EXPECT(0xe4, gbc.c());
        EXPECT(0xc8, gbc.d());
        EXPECT(0x46, gbc.e());
        EXPECT(0x34, gbc.h());
        EXPECT(0xff, gbc.l());
        EXPECT(0x9197, gbc.sp());
        EXPECT(0xcbb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x0, gbc.readMem(0x9197));
        EXPECT(0x98, gbc.readMem(0x9198));
        EXPECT(0xdc, gbc.readMem(0x97fd));
        EXPECT(0xbb, gbc.readMem(0x97fe));
        EXPECT(0xc, gbc.readMem(0x97ff));
        // DC 0257
        gbc.setState(0x6c62, 0x97af, 0x3190, 0x1fc0, 0x2364, 0x372f, 0x1, 0x0);
        gbc.writeMem(0x6c62, { 0xdc, 0xf1, 0xb6 });
        gbc.writeMem(0x97ad, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x31, gbc.a());
        EXPECT(0x1f, gbc.b());
        EXPECT(0xc0, gbc.c());
        EXPECT(0x23, gbc.d());
        EXPECT(0x64, gbc.e());
        EXPECT(0x37, gbc.h());
        EXPECT(0x2f, gbc.l());
        EXPECT(0x97ad, gbc.sp());
        EXPECT(0xb6f1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x65, gbc.readMem(0x97ad));
        EXPECT(0x6c, gbc.readMem(0x97ae));
        // DC 0258
        gbc.setState(0x2731, 0x52fc, 0xf660, 0x1380, 0xebe3, 0xc5c4, 0x1, 0x0);
        gbc.writeMem(0x2731, { 0xdc, 0x70, 0xe9 });
        gbc.step();
        EXPECT(0xf6, gbc.a());
        EXPECT(0x13, gbc.b());
        EXPECT(0x80, gbc.c());
        EXPECT(0xeb, gbc.d());
        EXPECT(0xe3, gbc.e());
        EXPECT(0xc5, gbc.h());
        EXPECT(0xc4, gbc.l());
        EXPECT(0x52fc, gbc.sp());
        EXPECT(0x2734, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 025B
        gbc.setState(0xc683, 0x9a70, 0xe720, 0x811f, 0x229c, 0x22e6, 0x0, 0x0);
        gbc.writeMem(0xc683, { 0xdc, 0xc1, 0x64 });
        gbc.step();
        EXPECT(0xe7, gbc.a());
        EXPECT(0x81, gbc.b());
        EXPECT(0x1f, gbc.c());
        EXPECT(0x22, gbc.d());
        EXPECT(0x9c, gbc.e());
        EXPECT(0x22, gbc.h());
        EXPECT(0xe6, gbc.l());
        EXPECT(0x9a70, gbc.sp());
        EXPECT(0xc686, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xc683));
        EXPECT(0xc1, gbc.readMem(0xc684));
        EXPECT(0x64, gbc.readMem(0xc685));
        // DC 025C
        gbc.setState(0x1038, 0xe7eb, 0x6180, 0x5ca3, 0xd097, 0xa95f, 0x1, 0x1);
        gbc.writeMem(0x1038, { 0xdc, 0x1e, 0xb2 });
        gbc.step();
        EXPECT(0x61, gbc.a());
        EXPECT(0x5c, gbc.b());
        EXPECT(0xa3, gbc.c());
        EXPECT(0xd0, gbc.d());
        EXPECT(0x97, gbc.e());
        EXPECT(0xa9, gbc.h());
        EXPECT(0x5f, gbc.l());
        EXPECT(0xe7eb, gbc.sp());
        EXPECT(0x103b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 0260
        gbc.setState(0x8965, 0xbcdf, 0x8f00, 0xee27, 0x6e64, 0x8206, 0x1, 0x0);
        gbc.writeMem(0x8965, { 0xdc, 0x2b, 0x93 });
        gbc.step();
        EXPECT(0x8f, gbc.a());
        EXPECT(0xee, gbc.b());
        EXPECT(0x27, gbc.c());
        EXPECT(0x6e, gbc.d());
        EXPECT(0x64, gbc.e());
        EXPECT(0x82, gbc.h());
        EXPECT(0x6, gbc.l());
        EXPECT(0xbcdf, gbc.sp());
        EXPECT(0x8968, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0x8965));
        EXPECT(0x2b, gbc.readMem(0x8966));
        EXPECT(0x93, gbc.readMem(0x8967));
        // DC 0261
        gbc.setState(0x1475, 0xcd29, 0xb1b0, 0xf577, 0x41dd, 0x9937, 0x0, 0x1);
        gbc.writeMem(0x1475, { 0xdc, 0x7a, 0x62 });
        gbc.writeMem(0xcd27, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xb1, gbc.a());
        EXPECT(0xf5, gbc.b());
        EXPECT(0x77, gbc.c());
        EXPECT(0x41, gbc.d());
        EXPECT(0xdd, gbc.e());
        EXPECT(0x99, gbc.h());
        EXPECT(0x37, gbc.l());
        EXPECT(0xcd27, gbc.sp());
        EXPECT(0x627a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x78, gbc.readMem(0xcd27));
        EXPECT(0x14, gbc.readMem(0xcd28));
        // DC 0262
        gbc.setState(0x9d96, 0x9110, 0x6cb0, 0xa43c, 0x657f, 0x197e, 0x1, 0x1);
        gbc.writeMem(0x910e, { 0x0, 0x0 });
        gbc.writeMem(0x9d96, { 0xdc, 0x41, 0xfa });
        gbc.step();
        EXPECT(0x6c, gbc.a());
        EXPECT(0xa4, gbc.b());
        EXPECT(0x3c, gbc.c());
        EXPECT(0x65, gbc.d());
        EXPECT(0x7f, gbc.e());
        EXPECT(0x19, gbc.h());
        EXPECT(0x7e, gbc.l());
        EXPECT(0x910e, gbc.sp());
        EXPECT(0xfa41, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x99, gbc.readMem(0x910e));
        EXPECT(0x9d, gbc.readMem(0x910f));
        EXPECT(0xdc, gbc.readMem(0x9d96));
        EXPECT(0x41, gbc.readMem(0x9d97));
        EXPECT(0xfa, gbc.readMem(0x9d98));
        // DC 0263
        gbc.setState(0xe21d, 0xa220, 0xa090, 0x92f8, 0x12da, 0x9f2d, 0x1, 0x1);
        gbc.writeMem(0xa21e, { 0x0, 0x0 });
        gbc.writeMem(0xe21d, { 0xdc, 0xdf, 0xc0 });
        gbc.step();
        EXPECT(0xa0, gbc.a());
        EXPECT(0x92, gbc.b());
        EXPECT(0xf8, gbc.c());
        EXPECT(0x12, gbc.d());
        EXPECT(0xda, gbc.e());
        EXPECT(0x9f, gbc.h());
        EXPECT(0x2d, gbc.l());
        EXPECT(0xa21e, gbc.sp());
        EXPECT(0xc0df, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x20, gbc.readMem(0xa21e));
        EXPECT(0xe2, gbc.readMem(0xa21f));
        EXPECT(0xdc, gbc.readMem(0xe21d));
        EXPECT(0xdf, gbc.readMem(0xe21e));
        EXPECT(0xc0, gbc.readMem(0xe21f));
        // DC 0266
        gbc.setState(0x3a10, 0xb2b6, 0xf5e0, 0x545f, 0x3749, 0xcedc, 0x0, 0x0);
        gbc.writeMem(0x3a10, { 0xdc, 0x80, 0x15 });
        gbc.step();
        EXPECT(0xf5, gbc.a());
        EXPECT(0x54, gbc.b());
        EXPECT(0x5f, gbc.c());
        EXPECT(0x37, gbc.d());
        EXPECT(0x49, gbc.e());
        EXPECT(0xce, gbc.h());
        EXPECT(0xdc, gbc.l());
        EXPECT(0xb2b6, gbc.sp());
        EXPECT(0x3a13, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 0267
        gbc.setState(0x299e, 0xd6a0, 0xb8b0, 0x7824, 0x6136, 0x84c6, 0x0, 0x1);
        gbc.writeMem(0x299e, { 0xdc, 0x6e, 0xcb });
        gbc.writeMem(0xd69e, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xb8, gbc.a());
        EXPECT(0x78, gbc.b());
        EXPECT(0x24, gbc.c());
        EXPECT(0x61, gbc.d());
        EXPECT(0x36, gbc.e());
        EXPECT(0x84, gbc.h());
        EXPECT(0xc6, gbc.l());
        EXPECT(0xd69e, gbc.sp());
        EXPECT(0xcb6e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xa1, gbc.readMem(0xd69e));
        EXPECT(0x29, gbc.readMem(0xd69f));
        // DC 0268
        gbc.setState(0x3acd, 0x7691, 0x220, 0xa4d8, 0x680d, 0xaf06, 0x1, 0x1);
        gbc.writeMem(0x3acd, { 0xdc, 0x6d, 0x5f });
        gbc.step();
        EXPECT(0x2, gbc.a());
        EXPECT(0xa4, gbc.b());
        EXPECT(0xd8, gbc.c());
        EXPECT(0x68, gbc.d());
        EXPECT(0xd, gbc.e());
        EXPECT(0xaf, gbc.h());
        EXPECT(0x6, gbc.l());
        EXPECT(0x7691, gbc.sp());
        EXPECT(0x3ad0, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 026A
        gbc.setState(0x4fba, 0x81ad, 0xe660, 0x34ee, 0x9e79, 0xfaf3, 0x0, 0x1);
        gbc.writeMem(0x4fba, { 0xdc, 0x70, 0xfc });
        gbc.step();
        EXPECT(0xe6, gbc.a());
        EXPECT(0x34, gbc.b());
        EXPECT(0xee, gbc.c());
        EXPECT(0x9e, gbc.d());
        EXPECT(0x79, gbc.e());
        EXPECT(0xfa, gbc.h());
        EXPECT(0xf3, gbc.l());
        EXPECT(0x81ad, gbc.sp());
        EXPECT(0x4fbd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 026D
        gbc.setState(0x23b9, 0xf7c4, 0x270, 0xc942, 0x5f2c, 0x15e4, 0x0, 0x1);
        gbc.writeMem(0x23b9, { 0xdc, 0xea, 0xd5 });
        gbc.writeMem(0xf7c2, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x2, gbc.a());
        EXPECT(0xc9, gbc.b());
        EXPECT(0x42, gbc.c());
        EXPECT(0x5f, gbc.d());
        EXPECT(0x2c, gbc.e());
        EXPECT(0x15, gbc.h());
        EXPECT(0xe4, gbc.l());
        EXPECT(0xf7c2, gbc.sp());
        EXPECT(0xd5ea, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xbc, gbc.readMem(0xf7c2));
        EXPECT(0x23, gbc.readMem(0xf7c3));
        // DC 026E
        gbc.setState(0xa264, 0xa77, 0x54c0, 0x9653, 0x413, 0xe80d, 0x0, 0x0);
        gbc.writeMem(0xa264, { 0xdc, 0xb5, 0x59 });
        gbc.step();
        EXPECT(0x54, gbc.a());
        EXPECT(0x96, gbc.b());
        EXPECT(0x53, gbc.c());
        EXPECT(0x4, gbc.d());
        EXPECT(0x13, gbc.e());
        EXPECT(0xe8, gbc.h());
        EXPECT(0xd, gbc.l());
        EXPECT(0xa77, gbc.sp());
        EXPECT(0xa267, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xa264));
        EXPECT(0xb5, gbc.readMem(0xa265));
        EXPECT(0x59, gbc.readMem(0xa266));
        // DC 0271
        gbc.setState(0x4849, 0xc678, 0x12c0, 0x7f7f, 0x5aef, 0x72d4, 0x1, 0x0);
        gbc.writeMem(0x4849, { 0xdc, 0xd, 0x4d });
        gbc.step();
        EXPECT(0x12, gbc.a());
        EXPECT(0x7f, gbc.b());
        EXPECT(0x7f, gbc.c());
        EXPECT(0x5a, gbc.d());
        EXPECT(0xef, gbc.e());
        EXPECT(0x72, gbc.h());
        EXPECT(0xd4, gbc.l());
        EXPECT(0xc678, gbc.sp());
        EXPECT(0x484c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 0272
        gbc.setState(0x6b8d, 0x337c, 0x2720, 0x9528, 0x5f40, 0x472, 0x1, 0x1);
        gbc.writeMem(0x6b8d, { 0xdc, 0x2, 0x86 });
        gbc.step();
        EXPECT(0x27, gbc.a());
        EXPECT(0x95, gbc.b());
        EXPECT(0x28, gbc.c());
        EXPECT(0x5f, gbc.d());
        EXPECT(0x40, gbc.e());
        EXPECT(0x4, gbc.h());
        EXPECT(0x72, gbc.l());
        EXPECT(0x337c, gbc.sp());
        EXPECT(0x6b90, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 0273
        gbc.setState(0xded4, 0xe14e, 0xb350, 0x73f9, 0x658a, 0xa1cd, 0x1, 0x0);
        gbc.writeMem(0xded4, { 0xdc, 0xa8, 0xb8 });
        gbc.writeMem(0xe14c, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xb3, gbc.a());
        EXPECT(0x73, gbc.b());
        EXPECT(0xf9, gbc.c());
        EXPECT(0x65, gbc.d());
        EXPECT(0x8a, gbc.e());
        EXPECT(0xa1, gbc.h());
        EXPECT(0xcd, gbc.l());
        EXPECT(0xe14c, gbc.sp());
        EXPECT(0xb8a8, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xded4));
        EXPECT(0xa8, gbc.readMem(0xded5));
        EXPECT(0xb8, gbc.readMem(0xded6));
        EXPECT(0xd7, gbc.readMem(0xe14c));
        EXPECT(0xde, gbc.readMem(0xe14d));
        // DC 0274
        gbc.setState(0x4b28, 0x2444, 0x3d40, 0x7b10, 0x8c43, 0x2ea4, 0x1, 0x1);
        gbc.writeMem(0x4b28, { 0xdc, 0xfe, 0xf7 });
        gbc.step();
        EXPECT(0x3d, gbc.a());
        EXPECT(0x7b, gbc.b());
        EXPECT(0x10, gbc.c());
        EXPECT(0x8c, gbc.d());
        EXPECT(0x43, gbc.e());
        EXPECT(0x2e, gbc.h());
        EXPECT(0xa4, gbc.l());
        EXPECT(0x2444, gbc.sp());
        EXPECT(0x4b2b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 0275
        gbc.setState(0xe436, 0x4681, 0x6000, 0xd039, 0xdff5, 0x3f9c, 0x1, 0x1);
        gbc.writeMem(0xe436, { 0xdc, 0x57, 0x78 });
        gbc.step();
        EXPECT(0x60, gbc.a());
        EXPECT(0xd0, gbc.b());
        EXPECT(0x39, gbc.c());
        EXPECT(0xdf, gbc.d());
        EXPECT(0xf5, gbc.e());
        EXPECT(0x3f, gbc.h());
        EXPECT(0x9c, gbc.l());
        EXPECT(0x4681, gbc.sp());
        EXPECT(0xe439, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xe436));
        EXPECT(0x57, gbc.readMem(0xe437));
        EXPECT(0x78, gbc.readMem(0xe438));
        // DC 0276
        gbc.setState(0x965b, 0x3ac, 0x3720, 0xe366, 0x5e2c, 0x9b1f, 0x0, 0x0);
        gbc.writeMem(0x965b, { 0xdc, 0xb6, 0x71 });
        gbc.step();
        EXPECT(0x37, gbc.a());
        EXPECT(0xe3, gbc.b());
        EXPECT(0x66, gbc.c());
        EXPECT(0x5e, gbc.d());
        EXPECT(0x2c, gbc.e());
        EXPECT(0x9b, gbc.h());
        EXPECT(0x1f, gbc.l());
        EXPECT(0x3ac, gbc.sp());
        EXPECT(0x965e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0x965b));
        EXPECT(0xb6, gbc.readMem(0x965c));
        EXPECT(0x71, gbc.readMem(0x965d));
        // DC 0277
        gbc.setState(0x17d9, 0xc542, 0x3260, 0x1993, 0xa803, 0xb357, 0x0, 0x0);
        gbc.writeMem(0x17d9, { 0xdc, 0x9f, 0x24 });
        gbc.step();
        EXPECT(0x32, gbc.a());
        EXPECT(0x19, gbc.b());
        EXPECT(0x93, gbc.c());
        EXPECT(0xa8, gbc.d());
        EXPECT(0x3, gbc.e());
        EXPECT(0xb3, gbc.h());
        EXPECT(0x57, gbc.l());
        EXPECT(0xc542, gbc.sp());
        EXPECT(0x17dc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 0278
        gbc.setState(0xa9ff, 0xaf12, 0x53a0, 0x66a2, 0xc80d, 0x5c2e, 0x1, 0x0);
        gbc.writeMem(0xa9ff, { 0xdc, 0x50, 0x15 });
        gbc.step();
        EXPECT(0x53, gbc.a());
        EXPECT(0x66, gbc.b());
        EXPECT(0xa2, gbc.c());
        EXPECT(0xc8, gbc.d());
        EXPECT(0xd, gbc.e());
        EXPECT(0x5c, gbc.h());
        EXPECT(0x2e, gbc.l());
        EXPECT(0xaf12, gbc.sp());
        EXPECT(0xaa02, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xa9ff));
        EXPECT(0x50, gbc.readMem(0xaa00));
        EXPECT(0x15, gbc.readMem(0xaa01));
        // DC 0279
        gbc.setState(0x7b7b, 0xc413, 0x740, 0xf0c8, 0x2e37, 0x23c4, 0x0, 0x1);
        gbc.writeMem(0x7b7b, { 0xdc, 0xe8, 0x35 });
        gbc.step();
        EXPECT(0x7, gbc.a());
        EXPECT(0xf0, gbc.b());
        EXPECT(0xc8, gbc.c());
        EXPECT(0x2e, gbc.d());
        EXPECT(0x37, gbc.e());
        EXPECT(0x23, gbc.h());
        EXPECT(0xc4, gbc.l());
        EXPECT(0xc413, gbc.sp());
        EXPECT(0x7b7e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 027A
        gbc.setState(0xe5eb, 0x5f67, 0xb800, 0x9040, 0x60d7, 0x84f7, 0x0, 0x0);
        gbc.writeMem(0xe5eb, { 0xdc, 0xd2, 0xe5 });
        gbc.step();
        EXPECT(0xb8, gbc.a());
        EXPECT(0x90, gbc.b());
        EXPECT(0x40, gbc.c());
        EXPECT(0x60, gbc.d());
        EXPECT(0xd7, gbc.e());
        EXPECT(0x84, gbc.h());
        EXPECT(0xf7, gbc.l());
        EXPECT(0x5f67, gbc.sp());
        EXPECT(0xe5ee, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xe5eb));
        EXPECT(0xd2, gbc.readMem(0xe5ec));
        EXPECT(0xe5, gbc.readMem(0xe5ed));
        // DC 027C
        gbc.setState(0x5ace, 0xd0d6, 0xa140, 0x72eb, 0xf6fb, 0xa146, 0x0, 0x1);
        gbc.writeMem(0x5ace, { 0xdc, 0xbe, 0x59 });
        gbc.step();
        EXPECT(0xa1, gbc.a());
        EXPECT(0x72, gbc.b());
        EXPECT(0xeb, gbc.c());
        EXPECT(0xf6, gbc.d());
        EXPECT(0xfb, gbc.e());
        EXPECT(0xa1, gbc.h());
        EXPECT(0x46, gbc.l());
        EXPECT(0xd0d6, gbc.sp());
        EXPECT(0x5ad1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 027D
        gbc.setState(0xdd75, 0xc578, 0x58e0, 0xcc22, 0x1862, 0xc812, 0x0, 0x0);
        gbc.writeMem(0xdd75, { 0xdc, 0x84, 0xe });
        gbc.step();
        EXPECT(0x58, gbc.a());
        EXPECT(0xcc, gbc.b());
        EXPECT(0x22, gbc.c());
        EXPECT(0x18, gbc.d());
        EXPECT(0x62, gbc.e());
        EXPECT(0xc8, gbc.h());
        EXPECT(0x12, gbc.l());
        EXPECT(0xc578, gbc.sp());
        EXPECT(0xdd78, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xdd75));
        EXPECT(0x84, gbc.readMem(0xdd76));
        EXPECT(0xe, gbc.readMem(0xdd77));
        // DC 027F
        gbc.setState(0x4d9d, 0xb9a4, 0x6ac0, 0x88a2, 0xaeb5, 0x91b0, 0x0, 0x1);
        gbc.writeMem(0x4d9d, { 0xdc, 0x45, 0xc8 });
        gbc.step();
        EXPECT(0x6a, gbc.a());
        EXPECT(0x88, gbc.b());
        EXPECT(0xa2, gbc.c());
        EXPECT(0xae, gbc.d());
        EXPECT(0xb5, gbc.e());
        EXPECT(0x91, gbc.h());
        EXPECT(0xb0, gbc.l());
        EXPECT(0xb9a4, gbc.sp());
        EXPECT(0x4da0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 0280
        gbc.setState(0x1849, 0x8528, 0x9ec0, 0x581b, 0xffd0, 0x39ae, 0x0, 0x0);
        gbc.writeMem(0x1849, { 0xdc, 0xb8, 0x62 });
        gbc.step();
        EXPECT(0x9e, gbc.a());
        EXPECT(0x58, gbc.b());
        EXPECT(0x1b, gbc.c());
        EXPECT(0xff, gbc.d());
        EXPECT(0xd0, gbc.e());
        EXPECT(0x39, gbc.h());
        EXPECT(0xae, gbc.l());
        EXPECT(0x8528, gbc.sp());
        EXPECT(0x184c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 0281
        gbc.setState(0xdc24, 0x6252, 0x7ae0, 0x58d0, 0xe9b3, 0x8d05, 0x1, 0x0);
        gbc.writeMem(0xdc24, { 0xdc, 0x58, 0x8c });
        gbc.step();
        EXPECT(0x7a, gbc.a());
        EXPECT(0x58, gbc.b());
        EXPECT(0xd0, gbc.c());
        EXPECT(0xe9, gbc.d());
        EXPECT(0xb3, gbc.e());
        EXPECT(0x8d, gbc.h());
        EXPECT(0x5, gbc.l());
        EXPECT(0x6252, gbc.sp());
        EXPECT(0xdc27, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xdc24));
        EXPECT(0x58, gbc.readMem(0xdc25));
        EXPECT(0x8c, gbc.readMem(0xdc26));
        // DC 0282
        gbc.setState(0x28af, 0x6ee4, 0x38a0, 0x62b6, 0x8d41, 0x8c41, 0x0, 0x1);
        gbc.writeMem(0x28af, { 0xdc, 0xfb, 0x87 });
        gbc.step();
        EXPECT(0x38, gbc.a());
        EXPECT(0x62, gbc.b());
        EXPECT(0xb6, gbc.c());
        EXPECT(0x8d, gbc.d());
        EXPECT(0x41, gbc.e());
        EXPECT(0x8c, gbc.h());
        EXPECT(0x41, gbc.l());
        EXPECT(0x6ee4, gbc.sp());
        EXPECT(0x28b2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 0283
        gbc.setState(0x99f3, 0x5ca6, 0x1a0, 0x6330, 0xea74, 0x379f, 0x1, 0x1);
        gbc.writeMem(0x99f3, { 0xdc, 0xa6, 0xc2 });
        gbc.step();
        EXPECT(0x1, gbc.a());
        EXPECT(0x63, gbc.b());
        EXPECT(0x30, gbc.c());
        EXPECT(0xea, gbc.d());
        EXPECT(0x74, gbc.e());
        EXPECT(0x37, gbc.h());
        EXPECT(0x9f, gbc.l());
        EXPECT(0x5ca6, gbc.sp());
        EXPECT(0x99f6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0x99f3));
        EXPECT(0xa6, gbc.readMem(0x99f4));
        EXPECT(0xc2, gbc.readMem(0x99f5));
        // DC 0284
        gbc.setState(0x97f6, 0xb704, 0x4d70, 0xb7b2, 0x8f77, 0xe2fd, 0x0, 0x0);
        gbc.writeMem(0x97f6, { 0xdc, 0x6b, 0x4e });
        gbc.writeMem(0xb702, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x4d, gbc.a());
        EXPECT(0xb7, gbc.b());
        EXPECT(0xb2, gbc.c());
        EXPECT(0x8f, gbc.d());
        EXPECT(0x77, gbc.e());
        EXPECT(0xe2, gbc.h());
        EXPECT(0xfd, gbc.l());
        EXPECT(0xb702, gbc.sp());
        EXPECT(0x4e6b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0x97f6));
        EXPECT(0x6b, gbc.readMem(0x97f7));
        EXPECT(0x4e, gbc.readMem(0x97f8));
        EXPECT(0xf9, gbc.readMem(0xb702));
        EXPECT(0x97, gbc.readMem(0xb703));
        // DC 0286
        gbc.setState(0x6c1f, 0xfb46, 0xfff0, 0x2a80, 0xd753, 0xf051, 0x0, 0x0);
        gbc.writeMem(0x6c1f, { 0xdc, 0x9c, 0x1c });
        gbc.writeMem(0xfb44, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xff, gbc.a());
        EXPECT(0x2a, gbc.b());
        EXPECT(0x80, gbc.c());
        EXPECT(0xd7, gbc.d());
        EXPECT(0x53, gbc.e());
        EXPECT(0xf0, gbc.h());
        EXPECT(0x51, gbc.l());
        EXPECT(0xfb44, gbc.sp());
        EXPECT(0x1c9c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x22, gbc.readMem(0xfb44));
        EXPECT(0x6c, gbc.readMem(0xfb45));
        // DC 0287
        gbc.setState(0x5880, 0x3003, 0x6c60, 0xf107, 0xc478, 0x54a9, 0x0, 0x0);
        gbc.writeMem(0x5880, { 0xdc, 0xf4, 0x82 });
        gbc.step();
        EXPECT(0x6c, gbc.a());
        EXPECT(0xf1, gbc.b());
        EXPECT(0x7, gbc.c());
        EXPECT(0xc4, gbc.d());
        EXPECT(0x78, gbc.e());
        EXPECT(0x54, gbc.h());
        EXPECT(0xa9, gbc.l());
        EXPECT(0x3003, gbc.sp());
        EXPECT(0x5883, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 028A
        gbc.setState(0x80cb, 0xb9b7, 0x4790, 0x6f09, 0x3224, 0x2f79, 0x1, 0x0);
        gbc.writeMem(0x80cb, { 0xdc, 0x29, 0xfd });
        gbc.writeMem(0xb9b5, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x47, gbc.a());
        EXPECT(0x6f, gbc.b());
        EXPECT(0x9, gbc.c());
        EXPECT(0x32, gbc.d());
        EXPECT(0x24, gbc.e());
        EXPECT(0x2f, gbc.h());
        EXPECT(0x79, gbc.l());
        EXPECT(0xb9b5, gbc.sp());
        EXPECT(0xfd29, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0x80cb));
        EXPECT(0x29, gbc.readMem(0x80cc));
        EXPECT(0xfd, gbc.readMem(0x80cd));
        EXPECT(0xce, gbc.readMem(0xb9b5));
        EXPECT(0x80, gbc.readMem(0xb9b6));
        // DC 028C
        gbc.setState(0x8659, 0x2da0, 0x47a0, 0xb87b, 0xecfd, 0x1344, 0x1, 0x1);
        gbc.writeMem(0x8659, { 0xdc, 0xd3, 0xe6 });
        gbc.step();
        EXPECT(0x47, gbc.a());
        EXPECT(0xb8, gbc.b());
        EXPECT(0x7b, gbc.c());
        EXPECT(0xec, gbc.d());
        EXPECT(0xfd, gbc.e());
        EXPECT(0x13, gbc.h());
        EXPECT(0x44, gbc.l());
        EXPECT(0x2da0, gbc.sp());
        EXPECT(0x865c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0x8659));
        EXPECT(0xd3, gbc.readMem(0x865a));
        EXPECT(0xe6, gbc.readMem(0x865b));
        // DC 028D
        gbc.setState(0x6a7e, 0xbc86, 0xc140, 0xe0e1, 0x3153, 0xe678, 0x0, 0x1);
        gbc.writeMem(0x6a7e, { 0xdc, 0x1f, 0x9a });
        gbc.step();
        EXPECT(0xc1, gbc.a());
        EXPECT(0xe0, gbc.b());
        EXPECT(0xe1, gbc.c());
        EXPECT(0x31, gbc.d());
        EXPECT(0x53, gbc.e());
        EXPECT(0xe6, gbc.h());
        EXPECT(0x78, gbc.l());
        EXPECT(0xbc86, gbc.sp());
        EXPECT(0x6a81, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 028F
        gbc.setState(0x6d1e, 0x7930, 0x3560, 0xf640, 0xfc2d, 0xf31c, 0x0, 0x1);
        gbc.writeMem(0x6d1e, { 0xdc, 0x5b, 0x7a });
        gbc.step();
        EXPECT(0x35, gbc.a());
        EXPECT(0xf6, gbc.b());
        EXPECT(0x40, gbc.c());
        EXPECT(0xfc, gbc.d());
        EXPECT(0x2d, gbc.e());
        EXPECT(0xf3, gbc.h());
        EXPECT(0x1c, gbc.l());
        EXPECT(0x7930, gbc.sp());
        EXPECT(0x6d21, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 0290
        gbc.setState(0x9d58, 0x267b, 0x2c40, 0x68ec, 0xadc6, 0xdf7f, 0x1, 0x0);
        gbc.writeMem(0x9d58, { 0xdc, 0xa5, 0xb });
        gbc.step();
        EXPECT(0x2c, gbc.a());
        EXPECT(0x68, gbc.b());
        EXPECT(0xec, gbc.c());
        EXPECT(0xad, gbc.d());
        EXPECT(0xc6, gbc.e());
        EXPECT(0xdf, gbc.h());
        EXPECT(0x7f, gbc.l());
        EXPECT(0x267b, gbc.sp());
        EXPECT(0x9d5b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0x9d58));
        EXPECT(0xa5, gbc.readMem(0x9d59));
        EXPECT(0xb, gbc.readMem(0x9d5a));
        // DC 0291
        gbc.setState(0x81a1, 0x8efa, 0xe30, 0xdc57, 0x45ee, 0x2cee, 0x1, 0x1);
        gbc.writeMem(0x81a1, { 0xdc, 0xd, 0x27 });
        gbc.writeMem(0x8ef8, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xe, gbc.a());
        EXPECT(0xdc, gbc.b());
        EXPECT(0x57, gbc.c());
        EXPECT(0x45, gbc.d());
        EXPECT(0xee, gbc.e());
        EXPECT(0x2c, gbc.h());
        EXPECT(0xee, gbc.l());
        EXPECT(0x8ef8, gbc.sp());
        EXPECT(0x270d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0x81a1));
        EXPECT(0xd, gbc.readMem(0x81a2));
        EXPECT(0x27, gbc.readMem(0x81a3));
        EXPECT(0xa4, gbc.readMem(0x8ef8));
        EXPECT(0x81, gbc.readMem(0x8ef9));
        // DC 0292
        gbc.setState(0x6581, 0x6758, 0xe060, 0x3f68, 0x4928, 0x2fd5, 0x1, 0x1);
        gbc.writeMem(0x6581, { 0xdc, 0x82, 0xe9 });
        gbc.step();
        EXPECT(0xe0, gbc.a());
        EXPECT(0x3f, gbc.b());
        EXPECT(0x68, gbc.c());
        EXPECT(0x49, gbc.d());
        EXPECT(0x28, gbc.e());
        EXPECT(0x2f, gbc.h());
        EXPECT(0xd5, gbc.l());
        EXPECT(0x6758, gbc.sp());
        EXPECT(0x6584, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 0293
        gbc.setState(0xcc2b, 0x9be3, 0x8940, 0x55d7, 0x6666, 0x3274, 0x0, 0x0);
        gbc.writeMem(0xcc2b, { 0xdc, 0xe8, 0xbc });
        gbc.step();
        EXPECT(0x89, gbc.a());
        EXPECT(0x55, gbc.b());
        EXPECT(0xd7, gbc.c());
        EXPECT(0x66, gbc.d());
        EXPECT(0x66, gbc.e());
        EXPECT(0x32, gbc.h());
        EXPECT(0x74, gbc.l());
        EXPECT(0x9be3, gbc.sp());
        EXPECT(0xcc2e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xcc2b));
        EXPECT(0xe8, gbc.readMem(0xcc2c));
        EXPECT(0xbc, gbc.readMem(0xcc2d));
        // DC 0294
        gbc.setState(0x793c, 0x7e11, 0x4100, 0x2325, 0xeadf, 0x25fb, 0x0, 0x1);
        gbc.writeMem(0x793c, { 0xdc, 0xbe, 0x78 });
        gbc.step();
        EXPECT(0x41, gbc.a());
        EXPECT(0x23, gbc.b());
        EXPECT(0x25, gbc.c());
        EXPECT(0xea, gbc.d());
        EXPECT(0xdf, gbc.e());
        EXPECT(0x25, gbc.h());
        EXPECT(0xfb, gbc.l());
        EXPECT(0x7e11, gbc.sp());
        EXPECT(0x793f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 0296
        gbc.setState(0x51c3, 0xedd0, 0x1de0, 0x995a, 0xc3fa, 0x3d32, 0x0, 0x1);
        gbc.writeMem(0x51c3, { 0xdc, 0xea, 0xd5 });
        gbc.step();
        EXPECT(0x1d, gbc.a());
        EXPECT(0x99, gbc.b());
        EXPECT(0x5a, gbc.c());
        EXPECT(0xc3, gbc.d());
        EXPECT(0xfa, gbc.e());
        EXPECT(0x3d, gbc.h());
        EXPECT(0x32, gbc.l());
        EXPECT(0xedd0, gbc.sp());
        EXPECT(0x51c6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 0297
        gbc.setState(0x487d, 0x40ef, 0xe0, 0x20c5, 0x4b42, 0xda5b, 0x0, 0x1);
        gbc.writeMem(0x487d, { 0xdc, 0xbe, 0x25 });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x20, gbc.b());
        EXPECT(0xc5, gbc.c());
        EXPECT(0x4b, gbc.d());
        EXPECT(0x42, gbc.e());
        EXPECT(0xda, gbc.h());
        EXPECT(0x5b, gbc.l());
        EXPECT(0x40ef, gbc.sp());
        EXPECT(0x4880, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 029A
        gbc.setState(0x21fb, 0x19b4, 0x9300, 0x6ad9, 0x1750, 0xb94c, 0x1, 0x1);
        gbc.writeMem(0x21fb, { 0xdc, 0x79, 0x10 });
        gbc.step();
        EXPECT(0x93, gbc.a());
        EXPECT(0x6a, gbc.b());
        EXPECT(0xd9, gbc.c());
        EXPECT(0x17, gbc.d());
        EXPECT(0x50, gbc.e());
        EXPECT(0xb9, gbc.h());
        EXPECT(0x4c, gbc.l());
        EXPECT(0x19b4, gbc.sp());
        EXPECT(0x21fe, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 029B
        gbc.setState(0xbbc7, 0xd5f6, 0x6790, 0x74d2, 0x3715, 0x6c0, 0x1, 0x1);
        gbc.writeMem(0xbbc7, { 0xdc, 0x1b, 0xc0 });
        gbc.writeMem(0xd5f4, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x67, gbc.a());
        EXPECT(0x74, gbc.b());
        EXPECT(0xd2, gbc.c());
        EXPECT(0x37, gbc.d());
        EXPECT(0x15, gbc.e());
        EXPECT(0x6, gbc.h());
        EXPECT(0xc0, gbc.l());
        EXPECT(0xd5f4, gbc.sp());
        EXPECT(0xc01b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xbbc7));
        EXPECT(0x1b, gbc.readMem(0xbbc8));
        EXPECT(0xc0, gbc.readMem(0xbbc9));
        EXPECT(0xca, gbc.readMem(0xd5f4));
        EXPECT(0xbb, gbc.readMem(0xd5f5));
        // DC 029D
        gbc.setState(0x9540, 0x5898, 0x800, 0x762f, 0x1c70, 0xf132, 0x1, 0x0);
        gbc.writeMem(0x9540, { 0xdc, 0xf, 0x7 });
        gbc.step();
        EXPECT(0x8, gbc.a());
        EXPECT(0x76, gbc.b());
        EXPECT(0x2f, gbc.c());
        EXPECT(0x1c, gbc.d());
        EXPECT(0x70, gbc.e());
        EXPECT(0xf1, gbc.h());
        EXPECT(0x32, gbc.l());
        EXPECT(0x5898, gbc.sp());
        EXPECT(0x9543, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0x9540));
        EXPECT(0xf, gbc.readMem(0x9541));
        EXPECT(0x7, gbc.readMem(0x9542));
        // DC 029E
        gbc.setState(0xa9ab, 0xd40d, 0xd930, 0x5183, 0xde17, 0x56b8, 0x0, 0x1);
        gbc.writeMem(0xa9ab, { 0xdc, 0x8, 0x9e });
        gbc.writeMem(0xd40b, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xd9, gbc.a());
        EXPECT(0x51, gbc.b());
        EXPECT(0x83, gbc.c());
        EXPECT(0xde, gbc.d());
        EXPECT(0x17, gbc.e());
        EXPECT(0x56, gbc.h());
        EXPECT(0xb8, gbc.l());
        EXPECT(0xd40b, gbc.sp());
        EXPECT(0x9e08, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xa9ab));
        EXPECT(0x8, gbc.readMem(0xa9ac));
        EXPECT(0x9e, gbc.readMem(0xa9ad));
        EXPECT(0xae, gbc.readMem(0xd40b));
        EXPECT(0xa9, gbc.readMem(0xd40c));
        // DC 029F
        gbc.setState(0x66b4, 0xa5ef, 0xbeb0, 0xd262, 0x33f7, 0xfcf, 0x0, 0x1);
        gbc.writeMem(0x66b4, { 0xdc, 0xc0, 0x61 });
        gbc.writeMem(0xa5ed, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xbe, gbc.a());
        EXPECT(0xd2, gbc.b());
        EXPECT(0x62, gbc.c());
        EXPECT(0x33, gbc.d());
        EXPECT(0xf7, gbc.e());
        EXPECT(0xf, gbc.h());
        EXPECT(0xcf, gbc.l());
        EXPECT(0xa5ed, gbc.sp());
        EXPECT(0x61c0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xb7, gbc.readMem(0xa5ed));
        EXPECT(0x66, gbc.readMem(0xa5ee));
        // DC 02A0
        gbc.setState(0xa255, 0xaa3, 0xebe0, 0x7317, 0x1f22, 0x85b4, 0x0, 0x0);
        gbc.writeMem(0xa255, { 0xdc, 0xa6, 0x77 });
        gbc.step();
        EXPECT(0xeb, gbc.a());
        EXPECT(0x73, gbc.b());
        EXPECT(0x17, gbc.c());
        EXPECT(0x1f, gbc.d());
        EXPECT(0x22, gbc.e());
        EXPECT(0x85, gbc.h());
        EXPECT(0xb4, gbc.l());
        EXPECT(0xaa3, gbc.sp());
        EXPECT(0xa258, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xa255));
        EXPECT(0xa6, gbc.readMem(0xa256));
        EXPECT(0x77, gbc.readMem(0xa257));
        // DC 02A3
        gbc.setState(0x5210, 0x6de1, 0xca00, 0x154, 0xcb8f, 0xd6f0, 0x0, 0x0);
        gbc.writeMem(0x5210, { 0xdc, 0x4e, 0xca });
        gbc.step();
        EXPECT(0xca, gbc.a());
        EXPECT(0x1, gbc.b());
        EXPECT(0x54, gbc.c());
        EXPECT(0xcb, gbc.d());
        EXPECT(0x8f, gbc.e());
        EXPECT(0xd6, gbc.h());
        EXPECT(0xf0, gbc.l());
        EXPECT(0x6de1, gbc.sp());
        EXPECT(0x5213, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 02A5
        gbc.setState(0x1a8d, 0xf4a4, 0x23a0, 0xacc9, 0xb28d, 0xfdf4, 0x0, 0x0);
        gbc.writeMem(0x1a8d, { 0xdc, 0xca, 0x69 });
        gbc.step();
        EXPECT(0x23, gbc.a());
        EXPECT(0xac, gbc.b());
        EXPECT(0xc9, gbc.c());
        EXPECT(0xb2, gbc.d());
        EXPECT(0x8d, gbc.e());
        EXPECT(0xfd, gbc.h());
        EXPECT(0xf4, gbc.l());
        EXPECT(0xf4a4, gbc.sp());
        EXPECT(0x1a90, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 02A6
        gbc.setState(0xa147, 0xb6, 0x620, 0xcc5d, 0x293b, 0x66d6, 0x0, 0x1);
        gbc.writeMem(0xa147, { 0xdc, 0xec, 0x3b });
        gbc.step();
        EXPECT(0x6, gbc.a());
        EXPECT(0xcc, gbc.b());
        EXPECT(0x5d, gbc.c());
        EXPECT(0x29, gbc.d());
        EXPECT(0x3b, gbc.e());
        EXPECT(0x66, gbc.h());
        EXPECT(0xd6, gbc.l());
        EXPECT(0xb6, gbc.sp());
        EXPECT(0xa14a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xa147));
        EXPECT(0xec, gbc.readMem(0xa148));
        EXPECT(0x3b, gbc.readMem(0xa149));
        // DC 02A8
        gbc.setState(0xec2a, 0x64b2, 0xda40, 0x179, 0xd195, 0x4131, 0x0, 0x0);
        gbc.writeMem(0xec2a, { 0xdc, 0x75, 0xd0 });
        gbc.step();
        EXPECT(0xda, gbc.a());
        EXPECT(0x1, gbc.b());
        EXPECT(0x79, gbc.c());
        EXPECT(0xd1, gbc.d());
        EXPECT(0x95, gbc.e());
        EXPECT(0x41, gbc.h());
        EXPECT(0x31, gbc.l());
        EXPECT(0x64b2, gbc.sp());
        EXPECT(0xec2d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xec2a));
        EXPECT(0x75, gbc.readMem(0xec2b));
        EXPECT(0xd0, gbc.readMem(0xec2c));
        // DC 02AB
        gbc.setState(0xaf1c, 0xae06, 0xd0a0, 0xe362, 0x1fd0, 0x1df1, 0x1, 0x0);
        gbc.writeMem(0xaf1c, { 0xdc, 0x78, 0xd1 });
        gbc.step();
        EXPECT(0xd0, gbc.a());
        EXPECT(0xe3, gbc.b());
        EXPECT(0x62, gbc.c());
        EXPECT(0x1f, gbc.d());
        EXPECT(0xd0, gbc.e());
        EXPECT(0x1d, gbc.h());
        EXPECT(0xf1, gbc.l());
        EXPECT(0xae06, gbc.sp());
        EXPECT(0xaf1f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xaf1c));
        EXPECT(0x78, gbc.readMem(0xaf1d));
        EXPECT(0xd1, gbc.readMem(0xaf1e));
        // DC 02AC
        gbc.setState(0x1e07, 0xedd7, 0x410, 0xc717, 0xb787, 0x3f43, 0x0, 0x1);
        gbc.writeMem(0x1e07, { 0xdc, 0xcc, 0xaa });
        gbc.writeMem(0xedd5, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x4, gbc.a());
        EXPECT(0xc7, gbc.b());
        EXPECT(0x17, gbc.c());
        EXPECT(0xb7, gbc.d());
        EXPECT(0x87, gbc.e());
        EXPECT(0x3f, gbc.h());
        EXPECT(0x43, gbc.l());
        EXPECT(0xedd5, gbc.sp());
        EXPECT(0xaacc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xa, gbc.readMem(0xedd5));
        EXPECT(0x1e, gbc.readMem(0xedd6));
        // DC 02AD
        gbc.setState(0x745, 0x9689, 0xf20, 0x8c89, 0x7b33, 0xea1f, 0x0, 0x1);
        gbc.writeMem(0x745, { 0xdc, 0x2, 0x54 });
        gbc.step();
        EXPECT(0xf, gbc.a());
        EXPECT(0x8c, gbc.b());
        EXPECT(0x89, gbc.c());
        EXPECT(0x7b, gbc.d());
        EXPECT(0x33, gbc.e());
        EXPECT(0xea, gbc.h());
        EXPECT(0x1f, gbc.l());
        EXPECT(0x9689, gbc.sp());
        EXPECT(0x748, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 02AE
        gbc.setState(0x4f13, 0x9b63, 0x7200, 0x503c, 0x9ad4, 0x6e47, 0x0, 0x1);
        gbc.writeMem(0x4f13, { 0xdc, 0x2a, 0x43 });
        gbc.step();
        EXPECT(0x72, gbc.a());
        EXPECT(0x50, gbc.b());
        EXPECT(0x3c, gbc.c());
        EXPECT(0x9a, gbc.d());
        EXPECT(0xd4, gbc.e());
        EXPECT(0x6e, gbc.h());
        EXPECT(0x47, gbc.l());
        EXPECT(0x9b63, gbc.sp());
        EXPECT(0x4f16, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 02B0
        gbc.setState(0xb190, 0xf5a0, 0xf770, 0x1934, 0xedec, 0xf30b, 0x0, 0x0);
        gbc.writeMem(0xb190, { 0xdc, 0x24, 0xc5 });
        gbc.writeMem(0xf59e, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xf7, gbc.a());
        EXPECT(0x19, gbc.b());
        EXPECT(0x34, gbc.c());
        EXPECT(0xed, gbc.d());
        EXPECT(0xec, gbc.e());
        EXPECT(0xf3, gbc.h());
        EXPECT(0xb, gbc.l());
        EXPECT(0xf59e, gbc.sp());
        EXPECT(0xc524, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xb190));
        EXPECT(0x24, gbc.readMem(0xb191));
        EXPECT(0xc5, gbc.readMem(0xb192));
        EXPECT(0x93, gbc.readMem(0xf59e));
        EXPECT(0xb1, gbc.readMem(0xf59f));
        // DC 02B1
        gbc.setState(0x98e9, 0x200e, 0xc540, 0x3997, 0xc72f, 0xc414, 0x0, 0x1);
        gbc.writeMem(0x98e9, { 0xdc, 0x15, 0xd1 });
        gbc.step();
        EXPECT(0xc5, gbc.a());
        EXPECT(0x39, gbc.b());
        EXPECT(0x97, gbc.c());
        EXPECT(0xc7, gbc.d());
        EXPECT(0x2f, gbc.e());
        EXPECT(0xc4, gbc.h());
        EXPECT(0x14, gbc.l());
        EXPECT(0x200e, gbc.sp());
        EXPECT(0x98ec, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0x98e9));
        EXPECT(0x15, gbc.readMem(0x98ea));
        EXPECT(0xd1, gbc.readMem(0x98eb));
        // DC 02B2
        gbc.setState(0xcce, 0xe56, 0x3080, 0x1aa1, 0xc006, 0xce72, 0x0, 0x1);
        gbc.writeMem(0xcce, { 0xdc, 0xa1, 0xa3 });
        gbc.step();
        EXPECT(0x30, gbc.a());
        EXPECT(0x1a, gbc.b());
        EXPECT(0xa1, gbc.c());
        EXPECT(0xc0, gbc.d());
        EXPECT(0x6, gbc.e());
        EXPECT(0xce, gbc.h());
        EXPECT(0x72, gbc.l());
        EXPECT(0xe56, gbc.sp());
        EXPECT(0xcd1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 02B3
        gbc.setState(0x7f2c, 0x84fd, 0x5e60, 0x6f58, 0x2d71, 0x3192, 0x1, 0x0);
        gbc.writeMem(0x7f2c, { 0xdc, 0x36, 0x9 });
        gbc.step();
        EXPECT(0x5e, gbc.a());
        EXPECT(0x6f, gbc.b());
        EXPECT(0x58, gbc.c());
        EXPECT(0x2d, gbc.d());
        EXPECT(0x71, gbc.e());
        EXPECT(0x31, gbc.h());
        EXPECT(0x92, gbc.l());
        EXPECT(0x84fd, gbc.sp());
        EXPECT(0x7f2f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 02B4
        gbc.setState(0x9e39, 0x5cac, 0x3140, 0x3f8e, 0xb5a8, 0x8ed, 0x0, 0x0);
        gbc.writeMem(0x9e39, { 0xdc, 0x38, 0x33 });
        gbc.step();
        EXPECT(0x31, gbc.a());
        EXPECT(0x3f, gbc.b());
        EXPECT(0x8e, gbc.c());
        EXPECT(0xb5, gbc.d());
        EXPECT(0xa8, gbc.e());
        EXPECT(0x8, gbc.h());
        EXPECT(0xed, gbc.l());
        EXPECT(0x5cac, gbc.sp());
        EXPECT(0x9e3c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0x9e39));
        EXPECT(0x38, gbc.readMem(0x9e3a));
        EXPECT(0x33, gbc.readMem(0x9e3b));
        // DC 02B5
        gbc.setState(0x9698, 0xf041, 0xd140, 0x95a8, 0x6cac, 0x7fdf, 0x1, 0x0);
        gbc.writeMem(0x9698, { 0xdc, 0xe4, 0x48 });
        gbc.step();
        EXPECT(0xd1, gbc.a());
        EXPECT(0x95, gbc.b());
        EXPECT(0xa8, gbc.c());
        EXPECT(0x6c, gbc.d());
        EXPECT(0xac, gbc.e());
        EXPECT(0x7f, gbc.h());
        EXPECT(0xdf, gbc.l());
        EXPECT(0xf041, gbc.sp());
        EXPECT(0x969b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0x9698));
        EXPECT(0xe4, gbc.readMem(0x9699));
        EXPECT(0x48, gbc.readMem(0x969a));
        // DC 02B7
        gbc.setState(0xb278, 0x7019, 0x2b60, 0xaf95, 0x3184, 0xb714, 0x0, 0x0);
        gbc.writeMem(0xb278, { 0xdc, 0x9b, 0xdf });
        gbc.step();
        EXPECT(0x2b, gbc.a());
        EXPECT(0xaf, gbc.b());
        EXPECT(0x95, gbc.c());
        EXPECT(0x31, gbc.d());
        EXPECT(0x84, gbc.e());
        EXPECT(0xb7, gbc.h());
        EXPECT(0x14, gbc.l());
        EXPECT(0x7019, gbc.sp());
        EXPECT(0xb27b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xb278));
        EXPECT(0x9b, gbc.readMem(0xb279));
        EXPECT(0xdf, gbc.readMem(0xb27a));
        // DC 02B9
        gbc.setState(0xcbf6, 0xf9b7, 0x4ec0, 0x6846, 0x5be9, 0xf178, 0x0, 0x1);
        gbc.writeMem(0xcbf6, { 0xdc, 0xa5, 0x42 });
        gbc.step();
        EXPECT(0x4e, gbc.a());
        EXPECT(0x68, gbc.b());
        EXPECT(0x46, gbc.c());
        EXPECT(0x5b, gbc.d());
        EXPECT(0xe9, gbc.e());
        EXPECT(0xf1, gbc.h());
        EXPECT(0x78, gbc.l());
        EXPECT(0xf9b7, gbc.sp());
        EXPECT(0xcbf9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xcbf6));
        EXPECT(0xa5, gbc.readMem(0xcbf7));
        EXPECT(0x42, gbc.readMem(0xcbf8));
        // DC 02BA
        gbc.setState(0x290c, 0x922f, 0x5ca0, 0x88c1, 0xd941, 0xded6, 0x0, 0x0);
        gbc.writeMem(0x290c, { 0xdc, 0xa3, 0xd8 });
        gbc.step();
        EXPECT(0x5c, gbc.a());
        EXPECT(0x88, gbc.b());
        EXPECT(0xc1, gbc.c());
        EXPECT(0xd9, gbc.d());
        EXPECT(0x41, gbc.e());
        EXPECT(0xde, gbc.h());
        EXPECT(0xd6, gbc.l());
        EXPECT(0x922f, gbc.sp());
        EXPECT(0x290f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 02BC
        gbc.setState(0x55ee, 0xda96, 0xefc0, 0x76fb, 0x5abc, 0x55e0, 0x0, 0x1);
        gbc.writeMem(0x55ee, { 0xdc, 0x30, 0x47 });
        gbc.step();
        EXPECT(0xef, gbc.a());
        EXPECT(0x76, gbc.b());
        EXPECT(0xfb, gbc.c());
        EXPECT(0x5a, gbc.d());
        EXPECT(0xbc, gbc.e());
        EXPECT(0x55, gbc.h());
        EXPECT(0xe0, gbc.l());
        EXPECT(0xda96, gbc.sp());
        EXPECT(0x55f1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 02BD
        gbc.setState(0x32a5, 0xdc16, 0x8ff0, 0xee4b, 0x6037, 0xf6bc, 0x0, 0x0);
        gbc.writeMem(0x32a5, { 0xdc, 0xd2, 0x59 });
        gbc.writeMem(0xdc14, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x8f, gbc.a());
        EXPECT(0xee, gbc.b());
        EXPECT(0x4b, gbc.c());
        EXPECT(0x60, gbc.d());
        EXPECT(0x37, gbc.e());
        EXPECT(0xf6, gbc.h());
        EXPECT(0xbc, gbc.l());
        EXPECT(0xdc14, gbc.sp());
        EXPECT(0x59d2, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xa8, gbc.readMem(0xdc14));
        EXPECT(0x32, gbc.readMem(0xdc15));
        // DC 02BF
        gbc.setState(0x21b3, 0xad4d, 0x9040, 0x8b, 0xf917, 0xfec, 0x0, 0x0);
        gbc.writeMem(0x21b3, { 0xdc, 0x28, 0xb });
        gbc.step();
        EXPECT(0x90, gbc.a());
        EXPECT(0x0, gbc.b());
        EXPECT(0x8b, gbc.c());
        EXPECT(0xf9, gbc.d());
        EXPECT(0x17, gbc.e());
        EXPECT(0xf, gbc.h());
        EXPECT(0xec, gbc.l());
        EXPECT(0xad4d, gbc.sp());
        EXPECT(0x21b6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 02C0
        gbc.setState(0x5ef8, 0x45e8, 0x1ae0, 0xb3d2, 0x51bd, 0x8b63, 0x1, 0x0);
        gbc.writeMem(0x5ef8, { 0xdc, 0x30, 0x9c });
        gbc.step();
        EXPECT(0x1a, gbc.a());
        EXPECT(0xb3, gbc.b());
        EXPECT(0xd2, gbc.c());
        EXPECT(0x51, gbc.d());
        EXPECT(0xbd, gbc.e());
        EXPECT(0x8b, gbc.h());
        EXPECT(0x63, gbc.l());
        EXPECT(0x45e8, gbc.sp());
        EXPECT(0x5efb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 02C1
        gbc.setState(0x7bc7, 0x8704, 0x8d50, 0x30c6, 0x15f4, 0x83bd, 0x0, 0x0);
        gbc.writeMem(0x7bc7, { 0xdc, 0x53, 0x21 });
        gbc.writeMem(0x8702, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x8d, gbc.a());
        EXPECT(0x30, gbc.b());
        EXPECT(0xc6, gbc.c());
        EXPECT(0x15, gbc.d());
        EXPECT(0xf4, gbc.e());
        EXPECT(0x83, gbc.h());
        EXPECT(0xbd, gbc.l());
        EXPECT(0x8702, gbc.sp());
        EXPECT(0x2153, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xca, gbc.readMem(0x8702));
        EXPECT(0x7b, gbc.readMem(0x8703));
        // DC 02C2
        gbc.setState(0xbac0, 0x2586, 0xc3c0, 0x3fe7, 0x4837, 0xf360, 0x1, 0x0);
        gbc.writeMem(0xbac0, { 0xdc, 0xfc, 0xc4 });
        gbc.step();
        EXPECT(0xc3, gbc.a());
        EXPECT(0x3f, gbc.b());
        EXPECT(0xe7, gbc.c());
        EXPECT(0x48, gbc.d());
        EXPECT(0x37, gbc.e());
        EXPECT(0xf3, gbc.h());
        EXPECT(0x60, gbc.l());
        EXPECT(0x2586, gbc.sp());
        EXPECT(0xbac3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xbac0));
        EXPECT(0xfc, gbc.readMem(0xbac1));
        EXPECT(0xc4, gbc.readMem(0xbac2));
        // DC 02C4
        gbc.setState(0x759c, 0xb365, 0xd050, 0x581e, 0xa1c8, 0x574e, 0x0, 0x1);
        gbc.writeMem(0x759c, { 0xdc, 0x6d, 0xec });
        gbc.writeMem(0xb363, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xd0, gbc.a());
        EXPECT(0x58, gbc.b());
        EXPECT(0x1e, gbc.c());
        EXPECT(0xa1, gbc.d());
        EXPECT(0xc8, gbc.e());
        EXPECT(0x57, gbc.h());
        EXPECT(0x4e, gbc.l());
        EXPECT(0xb363, gbc.sp());
        EXPECT(0xec6d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x9f, gbc.readMem(0xb363));
        EXPECT(0x75, gbc.readMem(0xb364));
        // DC 02C5
        gbc.setState(0x4d8d, 0xd819, 0x35c0, 0x23c2, 0x1a2d, 0x7d8e, 0x0, 0x1);
        gbc.writeMem(0x4d8d, { 0xdc, 0xe7, 0x4e });
        gbc.step();
        EXPECT(0x35, gbc.a());
        EXPECT(0x23, gbc.b());
        EXPECT(0xc2, gbc.c());
        EXPECT(0x1a, gbc.d());
        EXPECT(0x2d, gbc.e());
        EXPECT(0x7d, gbc.h());
        EXPECT(0x8e, gbc.l());
        EXPECT(0xd819, gbc.sp());
        EXPECT(0x4d90, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 02C6
        gbc.setState(0xe45b, 0xf883, 0x46e0, 0x799, 0xb633, 0xf6e1, 0x1, 0x0);
        gbc.writeMem(0xe45b, { 0xdc, 0x7d, 0x29 });
        gbc.step();
        EXPECT(0x46, gbc.a());
        EXPECT(0x7, gbc.b());
        EXPECT(0x99, gbc.c());
        EXPECT(0xb6, gbc.d());
        EXPECT(0x33, gbc.e());
        EXPECT(0xf6, gbc.h());
        EXPECT(0xe1, gbc.l());
        EXPECT(0xf883, gbc.sp());
        EXPECT(0xe45e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xe45b));
        EXPECT(0x7d, gbc.readMem(0xe45c));
        EXPECT(0x29, gbc.readMem(0xe45d));
        // DC 02C7
        gbc.setState(0x4fe6, 0x8d74, 0x4cb0, 0xd409, 0x778, 0x64c2, 0x1, 0x1);
        gbc.writeMem(0x4fe6, { 0xdc, 0x45, 0x63 });
        gbc.writeMem(0x8d72, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x4c, gbc.a());
        EXPECT(0xd4, gbc.b());
        EXPECT(0x9, gbc.c());
        EXPECT(0x7, gbc.d());
        EXPECT(0x78, gbc.e());
        EXPECT(0x64, gbc.h());
        EXPECT(0xc2, gbc.l());
        EXPECT(0x8d72, gbc.sp());
        EXPECT(0x6345, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xe9, gbc.readMem(0x8d72));
        EXPECT(0x4f, gbc.readMem(0x8d73));
        // DC 02C9
        gbc.setState(0xb0ca, 0xa0c6, 0x1230, 0xe31e, 0xe346, 0x8c41, 0x0, 0x1);
        gbc.writeMem(0xa0c4, { 0x0, 0x0 });
        gbc.writeMem(0xb0ca, { 0xdc, 0x38, 0x2e });
        gbc.step();
        EXPECT(0x12, gbc.a());
        EXPECT(0xe3, gbc.b());
        EXPECT(0x1e, gbc.c());
        EXPECT(0xe3, gbc.d());
        EXPECT(0x46, gbc.e());
        EXPECT(0x8c, gbc.h());
        EXPECT(0x41, gbc.l());
        EXPECT(0xa0c4, gbc.sp());
        EXPECT(0x2e38, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xcd, gbc.readMem(0xa0c4));
        EXPECT(0xb0, gbc.readMem(0xa0c5));
        EXPECT(0xdc, gbc.readMem(0xb0ca));
        EXPECT(0x38, gbc.readMem(0xb0cb));
        EXPECT(0x2e, gbc.readMem(0xb0cc));
        // DC 02CA
        gbc.setState(0x16e3, 0xaae, 0xa300, 0x4b48, 0x1951, 0x7528, 0x1, 0x1);
        gbc.writeMem(0x16e3, { 0xdc, 0x42, 0xfc });
        gbc.step();
        EXPECT(0xa3, gbc.a());
        EXPECT(0x4b, gbc.b());
        EXPECT(0x48, gbc.c());
        EXPECT(0x19, gbc.d());
        EXPECT(0x51, gbc.e());
        EXPECT(0x75, gbc.h());
        EXPECT(0x28, gbc.l());
        EXPECT(0xaae, gbc.sp());
        EXPECT(0x16e6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 02CB
        gbc.setState(0x8f6f, 0x9593, 0xbfe0, 0xa5f8, 0xf996, 0x2027, 0x0, 0x0);
        gbc.writeMem(0x8f6f, { 0xdc, 0x50, 0xff });
        gbc.step();
        EXPECT(0xbf, gbc.a());
        EXPECT(0xa5, gbc.b());
        EXPECT(0xf8, gbc.c());
        EXPECT(0xf9, gbc.d());
        EXPECT(0x96, gbc.e());
        EXPECT(0x20, gbc.h());
        EXPECT(0x27, gbc.l());
        EXPECT(0x9593, gbc.sp());
        EXPECT(0x8f72, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0x8f6f));
        EXPECT(0x50, gbc.readMem(0x8f70));
        EXPECT(0xff, gbc.readMem(0x8f71));
        // DC 02CE
        gbc.setState(0xb215, 0xb728, 0xe610, 0xb87e, 0x903c, 0xf55d, 0x0, 0x1);
        gbc.writeMem(0xb215, { 0xdc, 0xc3, 0xb });
        gbc.writeMem(0xb726, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xe6, gbc.a());
        EXPECT(0xb8, gbc.b());
        EXPECT(0x7e, gbc.c());
        EXPECT(0x90, gbc.d());
        EXPECT(0x3c, gbc.e());
        EXPECT(0xf5, gbc.h());
        EXPECT(0x5d, gbc.l());
        EXPECT(0xb726, gbc.sp());
        EXPECT(0xbc3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xb215));
        EXPECT(0xc3, gbc.readMem(0xb216));
        EXPECT(0xb, gbc.readMem(0xb217));
        EXPECT(0x18, gbc.readMem(0xb726));
        EXPECT(0xb2, gbc.readMem(0xb727));
        // DC 02CF
        gbc.setState(0x7c49, 0x7fe7, 0xbe40, 0x3b2e, 0x9c21, 0x2e8a, 0x0, 0x0);
        gbc.writeMem(0x7c49, { 0xdc, 0x16, 0x62 });
        gbc.step();
        EXPECT(0xbe, gbc.a());
        EXPECT(0x3b, gbc.b());
        EXPECT(0x2e, gbc.c());
        EXPECT(0x9c, gbc.d());
        EXPECT(0x21, gbc.e());
        EXPECT(0x2e, gbc.h());
        EXPECT(0x8a, gbc.l());
        EXPECT(0x7fe7, gbc.sp());
        EXPECT(0x7c4c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 02D0
        gbc.setState(0xe3a2, 0xb024, 0x12f0, 0xdd1c, 0x45d4, 0x4036, 0x0, 0x0);
        gbc.writeMem(0xb022, { 0x0, 0x0 });
        gbc.writeMem(0xe3a2, { 0xdc, 0x84, 0x86 });
        gbc.step();
        EXPECT(0x12, gbc.a());
        EXPECT(0xdd, gbc.b());
        EXPECT(0x1c, gbc.c());
        EXPECT(0x45, gbc.d());
        EXPECT(0xd4, gbc.e());
        EXPECT(0x40, gbc.h());
        EXPECT(0x36, gbc.l());
        EXPECT(0xb022, gbc.sp());
        EXPECT(0x8684, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xa5, gbc.readMem(0xb022));
        EXPECT(0xe3, gbc.readMem(0xb023));
        EXPECT(0xdc, gbc.readMem(0xe3a2));
        EXPECT(0x84, gbc.readMem(0xe3a3));
        EXPECT(0x86, gbc.readMem(0xe3a4));
        // DC 02D1
        gbc.setState(0x2c52, 0xe57c, 0x3830, 0x86, 0xeb17, 0x9aae, 0x1, 0x0);
        gbc.writeMem(0x2c52, { 0xdc, 0x3b, 0xa4 });
        gbc.writeMem(0xe57a, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x38, gbc.a());
        EXPECT(0x0, gbc.b());
        EXPECT(0x86, gbc.c());
        EXPECT(0xeb, gbc.d());
        EXPECT(0x17, gbc.e());
        EXPECT(0x9a, gbc.h());
        EXPECT(0xae, gbc.l());
        EXPECT(0xe57a, gbc.sp());
        EXPECT(0xa43b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x55, gbc.readMem(0xe57a));
        EXPECT(0x2c, gbc.readMem(0xe57b));
        // DC 02D2
        gbc.setState(0xad0d, 0xb838, 0x5860, 0x4b17, 0xde5a, 0x5e3a, 0x0, 0x1);
        gbc.writeMem(0xad0d, { 0xdc, 0xad, 0x2e });
        gbc.step();
        EXPECT(0x58, gbc.a());
        EXPECT(0x4b, gbc.b());
        EXPECT(0x17, gbc.c());
        EXPECT(0xde, gbc.d());
        EXPECT(0x5a, gbc.e());
        EXPECT(0x5e, gbc.h());
        EXPECT(0x3a, gbc.l());
        EXPECT(0xb838, gbc.sp());
        EXPECT(0xad10, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xad0d));
        EXPECT(0xad, gbc.readMem(0xad0e));
        EXPECT(0x2e, gbc.readMem(0xad0f));
        // DC 02D3
        gbc.setState(0x9c06, 0xaa4a, 0xdc0, 0x15be, 0x301b, 0xabbe, 0x1, 0x0);
        gbc.writeMem(0x9c06, { 0xdc, 0xce, 0xf2 });
        gbc.step();
        EXPECT(0xd, gbc.a());
        EXPECT(0x15, gbc.b());
        EXPECT(0xbe, gbc.c());
        EXPECT(0x30, gbc.d());
        EXPECT(0x1b, gbc.e());
        EXPECT(0xab, gbc.h());
        EXPECT(0xbe, gbc.l());
        EXPECT(0xaa4a, gbc.sp());
        EXPECT(0x9c09, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0x9c06));
        EXPECT(0xce, gbc.readMem(0x9c07));
        EXPECT(0xf2, gbc.readMem(0x9c08));
        // DC 02D4
        gbc.setState(0x1f81, 0x1e12, 0x9960, 0x7bab, 0x7648, 0x61ff, 0x1, 0x0);
        gbc.writeMem(0x1f81, { 0xdc, 0xcb, 0x74 });
        gbc.step();
        EXPECT(0x99, gbc.a());
        EXPECT(0x7b, gbc.b());
        EXPECT(0xab, gbc.c());
        EXPECT(0x76, gbc.d());
        EXPECT(0x48, gbc.e());
        EXPECT(0x61, gbc.h());
        EXPECT(0xff, gbc.l());
        EXPECT(0x1e12, gbc.sp());
        EXPECT(0x1f84, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 02D5
        gbc.setState(0x7086, 0x9045, 0x8100, 0xc04d, 0x5e89, 0xfd4b, 0x0, 0x0);
        gbc.writeMem(0x7086, { 0xdc, 0x43, 0x34 });
        gbc.step();
        EXPECT(0x81, gbc.a());
        EXPECT(0xc0, gbc.b());
        EXPECT(0x4d, gbc.c());
        EXPECT(0x5e, gbc.d());
        EXPECT(0x89, gbc.e());
        EXPECT(0xfd, gbc.h());
        EXPECT(0x4b, gbc.l());
        EXPECT(0x9045, gbc.sp());
        EXPECT(0x7089, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 02D8
        gbc.setState(0xe2dd, 0xc02f, 0xf140, 0x4c6e, 0x24d8, 0xaff0, 0x0, 0x1);
        gbc.writeMem(0xe2dd, { 0xdc, 0xc6, 0x69 });
        gbc.step();
        EXPECT(0xf1, gbc.a());
        EXPECT(0x4c, gbc.b());
        EXPECT(0x6e, gbc.c());
        EXPECT(0x24, gbc.d());
        EXPECT(0xd8, gbc.e());
        EXPECT(0xaf, gbc.h());
        EXPECT(0xf0, gbc.l());
        EXPECT(0xc02f, gbc.sp());
        EXPECT(0xe2e0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xe2dd));
        EXPECT(0xc6, gbc.readMem(0xe2de));
        EXPECT(0x69, gbc.readMem(0xe2df));
        // DC 02D9
        gbc.setState(0xd496, 0x2ae0, 0xc0, 0xd274, 0xbdf, 0x54c1, 0x1, 0x1);
        gbc.writeMem(0xd496, { 0xdc, 0x55, 0xa9 });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0xd2, gbc.b());
        EXPECT(0x74, gbc.c());
        EXPECT(0xb, gbc.d());
        EXPECT(0xdf, gbc.e());
        EXPECT(0x54, gbc.h());
        EXPECT(0xc1, gbc.l());
        EXPECT(0x2ae0, gbc.sp());
        EXPECT(0xd499, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xd496));
        EXPECT(0x55, gbc.readMem(0xd497));
        EXPECT(0xa9, gbc.readMem(0xd498));
        // DC 02DA
        gbc.setState(0xbf16, 0x8131, 0xd300, 0x2374, 0x91df, 0x229b, 0x0, 0x1);
        gbc.writeMem(0xbf16, { 0xdc, 0xd7, 0x56 });
        gbc.step();
        EXPECT(0xd3, gbc.a());
        EXPECT(0x23, gbc.b());
        EXPECT(0x74, gbc.c());
        EXPECT(0x91, gbc.d());
        EXPECT(0xdf, gbc.e());
        EXPECT(0x22, gbc.h());
        EXPECT(0x9b, gbc.l());
        EXPECT(0x8131, gbc.sp());
        EXPECT(0xbf19, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xbf16));
        EXPECT(0xd7, gbc.readMem(0xbf17));
        EXPECT(0x56, gbc.readMem(0xbf18));
        // DC 02DB
        gbc.setState(0x13b, 0xf86f, 0x7080, 0x1f89, 0x5085, 0x2b7d, 0x0, 0x1);
        gbc.writeMem(0x13b, { 0xdc, 0xfd, 0xb0 });
        gbc.step();
        EXPECT(0x70, gbc.a());
        EXPECT(0x1f, gbc.b());
        EXPECT(0x89, gbc.c());
        EXPECT(0x50, gbc.d());
        EXPECT(0x85, gbc.e());
        EXPECT(0x2b, gbc.h());
        EXPECT(0x7d, gbc.l());
        EXPECT(0xf86f, gbc.sp());
        EXPECT(0x13e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 02DC
        gbc.setState(0x1e5d, 0xd4c9, 0x80, 0x2587, 0x698d, 0x41a1, 0x0, 0x1);
        gbc.writeMem(0x1e5d, { 0xdc, 0x91, 0xd0 });
        gbc.step();
        EXPECT(0x0, gbc.a());
        EXPECT(0x25, gbc.b());
        EXPECT(0x87, gbc.c());
        EXPECT(0x69, gbc.d());
        EXPECT(0x8d, gbc.e());
        EXPECT(0x41, gbc.h());
        EXPECT(0xa1, gbc.l());
        EXPECT(0xd4c9, gbc.sp());
        EXPECT(0x1e60, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 02DD
        gbc.setState(0xc46f, 0x2f51, 0xa2e0, 0xb32c, 0xf39e, 0x88ad, 0x1, 0x1);
        gbc.writeMem(0xc46f, { 0xdc, 0x5b, 0xeb });
        gbc.step();
        EXPECT(0xa2, gbc.a());
        EXPECT(0xb3, gbc.b());
        EXPECT(0x2c, gbc.c());
        EXPECT(0xf3, gbc.d());
        EXPECT(0x9e, gbc.e());
        EXPECT(0x88, gbc.h());
        EXPECT(0xad, gbc.l());
        EXPECT(0x2f51, gbc.sp());
        EXPECT(0xc472, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xc46f));
        EXPECT(0x5b, gbc.readMem(0xc470));
        EXPECT(0xeb, gbc.readMem(0xc471));
        // DC 02DE
        gbc.setState(0xdc53, 0xc9cf, 0x9330, 0xb069, 0x26d9, 0xd077, 0x0, 0x0);
        gbc.writeMem(0xc9cd, { 0x0, 0x0 });
        gbc.writeMem(0xdc53, { 0xdc, 0xf6, 0x29 });
        gbc.step();
        EXPECT(0x93, gbc.a());
        EXPECT(0xb0, gbc.b());
        EXPECT(0x69, gbc.c());
        EXPECT(0x26, gbc.d());
        EXPECT(0xd9, gbc.e());
        EXPECT(0xd0, gbc.h());
        EXPECT(0x77, gbc.l());
        EXPECT(0xc9cd, gbc.sp());
        EXPECT(0x29f6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x56, gbc.readMem(0xc9cd));
        EXPECT(0xdc, gbc.readMem(0xc9ce));
        EXPECT(0xdc, gbc.readMem(0xdc53));
        EXPECT(0xf6, gbc.readMem(0xdc54));
        EXPECT(0x29, gbc.readMem(0xdc55));
        // DC 02DF
        gbc.setState(0x96f1, 0xe36c, 0xfc30, 0x80f1, 0x52f5, 0x8ec8, 0x1, 0x1);
        gbc.writeMem(0x96f1, { 0xdc, 0xc5, 0x3c });
        gbc.writeMem(0xe36a, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xfc, gbc.a());
        EXPECT(0x80, gbc.b());
        EXPECT(0xf1, gbc.c());
        EXPECT(0x52, gbc.d());
        EXPECT(0xf5, gbc.e());
        EXPECT(0x8e, gbc.h());
        EXPECT(0xc8, gbc.l());
        EXPECT(0xe36a, gbc.sp());
        EXPECT(0x3cc5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0x96f1));
        EXPECT(0xc5, gbc.readMem(0x96f2));
        EXPECT(0x3c, gbc.readMem(0x96f3));
        EXPECT(0xf4, gbc.readMem(0xe36a));
        EXPECT(0x96, gbc.readMem(0xe36b));
        // DC 02E0
        gbc.setState(0xb3a, 0x661c, 0xa4a0, 0x43b5, 0x13b, 0xba7c, 0x1, 0x0);
        gbc.writeMem(0xb3a, { 0xdc, 0x1c, 0x9f });
        gbc.step();
        EXPECT(0xa4, gbc.a());
        EXPECT(0x43, gbc.b());
        EXPECT(0xb5, gbc.c());
        EXPECT(0x1, gbc.d());
        EXPECT(0x3b, gbc.e());
        EXPECT(0xba, gbc.h());
        EXPECT(0x7c, gbc.l());
        EXPECT(0x661c, gbc.sp());
        EXPECT(0xb3d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 02E1
        gbc.setState(0x663d, 0xd1b5, 0x32e0, 0xc0b1, 0x90b7, 0x299b, 0x1, 0x0);
        gbc.writeMem(0x663d, { 0xdc, 0x18, 0xb4 });
        gbc.step();
        EXPECT(0x32, gbc.a());
        EXPECT(0xc0, gbc.b());
        EXPECT(0xb1, gbc.c());
        EXPECT(0x90, gbc.d());
        EXPECT(0xb7, gbc.e());
        EXPECT(0x29, gbc.h());
        EXPECT(0x9b, gbc.l());
        EXPECT(0xd1b5, gbc.sp());
        EXPECT(0x6640, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 02E4
        gbc.setState(0x75a5, 0x54c2, 0xd4c0, 0x7816, 0x23d, 0x7abd, 0x0, 0x1);
        gbc.writeMem(0x75a5, { 0xdc, 0x1d, 0xd9 });
        gbc.step();
        EXPECT(0xd4, gbc.a());
        EXPECT(0x78, gbc.b());
        EXPECT(0x16, gbc.c());
        EXPECT(0x2, gbc.d());
        EXPECT(0x3d, gbc.e());
        EXPECT(0x7a, gbc.h());
        EXPECT(0xbd, gbc.l());
        EXPECT(0x54c2, gbc.sp());
        EXPECT(0x75a8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 02E5
        gbc.setState(0x2e20, 0x9b6, 0xf020, 0x18b, 0x4cd4, 0xd463, 0x0, 0x1);
        gbc.writeMem(0x2e20, { 0xdc, 0x74, 0x1d });
        gbc.step();
        EXPECT(0xf0, gbc.a());
        EXPECT(0x1, gbc.b());
        EXPECT(0x8b, gbc.c());
        EXPECT(0x4c, gbc.d());
        EXPECT(0xd4, gbc.e());
        EXPECT(0xd4, gbc.h());
        EXPECT(0x63, gbc.l());
        EXPECT(0x9b6, gbc.sp());
        EXPECT(0x2e23, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 02E7
        gbc.setState(0xbdc2, 0xd2ae, 0x2fd0, 0x54c3, 0x52ea, 0x2bd3, 0x1, 0x0);
        gbc.writeMem(0xbdc2, { 0xdc, 0xac, 0x9a });
        gbc.writeMem(0xd2ac, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x2f, gbc.a());
        EXPECT(0x54, gbc.b());
        EXPECT(0xc3, gbc.c());
        EXPECT(0x52, gbc.d());
        EXPECT(0xea, gbc.e());
        EXPECT(0x2b, gbc.h());
        EXPECT(0xd3, gbc.l());
        EXPECT(0xd2ac, gbc.sp());
        EXPECT(0x9aac, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xbdc2));
        EXPECT(0xac, gbc.readMem(0xbdc3));
        EXPECT(0x9a, gbc.readMem(0xbdc4));
        EXPECT(0xc5, gbc.readMem(0xd2ac));
        EXPECT(0xbd, gbc.readMem(0xd2ad));
        // DC 02E9
        gbc.setState(0xaeb0, 0x9f21, 0xe440, 0x665d, 0x23a3, 0x1231, 0x1, 0x1);
        gbc.writeMem(0xaeb0, { 0xdc, 0xf5, 0x8 });
        gbc.step();
        EXPECT(0xe4, gbc.a());
        EXPECT(0x66, gbc.b());
        EXPECT(0x5d, gbc.c());
        EXPECT(0x23, gbc.d());
        EXPECT(0xa3, gbc.e());
        EXPECT(0x12, gbc.h());
        EXPECT(0x31, gbc.l());
        EXPECT(0x9f21, gbc.sp());
        EXPECT(0xaeb3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xaeb0));
        EXPECT(0xf5, gbc.readMem(0xaeb1));
        EXPECT(0x8, gbc.readMem(0xaeb2));
        // DC 02EB
        gbc.setState(0xd4f9, 0xa645, 0x3b30, 0x4c3d, 0x613a, 0xcfe0, 0x0, 0x1);
        gbc.writeMem(0xa643, { 0x0, 0x0 });
        gbc.writeMem(0xd4f9, { 0xdc, 0xe0, 0xd4 });
        gbc.step();
        EXPECT(0x3b, gbc.a());
        EXPECT(0x4c, gbc.b());
        EXPECT(0x3d, gbc.c());
        EXPECT(0x61, gbc.d());
        EXPECT(0x3a, gbc.e());
        EXPECT(0xcf, gbc.h());
        EXPECT(0xe0, gbc.l());
        EXPECT(0xa643, gbc.sp());
        EXPECT(0xd4e0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xfc, gbc.readMem(0xa643));
        EXPECT(0xd4, gbc.readMem(0xa644));
        EXPECT(0xdc, gbc.readMem(0xd4f9));
        EXPECT(0xe0, gbc.readMem(0xd4fa));
        EXPECT(0xd4, gbc.readMem(0xd4fb));
        // DC 02EC
        gbc.setState(0xf7b, 0xde6d, 0x91e0, 0xf729, 0xe6eb, 0x22b2, 0x1, 0x1);
        gbc.writeMem(0xf7b, { 0xdc, 0x31, 0x6c });
        gbc.step();
        EXPECT(0x91, gbc.a());
        EXPECT(0xf7, gbc.b());
        EXPECT(0x29, gbc.c());
        EXPECT(0xe6, gbc.d());
        EXPECT(0xeb, gbc.e());
        EXPECT(0x22, gbc.h());
        EXPECT(0xb2, gbc.l());
        EXPECT(0xde6d, gbc.sp());
        EXPECT(0xf7e, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 02ED
        gbc.setState(0x31db, 0xeba3, 0x920, 0x8499, 0x98e3, 0xa0b, 0x1, 0x0);
        gbc.writeMem(0x31db, { 0xdc, 0x12, 0x4 });
        gbc.step();
        EXPECT(0x9, gbc.a());
        EXPECT(0x84, gbc.b());
        EXPECT(0x99, gbc.c());
        EXPECT(0x98, gbc.d());
        EXPECT(0xe3, gbc.e());
        EXPECT(0xa, gbc.h());
        EXPECT(0xb, gbc.l());
        EXPECT(0xeba3, gbc.sp());
        EXPECT(0x31de, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 02F0
        gbc.setState(0x6c8, 0xa07c, 0xe1c0, 0xbff1, 0x9822, 0xf5cb, 0x0, 0x0);
        gbc.writeMem(0x6c8, { 0xdc, 0x72, 0x14 });
        gbc.step();
        EXPECT(0xe1, gbc.a());
        EXPECT(0xbf, gbc.b());
        EXPECT(0xf1, gbc.c());
        EXPECT(0x98, gbc.d());
        EXPECT(0x22, gbc.e());
        EXPECT(0xf5, gbc.h());
        EXPECT(0xcb, gbc.l());
        EXPECT(0xa07c, gbc.sp());
        EXPECT(0x6cb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 02F1
        gbc.setState(0x858b, 0xedc8, 0xfaa0, 0x50c5, 0xeade, 0xaeac, 0x0, 0x1);
        gbc.writeMem(0x858b, { 0xdc, 0x1b, 0x2b });
        gbc.step();
        EXPECT(0xfa, gbc.a());
        EXPECT(0x50, gbc.b());
        EXPECT(0xc5, gbc.c());
        EXPECT(0xea, gbc.d());
        EXPECT(0xde, gbc.e());
        EXPECT(0xae, gbc.h());
        EXPECT(0xac, gbc.l());
        EXPECT(0xedc8, gbc.sp());
        EXPECT(0x858e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0x858b));
        EXPECT(0x1b, gbc.readMem(0x858c));
        EXPECT(0x2b, gbc.readMem(0x858d));
        // DC 02F2
        gbc.setState(0xac6c, 0xa67b, 0x58c0, 0x20db, 0x5d74, 0xe646, 0x1, 0x1);
        gbc.writeMem(0xac6c, { 0xdc, 0xc4, 0x48 });
        gbc.step();
        EXPECT(0x58, gbc.a());
        EXPECT(0x20, gbc.b());
        EXPECT(0xdb, gbc.c());
        EXPECT(0x5d, gbc.d());
        EXPECT(0x74, gbc.e());
        EXPECT(0xe6, gbc.h());
        EXPECT(0x46, gbc.l());
        EXPECT(0xa67b, gbc.sp());
        EXPECT(0xac6f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xac6c));
        EXPECT(0xc4, gbc.readMem(0xac6d));
        EXPECT(0x48, gbc.readMem(0xac6e));
        // DC 02F3
        gbc.setState(0x2781, 0xc608, 0x4f10, 0xeece, 0x5fd3, 0x2e1b, 0x1, 0x1);
        gbc.writeMem(0x2781, { 0xdc, 0xa6, 0x5e });
        gbc.writeMem(0xc606, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x4f, gbc.a());
        EXPECT(0xee, gbc.b());
        EXPECT(0xce, gbc.c());
        EXPECT(0x5f, gbc.d());
        EXPECT(0xd3, gbc.e());
        EXPECT(0x2e, gbc.h());
        EXPECT(0x1b, gbc.l());
        EXPECT(0xc606, gbc.sp());
        EXPECT(0x5ea6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x84, gbc.readMem(0xc606));
        EXPECT(0x27, gbc.readMem(0xc607));
        // DC 02F4
        gbc.setState(0x4650, 0xe075, 0xcc00, 0x1506, 0x8a2b, 0x90e6, 0x1, 0x1);
        gbc.writeMem(0x4650, { 0xdc, 0x76, 0x5d });
        gbc.step();
        EXPECT(0xcc, gbc.a());
        EXPECT(0x15, gbc.b());
        EXPECT(0x6, gbc.c());
        EXPECT(0x8a, gbc.d());
        EXPECT(0x2b, gbc.e());
        EXPECT(0x90, gbc.h());
        EXPECT(0xe6, gbc.l());
        EXPECT(0xe075, gbc.sp());
        EXPECT(0x4653, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 02F5
        gbc.setState(0xca57, 0xbf2c, 0x91f0, 0xe8ed, 0x3202, 0xbe3d, 0x0, 0x0);
        gbc.writeMem(0xbf2a, { 0x0, 0x0 });
        gbc.writeMem(0xca57, { 0xdc, 0xa1, 0xa3 });
        gbc.step();
        EXPECT(0x91, gbc.a());
        EXPECT(0xe8, gbc.b());
        EXPECT(0xed, gbc.c());
        EXPECT(0x32, gbc.d());
        EXPECT(0x2, gbc.e());
        EXPECT(0xbe, gbc.h());
        EXPECT(0x3d, gbc.l());
        EXPECT(0xbf2a, gbc.sp());
        EXPECT(0xa3a1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x5a, gbc.readMem(0xbf2a));
        EXPECT(0xca, gbc.readMem(0xbf2b));
        EXPECT(0xdc, gbc.readMem(0xca57));
        EXPECT(0xa1, gbc.readMem(0xca58));
        EXPECT(0xa3, gbc.readMem(0xca59));
        // DC 02F6
        gbc.setState(0x2d4, 0xbb3, 0x67e0, 0xc00f, 0x232f, 0x25f9, 0x1, 0x1);
        gbc.writeMem(0x2d4, { 0xdc, 0xa6, 0x1 });
        gbc.step();
        EXPECT(0x67, gbc.a());
        EXPECT(0xc0, gbc.b());
        EXPECT(0xf, gbc.c());
        EXPECT(0x23, gbc.d());
        EXPECT(0x2f, gbc.e());
        EXPECT(0x25, gbc.h());
        EXPECT(0xf9, gbc.l());
        EXPECT(0xbb3, gbc.sp());
        EXPECT(0x2d7, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 02F7
        gbc.setState(0x33e1, 0xd4f8, 0xe5e0, 0x5cc0, 0x7d2f, 0x8b39, 0x1, 0x1);
        gbc.writeMem(0x33e1, { 0xdc, 0x40, 0x6d });
        gbc.step();
        EXPECT(0xe5, gbc.a());
        EXPECT(0x5c, gbc.b());
        EXPECT(0xc0, gbc.c());
        EXPECT(0x7d, gbc.d());
        EXPECT(0x2f, gbc.e());
        EXPECT(0x8b, gbc.h());
        EXPECT(0x39, gbc.l());
        EXPECT(0xd4f8, gbc.sp());
        EXPECT(0x33e4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 02F8
        gbc.setState(0x612c, 0xaee0, 0x5e90, 0xecdb, 0x7078, 0x4f77, 0x1, 0x0);
        gbc.writeMem(0x612c, { 0xdc, 0xde, 0x66 });
        gbc.writeMem(0xaede, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x5e, gbc.a());
        EXPECT(0xec, gbc.b());
        EXPECT(0xdb, gbc.c());
        EXPECT(0x70, gbc.d());
        EXPECT(0x78, gbc.e());
        EXPECT(0x4f, gbc.h());
        EXPECT(0x77, gbc.l());
        EXPECT(0xaede, gbc.sp());
        EXPECT(0x66de, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x2f, gbc.readMem(0xaede));
        EXPECT(0x61, gbc.readMem(0xaedf));
        // DC 02F9
        gbc.setState(0x202e, 0xe4fa, 0xee40, 0x1f78, 0x6f1f, 0xd569, 0x1, 0x0);
        gbc.writeMem(0x202e, { 0xdc, 0xf1, 0xea });
        gbc.step();
        EXPECT(0xee, gbc.a());
        EXPECT(0x1f, gbc.b());
        EXPECT(0x78, gbc.c());
        EXPECT(0x6f, gbc.d());
        EXPECT(0x1f, gbc.e());
        EXPECT(0xd5, gbc.h());
        EXPECT(0x69, gbc.l());
        EXPECT(0xe4fa, gbc.sp());
        EXPECT(0x2031, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 02FB
        gbc.setState(0xb5f, 0x8a6b, 0xdb30, 0xe1da, 0xe9f5, 0x14da, 0x0, 0x1);
        gbc.writeMem(0xb5f, { 0xdc, 0x51, 0x80 });
        gbc.writeMem(0x8a69, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xdb, gbc.a());
        EXPECT(0xe1, gbc.b());
        EXPECT(0xda, gbc.c());
        EXPECT(0xe9, gbc.d());
        EXPECT(0xf5, gbc.e());
        EXPECT(0x14, gbc.h());
        EXPECT(0xda, gbc.l());
        EXPECT(0x8a69, gbc.sp());
        EXPECT(0x8051, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x62, gbc.readMem(0x8a69));
        EXPECT(0xb, gbc.readMem(0x8a6a));
        // DC 02FC
        gbc.setState(0xcf20, 0x2e9f, 0x23a0, 0x755b, 0xeb3d, 0x43ac, 0x0, 0x1);
        gbc.writeMem(0xcf20, { 0xdc, 0xec, 0x66 });
        gbc.step();
        EXPECT(0x23, gbc.a());
        EXPECT(0x75, gbc.b());
        EXPECT(0x5b, gbc.c());
        EXPECT(0xeb, gbc.d());
        EXPECT(0x3d, gbc.e());
        EXPECT(0x43, gbc.h());
        EXPECT(0xac, gbc.l());
        EXPECT(0x2e9f, gbc.sp());
        EXPECT(0xcf23, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xcf20));
        EXPECT(0xec, gbc.readMem(0xcf21));
        EXPECT(0x66, gbc.readMem(0xcf22));
        // DC 02FE
        gbc.setState(0xd56b, 0x69a1, 0x37a0, 0x7959, 0xda0, 0xa127, 0x0, 0x0);
        gbc.writeMem(0xd56b, { 0xdc, 0xe, 0x20 });
        gbc.step();
        EXPECT(0x37, gbc.a());
        EXPECT(0x79, gbc.b());
        EXPECT(0x59, gbc.c());
        EXPECT(0xd, gbc.d());
        EXPECT(0xa0, gbc.e());
        EXPECT(0xa1, gbc.h());
        EXPECT(0x27, gbc.l());
        EXPECT(0x69a1, gbc.sp());
        EXPECT(0xd56e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xd56b));
        EXPECT(0xe, gbc.readMem(0xd56c));
        EXPECT(0x20, gbc.readMem(0xd56d));
        // DC 0300
        gbc.setState(0xc2ed, 0xebc3, 0x6ef0, 0xcd06, 0xb036, 0x5db9, 0x0, 0x1);
        gbc.writeMem(0xc2ed, { 0xdc, 0xfc, 0xe3 });
        gbc.writeMem(0xebc1, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x6e, gbc.a());
        EXPECT(0xcd, gbc.b());
        EXPECT(0x6, gbc.c());
        EXPECT(0xb0, gbc.d());
        EXPECT(0x36, gbc.e());
        EXPECT(0x5d, gbc.h());
        EXPECT(0xb9, gbc.l());
        EXPECT(0xebc1, gbc.sp());
        EXPECT(0xe3fc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xc2ed));
        EXPECT(0xfc, gbc.readMem(0xc2ee));
        EXPECT(0xe3, gbc.readMem(0xc2ef));
        EXPECT(0xf0, gbc.readMem(0xebc1));
        EXPECT(0xc2, gbc.readMem(0xebc2));
        // DC 0301
        gbc.setState(0x9e76, 0x23ef, 0xca60, 0x1ced, 0x40a8, 0x29ed, 0x0, 0x0);
        gbc.writeMem(0x9e76, { 0xdc, 0xe2, 0x84 });
        gbc.step();
        EXPECT(0xca, gbc.a());
        EXPECT(0x1c, gbc.b());
        EXPECT(0xed, gbc.c());
        EXPECT(0x40, gbc.d());
        EXPECT(0xa8, gbc.e());
        EXPECT(0x29, gbc.h());
        EXPECT(0xed, gbc.l());
        EXPECT(0x23ef, gbc.sp());
        EXPECT(0x9e79, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0x9e76));
        EXPECT(0xe2, gbc.readMem(0x9e77));
        EXPECT(0x84, gbc.readMem(0x9e78));
        // DC 0302
        gbc.setState(0x718, 0x971, 0x9440, 0x7314, 0x98ea, 0xfb03, 0x1, 0x1);
        gbc.writeMem(0x718, { 0xdc, 0x13, 0x1f });
        gbc.step();
        EXPECT(0x94, gbc.a());
        EXPECT(0x73, gbc.b());
        EXPECT(0x14, gbc.c());
        EXPECT(0x98, gbc.d());
        EXPECT(0xea, gbc.e());
        EXPECT(0xfb, gbc.h());
        EXPECT(0x3, gbc.l());
        EXPECT(0x971, gbc.sp());
        EXPECT(0x71b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 0304
        gbc.setState(0x7083, 0x6a50, 0x9400, 0x64fd, 0x8b6e, 0x3d33, 0x0, 0x0);
        gbc.writeMem(0x7083, { 0xdc, 0x76, 0x96 });
        gbc.step();
        EXPECT(0x94, gbc.a());
        EXPECT(0x64, gbc.b());
        EXPECT(0xfd, gbc.c());
        EXPECT(0x8b, gbc.d());
        EXPECT(0x6e, gbc.e());
        EXPECT(0x3d, gbc.h());
        EXPECT(0x33, gbc.l());
        EXPECT(0x6a50, gbc.sp());
        EXPECT(0x7086, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 0306
        gbc.setState(0xa5a8, 0xdbf5, 0x8e30, 0x3d4d, 0x591f, 0x818e, 0x0, 0x0);
        gbc.writeMem(0xa5a8, { 0xdc, 0xc4, 0x22 });
        gbc.writeMem(0xdbf3, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x8e, gbc.a());
        EXPECT(0x3d, gbc.b());
        EXPECT(0x4d, gbc.c());
        EXPECT(0x59, gbc.d());
        EXPECT(0x1f, gbc.e());
        EXPECT(0x81, gbc.h());
        EXPECT(0x8e, gbc.l());
        EXPECT(0xdbf3, gbc.sp());
        EXPECT(0x22c4, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xa5a8));
        EXPECT(0xc4, gbc.readMem(0xa5a9));
        EXPECT(0x22, gbc.readMem(0xa5aa));
        EXPECT(0xab, gbc.readMem(0xdbf3));
        EXPECT(0xa5, gbc.readMem(0xdbf4));
        // DC 0307
        gbc.setState(0xa471, 0x7c24, 0xc820, 0x243, 0x3c8f, 0x4f4b, 0x0, 0x1);
        gbc.writeMem(0xa471, { 0xdc, 0x37, 0x5f });
        gbc.step();
        EXPECT(0xc8, gbc.a());
        EXPECT(0x2, gbc.b());
        EXPECT(0x43, gbc.c());
        EXPECT(0x3c, gbc.d());
        EXPECT(0x8f, gbc.e());
        EXPECT(0x4f, gbc.h());
        EXPECT(0x4b, gbc.l());
        EXPECT(0x7c24, gbc.sp());
        EXPECT(0xa474, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xa471));
        EXPECT(0x37, gbc.readMem(0xa472));
        EXPECT(0x5f, gbc.readMem(0xa473));
        // DC 0308
        gbc.setState(0xea9a, 0x124, 0xcb20, 0x500, 0xf0af, 0x3919, 0x1, 0x1);
        gbc.writeMem(0xea9a, { 0xdc, 0xb6, 0x33 });
        gbc.step();
        EXPECT(0xcb, gbc.a());
        EXPECT(0x5, gbc.b());
        EXPECT(0x0, gbc.c());
        EXPECT(0xf0, gbc.d());
        EXPECT(0xaf, gbc.e());
        EXPECT(0x39, gbc.h());
        EXPECT(0x19, gbc.l());
        EXPECT(0x124, gbc.sp());
        EXPECT(0xea9d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xea9a));
        EXPECT(0xb6, gbc.readMem(0xea9b));
        EXPECT(0x33, gbc.readMem(0xea9c));
        // DC 0309
        gbc.setState(0x8c95, 0x33ad, 0x5d40, 0x717c, 0x3094, 0xfa50, 0x0, 0x1);
        gbc.writeMem(0x8c95, { 0xdc, 0x21, 0xb });
        gbc.step();
        EXPECT(0x5d, gbc.a());
        EXPECT(0x71, gbc.b());
        EXPECT(0x7c, gbc.c());
        EXPECT(0x30, gbc.d());
        EXPECT(0x94, gbc.e());
        EXPECT(0xfa, gbc.h());
        EXPECT(0x50, gbc.l());
        EXPECT(0x33ad, gbc.sp());
        EXPECT(0x8c98, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0x8c95));
        EXPECT(0x21, gbc.readMem(0x8c96));
        EXPECT(0xb, gbc.readMem(0x8c97));
        // DC 030A
        gbc.setState(0xa507, 0x2700, 0x5960, 0x1bc, 0xd83c, 0xe22a, 0x1, 0x1);
        gbc.writeMem(0xa507, { 0xdc, 0xab, 0x1a });
        gbc.step();
        EXPECT(0x59, gbc.a());
        EXPECT(0x1, gbc.b());
        EXPECT(0xbc, gbc.c());
        EXPECT(0xd8, gbc.d());
        EXPECT(0x3c, gbc.e());
        EXPECT(0xe2, gbc.h());
        EXPECT(0x2a, gbc.l());
        EXPECT(0x2700, gbc.sp());
        EXPECT(0xa50a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xa507));
        EXPECT(0xab, gbc.readMem(0xa508));
        EXPECT(0x1a, gbc.readMem(0xa509));
        // DC 030C
        gbc.setState(0x72a8, 0xf5fc, 0x8e00, 0xd15d, 0xa766, 0x198e, 0x1, 0x1);
        gbc.writeMem(0x72a8, { 0xdc, 0x10, 0x33 });
        gbc.step();
        EXPECT(0x8e, gbc.a());
        EXPECT(0xd1, gbc.b());
        EXPECT(0x5d, gbc.c());
        EXPECT(0xa7, gbc.d());
        EXPECT(0x66, gbc.e());
        EXPECT(0x19, gbc.h());
        EXPECT(0x8e, gbc.l());
        EXPECT(0xf5fc, gbc.sp());
        EXPECT(0x72ab, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 030D
        gbc.setState(0xdf9d, 0xb132, 0x4670, 0x28d3, 0x1d29, 0x99f8, 0x0, 0x0);
        gbc.writeMem(0xb130, { 0x0, 0x0 });
        gbc.writeMem(0xdf9d, { 0xdc, 0x12, 0x60 });
        gbc.step();
        EXPECT(0x46, gbc.a());
        EXPECT(0x28, gbc.b());
        EXPECT(0xd3, gbc.c());
        EXPECT(0x1d, gbc.d());
        EXPECT(0x29, gbc.e());
        EXPECT(0x99, gbc.h());
        EXPECT(0xf8, gbc.l());
        EXPECT(0xb130, gbc.sp());
        EXPECT(0x6012, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xa0, gbc.readMem(0xb130));
        EXPECT(0xdf, gbc.readMem(0xb131));
        EXPECT(0xdc, gbc.readMem(0xdf9d));
        EXPECT(0x12, gbc.readMem(0xdf9e));
        EXPECT(0x60, gbc.readMem(0xdf9f));
        // DC 030E
        gbc.setState(0xd066, 0xaa0e, 0x4180, 0x1b7a, 0x2748, 0x7327, 0x0, 0x0);
        gbc.writeMem(0xd066, { 0xdc, 0x4d, 0xdc });
        gbc.step();
        EXPECT(0x41, gbc.a());
        EXPECT(0x1b, gbc.b());
        EXPECT(0x7a, gbc.c());
        EXPECT(0x27, gbc.d());
        EXPECT(0x48, gbc.e());
        EXPECT(0x73, gbc.h());
        EXPECT(0x27, gbc.l());
        EXPECT(0xaa0e, gbc.sp());
        EXPECT(0xd069, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xd066));
        EXPECT(0x4d, gbc.readMem(0xd067));
        EXPECT(0xdc, gbc.readMem(0xd068));
        // DC 030F
        gbc.setState(0xa92f, 0xfb10, 0xa090, 0x8a20, 0x8854, 0xe7c7, 0x0, 0x1);
        gbc.writeMem(0xa92f, { 0xdc, 0x3, 0xdc });
        gbc.writeMem(0xfb0e, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xa0, gbc.a());
        EXPECT(0x8a, gbc.b());
        EXPECT(0x20, gbc.c());
        EXPECT(0x88, gbc.d());
        EXPECT(0x54, gbc.e());
        EXPECT(0xe7, gbc.h());
        EXPECT(0xc7, gbc.l());
        EXPECT(0xfb0e, gbc.sp());
        EXPECT(0xdc03, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xa92f));
        EXPECT(0x3, gbc.readMem(0xa930));
        EXPECT(0xdc, gbc.readMem(0xa931));
        EXPECT(0x32, gbc.readMem(0xfb0e));
        EXPECT(0xa9, gbc.readMem(0xfb0f));
        // DC 0310
        gbc.setState(0x513d, 0x6918, 0xbc00, 0x7b76, 0x663e, 0x29fa, 0x1, 0x0);
        gbc.writeMem(0x513d, { 0xdc, 0xb5, 0x49 });
        gbc.step();
        EXPECT(0xbc, gbc.a());
        EXPECT(0x7b, gbc.b());
        EXPECT(0x76, gbc.c());
        EXPECT(0x66, gbc.d());
        EXPECT(0x3e, gbc.e());
        EXPECT(0x29, gbc.h());
        EXPECT(0xfa, gbc.l());
        EXPECT(0x6918, gbc.sp());
        EXPECT(0x5140, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 0311
        gbc.setState(0x3f3a, 0x5582, 0x7320, 0x583d, 0x91d9, 0xd723, 0x1, 0x0);
        gbc.writeMem(0x3f3a, { 0xdc, 0x2c, 0x9f });
        gbc.step();
        EXPECT(0x73, gbc.a());
        EXPECT(0x58, gbc.b());
        EXPECT(0x3d, gbc.c());
        EXPECT(0x91, gbc.d());
        EXPECT(0xd9, gbc.e());
        EXPECT(0xd7, gbc.h());
        EXPECT(0x23, gbc.l());
        EXPECT(0x5582, gbc.sp());
        EXPECT(0x3f3d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 0315
        gbc.setState(0x325e, 0x912d, 0x3c10, 0x818e, 0xf4fa, 0xc2b8, 0x0, 0x0);
        gbc.writeMem(0x325e, { 0xdc, 0xc, 0xbd });
        gbc.writeMem(0x912b, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x3c, gbc.a());
        EXPECT(0x81, gbc.b());
        EXPECT(0x8e, gbc.c());
        EXPECT(0xf4, gbc.d());
        EXPECT(0xfa, gbc.e());
        EXPECT(0xc2, gbc.h());
        EXPECT(0xb8, gbc.l());
        EXPECT(0x912b, gbc.sp());
        EXPECT(0xbd0c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x61, gbc.readMem(0x912b));
        EXPECT(0x32, gbc.readMem(0x912c));
        // DC 0316
        gbc.setState(0xafdf, 0xa708, 0xde70, 0xcbed, 0x762c, 0x8a73, 0x1, 0x0);
        gbc.writeMem(0xa706, { 0x0, 0x0 });
        gbc.writeMem(0xafdf, { 0xdc, 0xb3, 0x68 });
        gbc.step();
        EXPECT(0xde, gbc.a());
        EXPECT(0xcb, gbc.b());
        EXPECT(0xed, gbc.c());
        EXPECT(0x76, gbc.d());
        EXPECT(0x2c, gbc.e());
        EXPECT(0x8a, gbc.h());
        EXPECT(0x73, gbc.l());
        EXPECT(0xa706, gbc.sp());
        EXPECT(0x68b3, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xe2, gbc.readMem(0xa706));
        EXPECT(0xaf, gbc.readMem(0xa707));
        EXPECT(0xdc, gbc.readMem(0xafdf));
        EXPECT(0xb3, gbc.readMem(0xafe0));
        EXPECT(0x68, gbc.readMem(0xafe1));
        // DC 0317
        gbc.setState(0x99d3, 0x7497, 0xb480, 0x1086, 0xa9ca, 0x4250, 0x1, 0x1);
        gbc.writeMem(0x99d3, { 0xdc, 0x85, 0x54 });
        gbc.step();
        EXPECT(0xb4, gbc.a());
        EXPECT(0x10, gbc.b());
        EXPECT(0x86, gbc.c());
        EXPECT(0xa9, gbc.d());
        EXPECT(0xca, gbc.e());
        EXPECT(0x42, gbc.h());
        EXPECT(0x50, gbc.l());
        EXPECT(0x7497, gbc.sp());
        EXPECT(0x99d6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0x99d3));
        EXPECT(0x85, gbc.readMem(0x99d4));
        EXPECT(0x54, gbc.readMem(0x99d5));
        // DC 0318
        gbc.setState(0xc422, 0xaf86, 0x2c60, 0x443e, 0xa804, 0xb0aa, 0x0, 0x1);
        gbc.writeMem(0xc422, { 0xdc, 0xef, 0x48 });
        gbc.step();
        EXPECT(0x2c, gbc.a());
        EXPECT(0x44, gbc.b());
        EXPECT(0x3e, gbc.c());
        EXPECT(0xa8, gbc.d());
        EXPECT(0x4, gbc.e());
        EXPECT(0xb0, gbc.h());
        EXPECT(0xaa, gbc.l());
        EXPECT(0xaf86, gbc.sp());
        EXPECT(0xc425, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xc422));
        EXPECT(0xef, gbc.readMem(0xc423));
        EXPECT(0x48, gbc.readMem(0xc424));
        // DC 0319
        gbc.setState(0xefe3, 0x5ee7, 0xa860, 0x905a, 0x62c8, 0x236e, 0x0, 0x1);
        gbc.writeMem(0xefe3, { 0xdc, 0x71, 0x59 });
        gbc.step();
        EXPECT(0xa8, gbc.a());
        EXPECT(0x90, gbc.b());
        EXPECT(0x5a, gbc.c());
        EXPECT(0x62, gbc.d());
        EXPECT(0xc8, gbc.e());
        EXPECT(0x23, gbc.h());
        EXPECT(0x6e, gbc.l());
        EXPECT(0x5ee7, gbc.sp());
        EXPECT(0xefe6, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xefe3));
        EXPECT(0x71, gbc.readMem(0xefe4));
        EXPECT(0x59, gbc.readMem(0xefe5));
        // DC 031A
        gbc.setState(0x761e, 0xacc3, 0xefe0, 0xc31, 0xaac8, 0x154e, 0x1, 0x0);
        gbc.writeMem(0x761e, { 0xdc, 0xc, 0x8b });
        gbc.step();
        EXPECT(0xef, gbc.a());
        EXPECT(0xc, gbc.b());
        EXPECT(0x31, gbc.c());
        EXPECT(0xaa, gbc.d());
        EXPECT(0xc8, gbc.e());
        EXPECT(0x15, gbc.h());
        EXPECT(0x4e, gbc.l());
        EXPECT(0xacc3, gbc.sp());
        EXPECT(0x7621, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 031B
        gbc.setState(0x2969, 0xd1d1, 0x5e00, 0x2492, 0xebac, 0x68ab, 0x0, 0x1);
        gbc.writeMem(0x2969, { 0xdc, 0xd6, 0xa });
        gbc.step();
        EXPECT(0x5e, gbc.a());
        EXPECT(0x24, gbc.b());
        EXPECT(0x92, gbc.c());
        EXPECT(0xeb, gbc.d());
        EXPECT(0xac, gbc.e());
        EXPECT(0x68, gbc.h());
        EXPECT(0xab, gbc.l());
        EXPECT(0xd1d1, gbc.sp());
        EXPECT(0x296c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 031C
        gbc.setState(0x5c53, 0x7a2c, 0xdf20, 0x4978, 0x9d8c, 0xb866, 0x0, 0x1);
        gbc.writeMem(0x5c53, { 0xdc, 0xda, 0xcd });
        gbc.step();
        EXPECT(0xdf, gbc.a());
        EXPECT(0x49, gbc.b());
        EXPECT(0x78, gbc.c());
        EXPECT(0x9d, gbc.d());
        EXPECT(0x8c, gbc.e());
        EXPECT(0xb8, gbc.h());
        EXPECT(0x66, gbc.l());
        EXPECT(0x7a2c, gbc.sp());
        EXPECT(0x5c56, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 031F
        gbc.setState(0x982c, 0xd542, 0x46d0, 0x4011, 0xe9c6, 0x573b, 0x0, 0x0);
        gbc.writeMem(0x982c, { 0xdc, 0x42, 0xef });
        gbc.writeMem(0xd540, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x46, gbc.a());
        EXPECT(0x40, gbc.b());
        EXPECT(0x11, gbc.c());
        EXPECT(0xe9, gbc.d());
        EXPECT(0xc6, gbc.e());
        EXPECT(0x57, gbc.h());
        EXPECT(0x3b, gbc.l());
        EXPECT(0xd540, gbc.sp());
        EXPECT(0xef42, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0x982c));
        EXPECT(0x42, gbc.readMem(0x982d));
        EXPECT(0xef, gbc.readMem(0x982e));
        EXPECT(0x2f, gbc.readMem(0xd540));
        EXPECT(0x98, gbc.readMem(0xd541));
        // DC 0320
        gbc.setState(0x6e68, 0xed6a, 0x40d0, 0xa3ef, 0xfd4d, 0xe4be, 0x1, 0x1);
        gbc.writeMem(0x6e68, { 0xdc, 0xa6, 0xa8 });
        gbc.writeMem(0xed68, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x40, gbc.a());
        EXPECT(0xa3, gbc.b());
        EXPECT(0xef, gbc.c());
        EXPECT(0xfd, gbc.d());
        EXPECT(0x4d, gbc.e());
        EXPECT(0xe4, gbc.h());
        EXPECT(0xbe, gbc.l());
        EXPECT(0xed68, gbc.sp());
        EXPECT(0xa8a6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x6b, gbc.readMem(0xed68));
        EXPECT(0x6e, gbc.readMem(0xed69));
        // DC 0321
        gbc.setState(0xb519, 0x81c6, 0xa990, 0x2f85, 0x39e1, 0x1ac8, 0x0, 0x0);
        gbc.writeMem(0x81c4, { 0x0, 0x0 });
        gbc.writeMem(0xb519, { 0xdc, 0x38, 0x62 });
        gbc.step();
        EXPECT(0xa9, gbc.a());
        EXPECT(0x2f, gbc.b());
        EXPECT(0x85, gbc.c());
        EXPECT(0x39, gbc.d());
        EXPECT(0xe1, gbc.e());
        EXPECT(0x1a, gbc.h());
        EXPECT(0xc8, gbc.l());
        EXPECT(0x81c4, gbc.sp());
        EXPECT(0x6238, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x1c, gbc.readMem(0x81c4));
        EXPECT(0xb5, gbc.readMem(0x81c5));
        EXPECT(0xdc, gbc.readMem(0xb519));
        EXPECT(0x38, gbc.readMem(0xb51a));
        EXPECT(0x62, gbc.readMem(0xb51b));
        // DC 0323
        gbc.setState(0xcfbc, 0xd1c8, 0x7190, 0xe255, 0xbe64, 0x58a0, 0x1, 0x0);
        gbc.writeMem(0xcfbc, { 0xdc, 0xf9, 0x4f });
        gbc.writeMem(0xd1c6, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x71, gbc.a());
        EXPECT(0xe2, gbc.b());
        EXPECT(0x55, gbc.c());
        EXPECT(0xbe, gbc.d());
        EXPECT(0x64, gbc.e());
        EXPECT(0x58, gbc.h());
        EXPECT(0xa0, gbc.l());
        EXPECT(0xd1c6, gbc.sp());
        EXPECT(0x4ff9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xcfbc));
        EXPECT(0xf9, gbc.readMem(0xcfbd));
        EXPECT(0x4f, gbc.readMem(0xcfbe));
        EXPECT(0xbf, gbc.readMem(0xd1c6));
        EXPECT(0xcf, gbc.readMem(0xd1c7));
        // DC 0324
        gbc.setState(0xbe80, 0x8932, 0x52f0, 0x4b1, 0xea11, 0x1303, 0x0, 0x0);
        gbc.writeMem(0x8930, { 0x0, 0x0 });
        gbc.writeMem(0xbe80, { 0xdc, 0x3, 0x12 });
        gbc.step();
        EXPECT(0x52, gbc.a());
        EXPECT(0x4, gbc.b());
        EXPECT(0xb1, gbc.c());
        EXPECT(0xea, gbc.d());
        EXPECT(0x11, gbc.e());
        EXPECT(0x13, gbc.h());
        EXPECT(0x3, gbc.l());
        EXPECT(0x8930, gbc.sp());
        EXPECT(0x1203, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x83, gbc.readMem(0x8930));
        EXPECT(0xbe, gbc.readMem(0x8931));
        EXPECT(0xdc, gbc.readMem(0xbe80));
        EXPECT(0x3, gbc.readMem(0xbe81));
        EXPECT(0x12, gbc.readMem(0xbe82));
        // DC 0325
        gbc.setState(0x5fee, 0x1284, 0xf9a0, 0x8a7b, 0xce4e, 0xd5b4, 0x0, 0x1);
        gbc.writeMem(0x5fee, { 0xdc, 0x2d, 0x23 });
        gbc.step();
        EXPECT(0xf9, gbc.a());
        EXPECT(0x8a, gbc.b());
        EXPECT(0x7b, gbc.c());
        EXPECT(0xce, gbc.d());
        EXPECT(0x4e, gbc.e());
        EXPECT(0xd5, gbc.h());
        EXPECT(0xb4, gbc.l());
        EXPECT(0x1284, gbc.sp());
        EXPECT(0x5ff1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 0329
        gbc.setState(0x5328, 0x84de, 0xaa00, 0x6383, 0xa5d8, 0xd7ae, 0x1, 0x1);
        gbc.writeMem(0x5328, { 0xdc, 0xb6, 0x49 });
        gbc.step();
        EXPECT(0xaa, gbc.a());
        EXPECT(0x63, gbc.b());
        EXPECT(0x83, gbc.c());
        EXPECT(0xa5, gbc.d());
        EXPECT(0xd8, gbc.e());
        EXPECT(0xd7, gbc.h());
        EXPECT(0xae, gbc.l());
        EXPECT(0x84de, gbc.sp());
        EXPECT(0x532b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 032A
        gbc.setState(0x5296, 0xd6b3, 0xf4f0, 0x62fe, 0x3cd5, 0x49c6, 0x1, 0x0);
        gbc.writeMem(0x5296, { 0xdc, 0x4f, 0xd });
        gbc.writeMem(0xd6b1, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xf4, gbc.a());
        EXPECT(0x62, gbc.b());
        EXPECT(0xfe, gbc.c());
        EXPECT(0x3c, gbc.d());
        EXPECT(0xd5, gbc.e());
        EXPECT(0x49, gbc.h());
        EXPECT(0xc6, gbc.l());
        EXPECT(0xd6b1, gbc.sp());
        EXPECT(0xd4f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x99, gbc.readMem(0xd6b1));
        EXPECT(0x52, gbc.readMem(0xd6b2));
        // DC 032C
        gbc.setState(0x57a2, 0x94ee, 0x1b00, 0x462c, 0xbc04, 0xf274, 0x1, 0x0);
        gbc.writeMem(0x57a2, { 0xdc, 0x8, 0xd5 });
        gbc.step();
        EXPECT(0x1b, gbc.a());
        EXPECT(0x46, gbc.b());
        EXPECT(0x2c, gbc.c());
        EXPECT(0xbc, gbc.d());
        EXPECT(0x4, gbc.e());
        EXPECT(0xf2, gbc.h());
        EXPECT(0x74, gbc.l());
        EXPECT(0x94ee, gbc.sp());
        EXPECT(0x57a5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 032D
        gbc.setState(0xb729, 0x69e4, 0xc080, 0x6090, 0x46e1, 0x4ed7, 0x1, 0x0);
        gbc.writeMem(0xb729, { 0xdc, 0x4a, 0x8f });
        gbc.step();
        EXPECT(0xc0, gbc.a());
        EXPECT(0x60, gbc.b());
        EXPECT(0x90, gbc.c());
        EXPECT(0x46, gbc.d());
        EXPECT(0xe1, gbc.e());
        EXPECT(0x4e, gbc.h());
        EXPECT(0xd7, gbc.l());
        EXPECT(0x69e4, gbc.sp());
        EXPECT(0xb72c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xb729));
        EXPECT(0x4a, gbc.readMem(0xb72a));
        EXPECT(0x8f, gbc.readMem(0xb72b));
        // DC 032E
        gbc.setState(0xd355, 0xd662, 0xe900, 0x4601, 0xff04, 0x1f3e, 0x1, 0x1);
        gbc.writeMem(0xd355, { 0xdc, 0x1b, 0x8d });
        gbc.step();
        EXPECT(0xe9, gbc.a());
        EXPECT(0x46, gbc.b());
        EXPECT(0x1, gbc.c());
        EXPECT(0xff, gbc.d());
        EXPECT(0x4, gbc.e());
        EXPECT(0x1f, gbc.h());
        EXPECT(0x3e, gbc.l());
        EXPECT(0xd662, gbc.sp());
        EXPECT(0xd358, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xd355));
        EXPECT(0x1b, gbc.readMem(0xd356));
        EXPECT(0x8d, gbc.readMem(0xd357));
        // DC 032F
        gbc.setState(0xd5ba, 0x4784, 0xc5e0, 0xf4b, 0xaf8, 0x13d5, 0x0, 0x0);
        gbc.writeMem(0xd5ba, { 0xdc, 0x86, 0xb5 });
        gbc.step();
        EXPECT(0xc5, gbc.a());
        EXPECT(0xf, gbc.b());
        EXPECT(0x4b, gbc.c());
        EXPECT(0xa, gbc.d());
        EXPECT(0xf8, gbc.e());
        EXPECT(0x13, gbc.h());
        EXPECT(0xd5, gbc.l());
        EXPECT(0x4784, gbc.sp());
        EXPECT(0xd5bd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xd5ba));
        EXPECT(0x86, gbc.readMem(0xd5bb));
        EXPECT(0xb5, gbc.readMem(0xd5bc));
        // DC 0330
        gbc.setState(0x8a2e, 0x82b2, 0x16c0, 0xc9df, 0xfe39, 0x573b, 0x1, 0x1);
        gbc.writeMem(0x8a2e, { 0xdc, 0xba, 0xba });
        gbc.step();
        EXPECT(0x16, gbc.a());
        EXPECT(0xc9, gbc.b());
        EXPECT(0xdf, gbc.c());
        EXPECT(0xfe, gbc.d());
        EXPECT(0x39, gbc.e());
        EXPECT(0x57, gbc.h());
        EXPECT(0x3b, gbc.l());
        EXPECT(0x82b2, gbc.sp());
        EXPECT(0x8a31, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0x8a2e));
        EXPECT(0xba, gbc.readMem(0x8a2f));
        EXPECT(0xba, gbc.readMem(0x8a30));
        // DC 0331
        gbc.setState(0x2ee1, 0x599d, 0xeb40, 0xc451, 0x1227, 0xb865, 0x1, 0x1);
        gbc.writeMem(0x2ee1, { 0xdc, 0x60, 0xd0 });
        gbc.step();
        EXPECT(0xeb, gbc.a());
        EXPECT(0xc4, gbc.b());
        EXPECT(0x51, gbc.c());
        EXPECT(0x12, gbc.d());
        EXPECT(0x27, gbc.e());
        EXPECT(0xb8, gbc.h());
        EXPECT(0x65, gbc.l());
        EXPECT(0x599d, gbc.sp());
        EXPECT(0x2ee4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 0332
        gbc.setState(0x6111, 0xd6b3, 0xf0d0, 0x3217, 0x7129, 0x3534, 0x1, 0x1);
        gbc.writeMem(0x6111, { 0xdc, 0x90, 0xe9 });
        gbc.writeMem(0xd6b1, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xf0, gbc.a());
        EXPECT(0x32, gbc.b());
        EXPECT(0x17, gbc.c());
        EXPECT(0x71, gbc.d());
        EXPECT(0x29, gbc.e());
        EXPECT(0x35, gbc.h());
        EXPECT(0x34, gbc.l());
        EXPECT(0xd6b1, gbc.sp());
        EXPECT(0xe990, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x14, gbc.readMem(0xd6b1));
        EXPECT(0x61, gbc.readMem(0xd6b2));
        // DC 0333
        gbc.setState(0xccd7, 0x1e0c, 0xdc80, 0xac48, 0x187d, 0xf752, 0x1, 0x0);
        gbc.writeMem(0xccd7, { 0xdc, 0xbb, 0x4e });
        gbc.step();
        EXPECT(0xdc, gbc.a());
        EXPECT(0xac, gbc.b());
        EXPECT(0x48, gbc.c());
        EXPECT(0x18, gbc.d());
        EXPECT(0x7d, gbc.e());
        EXPECT(0xf7, gbc.h());
        EXPECT(0x52, gbc.l());
        EXPECT(0x1e0c, gbc.sp());
        EXPECT(0xccda, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xccd7));
        EXPECT(0xbb, gbc.readMem(0xccd8));
        EXPECT(0x4e, gbc.readMem(0xccd9));
        // DC 0334
        gbc.setState(0x53a, 0x635a, 0x9ea0, 0x9ec4, 0x5386, 0x47be, 0x1, 0x1);
        gbc.writeMem(0x53a, { 0xdc, 0xa6, 0x12 });
        gbc.step();
        EXPECT(0x9e, gbc.a());
        EXPECT(0x9e, gbc.b());
        EXPECT(0xc4, gbc.c());
        EXPECT(0x53, gbc.d());
        EXPECT(0x86, gbc.e());
        EXPECT(0x47, gbc.h());
        EXPECT(0xbe, gbc.l());
        EXPECT(0x635a, gbc.sp());
        EXPECT(0x53d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 0335
        gbc.setState(0x1a, 0x76de, 0xb7c0, 0x9dc0, 0xbf68, 0x5754, 0x1, 0x1);
        gbc.writeMem(0x1a, { 0xdc, 0x5c, 0xf7 });
        gbc.step();
        EXPECT(0xb7, gbc.a());
        EXPECT(0x9d, gbc.b());
        EXPECT(0xc0, gbc.c());
        EXPECT(0xbf, gbc.d());
        EXPECT(0x68, gbc.e());
        EXPECT(0x57, gbc.h());
        EXPECT(0x54, gbc.l());
        EXPECT(0x76de, gbc.sp());
        EXPECT(0x1d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 0336
        gbc.setState(0x4ea4, 0x43de, 0x87c0, 0x9fdd, 0xa2b0, 0x268b, 0x0, 0x0);
        gbc.writeMem(0x4ea4, { 0xdc, 0x93, 0xd2 });
        gbc.step();
        EXPECT(0x87, gbc.a());
        EXPECT(0x9f, gbc.b());
        EXPECT(0xdd, gbc.c());
        EXPECT(0xa2, gbc.d());
        EXPECT(0xb0, gbc.e());
        EXPECT(0x26, gbc.h());
        EXPECT(0x8b, gbc.l());
        EXPECT(0x43de, gbc.sp());
        EXPECT(0x4ea7, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 0337
        gbc.setState(0xc95f, 0xecbd, 0x790, 0x9a2e, 0x2f93, 0x6c69, 0x1, 0x0);
        gbc.writeMem(0xc95f, { 0xdc, 0xf5, 0x52 });
        gbc.writeMem(0xecbb, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x7, gbc.a());
        EXPECT(0x9a, gbc.b());
        EXPECT(0x2e, gbc.c());
        EXPECT(0x2f, gbc.d());
        EXPECT(0x93, gbc.e());
        EXPECT(0x6c, gbc.h());
        EXPECT(0x69, gbc.l());
        EXPECT(0xecbb, gbc.sp());
        EXPECT(0x52f5, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xc95f));
        EXPECT(0xf5, gbc.readMem(0xc960));
        EXPECT(0x52, gbc.readMem(0xc961));
        EXPECT(0x62, gbc.readMem(0xecbb));
        EXPECT(0xc9, gbc.readMem(0xecbc));
        // DC 0338
        gbc.setState(0x76c, 0xa036, 0xbac0, 0x6c14, 0xd15, 0x167, 0x1, 0x0);
        gbc.writeMem(0x76c, { 0xdc, 0x58, 0xa0 });
        gbc.step();
        EXPECT(0xba, gbc.a());
        EXPECT(0x6c, gbc.b());
        EXPECT(0x14, gbc.c());
        EXPECT(0xd, gbc.d());
        EXPECT(0x15, gbc.e());
        EXPECT(0x1, gbc.h());
        EXPECT(0x67, gbc.l());
        EXPECT(0xa036, gbc.sp());
        EXPECT(0x76f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 0339
        gbc.setState(0x868f, 0x18cd, 0xb0a0, 0xb39c, 0x958a, 0x8974, 0x0, 0x1);
        gbc.writeMem(0x868f, { 0xdc, 0x2b, 0xeb });
        gbc.step();
        EXPECT(0xb0, gbc.a());
        EXPECT(0xb3, gbc.b());
        EXPECT(0x9c, gbc.c());
        EXPECT(0x95, gbc.d());
        EXPECT(0x8a, gbc.e());
        EXPECT(0x89, gbc.h());
        EXPECT(0x74, gbc.l());
        EXPECT(0x18cd, gbc.sp());
        EXPECT(0x8692, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0x868f));
        EXPECT(0x2b, gbc.readMem(0x8690));
        EXPECT(0xeb, gbc.readMem(0x8691));
        // DC 033A
        gbc.setState(0x858a, 0xe3d5, 0xed30, 0xe783, 0x8307, 0x2456, 0x0, 0x0);
        gbc.writeMem(0x858a, { 0xdc, 0x37, 0x1b });
        gbc.writeMem(0xe3d3, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xed, gbc.a());
        EXPECT(0xe7, gbc.b());
        EXPECT(0x83, gbc.c());
        EXPECT(0x83, gbc.d());
        EXPECT(0x7, gbc.e());
        EXPECT(0x24, gbc.h());
        EXPECT(0x56, gbc.l());
        EXPECT(0xe3d3, gbc.sp());
        EXPECT(0x1b37, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0x858a));
        EXPECT(0x37, gbc.readMem(0x858b));
        EXPECT(0x1b, gbc.readMem(0x858c));
        EXPECT(0x8d, gbc.readMem(0xe3d3));
        EXPECT(0x85, gbc.readMem(0xe3d4));
        // DC 033B
        gbc.setState(0x1120, 0x1f78, 0x7600, 0xcf59, 0x52ff, 0x366, 0x1, 0x1);
        gbc.writeMem(0x1120, { 0xdc, 0x3e, 0xd0 });
        gbc.step();
        EXPECT(0x76, gbc.a());
        EXPECT(0xcf, gbc.b());
        EXPECT(0x59, gbc.c());
        EXPECT(0x52, gbc.d());
        EXPECT(0xff, gbc.e());
        EXPECT(0x3, gbc.h());
        EXPECT(0x66, gbc.l());
        EXPECT(0x1f78, gbc.sp());
        EXPECT(0x1123, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 033C
        gbc.setState(0xbd28, 0xaa93, 0xa280, 0xa633, 0xb303, 0x9b0f, 0x1, 0x1);
        gbc.writeMem(0xbd28, { 0xdc, 0x40, 0xe9 });
        gbc.step();
        EXPECT(0xa2, gbc.a());
        EXPECT(0xa6, gbc.b());
        EXPECT(0x33, gbc.c());
        EXPECT(0xb3, gbc.d());
        EXPECT(0x3, gbc.e());
        EXPECT(0x9b, gbc.h());
        EXPECT(0xf, gbc.l());
        EXPECT(0xaa93, gbc.sp());
        EXPECT(0xbd2b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xbd28));
        EXPECT(0x40, gbc.readMem(0xbd29));
        EXPECT(0xe9, gbc.readMem(0xbd2a));
        // DC 033D
        gbc.setState(0xe056, 0x8f73, 0xf200, 0x2bbb, 0x137, 0x620f, 0x1, 0x1);
        gbc.writeMem(0xe056, { 0xdc, 0xc6, 0x5 });
        gbc.step();
        EXPECT(0xf2, gbc.a());
        EXPECT(0x2b, gbc.b());
        EXPECT(0xbb, gbc.c());
        EXPECT(0x1, gbc.d());
        EXPECT(0x37, gbc.e());
        EXPECT(0x62, gbc.h());
        EXPECT(0xf, gbc.l());
        EXPECT(0x8f73, gbc.sp());
        EXPECT(0xe059, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xe056));
        EXPECT(0xc6, gbc.readMem(0xe057));
        EXPECT(0x5, gbc.readMem(0xe058));
        // DC 033E
        gbc.setState(0x93b8, 0x2021, 0xb20, 0x7453, 0x156f, 0x4c94, 0x1, 0x0);
        gbc.writeMem(0x93b8, { 0xdc, 0x7a, 0xd9 });
        gbc.step();
        EXPECT(0xb, gbc.a());
        EXPECT(0x74, gbc.b());
        EXPECT(0x53, gbc.c());
        EXPECT(0x15, gbc.d());
        EXPECT(0x6f, gbc.e());
        EXPECT(0x4c, gbc.h());
        EXPECT(0x94, gbc.l());
        EXPECT(0x2021, gbc.sp());
        EXPECT(0x93bb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0x93b8));
        EXPECT(0x7a, gbc.readMem(0x93b9));
        EXPECT(0xd9, gbc.readMem(0x93ba));
        // DC 033F
        gbc.setState(0xe35f, 0x4ea5, 0xb260, 0xb8d6, 0xf5f6, 0x2635, 0x1, 0x0);
        gbc.writeMem(0xe35f, { 0xdc, 0xcb, 0x28 });
        gbc.step();
        EXPECT(0xb2, gbc.a());
        EXPECT(0xb8, gbc.b());
        EXPECT(0xd6, gbc.c());
        EXPECT(0xf5, gbc.d());
        EXPECT(0xf6, gbc.e());
        EXPECT(0x26, gbc.h());
        EXPECT(0x35, gbc.l());
        EXPECT(0x4ea5, gbc.sp());
        EXPECT(0xe362, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xe35f));
        EXPECT(0xcb, gbc.readMem(0xe360));
        EXPECT(0x28, gbc.readMem(0xe361));
        // DC 0341
        gbc.setState(0xdba8, 0x2d12, 0x9740, 0xcdb0, 0xf295, 0x3769, 0x0, 0x1);
        gbc.writeMem(0xdba8, { 0xdc, 0x3a, 0x3c });
        gbc.step();
        EXPECT(0x97, gbc.a());
        EXPECT(0xcd, gbc.b());
        EXPECT(0xb0, gbc.c());
        EXPECT(0xf2, gbc.d());
        EXPECT(0x95, gbc.e());
        EXPECT(0x37, gbc.h());
        EXPECT(0x69, gbc.l());
        EXPECT(0x2d12, gbc.sp());
        EXPECT(0xdbab, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xdba8));
        EXPECT(0x3a, gbc.readMem(0xdba9));
        EXPECT(0x3c, gbc.readMem(0xdbaa));
        // DC 0342
        gbc.setState(0xb86d, 0x895e, 0xf610, 0x834a, 0x6c1c, 0xf833, 0x0, 0x1);
        gbc.writeMem(0x895c, { 0x0, 0x0 });
        gbc.writeMem(0xb86d, { 0xdc, 0x15, 0xdd });
        gbc.step();
        EXPECT(0xf6, gbc.a());
        EXPECT(0x83, gbc.b());
        EXPECT(0x4a, gbc.c());
        EXPECT(0x6c, gbc.d());
        EXPECT(0x1c, gbc.e());
        EXPECT(0xf8, gbc.h());
        EXPECT(0x33, gbc.l());
        EXPECT(0x895c, gbc.sp());
        EXPECT(0xdd15, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x70, gbc.readMem(0x895c));
        EXPECT(0xb8, gbc.readMem(0x895d));
        EXPECT(0xdc, gbc.readMem(0xb86d));
        EXPECT(0x15, gbc.readMem(0xb86e));
        EXPECT(0xdd, gbc.readMem(0xb86f));
        // DC 0343
        gbc.setState(0x3cc9, 0xcd88, 0xf9e0, 0x9cab, 0x6a63, 0x257, 0x0, 0x1);
        gbc.writeMem(0x3cc9, { 0xdc, 0xab, 0x5 });
        gbc.step();
        EXPECT(0xf9, gbc.a());
        EXPECT(0x9c, gbc.b());
        EXPECT(0xab, gbc.c());
        EXPECT(0x6a, gbc.d());
        EXPECT(0x63, gbc.e());
        EXPECT(0x2, gbc.h());
        EXPECT(0x57, gbc.l());
        EXPECT(0xcd88, gbc.sp());
        EXPECT(0x3ccc, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 0344
        gbc.setState(0xbbf9, 0xcbf3, 0xa8d0, 0x8420, 0x362d, 0x61e7, 0x0, 0x1);
        gbc.writeMem(0xbbf9, { 0xdc, 0x14, 0x97 });
        gbc.writeMem(0xcbf1, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xa8, gbc.a());
        EXPECT(0x84, gbc.b());
        EXPECT(0x20, gbc.c());
        EXPECT(0x36, gbc.d());
        EXPECT(0x2d, gbc.e());
        EXPECT(0x61, gbc.h());
        EXPECT(0xe7, gbc.l());
        EXPECT(0xcbf1, gbc.sp());
        EXPECT(0x9714, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xbbf9));
        EXPECT(0x14, gbc.readMem(0xbbfa));
        EXPECT(0x97, gbc.readMem(0xbbfb));
        EXPECT(0xfc, gbc.readMem(0xcbf1));
        EXPECT(0xbb, gbc.readMem(0xcbf2));
        // DC 0345
        gbc.setState(0x9bd3, 0x959d, 0x3f50, 0x6d38, 0x4dfc, 0x389f, 0x0, 0x1);
        gbc.writeMem(0x959b, { 0x0, 0x0 });
        gbc.writeMem(0x9bd3, { 0xdc, 0x74, 0xe0 });
        gbc.step();
        EXPECT(0x3f, gbc.a());
        EXPECT(0x6d, gbc.b());
        EXPECT(0x38, gbc.c());
        EXPECT(0x4d, gbc.d());
        EXPECT(0xfc, gbc.e());
        EXPECT(0x38, gbc.h());
        EXPECT(0x9f, gbc.l());
        EXPECT(0x959b, gbc.sp());
        EXPECT(0xe074, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xd6, gbc.readMem(0x959b));
        EXPECT(0x9b, gbc.readMem(0x959c));
        EXPECT(0xdc, gbc.readMem(0x9bd3));
        EXPECT(0x74, gbc.readMem(0x9bd4));
        EXPECT(0xe0, gbc.readMem(0x9bd5));
        // DC 0348
        gbc.setState(0xda58, 0xbc0c, 0x8f70, 0x2a33, 0xf88, 0x62fb, 0x1, 0x0);
        gbc.writeMem(0xbc0a, { 0x0, 0x0 });
        gbc.writeMem(0xda58, { 0xdc, 0xf6, 0x5a });
        gbc.step();
        EXPECT(0x8f, gbc.a());
        EXPECT(0x2a, gbc.b());
        EXPECT(0x33, gbc.c());
        EXPECT(0xf, gbc.d());
        EXPECT(0x88, gbc.e());
        EXPECT(0x62, gbc.h());
        EXPECT(0xfb, gbc.l());
        EXPECT(0xbc0a, gbc.sp());
        EXPECT(0x5af6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x5b, gbc.readMem(0xbc0a));
        EXPECT(0xda, gbc.readMem(0xbc0b));
        EXPECT(0xdc, gbc.readMem(0xda58));
        EXPECT(0xf6, gbc.readMem(0xda59));
        EXPECT(0x5a, gbc.readMem(0xda5a));
        // DC 0349
        gbc.setState(0xb29e, 0x83c3, 0x6650, 0x4c70, 0x3aad, 0x9910, 0x1, 0x0);
        gbc.writeMem(0x83c1, { 0x0, 0x0 });
        gbc.writeMem(0xb29e, { 0xdc, 0xed, 0x4a });
        gbc.step();
        EXPECT(0x66, gbc.a());
        EXPECT(0x4c, gbc.b());
        EXPECT(0x70, gbc.c());
        EXPECT(0x3a, gbc.d());
        EXPECT(0xad, gbc.e());
        EXPECT(0x99, gbc.h());
        EXPECT(0x10, gbc.l());
        EXPECT(0x83c1, gbc.sp());
        EXPECT(0x4aed, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xa1, gbc.readMem(0x83c1));
        EXPECT(0xb2, gbc.readMem(0x83c2));
        EXPECT(0xdc, gbc.readMem(0xb29e));
        EXPECT(0xed, gbc.readMem(0xb29f));
        EXPECT(0x4a, gbc.readMem(0xb2a0));
        // DC 034A
        gbc.setState(0xcfaa, 0xba9f, 0x5d10, 0xd7d0, 0x206d, 0xfb65, 0x0, 0x0);
        gbc.writeMem(0xba9d, { 0x0, 0x0 });
        gbc.writeMem(0xcfaa, { 0xdc, 0x23, 0xaf });
        gbc.step();
        EXPECT(0x5d, gbc.a());
        EXPECT(0xd7, gbc.b());
        EXPECT(0xd0, gbc.c());
        EXPECT(0x20, gbc.d());
        EXPECT(0x6d, gbc.e());
        EXPECT(0xfb, gbc.h());
        EXPECT(0x65, gbc.l());
        EXPECT(0xba9d, gbc.sp());
        EXPECT(0xaf23, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xad, gbc.readMem(0xba9d));
        EXPECT(0xcf, gbc.readMem(0xba9e));
        EXPECT(0xdc, gbc.readMem(0xcfaa));
        EXPECT(0x23, gbc.readMem(0xcfab));
        EXPECT(0xaf, gbc.readMem(0xcfac));
        // DC 034C
        gbc.setState(0xef74, 0xf6f1, 0xcab0, 0x4c40, 0xe7e0, 0x7b13, 0x0, 0x1);
        gbc.writeMem(0xef74, { 0xdc, 0x2b, 0x23 });
        gbc.writeMem(0xf6ef, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xca, gbc.a());
        EXPECT(0x4c, gbc.b());
        EXPECT(0x40, gbc.c());
        EXPECT(0xe7, gbc.d());
        EXPECT(0xe0, gbc.e());
        EXPECT(0x7b, gbc.h());
        EXPECT(0x13, gbc.l());
        EXPECT(0xf6ef, gbc.sp());
        EXPECT(0x232b, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xef74));
        EXPECT(0x2b, gbc.readMem(0xef75));
        EXPECT(0x23, gbc.readMem(0xef76));
        EXPECT(0x77, gbc.readMem(0xf6ef));
        EXPECT(0xef, gbc.readMem(0xf6f0));
        // DC 034D
        gbc.setState(0x4d00, 0xc08e, 0x1530, 0x1c, 0x42c, 0x555e, 0x0, 0x1);
        gbc.writeMem(0x4d00, { 0xdc, 0x3e, 0xf });
        gbc.writeMem(0xc08c, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x15, gbc.a());
        EXPECT(0x0, gbc.b());
        EXPECT(0x1c, gbc.c());
        EXPECT(0x4, gbc.d());
        EXPECT(0x2c, gbc.e());
        EXPECT(0x55, gbc.h());
        EXPECT(0x5e, gbc.l());
        EXPECT(0xc08c, gbc.sp());
        EXPECT(0xf3e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x3, gbc.readMem(0xc08c));
        EXPECT(0x4d, gbc.readMem(0xc08d));
        // DC 034F
        gbc.setState(0x6098, 0xc07e, 0x1850, 0x43e3, 0x26ff, 0x4265, 0x0, 0x1);
        gbc.writeMem(0x6098, { 0xdc, 0xef, 0x23 });
        gbc.writeMem(0xc07c, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x18, gbc.a());
        EXPECT(0x43, gbc.b());
        EXPECT(0xe3, gbc.c());
        EXPECT(0x26, gbc.d());
        EXPECT(0xff, gbc.e());
        EXPECT(0x42, gbc.h());
        EXPECT(0x65, gbc.l());
        EXPECT(0xc07c, gbc.sp());
        EXPECT(0x23ef, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x9b, gbc.readMem(0xc07c));
        EXPECT(0x60, gbc.readMem(0xc07d));
        // DC 0352
        gbc.setState(0xe3fd, 0xa7e5, 0x88b0, 0x4046, 0xd6bc, 0x22e6, 0x1, 0x1);
        gbc.writeMem(0xa7e3, { 0x0, 0x0 });
        gbc.writeMem(0xe3fd, { 0xdc, 0xd4, 0x5f });
        gbc.step();
        EXPECT(0x88, gbc.a());
        EXPECT(0x40, gbc.b());
        EXPECT(0x46, gbc.c());
        EXPECT(0xd6, gbc.d());
        EXPECT(0xbc, gbc.e());
        EXPECT(0x22, gbc.h());
        EXPECT(0xe6, gbc.l());
        EXPECT(0xa7e3, gbc.sp());
        EXPECT(0x5fd4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x0, gbc.readMem(0xa7e3));
        EXPECT(0xe4, gbc.readMem(0xa7e4));
        EXPECT(0xdc, gbc.readMem(0xe3fd));
        EXPECT(0xd4, gbc.readMem(0xe3fe));
        EXPECT(0x5f, gbc.readMem(0xe3ff));
        // DC 0353
        gbc.setState(0x8da9, 0xf585, 0x8610, 0x13a8, 0x98f8, 0x5680, 0x0, 0x1);
        gbc.writeMem(0x8da9, { 0xdc, 0xc3, 0xe1 });
        gbc.writeMem(0xf583, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x86, gbc.a());
        EXPECT(0x13, gbc.b());
        EXPECT(0xa8, gbc.c());
        EXPECT(0x98, gbc.d());
        EXPECT(0xf8, gbc.e());
        EXPECT(0x56, gbc.h());
        EXPECT(0x80, gbc.l());
        EXPECT(0xf583, gbc.sp());
        EXPECT(0xe1c3, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0x8da9));
        EXPECT(0xc3, gbc.readMem(0x8daa));
        EXPECT(0xe1, gbc.readMem(0x8dab));
        EXPECT(0xac, gbc.readMem(0xf583));
        EXPECT(0x8d, gbc.readMem(0xf584));
        // DC 0355
        gbc.setState(0x5d76, 0x9da7, 0x6e30, 0x63df, 0x605f, 0x5da2, 0x1, 0x1);
        gbc.writeMem(0x5d76, { 0xdc, 0xba, 0xb2 });
        gbc.writeMem(0x9da5, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x6e, gbc.a());
        EXPECT(0x63, gbc.b());
        EXPECT(0xdf, gbc.c());
        EXPECT(0x60, gbc.d());
        EXPECT(0x5f, gbc.e());
        EXPECT(0x5d, gbc.h());
        EXPECT(0xa2, gbc.l());
        EXPECT(0x9da5, gbc.sp());
        EXPECT(0xb2ba, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x79, gbc.readMem(0x9da5));
        EXPECT(0x5d, gbc.readMem(0x9da6));
        // DC 0356
        gbc.setState(0x8acb, 0x7b57, 0xa680, 0x957, 0x360c, 0xb075, 0x1, 0x1);
        gbc.writeMem(0x8acb, { 0xdc, 0x3b, 0x17 });
        gbc.step();
        EXPECT(0xa6, gbc.a());
        EXPECT(0x9, gbc.b());
        EXPECT(0x57, gbc.c());
        EXPECT(0x36, gbc.d());
        EXPECT(0xc, gbc.e());
        EXPECT(0xb0, gbc.h());
        EXPECT(0x75, gbc.l());
        EXPECT(0x7b57, gbc.sp());
        EXPECT(0x8ace, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0x8acb));
        EXPECT(0x3b, gbc.readMem(0x8acc));
        EXPECT(0x17, gbc.readMem(0x8acd));
        // DC 0357
        gbc.setState(0x8948, 0x9d4c, 0xee00, 0xe965, 0xd5a3, 0x6a6a, 0x1, 0x0);
        gbc.writeMem(0x8948, { 0xdc, 0x12, 0x7c });
        gbc.step();
        EXPECT(0xee, gbc.a());
        EXPECT(0xe9, gbc.b());
        EXPECT(0x65, gbc.c());
        EXPECT(0xd5, gbc.d());
        EXPECT(0xa3, gbc.e());
        EXPECT(0x6a, gbc.h());
        EXPECT(0x6a, gbc.l());
        EXPECT(0x9d4c, gbc.sp());
        EXPECT(0x894b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0x8948));
        EXPECT(0x12, gbc.readMem(0x8949));
        EXPECT(0x7c, gbc.readMem(0x894a));
        // DC 035A
        gbc.setState(0xef00, 0x9a0d, 0x4d00, 0x816, 0xb4ab, 0x7698, 0x0, 0x1);
        gbc.writeMem(0xef00, { 0xdc, 0xb1, 0x30 });
        gbc.step();
        EXPECT(0x4d, gbc.a());
        EXPECT(0x8, gbc.b());
        EXPECT(0x16, gbc.c());
        EXPECT(0xb4, gbc.d());
        EXPECT(0xab, gbc.e());
        EXPECT(0x76, gbc.h());
        EXPECT(0x98, gbc.l());
        EXPECT(0x9a0d, gbc.sp());
        EXPECT(0xef03, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xef00));
        EXPECT(0xb1, gbc.readMem(0xef01));
        EXPECT(0x30, gbc.readMem(0xef02));
        // DC 035B
        gbc.setState(0x5e5e, 0x5031, 0x1b20, 0xef60, 0x3515, 0x5500, 0x1, 0x1);
        gbc.writeMem(0x5e5e, { 0xdc, 0x2e, 0x65 });
        gbc.step();
        EXPECT(0x1b, gbc.a());
        EXPECT(0xef, gbc.b());
        EXPECT(0x60, gbc.c());
        EXPECT(0x35, gbc.d());
        EXPECT(0x15, gbc.e());
        EXPECT(0x55, gbc.h());
        EXPECT(0x0, gbc.l());
        EXPECT(0x5031, gbc.sp());
        EXPECT(0x5e61, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 035C
        gbc.setState(0x7b16, 0x9984, 0xae10, 0x95e8, 0x2d71, 0x63ef, 0x1, 0x1);
        gbc.writeMem(0x7b16, { 0xdc, 0x42, 0x2f });
        gbc.writeMem(0x9982, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xae, gbc.a());
        EXPECT(0x95, gbc.b());
        EXPECT(0xe8, gbc.c());
        EXPECT(0x2d, gbc.d());
        EXPECT(0x71, gbc.e());
        EXPECT(0x63, gbc.h());
        EXPECT(0xef, gbc.l());
        EXPECT(0x9982, gbc.sp());
        EXPECT(0x2f42, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x19, gbc.readMem(0x9982));
        EXPECT(0x7b, gbc.readMem(0x9983));
        // DC 035D
        gbc.setState(0xd730, 0x8b59, 0x8870, 0xcae6, 0x9d05, 0x7f40, 0x1, 0x0);
        gbc.writeMem(0x8b57, { 0x0, 0x0 });
        gbc.writeMem(0xd730, { 0xdc, 0x75, 0xfc });
        gbc.step();
        EXPECT(0x88, gbc.a());
        EXPECT(0xca, gbc.b());
        EXPECT(0xe6, gbc.c());
        EXPECT(0x9d, gbc.d());
        EXPECT(0x5, gbc.e());
        EXPECT(0x7f, gbc.h());
        EXPECT(0x40, gbc.l());
        EXPECT(0x8b57, gbc.sp());
        EXPECT(0xfc75, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x33, gbc.readMem(0x8b57));
        EXPECT(0xd7, gbc.readMem(0x8b58));
        EXPECT(0xdc, gbc.readMem(0xd730));
        EXPECT(0x75, gbc.readMem(0xd731));
        EXPECT(0xfc, gbc.readMem(0xd732));
        // DC 0360
        gbc.setState(0xbd87, 0xa1a7, 0xff20, 0xb26c, 0x2324, 0x81c6, 0x1, 0x0);
        gbc.writeMem(0xbd87, { 0xdc, 0xbe, 0xc9 });
        gbc.step();
        EXPECT(0xff, gbc.a());
        EXPECT(0xb2, gbc.b());
        EXPECT(0x6c, gbc.c());
        EXPECT(0x23, gbc.d());
        EXPECT(0x24, gbc.e());
        EXPECT(0x81, gbc.h());
        EXPECT(0xc6, gbc.l());
        EXPECT(0xa1a7, gbc.sp());
        EXPECT(0xbd8a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xbd87));
        EXPECT(0xbe, gbc.readMem(0xbd88));
        EXPECT(0xc9, gbc.readMem(0xbd89));
        // DC 0361
        gbc.setState(0xedac, 0x432e, 0xd980, 0x3a2b, 0xb295, 0x9cc0, 0x1, 0x1);
        gbc.writeMem(0xedac, { 0xdc, 0x5b, 0x5b });
        gbc.step();
        EXPECT(0xd9, gbc.a());
        EXPECT(0x3a, gbc.b());
        EXPECT(0x2b, gbc.c());
        EXPECT(0xb2, gbc.d());
        EXPECT(0x95, gbc.e());
        EXPECT(0x9c, gbc.h());
        EXPECT(0xc0, gbc.l());
        EXPECT(0x432e, gbc.sp());
        EXPECT(0xedaf, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xedac));
        EXPECT(0x5b, gbc.readMem(0xedad));
        EXPECT(0x5b, gbc.readMem(0xedae));
        // DC 0362
        gbc.setState(0xbceb, 0x4e9d, 0x5d40, 0x75f3, 0x4d2a, 0x7940, 0x0, 0x1);
        gbc.writeMem(0xbceb, { 0xdc, 0xa2, 0xbb });
        gbc.step();
        EXPECT(0x5d, gbc.a());
        EXPECT(0x75, gbc.b());
        EXPECT(0xf3, gbc.c());
        EXPECT(0x4d, gbc.d());
        EXPECT(0x2a, gbc.e());
        EXPECT(0x79, gbc.h());
        EXPECT(0x40, gbc.l());
        EXPECT(0x4e9d, gbc.sp());
        EXPECT(0xbcee, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xbceb));
        EXPECT(0xa2, gbc.readMem(0xbcec));
        EXPECT(0xbb, gbc.readMem(0xbced));
        // DC 0363
        gbc.setState(0xe6e7, 0xc4fc, 0xddd0, 0x656c, 0xe082, 0x1930, 0x1, 0x1);
        gbc.writeMem(0xc4fa, { 0x0, 0x0 });
        gbc.writeMem(0xe6e7, { 0xdc, 0xea, 0x80 });
        gbc.step();
        EXPECT(0xdd, gbc.a());
        EXPECT(0x65, gbc.b());
        EXPECT(0x6c, gbc.c());
        EXPECT(0xe0, gbc.d());
        EXPECT(0x82, gbc.e());
        EXPECT(0x19, gbc.h());
        EXPECT(0x30, gbc.l());
        EXPECT(0xc4fa, gbc.sp());
        EXPECT(0x80ea, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xea, gbc.readMem(0xc4fa));
        EXPECT(0xe6, gbc.readMem(0xc4fb));
        EXPECT(0xdc, gbc.readMem(0xe6e7));
        EXPECT(0xea, gbc.readMem(0xe6e8));
        EXPECT(0x80, gbc.readMem(0xe6e9));
        // DC 0365
        gbc.setState(0x88b7, 0xfa73, 0x9210, 0x86bb, 0x5ffc, 0x21bb, 0x0, 0x1);
        gbc.writeMem(0x88b7, { 0xdc, 0xe5, 0x69 });
        gbc.writeMem(0xfa71, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x92, gbc.a());
        EXPECT(0x86, gbc.b());
        EXPECT(0xbb, gbc.c());
        EXPECT(0x5f, gbc.d());
        EXPECT(0xfc, gbc.e());
        EXPECT(0x21, gbc.h());
        EXPECT(0xbb, gbc.l());
        EXPECT(0xfa71, gbc.sp());
        EXPECT(0x69e5, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0x88b7));
        EXPECT(0xe5, gbc.readMem(0x88b8));
        EXPECT(0x69, gbc.readMem(0x88b9));
        EXPECT(0xba, gbc.readMem(0xfa71));
        EXPECT(0x88, gbc.readMem(0xfa72));
        // DC 0366
        gbc.setState(0x64f9, 0x94cf, 0xeb60, 0x43, 0xc757, 0xae36, 0x1, 0x0);
        gbc.writeMem(0x64f9, { 0xdc, 0xc3, 0x32 });
        gbc.step();
        EXPECT(0xeb, gbc.a());
        EXPECT(0x0, gbc.b());
        EXPECT(0x43, gbc.c());
        EXPECT(0xc7, gbc.d());
        EXPECT(0x57, gbc.e());
        EXPECT(0xae, gbc.h());
        EXPECT(0x36, gbc.l());
        EXPECT(0x94cf, gbc.sp());
        EXPECT(0x64fc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 0367
        gbc.setState(0xec0d, 0x542c, 0x77c0, 0x58a, 0x2e44, 0x5fc8, 0x0, 0x0);
        gbc.writeMem(0xec0d, { 0xdc, 0x72, 0xc5 });
        gbc.step();
        EXPECT(0x77, gbc.a());
        EXPECT(0x5, gbc.b());
        EXPECT(0x8a, gbc.c());
        EXPECT(0x2e, gbc.d());
        EXPECT(0x44, gbc.e());
        EXPECT(0x5f, gbc.h());
        EXPECT(0xc8, gbc.l());
        EXPECT(0x542c, gbc.sp());
        EXPECT(0xec10, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xec0d));
        EXPECT(0x72, gbc.readMem(0xec0e));
        EXPECT(0xc5, gbc.readMem(0xec0f));
        // DC 0368
        gbc.setState(0x4c4d, 0x7210, 0x7120, 0xdfba, 0x970f, 0xce1f, 0x1, 0x0);
        gbc.writeMem(0x4c4d, { 0xdc, 0xcc, 0x5c });
        gbc.step();
        EXPECT(0x71, gbc.a());
        EXPECT(0xdf, gbc.b());
        EXPECT(0xba, gbc.c());
        EXPECT(0x97, gbc.d());
        EXPECT(0xf, gbc.e());
        EXPECT(0xce, gbc.h());
        EXPECT(0x1f, gbc.l());
        EXPECT(0x7210, gbc.sp());
        EXPECT(0x4c50, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 0369
        gbc.setState(0x8b5d, 0xfe9c, 0xcdb0, 0x12f4, 0x7fe4, 0x9f89, 0x0, 0x0);
        gbc.writeMem(0x8b5d, { 0xdc, 0x60, 0xc5 });
        gbc.writeMem(0xfe9a, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xcd, gbc.a());
        EXPECT(0x12, gbc.b());
        EXPECT(0xf4, gbc.c());
        EXPECT(0x7f, gbc.d());
        EXPECT(0xe4, gbc.e());
        EXPECT(0x9f, gbc.h());
        EXPECT(0x89, gbc.l());
        EXPECT(0xfe9a, gbc.sp());
        EXPECT(0xc560, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0x8b5d));
        EXPECT(0x60, gbc.readMem(0x8b5e));
        EXPECT(0xc5, gbc.readMem(0x8b5f));
        EXPECT(0x60, gbc.readMem(0xfe9a));
        EXPECT(0x8b, gbc.readMem(0xfe9b));
        // DC 036A
        gbc.setState(0x8b1f, 0x6406, 0xe020, 0x9f0b, 0x1aff, 0xfb35, 0x1, 0x0);
        gbc.writeMem(0x8b1f, { 0xdc, 0xf5, 0x7f });
        gbc.step();
        EXPECT(0xe0, gbc.a());
        EXPECT(0x9f, gbc.b());
        EXPECT(0xb, gbc.c());
        EXPECT(0x1a, gbc.d());
        EXPECT(0xff, gbc.e());
        EXPECT(0xfb, gbc.h());
        EXPECT(0x35, gbc.l());
        EXPECT(0x6406, gbc.sp());
        EXPECT(0x8b22, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0x8b1f));
        EXPECT(0xf5, gbc.readMem(0x8b20));
        EXPECT(0x7f, gbc.readMem(0x8b21));
        // DC 036B
        gbc.setState(0x63ce, 0x9897, 0x1ee0, 0x4b1b, 0x4e6b, 0xb197, 0x0, 0x0);
        gbc.writeMem(0x63ce, { 0xdc, 0x5b, 0x30 });
        gbc.step();
        EXPECT(0x1e, gbc.a());
        EXPECT(0x4b, gbc.b());
        EXPECT(0x1b, gbc.c());
        EXPECT(0x4e, gbc.d());
        EXPECT(0x6b, gbc.e());
        EXPECT(0xb1, gbc.h());
        EXPECT(0x97, gbc.l());
        EXPECT(0x9897, gbc.sp());
        EXPECT(0x63d1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 036D
        gbc.setState(0x6c8e, 0xf343, 0x83f0, 0xfd64, 0xb69f, 0x6bc5, 0x0, 0x1);
        gbc.writeMem(0x6c8e, { 0xdc, 0x9e, 0x93 });
        gbc.writeMem(0xf341, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x83, gbc.a());
        EXPECT(0xfd, gbc.b());
        EXPECT(0x64, gbc.c());
        EXPECT(0xb6, gbc.d());
        EXPECT(0x9f, gbc.e());
        EXPECT(0x6b, gbc.h());
        EXPECT(0xc5, gbc.l());
        EXPECT(0xf341, gbc.sp());
        EXPECT(0x939e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x91, gbc.readMem(0xf341));
        EXPECT(0x6c, gbc.readMem(0xf342));
        // DC 036E
        gbc.setState(0x128e, 0xfb13, 0x6980, 0x7ceb, 0xf36d, 0x51b1, 0x0, 0x1);
        gbc.writeMem(0x128e, { 0xdc, 0x17, 0xd3 });
        gbc.step();
        EXPECT(0x69, gbc.a());
        EXPECT(0x7c, gbc.b());
        EXPECT(0xeb, gbc.c());
        EXPECT(0xf3, gbc.d());
        EXPECT(0x6d, gbc.e());
        EXPECT(0x51, gbc.h());
        EXPECT(0xb1, gbc.l());
        EXPECT(0xfb13, gbc.sp());
        EXPECT(0x1291, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 036F
        gbc.setState(0x6ca8, 0x417f, 0x3a20, 0x99ef, 0x667a, 0xd95c, 0x1, 0x1);
        gbc.writeMem(0x6ca8, { 0xdc, 0x88, 0x46 });
        gbc.step();
        EXPECT(0x3a, gbc.a());
        EXPECT(0x99, gbc.b());
        EXPECT(0xef, gbc.c());
        EXPECT(0x66, gbc.d());
        EXPECT(0x7a, gbc.e());
        EXPECT(0xd9, gbc.h());
        EXPECT(0x5c, gbc.l());
        EXPECT(0x417f, gbc.sp());
        EXPECT(0x6cab, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 0370
        gbc.setState(0x1b44, 0xb2b9, 0x3a10, 0xe221, 0x4a3f, 0x96ca, 0x0, 0x0);
        gbc.writeMem(0x1b44, { 0xdc, 0xfd, 0xb3 });
        gbc.writeMem(0xb2b7, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x3a, gbc.a());
        EXPECT(0xe2, gbc.b());
        EXPECT(0x21, gbc.c());
        EXPECT(0x4a, gbc.d());
        EXPECT(0x3f, gbc.e());
        EXPECT(0x96, gbc.h());
        EXPECT(0xca, gbc.l());
        EXPECT(0xb2b7, gbc.sp());
        EXPECT(0xb3fd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x47, gbc.readMem(0xb2b7));
        EXPECT(0x1b, gbc.readMem(0xb2b8));
        // DC 0371
        gbc.setState(0x2ff8, 0x8461, 0xba10, 0x614b, 0xc73f, 0xeea5, 0x0, 0x0);
        gbc.writeMem(0x2ff8, { 0xdc, 0x44, 0xf4 });
        gbc.writeMem(0x845f, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xba, gbc.a());
        EXPECT(0x61, gbc.b());
        EXPECT(0x4b, gbc.c());
        EXPECT(0xc7, gbc.d());
        EXPECT(0x3f, gbc.e());
        EXPECT(0xee, gbc.h());
        EXPECT(0xa5, gbc.l());
        EXPECT(0x845f, gbc.sp());
        EXPECT(0xf444, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xfb, gbc.readMem(0x845f));
        EXPECT(0x2f, gbc.readMem(0x8460));
        // DC 0373
        gbc.setState(0x3cc4, 0xcb11, 0x91b0, 0x2240, 0x2aac, 0x98e7, 0x1, 0x0);
        gbc.writeMem(0x3cc4, { 0xdc, 0x93, 0x67 });
        gbc.writeMem(0xcb0f, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x91, gbc.a());
        EXPECT(0x22, gbc.b());
        EXPECT(0x40, gbc.c());
        EXPECT(0x2a, gbc.d());
        EXPECT(0xac, gbc.e());
        EXPECT(0x98, gbc.h());
        EXPECT(0xe7, gbc.l());
        EXPECT(0xcb0f, gbc.sp());
        EXPECT(0x6793, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xc7, gbc.readMem(0xcb0f));
        EXPECT(0x3c, gbc.readMem(0xcb10));
        // DC 0374
        gbc.setState(0x4c69, 0x99fb, 0xbe50, 0xeefa, 0x9f3, 0xff92, 0x0, 0x0);
        gbc.writeMem(0x4c69, { 0xdc, 0x75, 0x4 });
        gbc.writeMem(0x99f9, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xbe, gbc.a());
        EXPECT(0xee, gbc.b());
        EXPECT(0xfa, gbc.c());
        EXPECT(0x9, gbc.d());
        EXPECT(0xf3, gbc.e());
        EXPECT(0xff, gbc.h());
        EXPECT(0x92, gbc.l());
        EXPECT(0x99f9, gbc.sp());
        EXPECT(0x475, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x6c, gbc.readMem(0x99f9));
        EXPECT(0x4c, gbc.readMem(0x99fa));
        // DC 0375
        gbc.setState(0xcba7, 0x41fb, 0x1520, 0x1d41, 0x7cfe, 0xc057, 0x0, 0x1);
        gbc.writeMem(0xcba7, { 0xdc, 0x5b, 0xab });
        gbc.step();
        EXPECT(0x15, gbc.a());
        EXPECT(0x1d, gbc.b());
        EXPECT(0x41, gbc.c());
        EXPECT(0x7c, gbc.d());
        EXPECT(0xfe, gbc.e());
        EXPECT(0xc0, gbc.h());
        EXPECT(0x57, gbc.l());
        EXPECT(0x41fb, gbc.sp());
        EXPECT(0xcbaa, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xcba7));
        EXPECT(0x5b, gbc.readMem(0xcba8));
        EXPECT(0xab, gbc.readMem(0xcba9));
        // DC 0376
        gbc.setState(0x6aa9, 0x9ac5, 0xed90, 0x5ad2, 0x7370, 0xd568, 0x0, 0x0);
        gbc.writeMem(0x6aa9, { 0xdc, 0xcf, 0x8d });
        gbc.writeMem(0x9ac3, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xed, gbc.a());
        EXPECT(0x5a, gbc.b());
        EXPECT(0xd2, gbc.c());
        EXPECT(0x73, gbc.d());
        EXPECT(0x70, gbc.e());
        EXPECT(0xd5, gbc.h());
        EXPECT(0x68, gbc.l());
        EXPECT(0x9ac3, gbc.sp());
        EXPECT(0x8dcf, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xac, gbc.readMem(0x9ac3));
        EXPECT(0x6a, gbc.readMem(0x9ac4));
        // DC 0377
        gbc.setState(0x6ef9, 0x809b, 0xb510, 0xfe27, 0x11ae, 0xc601, 0x1, 0x0);
        gbc.writeMem(0x6ef9, { 0xdc, 0xe9, 0x4e });
        gbc.writeMem(0x8099, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xb5, gbc.a());
        EXPECT(0xfe, gbc.b());
        EXPECT(0x27, gbc.c());
        EXPECT(0x11, gbc.d());
        EXPECT(0xae, gbc.e());
        EXPECT(0xc6, gbc.h());
        EXPECT(0x1, gbc.l());
        EXPECT(0x8099, gbc.sp());
        EXPECT(0x4ee9, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xfc, gbc.readMem(0x8099));
        EXPECT(0x6e, gbc.readMem(0x809a));
        // DC 037A
        gbc.setState(0xc3e1, 0x2fa0, 0x7240, 0x389a, 0x1d2e, 0x4d70, 0x1, 0x1);
        gbc.writeMem(0xc3e1, { 0xdc, 0x59, 0x3d });
        gbc.step();
        EXPECT(0x72, gbc.a());
        EXPECT(0x38, gbc.b());
        EXPECT(0x9a, gbc.c());
        EXPECT(0x1d, gbc.d());
        EXPECT(0x2e, gbc.e());
        EXPECT(0x4d, gbc.h());
        EXPECT(0x70, gbc.l());
        EXPECT(0x2fa0, gbc.sp());
        EXPECT(0xc3e4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xc3e1));
        EXPECT(0x59, gbc.readMem(0xc3e2));
        EXPECT(0x3d, gbc.readMem(0xc3e3));
        // DC 037B
        gbc.setState(0xebb8, 0xe406, 0x2410, 0x553a, 0x3e1c, 0x7bc3, 0x1, 0x0);
        gbc.writeMem(0xe404, { 0x0, 0x0 });
        gbc.writeMem(0xebb8, { 0xdc, 0x14, 0x1d });
        gbc.step();
        EXPECT(0x24, gbc.a());
        EXPECT(0x55, gbc.b());
        EXPECT(0x3a, gbc.c());
        EXPECT(0x3e, gbc.d());
        EXPECT(0x1c, gbc.e());
        EXPECT(0x7b, gbc.h());
        EXPECT(0xc3, gbc.l());
        EXPECT(0xe404, gbc.sp());
        EXPECT(0x1d14, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xbb, gbc.readMem(0xe404));
        EXPECT(0xeb, gbc.readMem(0xe405));
        EXPECT(0xdc, gbc.readMem(0xebb8));
        EXPECT(0x14, gbc.readMem(0xebb9));
        EXPECT(0x1d, gbc.readMem(0xebba));
        // DC 037D
        gbc.setState(0x2305, 0x87a7, 0xe320, 0x905c, 0xfa6, 0xd6f9, 0x1, 0x0);
        gbc.writeMem(0x2305, { 0xdc, 0x62, 0x92 });
        gbc.step();
        EXPECT(0xe3, gbc.a());
        EXPECT(0x90, gbc.b());
        EXPECT(0x5c, gbc.c());
        EXPECT(0xf, gbc.d());
        EXPECT(0xa6, gbc.e());
        EXPECT(0xd6, gbc.h());
        EXPECT(0xf9, gbc.l());
        EXPECT(0x87a7, gbc.sp());
        EXPECT(0x2308, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 037E
        gbc.setState(0xc49, 0x33f1, 0x9920, 0xda93, 0xfbae, 0x5567, 0x1, 0x1);
        gbc.writeMem(0xc49, { 0xdc, 0xe9, 0x70 });
        gbc.step();
        EXPECT(0x99, gbc.a());
        EXPECT(0xda, gbc.b());
        EXPECT(0x93, gbc.c());
        EXPECT(0xfb, gbc.d());
        EXPECT(0xae, gbc.e());
        EXPECT(0x55, gbc.h());
        EXPECT(0x67, gbc.l());
        EXPECT(0x33f1, gbc.sp());
        EXPECT(0xc4c, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 037F
        gbc.setState(0xedde, 0xf041, 0xf4c0, 0x2535, 0x22d8, 0x10f8, 0x1, 0x0);
        gbc.writeMem(0xedde, { 0xdc, 0x4f, 0x4 });
        gbc.step();
        EXPECT(0xf4, gbc.a());
        EXPECT(0x25, gbc.b());
        EXPECT(0x35, gbc.c());
        EXPECT(0x22, gbc.d());
        EXPECT(0xd8, gbc.e());
        EXPECT(0x10, gbc.h());
        EXPECT(0xf8, gbc.l());
        EXPECT(0xf041, gbc.sp());
        EXPECT(0xede1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xedde));
        EXPECT(0x4f, gbc.readMem(0xeddf));
        EXPECT(0x4, gbc.readMem(0xede0));
        // DC 0380
        gbc.setState(0xa602, 0xdc23, 0xf610, 0xc0df, 0x6ddb, 0xfcec, 0x1, 0x0);
        gbc.writeMem(0xa602, { 0xdc, 0xdc, 0x8f });
        gbc.writeMem(0xdc21, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xf6, gbc.a());
        EXPECT(0xc0, gbc.b());
        EXPECT(0xdf, gbc.c());
        EXPECT(0x6d, gbc.d());
        EXPECT(0xdb, gbc.e());
        EXPECT(0xfc, gbc.h());
        EXPECT(0xec, gbc.l());
        EXPECT(0xdc21, gbc.sp());
        EXPECT(0x8fdc, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xa602));
        EXPECT(0xdc, gbc.readMem(0xa603));
        EXPECT(0x8f, gbc.readMem(0xa604));
        EXPECT(0x5, gbc.readMem(0xdc21));
        EXPECT(0xa6, gbc.readMem(0xdc22));
        // DC 0382
        gbc.setState(0x321d, 0x9c84, 0xd2c0, 0x3008, 0xfa6b, 0x5c4c, 0x0, 0x1);
        gbc.writeMem(0x321d, { 0xdc, 0xb4, 0xca });
        gbc.step();
        EXPECT(0xd2, gbc.a());
        EXPECT(0x30, gbc.b());
        EXPECT(0x8, gbc.c());
        EXPECT(0xfa, gbc.d());
        EXPECT(0x6b, gbc.e());
        EXPECT(0x5c, gbc.h());
        EXPECT(0x4c, gbc.l());
        EXPECT(0x9c84, gbc.sp());
        EXPECT(0x3220, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 0384
        gbc.setState(0x2a86, 0x728d, 0xcc80, 0x7533, 0x6ad5, 0x688e, 0x1, 0x1);
        gbc.writeMem(0x2a86, { 0xdc, 0xa8, 0x84 });
        gbc.step();
        EXPECT(0xcc, gbc.a());
        EXPECT(0x75, gbc.b());
        EXPECT(0x33, gbc.c());
        EXPECT(0x6a, gbc.d());
        EXPECT(0xd5, gbc.e());
        EXPECT(0x68, gbc.h());
        EXPECT(0x8e, gbc.l());
        EXPECT(0x728d, gbc.sp());
        EXPECT(0x2a89, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 0385
        gbc.setState(0x7ad1, 0x531b, 0xb740, 0x9df0, 0x8cd6, 0x3684, 0x1, 0x1);
        gbc.writeMem(0x7ad1, { 0xdc, 0x7e, 0xb1 });
        gbc.step();
        EXPECT(0xb7, gbc.a());
        EXPECT(0x9d, gbc.b());
        EXPECT(0xf0, gbc.c());
        EXPECT(0x8c, gbc.d());
        EXPECT(0xd6, gbc.e());
        EXPECT(0x36, gbc.h());
        EXPECT(0x84, gbc.l());
        EXPECT(0x531b, gbc.sp());
        EXPECT(0x7ad4, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 0388
        gbc.setState(0x8705, 0x14c6, 0x9000, 0xfce5, 0x234, 0xf6ed, 0x1, 0x1);
        gbc.writeMem(0x8705, { 0xdc, 0x9, 0xb1 });
        gbc.step();
        EXPECT(0x90, gbc.a());
        EXPECT(0xfc, gbc.b());
        EXPECT(0xe5, gbc.c());
        EXPECT(0x2, gbc.d());
        EXPECT(0x34, gbc.e());
        EXPECT(0xf6, gbc.h());
        EXPECT(0xed, gbc.l());
        EXPECT(0x14c6, gbc.sp());
        EXPECT(0x8708, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0x8705));
        EXPECT(0x9, gbc.readMem(0x8706));
        EXPECT(0xb1, gbc.readMem(0x8707));
        // DC 0389
        gbc.setState(0x4b06, 0x84a0, 0x1ed0, 0x8194, 0xbad3, 0xa889, 0x1, 0x0);
        gbc.writeMem(0x4b06, { 0xdc, 0x43, 0xf8 });
        gbc.writeMem(0x849e, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x1e, gbc.a());
        EXPECT(0x81, gbc.b());
        EXPECT(0x94, gbc.c());
        EXPECT(0xba, gbc.d());
        EXPECT(0xd3, gbc.e());
        EXPECT(0xa8, gbc.h());
        EXPECT(0x89, gbc.l());
        EXPECT(0x849e, gbc.sp());
        EXPECT(0xf843, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x9, gbc.readMem(0x849e));
        EXPECT(0x4b, gbc.readMem(0x849f));
        // DC 038A
        gbc.setState(0xcb68, 0x991e, 0x98c0, 0xd9e8, 0xe100, 0x88b6, 0x1, 0x0);
        gbc.writeMem(0xcb68, { 0xdc, 0xfc, 0x5c });
        gbc.step();
        EXPECT(0x98, gbc.a());
        EXPECT(0xd9, gbc.b());
        EXPECT(0xe8, gbc.c());
        EXPECT(0xe1, gbc.d());
        EXPECT(0x0, gbc.e());
        EXPECT(0x88, gbc.h());
        EXPECT(0xb6, gbc.l());
        EXPECT(0x991e, gbc.sp());
        EXPECT(0xcb6b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xcb68));
        EXPECT(0xfc, gbc.readMem(0xcb69));
        EXPECT(0x5c, gbc.readMem(0xcb6a));
        // DC 038C
        gbc.setState(0x196, 0xbd57, 0xfbf0, 0x6ed1, 0x562f, 0xd027, 0x1, 0x1);
        gbc.writeMem(0x196, { 0xdc, 0xbb, 0xa7 });
        gbc.writeMem(0xbd55, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xfb, gbc.a());
        EXPECT(0x6e, gbc.b());
        EXPECT(0xd1, gbc.c());
        EXPECT(0x56, gbc.d());
        EXPECT(0x2f, gbc.e());
        EXPECT(0xd0, gbc.h());
        EXPECT(0x27, gbc.l());
        EXPECT(0xbd55, gbc.sp());
        EXPECT(0xa7bb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x99, gbc.readMem(0xbd55));
        EXPECT(0x1, gbc.readMem(0xbd56));
        // DC 038D
        gbc.setState(0x36f2, 0x9d65, 0x730, 0x4ff0, 0x1086, 0x72d8, 0x0, 0x0);
        gbc.writeMem(0x36f2, { 0xdc, 0x89, 0x6d });
        gbc.writeMem(0x9d63, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x7, gbc.a());
        EXPECT(0x4f, gbc.b());
        EXPECT(0xf0, gbc.c());
        EXPECT(0x10, gbc.d());
        EXPECT(0x86, gbc.e());
        EXPECT(0x72, gbc.h());
        EXPECT(0xd8, gbc.l());
        EXPECT(0x9d63, gbc.sp());
        EXPECT(0x6d89, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xf5, gbc.readMem(0x9d63));
        EXPECT(0x36, gbc.readMem(0x9d64));
        // DC 038E
        gbc.setState(0x72a9, 0xd648, 0xaeb0, 0x39e6, 0xb6c4, 0x82a5, 0x0, 0x1);
        gbc.writeMem(0x72a9, { 0xdc, 0x33, 0x95 });
        gbc.writeMem(0xd646, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xae, gbc.a());
        EXPECT(0x39, gbc.b());
        EXPECT(0xe6, gbc.c());
        EXPECT(0xb6, gbc.d());
        EXPECT(0xc4, gbc.e());
        EXPECT(0x82, gbc.h());
        EXPECT(0xa5, gbc.l());
        EXPECT(0xd646, gbc.sp());
        EXPECT(0x9533, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xac, gbc.readMem(0xd646));
        EXPECT(0x72, gbc.readMem(0xd647));
        // DC 038F
        gbc.setState(0x4b2, 0xe7d0, 0x45b0, 0x3aff, 0x7a3e, 0x81a8, 0x1, 0x1);
        gbc.writeMem(0x4b2, { 0xdc, 0x55, 0xc6 });
        gbc.writeMem(0xe7ce, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x45, gbc.a());
        EXPECT(0x3a, gbc.b());
        EXPECT(0xff, gbc.c());
        EXPECT(0x7a, gbc.d());
        EXPECT(0x3e, gbc.e());
        EXPECT(0x81, gbc.h());
        EXPECT(0xa8, gbc.l());
        EXPECT(0xe7ce, gbc.sp());
        EXPECT(0xc655, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xb5, gbc.readMem(0xe7ce));
        EXPECT(0x4, gbc.readMem(0xe7cf));
        // DC 0390
        gbc.setState(0xcd7b, 0x686b, 0xb560, 0x86c7, 0x68fa, 0x3d52, 0x0, 0x0);
        gbc.writeMem(0xcd7b, { 0xdc, 0x72, 0xae });
        gbc.step();
        EXPECT(0xb5, gbc.a());
        EXPECT(0x86, gbc.b());
        EXPECT(0xc7, gbc.c());
        EXPECT(0x68, gbc.d());
        EXPECT(0xfa, gbc.e());
        EXPECT(0x3d, gbc.h());
        EXPECT(0x52, gbc.l());
        EXPECT(0x686b, gbc.sp());
        EXPECT(0xcd7e, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xcd7b));
        EXPECT(0x72, gbc.readMem(0xcd7c));
        EXPECT(0xae, gbc.readMem(0xcd7d));
        // DC 0392
        gbc.setState(0xef23, 0x2af7, 0x2020, 0xf812, 0xc58d, 0x269f, 0x0, 0x0);
        gbc.writeMem(0xef23, { 0xdc, 0xa2, 0xec });
        gbc.step();
        EXPECT(0x20, gbc.a());
        EXPECT(0xf8, gbc.b());
        EXPECT(0x12, gbc.c());
        EXPECT(0xc5, gbc.d());
        EXPECT(0x8d, gbc.e());
        EXPECT(0x26, gbc.h());
        EXPECT(0x9f, gbc.l());
        EXPECT(0x2af7, gbc.sp());
        EXPECT(0xef26, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xef23));
        EXPECT(0xa2, gbc.readMem(0xef24));
        EXPECT(0xec, gbc.readMem(0xef25));
        // DC 0393
        gbc.setState(0x903d, 0x8c49, 0x7c20, 0x983e, 0xeed7, 0x2c8f, 0x0, 0x0);
        gbc.writeMem(0x903d, { 0xdc, 0x25, 0x88 });
        gbc.step();
        EXPECT(0x7c, gbc.a());
        EXPECT(0x98, gbc.b());
        EXPECT(0x3e, gbc.c());
        EXPECT(0xee, gbc.d());
        EXPECT(0xd7, gbc.e());
        EXPECT(0x2c, gbc.h());
        EXPECT(0x8f, gbc.l());
        EXPECT(0x8c49, gbc.sp());
        EXPECT(0x9040, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0x903d));
        EXPECT(0x25, gbc.readMem(0x903e));
        EXPECT(0x88, gbc.readMem(0x903f));
        // DC 0394
        gbc.setState(0xe701, 0x594b, 0x1e00, 0xdd22, 0xc453, 0xef0a, 0x0, 0x1);
        gbc.writeMem(0xe701, { 0xdc, 0x49, 0xbd });
        gbc.step();
        EXPECT(0x1e, gbc.a());
        EXPECT(0xdd, gbc.b());
        EXPECT(0x22, gbc.c());
        EXPECT(0xc4, gbc.d());
        EXPECT(0x53, gbc.e());
        EXPECT(0xef, gbc.h());
        EXPECT(0xa, gbc.l());
        EXPECT(0x594b, gbc.sp());
        EXPECT(0xe704, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xe701));
        EXPECT(0x49, gbc.readMem(0xe702));
        EXPECT(0xbd, gbc.readMem(0xe703));
        // DC 0395
        gbc.setState(0x5120, 0xdcc5, 0x1610, 0x9999, 0x2a23, 0x3bf4, 0x1, 0x0);
        gbc.writeMem(0x5120, { 0xdc, 0x4b, 0x57 });
        gbc.writeMem(0xdcc3, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x16, gbc.a());
        EXPECT(0x99, gbc.b());
        EXPECT(0x99, gbc.c());
        EXPECT(0x2a, gbc.d());
        EXPECT(0x23, gbc.e());
        EXPECT(0x3b, gbc.h());
        EXPECT(0xf4, gbc.l());
        EXPECT(0xdcc3, gbc.sp());
        EXPECT(0x574b, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x23, gbc.readMem(0xdcc3));
        EXPECT(0x51, gbc.readMem(0xdcc4));
        // DC 0398
        gbc.setState(0x4651, 0x6d79, 0xec00, 0x6782, 0x482, 0x6bb7, 0x0, 0x0);
        gbc.writeMem(0x4651, { 0xdc, 0x5d, 0x78 });
        gbc.step();
        EXPECT(0xec, gbc.a());
        EXPECT(0x67, gbc.b());
        EXPECT(0x82, gbc.c());
        EXPECT(0x4, gbc.d());
        EXPECT(0x82, gbc.e());
        EXPECT(0x6b, gbc.h());
        EXPECT(0xb7, gbc.l());
        EXPECT(0x6d79, gbc.sp());
        EXPECT(0x4654, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 0399
        gbc.setState(0x4a75, 0x628c, 0xadc0, 0xd8a0, 0x240a, 0xbcab, 0x1, 0x1);
        gbc.writeMem(0x4a75, { 0xdc, 0x67, 0x60 });
        gbc.step();
        EXPECT(0xad, gbc.a());
        EXPECT(0xd8, gbc.b());
        EXPECT(0xa0, gbc.c());
        EXPECT(0x24, gbc.d());
        EXPECT(0xa, gbc.e());
        EXPECT(0xbc, gbc.h());
        EXPECT(0xab, gbc.l());
        EXPECT(0x628c, gbc.sp());
        EXPECT(0x4a78, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 039B
        gbc.setState(0xbbb8, 0x7ee5, 0xab40, 0x9f3d, 0xc36d, 0x82c9, 0x1, 0x1);
        gbc.writeMem(0xbbb8, { 0xdc, 0xbb, 0xaf });
        gbc.step();
        EXPECT(0xab, gbc.a());
        EXPECT(0x9f, gbc.b());
        EXPECT(0x3d, gbc.c());
        EXPECT(0xc3, gbc.d());
        EXPECT(0x6d, gbc.e());
        EXPECT(0x82, gbc.h());
        EXPECT(0xc9, gbc.l());
        EXPECT(0x7ee5, gbc.sp());
        EXPECT(0xbbbb, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xbbb8));
        EXPECT(0xbb, gbc.readMem(0xbbb9));
        EXPECT(0xaf, gbc.readMem(0xbbba));
        // DC 039C
        gbc.setState(0xd575, 0xbdeb, 0xfa20, 0x2549, 0xc153, 0xbe21, 0x0, 0x0);
        gbc.writeMem(0xd575, { 0xdc, 0x29, 0xa1 });
        gbc.step();
        EXPECT(0xfa, gbc.a());
        EXPECT(0x25, gbc.b());
        EXPECT(0x49, gbc.c());
        EXPECT(0xc1, gbc.d());
        EXPECT(0x53, gbc.e());
        EXPECT(0xbe, gbc.h());
        EXPECT(0x21, gbc.l());
        EXPECT(0xbdeb, gbc.sp());
        EXPECT(0xd578, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xd575));
        EXPECT(0x29, gbc.readMem(0xd576));
        EXPECT(0xa1, gbc.readMem(0xd577));
        // DC 039D
        gbc.setState(0xa802, 0x9e7, 0x46a0, 0x3c27, 0x11d0, 0x4eed, 0x0, 0x0);
        gbc.writeMem(0xa802, { 0xdc, 0xee, 0xf1 });
        gbc.step();
        EXPECT(0x46, gbc.a());
        EXPECT(0x3c, gbc.b());
        EXPECT(0x27, gbc.c());
        EXPECT(0x11, gbc.d());
        EXPECT(0xd0, gbc.e());
        EXPECT(0x4e, gbc.h());
        EXPECT(0xed, gbc.l());
        EXPECT(0x9e7, gbc.sp());
        EXPECT(0xa805, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xa802));
        EXPECT(0xee, gbc.readMem(0xa803));
        EXPECT(0xf1, gbc.readMem(0xa804));
        // DC 039E
        gbc.setState(0x3916, 0xaf6e, 0x9de0, 0x75b6, 0x5c07, 0x159d, 0x0, 0x1);
        gbc.writeMem(0x3916, { 0xdc, 0xb3, 0x21 });
        gbc.step();
        EXPECT(0x9d, gbc.a());
        EXPECT(0x75, gbc.b());
        EXPECT(0xb6, gbc.c());
        EXPECT(0x5c, gbc.d());
        EXPECT(0x7, gbc.e());
        EXPECT(0x15, gbc.h());
        EXPECT(0x9d, gbc.l());
        EXPECT(0xaf6e, gbc.sp());
        EXPECT(0x3919, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 039F
        gbc.setState(0x6342, 0xb741, 0xa760, 0xc911, 0x42a0, 0xbdc0, 0x0, 0x1);
        gbc.writeMem(0x6342, { 0xdc, 0x8e, 0x92 });
        gbc.step();
        EXPECT(0xa7, gbc.a());
        EXPECT(0xc9, gbc.b());
        EXPECT(0x11, gbc.c());
        EXPECT(0x42, gbc.d());
        EXPECT(0xa0, gbc.e());
        EXPECT(0xbd, gbc.h());
        EXPECT(0xc0, gbc.l());
        EXPECT(0xb741, gbc.sp());
        EXPECT(0x6345, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 03A0
        gbc.setState(0xe6d6, 0x7937, 0x3660, 0x629c, 0xbb9a, 0x62db, 0x0, 0x0);
        gbc.writeMem(0xe6d6, { 0xdc, 0x63, 0x86 });
        gbc.step();
        EXPECT(0x36, gbc.a());
        EXPECT(0x62, gbc.b());
        EXPECT(0x9c, gbc.c());
        EXPECT(0xbb, gbc.d());
        EXPECT(0x9a, gbc.e());
        EXPECT(0x62, gbc.h());
        EXPECT(0xdb, gbc.l());
        EXPECT(0x7937, gbc.sp());
        EXPECT(0xe6d9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xe6d6));
        EXPECT(0x63, gbc.readMem(0xe6d7));
        EXPECT(0x86, gbc.readMem(0xe6d8));
        // DC 03A1
        gbc.setState(0xef03, 0x32e2, 0x9c20, 0x9c2a, 0x6f96, 0x6fbf, 0x1, 0x0);
        gbc.writeMem(0xef03, { 0xdc, 0x71, 0xfa });
        gbc.step();
        EXPECT(0x9c, gbc.a());
        EXPECT(0x9c, gbc.b());
        EXPECT(0x2a, gbc.c());
        EXPECT(0x6f, gbc.d());
        EXPECT(0x96, gbc.e());
        EXPECT(0x6f, gbc.h());
        EXPECT(0xbf, gbc.l());
        EXPECT(0x32e2, gbc.sp());
        EXPECT(0xef06, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xef03));
        EXPECT(0x71, gbc.readMem(0xef04));
        EXPECT(0xfa, gbc.readMem(0xef05));
        // DC 03A3
        gbc.setState(0xb5a6, 0x28fb, 0x2260, 0x46ab, 0x9740, 0x1e79, 0x0, 0x1);
        gbc.writeMem(0xb5a6, { 0xdc, 0xc7, 0x13 });
        gbc.step();
        EXPECT(0x22, gbc.a());
        EXPECT(0x46, gbc.b());
        EXPECT(0xab, gbc.c());
        EXPECT(0x97, gbc.d());
        EXPECT(0x40, gbc.e());
        EXPECT(0x1e, gbc.h());
        EXPECT(0x79, gbc.l());
        EXPECT(0x28fb, gbc.sp());
        EXPECT(0xb5a9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xb5a6));
        EXPECT(0xc7, gbc.readMem(0xb5a7));
        EXPECT(0x13, gbc.readMem(0xb5a8));
        // DC 03A4
        gbc.setState(0x4d73, 0xa3b1, 0xa120, 0xf320, 0x269c, 0xed9f, 0x0, 0x0);
        gbc.writeMem(0x4d73, { 0xdc, 0x1b, 0x89 });
        gbc.step();
        EXPECT(0xa1, gbc.a());
        EXPECT(0xf3, gbc.b());
        EXPECT(0x20, gbc.c());
        EXPECT(0x26, gbc.d());
        EXPECT(0x9c, gbc.e());
        EXPECT(0xed, gbc.h());
        EXPECT(0x9f, gbc.l());
        EXPECT(0xa3b1, gbc.sp());
        EXPECT(0x4d76, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 03A5
        gbc.setState(0xe926, 0x6f3d, 0xf340, 0xa7e6, 0x6d00, 0x9a58, 0x1, 0x0);
        gbc.writeMem(0xe926, { 0xdc, 0x5d, 0x77 });
        gbc.step();
        EXPECT(0xf3, gbc.a());
        EXPECT(0xa7, gbc.b());
        EXPECT(0xe6, gbc.c());
        EXPECT(0x6d, gbc.d());
        EXPECT(0x0, gbc.e());
        EXPECT(0x9a, gbc.h());
        EXPECT(0x58, gbc.l());
        EXPECT(0x6f3d, gbc.sp());
        EXPECT(0xe929, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xe926));
        EXPECT(0x5d, gbc.readMem(0xe927));
        EXPECT(0x77, gbc.readMem(0xe928));
        // DC 03A7
        gbc.setState(0x89f2, 0xfe73, 0xef0, 0xe56f, 0x7a7, 0x7d88, 0x0, 0x0);
        gbc.writeMem(0x89f2, { 0xdc, 0x59, 0xa7 });
        gbc.writeMem(0xfe71, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xe, gbc.a());
        EXPECT(0xe5, gbc.b());
        EXPECT(0x6f, gbc.c());
        EXPECT(0x7, gbc.d());
        EXPECT(0xa7, gbc.e());
        EXPECT(0x7d, gbc.h());
        EXPECT(0x88, gbc.l());
        EXPECT(0xfe71, gbc.sp());
        EXPECT(0xa759, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0x89f2));
        EXPECT(0x59, gbc.readMem(0x89f3));
        EXPECT(0xa7, gbc.readMem(0x89f4));
        EXPECT(0xf5, gbc.readMem(0xfe71));
        EXPECT(0x89, gbc.readMem(0xfe72));
        // DC 03A9
        gbc.setState(0xab49, 0x5b0e, 0xfea0, 0x1d1f, 0x873d, 0x5317, 0x0, 0x0);
        gbc.writeMem(0xab49, { 0xdc, 0x70, 0x77 });
        gbc.step();
        EXPECT(0xfe, gbc.a());
        EXPECT(0x1d, gbc.b());
        EXPECT(0x1f, gbc.c());
        EXPECT(0x87, gbc.d());
        EXPECT(0x3d, gbc.e());
        EXPECT(0x53, gbc.h());
        EXPECT(0x17, gbc.l());
        EXPECT(0x5b0e, gbc.sp());
        EXPECT(0xab4c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xab49));
        EXPECT(0x70, gbc.readMem(0xab4a));
        EXPECT(0x77, gbc.readMem(0xab4b));
        // DC 03AB
        gbc.setState(0x8edd, 0xf7c6, 0xb0e0, 0x16d0, 0x9eec, 0x28d, 0x0, 0x1);
        gbc.writeMem(0x8edd, { 0xdc, 0xc7, 0x99 });
        gbc.step();
        EXPECT(0xb0, gbc.a());
        EXPECT(0x16, gbc.b());
        EXPECT(0xd0, gbc.c());
        EXPECT(0x9e, gbc.d());
        EXPECT(0xec, gbc.e());
        EXPECT(0x2, gbc.h());
        EXPECT(0x8d, gbc.l());
        EXPECT(0xf7c6, gbc.sp());
        EXPECT(0x8ee0, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0x8edd));
        EXPECT(0xc7, gbc.readMem(0x8ede));
        EXPECT(0x99, gbc.readMem(0x8edf));
        // DC 03AC
        gbc.setState(0xe225, 0x9a0f, 0x69d0, 0xafb5, 0xbce0, 0x6d50, 0x0, 0x0);
        gbc.writeMem(0x9a0d, { 0x0, 0x0 });
        gbc.writeMem(0xe225, { 0xdc, 0x92, 0x8 });
        gbc.step();
        EXPECT(0x69, gbc.a());
        EXPECT(0xaf, gbc.b());
        EXPECT(0xb5, gbc.c());
        EXPECT(0xbc, gbc.d());
        EXPECT(0xe0, gbc.e());
        EXPECT(0x6d, gbc.h());
        EXPECT(0x50, gbc.l());
        EXPECT(0x9a0d, gbc.sp());
        EXPECT(0x892, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x28, gbc.readMem(0x9a0d));
        EXPECT(0xe2, gbc.readMem(0x9a0e));
        EXPECT(0xdc, gbc.readMem(0xe225));
        EXPECT(0x92, gbc.readMem(0xe226));
        EXPECT(0x8, gbc.readMem(0xe227));
        // DC 03AD
        gbc.setState(0x1b13, 0xfe01, 0xa060, 0xbed6, 0xbd07, 0xe216, 0x1, 0x1);
        gbc.writeMem(0x1b13, { 0xdc, 0xd9, 0xfa });
        gbc.step();
        EXPECT(0xa0, gbc.a());
        EXPECT(0xbe, gbc.b());
        EXPECT(0xd6, gbc.c());
        EXPECT(0xbd, gbc.d());
        EXPECT(0x7, gbc.e());
        EXPECT(0xe2, gbc.h());
        EXPECT(0x16, gbc.l());
        EXPECT(0xfe01, gbc.sp());
        EXPECT(0x1b16, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 03AE
        gbc.setState(0x6a5d, 0x1aa5, 0x9a00, 0x53ed, 0x32ac, 0x4b00, 0x1, 0x1);
        gbc.writeMem(0x6a5d, { 0xdc, 0xbf, 0x30 });
        gbc.step();
        EXPECT(0x9a, gbc.a());
        EXPECT(0x53, gbc.b());
        EXPECT(0xed, gbc.c());
        EXPECT(0x32, gbc.d());
        EXPECT(0xac, gbc.e());
        EXPECT(0x4b, gbc.h());
        EXPECT(0x0, gbc.l());
        EXPECT(0x1aa5, gbc.sp());
        EXPECT(0x6a60, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 03B0
        gbc.setState(0x9c3a, 0x2713, 0xda80, 0x1647, 0x835, 0xbf73, 0x1, 0x0);
        gbc.writeMem(0x9c3a, { 0xdc, 0x99, 0x5c });
        gbc.step();
        EXPECT(0xda, gbc.a());
        EXPECT(0x16, gbc.b());
        EXPECT(0x47, gbc.c());
        EXPECT(0x8, gbc.d());
        EXPECT(0x35, gbc.e());
        EXPECT(0xbf, gbc.h());
        EXPECT(0x73, gbc.l());
        EXPECT(0x2713, gbc.sp());
        EXPECT(0x9c3d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0x9c3a));
        EXPECT(0x99, gbc.readMem(0x9c3b));
        EXPECT(0x5c, gbc.readMem(0x9c3c));
        // DC 03B1
        gbc.setState(0xd4e9, 0x6752, 0x9980, 0x9b7e, 0xb1cc, 0xe9bf, 0x1, 0x1);
        gbc.writeMem(0xd4e9, { 0xdc, 0x78, 0xa2 });
        gbc.step();
        EXPECT(0x99, gbc.a());
        EXPECT(0x9b, gbc.b());
        EXPECT(0x7e, gbc.c());
        EXPECT(0xb1, gbc.d());
        EXPECT(0xcc, gbc.e());
        EXPECT(0xe9, gbc.h());
        EXPECT(0xbf, gbc.l());
        EXPECT(0x6752, gbc.sp());
        EXPECT(0xd4ec, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xd4e9));
        EXPECT(0x78, gbc.readMem(0xd4ea));
        EXPECT(0xa2, gbc.readMem(0xd4eb));
        // DC 03B2
        gbc.setState(0xd2e7, 0xe7b, 0x3e00, 0xa07f, 0x6055, 0x9370, 0x1, 0x1);
        gbc.writeMem(0xd2e7, { 0xdc, 0x5a, 0x9d });
        gbc.step();
        EXPECT(0x3e, gbc.a());
        EXPECT(0xa0, gbc.b());
        EXPECT(0x7f, gbc.c());
        EXPECT(0x60, gbc.d());
        EXPECT(0x55, gbc.e());
        EXPECT(0x93, gbc.h());
        EXPECT(0x70, gbc.l());
        EXPECT(0xe7b, gbc.sp());
        EXPECT(0xd2ea, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xd2e7));
        EXPECT(0x5a, gbc.readMem(0xd2e8));
        EXPECT(0x9d, gbc.readMem(0xd2e9));
        // DC 03B3
        gbc.setState(0x9b99, 0x5bd5, 0x5280, 0x2f75, 0xe07d, 0x5ad3, 0x0, 0x0);
        gbc.writeMem(0x9b99, { 0xdc, 0x50, 0x3d });
        gbc.step();
        EXPECT(0x52, gbc.a());
        EXPECT(0x2f, gbc.b());
        EXPECT(0x75, gbc.c());
        EXPECT(0xe0, gbc.d());
        EXPECT(0x7d, gbc.e());
        EXPECT(0x5a, gbc.h());
        EXPECT(0xd3, gbc.l());
        EXPECT(0x5bd5, gbc.sp());
        EXPECT(0x9b9c, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0x9b99));
        EXPECT(0x50, gbc.readMem(0x9b9a));
        EXPECT(0x3d, gbc.readMem(0x9b9b));
        // DC 03B5
        gbc.setState(0xa1d3, 0x29dc, 0x10e0, 0x967b, 0x6f67, 0xd01c, 0x1, 0x1);
        gbc.writeMem(0xa1d3, { 0xdc, 0x6e, 0xcd });
        gbc.step();
        EXPECT(0x10, gbc.a());
        EXPECT(0x96, gbc.b());
        EXPECT(0x7b, gbc.c());
        EXPECT(0x6f, gbc.d());
        EXPECT(0x67, gbc.e());
        EXPECT(0xd0, gbc.h());
        EXPECT(0x1c, gbc.l());
        EXPECT(0x29dc, gbc.sp());
        EXPECT(0xa1d6, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xa1d3));
        EXPECT(0x6e, gbc.readMem(0xa1d4));
        EXPECT(0xcd, gbc.readMem(0xa1d5));
        // DC 03B6
        gbc.setState(0x9551, 0x90e8, 0x3100, 0x4b76, 0xd283, 0xa2ea, 0x1, 0x0);
        gbc.writeMem(0x9551, { 0xdc, 0x29, 0xb6 });
        gbc.step();
        EXPECT(0x31, gbc.a());
        EXPECT(0x4b, gbc.b());
        EXPECT(0x76, gbc.c());
        EXPECT(0xd2, gbc.d());
        EXPECT(0x83, gbc.e());
        EXPECT(0xa2, gbc.h());
        EXPECT(0xea, gbc.l());
        EXPECT(0x90e8, gbc.sp());
        EXPECT(0x9554, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0x9551));
        EXPECT(0x29, gbc.readMem(0x9552));
        EXPECT(0xb6, gbc.readMem(0x9553));
        // DC 03B8
        gbc.setState(0xfb, 0xa290, 0x4be0, 0x50c8, 0x3211, 0xe4b5, 0x0, 0x0);
        gbc.writeMem(0xfb, { 0xdc, 0xa, 0x46 });
        gbc.step();
        EXPECT(0x4b, gbc.a());
        EXPECT(0x50, gbc.b());
        EXPECT(0xc8, gbc.c());
        EXPECT(0x32, gbc.d());
        EXPECT(0x11, gbc.e());
        EXPECT(0xe4, gbc.h());
        EXPECT(0xb5, gbc.l());
        EXPECT(0xa290, gbc.sp());
        EXPECT(0xfe, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 03B9
        gbc.setState(0x5e16, 0x74da, 0xcde0, 0xb248, 0x8bf9, 0xd3a1, 0x1, 0x1);
        gbc.writeMem(0x5e16, { 0xdc, 0x2b, 0x23 });
        gbc.step();
        EXPECT(0xcd, gbc.a());
        EXPECT(0xb2, gbc.b());
        EXPECT(0x48, gbc.c());
        EXPECT(0x8b, gbc.d());
        EXPECT(0xf9, gbc.e());
        EXPECT(0xd3, gbc.h());
        EXPECT(0xa1, gbc.l());
        EXPECT(0x74da, gbc.sp());
        EXPECT(0x5e19, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 03BA
        gbc.setState(0xbbef, 0x86ec, 0x4db0, 0x2ef9, 0x91fc, 0x8620, 0x0, 0x1);
        gbc.writeMem(0x86ea, { 0x0, 0x0 });
        gbc.writeMem(0xbbef, { 0xdc, 0x76, 0x5a });
        gbc.step();
        EXPECT(0x4d, gbc.a());
        EXPECT(0x2e, gbc.b());
        EXPECT(0xf9, gbc.c());
        EXPECT(0x91, gbc.d());
        EXPECT(0xfc, gbc.e());
        EXPECT(0x86, gbc.h());
        EXPECT(0x20, gbc.l());
        EXPECT(0x86ea, gbc.sp());
        EXPECT(0x5a76, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xf2, gbc.readMem(0x86ea));
        EXPECT(0xbb, gbc.readMem(0x86eb));
        EXPECT(0xdc, gbc.readMem(0xbbef));
        EXPECT(0x76, gbc.readMem(0xbbf0));
        EXPECT(0x5a, gbc.readMem(0xbbf1));
        // DC 03BB
        gbc.setState(0xde1c, 0x32a3, 0x6ea0, 0x5f5c, 0xa8eb, 0xdabf, 0x1, 0x0);
        gbc.writeMem(0xde1c, { 0xdc, 0x9b, 0x67 });
        gbc.step();
        EXPECT(0x6e, gbc.a());
        EXPECT(0x5f, gbc.b());
        EXPECT(0x5c, gbc.c());
        EXPECT(0xa8, gbc.d());
        EXPECT(0xeb, gbc.e());
        EXPECT(0xda, gbc.h());
        EXPECT(0xbf, gbc.l());
        EXPECT(0x32a3, gbc.sp());
        EXPECT(0xde1f, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xde1c));
        EXPECT(0x9b, gbc.readMem(0xde1d));
        EXPECT(0x67, gbc.readMem(0xde1e));
        // DC 03BC
        gbc.setState(0x7d66, 0x4884, 0x7c40, 0x9d51, 0x93ce, 0x6e86, 0x1, 0x0);
        gbc.writeMem(0x7d66, { 0xdc, 0xa4, 0xb });
        gbc.step();
        EXPECT(0x7c, gbc.a());
        EXPECT(0x9d, gbc.b());
        EXPECT(0x51, gbc.c());
        EXPECT(0x93, gbc.d());
        EXPECT(0xce, gbc.e());
        EXPECT(0x6e, gbc.h());
        EXPECT(0x86, gbc.l());
        EXPECT(0x4884, gbc.sp());
        EXPECT(0x7d69, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 03BE
        gbc.setState(0xc775, 0x7174, 0x2900, 0x6ee, 0x3cca, 0x5a1b, 0x1, 0x0);
        gbc.writeMem(0xc775, { 0xdc, 0x2d, 0x3d });
        gbc.step();
        EXPECT(0x29, gbc.a());
        EXPECT(0x6, gbc.b());
        EXPECT(0xee, gbc.c());
        EXPECT(0x3c, gbc.d());
        EXPECT(0xca, gbc.e());
        EXPECT(0x5a, gbc.h());
        EXPECT(0x1b, gbc.l());
        EXPECT(0x7174, gbc.sp());
        EXPECT(0xc778, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xc775));
        EXPECT(0x2d, gbc.readMem(0xc776));
        EXPECT(0x3d, gbc.readMem(0xc777));
        // DC 03C0
        gbc.setState(0xee1a, 0x29d, 0xecc0, 0x82e9, 0xc566, 0xa664, 0x0, 0x1);
        gbc.writeMem(0xee1a, { 0xdc, 0x20, 0x85 });
        gbc.step();
        EXPECT(0xec, gbc.a());
        EXPECT(0x82, gbc.b());
        EXPECT(0xe9, gbc.c());
        EXPECT(0xc5, gbc.d());
        EXPECT(0x66, gbc.e());
        EXPECT(0xa6, gbc.h());
        EXPECT(0x64, gbc.l());
        EXPECT(0x29d, gbc.sp());
        EXPECT(0xee1d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xee1a));
        EXPECT(0x20, gbc.readMem(0xee1b));
        EXPECT(0x85, gbc.readMem(0xee1c));
        // DC 03C5
        gbc.setState(0x5a45, 0xf7e6, 0xaa50, 0x9462, 0x8b7c, 0xb6f1, 0x0, 0x0);
        gbc.writeMem(0x5a45, { 0xdc, 0xb8, 0x6d });
        gbc.writeMem(0xf7e4, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xaa, gbc.a());
        EXPECT(0x94, gbc.b());
        EXPECT(0x62, gbc.c());
        EXPECT(0x8b, gbc.d());
        EXPECT(0x7c, gbc.e());
        EXPECT(0xb6, gbc.h());
        EXPECT(0xf1, gbc.l());
        EXPECT(0xf7e4, gbc.sp());
        EXPECT(0x6db8, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x48, gbc.readMem(0xf7e4));
        EXPECT(0x5a, gbc.readMem(0xf7e5));
        // DC 03C6
        gbc.setState(0x7bde, 0x3ae6, 0x8ce0, 0x4c95, 0x606c, 0x80f7, 0x1, 0x0);
        gbc.writeMem(0x7bde, { 0xdc, 0x5b, 0xa9 });
        gbc.step();
        EXPECT(0x8c, gbc.a());
        EXPECT(0x4c, gbc.b());
        EXPECT(0x95, gbc.c());
        EXPECT(0x60, gbc.d());
        EXPECT(0x6c, gbc.e());
        EXPECT(0x80, gbc.h());
        EXPECT(0xf7, gbc.l());
        EXPECT(0x3ae6, gbc.sp());
        EXPECT(0x7be1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 03C7
        gbc.setState(0xc50a, 0x9e79, 0xa200, 0x6859, 0x34c, 0xd664, 0x1, 0x0);
        gbc.writeMem(0xc50a, { 0xdc, 0x93, 0xbc });
        gbc.step();
        EXPECT(0xa2, gbc.a());
        EXPECT(0x68, gbc.b());
        EXPECT(0x59, gbc.c());
        EXPECT(0x3, gbc.d());
        EXPECT(0x4c, gbc.e());
        EXPECT(0xd6, gbc.h());
        EXPECT(0x64, gbc.l());
        EXPECT(0x9e79, gbc.sp());
        EXPECT(0xc50d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xc50a));
        EXPECT(0x93, gbc.readMem(0xc50b));
        EXPECT(0xbc, gbc.readMem(0xc50c));
        // DC 03C8
        gbc.setState(0x776c, 0x6498, 0x1020, 0xd0d1, 0x14fe, 0x59b8, 0x0, 0x1);
        gbc.writeMem(0x776c, { 0xdc, 0xa1, 0x6c });
        gbc.step();
        EXPECT(0x10, gbc.a());
        EXPECT(0xd0, gbc.b());
        EXPECT(0xd1, gbc.c());
        EXPECT(0x14, gbc.d());
        EXPECT(0xfe, gbc.e());
        EXPECT(0x59, gbc.h());
        EXPECT(0xb8, gbc.l());
        EXPECT(0x6498, gbc.sp());
        EXPECT(0x776f, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 03C9
        gbc.setState(0x52fa, 0x4408, 0x8880, 0xa8a5, 0xc6b5, 0x54e5, 0x1, 0x0);
        gbc.writeMem(0x52fa, { 0xdc, 0xcd, 0x82 });
        gbc.step();
        EXPECT(0x88, gbc.a());
        EXPECT(0xa8, gbc.b());
        EXPECT(0xa5, gbc.c());
        EXPECT(0xc6, gbc.d());
        EXPECT(0xb5, gbc.e());
        EXPECT(0x54, gbc.h());
        EXPECT(0xe5, gbc.l());
        EXPECT(0x4408, gbc.sp());
        EXPECT(0x52fd, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 03CA
        gbc.setState(0xe59e, 0x9d69, 0x8a80, 0x4c77, 0x3a6e, 0xd4ac, 0x0, 0x0);
        gbc.writeMem(0xe59e, { 0xdc, 0x1a, 0x84 });
        gbc.step();
        EXPECT(0x8a, gbc.a());
        EXPECT(0x4c, gbc.b());
        EXPECT(0x77, gbc.c());
        EXPECT(0x3a, gbc.d());
        EXPECT(0x6e, gbc.e());
        EXPECT(0xd4, gbc.h());
        EXPECT(0xac, gbc.l());
        EXPECT(0x9d69, gbc.sp());
        EXPECT(0xe5a1, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xe59e));
        EXPECT(0x1a, gbc.readMem(0xe59f));
        EXPECT(0x84, gbc.readMem(0xe5a0));
        // DC 03CD
        gbc.setState(0x2efa, 0x6cd9, 0x5c60, 0x9b68, 0x17d5, 0xedfa, 0x0, 0x0);
        gbc.writeMem(0x2efa, { 0xdc, 0x96, 0x4c });
        gbc.step();
        EXPECT(0x5c, gbc.a());
        EXPECT(0x9b, gbc.b());
        EXPECT(0x68, gbc.c());
        EXPECT(0x17, gbc.d());
        EXPECT(0xd5, gbc.e());
        EXPECT(0xed, gbc.h());
        EXPECT(0xfa, gbc.l());
        EXPECT(0x6cd9, gbc.sp());
        EXPECT(0x2efd, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 03CE
        gbc.setState(0x92be, 0xeaea, 0xcc60, 0x4455, 0x712e, 0x37af, 0x1, 0x0);
        gbc.writeMem(0x92be, { 0xdc, 0xd6, 0x2a });
        gbc.step();
        EXPECT(0xcc, gbc.a());
        EXPECT(0x44, gbc.b());
        EXPECT(0x55, gbc.c());
        EXPECT(0x71, gbc.d());
        EXPECT(0x2e, gbc.e());
        EXPECT(0x37, gbc.h());
        EXPECT(0xaf, gbc.l());
        EXPECT(0xeaea, gbc.sp());
        EXPECT(0x92c1, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0x92be));
        EXPECT(0xd6, gbc.readMem(0x92bf));
        EXPECT(0x2a, gbc.readMem(0x92c0));
        // DC 03CF
        gbc.setState(0x3918, 0xbb47, 0xf630, 0x4dab, 0x9e47, 0xe5a0, 0x0, 0x0);
        gbc.writeMem(0x3918, { 0xdc, 0x62, 0xb4 });
        gbc.writeMem(0xbb45, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0xf6, gbc.a());
        EXPECT(0x4d, gbc.b());
        EXPECT(0xab, gbc.c());
        EXPECT(0x9e, gbc.d());
        EXPECT(0x47, gbc.e());
        EXPECT(0xe5, gbc.h());
        EXPECT(0xa0, gbc.l());
        EXPECT(0xbb45, gbc.sp());
        EXPECT(0xb462, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x1b, gbc.readMem(0xbb45));
        EXPECT(0x39, gbc.readMem(0xbb46));
        // DC 03D0
        gbc.setState(0x1222, 0x9512, 0x5480, 0x9efb, 0x34b, 0xb4c6, 0x0, 0x0);
        gbc.writeMem(0x1222, { 0xdc, 0x46, 0x4c });
        gbc.step();
        EXPECT(0x54, gbc.a());
        EXPECT(0x9e, gbc.b());
        EXPECT(0xfb, gbc.c());
        EXPECT(0x3, gbc.d());
        EXPECT(0x4b, gbc.e());
        EXPECT(0xb4, gbc.h());
        EXPECT(0xc6, gbc.l());
        EXPECT(0x9512, gbc.sp());
        EXPECT(0x1225, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 03D1
        gbc.setState(0x1392, 0xd253, 0x4dd0, 0x67f2, 0x7dcc, 0x3c3c, 0x1, 0x1);
        gbc.writeMem(0x1392, { 0xdc, 0x73, 0x5b });
        gbc.writeMem(0xd251, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x4d, gbc.a());
        EXPECT(0x67, gbc.b());
        EXPECT(0xf2, gbc.c());
        EXPECT(0x7d, gbc.d());
        EXPECT(0xcc, gbc.e());
        EXPECT(0x3c, gbc.h());
        EXPECT(0x3c, gbc.l());
        EXPECT(0xd251, gbc.sp());
        EXPECT(0x5b73, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x95, gbc.readMem(0xd251));
        EXPECT(0x13, gbc.readMem(0xd252));
        // DC 03D2
        gbc.setState(0x7ea7, 0x2cad, 0x5820, 0x4d6c, 0x1ef0, 0xdfce, 0x1, 0x1);
        gbc.writeMem(0x7ea7, { 0xdc, 0x96, 0x3c });
        gbc.step();
        EXPECT(0x58, gbc.a());
        EXPECT(0x4d, gbc.b());
        EXPECT(0x6c, gbc.c());
        EXPECT(0x1e, gbc.d());
        EXPECT(0xf0, gbc.e());
        EXPECT(0xdf, gbc.h());
        EXPECT(0xce, gbc.l());
        EXPECT(0x2cad, gbc.sp());
        EXPECT(0x7eaa, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 03D3
        gbc.setState(0x761a, 0x1cf4, 0xb1c0, 0x3131, 0x6df0, 0x4e2, 0x1, 0x1);
        gbc.writeMem(0x761a, { 0xdc, 0x22, 0xe1 });
        gbc.step();
        EXPECT(0xb1, gbc.a());
        EXPECT(0x31, gbc.b());
        EXPECT(0x31, gbc.c());
        EXPECT(0x6d, gbc.d());
        EXPECT(0xf0, gbc.e());
        EXPECT(0x4, gbc.h());
        EXPECT(0xe2, gbc.l());
        EXPECT(0x1cf4, gbc.sp());
        EXPECT(0x761d, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 03D5
        gbc.setState(0x8c7, 0x1140, 0xcda0, 0x1b65, 0xabe3, 0x4e62, 0x0, 0x0);
        gbc.writeMem(0x8c7, { 0xdc, 0x96, 0x97 });
        gbc.step();
        EXPECT(0xcd, gbc.a());
        EXPECT(0x1b, gbc.b());
        EXPECT(0x65, gbc.c());
        EXPECT(0xab, gbc.d());
        EXPECT(0xe3, gbc.e());
        EXPECT(0x4e, gbc.h());
        EXPECT(0x62, gbc.l());
        EXPECT(0x1140, gbc.sp());
        EXPECT(0x8ca, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 03D7
        gbc.setState(0xba70, 0xe390, 0x1630, 0x9df5, 0xa2ac, 0xf5ad, 0x0, 0x1);
        gbc.writeMem(0xba70, { 0xdc, 0xa9, 0xcc });
        gbc.writeMem(0xe38e, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x16, gbc.a());
        EXPECT(0x9d, gbc.b());
        EXPECT(0xf5, gbc.c());
        EXPECT(0xa2, gbc.d());
        EXPECT(0xac, gbc.e());
        EXPECT(0xf5, gbc.h());
        EXPECT(0xad, gbc.l());
        EXPECT(0xe38e, gbc.sp());
        EXPECT(0xcca9, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xba70));
        EXPECT(0xa9, gbc.readMem(0xba71));
        EXPECT(0xcc, gbc.readMem(0xba72));
        EXPECT(0x73, gbc.readMem(0xe38e));
        EXPECT(0xba, gbc.readMem(0xe38f));
        // DC 03D8
        gbc.setState(0x131d, 0xcda3, 0xa6e0, 0xf0c9, 0x41ad, 0x6976, 0x0, 0x0);
        gbc.writeMem(0x131d, { 0xdc, 0x70, 0x90 });
        gbc.step();
        EXPECT(0xa6, gbc.a());
        EXPECT(0xf0, gbc.b());
        EXPECT(0xc9, gbc.c());
        EXPECT(0x41, gbc.d());
        EXPECT(0xad, gbc.e());
        EXPECT(0x69, gbc.h());
        EXPECT(0x76, gbc.l());
        EXPECT(0xcda3, gbc.sp());
        EXPECT(0x1320, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 03DA
        gbc.setState(0x7c8a, 0xe6e8, 0x4de0, 0x6c6, 0x6dea, 0xae4d, 0x0, 0x1);
        gbc.writeMem(0x7c8a, { 0xdc, 0x7e, 0x55 });
        gbc.step();
        EXPECT(0x4d, gbc.a());
        EXPECT(0x6, gbc.b());
        EXPECT(0xc6, gbc.c());
        EXPECT(0x6d, gbc.d());
        EXPECT(0xea, gbc.e());
        EXPECT(0xae, gbc.h());
        EXPECT(0x4d, gbc.l());
        EXPECT(0xe6e8, gbc.sp());
        EXPECT(0x7c8d, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 03DB
        gbc.setState(0x8cd8, 0x6895, 0x9e20, 0x60a2, 0x9c14, 0x3e9c, 0x0, 0x1);
        gbc.writeMem(0x8cd8, { 0xdc, 0xad, 0x32 });
        gbc.step();
        EXPECT(0x9e, gbc.a());
        EXPECT(0x60, gbc.b());
        EXPECT(0xa2, gbc.c());
        EXPECT(0x9c, gbc.d());
        EXPECT(0x14, gbc.e());
        EXPECT(0x3e, gbc.h());
        EXPECT(0x9c, gbc.l());
        EXPECT(0x6895, gbc.sp());
        EXPECT(0x8cdb, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0x8cd8));
        EXPECT(0xad, gbc.readMem(0x8cd9));
        EXPECT(0x32, gbc.readMem(0x8cda));
        // DC 03DD
        gbc.setState(0xb4e7, 0xdb6, 0x9720, 0x9fd3, 0xc102, 0xdce7, 0x1, 0x0);
        gbc.writeMem(0xb4e7, { 0xdc, 0x9c, 0x89 });
        gbc.step();
        EXPECT(0x97, gbc.a());
        EXPECT(0x9f, gbc.b());
        EXPECT(0xd3, gbc.c());
        EXPECT(0xc1, gbc.d());
        EXPECT(0x2, gbc.e());
        EXPECT(0xdc, gbc.h());
        EXPECT(0xe7, gbc.l());
        EXPECT(0xdb6, gbc.sp());
        EXPECT(0xb4ea, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xb4e7));
        EXPECT(0x9c, gbc.readMem(0xb4e8));
        EXPECT(0x89, gbc.readMem(0xb4e9));
        // DC 03DE
        gbc.setState(0x78c3, 0x9c01, 0x510, 0x8828, 0x3fc7, 0x7a11, 0x0, 0x1);
        gbc.writeMem(0x78c3, { 0xdc, 0x9a, 0xb2 });
        gbc.writeMem(0x9bff, { 0x0, 0x0 });
        gbc.step();
        EXPECT(0x5, gbc.a());
        EXPECT(0x88, gbc.b());
        EXPECT(0x28, gbc.c());
        EXPECT(0x3f, gbc.d());
        EXPECT(0xc7, gbc.e());
        EXPECT(0x7a, gbc.h());
        EXPECT(0x11, gbc.l());
        EXPECT(0x9bff, gbc.sp());
        EXPECT(0xb29a, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0xc6, gbc.readMem(0x9bff));
        EXPECT(0x78, gbc.readMem(0x9c00));
        // DC 03DF
        gbc.setState(0xe227, 0x10f6, 0xe880, 0x1c61, 0xd87e, 0x475a, 0x1, 0x1);
        gbc.writeMem(0xe227, { 0xdc, 0xdf, 0x82 });
        gbc.step();
        EXPECT(0xe8, gbc.a());
        EXPECT(0x1c, gbc.b());
        EXPECT(0x61, gbc.c());
        EXPECT(0xd8, gbc.d());
        EXPECT(0x7e, gbc.e());
        EXPECT(0x47, gbc.h());
        EXPECT(0x5a, gbc.l());
        EXPECT(0x10f6, gbc.sp());
        EXPECT(0xe22a, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xe227));
        EXPECT(0xdf, gbc.readMem(0xe228));
        EXPECT(0x82, gbc.readMem(0xe229));
        // DC 03E0
        gbc.setState(0xc86, 0xf0e0, 0x8ee0, 0xe907, 0x75d5, 0x4e7c, 0x1, 0x0);
        gbc.writeMem(0xc86, { 0xdc, 0x62, 0x7e });
        gbc.step();
        EXPECT(0x8e, gbc.a());
        EXPECT(0xe9, gbc.b());
        EXPECT(0x7, gbc.c());
        EXPECT(0x75, gbc.d());
        EXPECT(0xd5, gbc.e());
        EXPECT(0x4e, gbc.h());
        EXPECT(0x7c, gbc.l());
        EXPECT(0xf0e0, gbc.sp());
        EXPECT(0xc89, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(true, gbc.flagH());
        EXPECT(false, gbc.flagC());
        // DC 03E2
        gbc.setState(0xc90d, 0x9a80, 0x490, 0x4e, 0x39e, 0x12f6, 0x1, 0x0);
        gbc.writeMem(0x9a7e, { 0x0, 0x0 });
        gbc.writeMem(0xc90d, { 0xdc, 0x13, 0xc2 });
        gbc.step();
        EXPECT(0x4, gbc.a());
        EXPECT(0x0, gbc.b());
        EXPECT(0x4e, gbc.c());
        EXPECT(0x3, gbc.d());
        EXPECT(0x9e, gbc.e());
        EXPECT(0x12, gbc.h());
        EXPECT(0xf6, gbc.l());
        EXPECT(0x9a7e, gbc.sp());
        EXPECT(0xc213, gbc.pc());
        EXPECT(0x1, gbc.ime());
        EXPECT(true, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(true, gbc.flagC());
        EXPECT(0x10, gbc.readMem(0x9a7e));
        EXPECT(0xc9, gbc.readMem(0x9a7f));
        EXPECT(0xdc, gbc.readMem(0xc90d));
        EXPECT(0x13, gbc.readMem(0xc90e));
        EXPECT(0xc2, gbc.readMem(0xc90f));
        // DC 03E6
        gbc.setState(0xe230, 0xd6f9, 0x1f00, 0xb472, 0x610, 0xd066, 0x0, 0x1);
        gbc.writeMem(0xe230, { 0xdc, 0xbe, 0x2 });
        gbc.step();
        EXPECT(0x1f, gbc.a());
        EXPECT(0xb4, gbc.b());
        EXPECT(0x72, gbc.c());
        EXPECT(0x6, gbc.d());
        EXPECT(0x10, gbc.e());
        EXPECT(0xd0, gbc.h());
        EXPECT(0x66, gbc.l());
        EXPECT(0xd6f9, gbc.sp());
        EXPECT(0xe233, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(false, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0xe230));
        EXPECT(0xbe, gbc.readMem(0xe231));
        EXPECT(0x2, gbc.readMem(0xe232));
        // DC 03E7
        gbc.setState(0x8251, 0xc6b, 0x440, 0x8a9d, 0xe693, 0x2b49, 0x0, 0x1);
        gbc.writeMem(0x8251, { 0xdc, 0xb5, 0xbb });
        gbc.step();
        EXPECT(0x4, gbc.a());
        EXPECT(0x8a, gbc.b());
        EXPECT(0x9d, gbc.c());
        EXPECT(0xe6, gbc.d());
        EXPECT(0x93, gbc.e());
        EXPECT(0x2b, gbc.h());
        EXPECT(0x49, gbc.l());
        EXPECT(0xc6b, gbc.sp());
        EXPECT(0x8254, gbc.pc());
        EXPECT(0x0, gbc.ime());
        EXPECT(false, gbc.flagZ());
        EXPECT(true, gbc.flagN());
        EXPECT(false, gbc.flagH());
        EXPECT(false, gbc.flagC());
        EXPECT(0xdc, gbc.readMem(0x8251));
        EXPECT(0xb5, gbc.readMem(0x8252));
        EXPECT(0xbb, gbc.readMem(0x8253));
    }
