; SD Card SPI driver
; 
; For future compatibility the SD card is connected so that the pins correspond to what is required for the SDIO mode controller via the PIO. But this means that we can't use the hardware SPI for the simpler SPI protocol. This PIO program should provide a programmable IO replacement.
; 
; The SD card uses SPI mode 0, (CPHA = 0, CPOL = 0), which means that 

.program sd_spi
.side_set 1
   
   out pins, 1 side 0; shift when clock goes down (or is down)
   in pins, 1  side 1; latch when clock is up
   
% c-sdk {

#include "rckid/rckid.h"

#define RCKID_SD_SPI_SPEED_MULTIPLIER 2

inline void sd_spi_program_init(PIO pio, uint sm, uint offset, uint misoPin, uint mosiPin, uint clkPin) {

    // for better signal integrity, enable fast slew rate for miso & mosi pins and increase drive strength to 8mA (from the default 4). Those settings enable 20MHz SPI speed when talking to the card
    gpio_set_slew_rate(clkPin, GPIO_SLEW_RATE_FAST);
    gpio_set_drive_strength(clkPin, GPIO_DRIVE_STRENGTH_8MA);
    gpio_set_slew_rate(mosiPin, GPIO_SLEW_RATE_FAST);
    gpio_set_drive_strength(mosiPin, GPIO_DRIVE_STRENGTH_8MA);


    // clk pin is output (and will be sideset)
    pio_gpio_init(pio, clkPin);
    pio_sm_set_consecutive_pindirs(pio, sm, clkPin, 1, true);
    // mosi pin is normal output
    pio_gpio_init(pio, mosiPin);
    pio_sm_set_consecutive_pindirs(pio, sm, mosiPin, 1, true);
    // miso pin is normal input
    pio_gpio_init(pio, misoPin);
    pio_sm_set_consecutive_pindirs(pio, sm, misoPin, 1, false);

    pio_sm_config c = sd_spi_program_get_default_config(offset);
    sm_config_set_sideset_pins(&c, clkPin);
    sm_config_set_out_pins(&c, mosiPin, 1);
    sm_config_set_in_pins(&c, misoPin);

    sm_config_set_out_shift(&c, false, true, 8);
    sm_config_set_in_shift(&c, false, true, 8);

    hw_set_bits(&pio->input_sync_bypass, 1u << (misoPin - 16));

    pio_sm_init(pio, sm, offset, &c);
}

%}
