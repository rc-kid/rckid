; ST7789 continuous driver for RGB colors (565)
; 
; The simplest of the programs that simply stores the bits as they arrive in the pixels. However, since the data lanes are reversed on the device (and I do not want to change them in hardware as it would create ugly interconnects that would be visible, and hence susceptible to mechanical wear from the back of the pcb), we need to reverse the bits first. 
; 
; Luckily pio has the mov instruction with `::` operator for bit reversal and we can use it with both source and destination being the OSR register. Since we are reading 16bit values per pull, the reverse will just move them from low 16bits to high 16 bits so in order to shift them we need to change the out direction to left. Finally, the mov on the OSR does not do autopull so we need to pull manually. 

.program ST7789_rgb16
; set aside 1 bit for the WRX 
.side_set 1
.fifo tx
.out 16 left

    ; the first pull happens when clock is low, then reverse the word while clock is low still
    pull              side 0
    mov osr, ::osr    side 0
.wrap_target
    out pins, 16      side 0 
    pull              side 0 
    mov osr, ::osr    side 1 [2]

% c-sdk {  

#include "rckid/rckid.h"

inline void ST7789_rgb16_program_init(PIO pio, uint sm, uint offset, uint wrPin, uint dataPin) {
    // claim the resources required for the continuous mode
    pio_gpio_init(pio, wrPin);
    pio_sm_set_consecutive_pindirs(pio, sm, wrPin, 1, true);
    pio_gpio_init(pio, dataPin);
    pio_gpio_init(pio, dataPin + 1);
    pio_gpio_init(pio, dataPin + 2);
    pio_gpio_init(pio, dataPin + 3);
    pio_gpio_init(pio, dataPin + 4);
    pio_gpio_init(pio, dataPin + 5);
    pio_gpio_init(pio, dataPin + 6);
    pio_gpio_init(pio, dataPin + 7);
    pio_gpio_init(pio, dataPin + 8);
    pio_gpio_init(pio, dataPin + 9);
    pio_gpio_init(pio, dataPin + 10);
    pio_gpio_init(pio, dataPin + 11);
    pio_gpio_init(pio, dataPin + 12);
    pio_gpio_init(pio, dataPin + 13);
    pio_gpio_init(pio, dataPin + 14);
    pio_gpio_init(pio, dataPin + 15);
    pio_sm_set_consecutive_pindirs(pio, sm, dataPin, 16, true);
    pio_sm_config c = ST7789_rgb16_program_get_default_config(offset);
    sm_config_set_sideset_pins(&c, wrPin);
    sm_config_set_out_pins(&c, dataPin, 16);
    //sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);
    // enable autopull
    sm_config_set_out_shift(&c, false, true, 16);
    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_clock_speed(pio, sm, RCKID_ST7789_SPEED * 4);
}

%}
